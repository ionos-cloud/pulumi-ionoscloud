# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AccessKeyArgs', 'AccessKey']

@pulumi.input_type
class AccessKeyArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input['AccessKeyTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a AccessKey resource.
        :param pulumi.Input[str] description: [string] Description of the Access key.
        :param pulumi.Input['AccessKeyTimeoutsArgs'] timeouts: Timeouts for this resource.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Description of the Access key.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['AccessKeyTimeoutsArgs']]:
        """
        Timeouts for this resource.
        """
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['AccessKeyTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _AccessKeyState:
    def __init__(__self__, *,
                 accesskey: Optional[pulumi.Input[str]] = None,
                 canonical_user_id: Optional[pulumi.Input[str]] = None,
                 contract_user_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 secretkey: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input['AccessKeyTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering AccessKey resources.
        :param pulumi.Input[str] accesskey: Access key metadata is a string of 92 characters.
        :param pulumi.Input[str] canonical_user_id: The canonical user ID which is valid for user-owned buckets.
        :param pulumi.Input[str] contract_user_id: The contract user ID which is valid for contract-owned buckets
        :param pulumi.Input[str] description: [string] Description of the Access key.
        :param pulumi.Input[str] secretkey: The secret key of the Access key.
        :param pulumi.Input['AccessKeyTimeoutsArgs'] timeouts: Timeouts for this resource.
        """
        if accesskey is not None:
            pulumi.set(__self__, "accesskey", accesskey)
        if canonical_user_id is not None:
            pulumi.set(__self__, "canonical_user_id", canonical_user_id)
        if contract_user_id is not None:
            pulumi.set(__self__, "contract_user_id", contract_user_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if secretkey is not None:
            pulumi.set(__self__, "secretkey", secretkey)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @property
    @pulumi.getter
    def accesskey(self) -> Optional[pulumi.Input[str]]:
        """
        Access key metadata is a string of 92 characters.
        """
        return pulumi.get(self, "accesskey")

    @accesskey.setter
    def accesskey(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accesskey", value)

    @property
    @pulumi.getter(name="canonicalUserId")
    def canonical_user_id(self) -> Optional[pulumi.Input[str]]:
        """
        The canonical user ID which is valid for user-owned buckets.
        """
        return pulumi.get(self, "canonical_user_id")

    @canonical_user_id.setter
    def canonical_user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "canonical_user_id", value)

    @property
    @pulumi.getter(name="contractUserId")
    def contract_user_id(self) -> Optional[pulumi.Input[str]]:
        """
        The contract user ID which is valid for contract-owned buckets
        """
        return pulumi.get(self, "contract_user_id")

    @contract_user_id.setter
    def contract_user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contract_user_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Description of the Access key.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def secretkey(self) -> Optional[pulumi.Input[str]]:
        """
        The secret key of the Access key.
        """
        return pulumi.get(self, "secretkey")

    @secretkey.setter
    def secretkey(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secretkey", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['AccessKeyTimeoutsArgs']]:
        """
        Timeouts for this resource.
        """
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['AccessKeyTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


class AccessKey(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input[Union['AccessKeyTimeoutsArgs', 'AccessKeyTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Manages an **Object Storage Accesskey** on IonosCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        example = ionoscloud.objectstorage.AccessKey("example", description="my description")
        ```

        ## Import

        An object storage accesskey resource can be imported using its `resource id`, e.g.

        ```sh
        $ pulumi import ionoscloud:objectstorage/accessKey:AccessKey demo objectStorageAccesskeyid
        ```

        This can be helpful when you want to import Object Storage Accesskeys which you have already created manually or using other means, outside of terraform.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: [string] Description of the Access key.
        :param pulumi.Input[Union['AccessKeyTimeoutsArgs', 'AccessKeyTimeoutsArgsDict']] timeouts: Timeouts for this resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AccessKeyArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an **Object Storage Accesskey** on IonosCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        example = ionoscloud.objectstorage.AccessKey("example", description="my description")
        ```

        ## Import

        An object storage accesskey resource can be imported using its `resource id`, e.g.

        ```sh
        $ pulumi import ionoscloud:objectstorage/accessKey:AccessKey demo objectStorageAccesskeyid
        ```

        This can be helpful when you want to import Object Storage Accesskeys which you have already created manually or using other means, outside of terraform.

        :param str resource_name: The name of the resource.
        :param AccessKeyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AccessKeyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input[Union['AccessKeyTimeoutsArgs', 'AccessKeyTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AccessKeyArgs.__new__(AccessKeyArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["accesskey"] = None
            __props__.__dict__["canonical_user_id"] = None
            __props__.__dict__["contract_user_id"] = None
            __props__.__dict__["secretkey"] = None
        super(AccessKey, __self__).__init__(
            'ionoscloud:objectstorage/accessKey:AccessKey',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accesskey: Optional[pulumi.Input[str]] = None,
            canonical_user_id: Optional[pulumi.Input[str]] = None,
            contract_user_id: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            secretkey: Optional[pulumi.Input[str]] = None,
            timeouts: Optional[pulumi.Input[Union['AccessKeyTimeoutsArgs', 'AccessKeyTimeoutsArgsDict']]] = None) -> 'AccessKey':
        """
        Get an existing AccessKey resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] accesskey: Access key metadata is a string of 92 characters.
        :param pulumi.Input[str] canonical_user_id: The canonical user ID which is valid for user-owned buckets.
        :param pulumi.Input[str] contract_user_id: The contract user ID which is valid for contract-owned buckets
        :param pulumi.Input[str] description: [string] Description of the Access key.
        :param pulumi.Input[str] secretkey: The secret key of the Access key.
        :param pulumi.Input[Union['AccessKeyTimeoutsArgs', 'AccessKeyTimeoutsArgsDict']] timeouts: Timeouts for this resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AccessKeyState.__new__(_AccessKeyState)

        __props__.__dict__["accesskey"] = accesskey
        __props__.__dict__["canonical_user_id"] = canonical_user_id
        __props__.__dict__["contract_user_id"] = contract_user_id
        __props__.__dict__["description"] = description
        __props__.__dict__["secretkey"] = secretkey
        __props__.__dict__["timeouts"] = timeouts
        return AccessKey(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def accesskey(self) -> pulumi.Output[str]:
        """
        Access key metadata is a string of 92 characters.
        """
        return pulumi.get(self, "accesskey")

    @property
    @pulumi.getter(name="canonicalUserId")
    def canonical_user_id(self) -> pulumi.Output[str]:
        """
        The canonical user ID which is valid for user-owned buckets.
        """
        return pulumi.get(self, "canonical_user_id")

    @property
    @pulumi.getter(name="contractUserId")
    def contract_user_id(self) -> pulumi.Output[str]:
        """
        The contract user ID which is valid for contract-owned buckets
        """
        return pulumi.get(self, "contract_user_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        [string] Description of the Access key.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def secretkey(self) -> pulumi.Output[str]:
        """
        The secret key of the Access key.
        """
        return pulumi.get(self, "secretkey")

    @property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.AccessKeyTimeouts']]:
        """
        Timeouts for this resource.
        """
        return pulumi.get(self, "timeouts")

