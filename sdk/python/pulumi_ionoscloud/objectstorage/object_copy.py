# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ObjectCopyArgs', 'ObjectCopy']

@pulumi.input_type
class ObjectCopyArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 key: pulumi.Input[str],
                 source: pulumi.Input[str],
                 cache_control: Optional[pulumi.Input[str]] = None,
                 content_disposition: Optional[pulumi.Input[str]] = None,
                 content_encoding: Optional[pulumi.Input[str]] = None,
                 content_language: Optional[pulumi.Input[str]] = None,
                 content_type: Optional[pulumi.Input[str]] = None,
                 copy_if_match: Optional[pulumi.Input[str]] = None,
                 copy_if_modified_since: Optional[pulumi.Input[str]] = None,
                 copy_if_none_match: Optional[pulumi.Input[str]] = None,
                 copy_if_unmodified_since: Optional[pulumi.Input[str]] = None,
                 expires: Optional[pulumi.Input[str]] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_directive: Optional[pulumi.Input[str]] = None,
                 object_lock_legal_hold: Optional[pulumi.Input[str]] = None,
                 object_lock_mode: Optional[pulumi.Input[str]] = None,
                 object_lock_retain_until_date: Optional[pulumi.Input[str]] = None,
                 server_side_encryption: Optional[pulumi.Input[str]] = None,
                 server_side_encryption_customer_algorithm: Optional[pulumi.Input[str]] = None,
                 server_side_encryption_customer_key: Optional[pulumi.Input[str]] = None,
                 server_side_encryption_customer_key_md5: Optional[pulumi.Input[str]] = None,
                 source_customer_algorithm: Optional[pulumi.Input[str]] = None,
                 source_customer_key: Optional[pulumi.Input[str]] = None,
                 source_customer_key_md5: Optional[pulumi.Input[str]] = None,
                 storage_class: Optional[pulumi.Input[str]] = None,
                 tagging_directive: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 website_redirect: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ObjectCopy resource.
        :param pulumi.Input[str] bucket: [string] The name of the bucket where the object will be stored. Must be between 3 and 63 characters.
        :param pulumi.Input[str] key: [string] The key of the object. Must be at least 1 character long.
        :param pulumi.Input[str] source: [string] The source of the object to be copied
        :param pulumi.Input[str] cache_control: [string] Specifies caching behavior along the request/reply chain.
        :param pulumi.Input[str] content_disposition: [string] Specifies presentational information for the object.
        :param pulumi.Input[str] content_encoding: [string] Specifies what content encodings have been applied to the object.
        :param pulumi.Input[str] content_language: [string] The natural language or languages of the intended audience for the object.
        :param pulumi.Input[str] content_type: [string] A standard MIME type describing the format of the contents.
        :param pulumi.Input[str] copy_if_match: Copies the object if its entity tag (ETag) matches the specified tag
        :param pulumi.Input[str] copy_if_modified_since: Copies the object if it has been modified since the specified time
        :param pulumi.Input[str] copy_if_none_match: Copies the object if its entity tag (ETag) is different than the specified ETag
        :param pulumi.Input[str] copy_if_unmodified_since: Copies the object if it hasn't been modified since the specified time
        :param pulumi.Input[str] expires: [string] The date and time at which the object is no longer cacheable.
        :param pulumi.Input[bool] force_destroy: [bool] If true, the object will be destroyed if versioning is enabled then all versions will be destroyed. Default is `false`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: [map] A map of metadata to store with the object in IONOS Object Storage. Metadata keys must be lowercase alphanumeric characters.
        :param pulumi.Input[str] metadata_directive: [string] Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request. Valid values are `COPY` and `REPLACE`.
        :param pulumi.Input[str] object_lock_legal_hold: [string] Indicates whether a legal hold is in effect for the object. Valid values are `ON` and `OFF`.
        :param pulumi.Input[str] object_lock_mode: [string] The object lock mode that you want to apply to the object. Valid values are `GOVERNANCE` and `COMPLIANCE`.
        :param pulumi.Input[str] object_lock_retain_until_date: [string] The date and time when the object lock retention expires.Must be in RFC3999 format
        :param pulumi.Input[str] server_side_encryption: [string] The server-side encryption algorithm used when storing this object in IONOS Object Storage. Valid value is AES256.
        :param pulumi.Input[str] server_side_encryption_customer_algorithm: [string] Specifies the algorithm to use for encrypting the object. Valid value is AES256.
        :param pulumi.Input[str] server_side_encryption_customer_key: [string] Specifies the 256-bit, base64-encoded encryption key to use to encrypt and decrypt your data.
        :param pulumi.Input[str] server_side_encryption_customer_key_md5: [string] Specifies the 128-bit MD5 digest of the encryption key.
        :param pulumi.Input[str] source_customer_algorithm: [string] Specifies the algorithm used for source object encryption. Valid value is AES256.
        :param pulumi.Input[str] source_customer_key: [string] Specifies the 256-bit, base64-encoded encryption key for source object encryption.
        :param pulumi.Input[str] source_customer_key_md5: [string] Specifies the 128-bit MD5 digest of the encryption key for source object encryption.
        :param pulumi.Input[str] storage_class: [string] The storage class of the object. Valid value is STANDARD. Default is STANDARD.
        :param pulumi.Input[str] tagging_directive: [string] Specifies whether the object tag-set is copied from the source object or replaced with tag-set provided in the request. Valid values are `COPY` and `REPLACE`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: [map] The tag-set for the object.
        :param pulumi.Input[str] website_redirect: [string] Redirects requests for this object to another object in the same bucket or to an external URL.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "source", source)
        if cache_control is not None:
            pulumi.set(__self__, "cache_control", cache_control)
        if content_disposition is not None:
            pulumi.set(__self__, "content_disposition", content_disposition)
        if content_encoding is not None:
            pulumi.set(__self__, "content_encoding", content_encoding)
        if content_language is not None:
            pulumi.set(__self__, "content_language", content_language)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if copy_if_match is not None:
            pulumi.set(__self__, "copy_if_match", copy_if_match)
        if copy_if_modified_since is not None:
            pulumi.set(__self__, "copy_if_modified_since", copy_if_modified_since)
        if copy_if_none_match is not None:
            pulumi.set(__self__, "copy_if_none_match", copy_if_none_match)
        if copy_if_unmodified_since is not None:
            pulumi.set(__self__, "copy_if_unmodified_since", copy_if_unmodified_since)
        if expires is not None:
            pulumi.set(__self__, "expires", expires)
        if force_destroy is not None:
            pulumi.set(__self__, "force_destroy", force_destroy)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_directive is not None:
            pulumi.set(__self__, "metadata_directive", metadata_directive)
        if object_lock_legal_hold is not None:
            pulumi.set(__self__, "object_lock_legal_hold", object_lock_legal_hold)
        if object_lock_mode is not None:
            pulumi.set(__self__, "object_lock_mode", object_lock_mode)
        if object_lock_retain_until_date is not None:
            pulumi.set(__self__, "object_lock_retain_until_date", object_lock_retain_until_date)
        if server_side_encryption is not None:
            pulumi.set(__self__, "server_side_encryption", server_side_encryption)
        if server_side_encryption_customer_algorithm is not None:
            pulumi.set(__self__, "server_side_encryption_customer_algorithm", server_side_encryption_customer_algorithm)
        if server_side_encryption_customer_key is not None:
            pulumi.set(__self__, "server_side_encryption_customer_key", server_side_encryption_customer_key)
        if server_side_encryption_customer_key_md5 is not None:
            pulumi.set(__self__, "server_side_encryption_customer_key_md5", server_side_encryption_customer_key_md5)
        if source_customer_algorithm is not None:
            pulumi.set(__self__, "source_customer_algorithm", source_customer_algorithm)
        if source_customer_key is not None:
            pulumi.set(__self__, "source_customer_key", source_customer_key)
        if source_customer_key_md5 is not None:
            pulumi.set(__self__, "source_customer_key_md5", source_customer_key_md5)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)
        if tagging_directive is not None:
            pulumi.set(__self__, "tagging_directive", tagging_directive)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if website_redirect is not None:
            pulumi.set(__self__, "website_redirect", website_redirect)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        [string] The name of the bucket where the object will be stored. Must be between 3 and 63 characters.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        [string] The key of the object. Must be at least 1 character long.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        """
        [string] The source of the object to be copied
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="cacheControl")
    def cache_control(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Specifies caching behavior along the request/reply chain.
        """
        return pulumi.get(self, "cache_control")

    @cache_control.setter
    def cache_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_control", value)

    @property
    @pulumi.getter(name="contentDisposition")
    def content_disposition(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Specifies presentational information for the object.
        """
        return pulumi.get(self, "content_disposition")

    @content_disposition.setter
    def content_disposition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_disposition", value)

    @property
    @pulumi.getter(name="contentEncoding")
    def content_encoding(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Specifies what content encodings have been applied to the object.
        """
        return pulumi.get(self, "content_encoding")

    @content_encoding.setter
    def content_encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_encoding", value)

    @property
    @pulumi.getter(name="contentLanguage")
    def content_language(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The natural language or languages of the intended audience for the object.
        """
        return pulumi.get(self, "content_language")

    @content_language.setter
    def content_language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_language", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[str]]:
        """
        [string] A standard MIME type describing the format of the contents.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="copyIfMatch")
    def copy_if_match(self) -> Optional[pulumi.Input[str]]:
        """
        Copies the object if its entity tag (ETag) matches the specified tag
        """
        return pulumi.get(self, "copy_if_match")

    @copy_if_match.setter
    def copy_if_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "copy_if_match", value)

    @property
    @pulumi.getter(name="copyIfModifiedSince")
    def copy_if_modified_since(self) -> Optional[pulumi.Input[str]]:
        """
        Copies the object if it has been modified since the specified time
        """
        return pulumi.get(self, "copy_if_modified_since")

    @copy_if_modified_since.setter
    def copy_if_modified_since(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "copy_if_modified_since", value)

    @property
    @pulumi.getter(name="copyIfNoneMatch")
    def copy_if_none_match(self) -> Optional[pulumi.Input[str]]:
        """
        Copies the object if its entity tag (ETag) is different than the specified ETag
        """
        return pulumi.get(self, "copy_if_none_match")

    @copy_if_none_match.setter
    def copy_if_none_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "copy_if_none_match", value)

    @property
    @pulumi.getter(name="copyIfUnmodifiedSince")
    def copy_if_unmodified_since(self) -> Optional[pulumi.Input[str]]:
        """
        Copies the object if it hasn't been modified since the specified time
        """
        return pulumi.get(self, "copy_if_unmodified_since")

    @copy_if_unmodified_since.setter
    def copy_if_unmodified_since(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "copy_if_unmodified_since", value)

    @property
    @pulumi.getter
    def expires(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The date and time at which the object is no longer cacheable.
        """
        return pulumi.get(self, "expires")

    @expires.setter
    def expires(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expires", value)

    @property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> Optional[pulumi.Input[bool]]:
        """
        [bool] If true, the object will be destroyed if versioning is enabled then all versions will be destroyed. Default is `false`.
        """
        return pulumi.get(self, "force_destroy")

    @force_destroy.setter
    def force_destroy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_destroy", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        [map] A map of metadata to store with the object in IONOS Object Storage. Metadata keys must be lowercase alphanumeric characters.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="metadataDirective")
    def metadata_directive(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request. Valid values are `COPY` and `REPLACE`.
        """
        return pulumi.get(self, "metadata_directive")

    @metadata_directive.setter
    def metadata_directive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata_directive", value)

    @property
    @pulumi.getter(name="objectLockLegalHold")
    def object_lock_legal_hold(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Indicates whether a legal hold is in effect for the object. Valid values are `ON` and `OFF`.
        """
        return pulumi.get(self, "object_lock_legal_hold")

    @object_lock_legal_hold.setter
    def object_lock_legal_hold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_lock_legal_hold", value)

    @property
    @pulumi.getter(name="objectLockMode")
    def object_lock_mode(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The object lock mode that you want to apply to the object. Valid values are `GOVERNANCE` and `COMPLIANCE`.
        """
        return pulumi.get(self, "object_lock_mode")

    @object_lock_mode.setter
    def object_lock_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_lock_mode", value)

    @property
    @pulumi.getter(name="objectLockRetainUntilDate")
    def object_lock_retain_until_date(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The date and time when the object lock retention expires.Must be in RFC3999 format
        """
        return pulumi.get(self, "object_lock_retain_until_date")

    @object_lock_retain_until_date.setter
    def object_lock_retain_until_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_lock_retain_until_date", value)

    @property
    @pulumi.getter(name="serverSideEncryption")
    def server_side_encryption(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The server-side encryption algorithm used when storing this object in IONOS Object Storage. Valid value is AES256.
        """
        return pulumi.get(self, "server_side_encryption")

    @server_side_encryption.setter
    def server_side_encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_side_encryption", value)

    @property
    @pulumi.getter(name="serverSideEncryptionCustomerAlgorithm")
    def server_side_encryption_customer_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Specifies the algorithm to use for encrypting the object. Valid value is AES256.
        """
        return pulumi.get(self, "server_side_encryption_customer_algorithm")

    @server_side_encryption_customer_algorithm.setter
    def server_side_encryption_customer_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_side_encryption_customer_algorithm", value)

    @property
    @pulumi.getter(name="serverSideEncryptionCustomerKey")
    def server_side_encryption_customer_key(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Specifies the 256-bit, base64-encoded encryption key to use to encrypt and decrypt your data.
        """
        return pulumi.get(self, "server_side_encryption_customer_key")

    @server_side_encryption_customer_key.setter
    def server_side_encryption_customer_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_side_encryption_customer_key", value)

    @property
    @pulumi.getter(name="serverSideEncryptionCustomerKeyMd5")
    def server_side_encryption_customer_key_md5(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Specifies the 128-bit MD5 digest of the encryption key.
        """
        return pulumi.get(self, "server_side_encryption_customer_key_md5")

    @server_side_encryption_customer_key_md5.setter
    def server_side_encryption_customer_key_md5(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_side_encryption_customer_key_md5", value)

    @property
    @pulumi.getter(name="sourceCustomerAlgorithm")
    def source_customer_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Specifies the algorithm used for source object encryption. Valid value is AES256.
        """
        return pulumi.get(self, "source_customer_algorithm")

    @source_customer_algorithm.setter
    def source_customer_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_customer_algorithm", value)

    @property
    @pulumi.getter(name="sourceCustomerKey")
    def source_customer_key(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Specifies the 256-bit, base64-encoded encryption key for source object encryption.
        """
        return pulumi.get(self, "source_customer_key")

    @source_customer_key.setter
    def source_customer_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_customer_key", value)

    @property
    @pulumi.getter(name="sourceCustomerKeyMd5")
    def source_customer_key_md5(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Specifies the 128-bit MD5 digest of the encryption key for source object encryption.
        """
        return pulumi.get(self, "source_customer_key_md5")

    @source_customer_key_md5.setter
    def source_customer_key_md5(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_customer_key_md5", value)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The storage class of the object. Valid value is STANDARD. Default is STANDARD.
        """
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_class", value)

    @property
    @pulumi.getter(name="taggingDirective")
    def tagging_directive(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Specifies whether the object tag-set is copied from the source object or replaced with tag-set provided in the request. Valid values are `COPY` and `REPLACE`.
        """
        return pulumi.get(self, "tagging_directive")

    @tagging_directive.setter
    def tagging_directive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tagging_directive", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        [map] The tag-set for the object.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="websiteRedirect")
    def website_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Redirects requests for this object to another object in the same bucket or to an external URL.
        """
        return pulumi.get(self, "website_redirect")

    @website_redirect.setter
    def website_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "website_redirect", value)


@pulumi.input_type
class _ObjectCopyState:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 cache_control: Optional[pulumi.Input[str]] = None,
                 content_disposition: Optional[pulumi.Input[str]] = None,
                 content_encoding: Optional[pulumi.Input[str]] = None,
                 content_language: Optional[pulumi.Input[str]] = None,
                 content_type: Optional[pulumi.Input[str]] = None,
                 copy_if_match: Optional[pulumi.Input[str]] = None,
                 copy_if_modified_since: Optional[pulumi.Input[str]] = None,
                 copy_if_none_match: Optional[pulumi.Input[str]] = None,
                 copy_if_unmodified_since: Optional[pulumi.Input[str]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 expires: Optional[pulumi.Input[str]] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 last_modified: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_directive: Optional[pulumi.Input[str]] = None,
                 object_lock_legal_hold: Optional[pulumi.Input[str]] = None,
                 object_lock_mode: Optional[pulumi.Input[str]] = None,
                 object_lock_retain_until_date: Optional[pulumi.Input[str]] = None,
                 server_side_encryption: Optional[pulumi.Input[str]] = None,
                 server_side_encryption_customer_algorithm: Optional[pulumi.Input[str]] = None,
                 server_side_encryption_customer_key: Optional[pulumi.Input[str]] = None,
                 server_side_encryption_customer_key_md5: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_customer_algorithm: Optional[pulumi.Input[str]] = None,
                 source_customer_key: Optional[pulumi.Input[str]] = None,
                 source_customer_key_md5: Optional[pulumi.Input[str]] = None,
                 storage_class: Optional[pulumi.Input[str]] = None,
                 tagging_directive: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 version_id: Optional[pulumi.Input[str]] = None,
                 website_redirect: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ObjectCopy resources.
        :param pulumi.Input[str] bucket: [string] The name of the bucket where the object will be stored. Must be between 3 and 63 characters.
        :param pulumi.Input[str] cache_control: [string] Specifies caching behavior along the request/reply chain.
        :param pulumi.Input[str] content_disposition: [string] Specifies presentational information for the object.
        :param pulumi.Input[str] content_encoding: [string] Specifies what content encodings have been applied to the object.
        :param pulumi.Input[str] content_language: [string] The natural language or languages of the intended audience for the object.
        :param pulumi.Input[str] content_type: [string] A standard MIME type describing the format of the contents.
        :param pulumi.Input[str] copy_if_match: Copies the object if its entity tag (ETag) matches the specified tag
        :param pulumi.Input[str] copy_if_modified_since: Copies the object if it has been modified since the specified time
        :param pulumi.Input[str] copy_if_none_match: Copies the object if its entity tag (ETag) is different than the specified ETag
        :param pulumi.Input[str] copy_if_unmodified_since: Copies the object if it hasn't been modified since the specified time
        :param pulumi.Input[str] etag: [string] An entity tag (ETag) is an opaque identifier assigned by a web server to a specific version of a resource found at a URL.
        :param pulumi.Input[str] expires: [string] The date and time at which the object is no longer cacheable.
        :param pulumi.Input[bool] force_destroy: [bool] If true, the object will be destroyed if versioning is enabled then all versions will be destroyed. Default is `false`.
        :param pulumi.Input[str] key: [string] The key of the object. Must be at least 1 character long.
        :param pulumi.Input[str] last_modified: [string] The date and time at which the object was last modified.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: [map] A map of metadata to store with the object in IONOS Object Storage. Metadata keys must be lowercase alphanumeric characters.
        :param pulumi.Input[str] metadata_directive: [string] Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request. Valid values are `COPY` and `REPLACE`.
        :param pulumi.Input[str] object_lock_legal_hold: [string] Indicates whether a legal hold is in effect for the object. Valid values are `ON` and `OFF`.
        :param pulumi.Input[str] object_lock_mode: [string] The object lock mode that you want to apply to the object. Valid values are `GOVERNANCE` and `COMPLIANCE`.
        :param pulumi.Input[str] object_lock_retain_until_date: [string] The date and time when the object lock retention expires.Must be in RFC3999 format
        :param pulumi.Input[str] server_side_encryption: [string] The server-side encryption algorithm used when storing this object in IONOS Object Storage. Valid value is AES256.
        :param pulumi.Input[str] server_side_encryption_customer_algorithm: [string] Specifies the algorithm to use for encrypting the object. Valid value is AES256.
        :param pulumi.Input[str] server_side_encryption_customer_key: [string] Specifies the 256-bit, base64-encoded encryption key to use to encrypt and decrypt your data.
        :param pulumi.Input[str] server_side_encryption_customer_key_md5: [string] Specifies the 128-bit MD5 digest of the encryption key.
        :param pulumi.Input[str] source: [string] The source of the object to be copied
        :param pulumi.Input[str] source_customer_algorithm: [string] Specifies the algorithm used for source object encryption. Valid value is AES256.
        :param pulumi.Input[str] source_customer_key: [string] Specifies the 256-bit, base64-encoded encryption key for source object encryption.
        :param pulumi.Input[str] source_customer_key_md5: [string] Specifies the 128-bit MD5 digest of the encryption key for source object encryption.
        :param pulumi.Input[str] storage_class: [string] The storage class of the object. Valid value is STANDARD. Default is STANDARD.
        :param pulumi.Input[str] tagging_directive: [string] Specifies whether the object tag-set is copied from the source object or replaced with tag-set provided in the request. Valid values are `COPY` and `REPLACE`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: [map] The tag-set for the object.
        :param pulumi.Input[str] version_id: [string] The version of the object.
        :param pulumi.Input[str] website_redirect: [string] Redirects requests for this object to another object in the same bucket or to an external URL.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if cache_control is not None:
            pulumi.set(__self__, "cache_control", cache_control)
        if content_disposition is not None:
            pulumi.set(__self__, "content_disposition", content_disposition)
        if content_encoding is not None:
            pulumi.set(__self__, "content_encoding", content_encoding)
        if content_language is not None:
            pulumi.set(__self__, "content_language", content_language)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if copy_if_match is not None:
            pulumi.set(__self__, "copy_if_match", copy_if_match)
        if copy_if_modified_since is not None:
            pulumi.set(__self__, "copy_if_modified_since", copy_if_modified_since)
        if copy_if_none_match is not None:
            pulumi.set(__self__, "copy_if_none_match", copy_if_none_match)
        if copy_if_unmodified_since is not None:
            pulumi.set(__self__, "copy_if_unmodified_since", copy_if_unmodified_since)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if expires is not None:
            pulumi.set(__self__, "expires", expires)
        if force_destroy is not None:
            pulumi.set(__self__, "force_destroy", force_destroy)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_directive is not None:
            pulumi.set(__self__, "metadata_directive", metadata_directive)
        if object_lock_legal_hold is not None:
            pulumi.set(__self__, "object_lock_legal_hold", object_lock_legal_hold)
        if object_lock_mode is not None:
            pulumi.set(__self__, "object_lock_mode", object_lock_mode)
        if object_lock_retain_until_date is not None:
            pulumi.set(__self__, "object_lock_retain_until_date", object_lock_retain_until_date)
        if server_side_encryption is not None:
            pulumi.set(__self__, "server_side_encryption", server_side_encryption)
        if server_side_encryption_customer_algorithm is not None:
            pulumi.set(__self__, "server_side_encryption_customer_algorithm", server_side_encryption_customer_algorithm)
        if server_side_encryption_customer_key is not None:
            pulumi.set(__self__, "server_side_encryption_customer_key", server_side_encryption_customer_key)
        if server_side_encryption_customer_key_md5 is not None:
            pulumi.set(__self__, "server_side_encryption_customer_key_md5", server_side_encryption_customer_key_md5)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_customer_algorithm is not None:
            pulumi.set(__self__, "source_customer_algorithm", source_customer_algorithm)
        if source_customer_key is not None:
            pulumi.set(__self__, "source_customer_key", source_customer_key)
        if source_customer_key_md5 is not None:
            pulumi.set(__self__, "source_customer_key_md5", source_customer_key_md5)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)
        if tagging_directive is not None:
            pulumi.set(__self__, "tagging_directive", tagging_directive)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if version_id is not None:
            pulumi.set(__self__, "version_id", version_id)
        if website_redirect is not None:
            pulumi.set(__self__, "website_redirect", website_redirect)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The name of the bucket where the object will be stored. Must be between 3 and 63 characters.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="cacheControl")
    def cache_control(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Specifies caching behavior along the request/reply chain.
        """
        return pulumi.get(self, "cache_control")

    @cache_control.setter
    def cache_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_control", value)

    @property
    @pulumi.getter(name="contentDisposition")
    def content_disposition(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Specifies presentational information for the object.
        """
        return pulumi.get(self, "content_disposition")

    @content_disposition.setter
    def content_disposition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_disposition", value)

    @property
    @pulumi.getter(name="contentEncoding")
    def content_encoding(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Specifies what content encodings have been applied to the object.
        """
        return pulumi.get(self, "content_encoding")

    @content_encoding.setter
    def content_encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_encoding", value)

    @property
    @pulumi.getter(name="contentLanguage")
    def content_language(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The natural language or languages of the intended audience for the object.
        """
        return pulumi.get(self, "content_language")

    @content_language.setter
    def content_language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_language", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[str]]:
        """
        [string] A standard MIME type describing the format of the contents.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="copyIfMatch")
    def copy_if_match(self) -> Optional[pulumi.Input[str]]:
        """
        Copies the object if its entity tag (ETag) matches the specified tag
        """
        return pulumi.get(self, "copy_if_match")

    @copy_if_match.setter
    def copy_if_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "copy_if_match", value)

    @property
    @pulumi.getter(name="copyIfModifiedSince")
    def copy_if_modified_since(self) -> Optional[pulumi.Input[str]]:
        """
        Copies the object if it has been modified since the specified time
        """
        return pulumi.get(self, "copy_if_modified_since")

    @copy_if_modified_since.setter
    def copy_if_modified_since(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "copy_if_modified_since", value)

    @property
    @pulumi.getter(name="copyIfNoneMatch")
    def copy_if_none_match(self) -> Optional[pulumi.Input[str]]:
        """
        Copies the object if its entity tag (ETag) is different than the specified ETag
        """
        return pulumi.get(self, "copy_if_none_match")

    @copy_if_none_match.setter
    def copy_if_none_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "copy_if_none_match", value)

    @property
    @pulumi.getter(name="copyIfUnmodifiedSince")
    def copy_if_unmodified_since(self) -> Optional[pulumi.Input[str]]:
        """
        Copies the object if it hasn't been modified since the specified time
        """
        return pulumi.get(self, "copy_if_unmodified_since")

    @copy_if_unmodified_since.setter
    def copy_if_unmodified_since(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "copy_if_unmodified_since", value)

    @property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[str]]:
        """
        [string] An entity tag (ETag) is an opaque identifier assigned by a web server to a specific version of a resource found at a URL.
        """
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etag", value)

    @property
    @pulumi.getter
    def expires(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The date and time at which the object is no longer cacheable.
        """
        return pulumi.get(self, "expires")

    @expires.setter
    def expires(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expires", value)

    @property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> Optional[pulumi.Input[bool]]:
        """
        [bool] If true, the object will be destroyed if versioning is enabled then all versions will be destroyed. Default is `false`.
        """
        return pulumi.get(self, "force_destroy")

    @force_destroy.setter
    def force_destroy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_destroy", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The key of the object. Must be at least 1 character long.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The date and time at which the object was last modified.
        """
        return pulumi.get(self, "last_modified")

    @last_modified.setter
    def last_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_modified", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        [map] A map of metadata to store with the object in IONOS Object Storage. Metadata keys must be lowercase alphanumeric characters.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="metadataDirective")
    def metadata_directive(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request. Valid values are `COPY` and `REPLACE`.
        """
        return pulumi.get(self, "metadata_directive")

    @metadata_directive.setter
    def metadata_directive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata_directive", value)

    @property
    @pulumi.getter(name="objectLockLegalHold")
    def object_lock_legal_hold(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Indicates whether a legal hold is in effect for the object. Valid values are `ON` and `OFF`.
        """
        return pulumi.get(self, "object_lock_legal_hold")

    @object_lock_legal_hold.setter
    def object_lock_legal_hold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_lock_legal_hold", value)

    @property
    @pulumi.getter(name="objectLockMode")
    def object_lock_mode(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The object lock mode that you want to apply to the object. Valid values are `GOVERNANCE` and `COMPLIANCE`.
        """
        return pulumi.get(self, "object_lock_mode")

    @object_lock_mode.setter
    def object_lock_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_lock_mode", value)

    @property
    @pulumi.getter(name="objectLockRetainUntilDate")
    def object_lock_retain_until_date(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The date and time when the object lock retention expires.Must be in RFC3999 format
        """
        return pulumi.get(self, "object_lock_retain_until_date")

    @object_lock_retain_until_date.setter
    def object_lock_retain_until_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_lock_retain_until_date", value)

    @property
    @pulumi.getter(name="serverSideEncryption")
    def server_side_encryption(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The server-side encryption algorithm used when storing this object in IONOS Object Storage. Valid value is AES256.
        """
        return pulumi.get(self, "server_side_encryption")

    @server_side_encryption.setter
    def server_side_encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_side_encryption", value)

    @property
    @pulumi.getter(name="serverSideEncryptionCustomerAlgorithm")
    def server_side_encryption_customer_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Specifies the algorithm to use for encrypting the object. Valid value is AES256.
        """
        return pulumi.get(self, "server_side_encryption_customer_algorithm")

    @server_side_encryption_customer_algorithm.setter
    def server_side_encryption_customer_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_side_encryption_customer_algorithm", value)

    @property
    @pulumi.getter(name="serverSideEncryptionCustomerKey")
    def server_side_encryption_customer_key(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Specifies the 256-bit, base64-encoded encryption key to use to encrypt and decrypt your data.
        """
        return pulumi.get(self, "server_side_encryption_customer_key")

    @server_side_encryption_customer_key.setter
    def server_side_encryption_customer_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_side_encryption_customer_key", value)

    @property
    @pulumi.getter(name="serverSideEncryptionCustomerKeyMd5")
    def server_side_encryption_customer_key_md5(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Specifies the 128-bit MD5 digest of the encryption key.
        """
        return pulumi.get(self, "server_side_encryption_customer_key_md5")

    @server_side_encryption_customer_key_md5.setter
    def server_side_encryption_customer_key_md5(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_side_encryption_customer_key_md5", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The source of the object to be copied
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="sourceCustomerAlgorithm")
    def source_customer_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Specifies the algorithm used for source object encryption. Valid value is AES256.
        """
        return pulumi.get(self, "source_customer_algorithm")

    @source_customer_algorithm.setter
    def source_customer_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_customer_algorithm", value)

    @property
    @pulumi.getter(name="sourceCustomerKey")
    def source_customer_key(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Specifies the 256-bit, base64-encoded encryption key for source object encryption.
        """
        return pulumi.get(self, "source_customer_key")

    @source_customer_key.setter
    def source_customer_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_customer_key", value)

    @property
    @pulumi.getter(name="sourceCustomerKeyMd5")
    def source_customer_key_md5(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Specifies the 128-bit MD5 digest of the encryption key for source object encryption.
        """
        return pulumi.get(self, "source_customer_key_md5")

    @source_customer_key_md5.setter
    def source_customer_key_md5(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_customer_key_md5", value)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The storage class of the object. Valid value is STANDARD. Default is STANDARD.
        """
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_class", value)

    @property
    @pulumi.getter(name="taggingDirective")
    def tagging_directive(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Specifies whether the object tag-set is copied from the source object or replaced with tag-set provided in the request. Valid values are `COPY` and `REPLACE`.
        """
        return pulumi.get(self, "tagging_directive")

    @tagging_directive.setter
    def tagging_directive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tagging_directive", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        [map] The tag-set for the object.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="versionId")
    def version_id(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The version of the object.
        """
        return pulumi.get(self, "version_id")

    @version_id.setter
    def version_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_id", value)

    @property
    @pulumi.getter(name="websiteRedirect")
    def website_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Redirects requests for this object to another object in the same bucket or to an external URL.
        """
        return pulumi.get(self, "website_redirect")

    @website_redirect.setter
    def website_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "website_redirect", value)


class ObjectCopy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 cache_control: Optional[pulumi.Input[str]] = None,
                 content_disposition: Optional[pulumi.Input[str]] = None,
                 content_encoding: Optional[pulumi.Input[str]] = None,
                 content_language: Optional[pulumi.Input[str]] = None,
                 content_type: Optional[pulumi.Input[str]] = None,
                 copy_if_match: Optional[pulumi.Input[str]] = None,
                 copy_if_modified_since: Optional[pulumi.Input[str]] = None,
                 copy_if_none_match: Optional[pulumi.Input[str]] = None,
                 copy_if_unmodified_since: Optional[pulumi.Input[str]] = None,
                 expires: Optional[pulumi.Input[str]] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_directive: Optional[pulumi.Input[str]] = None,
                 object_lock_legal_hold: Optional[pulumi.Input[str]] = None,
                 object_lock_mode: Optional[pulumi.Input[str]] = None,
                 object_lock_retain_until_date: Optional[pulumi.Input[str]] = None,
                 server_side_encryption: Optional[pulumi.Input[str]] = None,
                 server_side_encryption_customer_algorithm: Optional[pulumi.Input[str]] = None,
                 server_side_encryption_customer_key: Optional[pulumi.Input[str]] = None,
                 server_side_encryption_customer_key_md5: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_customer_algorithm: Optional[pulumi.Input[str]] = None,
                 source_customer_key: Optional[pulumi.Input[str]] = None,
                 source_customer_key_md5: Optional[pulumi.Input[str]] = None,
                 storage_class: Optional[pulumi.Input[str]] = None,
                 tagging_directive: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 website_redirect: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates a copy of an object that is already stored in IONOS Object Storage.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        source = ionoscloud.objectstorage.Bucket("source", name="source")
        target = ionoscloud.objectstorage.Bucket("target", name="target")
        source_bucket_object = ionoscloud.objectstorage.BucketObject("source",
            bucket=source.name,
            key="source_object",
            content="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
            content_type="application/octet-stream")
        example = ionoscloud.objectstorage.ObjectCopy("example",
            bucket=target.name,
            key="example",
            source=pulumi.Output.all(
                name=source.name,
                key=source_bucket_object.key
        ).apply(lambda resolved_outputs: f"{resolved_outputs['name']}/{resolved_outputs['key']}")
        )
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: [string] The name of the bucket where the object will be stored. Must be between 3 and 63 characters.
        :param pulumi.Input[str] cache_control: [string] Specifies caching behavior along the request/reply chain.
        :param pulumi.Input[str] content_disposition: [string] Specifies presentational information for the object.
        :param pulumi.Input[str] content_encoding: [string] Specifies what content encodings have been applied to the object.
        :param pulumi.Input[str] content_language: [string] The natural language or languages of the intended audience for the object.
        :param pulumi.Input[str] content_type: [string] A standard MIME type describing the format of the contents.
        :param pulumi.Input[str] copy_if_match: Copies the object if its entity tag (ETag) matches the specified tag
        :param pulumi.Input[str] copy_if_modified_since: Copies the object if it has been modified since the specified time
        :param pulumi.Input[str] copy_if_none_match: Copies the object if its entity tag (ETag) is different than the specified ETag
        :param pulumi.Input[str] copy_if_unmodified_since: Copies the object if it hasn't been modified since the specified time
        :param pulumi.Input[str] expires: [string] The date and time at which the object is no longer cacheable.
        :param pulumi.Input[bool] force_destroy: [bool] If true, the object will be destroyed if versioning is enabled then all versions will be destroyed. Default is `false`.
        :param pulumi.Input[str] key: [string] The key of the object. Must be at least 1 character long.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: [map] A map of metadata to store with the object in IONOS Object Storage. Metadata keys must be lowercase alphanumeric characters.
        :param pulumi.Input[str] metadata_directive: [string] Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request. Valid values are `COPY` and `REPLACE`.
        :param pulumi.Input[str] object_lock_legal_hold: [string] Indicates whether a legal hold is in effect for the object. Valid values are `ON` and `OFF`.
        :param pulumi.Input[str] object_lock_mode: [string] The object lock mode that you want to apply to the object. Valid values are `GOVERNANCE` and `COMPLIANCE`.
        :param pulumi.Input[str] object_lock_retain_until_date: [string] The date and time when the object lock retention expires.Must be in RFC3999 format
        :param pulumi.Input[str] server_side_encryption: [string] The server-side encryption algorithm used when storing this object in IONOS Object Storage. Valid value is AES256.
        :param pulumi.Input[str] server_side_encryption_customer_algorithm: [string] Specifies the algorithm to use for encrypting the object. Valid value is AES256.
        :param pulumi.Input[str] server_side_encryption_customer_key: [string] Specifies the 256-bit, base64-encoded encryption key to use to encrypt and decrypt your data.
        :param pulumi.Input[str] server_side_encryption_customer_key_md5: [string] Specifies the 128-bit MD5 digest of the encryption key.
        :param pulumi.Input[str] source: [string] The source of the object to be copied
        :param pulumi.Input[str] source_customer_algorithm: [string] Specifies the algorithm used for source object encryption. Valid value is AES256.
        :param pulumi.Input[str] source_customer_key: [string] Specifies the 256-bit, base64-encoded encryption key for source object encryption.
        :param pulumi.Input[str] source_customer_key_md5: [string] Specifies the 128-bit MD5 digest of the encryption key for source object encryption.
        :param pulumi.Input[str] storage_class: [string] The storage class of the object. Valid value is STANDARD. Default is STANDARD.
        :param pulumi.Input[str] tagging_directive: [string] Specifies whether the object tag-set is copied from the source object or replaced with tag-set provided in the request. Valid values are `COPY` and `REPLACE`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: [map] The tag-set for the object.
        :param pulumi.Input[str] website_redirect: [string] Redirects requests for this object to another object in the same bucket or to an external URL.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ObjectCopyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a copy of an object that is already stored in IONOS Object Storage.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        source = ionoscloud.objectstorage.Bucket("source", name="source")
        target = ionoscloud.objectstorage.Bucket("target", name="target")
        source_bucket_object = ionoscloud.objectstorage.BucketObject("source",
            bucket=source.name,
            key="source_object",
            content="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
            content_type="application/octet-stream")
        example = ionoscloud.objectstorage.ObjectCopy("example",
            bucket=target.name,
            key="example",
            source=pulumi.Output.all(
                name=source.name,
                key=source_bucket_object.key
        ).apply(lambda resolved_outputs: f"{resolved_outputs['name']}/{resolved_outputs['key']}")
        )
        ```

        :param str resource_name: The name of the resource.
        :param ObjectCopyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ObjectCopyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 cache_control: Optional[pulumi.Input[str]] = None,
                 content_disposition: Optional[pulumi.Input[str]] = None,
                 content_encoding: Optional[pulumi.Input[str]] = None,
                 content_language: Optional[pulumi.Input[str]] = None,
                 content_type: Optional[pulumi.Input[str]] = None,
                 copy_if_match: Optional[pulumi.Input[str]] = None,
                 copy_if_modified_since: Optional[pulumi.Input[str]] = None,
                 copy_if_none_match: Optional[pulumi.Input[str]] = None,
                 copy_if_unmodified_since: Optional[pulumi.Input[str]] = None,
                 expires: Optional[pulumi.Input[str]] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata_directive: Optional[pulumi.Input[str]] = None,
                 object_lock_legal_hold: Optional[pulumi.Input[str]] = None,
                 object_lock_mode: Optional[pulumi.Input[str]] = None,
                 object_lock_retain_until_date: Optional[pulumi.Input[str]] = None,
                 server_side_encryption: Optional[pulumi.Input[str]] = None,
                 server_side_encryption_customer_algorithm: Optional[pulumi.Input[str]] = None,
                 server_side_encryption_customer_key: Optional[pulumi.Input[str]] = None,
                 server_side_encryption_customer_key_md5: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_customer_algorithm: Optional[pulumi.Input[str]] = None,
                 source_customer_key: Optional[pulumi.Input[str]] = None,
                 source_customer_key_md5: Optional[pulumi.Input[str]] = None,
                 storage_class: Optional[pulumi.Input[str]] = None,
                 tagging_directive: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 website_redirect: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ObjectCopyArgs.__new__(ObjectCopyArgs)

            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__.__dict__["bucket"] = bucket
            __props__.__dict__["cache_control"] = cache_control
            __props__.__dict__["content_disposition"] = content_disposition
            __props__.__dict__["content_encoding"] = content_encoding
            __props__.__dict__["content_language"] = content_language
            __props__.__dict__["content_type"] = content_type
            __props__.__dict__["copy_if_match"] = copy_if_match
            __props__.__dict__["copy_if_modified_since"] = copy_if_modified_since
            __props__.__dict__["copy_if_none_match"] = copy_if_none_match
            __props__.__dict__["copy_if_unmodified_since"] = copy_if_unmodified_since
            __props__.__dict__["expires"] = expires
            __props__.__dict__["force_destroy"] = force_destroy
            if key is None and not opts.urn:
                raise TypeError("Missing required property 'key'")
            __props__.__dict__["key"] = key
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["metadata_directive"] = metadata_directive
            __props__.__dict__["object_lock_legal_hold"] = object_lock_legal_hold
            __props__.__dict__["object_lock_mode"] = object_lock_mode
            __props__.__dict__["object_lock_retain_until_date"] = object_lock_retain_until_date
            __props__.__dict__["server_side_encryption"] = server_side_encryption
            __props__.__dict__["server_side_encryption_customer_algorithm"] = server_side_encryption_customer_algorithm
            __props__.__dict__["server_side_encryption_customer_key"] = server_side_encryption_customer_key
            __props__.__dict__["server_side_encryption_customer_key_md5"] = server_side_encryption_customer_key_md5
            if source is None and not opts.urn:
                raise TypeError("Missing required property 'source'")
            __props__.__dict__["source"] = source
            __props__.__dict__["source_customer_algorithm"] = source_customer_algorithm
            __props__.__dict__["source_customer_key"] = source_customer_key
            __props__.__dict__["source_customer_key_md5"] = source_customer_key_md5
            __props__.__dict__["storage_class"] = storage_class
            __props__.__dict__["tagging_directive"] = tagging_directive
            __props__.__dict__["tags"] = tags
            __props__.__dict__["website_redirect"] = website_redirect
            __props__.__dict__["etag"] = None
            __props__.__dict__["last_modified"] = None
            __props__.__dict__["version_id"] = None
        super(ObjectCopy, __self__).__init__(
            'ionoscloud:objectstorage/objectCopy:ObjectCopy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket: Optional[pulumi.Input[str]] = None,
            cache_control: Optional[pulumi.Input[str]] = None,
            content_disposition: Optional[pulumi.Input[str]] = None,
            content_encoding: Optional[pulumi.Input[str]] = None,
            content_language: Optional[pulumi.Input[str]] = None,
            content_type: Optional[pulumi.Input[str]] = None,
            copy_if_match: Optional[pulumi.Input[str]] = None,
            copy_if_modified_since: Optional[pulumi.Input[str]] = None,
            copy_if_none_match: Optional[pulumi.Input[str]] = None,
            copy_if_unmodified_since: Optional[pulumi.Input[str]] = None,
            etag: Optional[pulumi.Input[str]] = None,
            expires: Optional[pulumi.Input[str]] = None,
            force_destroy: Optional[pulumi.Input[bool]] = None,
            key: Optional[pulumi.Input[str]] = None,
            last_modified: Optional[pulumi.Input[str]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            metadata_directive: Optional[pulumi.Input[str]] = None,
            object_lock_legal_hold: Optional[pulumi.Input[str]] = None,
            object_lock_mode: Optional[pulumi.Input[str]] = None,
            object_lock_retain_until_date: Optional[pulumi.Input[str]] = None,
            server_side_encryption: Optional[pulumi.Input[str]] = None,
            server_side_encryption_customer_algorithm: Optional[pulumi.Input[str]] = None,
            server_side_encryption_customer_key: Optional[pulumi.Input[str]] = None,
            server_side_encryption_customer_key_md5: Optional[pulumi.Input[str]] = None,
            source: Optional[pulumi.Input[str]] = None,
            source_customer_algorithm: Optional[pulumi.Input[str]] = None,
            source_customer_key: Optional[pulumi.Input[str]] = None,
            source_customer_key_md5: Optional[pulumi.Input[str]] = None,
            storage_class: Optional[pulumi.Input[str]] = None,
            tagging_directive: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            version_id: Optional[pulumi.Input[str]] = None,
            website_redirect: Optional[pulumi.Input[str]] = None) -> 'ObjectCopy':
        """
        Get an existing ObjectCopy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: [string] The name of the bucket where the object will be stored. Must be between 3 and 63 characters.
        :param pulumi.Input[str] cache_control: [string] Specifies caching behavior along the request/reply chain.
        :param pulumi.Input[str] content_disposition: [string] Specifies presentational information for the object.
        :param pulumi.Input[str] content_encoding: [string] Specifies what content encodings have been applied to the object.
        :param pulumi.Input[str] content_language: [string] The natural language or languages of the intended audience for the object.
        :param pulumi.Input[str] content_type: [string] A standard MIME type describing the format of the contents.
        :param pulumi.Input[str] copy_if_match: Copies the object if its entity tag (ETag) matches the specified tag
        :param pulumi.Input[str] copy_if_modified_since: Copies the object if it has been modified since the specified time
        :param pulumi.Input[str] copy_if_none_match: Copies the object if its entity tag (ETag) is different than the specified ETag
        :param pulumi.Input[str] copy_if_unmodified_since: Copies the object if it hasn't been modified since the specified time
        :param pulumi.Input[str] etag: [string] An entity tag (ETag) is an opaque identifier assigned by a web server to a specific version of a resource found at a URL.
        :param pulumi.Input[str] expires: [string] The date and time at which the object is no longer cacheable.
        :param pulumi.Input[bool] force_destroy: [bool] If true, the object will be destroyed if versioning is enabled then all versions will be destroyed. Default is `false`.
        :param pulumi.Input[str] key: [string] The key of the object. Must be at least 1 character long.
        :param pulumi.Input[str] last_modified: [string] The date and time at which the object was last modified.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: [map] A map of metadata to store with the object in IONOS Object Storage. Metadata keys must be lowercase alphanumeric characters.
        :param pulumi.Input[str] metadata_directive: [string] Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request. Valid values are `COPY` and `REPLACE`.
        :param pulumi.Input[str] object_lock_legal_hold: [string] Indicates whether a legal hold is in effect for the object. Valid values are `ON` and `OFF`.
        :param pulumi.Input[str] object_lock_mode: [string] The object lock mode that you want to apply to the object. Valid values are `GOVERNANCE` and `COMPLIANCE`.
        :param pulumi.Input[str] object_lock_retain_until_date: [string] The date and time when the object lock retention expires.Must be in RFC3999 format
        :param pulumi.Input[str] server_side_encryption: [string] The server-side encryption algorithm used when storing this object in IONOS Object Storage. Valid value is AES256.
        :param pulumi.Input[str] server_side_encryption_customer_algorithm: [string] Specifies the algorithm to use for encrypting the object. Valid value is AES256.
        :param pulumi.Input[str] server_side_encryption_customer_key: [string] Specifies the 256-bit, base64-encoded encryption key to use to encrypt and decrypt your data.
        :param pulumi.Input[str] server_side_encryption_customer_key_md5: [string] Specifies the 128-bit MD5 digest of the encryption key.
        :param pulumi.Input[str] source: [string] The source of the object to be copied
        :param pulumi.Input[str] source_customer_algorithm: [string] Specifies the algorithm used for source object encryption. Valid value is AES256.
        :param pulumi.Input[str] source_customer_key: [string] Specifies the 256-bit, base64-encoded encryption key for source object encryption.
        :param pulumi.Input[str] source_customer_key_md5: [string] Specifies the 128-bit MD5 digest of the encryption key for source object encryption.
        :param pulumi.Input[str] storage_class: [string] The storage class of the object. Valid value is STANDARD. Default is STANDARD.
        :param pulumi.Input[str] tagging_directive: [string] Specifies whether the object tag-set is copied from the source object or replaced with tag-set provided in the request. Valid values are `COPY` and `REPLACE`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: [map] The tag-set for the object.
        :param pulumi.Input[str] version_id: [string] The version of the object.
        :param pulumi.Input[str] website_redirect: [string] Redirects requests for this object to another object in the same bucket or to an external URL.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ObjectCopyState.__new__(_ObjectCopyState)

        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["cache_control"] = cache_control
        __props__.__dict__["content_disposition"] = content_disposition
        __props__.__dict__["content_encoding"] = content_encoding
        __props__.__dict__["content_language"] = content_language
        __props__.__dict__["content_type"] = content_type
        __props__.__dict__["copy_if_match"] = copy_if_match
        __props__.__dict__["copy_if_modified_since"] = copy_if_modified_since
        __props__.__dict__["copy_if_none_match"] = copy_if_none_match
        __props__.__dict__["copy_if_unmodified_since"] = copy_if_unmodified_since
        __props__.__dict__["etag"] = etag
        __props__.__dict__["expires"] = expires
        __props__.__dict__["force_destroy"] = force_destroy
        __props__.__dict__["key"] = key
        __props__.__dict__["last_modified"] = last_modified
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["metadata_directive"] = metadata_directive
        __props__.__dict__["object_lock_legal_hold"] = object_lock_legal_hold
        __props__.__dict__["object_lock_mode"] = object_lock_mode
        __props__.__dict__["object_lock_retain_until_date"] = object_lock_retain_until_date
        __props__.__dict__["server_side_encryption"] = server_side_encryption
        __props__.__dict__["server_side_encryption_customer_algorithm"] = server_side_encryption_customer_algorithm
        __props__.__dict__["server_side_encryption_customer_key"] = server_side_encryption_customer_key
        __props__.__dict__["server_side_encryption_customer_key_md5"] = server_side_encryption_customer_key_md5
        __props__.__dict__["source"] = source
        __props__.__dict__["source_customer_algorithm"] = source_customer_algorithm
        __props__.__dict__["source_customer_key"] = source_customer_key
        __props__.__dict__["source_customer_key_md5"] = source_customer_key_md5
        __props__.__dict__["storage_class"] = storage_class
        __props__.__dict__["tagging_directive"] = tagging_directive
        __props__.__dict__["tags"] = tags
        __props__.__dict__["version_id"] = version_id
        __props__.__dict__["website_redirect"] = website_redirect
        return ObjectCopy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[str]:
        """
        [string] The name of the bucket where the object will be stored. Must be between 3 and 63 characters.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="cacheControl")
    def cache_control(self) -> pulumi.Output[Optional[str]]:
        """
        [string] Specifies caching behavior along the request/reply chain.
        """
        return pulumi.get(self, "cache_control")

    @property
    @pulumi.getter(name="contentDisposition")
    def content_disposition(self) -> pulumi.Output[Optional[str]]:
        """
        [string] Specifies presentational information for the object.
        """
        return pulumi.get(self, "content_disposition")

    @property
    @pulumi.getter(name="contentEncoding")
    def content_encoding(self) -> pulumi.Output[Optional[str]]:
        """
        [string] Specifies what content encodings have been applied to the object.
        """
        return pulumi.get(self, "content_encoding")

    @property
    @pulumi.getter(name="contentLanguage")
    def content_language(self) -> pulumi.Output[Optional[str]]:
        """
        [string] The natural language or languages of the intended audience for the object.
        """
        return pulumi.get(self, "content_language")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Output[str]:
        """
        [string] A standard MIME type describing the format of the contents.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="copyIfMatch")
    def copy_if_match(self) -> pulumi.Output[Optional[str]]:
        """
        Copies the object if its entity tag (ETag) matches the specified tag
        """
        return pulumi.get(self, "copy_if_match")

    @property
    @pulumi.getter(name="copyIfModifiedSince")
    def copy_if_modified_since(self) -> pulumi.Output[Optional[str]]:
        """
        Copies the object if it has been modified since the specified time
        """
        return pulumi.get(self, "copy_if_modified_since")

    @property
    @pulumi.getter(name="copyIfNoneMatch")
    def copy_if_none_match(self) -> pulumi.Output[Optional[str]]:
        """
        Copies the object if its entity tag (ETag) is different than the specified ETag
        """
        return pulumi.get(self, "copy_if_none_match")

    @property
    @pulumi.getter(name="copyIfUnmodifiedSince")
    def copy_if_unmodified_since(self) -> pulumi.Output[Optional[str]]:
        """
        Copies the object if it hasn't been modified since the specified time
        """
        return pulumi.get(self, "copy_if_unmodified_since")

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[str]:
        """
        [string] An entity tag (ETag) is an opaque identifier assigned by a web server to a specific version of a resource found at a URL.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def expires(self) -> pulumi.Output[Optional[str]]:
        """
        [string] The date and time at which the object is no longer cacheable.
        """
        return pulumi.get(self, "expires")

    @property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> pulumi.Output[bool]:
        """
        [bool] If true, the object will be destroyed if versioning is enabled then all versions will be destroyed. Default is `false`.
        """
        return pulumi.get(self, "force_destroy")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[str]:
        """
        [string] The key of the object. Must be at least 1 character long.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> pulumi.Output[str]:
        """
        [string] The date and time at which the object was last modified.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        [map] A map of metadata to store with the object in IONOS Object Storage. Metadata keys must be lowercase alphanumeric characters.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataDirective")
    def metadata_directive(self) -> pulumi.Output[Optional[str]]:
        """
        [string] Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request. Valid values are `COPY` and `REPLACE`.
        """
        return pulumi.get(self, "metadata_directive")

    @property
    @pulumi.getter(name="objectLockLegalHold")
    def object_lock_legal_hold(self) -> pulumi.Output[Optional[str]]:
        """
        [string] Indicates whether a legal hold is in effect for the object. Valid values are `ON` and `OFF`.
        """
        return pulumi.get(self, "object_lock_legal_hold")

    @property
    @pulumi.getter(name="objectLockMode")
    def object_lock_mode(self) -> pulumi.Output[Optional[str]]:
        """
        [string] The object lock mode that you want to apply to the object. Valid values are `GOVERNANCE` and `COMPLIANCE`.
        """
        return pulumi.get(self, "object_lock_mode")

    @property
    @pulumi.getter(name="objectLockRetainUntilDate")
    def object_lock_retain_until_date(self) -> pulumi.Output[Optional[str]]:
        """
        [string] The date and time when the object lock retention expires.Must be in RFC3999 format
        """
        return pulumi.get(self, "object_lock_retain_until_date")

    @property
    @pulumi.getter(name="serverSideEncryption")
    def server_side_encryption(self) -> pulumi.Output[Optional[str]]:
        """
        [string] The server-side encryption algorithm used when storing this object in IONOS Object Storage. Valid value is AES256.
        """
        return pulumi.get(self, "server_side_encryption")

    @property
    @pulumi.getter(name="serverSideEncryptionCustomerAlgorithm")
    def server_side_encryption_customer_algorithm(self) -> pulumi.Output[Optional[str]]:
        """
        [string] Specifies the algorithm to use for encrypting the object. Valid value is AES256.
        """
        return pulumi.get(self, "server_side_encryption_customer_algorithm")

    @property
    @pulumi.getter(name="serverSideEncryptionCustomerKey")
    def server_side_encryption_customer_key(self) -> pulumi.Output[Optional[str]]:
        """
        [string] Specifies the 256-bit, base64-encoded encryption key to use to encrypt and decrypt your data.
        """
        return pulumi.get(self, "server_side_encryption_customer_key")

    @property
    @pulumi.getter(name="serverSideEncryptionCustomerKeyMd5")
    def server_side_encryption_customer_key_md5(self) -> pulumi.Output[Optional[str]]:
        """
        [string] Specifies the 128-bit MD5 digest of the encryption key.
        """
        return pulumi.get(self, "server_side_encryption_customer_key_md5")

    @property
    @pulumi.getter
    def source(self) -> pulumi.Output[str]:
        """
        [string] The source of the object to be copied
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sourceCustomerAlgorithm")
    def source_customer_algorithm(self) -> pulumi.Output[Optional[str]]:
        """
        [string] Specifies the algorithm used for source object encryption. Valid value is AES256.
        """
        return pulumi.get(self, "source_customer_algorithm")

    @property
    @pulumi.getter(name="sourceCustomerKey")
    def source_customer_key(self) -> pulumi.Output[Optional[str]]:
        """
        [string] Specifies the 256-bit, base64-encoded encryption key for source object encryption.
        """
        return pulumi.get(self, "source_customer_key")

    @property
    @pulumi.getter(name="sourceCustomerKeyMd5")
    def source_customer_key_md5(self) -> pulumi.Output[Optional[str]]:
        """
        [string] Specifies the 128-bit MD5 digest of the encryption key for source object encryption.
        """
        return pulumi.get(self, "source_customer_key_md5")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> pulumi.Output[str]:
        """
        [string] The storage class of the object. Valid value is STANDARD. Default is STANDARD.
        """
        return pulumi.get(self, "storage_class")

    @property
    @pulumi.getter(name="taggingDirective")
    def tagging_directive(self) -> pulumi.Output[Optional[str]]:
        """
        [string] Specifies whether the object tag-set is copied from the source object or replaced with tag-set provided in the request. Valid values are `COPY` and `REPLACE`.
        """
        return pulumi.get(self, "tagging_directive")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        [map] The tag-set for the object.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="versionId")
    def version_id(self) -> pulumi.Output[str]:
        """
        [string] The version of the object.
        """
        return pulumi.get(self, "version_id")

    @property
    @pulumi.getter(name="websiteRedirect")
    def website_redirect(self) -> pulumi.Output[Optional[str]]:
        """
        [string] Redirects requests for this object to another object in the same bucket or to an external URL.
        """
        return pulumi.get(self, "website_redirect")

