# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AccessKeyTimeoutsArgs',
    'AccessKeyTimeoutsArgsDict',
    'BucketLifecycleConfigurationRuleArgs',
    'BucketLifecycleConfigurationRuleArgsDict',
    'BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgs',
    'BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgsDict',
    'BucketLifecycleConfigurationRuleExpirationArgs',
    'BucketLifecycleConfigurationRuleExpirationArgsDict',
    'BucketLifecycleConfigurationRuleNoncurrentVersionExpirationArgs',
    'BucketLifecycleConfigurationRuleNoncurrentVersionExpirationArgsDict',
    'BucketServerSideEncryptionConfigurationRuleArgs',
    'BucketServerSideEncryptionConfigurationRuleArgsDict',
    'BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs',
    'BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgsDict',
    'BucketTimeoutsArgs',
    'BucketTimeoutsArgsDict',
    'BucketVersioningVersioningConfigurationArgs',
    'BucketVersioningVersioningConfigurationArgsDict',
    'CorsConfigurationCorsRuleArgs',
    'CorsConfigurationCorsRuleArgsDict',
    'ObjectLockConfigurationRuleArgs',
    'ObjectLockConfigurationRuleArgsDict',
    'ObjectLockConfigurationRuleDefaultRetentionArgs',
    'ObjectLockConfigurationRuleDefaultRetentionArgsDict',
    'WebsiteConfigurationErrorDocumentArgs',
    'WebsiteConfigurationErrorDocumentArgsDict',
    'WebsiteConfigurationIndexDocumentArgs',
    'WebsiteConfigurationIndexDocumentArgsDict',
    'WebsiteConfigurationRedirectAllRequestsToArgs',
    'WebsiteConfigurationRedirectAllRequestsToArgsDict',
    'WebsiteConfigurationRoutingRuleArgs',
    'WebsiteConfigurationRoutingRuleArgsDict',
    'WebsiteConfigurationRoutingRuleConditionArgs',
    'WebsiteConfigurationRoutingRuleConditionArgsDict',
    'WebsiteConfigurationRoutingRuleRedirectArgs',
    'WebsiteConfigurationRoutingRuleRedirectArgsDict',
]

MYPY = False

if not MYPY:
    class AccessKeyTimeoutsArgsDict(TypedDict):
        create: NotRequired[pulumi.Input[str]]
        """
        [string] Time to wait for the bucket to be created. Default is `10m`.
        """
        delete: NotRequired[pulumi.Input[str]]
        """
        [string] Time to wait for the bucket to be deleted. Default is `10m`.
        """
        read: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
elif False:
    AccessKeyTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AccessKeyTimeoutsArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[str]] = None,
                 delete: Optional[pulumi.Input[str]] = None,
                 read: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] create: [string] Time to wait for the bucket to be created. Default is `10m`.
        :param pulumi.Input[str] delete: [string] Time to wait for the bucket to be deleted. Default is `10m`.
        :param pulumi.Input[str] read: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if read is not None:
            pulumi.set(__self__, "read", read)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Time to wait for the bucket to be created. Default is `10m`.
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Time to wait for the bucket to be deleted. Default is `10m`.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete", value)

    @property
    @pulumi.getter
    def read(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        return pulumi.get(self, "read")

    @read.setter
    def read(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read", value)


if not MYPY:
    class BucketLifecycleConfigurationRuleArgsDict(TypedDict):
        prefix: pulumi.Input[str]
        """
        Object key prefix identifying one or more objects to which the rule applies.
        """
        status: pulumi.Input[str]
        """
        Whether the rule is currently being applied. Valid values: Enabled or Disabled.
        """
        abort_incomplete_multipart_upload: NotRequired[pulumi.Input['BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgsDict']]
        """
        Specifies the days since the initiation of an incomplete multipart upload that IONOS Object Storage Object Storage will wait before permanently removing all parts of the upload.
        """
        expiration: NotRequired[pulumi.Input['BucketLifecycleConfigurationRuleExpirationArgsDict']]
        """
        A lifecycle rule for when an object expires.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        Unique identifier for the rule.
        """
        noncurrent_version_expiration: NotRequired[pulumi.Input['BucketLifecycleConfigurationRuleNoncurrentVersionExpirationArgsDict']]
        """
        A lifecycle rule for when non-current object versions expire.
        """
elif False:
    BucketLifecycleConfigurationRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BucketLifecycleConfigurationRuleArgs:
    def __init__(__self__, *,
                 prefix: pulumi.Input[str],
                 status: pulumi.Input[str],
                 abort_incomplete_multipart_upload: Optional[pulumi.Input['BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgs']] = None,
                 expiration: Optional[pulumi.Input['BucketLifecycleConfigurationRuleExpirationArgs']] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 noncurrent_version_expiration: Optional[pulumi.Input['BucketLifecycleConfigurationRuleNoncurrentVersionExpirationArgs']] = None):
        """
        :param pulumi.Input[str] prefix: Object key prefix identifying one or more objects to which the rule applies.
        :param pulumi.Input[str] status: Whether the rule is currently being applied. Valid values: Enabled or Disabled.
        :param pulumi.Input['BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgs'] abort_incomplete_multipart_upload: Specifies the days since the initiation of an incomplete multipart upload that IONOS Object Storage Object Storage will wait before permanently removing all parts of the upload.
        :param pulumi.Input['BucketLifecycleConfigurationRuleExpirationArgs'] expiration: A lifecycle rule for when an object expires.
        :param pulumi.Input[str] id: Unique identifier for the rule.
        :param pulumi.Input['BucketLifecycleConfigurationRuleNoncurrentVersionExpirationArgs'] noncurrent_version_expiration: A lifecycle rule for when non-current object versions expire.
        """
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "status", status)
        if abort_incomplete_multipart_upload is not None:
            pulumi.set(__self__, "abort_incomplete_multipart_upload", abort_incomplete_multipart_upload)
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if noncurrent_version_expiration is not None:
            pulumi.set(__self__, "noncurrent_version_expiration", noncurrent_version_expiration)

    @property
    @pulumi.getter
    def prefix(self) -> pulumi.Input[str]:
        """
        Object key prefix identifying one or more objects to which the rule applies.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Whether the rule is currently being applied. Valid values: Enabled or Disabled.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="abortIncompleteMultipartUpload")
    def abort_incomplete_multipart_upload(self) -> Optional[pulumi.Input['BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgs']]:
        """
        Specifies the days since the initiation of an incomplete multipart upload that IONOS Object Storage Object Storage will wait before permanently removing all parts of the upload.
        """
        return pulumi.get(self, "abort_incomplete_multipart_upload")

    @abort_incomplete_multipart_upload.setter
    def abort_incomplete_multipart_upload(self, value: Optional[pulumi.Input['BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgs']]):
        pulumi.set(self, "abort_incomplete_multipart_upload", value)

    @property
    @pulumi.getter
    def expiration(self) -> Optional[pulumi.Input['BucketLifecycleConfigurationRuleExpirationArgs']]:
        """
        A lifecycle rule for when an object expires.
        """
        return pulumi.get(self, "expiration")

    @expiration.setter
    def expiration(self, value: Optional[pulumi.Input['BucketLifecycleConfigurationRuleExpirationArgs']]):
        pulumi.set(self, "expiration", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier for the rule.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="noncurrentVersionExpiration")
    def noncurrent_version_expiration(self) -> Optional[pulumi.Input['BucketLifecycleConfigurationRuleNoncurrentVersionExpirationArgs']]:
        """
        A lifecycle rule for when non-current object versions expire.
        """
        return pulumi.get(self, "noncurrent_version_expiration")

    @noncurrent_version_expiration.setter
    def noncurrent_version_expiration(self, value: Optional[pulumi.Input['BucketLifecycleConfigurationRuleNoncurrentVersionExpirationArgs']]):
        pulumi.set(self, "noncurrent_version_expiration", value)


if not MYPY:
    class BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgsDict(TypedDict):
        days_after_initiation: NotRequired[pulumi.Input[int]]
        """
        Specifies the number of days after which IONOS Object Storage Object Storage aborts an incomplete multipart upload.
        """
elif False:
    BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgs:
    def __init__(__self__, *,
                 days_after_initiation: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] days_after_initiation: Specifies the number of days after which IONOS Object Storage Object Storage aborts an incomplete multipart upload.
        """
        if days_after_initiation is not None:
            pulumi.set(__self__, "days_after_initiation", days_after_initiation)

    @property
    @pulumi.getter(name="daysAfterInitiation")
    def days_after_initiation(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the number of days after which IONOS Object Storage Object Storage aborts an incomplete multipart upload.
        """
        return pulumi.get(self, "days_after_initiation")

    @days_after_initiation.setter
    def days_after_initiation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "days_after_initiation", value)


if not MYPY:
    class BucketLifecycleConfigurationRuleExpirationArgsDict(TypedDict):
        date: NotRequired[pulumi.Input[str]]
        """
        Specifies the date when the object expires. Required if 'days' is not specified.
        """
        days: NotRequired[pulumi.Input[int]]
        """
        Specifies the number of days after object creation when the object expires. Required if 'date' is not specified.
        """
        expired_object_delete_marker: NotRequired[pulumi.Input[bool]]
        """
        Indicates whether IONOS Object Storage Object Storage will remove a delete marker with no noncurrent versions. If set to true, the delete marker will be expired; if set to false the policy takes no operation. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.
        """
elif False:
    BucketLifecycleConfigurationRuleExpirationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BucketLifecycleConfigurationRuleExpirationArgs:
    def __init__(__self__, *,
                 date: Optional[pulumi.Input[str]] = None,
                 days: Optional[pulumi.Input[int]] = None,
                 expired_object_delete_marker: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] date: Specifies the date when the object expires. Required if 'days' is not specified.
        :param pulumi.Input[int] days: Specifies the number of days after object creation when the object expires. Required if 'date' is not specified.
        :param pulumi.Input[bool] expired_object_delete_marker: Indicates whether IONOS Object Storage Object Storage will remove a delete marker with no noncurrent versions. If set to true, the delete marker will be expired; if set to false the policy takes no operation. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.
        """
        if date is not None:
            pulumi.set(__self__, "date", date)
        if days is not None:
            pulumi.set(__self__, "days", days)
        if expired_object_delete_marker is not None:
            pulumi.set(__self__, "expired_object_delete_marker", expired_object_delete_marker)

    @property
    @pulumi.getter
    def date(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the date when the object expires. Required if 'days' is not specified.
        """
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the number of days after object creation when the object expires. Required if 'date' is not specified.
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "days", value)

    @property
    @pulumi.getter(name="expiredObjectDeleteMarker")
    def expired_object_delete_marker(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether IONOS Object Storage Object Storage will remove a delete marker with no noncurrent versions. If set to true, the delete marker will be expired; if set to false the policy takes no operation. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.
        """
        return pulumi.get(self, "expired_object_delete_marker")

    @expired_object_delete_marker.setter
    def expired_object_delete_marker(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "expired_object_delete_marker", value)


if not MYPY:
    class BucketLifecycleConfigurationRuleNoncurrentVersionExpirationArgsDict(TypedDict):
        noncurrent_days: NotRequired[pulumi.Input[int]]
        """
        Specifies the number of days an object is noncurrent before IONOS Object Storage can perform the associated action.
        """
elif False:
    BucketLifecycleConfigurationRuleNoncurrentVersionExpirationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BucketLifecycleConfigurationRuleNoncurrentVersionExpirationArgs:
    def __init__(__self__, *,
                 noncurrent_days: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] noncurrent_days: Specifies the number of days an object is noncurrent before IONOS Object Storage can perform the associated action.
        """
        if noncurrent_days is not None:
            pulumi.set(__self__, "noncurrent_days", noncurrent_days)

    @property
    @pulumi.getter(name="noncurrentDays")
    def noncurrent_days(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the number of days an object is noncurrent before IONOS Object Storage can perform the associated action.
        """
        return pulumi.get(self, "noncurrent_days")

    @noncurrent_days.setter
    def noncurrent_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "noncurrent_days", value)


if not MYPY:
    class BucketServerSideEncryptionConfigurationRuleArgsDict(TypedDict):
        apply_server_side_encryption_by_default: NotRequired[pulumi.Input['BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgsDict']]
        """
        [block] Defines the default encryption settings.
        """
elif False:
    BucketServerSideEncryptionConfigurationRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BucketServerSideEncryptionConfigurationRuleArgs:
    def __init__(__self__, *,
                 apply_server_side_encryption_by_default: Optional[pulumi.Input['BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs']] = None):
        """
        :param pulumi.Input['BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs'] apply_server_side_encryption_by_default: [block] Defines the default encryption settings.
        """
        if apply_server_side_encryption_by_default is not None:
            pulumi.set(__self__, "apply_server_side_encryption_by_default", apply_server_side_encryption_by_default)

    @property
    @pulumi.getter(name="applyServerSideEncryptionByDefault")
    def apply_server_side_encryption_by_default(self) -> Optional[pulumi.Input['BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs']]:
        """
        [block] Defines the default encryption settings.
        """
        return pulumi.get(self, "apply_server_side_encryption_by_default")

    @apply_server_side_encryption_by_default.setter
    def apply_server_side_encryption_by_default(self, value: Optional[pulumi.Input['BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs']]):
        pulumi.set(self, "apply_server_side_encryption_by_default", value)


if not MYPY:
    class BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgsDict(TypedDict):
        sse_algorithm: pulumi.Input[str]
        """
        [string] Server-side encryption algorithm to use. Valid values are 'AES256'
        """
elif False:
    BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs:
    def __init__(__self__, *,
                 sse_algorithm: pulumi.Input[str]):
        """
        :param pulumi.Input[str] sse_algorithm: [string] Server-side encryption algorithm to use. Valid values are 'AES256'
        """
        pulumi.set(__self__, "sse_algorithm", sse_algorithm)

    @property
    @pulumi.getter(name="sseAlgorithm")
    def sse_algorithm(self) -> pulumi.Input[str]:
        """
        [string] Server-side encryption algorithm to use. Valid values are 'AES256'
        """
        return pulumi.get(self, "sse_algorithm")

    @sse_algorithm.setter
    def sse_algorithm(self, value: pulumi.Input[str]):
        pulumi.set(self, "sse_algorithm", value)


if not MYPY:
    class BucketTimeoutsArgsDict(TypedDict):
        create: NotRequired[pulumi.Input[str]]
        """
        [string] Time to wait for the bucket to be created. Default is `10m`.
        """
        delete: NotRequired[pulumi.Input[str]]
        """
        [string] Time to wait for the bucket to be deleted. Default is `10m`.
        """
        read: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        update: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
elif False:
    BucketTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BucketTimeoutsArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[str]] = None,
                 delete: Optional[pulumi.Input[str]] = None,
                 read: Optional[pulumi.Input[str]] = None,
                 update: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] create: [string] Time to wait for the bucket to be created. Default is `10m`.
        :param pulumi.Input[str] delete: [string] Time to wait for the bucket to be deleted. Default is `10m`.
        :param pulumi.Input[str] read: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        :param pulumi.Input[str] update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if read is not None:
            pulumi.set(__self__, "read", read)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Time to wait for the bucket to be created. Default is `10m`.
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Time to wait for the bucket to be deleted. Default is `10m`.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete", value)

    @property
    @pulumi.getter
    def read(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        return pulumi.get(self, "read")

    @read.setter
    def read(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read", value)

    @property
    @pulumi.getter
    def update(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")

    @update.setter
    def update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update", value)


if not MYPY:
    class BucketVersioningVersioningConfigurationArgsDict(TypedDict):
        status: pulumi.Input[str]
        """
        [string] The versioning state of the bucket. Can be `Enabled` or `Suspended`.
        """
        mfa_delete: NotRequired[pulumi.Input[str]]
        """
        [string] Specifies whether MFA delete is enabled or not. Can be `Enabled` or `Disabled`.
        """
elif False:
    BucketVersioningVersioningConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BucketVersioningVersioningConfigurationArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 mfa_delete: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] status: [string] The versioning state of the bucket. Can be `Enabled` or `Suspended`.
        :param pulumi.Input[str] mfa_delete: [string] Specifies whether MFA delete is enabled or not. Can be `Enabled` or `Disabled`.
        """
        pulumi.set(__self__, "status", status)
        if mfa_delete is not None:
            pulumi.set(__self__, "mfa_delete", mfa_delete)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        [string] The versioning state of the bucket. Can be `Enabled` or `Suspended`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="mfaDelete")
    def mfa_delete(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Specifies whether MFA delete is enabled or not. Can be `Enabled` or `Disabled`.
        """
        return pulumi.get(self, "mfa_delete")

    @mfa_delete.setter
    def mfa_delete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mfa_delete", value)


if not MYPY:
    class CorsConfigurationCorsRuleArgsDict(TypedDict):
        allowed_methods: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        [list] An HTTP method that you allow the origin to execute. Valid values are GET, PUT, HEAD, POST, DELETE.
        """
        allowed_origins: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        [list] Specifies which origins are allowed to make requests to the resource.
        """
        allowed_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        [list] Specifies which headers are allowed in a preflight OPTIONS request through the Access-Control-Request-Headers header
        """
        expose_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        [list] Specifies which headers are exposed to the browser.
        """
        id: NotRequired[pulumi.Input[int]]
        """
        [int] Container for the Contract Number of the owner


        Days and years are mutually exclusive. You can only specify one of them.
        """
        max_age_seconds: NotRequired[pulumi.Input[int]]
        """
        [int] Specifies how long the results of a pre-flight request can be cached in seconds.
        """
elif False:
    CorsConfigurationCorsRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CorsConfigurationCorsRuleArgs:
    def __init__(__self__, *,
                 allowed_methods: pulumi.Input[Sequence[pulumi.Input[str]]],
                 allowed_origins: pulumi.Input[Sequence[pulumi.Input[str]]],
                 allowed_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 expose_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 max_age_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_methods: [list] An HTTP method that you allow the origin to execute. Valid values are GET, PUT, HEAD, POST, DELETE.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_origins: [list] Specifies which origins are allowed to make requests to the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_headers: [list] Specifies which headers are allowed in a preflight OPTIONS request through the Access-Control-Request-Headers header
        :param pulumi.Input[Sequence[pulumi.Input[str]]] expose_headers: [list] Specifies which headers are exposed to the browser.
        :param pulumi.Input[int] id: [int] Container for the Contract Number of the owner
               
               
               Days and years are mutually exclusive. You can only specify one of them.
        :param pulumi.Input[int] max_age_seconds: [int] Specifies how long the results of a pre-flight request can be cached in seconds.
        """
        pulumi.set(__self__, "allowed_methods", allowed_methods)
        pulumi.set(__self__, "allowed_origins", allowed_origins)
        if allowed_headers is not None:
            pulumi.set(__self__, "allowed_headers", allowed_headers)
        if expose_headers is not None:
            pulumi.set(__self__, "expose_headers", expose_headers)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if max_age_seconds is not None:
            pulumi.set(__self__, "max_age_seconds", max_age_seconds)

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        [list] An HTTP method that you allow the origin to execute. Valid values are GET, PUT, HEAD, POST, DELETE.
        """
        return pulumi.get(self, "allowed_methods")

    @allowed_methods.setter
    def allowed_methods(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_methods", value)

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        [list] Specifies which origins are allowed to make requests to the resource.
        """
        return pulumi.get(self, "allowed_origins")

    @allowed_origins.setter
    def allowed_origins(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_origins", value)

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        [list] Specifies which headers are allowed in a preflight OPTIONS request through the Access-Control-Request-Headers header
        """
        return pulumi.get(self, "allowed_headers")

    @allowed_headers.setter
    def allowed_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_headers", value)

    @property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        [list] Specifies which headers are exposed to the browser.
        """
        return pulumi.get(self, "expose_headers")

    @expose_headers.setter
    def expose_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "expose_headers", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        [int] Container for the Contract Number of the owner


        Days and years are mutually exclusive. You can only specify one of them.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="maxAgeSeconds")
    def max_age_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        [int] Specifies how long the results of a pre-flight request can be cached in seconds.
        """
        return pulumi.get(self, "max_age_seconds")

    @max_age_seconds.setter
    def max_age_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_age_seconds", value)


if not MYPY:
    class ObjectLockConfigurationRuleArgsDict(TypedDict):
        default_retention: NotRequired[pulumi.Input['ObjectLockConfigurationRuleDefaultRetentionArgsDict']]
        """
        [block] A block of default_retention as defined below.
        """
elif False:
    ObjectLockConfigurationRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ObjectLockConfigurationRuleArgs:
    def __init__(__self__, *,
                 default_retention: Optional[pulumi.Input['ObjectLockConfigurationRuleDefaultRetentionArgs']] = None):
        """
        :param pulumi.Input['ObjectLockConfigurationRuleDefaultRetentionArgs'] default_retention: [block] A block of default_retention as defined below.
        """
        if default_retention is not None:
            pulumi.set(__self__, "default_retention", default_retention)

    @property
    @pulumi.getter(name="defaultRetention")
    def default_retention(self) -> Optional[pulumi.Input['ObjectLockConfigurationRuleDefaultRetentionArgs']]:
        """
        [block] A block of default_retention as defined below.
        """
        return pulumi.get(self, "default_retention")

    @default_retention.setter
    def default_retention(self, value: Optional[pulumi.Input['ObjectLockConfigurationRuleDefaultRetentionArgs']]):
        pulumi.set(self, "default_retention", value)


if not MYPY:
    class ObjectLockConfigurationRuleDefaultRetentionArgsDict(TypedDict):
        days: NotRequired[pulumi.Input[int]]
        """
        [int] The default retention period of the bucket in days.
        """
        mode: NotRequired[pulumi.Input[str]]
        """
        [string] The default retention mode of the bucket. Can be `GOVERNANCE` or `COMPLIANCE`.
        """
        years: NotRequired[pulumi.Input[int]]
        """
        [int] The default retention period of the bucket in years.

        Days and years are mutually exclusive. You can only specify one of them.
        """
elif False:
    ObjectLockConfigurationRuleDefaultRetentionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ObjectLockConfigurationRuleDefaultRetentionArgs:
    def __init__(__self__, *,
                 days: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 years: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] days: [int] The default retention period of the bucket in days.
        :param pulumi.Input[str] mode: [string] The default retention mode of the bucket. Can be `GOVERNANCE` or `COMPLIANCE`.
        :param pulumi.Input[int] years: [int] The default retention period of the bucket in years.
               
               Days and years are mutually exclusive. You can only specify one of them.
        """
        if days is not None:
            pulumi.set(__self__, "days", days)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if years is not None:
            pulumi.set(__self__, "years", years)

    @property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[int]]:
        """
        [int] The default retention period of the bucket in days.
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "days", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The default retention mode of the bucket. Can be `GOVERNANCE` or `COMPLIANCE`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def years(self) -> Optional[pulumi.Input[int]]:
        """
        [int] The default retention period of the bucket in years.

        Days and years are mutually exclusive. You can only specify one of them.
        """
        return pulumi.get(self, "years")

    @years.setter
    def years(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "years", value)


if not MYPY:
    class WebsiteConfigurationErrorDocumentArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        The object key
        """
elif False:
    WebsiteConfigurationErrorDocumentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WebsiteConfigurationErrorDocumentArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: The object key
        """
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The object key
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


if not MYPY:
    class WebsiteConfigurationIndexDocumentArgsDict(TypedDict):
        suffix: NotRequired[pulumi.Input[str]]
        """
        A suffix that is appended to a request that is for a directory on the website endpoint (for example, if the suffix is index.html and you make a request to samplebucket/images/ the data that is returned will be for the object with the key name images/index.html) The suffix must not be empty and must not include a slash character. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests.
        """
elif False:
    WebsiteConfigurationIndexDocumentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WebsiteConfigurationIndexDocumentArgs:
    def __init__(__self__, *,
                 suffix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] suffix: A suffix that is appended to a request that is for a directory on the website endpoint (for example, if the suffix is index.html and you make a request to samplebucket/images/ the data that is returned will be for the object with the key name images/index.html) The suffix must not be empty and must not include a slash character. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests.
        """
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        """
        A suffix that is appended to a request that is for a directory on the website endpoint (for example, if the suffix is index.html and you make a request to samplebucket/images/ the data that is returned will be for the object with the key name images/index.html) The suffix must not be empty and must not include a slash character. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests.
        """
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)


if not MYPY:
    class WebsiteConfigurationRedirectAllRequestsToArgsDict(TypedDict):
        host_name: NotRequired[pulumi.Input[str]]
        """
        Name of the host where requests will be redirected.
        """
        protocol: NotRequired[pulumi.Input[str]]
        """
        Protocol to use (http, https).
        """
elif False:
    WebsiteConfigurationRedirectAllRequestsToArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WebsiteConfigurationRedirectAllRequestsToArgs:
    def __init__(__self__, *,
                 host_name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host_name: Name of the host where requests will be redirected.
        :param pulumi.Input[str] protocol: Protocol to use (http, https).
        """
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the host where requests will be redirected.
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol to use (http, https).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


if not MYPY:
    class WebsiteConfigurationRoutingRuleArgsDict(TypedDict):
        condition: NotRequired[pulumi.Input['WebsiteConfigurationRoutingRuleConditionArgsDict']]
        """
        A container for describing a condition that must be met for the specified redirect to apply.
        """
        redirect: NotRequired[pulumi.Input['WebsiteConfigurationRoutingRuleRedirectArgsDict']]
        """
        Container for the redirect information.
        """
elif False:
    WebsiteConfigurationRoutingRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WebsiteConfigurationRoutingRuleArgs:
    def __init__(__self__, *,
                 condition: Optional[pulumi.Input['WebsiteConfigurationRoutingRuleConditionArgs']] = None,
                 redirect: Optional[pulumi.Input['WebsiteConfigurationRoutingRuleRedirectArgs']] = None):
        """
        :param pulumi.Input['WebsiteConfigurationRoutingRuleConditionArgs'] condition: A container for describing a condition that must be met for the specified redirect to apply.
        :param pulumi.Input['WebsiteConfigurationRoutingRuleRedirectArgs'] redirect: Container for the redirect information.
        """
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input['WebsiteConfigurationRoutingRuleConditionArgs']]:
        """
        A container for describing a condition that must be met for the specified redirect to apply.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input['WebsiteConfigurationRoutingRuleConditionArgs']]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def redirect(self) -> Optional[pulumi.Input['WebsiteConfigurationRoutingRuleRedirectArgs']]:
        """
        Container for the redirect information.
        """
        return pulumi.get(self, "redirect")

    @redirect.setter
    def redirect(self, value: Optional[pulumi.Input['WebsiteConfigurationRoutingRuleRedirectArgs']]):
        pulumi.set(self, "redirect", value)


if not MYPY:
    class WebsiteConfigurationRoutingRuleConditionArgsDict(TypedDict):
        http_error_code_returned_equals: NotRequired[pulumi.Input[str]]
        """
        The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied.
        """
        key_prefix_equals: NotRequired[pulumi.Input[str]]
        """
        The object key name prefix when the redirect is applied. For example, to redirect requests for ExamplePage.html, the key prefix will be ExamplePage.html. To redirect request for all pages with the prefix example, the key prefix will be /example.
        """
elif False:
    WebsiteConfigurationRoutingRuleConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WebsiteConfigurationRoutingRuleConditionArgs:
    def __init__(__self__, *,
                 http_error_code_returned_equals: Optional[pulumi.Input[str]] = None,
                 key_prefix_equals: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] http_error_code_returned_equals: The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied.
        :param pulumi.Input[str] key_prefix_equals: The object key name prefix when the redirect is applied. For example, to redirect requests for ExamplePage.html, the key prefix will be ExamplePage.html. To redirect request for all pages with the prefix example, the key prefix will be /example.
        """
        if http_error_code_returned_equals is not None:
            pulumi.set(__self__, "http_error_code_returned_equals", http_error_code_returned_equals)
        if key_prefix_equals is not None:
            pulumi.set(__self__, "key_prefix_equals", key_prefix_equals)

    @property
    @pulumi.getter(name="httpErrorCodeReturnedEquals")
    def http_error_code_returned_equals(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied.
        """
        return pulumi.get(self, "http_error_code_returned_equals")

    @http_error_code_returned_equals.setter
    def http_error_code_returned_equals(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_error_code_returned_equals", value)

    @property
    @pulumi.getter(name="keyPrefixEquals")
    def key_prefix_equals(self) -> Optional[pulumi.Input[str]]:
        """
        The object key name prefix when the redirect is applied. For example, to redirect requests for ExamplePage.html, the key prefix will be ExamplePage.html. To redirect request for all pages with the prefix example, the key prefix will be /example.
        """
        return pulumi.get(self, "key_prefix_equals")

    @key_prefix_equals.setter
    def key_prefix_equals(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_prefix_equals", value)


if not MYPY:
    class WebsiteConfigurationRoutingRuleRedirectArgsDict(TypedDict):
        host_name: NotRequired[pulumi.Input[str]]
        """
        The host name to use in the redirect request.
        """
        http_redirect_code: NotRequired[pulumi.Input[str]]
        """
        The HTTP redirect code to use on the response. Not required if one of the siblings is present.
        """
        protocol: NotRequired[pulumi.Input[str]]
        """
        Protocol to use (http, https).
        """
        replace_key_prefix_with: NotRequired[pulumi.Input[str]]
        """
        The object key to be used in the redirect request. For example, redirect request to error.html, the replace key prefix will be /error.html. Not required if one of the siblings is present.
        """
        replace_key_with: NotRequired[pulumi.Input[str]]
        """
        The specific object key to use in the redirect request. For example, redirect request for error.html, the replace key will be /error.html. Not required if one of the siblings is present.
        """
elif False:
    WebsiteConfigurationRoutingRuleRedirectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WebsiteConfigurationRoutingRuleRedirectArgs:
    def __init__(__self__, *,
                 host_name: Optional[pulumi.Input[str]] = None,
                 http_redirect_code: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 replace_key_prefix_with: Optional[pulumi.Input[str]] = None,
                 replace_key_with: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host_name: The host name to use in the redirect request.
        :param pulumi.Input[str] http_redirect_code: The HTTP redirect code to use on the response. Not required if one of the siblings is present.
        :param pulumi.Input[str] protocol: Protocol to use (http, https).
        :param pulumi.Input[str] replace_key_prefix_with: The object key to be used in the redirect request. For example, redirect request to error.html, the replace key prefix will be /error.html. Not required if one of the siblings is present.
        :param pulumi.Input[str] replace_key_with: The specific object key to use in the redirect request. For example, redirect request for error.html, the replace key will be /error.html. Not required if one of the siblings is present.
        """
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if http_redirect_code is not None:
            pulumi.set(__self__, "http_redirect_code", http_redirect_code)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if replace_key_prefix_with is not None:
            pulumi.set(__self__, "replace_key_prefix_with", replace_key_prefix_with)
        if replace_key_with is not None:
            pulumi.set(__self__, "replace_key_with", replace_key_with)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[str]]:
        """
        The host name to use in the redirect request.
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name", value)

    @property
    @pulumi.getter(name="httpRedirectCode")
    def http_redirect_code(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP redirect code to use on the response. Not required if one of the siblings is present.
        """
        return pulumi.get(self, "http_redirect_code")

    @http_redirect_code.setter
    def http_redirect_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_redirect_code", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol to use (http, https).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="replaceKeyPrefixWith")
    def replace_key_prefix_with(self) -> Optional[pulumi.Input[str]]:
        """
        The object key to be used in the redirect request. For example, redirect request to error.html, the replace key prefix will be /error.html. Not required if one of the siblings is present.
        """
        return pulumi.get(self, "replace_key_prefix_with")

    @replace_key_prefix_with.setter
    def replace_key_prefix_with(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replace_key_prefix_with", value)

    @property
    @pulumi.getter(name="replaceKeyWith")
    def replace_key_with(self) -> Optional[pulumi.Input[str]]:
        """
        The specific object key to use in the redirect request. For example, redirect request for error.html, the replace key will be /error.html. Not required if one of the siblings is present.
        """
        return pulumi.get(self, "replace_key_with")

    @replace_key_with.setter
    def replace_key_with(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replace_key_with", value)


