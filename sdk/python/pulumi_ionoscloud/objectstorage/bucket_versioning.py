# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BucketVersioningArgs', 'BucketVersioning']

@pulumi.input_type
class BucketVersioningArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 versioning_configuration: Optional[pulumi.Input['BucketVersioningVersioningConfigurationArgs']] = None):
        """
        The set of arguments for constructing a BucketVersioning resource.
        :param pulumi.Input[str] bucket: [string] The name of the bucket where the object will be stored.
        :param pulumi.Input['BucketVersioningVersioningConfigurationArgs'] versioning_configuration: [block] A block of versioning_configuration as defined below.
        """
        pulumi.set(__self__, "bucket", bucket)
        if versioning_configuration is not None:
            pulumi.set(__self__, "versioning_configuration", versioning_configuration)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        [string] The name of the bucket where the object will be stored.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="versioningConfiguration")
    def versioning_configuration(self) -> Optional[pulumi.Input['BucketVersioningVersioningConfigurationArgs']]:
        """
        [block] A block of versioning_configuration as defined below.
        """
        return pulumi.get(self, "versioning_configuration")

    @versioning_configuration.setter
    def versioning_configuration(self, value: Optional[pulumi.Input['BucketVersioningVersioningConfigurationArgs']]):
        pulumi.set(self, "versioning_configuration", value)


@pulumi.input_type
class _BucketVersioningState:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 versioning_configuration: Optional[pulumi.Input['BucketVersioningVersioningConfigurationArgs']] = None):
        """
        Input properties used for looking up and filtering BucketVersioning resources.
        :param pulumi.Input[str] bucket: [string] The name of the bucket where the object will be stored.
        :param pulumi.Input['BucketVersioningVersioningConfigurationArgs'] versioning_configuration: [block] A block of versioning_configuration as defined below.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if versioning_configuration is not None:
            pulumi.set(__self__, "versioning_configuration", versioning_configuration)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The name of the bucket where the object will be stored.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="versioningConfiguration")
    def versioning_configuration(self) -> Optional[pulumi.Input['BucketVersioningVersioningConfigurationArgs']]:
        """
        [block] A block of versioning_configuration as defined below.
        """
        return pulumi.get(self, "versioning_configuration")

    @versioning_configuration.setter
    def versioning_configuration(self, value: Optional[pulumi.Input['BucketVersioningVersioningConfigurationArgs']]):
        pulumi.set(self, "versioning_configuration", value)


class BucketVersioning(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 versioning_configuration: Optional[pulumi.Input[Union['BucketVersioningVersioningConfigurationArgs', 'BucketVersioningVersioningConfigurationArgsDict']]] = None,
                 __props__=None):
        """
        Manages **Buckets versioning** on IonosCloud.

        ## Import

        IONOS Object Storage Bucket Versioning can be imported using the `bucket` name.

        ```sh
        $ pulumi import ionoscloud:objectstorage/bucketVersioning:BucketVersioning example example
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: [string] The name of the bucket where the object will be stored.
        :param pulumi.Input[Union['BucketVersioningVersioningConfigurationArgs', 'BucketVersioningVersioningConfigurationArgsDict']] versioning_configuration: [block] A block of versioning_configuration as defined below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BucketVersioningArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages **Buckets versioning** on IonosCloud.

        ## Import

        IONOS Object Storage Bucket Versioning can be imported using the `bucket` name.

        ```sh
        $ pulumi import ionoscloud:objectstorage/bucketVersioning:BucketVersioning example example
        ```

        :param str resource_name: The name of the resource.
        :param BucketVersioningArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BucketVersioningArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 versioning_configuration: Optional[pulumi.Input[Union['BucketVersioningVersioningConfigurationArgs', 'BucketVersioningVersioningConfigurationArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BucketVersioningArgs.__new__(BucketVersioningArgs)

            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__.__dict__["bucket"] = bucket
            __props__.__dict__["versioning_configuration"] = versioning_configuration
        super(BucketVersioning, __self__).__init__(
            'ionoscloud:objectstorage/bucketVersioning:BucketVersioning',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket: Optional[pulumi.Input[str]] = None,
            versioning_configuration: Optional[pulumi.Input[Union['BucketVersioningVersioningConfigurationArgs', 'BucketVersioningVersioningConfigurationArgsDict']]] = None) -> 'BucketVersioning':
        """
        Get an existing BucketVersioning resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: [string] The name of the bucket where the object will be stored.
        :param pulumi.Input[Union['BucketVersioningVersioningConfigurationArgs', 'BucketVersioningVersioningConfigurationArgsDict']] versioning_configuration: [block] A block of versioning_configuration as defined below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BucketVersioningState.__new__(_BucketVersioningState)

        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["versioning_configuration"] = versioning_configuration
        return BucketVersioning(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[str]:
        """
        [string] The name of the bucket where the object will be stored.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="versioningConfiguration")
    def versioning_configuration(self) -> pulumi.Output[Optional['outputs.BucketVersioningVersioningConfiguration']]:
        """
        [block] A block of versioning_configuration as defined below.
        """
        return pulumi.get(self, "versioning_configuration")

