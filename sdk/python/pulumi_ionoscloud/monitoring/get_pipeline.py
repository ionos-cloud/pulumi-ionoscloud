# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetPipelineResult',
    'AwaitableGetPipelineResult',
    'get_pipeline',
    'get_pipeline_output',
]

@pulumi.output_type
class GetPipelineResult:
    """
    A collection of values returned by getPipeline.
    """
    def __init__(__self__, grafana_endpoint=None, http_endpoint=None, id=None, location=None, name=None):
        if grafana_endpoint and not isinstance(grafana_endpoint, str):
            raise TypeError("Expected argument 'grafana_endpoint' to be a str")
        pulumi.set(__self__, "grafana_endpoint", grafana_endpoint)
        if http_endpoint and not isinstance(http_endpoint, str):
            raise TypeError("Expected argument 'http_endpoint' to be a str")
        pulumi.set(__self__, "http_endpoint", http_endpoint)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="grafanaEndpoint")
    def grafana_endpoint(self) -> str:
        return pulumi.get(self, "grafana_endpoint")

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> str:
        """
        The HTTP endpoint of the Monitoring instance.
        """
        return pulumi.get(self, "http_endpoint")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The UUID of the Monitoring pipeline.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Monitoring pipeline.
        """
        return pulumi.get(self, "name")


class AwaitableGetPipelineResult(GetPipelineResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPipelineResult(
            grafana_endpoint=self.grafana_endpoint,
            http_endpoint=self.http_endpoint,
            id=self.id,
            location=self.location,
            name=self.name)


def get_pipeline(id: Optional[str] = None,
                 location: Optional[str] = None,
                 name: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPipelineResult:
    """
    The **Monitoring pipeline** datasource can be used to search for and return an existing Monitoring pipeline.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.

    > ⚠️  Only tokens are accepted for authorization in the **monitoring_pipeline** data source. Please ensure you are using tokens as other methods will not be valid.

    ## Example Usage

    ### By ID
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.monitoring.get_pipeline(location="de/txl",
        id="pipeline_id")
    ```

    ### By name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.monitoring.get_pipeline(location="de/txl",
        name="pipeline_name")
    ```


    :param str id: [string] The ID of the Monitoring pipeline you want to search for.
    :param str location: [string] The location of the Monitoring pipeline. Default is `de/fra`. It can be one of `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `fr/par`. If this is not set and if no value is provided for the `IONOS_API_URL` env var, the default `location` will be: `de/fra`.
    :param str name: [string] The name of the Monitoring pipeline you want to search for.
           
           Either `id` or `name` must be provided. If none, or both are provided, the datasource will return an error.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['location'] = location
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:monitoring/getPipeline:getPipeline', __args__, opts=opts, typ=GetPipelineResult).value

    return AwaitableGetPipelineResult(
        grafana_endpoint=pulumi.get(__ret__, 'grafana_endpoint'),
        http_endpoint=pulumi.get(__ret__, 'http_endpoint'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'))
def get_pipeline_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                        location: Optional[pulumi.Input[Optional[str]]] = None,
                        name: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPipelineResult]:
    """
    The **Monitoring pipeline** datasource can be used to search for and return an existing Monitoring pipeline.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.

    > ⚠️  Only tokens are accepted for authorization in the **monitoring_pipeline** data source. Please ensure you are using tokens as other methods will not be valid.

    ## Example Usage

    ### By ID
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.monitoring.get_pipeline(location="de/txl",
        id="pipeline_id")
    ```

    ### By name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.monitoring.get_pipeline(location="de/txl",
        name="pipeline_name")
    ```


    :param str id: [string] The ID of the Monitoring pipeline you want to search for.
    :param str location: [string] The location of the Monitoring pipeline. Default is `de/fra`. It can be one of `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `fr/par`. If this is not set and if no value is provided for the `IONOS_API_URL` env var, the default `location` will be: `de/fra`.
    :param str name: [string] The name of the Monitoring pipeline you want to search for.
           
           Either `id` or `name` must be provided. If none, or both are provided, the datasource will return an error.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['location'] = location
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:monitoring/getPipeline:getPipeline', __args__, opts=opts, typ=GetPipelineResult)
    return __ret__.apply(lambda __response__: GetPipelineResult(
        grafana_endpoint=pulumi.get(__response__, 'grafana_endpoint'),
        http_endpoint=pulumi.get(__response__, 'http_endpoint'),
        id=pulumi.get(__response__, 'id'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name')))
