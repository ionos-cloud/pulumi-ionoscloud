# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'DatacenterCpuArchitectureArgs',
    'DatacenterCpuArchitectureArgsDict',
]

MYPY = False

if not MYPY:
    class DatacenterCpuArchitectureArgsDict(TypedDict):
        cpu_family: NotRequired[pulumi.Input[str]]
        """
        A valid CPU family name
        """
        max_cores: NotRequired[pulumi.Input[int]]
        """
        The maximum number of cores available
        """
        max_ram: NotRequired[pulumi.Input[int]]
        """
        The maximum number of RAM in MB
        """
        vendor: NotRequired[pulumi.Input[str]]
        """
        A valid CPU vendor name
        """
elif False:
    DatacenterCpuArchitectureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatacenterCpuArchitectureArgs:
    def __init__(__self__, *,
                 cpu_family: Optional[pulumi.Input[str]] = None,
                 max_cores: Optional[pulumi.Input[int]] = None,
                 max_ram: Optional[pulumi.Input[int]] = None,
                 vendor: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cpu_family: A valid CPU family name
        :param pulumi.Input[int] max_cores: The maximum number of cores available
        :param pulumi.Input[int] max_ram: The maximum number of RAM in MB
        :param pulumi.Input[str] vendor: A valid CPU vendor name
        """
        if cpu_family is not None:
            pulumi.set(__self__, "cpu_family", cpu_family)
        if max_cores is not None:
            pulumi.set(__self__, "max_cores", max_cores)
        if max_ram is not None:
            pulumi.set(__self__, "max_ram", max_ram)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter(name="cpuFamily")
    def cpu_family(self) -> Optional[pulumi.Input[str]]:
        """
        A valid CPU family name
        """
        return pulumi.get(self, "cpu_family")

    @cpu_family.setter
    def cpu_family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_family", value)

    @property
    @pulumi.getter(name="maxCores")
    def max_cores(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of cores available
        """
        return pulumi.get(self, "max_cores")

    @max_cores.setter
    def max_cores(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_cores", value)

    @property
    @pulumi.getter(name="maxRam")
    def max_ram(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of RAM in MB
        """
        return pulumi.get(self, "max_ram")

    @max_ram.setter
    def max_ram(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_ram", value)

    @property
    @pulumi.getter
    def vendor(self) -> Optional[pulumi.Input[str]]:
        """
        A valid CPU vendor name
        """
        return pulumi.get(self, "vendor")

    @vendor.setter
    def vendor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vendor", value)


