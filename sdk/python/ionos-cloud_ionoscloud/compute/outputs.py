# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'DatacenterCpuArchitecture',
]

@pulumi.output_type
class DatacenterCpuArchitecture(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cpuFamily":
            suggest = "cpu_family"
        elif key == "maxCores":
            suggest = "max_cores"
        elif key == "maxRam":
            suggest = "max_ram"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatacenterCpuArchitecture. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatacenterCpuArchitecture.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatacenterCpuArchitecture.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu_family: Optional[str] = None,
                 max_cores: Optional[int] = None,
                 max_ram: Optional[int] = None,
                 vendor: Optional[str] = None):
        """
        :param str cpu_family: A valid CPU family name
        :param int max_cores: The maximum number of cores available
        :param int max_ram: The maximum number of RAM in MB
        :param str vendor: A valid CPU vendor name
        """
        if cpu_family is not None:
            pulumi.set(__self__, "cpu_family", cpu_family)
        if max_cores is not None:
            pulumi.set(__self__, "max_cores", max_cores)
        if max_ram is not None:
            pulumi.set(__self__, "max_ram", max_ram)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter(name="cpuFamily")
    def cpu_family(self) -> Optional[str]:
        """
        A valid CPU family name
        """
        return pulumi.get(self, "cpu_family")

    @property
    @pulumi.getter(name="maxCores")
    def max_cores(self) -> Optional[int]:
        """
        The maximum number of cores available
        """
        return pulumi.get(self, "max_cores")

    @property
    @pulumi.getter(name="maxRam")
    def max_ram(self) -> Optional[int]:
        """
        The maximum number of RAM in MB
        """
        return pulumi.get(self, "max_ram")

    @property
    @pulumi.getter
    def vendor(self) -> Optional[str]:
        """
        A valid CPU vendor name
        """
        return pulumi.get(self, "vendor")


