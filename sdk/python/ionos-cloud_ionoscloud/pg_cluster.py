# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PgClusterArgs', 'PgCluster']

@pulumi.input_type
class PgClusterArgs:
    def __init__(__self__, *,
                 cores: pulumi.Input[int],
                 credentials: pulumi.Input['PgClusterCredentialsArgs'],
                 display_name: pulumi.Input[str],
                 instances: pulumi.Input[int],
                 location: pulumi.Input[str],
                 postgres_version: pulumi.Input[str],
                 ram: pulumi.Input[int],
                 storage_size: pulumi.Input[int],
                 storage_type: pulumi.Input[str],
                 synchronization_mode: pulumi.Input[str],
                 backup_location: Optional[pulumi.Input[str]] = None,
                 connection_pooler: Optional[pulumi.Input['PgClusterConnectionPoolerArgs']] = None,
                 connections: Optional[pulumi.Input['PgClusterConnectionsArgs']] = None,
                 from_backup: Optional[pulumi.Input['PgClusterFromBackupArgs']] = None,
                 maintenance_window: Optional[pulumi.Input['PgClusterMaintenanceWindowArgs']] = None):
        """
        The set of arguments for constructing a PgCluster resource.
        :param pulumi.Input[int] cores: The number of CPU cores per replica.
        :param pulumi.Input['PgClusterCredentialsArgs'] credentials: Credentials for the database user to be created.
        :param pulumi.Input[str] display_name: The friendly name of your cluster.
        :param pulumi.Input[int] instances: The total number of instances in the cluster (one master and n-1 standbys)
        :param pulumi.Input[str] location: The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
               be modified after datacenter creation (disallowed in update requests)
        :param pulumi.Input[str] postgres_version: The PostgreSQL version of your cluster.
        :param pulumi.Input[int] ram: The amount of memory per instance in megabytes. Has to be a multiple of 1024.
        :param pulumi.Input[int] storage_size: The amount of storage per instance in megabytes. Has to be a multiple of 2048.
        :param pulumi.Input[str] storage_type: The storage type used in your cluster.
        :param pulumi.Input[str] synchronization_mode: Represents different modes of replication.
        :param pulumi.Input[str] backup_location: The S3 location where the backups will be stored.
        :param pulumi.Input['PgClusterConnectionPoolerArgs'] connection_pooler: Configuration options for the connection pooler
        :param pulumi.Input['PgClusterConnectionsArgs'] connections: Details about the network connection for your cluster.
        :param pulumi.Input['PgClusterFromBackupArgs'] from_backup: Creates the cluster based on the existing backup.
        :param pulumi.Input['PgClusterMaintenanceWindowArgs'] maintenance_window: a weekly 4 hour-long window, during which maintenance might occur
        """
        pulumi.set(__self__, "cores", cores)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "instances", instances)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "postgres_version", postgres_version)
        pulumi.set(__self__, "ram", ram)
        pulumi.set(__self__, "storage_size", storage_size)
        pulumi.set(__self__, "storage_type", storage_type)
        pulumi.set(__self__, "synchronization_mode", synchronization_mode)
        if backup_location is not None:
            pulumi.set(__self__, "backup_location", backup_location)
        if connection_pooler is not None:
            pulumi.set(__self__, "connection_pooler", connection_pooler)
        if connections is not None:
            pulumi.set(__self__, "connections", connections)
        if from_backup is not None:
            pulumi.set(__self__, "from_backup", from_backup)
        if maintenance_window is not None:
            pulumi.set(__self__, "maintenance_window", maintenance_window)

    @property
    @pulumi.getter
    def cores(self) -> pulumi.Input[int]:
        """
        The number of CPU cores per replica.
        """
        return pulumi.get(self, "cores")

    @cores.setter
    def cores(self, value: pulumi.Input[int]):
        pulumi.set(self, "cores", value)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input['PgClusterCredentialsArgs']:
        """
        Credentials for the database user to be created.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input['PgClusterCredentialsArgs']):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        The friendly name of your cluster.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def instances(self) -> pulumi.Input[int]:
        """
        The total number of instances in the cluster (one master and n-1 standbys)
        """
        return pulumi.get(self, "instances")

    @instances.setter
    def instances(self, value: pulumi.Input[int]):
        pulumi.set(self, "instances", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
        be modified after datacenter creation (disallowed in update requests)
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="postgresVersion")
    def postgres_version(self) -> pulumi.Input[str]:
        """
        The PostgreSQL version of your cluster.
        """
        return pulumi.get(self, "postgres_version")

    @postgres_version.setter
    def postgres_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "postgres_version", value)

    @property
    @pulumi.getter
    def ram(self) -> pulumi.Input[int]:
        """
        The amount of memory per instance in megabytes. Has to be a multiple of 1024.
        """
        return pulumi.get(self, "ram")

    @ram.setter
    def ram(self, value: pulumi.Input[int]):
        pulumi.set(self, "ram", value)

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> pulumi.Input[int]:
        """
        The amount of storage per instance in megabytes. Has to be a multiple of 2048.
        """
        return pulumi.get(self, "storage_size")

    @storage_size.setter
    def storage_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "storage_size", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> pulumi.Input[str]:
        """
        The storage type used in your cluster.
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_type", value)

    @property
    @pulumi.getter(name="synchronizationMode")
    def synchronization_mode(self) -> pulumi.Input[str]:
        """
        Represents different modes of replication.
        """
        return pulumi.get(self, "synchronization_mode")

    @synchronization_mode.setter
    def synchronization_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "synchronization_mode", value)

    @property
    @pulumi.getter(name="backupLocation")
    def backup_location(self) -> Optional[pulumi.Input[str]]:
        """
        The S3 location where the backups will be stored.
        """
        return pulumi.get(self, "backup_location")

    @backup_location.setter
    def backup_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_location", value)

    @property
    @pulumi.getter(name="connectionPooler")
    def connection_pooler(self) -> Optional[pulumi.Input['PgClusterConnectionPoolerArgs']]:
        """
        Configuration options for the connection pooler
        """
        return pulumi.get(self, "connection_pooler")

    @connection_pooler.setter
    def connection_pooler(self, value: Optional[pulumi.Input['PgClusterConnectionPoolerArgs']]):
        pulumi.set(self, "connection_pooler", value)

    @property
    @pulumi.getter
    def connections(self) -> Optional[pulumi.Input['PgClusterConnectionsArgs']]:
        """
        Details about the network connection for your cluster.
        """
        return pulumi.get(self, "connections")

    @connections.setter
    def connections(self, value: Optional[pulumi.Input['PgClusterConnectionsArgs']]):
        pulumi.set(self, "connections", value)

    @property
    @pulumi.getter(name="fromBackup")
    def from_backup(self) -> Optional[pulumi.Input['PgClusterFromBackupArgs']]:
        """
        Creates the cluster based on the existing backup.
        """
        return pulumi.get(self, "from_backup")

    @from_backup.setter
    def from_backup(self, value: Optional[pulumi.Input['PgClusterFromBackupArgs']]):
        pulumi.set(self, "from_backup", value)

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional[pulumi.Input['PgClusterMaintenanceWindowArgs']]:
        """
        a weekly 4 hour-long window, during which maintenance might occur
        """
        return pulumi.get(self, "maintenance_window")

    @maintenance_window.setter
    def maintenance_window(self, value: Optional[pulumi.Input['PgClusterMaintenanceWindowArgs']]):
        pulumi.set(self, "maintenance_window", value)


@pulumi.input_type
class _PgClusterState:
    def __init__(__self__, *,
                 backup_location: Optional[pulumi.Input[str]] = None,
                 connection_pooler: Optional[pulumi.Input['PgClusterConnectionPoolerArgs']] = None,
                 connections: Optional[pulumi.Input['PgClusterConnectionsArgs']] = None,
                 cores: Optional[pulumi.Input[int]] = None,
                 credentials: Optional[pulumi.Input['PgClusterCredentialsArgs']] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 dns_name: Optional[pulumi.Input[str]] = None,
                 from_backup: Optional[pulumi.Input['PgClusterFromBackupArgs']] = None,
                 instances: Optional[pulumi.Input[int]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input['PgClusterMaintenanceWindowArgs']] = None,
                 postgres_version: Optional[pulumi.Input[str]] = None,
                 ram: Optional[pulumi.Input[int]] = None,
                 storage_size: Optional[pulumi.Input[int]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 synchronization_mode: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PgCluster resources.
        :param pulumi.Input[str] backup_location: The S3 location where the backups will be stored.
        :param pulumi.Input['PgClusterConnectionPoolerArgs'] connection_pooler: Configuration options for the connection pooler
        :param pulumi.Input['PgClusterConnectionsArgs'] connections: Details about the network connection for your cluster.
        :param pulumi.Input[int] cores: The number of CPU cores per replica.
        :param pulumi.Input['PgClusterCredentialsArgs'] credentials: Credentials for the database user to be created.
        :param pulumi.Input[str] display_name: The friendly name of your cluster.
        :param pulumi.Input[str] dns_name: The DNS name pointing to your cluster
        :param pulumi.Input['PgClusterFromBackupArgs'] from_backup: Creates the cluster based on the existing backup.
        :param pulumi.Input[int] instances: The total number of instances in the cluster (one master and n-1 standbys)
        :param pulumi.Input[str] location: The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
               be modified after datacenter creation (disallowed in update requests)
        :param pulumi.Input['PgClusterMaintenanceWindowArgs'] maintenance_window: a weekly 4 hour-long window, during which maintenance might occur
        :param pulumi.Input[str] postgres_version: The PostgreSQL version of your cluster.
        :param pulumi.Input[int] ram: The amount of memory per instance in megabytes. Has to be a multiple of 1024.
        :param pulumi.Input[int] storage_size: The amount of storage per instance in megabytes. Has to be a multiple of 2048.
        :param pulumi.Input[str] storage_type: The storage type used in your cluster.
        :param pulumi.Input[str] synchronization_mode: Represents different modes of replication.
        """
        if backup_location is not None:
            pulumi.set(__self__, "backup_location", backup_location)
        if connection_pooler is not None:
            pulumi.set(__self__, "connection_pooler", connection_pooler)
        if connections is not None:
            pulumi.set(__self__, "connections", connections)
        if cores is not None:
            pulumi.set(__self__, "cores", cores)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if dns_name is not None:
            pulumi.set(__self__, "dns_name", dns_name)
        if from_backup is not None:
            pulumi.set(__self__, "from_backup", from_backup)
        if instances is not None:
            pulumi.set(__self__, "instances", instances)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if maintenance_window is not None:
            pulumi.set(__self__, "maintenance_window", maintenance_window)
        if postgres_version is not None:
            pulumi.set(__self__, "postgres_version", postgres_version)
        if ram is not None:
            pulumi.set(__self__, "ram", ram)
        if storage_size is not None:
            pulumi.set(__self__, "storage_size", storage_size)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if synchronization_mode is not None:
            pulumi.set(__self__, "synchronization_mode", synchronization_mode)

    @property
    @pulumi.getter(name="backupLocation")
    def backup_location(self) -> Optional[pulumi.Input[str]]:
        """
        The S3 location where the backups will be stored.
        """
        return pulumi.get(self, "backup_location")

    @backup_location.setter
    def backup_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_location", value)

    @property
    @pulumi.getter(name="connectionPooler")
    def connection_pooler(self) -> Optional[pulumi.Input['PgClusterConnectionPoolerArgs']]:
        """
        Configuration options for the connection pooler
        """
        return pulumi.get(self, "connection_pooler")

    @connection_pooler.setter
    def connection_pooler(self, value: Optional[pulumi.Input['PgClusterConnectionPoolerArgs']]):
        pulumi.set(self, "connection_pooler", value)

    @property
    @pulumi.getter
    def connections(self) -> Optional[pulumi.Input['PgClusterConnectionsArgs']]:
        """
        Details about the network connection for your cluster.
        """
        return pulumi.get(self, "connections")

    @connections.setter
    def connections(self, value: Optional[pulumi.Input['PgClusterConnectionsArgs']]):
        pulumi.set(self, "connections", value)

    @property
    @pulumi.getter
    def cores(self) -> Optional[pulumi.Input[int]]:
        """
        The number of CPU cores per replica.
        """
        return pulumi.get(self, "cores")

    @cores.setter
    def cores(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cores", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['PgClusterCredentialsArgs']]:
        """
        Credentials for the database user to be created.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['PgClusterCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The friendly name of your cluster.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> Optional[pulumi.Input[str]]:
        """
        The DNS name pointing to your cluster
        """
        return pulumi.get(self, "dns_name")

    @dns_name.setter
    def dns_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_name", value)

    @property
    @pulumi.getter(name="fromBackup")
    def from_backup(self) -> Optional[pulumi.Input['PgClusterFromBackupArgs']]:
        """
        Creates the cluster based on the existing backup.
        """
        return pulumi.get(self, "from_backup")

    @from_backup.setter
    def from_backup(self, value: Optional[pulumi.Input['PgClusterFromBackupArgs']]):
        pulumi.set(self, "from_backup", value)

    @property
    @pulumi.getter
    def instances(self) -> Optional[pulumi.Input[int]]:
        """
        The total number of instances in the cluster (one master and n-1 standbys)
        """
        return pulumi.get(self, "instances")

    @instances.setter
    def instances(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instances", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
        be modified after datacenter creation (disallowed in update requests)
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional[pulumi.Input['PgClusterMaintenanceWindowArgs']]:
        """
        a weekly 4 hour-long window, during which maintenance might occur
        """
        return pulumi.get(self, "maintenance_window")

    @maintenance_window.setter
    def maintenance_window(self, value: Optional[pulumi.Input['PgClusterMaintenanceWindowArgs']]):
        pulumi.set(self, "maintenance_window", value)

    @property
    @pulumi.getter(name="postgresVersion")
    def postgres_version(self) -> Optional[pulumi.Input[str]]:
        """
        The PostgreSQL version of your cluster.
        """
        return pulumi.get(self, "postgres_version")

    @postgres_version.setter
    def postgres_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "postgres_version", value)

    @property
    @pulumi.getter
    def ram(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of memory per instance in megabytes. Has to be a multiple of 1024.
        """
        return pulumi.get(self, "ram")

    @ram.setter
    def ram(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ram", value)

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of storage per instance in megabytes. Has to be a multiple of 2048.
        """
        return pulumi.get(self, "storage_size")

    @storage_size.setter
    def storage_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_size", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[str]]:
        """
        The storage type used in your cluster.
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_type", value)

    @property
    @pulumi.getter(name="synchronizationMode")
    def synchronization_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Represents different modes of replication.
        """
        return pulumi.get(self, "synchronization_mode")

    @synchronization_mode.setter
    def synchronization_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "synchronization_mode", value)


class PgCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_location: Optional[pulumi.Input[str]] = None,
                 connection_pooler: Optional[pulumi.Input[Union['PgClusterConnectionPoolerArgs', 'PgClusterConnectionPoolerArgsDict']]] = None,
                 connections: Optional[pulumi.Input[Union['PgClusterConnectionsArgs', 'PgClusterConnectionsArgsDict']]] = None,
                 cores: Optional[pulumi.Input[int]] = None,
                 credentials: Optional[pulumi.Input[Union['PgClusterCredentialsArgs', 'PgClusterCredentialsArgsDict']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 from_backup: Optional[pulumi.Input[Union['PgClusterFromBackupArgs', 'PgClusterFromBackupArgsDict']]] = None,
                 instances: Optional[pulumi.Input[int]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input[Union['PgClusterMaintenanceWindowArgs', 'PgClusterMaintenanceWindowArgsDict']]] = None,
                 postgres_version: Optional[pulumi.Input[str]] = None,
                 ram: Optional[pulumi.Input[int]] = None,
                 storage_size: Optional[pulumi.Input[int]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 synchronization_mode: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a PgCluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] backup_location: The S3 location where the backups will be stored.
        :param pulumi.Input[Union['PgClusterConnectionPoolerArgs', 'PgClusterConnectionPoolerArgsDict']] connection_pooler: Configuration options for the connection pooler
        :param pulumi.Input[Union['PgClusterConnectionsArgs', 'PgClusterConnectionsArgsDict']] connections: Details about the network connection for your cluster.
        :param pulumi.Input[int] cores: The number of CPU cores per replica.
        :param pulumi.Input[Union['PgClusterCredentialsArgs', 'PgClusterCredentialsArgsDict']] credentials: Credentials for the database user to be created.
        :param pulumi.Input[str] display_name: The friendly name of your cluster.
        :param pulumi.Input[Union['PgClusterFromBackupArgs', 'PgClusterFromBackupArgsDict']] from_backup: Creates the cluster based on the existing backup.
        :param pulumi.Input[int] instances: The total number of instances in the cluster (one master and n-1 standbys)
        :param pulumi.Input[str] location: The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
               be modified after datacenter creation (disallowed in update requests)
        :param pulumi.Input[Union['PgClusterMaintenanceWindowArgs', 'PgClusterMaintenanceWindowArgsDict']] maintenance_window: a weekly 4 hour-long window, during which maintenance might occur
        :param pulumi.Input[str] postgres_version: The PostgreSQL version of your cluster.
        :param pulumi.Input[int] ram: The amount of memory per instance in megabytes. Has to be a multiple of 1024.
        :param pulumi.Input[int] storage_size: The amount of storage per instance in megabytes. Has to be a multiple of 2048.
        :param pulumi.Input[str] storage_type: The storage type used in your cluster.
        :param pulumi.Input[str] synchronization_mode: Represents different modes of replication.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PgClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PgCluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PgClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PgClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_location: Optional[pulumi.Input[str]] = None,
                 connection_pooler: Optional[pulumi.Input[Union['PgClusterConnectionPoolerArgs', 'PgClusterConnectionPoolerArgsDict']]] = None,
                 connections: Optional[pulumi.Input[Union['PgClusterConnectionsArgs', 'PgClusterConnectionsArgsDict']]] = None,
                 cores: Optional[pulumi.Input[int]] = None,
                 credentials: Optional[pulumi.Input[Union['PgClusterCredentialsArgs', 'PgClusterCredentialsArgsDict']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 from_backup: Optional[pulumi.Input[Union['PgClusterFromBackupArgs', 'PgClusterFromBackupArgsDict']]] = None,
                 instances: Optional[pulumi.Input[int]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input[Union['PgClusterMaintenanceWindowArgs', 'PgClusterMaintenanceWindowArgsDict']]] = None,
                 postgres_version: Optional[pulumi.Input[str]] = None,
                 ram: Optional[pulumi.Input[int]] = None,
                 storage_size: Optional[pulumi.Input[int]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 synchronization_mode: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PgClusterArgs.__new__(PgClusterArgs)

            __props__.__dict__["backup_location"] = backup_location
            __props__.__dict__["connection_pooler"] = connection_pooler
            __props__.__dict__["connections"] = connections
            if cores is None and not opts.urn:
                raise TypeError("Missing required property 'cores'")
            __props__.__dict__["cores"] = cores
            if credentials is None and not opts.urn:
                raise TypeError("Missing required property 'credentials'")
            __props__.__dict__["credentials"] = credentials
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["from_backup"] = from_backup
            if instances is None and not opts.urn:
                raise TypeError("Missing required property 'instances'")
            __props__.__dict__["instances"] = instances
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["maintenance_window"] = maintenance_window
            if postgres_version is None and not opts.urn:
                raise TypeError("Missing required property 'postgres_version'")
            __props__.__dict__["postgres_version"] = postgres_version
            if ram is None and not opts.urn:
                raise TypeError("Missing required property 'ram'")
            __props__.__dict__["ram"] = ram
            if storage_size is None and not opts.urn:
                raise TypeError("Missing required property 'storage_size'")
            __props__.__dict__["storage_size"] = storage_size
            if storage_type is None and not opts.urn:
                raise TypeError("Missing required property 'storage_type'")
            __props__.__dict__["storage_type"] = storage_type
            if synchronization_mode is None and not opts.urn:
                raise TypeError("Missing required property 'synchronization_mode'")
            __props__.__dict__["synchronization_mode"] = synchronization_mode
            __props__.__dict__["dns_name"] = None
        super(PgCluster, __self__).__init__(
            'ionoscloud:index/pgCluster:PgCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backup_location: Optional[pulumi.Input[str]] = None,
            connection_pooler: Optional[pulumi.Input[Union['PgClusterConnectionPoolerArgs', 'PgClusterConnectionPoolerArgsDict']]] = None,
            connections: Optional[pulumi.Input[Union['PgClusterConnectionsArgs', 'PgClusterConnectionsArgsDict']]] = None,
            cores: Optional[pulumi.Input[int]] = None,
            credentials: Optional[pulumi.Input[Union['PgClusterCredentialsArgs', 'PgClusterCredentialsArgsDict']]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            dns_name: Optional[pulumi.Input[str]] = None,
            from_backup: Optional[pulumi.Input[Union['PgClusterFromBackupArgs', 'PgClusterFromBackupArgsDict']]] = None,
            instances: Optional[pulumi.Input[int]] = None,
            location: Optional[pulumi.Input[str]] = None,
            maintenance_window: Optional[pulumi.Input[Union['PgClusterMaintenanceWindowArgs', 'PgClusterMaintenanceWindowArgsDict']]] = None,
            postgres_version: Optional[pulumi.Input[str]] = None,
            ram: Optional[pulumi.Input[int]] = None,
            storage_size: Optional[pulumi.Input[int]] = None,
            storage_type: Optional[pulumi.Input[str]] = None,
            synchronization_mode: Optional[pulumi.Input[str]] = None) -> 'PgCluster':
        """
        Get an existing PgCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] backup_location: The S3 location where the backups will be stored.
        :param pulumi.Input[Union['PgClusterConnectionPoolerArgs', 'PgClusterConnectionPoolerArgsDict']] connection_pooler: Configuration options for the connection pooler
        :param pulumi.Input[Union['PgClusterConnectionsArgs', 'PgClusterConnectionsArgsDict']] connections: Details about the network connection for your cluster.
        :param pulumi.Input[int] cores: The number of CPU cores per replica.
        :param pulumi.Input[Union['PgClusterCredentialsArgs', 'PgClusterCredentialsArgsDict']] credentials: Credentials for the database user to be created.
        :param pulumi.Input[str] display_name: The friendly name of your cluster.
        :param pulumi.Input[str] dns_name: The DNS name pointing to your cluster
        :param pulumi.Input[Union['PgClusterFromBackupArgs', 'PgClusterFromBackupArgsDict']] from_backup: Creates the cluster based on the existing backup.
        :param pulumi.Input[int] instances: The total number of instances in the cluster (one master and n-1 standbys)
        :param pulumi.Input[str] location: The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
               be modified after datacenter creation (disallowed in update requests)
        :param pulumi.Input[Union['PgClusterMaintenanceWindowArgs', 'PgClusterMaintenanceWindowArgsDict']] maintenance_window: a weekly 4 hour-long window, during which maintenance might occur
        :param pulumi.Input[str] postgres_version: The PostgreSQL version of your cluster.
        :param pulumi.Input[int] ram: The amount of memory per instance in megabytes. Has to be a multiple of 1024.
        :param pulumi.Input[int] storage_size: The amount of storage per instance in megabytes. Has to be a multiple of 2048.
        :param pulumi.Input[str] storage_type: The storage type used in your cluster.
        :param pulumi.Input[str] synchronization_mode: Represents different modes of replication.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PgClusterState.__new__(_PgClusterState)

        __props__.__dict__["backup_location"] = backup_location
        __props__.__dict__["connection_pooler"] = connection_pooler
        __props__.__dict__["connections"] = connections
        __props__.__dict__["cores"] = cores
        __props__.__dict__["credentials"] = credentials
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["dns_name"] = dns_name
        __props__.__dict__["from_backup"] = from_backup
        __props__.__dict__["instances"] = instances
        __props__.__dict__["location"] = location
        __props__.__dict__["maintenance_window"] = maintenance_window
        __props__.__dict__["postgres_version"] = postgres_version
        __props__.__dict__["ram"] = ram
        __props__.__dict__["storage_size"] = storage_size
        __props__.__dict__["storage_type"] = storage_type
        __props__.__dict__["synchronization_mode"] = synchronization_mode
        return PgCluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="backupLocation")
    def backup_location(self) -> pulumi.Output[str]:
        """
        The S3 location where the backups will be stored.
        """
        return pulumi.get(self, "backup_location")

    @property
    @pulumi.getter(name="connectionPooler")
    def connection_pooler(self) -> pulumi.Output['outputs.PgClusterConnectionPooler']:
        """
        Configuration options for the connection pooler
        """
        return pulumi.get(self, "connection_pooler")

    @property
    @pulumi.getter
    def connections(self) -> pulumi.Output[Optional['outputs.PgClusterConnections']]:
        """
        Details about the network connection for your cluster.
        """
        return pulumi.get(self, "connections")

    @property
    @pulumi.getter
    def cores(self) -> pulumi.Output[int]:
        """
        The number of CPU cores per replica.
        """
        return pulumi.get(self, "cores")

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Output['outputs.PgClusterCredentials']:
        """
        Credentials for the database user to be created.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        The friendly name of your cluster.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> pulumi.Output[str]:
        """
        The DNS name pointing to your cluster
        """
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter(name="fromBackup")
    def from_backup(self) -> pulumi.Output[Optional['outputs.PgClusterFromBackup']]:
        """
        Creates the cluster based on the existing backup.
        """
        return pulumi.get(self, "from_backup")

    @property
    @pulumi.getter
    def instances(self) -> pulumi.Output[int]:
        """
        The total number of instances in the cluster (one master and n-1 standbys)
        """
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
        be modified after datacenter creation (disallowed in update requests)
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> pulumi.Output['outputs.PgClusterMaintenanceWindow']:
        """
        a weekly 4 hour-long window, during which maintenance might occur
        """
        return pulumi.get(self, "maintenance_window")

    @property
    @pulumi.getter(name="postgresVersion")
    def postgres_version(self) -> pulumi.Output[str]:
        """
        The PostgreSQL version of your cluster.
        """
        return pulumi.get(self, "postgres_version")

    @property
    @pulumi.getter
    def ram(self) -> pulumi.Output[int]:
        """
        The amount of memory per instance in megabytes. Has to be a multiple of 1024.
        """
        return pulumi.get(self, "ram")

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> pulumi.Output[int]:
        """
        The amount of storage per instance in megabytes. Has to be a multiple of 2048.
        """
        return pulumi.get(self, "storage_size")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> pulumi.Output[str]:
        """
        The storage type used in your cluster.
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter(name="synchronizationMode")
    def synchronization_mode(self) -> pulumi.Output[str]:
        """
        Represents different modes of replication.
        """
        return pulumi.get(self, "synchronization_mode")

