# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetKafkaClusterTopicResult',
    'AwaitableGetKafkaClusterTopicResult',
    'get_kafka_cluster_topic',
    'get_kafka_cluster_topic_output',
]

@pulumi.output_type
class GetKafkaClusterTopicResult:
    """
    A collection of values returned by getKafkaClusterTopic.
    """
    def __init__(__self__, cluster_id=None, id=None, location=None, name=None, number_of_partitions=None, partial_match=None, replication_factor=None, retention_time=None, segment_bytes=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if number_of_partitions and not isinstance(number_of_partitions, int):
            raise TypeError("Expected argument 'number_of_partitions' to be a int")
        pulumi.set(__self__, "number_of_partitions", number_of_partitions)
        if partial_match and not isinstance(partial_match, bool):
            raise TypeError("Expected argument 'partial_match' to be a bool")
        pulumi.set(__self__, "partial_match", partial_match)
        if replication_factor and not isinstance(replication_factor, int):
            raise TypeError("Expected argument 'replication_factor' to be a int")
        pulumi.set(__self__, "replication_factor", replication_factor)
        if retention_time and not isinstance(retention_time, int):
            raise TypeError("Expected argument 'retention_time' to be a int")
        pulumi.set(__self__, "retention_time", retention_time)
        if segment_bytes and not isinstance(segment_bytes, int):
            raise TypeError("Expected argument 'segment_bytes' to be a int")
        pulumi.set(__self__, "segment_bytes", segment_bytes)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numberOfPartitions")
    def number_of_partitions(self) -> int:
        return pulumi.get(self, "number_of_partitions")

    @property
    @pulumi.getter(name="partialMatch")
    def partial_match(self) -> Optional[bool]:
        return pulumi.get(self, "partial_match")

    @property
    @pulumi.getter(name="replicationFactor")
    def replication_factor(self) -> int:
        return pulumi.get(self, "replication_factor")

    @property
    @pulumi.getter(name="retentionTime")
    def retention_time(self) -> int:
        return pulumi.get(self, "retention_time")

    @property
    @pulumi.getter(name="segmentBytes")
    def segment_bytes(self) -> int:
        return pulumi.get(self, "segment_bytes")


class AwaitableGetKafkaClusterTopicResult(GetKafkaClusterTopicResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKafkaClusterTopicResult(
            cluster_id=self.cluster_id,
            id=self.id,
            location=self.location,
            name=self.name,
            number_of_partitions=self.number_of_partitions,
            partial_match=self.partial_match,
            replication_factor=self.replication_factor,
            retention_time=self.retention_time,
            segment_bytes=self.segment_bytes)


def get_kafka_cluster_topic(cluster_id: Optional[str] = None,
                            id: Optional[str] = None,
                            location: Optional[str] = None,
                            name: Optional[str] = None,
                            partial_match: Optional[bool] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKafkaClusterTopicResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['id'] = id
    __args__['location'] = location
    __args__['name'] = name
    __args__['partialMatch'] = partial_match
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:index/getKafkaClusterTopic:getKafkaClusterTopic', __args__, opts=opts, typ=GetKafkaClusterTopicResult).value

    return AwaitableGetKafkaClusterTopicResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        number_of_partitions=pulumi.get(__ret__, 'number_of_partitions'),
        partial_match=pulumi.get(__ret__, 'partial_match'),
        replication_factor=pulumi.get(__ret__, 'replication_factor'),
        retention_time=pulumi.get(__ret__, 'retention_time'),
        segment_bytes=pulumi.get(__ret__, 'segment_bytes'))


@_utilities.lift_output_func(get_kafka_cluster_topic)
def get_kafka_cluster_topic_output(cluster_id: Optional[pulumi.Input[str]] = None,
                                   id: Optional[pulumi.Input[Optional[str]]] = None,
                                   location: Optional[pulumi.Input[str]] = None,
                                   name: Optional[pulumi.Input[Optional[str]]] = None,
                                   partial_match: Optional[pulumi.Input[Optional[bool]]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetKafkaClusterTopicResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
