# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetAutoCertificateResult',
    'AwaitableGetAutoCertificateResult',
    'get_auto_certificate',
    'get_auto_certificate_output',
]

@pulumi.output_type
class GetAutoCertificateResult:
    """
    A collection of values returned by getAutoCertificate.
    """
    def __init__(__self__, common_name=None, id=None, key_algorithm=None, last_issued_certificate_id=None, location=None, name=None, provider_id=None, subject_alternative_names=None):
        if common_name and not isinstance(common_name, str):
            raise TypeError("Expected argument 'common_name' to be a str")
        pulumi.set(__self__, "common_name", common_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key_algorithm and not isinstance(key_algorithm, str):
            raise TypeError("Expected argument 'key_algorithm' to be a str")
        pulumi.set(__self__, "key_algorithm", key_algorithm)
        if last_issued_certificate_id and not isinstance(last_issued_certificate_id, str):
            raise TypeError("Expected argument 'last_issued_certificate_id' to be a str")
        pulumi.set(__self__, "last_issued_certificate_id", last_issued_certificate_id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provider_id and not isinstance(provider_id, str):
            raise TypeError("Expected argument 'provider_id' to be a str")
        pulumi.set(__self__, "provider_id", provider_id)
        if subject_alternative_names and not isinstance(subject_alternative_names, list):
            raise TypeError("Expected argument 'subject_alternative_names' to be a list")
        pulumi.set(__self__, "subject_alternative_names", subject_alternative_names)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> str:
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> str:
        return pulumi.get(self, "key_algorithm")

    @property
    @pulumi.getter(name="lastIssuedCertificateId")
    def last_issued_certificate_id(self) -> str:
        return pulumi.get(self, "last_issued_certificate_id")

    @property
    @pulumi.getter
    def location(self) -> str:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="providerId")
    def provider_id(self) -> str:
        return pulumi.get(self, "provider_id")

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Sequence[str]:
        return pulumi.get(self, "subject_alternative_names")


class AwaitableGetAutoCertificateResult(GetAutoCertificateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAutoCertificateResult(
            common_name=self.common_name,
            id=self.id,
            key_algorithm=self.key_algorithm,
            last_issued_certificate_id=self.last_issued_certificate_id,
            location=self.location,
            name=self.name,
            provider_id=self.provider_id,
            subject_alternative_names=self.subject_alternative_names)


def get_auto_certificate(id: Optional[str] = None,
                         location: Optional[str] = None,
                         name: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAutoCertificateResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['location'] = location
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:index/getAutoCertificate:getAutoCertificate', __args__, opts=opts, typ=GetAutoCertificateResult).value

    return AwaitableGetAutoCertificateResult(
        common_name=pulumi.get(__ret__, 'common_name'),
        id=pulumi.get(__ret__, 'id'),
        key_algorithm=pulumi.get(__ret__, 'key_algorithm'),
        last_issued_certificate_id=pulumi.get(__ret__, 'last_issued_certificate_id'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        provider_id=pulumi.get(__ret__, 'provider_id'),
        subject_alternative_names=pulumi.get(__ret__, 'subject_alternative_names'))


@_utilities.lift_output_func(get_auto_certificate)
def get_auto_certificate_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                                location: Optional[pulumi.Input[str]] = None,
                                name: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAutoCertificateResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
