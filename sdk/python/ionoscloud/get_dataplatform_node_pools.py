# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetDataplatformNodePoolsResult',
    'AwaitableGetDataplatformNodePoolsResult',
    'get_dataplatform_node_pools',
    'get_dataplatform_node_pools_output',
]

@pulumi.output_type
class GetDataplatformNodePoolsResult:
    """
    A collection of values returned by getDataplatformNodePools.
    """
    def __init__(__self__, cluster_id=None, id=None, name=None, node_pools=None, partial_match=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if node_pools and not isinstance(node_pools, list):
            raise TypeError("Expected argument 'node_pools' to be a list")
        pulumi.set(__self__, "node_pools", node_pools)
        if partial_match and not isinstance(partial_match, bool):
            raise TypeError("Expected argument 'partial_match' to be a bool")
        pulumi.set(__self__, "partial_match", partial_match)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        ID of the cluster the searched node pool is part of.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Sequence['outputs.GetDataplatformNodePoolsNodePoolResult']:
        """
        List of Node Pools - See the Node Pool section.
        """
        return pulumi.get(self, "node_pools")

    @property
    @pulumi.getter(name="partialMatch")
    def partial_match(self) -> Optional[bool]:
        return pulumi.get(self, "partial_match")


class AwaitableGetDataplatformNodePoolsResult(GetDataplatformNodePoolsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDataplatformNodePoolsResult(
            cluster_id=self.cluster_id,
            id=self.id,
            name=self.name,
            node_pools=self.node_pools,
            partial_match=self.partial_match)


def get_dataplatform_node_pools(cluster_id: Optional[str] = None,
                                name: Optional[str] = None,
                                partial_match: Optional[bool] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDataplatformNodePoolsResult:
    """
    The **Dataplatform Node Pools Data Source** can be used to search for and return a list of existing Dataplatform Node Pools under a Dataplatform Cluster.

    ## Example Usage


    :param str cluster_id: ID of the cluster the searched node pool is part of.
    :param str name: Name of an existing cluster that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partial_match` parameter is not set to true.
    :param bool partial_match: Whether partial matching is allowed or not when using name argument. Default value is false.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['name'] = name
    __args__['partialMatch'] = partial_match
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:index/getDataplatformNodePools:getDataplatformNodePools', __args__, opts=opts, typ=GetDataplatformNodePoolsResult).value

    return AwaitableGetDataplatformNodePoolsResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        node_pools=pulumi.get(__ret__, 'node_pools'),
        partial_match=pulumi.get(__ret__, 'partial_match'))


@_utilities.lift_output_func(get_dataplatform_node_pools)
def get_dataplatform_node_pools_output(cluster_id: Optional[pulumi.Input[str]] = None,
                                       name: Optional[pulumi.Input[Optional[str]]] = None,
                                       partial_match: Optional[pulumi.Input[Optional[bool]]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDataplatformNodePoolsResult]:
    """
    The **Dataplatform Node Pools Data Source** can be used to search for and return a list of existing Dataplatform Node Pools under a Dataplatform Cluster.

    ## Example Usage


    :param str cluster_id: ID of the cluster the searched node pool is part of.
    :param str name: Name of an existing cluster that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partial_match` parameter is not set to true.
    :param bool partial_match: Whether partial matching is allowed or not when using name argument. Default value is false.
    """
    ...
