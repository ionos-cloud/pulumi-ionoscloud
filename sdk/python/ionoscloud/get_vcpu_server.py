# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetVcpuServerResult',
    'AwaitableGetVcpuServerResult',
    'get_vcpu_server',
    'get_vcpu_server_output',
]

@pulumi.output_type
class GetVcpuServerResult:
    """
    A collection of values returned by getVcpuServer.
    """
    def __init__(__self__, availability_zone=None, boot_cdrom=None, boot_image=None, boot_volume=None, cdroms=None, cores=None, cpu_family=None, datacenter_id=None, id=None, labels=None, name=None, nics=None, ram=None, token=None, type=None, vm_state=None, volumes=None):
        if availability_zone and not isinstance(availability_zone, str):
            raise TypeError("Expected argument 'availability_zone' to be a str")
        pulumi.set(__self__, "availability_zone", availability_zone)
        if boot_cdrom and not isinstance(boot_cdrom, str):
            raise TypeError("Expected argument 'boot_cdrom' to be a str")
        pulumi.set(__self__, "boot_cdrom", boot_cdrom)
        if boot_image and not isinstance(boot_image, str):
            raise TypeError("Expected argument 'boot_image' to be a str")
        pulumi.set(__self__, "boot_image", boot_image)
        if boot_volume and not isinstance(boot_volume, str):
            raise TypeError("Expected argument 'boot_volume' to be a str")
        pulumi.set(__self__, "boot_volume", boot_volume)
        if cdroms and not isinstance(cdroms, list):
            raise TypeError("Expected argument 'cdroms' to be a list")
        pulumi.set(__self__, "cdroms", cdroms)
        if cores and not isinstance(cores, int):
            raise TypeError("Expected argument 'cores' to be a int")
        pulumi.set(__self__, "cores", cores)
        if cpu_family and not isinstance(cpu_family, str):
            raise TypeError("Expected argument 'cpu_family' to be a str")
        pulumi.set(__self__, "cpu_family", cpu_family)
        if datacenter_id and not isinstance(datacenter_id, str):
            raise TypeError("Expected argument 'datacenter_id' to be a str")
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, list):
            raise TypeError("Expected argument 'labels' to be a list")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nics and not isinstance(nics, list):
            raise TypeError("Expected argument 'nics' to be a list")
        pulumi.set(__self__, "nics", nics)
        if ram and not isinstance(ram, int):
            raise TypeError("Expected argument 'ram' to be a int")
        pulumi.set(__self__, "ram", ram)
        if token and not isinstance(token, str):
            raise TypeError("Expected argument 'token' to be a str")
        pulumi.set(__self__, "token", token)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vm_state and not isinstance(vm_state, str):
            raise TypeError("Expected argument 'vm_state' to be a str")
        pulumi.set(__self__, "vm_state", vm_state)
        if volumes and not isinstance(volumes, list):
            raise TypeError("Expected argument 'volumes' to be a list")
        pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        """
        The availability zone in which the volume should exist
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="bootCdrom")
    def boot_cdrom(self) -> str:
        return pulumi.get(self, "boot_cdrom")

    @property
    @pulumi.getter(name="bootImage")
    def boot_image(self) -> str:
        return pulumi.get(self, "boot_image")

    @property
    @pulumi.getter(name="bootVolume")
    def boot_volume(self) -> str:
        return pulumi.get(self, "boot_volume")

    @property
    @pulumi.getter
    def cdroms(self) -> Sequence['outputs.GetVcpuServerCdromResult']:
        """
        list of
        """
        return pulumi.get(self, "cdroms")

    @property
    @pulumi.getter
    def cores(self) -> int:
        """
        The total number of cores for the server
        """
        return pulumi.get(self, "cores")

    @property
    @pulumi.getter(name="cpuFamily")
    def cpu_family(self) -> str:
        """
        CPU architecture on which server gets provisioned; not all CPU architectures are available in all datacenter regions; available CPU architectures can be retrieved from the datacenter resource.
        """
        return pulumi.get(self, "cpu_family")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> str:
        """
        The id of the datacenter
        """
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The Id of the label
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Sequence['outputs.GetVcpuServerLabelResult']:
        """
        list of
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the firewall rule
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nics(self) -> Sequence['outputs.GetVcpuServerNicResult']:
        """
        list of
        """
        return pulumi.get(self, "nics")

    @property
    @pulumi.getter
    def ram(self) -> int:
        """
        The amount of memory for the server in MB
        """
        return pulumi.get(self, "ram")

    @property
    @pulumi.getter
    def token(self) -> str:
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of firewall rule
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vmState")
    def vm_state(self) -> str:
        """
        Status of the virtual Machine
        """
        return pulumi.get(self, "vm_state")

    @property
    @pulumi.getter
    def volumes(self) -> Sequence['outputs.GetVcpuServerVolumeResult']:
        """
        list of
        """
        return pulumi.get(self, "volumes")


class AwaitableGetVcpuServerResult(GetVcpuServerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVcpuServerResult(
            availability_zone=self.availability_zone,
            boot_cdrom=self.boot_cdrom,
            boot_image=self.boot_image,
            boot_volume=self.boot_volume,
            cdroms=self.cdroms,
            cores=self.cores,
            cpu_family=self.cpu_family,
            datacenter_id=self.datacenter_id,
            id=self.id,
            labels=self.labels,
            name=self.name,
            nics=self.nics,
            ram=self.ram,
            token=self.token,
            type=self.type,
            vm_state=self.vm_state,
            volumes=self.volumes)


def get_vcpu_server(datacenter_id: Optional[str] = None,
                    id: Optional[str] = None,
                    name: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVcpuServerResult:
    """
    The **VCPU Server data source** can be used to search for and return existing VCPU servers.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage


    :param str datacenter_id: Datacenter's UUID.
    :param str id: ID of the server you want to search for.
           
           `datacenter_id` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
    :param str name: Name of an existing server that you want to search for.
    """
    __args__ = dict()
    __args__['datacenterId'] = datacenter_id
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:index/getVcpuServer:getVcpuServer', __args__, opts=opts, typ=GetVcpuServerResult).value

    return AwaitableGetVcpuServerResult(
        availability_zone=pulumi.get(__ret__, 'availability_zone'),
        boot_cdrom=pulumi.get(__ret__, 'boot_cdrom'),
        boot_image=pulumi.get(__ret__, 'boot_image'),
        boot_volume=pulumi.get(__ret__, 'boot_volume'),
        cdroms=pulumi.get(__ret__, 'cdroms'),
        cores=pulumi.get(__ret__, 'cores'),
        cpu_family=pulumi.get(__ret__, 'cpu_family'),
        datacenter_id=pulumi.get(__ret__, 'datacenter_id'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        nics=pulumi.get(__ret__, 'nics'),
        ram=pulumi.get(__ret__, 'ram'),
        token=pulumi.get(__ret__, 'token'),
        type=pulumi.get(__ret__, 'type'),
        vm_state=pulumi.get(__ret__, 'vm_state'),
        volumes=pulumi.get(__ret__, 'volumes'))


@_utilities.lift_output_func(get_vcpu_server)
def get_vcpu_server_output(datacenter_id: Optional[pulumi.Input[str]] = None,
                           id: Optional[pulumi.Input[Optional[str]]] = None,
                           name: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetVcpuServerResult]:
    """
    The **VCPU Server data source** can be used to search for and return existing VCPU servers.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage


    :param str datacenter_id: Datacenter's UUID.
    :param str id: ID of the server you want to search for.
           
           `datacenter_id` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
    :param str name: Name of an existing server that you want to search for.
    """
    ...
