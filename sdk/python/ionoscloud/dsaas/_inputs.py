# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ClusterLanArgs',
    'ClusterLanArgsDict',
    'ClusterLanRouteArgs',
    'ClusterLanRouteArgsDict',
    'ClusterMaintenanceWindowArgs',
    'ClusterMaintenanceWindowArgsDict',
    'NodePoolMaintenanceWindowArgs',
    'NodePoolMaintenanceWindowArgsDict',
]

MYPY = False

if not MYPY:
    class ClusterLanArgsDict(TypedDict):
        lan_id: pulumi.Input[str]
        """
        The LAN ID of an existing LAN at the related data center
        """
        dhcp: NotRequired[pulumi.Input[bool]]
        """
        Indicates if the Kubernetes node pool LAN will reserve an IP using DHCP. The default value is 'true'
        """
        routes: NotRequired[pulumi.Input[Sequence[pulumi.Input['ClusterLanRouteArgsDict']]]]
        """
        An array of additional LANs attached to worker nodes
        """
elif False:
    ClusterLanArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterLanArgs:
    def __init__(__self__, *,
                 lan_id: pulumi.Input[str],
                 dhcp: Optional[pulumi.Input[bool]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterLanRouteArgs']]]] = None):
        """
        :param pulumi.Input[str] lan_id: The LAN ID of an existing LAN at the related data center
        :param pulumi.Input[bool] dhcp: Indicates if the Kubernetes node pool LAN will reserve an IP using DHCP. The default value is 'true'
        :param pulumi.Input[Sequence[pulumi.Input['ClusterLanRouteArgs']]] routes: An array of additional LANs attached to worker nodes
        """
        pulumi.set(__self__, "lan_id", lan_id)
        if dhcp is not None:
            pulumi.set(__self__, "dhcp", dhcp)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)

    @property
    @pulumi.getter(name="lanId")
    def lan_id(self) -> pulumi.Input[str]:
        """
        The LAN ID of an existing LAN at the related data center
        """
        return pulumi.get(self, "lan_id")

    @lan_id.setter
    def lan_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "lan_id", value)

    @property
    @pulumi.getter
    def dhcp(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the Kubernetes node pool LAN will reserve an IP using DHCP. The default value is 'true'
        """
        return pulumi.get(self, "dhcp")

    @dhcp.setter
    def dhcp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dhcp", value)

    @property
    @pulumi.getter
    def routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterLanRouteArgs']]]]:
        """
        An array of additional LANs attached to worker nodes
        """
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterLanRouteArgs']]]]):
        pulumi.set(self, "routes", value)


if not MYPY:
    class ClusterLanRouteArgsDict(TypedDict):
        gateway: pulumi.Input[str]
        """
        IPv4 or IPv6 gateway IP for the route
        """
        network: pulumi.Input[str]
        """
        IPv4 or IPv6 CIDR to be routed via the interface
        """
elif False:
    ClusterLanRouteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterLanRouteArgs:
    def __init__(__self__, *,
                 gateway: pulumi.Input[str],
                 network: pulumi.Input[str]):
        """
        :param pulumi.Input[str] gateway: IPv4 or IPv6 gateway IP for the route
        :param pulumi.Input[str] network: IPv4 or IPv6 CIDR to be routed via the interface
        """
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "network", network)

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Input[str]:
        """
        IPv4 or IPv6 gateway IP for the route
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def network(self) -> pulumi.Input[str]:
        """
        IPv4 or IPv6 CIDR to be routed via the interface
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: pulumi.Input[str]):
        pulumi.set(self, "network", value)


if not MYPY:
    class ClusterMaintenanceWindowArgsDict(TypedDict):
        day_of_the_week: pulumi.Input[str]
        time: pulumi.Input[str]
        """
        Time at which the maintenance should start.
        """
elif False:
    ClusterMaintenanceWindowArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterMaintenanceWindowArgs:
    def __init__(__self__, *,
                 day_of_the_week: pulumi.Input[str],
                 time: pulumi.Input[str]):
        """
        :param pulumi.Input[str] time: Time at which the maintenance should start.
        """
        pulumi.set(__self__, "day_of_the_week", day_of_the_week)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="dayOfTheWeek")
    def day_of_the_week(self) -> pulumi.Input[str]:
        return pulumi.get(self, "day_of_the_week")

    @day_of_the_week.setter
    def day_of_the_week(self, value: pulumi.Input[str]):
        pulumi.set(self, "day_of_the_week", value)

    @property
    @pulumi.getter
    def time(self) -> pulumi.Input[str]:
        """
        Time at which the maintenance should start.
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: pulumi.Input[str]):
        pulumi.set(self, "time", value)


if not MYPY:
    class NodePoolMaintenanceWindowArgsDict(TypedDict):
        day_of_the_week: pulumi.Input[str]
        time: pulumi.Input[str]
        """
        Time at which the maintenance should start.
        """
elif False:
    NodePoolMaintenanceWindowArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NodePoolMaintenanceWindowArgs:
    def __init__(__self__, *,
                 day_of_the_week: pulumi.Input[str],
                 time: pulumi.Input[str]):
        """
        :param pulumi.Input[str] time: Time at which the maintenance should start.
        """
        pulumi.set(__self__, "day_of_the_week", day_of_the_week)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="dayOfTheWeek")
    def day_of_the_week(self) -> pulumi.Input[str]:
        return pulumi.get(self, "day_of_the_week")

    @day_of_the_week.setter
    def day_of_the_week(self, value: pulumi.Input[str]):
        pulumi.set(self, "day_of_the_week", value)

    @property
    @pulumi.getter
    def time(self) -> pulumi.Input[str]:
        """
        Time at which the maintenance should start.
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: pulumi.Input[str]):
        pulumi.set(self, "time", value)


