# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['K8sClusterArgs', 'K8sCluster']

@pulumi.input_type
class K8sClusterArgs:
    def __init__(__self__, *,
                 allow_replace: Optional[pulumi.Input[bool]] = None,
                 api_subnet_allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 k8s_version: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input['K8sClusterMaintenanceWindowArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat_gateway_ip: Optional[pulumi.Input[str]] = None,
                 node_subnet: Optional[pulumi.Input[str]] = None,
                 public: Optional[pulumi.Input[bool]] = None,
                 s3_buckets: Optional[pulumi.Input[Sequence[pulumi.Input['K8sClusterS3BucketArgs']]]] = None):
        """
        The set of arguments for constructing a K8sCluster resource.
        :param pulumi.Input[bool] allow_replace: [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the cluster.
               
               ⚠️ **_Warning: `allow_replace` - lets you update immutable fields, but it first destroys and then re-creates the cluster in order to do it. Set the field to true only if you know what you are doing._**
        :param pulumi.Input[Sequence[pulumi.Input[str]]] api_subnet_allow_lists: [list] Access to the K8s API server is restricted to these CIDRs. Cluster-internal traffic is not affected by this restriction. If no allowlist is specified, access is not restricted. If an IP without subnet mask is provided, the default value will be used: 32 for IPv4 and 128 for IPv6.
        :param pulumi.Input[str] k8s_version: [string] The desired Kubernetes Version. For supported values, please check the API documentation. Downgrades are not supported. The provider will ignore downgrades of patch level.
        :param pulumi.Input[str] location: [string] This attribute is mandatory if the cluster is private. The location must be enabled for your contract, or you must have a data center at that location. This property is not adjustable.
        :param pulumi.Input['K8sClusterMaintenanceWindowArgs'] maintenance_window: A maintenance window comprise of a day of the week and a time for maintenance to be allowed
        :param pulumi.Input[str] name: [string] The name of the Kubernetes Cluster.
        :param pulumi.Input[str] nat_gateway_ip: [string] The NAT gateway IP of the cluster if the cluster is private. This attribute is immutable. Must be a reserved IP in the same location as the cluster's location. This attribute is mandatory if the cluster is private.
        :param pulumi.Input[str] node_subnet: [string] The node subnet of the cluster, if the cluster is private. This attribute is optional and immutable. Must be a valid CIDR notation for an IPv4 network prefix of 16 bits length.
        :param pulumi.Input[bool] public: [boolean] Indicates if the cluster is public or private. This attribute is immutable.
        :param pulumi.Input[Sequence[pulumi.Input['K8sClusterS3BucketArgs']]] s3_buckets: [list] List of IONOS Object Storage buckets configured for K8s usage. For now it contains only an IONOS Object Storage bucket used to store K8s API audit logs.
        """
        if allow_replace is not None:
            pulumi.set(__self__, "allow_replace", allow_replace)
        if api_subnet_allow_lists is not None:
            pulumi.set(__self__, "api_subnet_allow_lists", api_subnet_allow_lists)
        if k8s_version is not None:
            pulumi.set(__self__, "k8s_version", k8s_version)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if maintenance_window is not None:
            pulumi.set(__self__, "maintenance_window", maintenance_window)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat_gateway_ip is not None:
            pulumi.set(__self__, "nat_gateway_ip", nat_gateway_ip)
        if node_subnet is not None:
            pulumi.set(__self__, "node_subnet", node_subnet)
        if public is not None:
            pulumi.set(__self__, "public", public)
        if s3_buckets is not None:
            pulumi.set(__self__, "s3_buckets", s3_buckets)

    @property
    @pulumi.getter(name="allowReplace")
    def allow_replace(self) -> Optional[pulumi.Input[bool]]:
        """
        [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the cluster.

        ⚠️ **_Warning: `allow_replace` - lets you update immutable fields, but it first destroys and then re-creates the cluster in order to do it. Set the field to true only if you know what you are doing._**
        """
        return pulumi.get(self, "allow_replace")

    @allow_replace.setter
    def allow_replace(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_replace", value)

    @property
    @pulumi.getter(name="apiSubnetAllowLists")
    def api_subnet_allow_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        [list] Access to the K8s API server is restricted to these CIDRs. Cluster-internal traffic is not affected by this restriction. If no allowlist is specified, access is not restricted. If an IP without subnet mask is provided, the default value will be used: 32 for IPv4 and 128 for IPv6.
        """
        return pulumi.get(self, "api_subnet_allow_lists")

    @api_subnet_allow_lists.setter
    def api_subnet_allow_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "api_subnet_allow_lists", value)

    @property
    @pulumi.getter(name="k8sVersion")
    def k8s_version(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The desired Kubernetes Version. For supported values, please check the API documentation. Downgrades are not supported. The provider will ignore downgrades of patch level.
        """
        return pulumi.get(self, "k8s_version")

    @k8s_version.setter
    def k8s_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "k8s_version", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        [string] This attribute is mandatory if the cluster is private. The location must be enabled for your contract, or you must have a data center at that location. This property is not adjustable.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional[pulumi.Input['K8sClusterMaintenanceWindowArgs']]:
        """
        A maintenance window comprise of a day of the week and a time for maintenance to be allowed
        """
        return pulumi.get(self, "maintenance_window")

    @maintenance_window.setter
    def maintenance_window(self, value: Optional[pulumi.Input['K8sClusterMaintenanceWindowArgs']]):
        pulumi.set(self, "maintenance_window", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The name of the Kubernetes Cluster.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="natGatewayIp")
    def nat_gateway_ip(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The NAT gateway IP of the cluster if the cluster is private. This attribute is immutable. Must be a reserved IP in the same location as the cluster's location. This attribute is mandatory if the cluster is private.
        """
        return pulumi.get(self, "nat_gateway_ip")

    @nat_gateway_ip.setter
    def nat_gateway_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_gateway_ip", value)

    @property
    @pulumi.getter(name="nodeSubnet")
    def node_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The node subnet of the cluster, if the cluster is private. This attribute is optional and immutable. Must be a valid CIDR notation for an IPv4 network prefix of 16 bits length.
        """
        return pulumi.get(self, "node_subnet")

    @node_subnet.setter
    def node_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_subnet", value)

    @property
    @pulumi.getter
    def public(self) -> Optional[pulumi.Input[bool]]:
        """
        [boolean] Indicates if the cluster is public or private. This attribute is immutable.
        """
        return pulumi.get(self, "public")

    @public.setter
    def public(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public", value)

    @property
    @pulumi.getter(name="s3Buckets")
    def s3_buckets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sClusterS3BucketArgs']]]]:
        """
        [list] List of IONOS Object Storage buckets configured for K8s usage. For now it contains only an IONOS Object Storage bucket used to store K8s API audit logs.
        """
        return pulumi.get(self, "s3_buckets")

    @s3_buckets.setter
    def s3_buckets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sClusterS3BucketArgs']]]]):
        pulumi.set(self, "s3_buckets", value)


@pulumi.input_type
class _K8sClusterState:
    def __init__(__self__, *,
                 allow_replace: Optional[pulumi.Input[bool]] = None,
                 api_subnet_allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 k8s_version: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input['K8sClusterMaintenanceWindowArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat_gateway_ip: Optional[pulumi.Input[str]] = None,
                 node_subnet: Optional[pulumi.Input[str]] = None,
                 public: Optional[pulumi.Input[bool]] = None,
                 s3_buckets: Optional[pulumi.Input[Sequence[pulumi.Input['K8sClusterS3BucketArgs']]]] = None,
                 viable_node_pool_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering K8sCluster resources.
        :param pulumi.Input[bool] allow_replace: [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the cluster.
               
               ⚠️ **_Warning: `allow_replace` - lets you update immutable fields, but it first destroys and then re-creates the cluster in order to do it. Set the field to true only if you know what you are doing._**
        :param pulumi.Input[Sequence[pulumi.Input[str]]] api_subnet_allow_lists: [list] Access to the K8s API server is restricted to these CIDRs. Cluster-internal traffic is not affected by this restriction. If no allowlist is specified, access is not restricted. If an IP without subnet mask is provided, the default value will be used: 32 for IPv4 and 128 for IPv6.
        :param pulumi.Input[str] k8s_version: [string] The desired Kubernetes Version. For supported values, please check the API documentation. Downgrades are not supported. The provider will ignore downgrades of patch level.
        :param pulumi.Input[str] location: [string] This attribute is mandatory if the cluster is private. The location must be enabled for your contract, or you must have a data center at that location. This property is not adjustable.
        :param pulumi.Input['K8sClusterMaintenanceWindowArgs'] maintenance_window: A maintenance window comprise of a day of the week and a time for maintenance to be allowed
        :param pulumi.Input[str] name: [string] The name of the Kubernetes Cluster.
        :param pulumi.Input[str] nat_gateway_ip: [string] The NAT gateway IP of the cluster if the cluster is private. This attribute is immutable. Must be a reserved IP in the same location as the cluster's location. This attribute is mandatory if the cluster is private.
        :param pulumi.Input[str] node_subnet: [string] The node subnet of the cluster, if the cluster is private. This attribute is optional and immutable. Must be a valid CIDR notation for an IPv4 network prefix of 16 bits length.
        :param pulumi.Input[bool] public: [boolean] Indicates if the cluster is public or private. This attribute is immutable.
        :param pulumi.Input[Sequence[pulumi.Input['K8sClusterS3BucketArgs']]] s3_buckets: [list] List of IONOS Object Storage buckets configured for K8s usage. For now it contains only an IONOS Object Storage bucket used to store K8s API audit logs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] viable_node_pool_versions: [list] List of versions that may be used for node pools under this cluster
        """
        if allow_replace is not None:
            pulumi.set(__self__, "allow_replace", allow_replace)
        if api_subnet_allow_lists is not None:
            pulumi.set(__self__, "api_subnet_allow_lists", api_subnet_allow_lists)
        if k8s_version is not None:
            pulumi.set(__self__, "k8s_version", k8s_version)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if maintenance_window is not None:
            pulumi.set(__self__, "maintenance_window", maintenance_window)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat_gateway_ip is not None:
            pulumi.set(__self__, "nat_gateway_ip", nat_gateway_ip)
        if node_subnet is not None:
            pulumi.set(__self__, "node_subnet", node_subnet)
        if public is not None:
            pulumi.set(__self__, "public", public)
        if s3_buckets is not None:
            pulumi.set(__self__, "s3_buckets", s3_buckets)
        if viable_node_pool_versions is not None:
            pulumi.set(__self__, "viable_node_pool_versions", viable_node_pool_versions)

    @property
    @pulumi.getter(name="allowReplace")
    def allow_replace(self) -> Optional[pulumi.Input[bool]]:
        """
        [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the cluster.

        ⚠️ **_Warning: `allow_replace` - lets you update immutable fields, but it first destroys and then re-creates the cluster in order to do it. Set the field to true only if you know what you are doing._**
        """
        return pulumi.get(self, "allow_replace")

    @allow_replace.setter
    def allow_replace(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_replace", value)

    @property
    @pulumi.getter(name="apiSubnetAllowLists")
    def api_subnet_allow_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        [list] Access to the K8s API server is restricted to these CIDRs. Cluster-internal traffic is not affected by this restriction. If no allowlist is specified, access is not restricted. If an IP without subnet mask is provided, the default value will be used: 32 for IPv4 and 128 for IPv6.
        """
        return pulumi.get(self, "api_subnet_allow_lists")

    @api_subnet_allow_lists.setter
    def api_subnet_allow_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "api_subnet_allow_lists", value)

    @property
    @pulumi.getter(name="k8sVersion")
    def k8s_version(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The desired Kubernetes Version. For supported values, please check the API documentation. Downgrades are not supported. The provider will ignore downgrades of patch level.
        """
        return pulumi.get(self, "k8s_version")

    @k8s_version.setter
    def k8s_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "k8s_version", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        [string] This attribute is mandatory if the cluster is private. The location must be enabled for your contract, or you must have a data center at that location. This property is not adjustable.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional[pulumi.Input['K8sClusterMaintenanceWindowArgs']]:
        """
        A maintenance window comprise of a day of the week and a time for maintenance to be allowed
        """
        return pulumi.get(self, "maintenance_window")

    @maintenance_window.setter
    def maintenance_window(self, value: Optional[pulumi.Input['K8sClusterMaintenanceWindowArgs']]):
        pulumi.set(self, "maintenance_window", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The name of the Kubernetes Cluster.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="natGatewayIp")
    def nat_gateway_ip(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The NAT gateway IP of the cluster if the cluster is private. This attribute is immutable. Must be a reserved IP in the same location as the cluster's location. This attribute is mandatory if the cluster is private.
        """
        return pulumi.get(self, "nat_gateway_ip")

    @nat_gateway_ip.setter
    def nat_gateway_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_gateway_ip", value)

    @property
    @pulumi.getter(name="nodeSubnet")
    def node_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The node subnet of the cluster, if the cluster is private. This attribute is optional and immutable. Must be a valid CIDR notation for an IPv4 network prefix of 16 bits length.
        """
        return pulumi.get(self, "node_subnet")

    @node_subnet.setter
    def node_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_subnet", value)

    @property
    @pulumi.getter
    def public(self) -> Optional[pulumi.Input[bool]]:
        """
        [boolean] Indicates if the cluster is public or private. This attribute is immutable.
        """
        return pulumi.get(self, "public")

    @public.setter
    def public(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public", value)

    @property
    @pulumi.getter(name="s3Buckets")
    def s3_buckets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['K8sClusterS3BucketArgs']]]]:
        """
        [list] List of IONOS Object Storage buckets configured for K8s usage. For now it contains only an IONOS Object Storage bucket used to store K8s API audit logs.
        """
        return pulumi.get(self, "s3_buckets")

    @s3_buckets.setter
    def s3_buckets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['K8sClusterS3BucketArgs']]]]):
        pulumi.set(self, "s3_buckets", value)

    @property
    @pulumi.getter(name="viableNodePoolVersions")
    def viable_node_pool_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        [list] List of versions that may be used for node pools under this cluster
        """
        return pulumi.get(self, "viable_node_pool_versions")

    @viable_node_pool_versions.setter
    def viable_node_pool_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "viable_node_pool_versions", value)


class K8sCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_replace: Optional[pulumi.Input[bool]] = None,
                 api_subnet_allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 k8s_version: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input[Union['K8sClusterMaintenanceWindowArgs', 'K8sClusterMaintenanceWindowArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat_gateway_ip: Optional[pulumi.Input[str]] = None,
                 node_subnet: Optional[pulumi.Input[str]] = None,
                 public: Optional[pulumi.Input[bool]] = None,
                 s3_buckets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['K8sClusterS3BucketArgs', 'K8sClusterS3BucketArgsDict']]]]] = None,
                 __props__=None):
        """
        Manages a **Managed Kubernetes Cluster** on IonosCloud.

        ## Example Usage

        ### Public cluster

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import ionoscloud as ionoscloud

        example = ionoscloud.K8sCluster("example",
            api_subnet_allow_lists=["1.2.3.4/32"],
            k8s_version="1.28.6",
            maintenance_window=ionoscloud.K8sClusterMaintenanceWindowArgs(
                day_of_the_week="Sunday",
                time="09:00:00Z",
            ),
            s3_buckets=[ionoscloud.K8sClusterS3BucketArgs(
                name="globally_unique_bucket_name",
            )])
        ```
        <!--End PulumiCodeChooser -->

        ### Private Cluster

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import ionoscloud as ionoscloud

        testdatacenter = ionoscloud.compute.Datacenter("testdatacenter",
            location="de/fra",
            description="Test datacenter")
        k8sip = ionoscloud.compute.IPBlock("k8sip",
            location="de/fra",
            size=1)
        example = ionoscloud.K8sCluster("example",
            k8s_version="1.28.6",
            maintenance_window=ionoscloud.K8sClusterMaintenanceWindowArgs(
                day_of_the_week="Sunday",
                time="09:00:00Z",
            ),
            api_subnet_allow_lists=["1.2.3.4/32"],
            s3_buckets=[ionoscloud.K8sClusterS3BucketArgs(
                name="globally_unique_bucket_name",
            )],
            location="de/fra",
            nat_gateway_ip=k8sip.ips[0],
            node_subnet="192.168.0.0/16",
            public=False)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        A Kubernetes Cluster resource can be imported using its `resource id`, e.g.

        ```sh
        $ pulumi import ionoscloud:index/k8sCluster:K8sCluster demo {k8s_cluster uuid}
        ```

        This can be helpful when you want to import kubernetes clusters which you have already created manually or using other means, outside of terraform.

        ⚠️ **_Warning: **During a maintenance window, k8s can update your `k8s_version` if the old one reaches end of life. This upgrade will not be shown in the plan, as we prevent

        terraform from doing a downgrade, as downgrading `k8s_version` is not supported._**

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_replace: [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the cluster.
               
               ⚠️ **_Warning: `allow_replace` - lets you update immutable fields, but it first destroys and then re-creates the cluster in order to do it. Set the field to true only if you know what you are doing._**
        :param pulumi.Input[Sequence[pulumi.Input[str]]] api_subnet_allow_lists: [list] Access to the K8s API server is restricted to these CIDRs. Cluster-internal traffic is not affected by this restriction. If no allowlist is specified, access is not restricted. If an IP without subnet mask is provided, the default value will be used: 32 for IPv4 and 128 for IPv6.
        :param pulumi.Input[str] k8s_version: [string] The desired Kubernetes Version. For supported values, please check the API documentation. Downgrades are not supported. The provider will ignore downgrades of patch level.
        :param pulumi.Input[str] location: [string] This attribute is mandatory if the cluster is private. The location must be enabled for your contract, or you must have a data center at that location. This property is not adjustable.
        :param pulumi.Input[Union['K8sClusterMaintenanceWindowArgs', 'K8sClusterMaintenanceWindowArgsDict']] maintenance_window: A maintenance window comprise of a day of the week and a time for maintenance to be allowed
        :param pulumi.Input[str] name: [string] The name of the Kubernetes Cluster.
        :param pulumi.Input[str] nat_gateway_ip: [string] The NAT gateway IP of the cluster if the cluster is private. This attribute is immutable. Must be a reserved IP in the same location as the cluster's location. This attribute is mandatory if the cluster is private.
        :param pulumi.Input[str] node_subnet: [string] The node subnet of the cluster, if the cluster is private. This attribute is optional and immutable. Must be a valid CIDR notation for an IPv4 network prefix of 16 bits length.
        :param pulumi.Input[bool] public: [boolean] Indicates if the cluster is public or private. This attribute is immutable.
        :param pulumi.Input[Sequence[pulumi.Input[Union['K8sClusterS3BucketArgs', 'K8sClusterS3BucketArgsDict']]]] s3_buckets: [list] List of IONOS Object Storage buckets configured for K8s usage. For now it contains only an IONOS Object Storage bucket used to store K8s API audit logs.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[K8sClusterArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a **Managed Kubernetes Cluster** on IonosCloud.

        ## Example Usage

        ### Public cluster

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import ionoscloud as ionoscloud

        example = ionoscloud.K8sCluster("example",
            api_subnet_allow_lists=["1.2.3.4/32"],
            k8s_version="1.28.6",
            maintenance_window=ionoscloud.K8sClusterMaintenanceWindowArgs(
                day_of_the_week="Sunday",
                time="09:00:00Z",
            ),
            s3_buckets=[ionoscloud.K8sClusterS3BucketArgs(
                name="globally_unique_bucket_name",
            )])
        ```
        <!--End PulumiCodeChooser -->

        ### Private Cluster

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import ionoscloud as ionoscloud

        testdatacenter = ionoscloud.compute.Datacenter("testdatacenter",
            location="de/fra",
            description="Test datacenter")
        k8sip = ionoscloud.compute.IPBlock("k8sip",
            location="de/fra",
            size=1)
        example = ionoscloud.K8sCluster("example",
            k8s_version="1.28.6",
            maintenance_window=ionoscloud.K8sClusterMaintenanceWindowArgs(
                day_of_the_week="Sunday",
                time="09:00:00Z",
            ),
            api_subnet_allow_lists=["1.2.3.4/32"],
            s3_buckets=[ionoscloud.K8sClusterS3BucketArgs(
                name="globally_unique_bucket_name",
            )],
            location="de/fra",
            nat_gateway_ip=k8sip.ips[0],
            node_subnet="192.168.0.0/16",
            public=False)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        A Kubernetes Cluster resource can be imported using its `resource id`, e.g.

        ```sh
        $ pulumi import ionoscloud:index/k8sCluster:K8sCluster demo {k8s_cluster uuid}
        ```

        This can be helpful when you want to import kubernetes clusters which you have already created manually or using other means, outside of terraform.

        ⚠️ **_Warning: **During a maintenance window, k8s can update your `k8s_version` if the old one reaches end of life. This upgrade will not be shown in the plan, as we prevent

        terraform from doing a downgrade, as downgrading `k8s_version` is not supported._**

        :param str resource_name: The name of the resource.
        :param K8sClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(K8sClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_replace: Optional[pulumi.Input[bool]] = None,
                 api_subnet_allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 k8s_version: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input[Union['K8sClusterMaintenanceWindowArgs', 'K8sClusterMaintenanceWindowArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat_gateway_ip: Optional[pulumi.Input[str]] = None,
                 node_subnet: Optional[pulumi.Input[str]] = None,
                 public: Optional[pulumi.Input[bool]] = None,
                 s3_buckets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['K8sClusterS3BucketArgs', 'K8sClusterS3BucketArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = K8sClusterArgs.__new__(K8sClusterArgs)

            __props__.__dict__["allow_replace"] = allow_replace
            __props__.__dict__["api_subnet_allow_lists"] = api_subnet_allow_lists
            __props__.__dict__["k8s_version"] = k8s_version
            __props__.__dict__["location"] = location
            __props__.__dict__["maintenance_window"] = maintenance_window
            __props__.__dict__["name"] = name
            __props__.__dict__["nat_gateway_ip"] = nat_gateway_ip
            __props__.__dict__["node_subnet"] = node_subnet
            __props__.__dict__["public"] = public
            __props__.__dict__["s3_buckets"] = s3_buckets
            __props__.__dict__["viable_node_pool_versions"] = None
        super(K8sCluster, __self__).__init__(
            'ionoscloud:index/k8sCluster:K8sCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_replace: Optional[pulumi.Input[bool]] = None,
            api_subnet_allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            k8s_version: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[str]] = None,
            maintenance_window: Optional[pulumi.Input[Union['K8sClusterMaintenanceWindowArgs', 'K8sClusterMaintenanceWindowArgsDict']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nat_gateway_ip: Optional[pulumi.Input[str]] = None,
            node_subnet: Optional[pulumi.Input[str]] = None,
            public: Optional[pulumi.Input[bool]] = None,
            s3_buckets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['K8sClusterS3BucketArgs', 'K8sClusterS3BucketArgsDict']]]]] = None,
            viable_node_pool_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'K8sCluster':
        """
        Get an existing K8sCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_replace: [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the cluster.
               
               ⚠️ **_Warning: `allow_replace` - lets you update immutable fields, but it first destroys and then re-creates the cluster in order to do it. Set the field to true only if you know what you are doing._**
        :param pulumi.Input[Sequence[pulumi.Input[str]]] api_subnet_allow_lists: [list] Access to the K8s API server is restricted to these CIDRs. Cluster-internal traffic is not affected by this restriction. If no allowlist is specified, access is not restricted. If an IP without subnet mask is provided, the default value will be used: 32 for IPv4 and 128 for IPv6.
        :param pulumi.Input[str] k8s_version: [string] The desired Kubernetes Version. For supported values, please check the API documentation. Downgrades are not supported. The provider will ignore downgrades of patch level.
        :param pulumi.Input[str] location: [string] This attribute is mandatory if the cluster is private. The location must be enabled for your contract, or you must have a data center at that location. This property is not adjustable.
        :param pulumi.Input[Union['K8sClusterMaintenanceWindowArgs', 'K8sClusterMaintenanceWindowArgsDict']] maintenance_window: A maintenance window comprise of a day of the week and a time for maintenance to be allowed
        :param pulumi.Input[str] name: [string] The name of the Kubernetes Cluster.
        :param pulumi.Input[str] nat_gateway_ip: [string] The NAT gateway IP of the cluster if the cluster is private. This attribute is immutable. Must be a reserved IP in the same location as the cluster's location. This attribute is mandatory if the cluster is private.
        :param pulumi.Input[str] node_subnet: [string] The node subnet of the cluster, if the cluster is private. This attribute is optional and immutable. Must be a valid CIDR notation for an IPv4 network prefix of 16 bits length.
        :param pulumi.Input[bool] public: [boolean] Indicates if the cluster is public or private. This attribute is immutable.
        :param pulumi.Input[Sequence[pulumi.Input[Union['K8sClusterS3BucketArgs', 'K8sClusterS3BucketArgsDict']]]] s3_buckets: [list] List of IONOS Object Storage buckets configured for K8s usage. For now it contains only an IONOS Object Storage bucket used to store K8s API audit logs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] viable_node_pool_versions: [list] List of versions that may be used for node pools under this cluster
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _K8sClusterState.__new__(_K8sClusterState)

        __props__.__dict__["allow_replace"] = allow_replace
        __props__.__dict__["api_subnet_allow_lists"] = api_subnet_allow_lists
        __props__.__dict__["k8s_version"] = k8s_version
        __props__.__dict__["location"] = location
        __props__.__dict__["maintenance_window"] = maintenance_window
        __props__.__dict__["name"] = name
        __props__.__dict__["nat_gateway_ip"] = nat_gateway_ip
        __props__.__dict__["node_subnet"] = node_subnet
        __props__.__dict__["public"] = public
        __props__.__dict__["s3_buckets"] = s3_buckets
        __props__.__dict__["viable_node_pool_versions"] = viable_node_pool_versions
        return K8sCluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowReplace")
    def allow_replace(self) -> pulumi.Output[Optional[bool]]:
        """
        [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the cluster.

        ⚠️ **_Warning: `allow_replace` - lets you update immutable fields, but it first destroys and then re-creates the cluster in order to do it. Set the field to true only if you know what you are doing._**
        """
        return pulumi.get(self, "allow_replace")

    @property
    @pulumi.getter(name="apiSubnetAllowLists")
    def api_subnet_allow_lists(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        [list] Access to the K8s API server is restricted to these CIDRs. Cluster-internal traffic is not affected by this restriction. If no allowlist is specified, access is not restricted. If an IP without subnet mask is provided, the default value will be used: 32 for IPv4 and 128 for IPv6.
        """
        return pulumi.get(self, "api_subnet_allow_lists")

    @property
    @pulumi.getter(name="k8sVersion")
    def k8s_version(self) -> pulumi.Output[str]:
        """
        [string] The desired Kubernetes Version. For supported values, please check the API documentation. Downgrades are not supported. The provider will ignore downgrades of patch level.
        """
        return pulumi.get(self, "k8s_version")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[Optional[str]]:
        """
        [string] This attribute is mandatory if the cluster is private. The location must be enabled for your contract, or you must have a data center at that location. This property is not adjustable.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> pulumi.Output['outputs.K8sClusterMaintenanceWindow']:
        """
        A maintenance window comprise of a day of the week and a time for maintenance to be allowed
        """
        return pulumi.get(self, "maintenance_window")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        [string] The name of the Kubernetes Cluster.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="natGatewayIp")
    def nat_gateway_ip(self) -> pulumi.Output[Optional[str]]:
        """
        [string] The NAT gateway IP of the cluster if the cluster is private. This attribute is immutable. Must be a reserved IP in the same location as the cluster's location. This attribute is mandatory if the cluster is private.
        """
        return pulumi.get(self, "nat_gateway_ip")

    @property
    @pulumi.getter(name="nodeSubnet")
    def node_subnet(self) -> pulumi.Output[str]:
        """
        [string] The node subnet of the cluster, if the cluster is private. This attribute is optional and immutable. Must be a valid CIDR notation for an IPv4 network prefix of 16 bits length.
        """
        return pulumi.get(self, "node_subnet")

    @property
    @pulumi.getter
    def public(self) -> pulumi.Output[Optional[bool]]:
        """
        [boolean] Indicates if the cluster is public or private. This attribute is immutable.
        """
        return pulumi.get(self, "public")

    @property
    @pulumi.getter(name="s3Buckets")
    def s3_buckets(self) -> pulumi.Output[Optional[Sequence['outputs.K8sClusterS3Bucket']]]:
        """
        [list] List of IONOS Object Storage buckets configured for K8s usage. For now it contains only an IONOS Object Storage bucket used to store K8s API audit logs.
        """
        return pulumi.get(self, "s3_buckets")

    @property
    @pulumi.getter(name="viableNodePoolVersions")
    def viable_node_pool_versions(self) -> pulumi.Output[Sequence[str]]:
        """
        [list] List of versions that may be used for node pools under this cluster
        """
        return pulumi.get(self, "viable_node_pool_versions")

