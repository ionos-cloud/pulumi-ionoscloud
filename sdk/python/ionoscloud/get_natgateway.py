# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetNatgatewayResult',
    'AwaitableGetNatgatewayResult',
    'get_natgateway',
    'get_natgateway_output',
]

@pulumi.output_type
class GetNatgatewayResult:
    """
    A collection of values returned by getNatgateway.
    """
    def __init__(__self__, datacenter_id=None, id=None, lans=None, name=None, public_ips=None):
        if datacenter_id and not isinstance(datacenter_id, str):
            raise TypeError("Expected argument 'datacenter_id' to be a str")
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lans and not isinstance(lans, list):
            raise TypeError("Expected argument 'lans' to be a list")
        pulumi.set(__self__, "lans", lans)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if public_ips and not isinstance(public_ips, list):
            raise TypeError("Expected argument 'public_ips' to be a list")
        pulumi.set(__self__, "public_ips", public_ips)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> str:
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id for the LAN connected to the NAT gateway
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def lans(self) -> Sequence['outputs.GetNatgatewayLanResult']:
        """
        Collection of LANs connected to the NAT gateway. IPs must contain valid subnet mask. If user will not provide any IP then system will generate an IP with /24 subnet.
        """
        return pulumi.get(self, "lans")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of that natgateway
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="publicIps")
    def public_ips(self) -> Sequence[str]:
        """
        Collection of public IP addresses of the NAT gateway. Should be customer reserved IP addresses in that location
        """
        return pulumi.get(self, "public_ips")


class AwaitableGetNatgatewayResult(GetNatgatewayResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNatgatewayResult(
            datacenter_id=self.datacenter_id,
            id=self.id,
            lans=self.lans,
            name=self.name,
            public_ips=self.public_ips)


def get_natgateway(datacenter_id: Optional[str] = None,
                   id: Optional[str] = None,
                   name: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNatgatewayResult:
    """
    The **NAT gateway data source** can be used to search for and return existing NAT Gateways.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage


    :param str datacenter_id: Datacenter's UUID.
    :param str id: ID of the network load balancer forwarding rule you want to search for.
           
           `datacenter_id` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
    :param str name: Name of an existing network load balancer forwarding rule that you want to search for.
    """
    __args__ = dict()
    __args__['datacenterId'] = datacenter_id
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:index/getNatgateway:getNatgateway', __args__, opts=opts, typ=GetNatgatewayResult).value

    return AwaitableGetNatgatewayResult(
        datacenter_id=pulumi.get(__ret__, 'datacenter_id'),
        id=pulumi.get(__ret__, 'id'),
        lans=pulumi.get(__ret__, 'lans'),
        name=pulumi.get(__ret__, 'name'),
        public_ips=pulumi.get(__ret__, 'public_ips'))
def get_natgateway_output(datacenter_id: Optional[pulumi.Input[str]] = None,
                          id: Optional[pulumi.Input[Optional[str]]] = None,
                          name: Optional[pulumi.Input[Optional[str]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNatgatewayResult]:
    """
    The **NAT gateway data source** can be used to search for and return existing NAT Gateways.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage


    :param str datacenter_id: Datacenter's UUID.
    :param str id: ID of the network load balancer forwarding rule you want to search for.
           
           `datacenter_id` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
    :param str name: Name of an existing network load balancer forwarding rule that you want to search for.
    """
    __args__ = dict()
    __args__['datacenterId'] = datacenter_id
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:index/getNatgateway:getNatgateway', __args__, opts=opts, typ=GetNatgatewayResult)
    return __ret__.apply(lambda __response__: GetNatgatewayResult(
        datacenter_id=pulumi.get(__response__, 'datacenter_id'),
        id=pulumi.get(__response__, 'id'),
        lans=pulumi.get(__response__, 'lans'),
        name=pulumi.get(__response__, 'name'),
        public_ips=pulumi.get(__response__, 'public_ips')))
