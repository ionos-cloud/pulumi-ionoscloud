# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetAutoscalingGroupServersResult',
    'AwaitableGetAutoscalingGroupServersResult',
    'get_autoscaling_group_servers',
    'get_autoscaling_group_servers_output',
]

@pulumi.output_type
class GetAutoscalingGroupServersResult:
    """
    A collection of values returned by getAutoscalingGroupServers.
    """
    def __init__(__self__, group_id=None, id=None, servers=None):
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if servers and not isinstance(servers, list):
            raise TypeError("Expected argument 'servers' to be a list")
        pulumi.set(__self__, "servers", servers)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def servers(self) -> Sequence['outputs.GetAutoscalingGroupServersServerResult']:
        return pulumi.get(self, "servers")


class AwaitableGetAutoscalingGroupServersResult(GetAutoscalingGroupServersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAutoscalingGroupServersResult(
            group_id=self.group_id,
            id=self.id,
            servers=self.servers)


def get_autoscaling_group_servers(group_id: Optional[str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAutoscalingGroupServersResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['groupId'] = group_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:index/getAutoscalingGroupServers:getAutoscalingGroupServers', __args__, opts=opts, typ=GetAutoscalingGroupServersResult).value

    return AwaitableGetAutoscalingGroupServersResult(
        group_id=pulumi.get(__ret__, 'group_id'),
        id=pulumi.get(__ret__, 'id'),
        servers=pulumi.get(__ret__, 'servers'))
def get_autoscaling_group_servers_output(group_id: Optional[pulumi.Input[str]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAutoscalingGroupServersResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['groupId'] = group_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:index/getAutoscalingGroupServers:getAutoscalingGroupServers', __args__, opts=opts, typ=GetAutoscalingGroupServersResult)
    return __ret__.apply(lambda __response__: GetAutoscalingGroupServersResult(
        group_id=pulumi.get(__response__, 'group_id'),
        id=pulumi.get(__response__, 'id'),
        servers=pulumi.get(__response__, 'servers')))
