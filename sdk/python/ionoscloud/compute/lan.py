# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LanArgs', 'Lan']

@pulumi.input_type
class LanArgs:
    def __init__(__self__, *,
                 datacenter_id: pulumi.Input[str],
                 ip_failovers: Optional[pulumi.Input[Sequence[pulumi.Input['LanIpFailoverArgs']]]] = None,
                 ipv6_cidr_block: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pcc: Optional[pulumi.Input[str]] = None,
                 public: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Lan resource.
        :param pulumi.Input[str] datacenter_id: [string] The ID of a Virtual Data Center.
        :param pulumi.Input[Sequence[pulumi.Input['LanIpFailoverArgs']]] ip_failovers: IP failover configurations for lan
        :param pulumi.Input[str] ipv6_cidr_block: Contains the LAN's /64 IPv6 CIDR block if this LAN is IPv6 enabled. 'AUTO' will result in enabling this LAN for IPv6 and automatically assign a /64 IPv6 CIDR block to this LAN. If you specify your own IPv6 CIDR block then you must provide a unique /64 block, which is inside the IPv6 CIDR block of the virtual datacenter and unique inside all LANs from this virtual datacenter.
        :param pulumi.Input[str] name: [string] The name of the LAN.
        :param pulumi.Input[str] pcc: [String] The unique id of a `compute.Crossconnect` resource, in order. It needs to be ensured that IP addresses of the NICs of all LANs connected to a given Cross Connect is not duplicated and belongs to the same subnet range
        :param pulumi.Input[bool] public: [Boolean] Indicates if the LAN faces the public Internet (true) or not (false).
        """
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        if ip_failovers is not None:
            pulumi.set(__self__, "ip_failovers", ip_failovers)
        if ipv6_cidr_block is not None:
            pulumi.set(__self__, "ipv6_cidr_block", ipv6_cidr_block)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pcc is not None:
            pulumi.set(__self__, "pcc", pcc)
        if public is not None:
            pulumi.set(__self__, "public", public)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Input[str]:
        """
        [string] The ID of a Virtual Data Center.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter(name="ipFailovers")
    def ip_failovers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LanIpFailoverArgs']]]]:
        """
        IP failover configurations for lan
        """
        return pulumi.get(self, "ip_failovers")

    @ip_failovers.setter
    def ip_failovers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LanIpFailoverArgs']]]]):
        pulumi.set(self, "ip_failovers", value)

    @property
    @pulumi.getter(name="ipv6CidrBlock")
    def ipv6_cidr_block(self) -> Optional[pulumi.Input[str]]:
        """
        Contains the LAN's /64 IPv6 CIDR block if this LAN is IPv6 enabled. 'AUTO' will result in enabling this LAN for IPv6 and automatically assign a /64 IPv6 CIDR block to this LAN. If you specify your own IPv6 CIDR block then you must provide a unique /64 block, which is inside the IPv6 CIDR block of the virtual datacenter and unique inside all LANs from this virtual datacenter.
        """
        return pulumi.get(self, "ipv6_cidr_block")

    @ipv6_cidr_block.setter
    def ipv6_cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_cidr_block", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The name of the LAN.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def pcc(self) -> Optional[pulumi.Input[str]]:
        """
        [String] The unique id of a `compute.Crossconnect` resource, in order. It needs to be ensured that IP addresses of the NICs of all LANs connected to a given Cross Connect is not duplicated and belongs to the same subnet range
        """
        return pulumi.get(self, "pcc")

    @pcc.setter
    def pcc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pcc", value)

    @property
    @pulumi.getter
    def public(self) -> Optional[pulumi.Input[bool]]:
        """
        [Boolean] Indicates if the LAN faces the public Internet (true) or not (false).
        """
        return pulumi.get(self, "public")

    @public.setter
    def public(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public", value)


@pulumi.input_type
class _LanState:
    def __init__(__self__, *,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 ip_failovers: Optional[pulumi.Input[Sequence[pulumi.Input['LanIpFailoverArgs']]]] = None,
                 ipv6_cidr_block: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pcc: Optional[pulumi.Input[str]] = None,
                 public: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Lan resources.
        :param pulumi.Input[str] datacenter_id: [string] The ID of a Virtual Data Center.
        :param pulumi.Input[Sequence[pulumi.Input['LanIpFailoverArgs']]] ip_failovers: IP failover configurations for lan
        :param pulumi.Input[str] ipv6_cidr_block: Contains the LAN's /64 IPv6 CIDR block if this LAN is IPv6 enabled. 'AUTO' will result in enabling this LAN for IPv6 and automatically assign a /64 IPv6 CIDR block to this LAN. If you specify your own IPv6 CIDR block then you must provide a unique /64 block, which is inside the IPv6 CIDR block of the virtual datacenter and unique inside all LANs from this virtual datacenter.
        :param pulumi.Input[str] name: [string] The name of the LAN.
        :param pulumi.Input[str] pcc: [String] The unique id of a `compute.Crossconnect` resource, in order. It needs to be ensured that IP addresses of the NICs of all LANs connected to a given Cross Connect is not duplicated and belongs to the same subnet range
        :param pulumi.Input[bool] public: [Boolean] Indicates if the LAN faces the public Internet (true) or not (false).
        """
        if datacenter_id is not None:
            pulumi.set(__self__, "datacenter_id", datacenter_id)
        if ip_failovers is not None:
            pulumi.set(__self__, "ip_failovers", ip_failovers)
        if ipv6_cidr_block is not None:
            pulumi.set(__self__, "ipv6_cidr_block", ipv6_cidr_block)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pcc is not None:
            pulumi.set(__self__, "pcc", pcc)
        if public is not None:
            pulumi.set(__self__, "public", public)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The ID of a Virtual Data Center.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter(name="ipFailovers")
    def ip_failovers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LanIpFailoverArgs']]]]:
        """
        IP failover configurations for lan
        """
        return pulumi.get(self, "ip_failovers")

    @ip_failovers.setter
    def ip_failovers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LanIpFailoverArgs']]]]):
        pulumi.set(self, "ip_failovers", value)

    @property
    @pulumi.getter(name="ipv6CidrBlock")
    def ipv6_cidr_block(self) -> Optional[pulumi.Input[str]]:
        """
        Contains the LAN's /64 IPv6 CIDR block if this LAN is IPv6 enabled. 'AUTO' will result in enabling this LAN for IPv6 and automatically assign a /64 IPv6 CIDR block to this LAN. If you specify your own IPv6 CIDR block then you must provide a unique /64 block, which is inside the IPv6 CIDR block of the virtual datacenter and unique inside all LANs from this virtual datacenter.
        """
        return pulumi.get(self, "ipv6_cidr_block")

    @ipv6_cidr_block.setter
    def ipv6_cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_cidr_block", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The name of the LAN.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def pcc(self) -> Optional[pulumi.Input[str]]:
        """
        [String] The unique id of a `compute.Crossconnect` resource, in order. It needs to be ensured that IP addresses of the NICs of all LANs connected to a given Cross Connect is not duplicated and belongs to the same subnet range
        """
        return pulumi.get(self, "pcc")

    @pcc.setter
    def pcc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pcc", value)

    @property
    @pulumi.getter
    def public(self) -> Optional[pulumi.Input[bool]]:
        """
        [Boolean] Indicates if the LAN faces the public Internet (true) or not (false).
        """
        return pulumi.get(self, "public")

    @public.setter
    def public(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public", value)


class Lan(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 ip_failovers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LanIpFailoverArgs']]]]] = None,
                 ipv6_cidr_block: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pcc: Optional[pulumi.Input[str]] = None,
                 public: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Manages a **LAN** on IonosCloud.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import ionoscloud as ionoscloud

        example_datacenter = ionoscloud.compute.Datacenter("exampleDatacenter",
            location="us/las",
            description="Datacenter Description",
            sec_auth_protection=False)
        example_crossconnect = ionoscloud.compute.Crossconnect("exampleCrossconnect", description="Cross Connect Description")
        example_lan = ionoscloud.compute.Lan("exampleLan",
            datacenter_id=example_datacenter.id,
            public=False,
            pcc=example_crossconnect.id)
        ```
        <!--End PulumiCodeChooser -->

        ### With IPv6 Enabled

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import ionoscloud as ionoscloud

        example_datacenter = ionoscloud.compute.Datacenter("exampleDatacenter",
            location="de/txl",
            description="Datacenter Description",
            sec_auth_protection=False)
        example_lan = ionoscloud.compute.Lan("exampleLan",
            datacenter_id=example_datacenter.id,
            public=True,
            ipv6_cidr_block="AUTO")
        ```
        <!--End PulumiCodeChooser -->

        ## Important Notes

        - Please note that only LANs datacenters found in the same physical location can be connected through a Cross-connect
        - A LAN cannot be a part of two Cross-connects

        ## Import

        Resource Lan can be imported using the `resource id`, e.g.

        ```sh
        $ pulumi import ionoscloud:compute/lan:Lan mylan {datacenter uuid}/{lan id}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] datacenter_id: [string] The ID of a Virtual Data Center.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LanIpFailoverArgs']]]] ip_failovers: IP failover configurations for lan
        :param pulumi.Input[str] ipv6_cidr_block: Contains the LAN's /64 IPv6 CIDR block if this LAN is IPv6 enabled. 'AUTO' will result in enabling this LAN for IPv6 and automatically assign a /64 IPv6 CIDR block to this LAN. If you specify your own IPv6 CIDR block then you must provide a unique /64 block, which is inside the IPv6 CIDR block of the virtual datacenter and unique inside all LANs from this virtual datacenter.
        :param pulumi.Input[str] name: [string] The name of the LAN.
        :param pulumi.Input[str] pcc: [String] The unique id of a `compute.Crossconnect` resource, in order. It needs to be ensured that IP addresses of the NICs of all LANs connected to a given Cross Connect is not duplicated and belongs to the same subnet range
        :param pulumi.Input[bool] public: [Boolean] Indicates if the LAN faces the public Internet (true) or not (false).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LanArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a **LAN** on IonosCloud.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import ionoscloud as ionoscloud

        example_datacenter = ionoscloud.compute.Datacenter("exampleDatacenter",
            location="us/las",
            description="Datacenter Description",
            sec_auth_protection=False)
        example_crossconnect = ionoscloud.compute.Crossconnect("exampleCrossconnect", description="Cross Connect Description")
        example_lan = ionoscloud.compute.Lan("exampleLan",
            datacenter_id=example_datacenter.id,
            public=False,
            pcc=example_crossconnect.id)
        ```
        <!--End PulumiCodeChooser -->

        ### With IPv6 Enabled

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import ionoscloud as ionoscloud

        example_datacenter = ionoscloud.compute.Datacenter("exampleDatacenter",
            location="de/txl",
            description="Datacenter Description",
            sec_auth_protection=False)
        example_lan = ionoscloud.compute.Lan("exampleLan",
            datacenter_id=example_datacenter.id,
            public=True,
            ipv6_cidr_block="AUTO")
        ```
        <!--End PulumiCodeChooser -->

        ## Important Notes

        - Please note that only LANs datacenters found in the same physical location can be connected through a Cross-connect
        - A LAN cannot be a part of two Cross-connects

        ## Import

        Resource Lan can be imported using the `resource id`, e.g.

        ```sh
        $ pulumi import ionoscloud:compute/lan:Lan mylan {datacenter uuid}/{lan id}
        ```

        :param str resource_name: The name of the resource.
        :param LanArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LanArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 ip_failovers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LanIpFailoverArgs']]]]] = None,
                 ipv6_cidr_block: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pcc: Optional[pulumi.Input[str]] = None,
                 public: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LanArgs.__new__(LanArgs)

            if datacenter_id is None and not opts.urn:
                raise TypeError("Missing required property 'datacenter_id'")
            __props__.__dict__["datacenter_id"] = datacenter_id
            __props__.__dict__["ip_failovers"] = ip_failovers
            __props__.__dict__["ipv6_cidr_block"] = ipv6_cidr_block
            __props__.__dict__["name"] = name
            __props__.__dict__["pcc"] = pcc
            __props__.__dict__["public"] = public
        super(Lan, __self__).__init__(
            'ionoscloud:compute/lan:Lan',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            datacenter_id: Optional[pulumi.Input[str]] = None,
            ip_failovers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LanIpFailoverArgs']]]]] = None,
            ipv6_cidr_block: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            pcc: Optional[pulumi.Input[str]] = None,
            public: Optional[pulumi.Input[bool]] = None) -> 'Lan':
        """
        Get an existing Lan resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] datacenter_id: [string] The ID of a Virtual Data Center.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LanIpFailoverArgs']]]] ip_failovers: IP failover configurations for lan
        :param pulumi.Input[str] ipv6_cidr_block: Contains the LAN's /64 IPv6 CIDR block if this LAN is IPv6 enabled. 'AUTO' will result in enabling this LAN for IPv6 and automatically assign a /64 IPv6 CIDR block to this LAN. If you specify your own IPv6 CIDR block then you must provide a unique /64 block, which is inside the IPv6 CIDR block of the virtual datacenter and unique inside all LANs from this virtual datacenter.
        :param pulumi.Input[str] name: [string] The name of the LAN.
        :param pulumi.Input[str] pcc: [String] The unique id of a `compute.Crossconnect` resource, in order. It needs to be ensured that IP addresses of the NICs of all LANs connected to a given Cross Connect is not duplicated and belongs to the same subnet range
        :param pulumi.Input[bool] public: [Boolean] Indicates if the LAN faces the public Internet (true) or not (false).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LanState.__new__(_LanState)

        __props__.__dict__["datacenter_id"] = datacenter_id
        __props__.__dict__["ip_failovers"] = ip_failovers
        __props__.__dict__["ipv6_cidr_block"] = ipv6_cidr_block
        __props__.__dict__["name"] = name
        __props__.__dict__["pcc"] = pcc
        __props__.__dict__["public"] = public
        return Lan(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Output[str]:
        """
        [string] The ID of a Virtual Data Center.
        """
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="ipFailovers")
    def ip_failovers(self) -> pulumi.Output[Sequence['outputs.LanIpFailover']]:
        """
        IP failover configurations for lan
        """
        return pulumi.get(self, "ip_failovers")

    @property
    @pulumi.getter(name="ipv6CidrBlock")
    def ipv6_cidr_block(self) -> pulumi.Output[str]:
        """
        Contains the LAN's /64 IPv6 CIDR block if this LAN is IPv6 enabled. 'AUTO' will result in enabling this LAN for IPv6 and automatically assign a /64 IPv6 CIDR block to this LAN. If you specify your own IPv6 CIDR block then you must provide a unique /64 block, which is inside the IPv6 CIDR block of the virtual datacenter and unique inside all LANs from this virtual datacenter.
        """
        return pulumi.get(self, "ipv6_cidr_block")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        [string] The name of the LAN.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def pcc(self) -> pulumi.Output[Optional[str]]:
        """
        [String] The unique id of a `compute.Crossconnect` resource, in order. It needs to be ensured that IP addresses of the NICs of all LANs connected to a given Cross Connect is not duplicated and belongs to the same subnet range
        """
        return pulumi.get(self, "pcc")

    @property
    @pulumi.getter
    def public(self) -> pulumi.Output[Optional[bool]]:
        """
        [Boolean] Indicates if the LAN faces the public Internet (true) or not (false).
        """
        return pulumi.get(self, "public")

