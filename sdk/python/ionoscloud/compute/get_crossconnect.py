# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetCrossconnectResult',
    'AwaitableGetCrossconnectResult',
    'get_crossconnect',
    'get_crossconnect_output',
]

@pulumi.output_type
class GetCrossconnectResult:
    """
    A collection of values returned by getCrossconnect.
    """
    def __init__(__self__, connectable_datacenters=None, description=None, id=None, name=None, peers=None):
        if connectable_datacenters and not isinstance(connectable_datacenters, list):
            raise TypeError("Expected argument 'connectable_datacenters' to be a list")
        pulumi.set(__self__, "connectable_datacenters", connectable_datacenters)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if peers and not isinstance(peers, list):
            raise TypeError("Expected argument 'peers' to be a list")
        pulumi.set(__self__, "peers", peers)

    @property
    @pulumi.getter(name="connectableDatacenters")
    def connectable_datacenters(self) -> Sequence['outputs.GetCrossconnectConnectableDatacenterResult']:
        return pulumi.get(self, "connectable_datacenters")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def peers(self) -> Sequence['outputs.GetCrossconnectPeerResult']:
        return pulumi.get(self, "peers")


class AwaitableGetCrossconnectResult(GetCrossconnectResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCrossconnectResult(
            connectable_datacenters=self.connectable_datacenters,
            description=self.description,
            id=self.id,
            name=self.name,
            peers=self.peers)


def get_crossconnect(description: Optional[str] = None,
                     id: Optional[str] = None,
                     name: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCrossconnectResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:compute/getCrossconnect:getCrossconnect', __args__, opts=opts, typ=GetCrossconnectResult).value

    return AwaitableGetCrossconnectResult(
        connectable_datacenters=pulumi.get(__ret__, 'connectable_datacenters'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        peers=pulumi.get(__ret__, 'peers'))
def get_crossconnect_output(description: Optional[pulumi.Input[Optional[str]]] = None,
                            id: Optional[pulumi.Input[Optional[str]]] = None,
                            name: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCrossconnectResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:compute/getCrossconnect:getCrossconnect', __args__, opts=opts, typ=GetCrossconnectResult)
    return __ret__.apply(lambda __response__: GetCrossconnectResult(
        connectable_datacenters=pulumi.get(__response__, 'connectable_datacenters'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        peers=pulumi.get(__response__, 'peers')))
