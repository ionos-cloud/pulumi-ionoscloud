# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NicArgs', 'Nic']

@pulumi.input_type
class NicArgs:
    def __init__(__self__, *,
                 datacenter_id: pulumi.Input[str],
                 lan: pulumi.Input[int],
                 server_id: pulumi.Input[str],
                 dhcp: Optional[pulumi.Input[bool]] = None,
                 dhcpv6: Optional[pulumi.Input[bool]] = None,
                 firewall_active: Optional[pulumi.Input[bool]] = None,
                 firewall_type: Optional[pulumi.Input[str]] = None,
                 flowlog: Optional[pulumi.Input['NicFlowlogArgs']] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ipv6_cidr_block: Optional[pulumi.Input[str]] = None,
                 ipv6_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Nic resource.
        :param pulumi.Input[bool] dhcpv6: Indicates whether this NIC receives an IPv6 address through DHCP.
        :param pulumi.Input['NicFlowlogArgs'] flowlog: Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture
               network information such as source and destination IP addresses, source and destination ports, number of packets, amount
               of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your
               instances are being accessed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ips: Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks,
               Passing value null or empty array will assign an IP address automatically.
        :param pulumi.Input[str] ipv6_cidr_block: IPv6 CIDR block assigned to the NIC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ipv6_ips: Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6
               CIDR block assigned to the nic.
        """
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "lan", lan)
        pulumi.set(__self__, "server_id", server_id)
        if dhcp is not None:
            pulumi.set(__self__, "dhcp", dhcp)
        if dhcpv6 is not None:
            pulumi.set(__self__, "dhcpv6", dhcpv6)
        if firewall_active is not None:
            pulumi.set(__self__, "firewall_active", firewall_active)
        if firewall_type is not None:
            pulumi.set(__self__, "firewall_type", firewall_type)
        if flowlog is not None:
            pulumi.set(__self__, "flowlog", flowlog)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if ipv6_cidr_block is not None:
            pulumi.set(__self__, "ipv6_cidr_block", ipv6_cidr_block)
        if ipv6_ips is not None:
            pulumi.set(__self__, "ipv6_ips", ipv6_ips)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def lan(self) -> pulumi.Input[int]:
        return pulumi.get(self, "lan")

    @lan.setter
    def lan(self, value: pulumi.Input[int]):
        pulumi.set(self, "lan", value)

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_id", value)

    @property
    @pulumi.getter
    def dhcp(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "dhcp")

    @dhcp.setter
    def dhcp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dhcp", value)

    @property
    @pulumi.getter
    def dhcpv6(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether this NIC receives an IPv6 address through DHCP.
        """
        return pulumi.get(self, "dhcpv6")

    @dhcpv6.setter
    def dhcpv6(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dhcpv6", value)

    @property
    @pulumi.getter(name="firewallActive")
    def firewall_active(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "firewall_active")

    @firewall_active.setter
    def firewall_active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "firewall_active", value)

    @property
    @pulumi.getter(name="firewallType")
    def firewall_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "firewall_type")

    @firewall_type.setter
    def firewall_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firewall_type", value)

    @property
    @pulumi.getter
    def flowlog(self) -> Optional[pulumi.Input['NicFlowlogArgs']]:
        """
        Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture
        network information such as source and destination IP addresses, source and destination ports, number of packets, amount
        of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your
        instances are being accessed.
        """
        return pulumi.get(self, "flowlog")

    @flowlog.setter
    def flowlog(self, value: Optional[pulumi.Input['NicFlowlogArgs']]):
        pulumi.set(self, "flowlog", value)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks,
        Passing value null or empty array will assign an IP address automatically.
        """
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ips", value)

    @property
    @pulumi.getter(name="ipv6CidrBlock")
    def ipv6_cidr_block(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 CIDR block assigned to the NIC.
        """
        return pulumi.get(self, "ipv6_cidr_block")

    @ipv6_cidr_block.setter
    def ipv6_cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_cidr_block", value)

    @property
    @pulumi.getter(name="ipv6Ips")
    def ipv6_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6
        CIDR block assigned to the nic.
        """
        return pulumi.get(self, "ipv6_ips")

    @ipv6_ips.setter
    def ipv6_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ipv6_ips", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _NicState:
    def __init__(__self__, *,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 device_number: Optional[pulumi.Input[int]] = None,
                 dhcp: Optional[pulumi.Input[bool]] = None,
                 dhcpv6: Optional[pulumi.Input[bool]] = None,
                 firewall_active: Optional[pulumi.Input[bool]] = None,
                 firewall_type: Optional[pulumi.Input[str]] = None,
                 flowlog: Optional[pulumi.Input['NicFlowlogArgs']] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ipv6_cidr_block: Optional[pulumi.Input[str]] = None,
                 ipv6_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 lan: Optional[pulumi.Input[int]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pci_slot: Optional[pulumi.Input[int]] = None,
                 server_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Nic resources.
        :param pulumi.Input[bool] dhcpv6: Indicates whether this NIC receives an IPv6 address through DHCP.
        :param pulumi.Input['NicFlowlogArgs'] flowlog: Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture
               network information such as source and destination IP addresses, source and destination ports, number of packets, amount
               of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your
               instances are being accessed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ips: Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks,
               Passing value null or empty array will assign an IP address automatically.
        :param pulumi.Input[str] ipv6_cidr_block: IPv6 CIDR block assigned to the NIC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ipv6_ips: Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6
               CIDR block assigned to the nic.
        """
        if datacenter_id is not None:
            pulumi.set(__self__, "datacenter_id", datacenter_id)
        if device_number is not None:
            pulumi.set(__self__, "device_number", device_number)
        if dhcp is not None:
            pulumi.set(__self__, "dhcp", dhcp)
        if dhcpv6 is not None:
            pulumi.set(__self__, "dhcpv6", dhcpv6)
        if firewall_active is not None:
            pulumi.set(__self__, "firewall_active", firewall_active)
        if firewall_type is not None:
            pulumi.set(__self__, "firewall_type", firewall_type)
        if flowlog is not None:
            pulumi.set(__self__, "flowlog", flowlog)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if ipv6_cidr_block is not None:
            pulumi.set(__self__, "ipv6_cidr_block", ipv6_cidr_block)
        if ipv6_ips is not None:
            pulumi.set(__self__, "ipv6_ips", ipv6_ips)
        if lan is not None:
            pulumi.set(__self__, "lan", lan)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pci_slot is not None:
            pulumi.set(__self__, "pci_slot", pci_slot)
        if server_id is not None:
            pulumi.set(__self__, "server_id", server_id)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "device_number")

    @device_number.setter
    def device_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_number", value)

    @property
    @pulumi.getter
    def dhcp(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "dhcp")

    @dhcp.setter
    def dhcp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dhcp", value)

    @property
    @pulumi.getter
    def dhcpv6(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether this NIC receives an IPv6 address through DHCP.
        """
        return pulumi.get(self, "dhcpv6")

    @dhcpv6.setter
    def dhcpv6(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dhcpv6", value)

    @property
    @pulumi.getter(name="firewallActive")
    def firewall_active(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "firewall_active")

    @firewall_active.setter
    def firewall_active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "firewall_active", value)

    @property
    @pulumi.getter(name="firewallType")
    def firewall_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "firewall_type")

    @firewall_type.setter
    def firewall_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firewall_type", value)

    @property
    @pulumi.getter
    def flowlog(self) -> Optional[pulumi.Input['NicFlowlogArgs']]:
        """
        Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture
        network information such as source and destination IP addresses, source and destination ports, number of packets, amount
        of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your
        instances are being accessed.
        """
        return pulumi.get(self, "flowlog")

    @flowlog.setter
    def flowlog(self, value: Optional[pulumi.Input['NicFlowlogArgs']]):
        pulumi.set(self, "flowlog", value)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks,
        Passing value null or empty array will assign an IP address automatically.
        """
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ips", value)

    @property
    @pulumi.getter(name="ipv6CidrBlock")
    def ipv6_cidr_block(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 CIDR block assigned to the NIC.
        """
        return pulumi.get(self, "ipv6_cidr_block")

    @ipv6_cidr_block.setter
    def ipv6_cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_cidr_block", value)

    @property
    @pulumi.getter(name="ipv6Ips")
    def ipv6_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6
        CIDR block assigned to the nic.
        """
        return pulumi.get(self, "ipv6_ips")

    @ipv6_ips.setter
    def ipv6_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ipv6_ips", value)

    @property
    @pulumi.getter
    def lan(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "lan")

    @lan.setter
    def lan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lan", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pciSlot")
    def pci_slot(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "pci_slot")

    @pci_slot.setter
    def pci_slot(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pci_slot", value)

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_id", value)


class Nic(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 dhcp: Optional[pulumi.Input[bool]] = None,
                 dhcpv6: Optional[pulumi.Input[bool]] = None,
                 firewall_active: Optional[pulumi.Input[bool]] = None,
                 firewall_type: Optional[pulumi.Input[str]] = None,
                 flowlog: Optional[pulumi.Input[Union['NicFlowlogArgs', 'NicFlowlogArgsDict']]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ipv6_cidr_block: Optional[pulumi.Input[str]] = None,
                 ipv6_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 lan: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 server_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Nic resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] dhcpv6: Indicates whether this NIC receives an IPv6 address through DHCP.
        :param pulumi.Input[Union['NicFlowlogArgs', 'NicFlowlogArgsDict']] flowlog: Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture
               network information such as source and destination IP addresses, source and destination ports, number of packets, amount
               of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your
               instances are being accessed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ips: Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks,
               Passing value null or empty array will assign an IP address automatically.
        :param pulumi.Input[str] ipv6_cidr_block: IPv6 CIDR block assigned to the NIC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ipv6_ips: Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6
               CIDR block assigned to the nic.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NicArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Nic resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NicArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NicArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 dhcp: Optional[pulumi.Input[bool]] = None,
                 dhcpv6: Optional[pulumi.Input[bool]] = None,
                 firewall_active: Optional[pulumi.Input[bool]] = None,
                 firewall_type: Optional[pulumi.Input[str]] = None,
                 flowlog: Optional[pulumi.Input[Union['NicFlowlogArgs', 'NicFlowlogArgsDict']]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ipv6_cidr_block: Optional[pulumi.Input[str]] = None,
                 ipv6_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 lan: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 server_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NicArgs.__new__(NicArgs)

            if datacenter_id is None and not opts.urn:
                raise TypeError("Missing required property 'datacenter_id'")
            __props__.__dict__["datacenter_id"] = datacenter_id
            __props__.__dict__["dhcp"] = dhcp
            __props__.__dict__["dhcpv6"] = dhcpv6
            __props__.__dict__["firewall_active"] = firewall_active
            __props__.__dict__["firewall_type"] = firewall_type
            __props__.__dict__["flowlog"] = flowlog
            __props__.__dict__["ips"] = ips
            __props__.__dict__["ipv6_cidr_block"] = ipv6_cidr_block
            __props__.__dict__["ipv6_ips"] = ipv6_ips
            if lan is None and not opts.urn:
                raise TypeError("Missing required property 'lan'")
            __props__.__dict__["lan"] = lan
            __props__.__dict__["name"] = name
            if server_id is None and not opts.urn:
                raise TypeError("Missing required property 'server_id'")
            __props__.__dict__["server_id"] = server_id
            __props__.__dict__["device_number"] = None
            __props__.__dict__["mac"] = None
            __props__.__dict__["pci_slot"] = None
        super(Nic, __self__).__init__(
            'ionoscloud:compute/nic:Nic',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            datacenter_id: Optional[pulumi.Input[str]] = None,
            device_number: Optional[pulumi.Input[int]] = None,
            dhcp: Optional[pulumi.Input[bool]] = None,
            dhcpv6: Optional[pulumi.Input[bool]] = None,
            firewall_active: Optional[pulumi.Input[bool]] = None,
            firewall_type: Optional[pulumi.Input[str]] = None,
            flowlog: Optional[pulumi.Input[Union['NicFlowlogArgs', 'NicFlowlogArgsDict']]] = None,
            ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ipv6_cidr_block: Optional[pulumi.Input[str]] = None,
            ipv6_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            lan: Optional[pulumi.Input[int]] = None,
            mac: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            pci_slot: Optional[pulumi.Input[int]] = None,
            server_id: Optional[pulumi.Input[str]] = None) -> 'Nic':
        """
        Get an existing Nic resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] dhcpv6: Indicates whether this NIC receives an IPv6 address through DHCP.
        :param pulumi.Input[Union['NicFlowlogArgs', 'NicFlowlogArgsDict']] flowlog: Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture
               network information such as source and destination IP addresses, source and destination ports, number of packets, amount
               of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your
               instances are being accessed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ips: Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks,
               Passing value null or empty array will assign an IP address automatically.
        :param pulumi.Input[str] ipv6_cidr_block: IPv6 CIDR block assigned to the NIC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ipv6_ips: Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6
               CIDR block assigned to the nic.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NicState.__new__(_NicState)

        __props__.__dict__["datacenter_id"] = datacenter_id
        __props__.__dict__["device_number"] = device_number
        __props__.__dict__["dhcp"] = dhcp
        __props__.__dict__["dhcpv6"] = dhcpv6
        __props__.__dict__["firewall_active"] = firewall_active
        __props__.__dict__["firewall_type"] = firewall_type
        __props__.__dict__["flowlog"] = flowlog
        __props__.__dict__["ips"] = ips
        __props__.__dict__["ipv6_cidr_block"] = ipv6_cidr_block
        __props__.__dict__["ipv6_ips"] = ipv6_ips
        __props__.__dict__["lan"] = lan
        __props__.__dict__["mac"] = mac
        __props__.__dict__["name"] = name
        __props__.__dict__["pci_slot"] = pci_slot
        __props__.__dict__["server_id"] = server_id
        return Nic(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> pulumi.Output[int]:
        return pulumi.get(self, "device_number")

    @property
    @pulumi.getter
    def dhcp(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "dhcp")

    @property
    @pulumi.getter
    def dhcpv6(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether this NIC receives an IPv6 address through DHCP.
        """
        return pulumi.get(self, "dhcpv6")

    @property
    @pulumi.getter(name="firewallActive")
    def firewall_active(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "firewall_active")

    @property
    @pulumi.getter(name="firewallType")
    def firewall_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "firewall_type")

    @property
    @pulumi.getter
    def flowlog(self) -> pulumi.Output[Optional['outputs.NicFlowlog']]:
        """
        Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture
        network information such as source and destination IP addresses, source and destination ports, number of packets, amount
        of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your
        instances are being accessed.
        """
        return pulumi.get(self, "flowlog")

    @property
    @pulumi.getter
    def ips(self) -> pulumi.Output[Sequence[str]]:
        """
        Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks,
        Passing value null or empty array will assign an IP address automatically.
        """
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter(name="ipv6CidrBlock")
    def ipv6_cidr_block(self) -> pulumi.Output[str]:
        """
        IPv6 CIDR block assigned to the NIC.
        """
        return pulumi.get(self, "ipv6_cidr_block")

    @property
    @pulumi.getter(name="ipv6Ips")
    def ipv6_ips(self) -> pulumi.Output[Sequence[str]]:
        """
        Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6
        CIDR block assigned to the nic.
        """
        return pulumi.get(self, "ipv6_ips")

    @property
    @pulumi.getter
    def lan(self) -> pulumi.Output[int]:
        return pulumi.get(self, "lan")

    @property
    @pulumi.getter
    def mac(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pciSlot")
    def pci_slot(self) -> pulumi.Output[int]:
        return pulumi.get(self, "pci_slot")

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "server_id")

