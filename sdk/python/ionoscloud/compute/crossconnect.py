# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CrossconnectArgs', 'Crossconnect']

@pulumi.input_type
class CrossconnectArgs:
    def __init__(__self__, *,
                 connectable_datacenters: Optional[pulumi.Input[Sequence[pulumi.Input['CrossconnectConnectableDatacenterArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 peers: Optional[pulumi.Input[Sequence[pulumi.Input['CrossconnectPeerArgs']]]] = None):
        """
        The set of arguments for constructing a Crossconnect resource.
        :param pulumi.Input[Sequence[pulumi.Input['CrossconnectConnectableDatacenterArgs']]] connectable_datacenters: A list containing all the connectable datacenters
        :param pulumi.Input[str] description: The desired description
        :param pulumi.Input[str] name: The desired name
        :param pulumi.Input[Sequence[pulumi.Input['CrossconnectPeerArgs']]] peers: A list containing the details of all cross-connected datacenters
        """
        if connectable_datacenters is not None:
            pulumi.set(__self__, "connectable_datacenters", connectable_datacenters)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if peers is not None:
            pulumi.set(__self__, "peers", peers)

    @property
    @pulumi.getter(name="connectableDatacenters")
    def connectable_datacenters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CrossconnectConnectableDatacenterArgs']]]]:
        """
        A list containing all the connectable datacenters
        """
        return pulumi.get(self, "connectable_datacenters")

    @connectable_datacenters.setter
    def connectable_datacenters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CrossconnectConnectableDatacenterArgs']]]]):
        pulumi.set(self, "connectable_datacenters", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The desired description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The desired name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def peers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CrossconnectPeerArgs']]]]:
        """
        A list containing the details of all cross-connected datacenters
        """
        return pulumi.get(self, "peers")

    @peers.setter
    def peers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CrossconnectPeerArgs']]]]):
        pulumi.set(self, "peers", value)


@pulumi.input_type
class _CrossconnectState:
    def __init__(__self__, *,
                 connectable_datacenters: Optional[pulumi.Input[Sequence[pulumi.Input['CrossconnectConnectableDatacenterArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 peers: Optional[pulumi.Input[Sequence[pulumi.Input['CrossconnectPeerArgs']]]] = None):
        """
        Input properties used for looking up and filtering Crossconnect resources.
        :param pulumi.Input[Sequence[pulumi.Input['CrossconnectConnectableDatacenterArgs']]] connectable_datacenters: A list containing all the connectable datacenters
        :param pulumi.Input[str] description: The desired description
        :param pulumi.Input[str] name: The desired name
        :param pulumi.Input[Sequence[pulumi.Input['CrossconnectPeerArgs']]] peers: A list containing the details of all cross-connected datacenters
        """
        if connectable_datacenters is not None:
            pulumi.set(__self__, "connectable_datacenters", connectable_datacenters)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if peers is not None:
            pulumi.set(__self__, "peers", peers)

    @property
    @pulumi.getter(name="connectableDatacenters")
    def connectable_datacenters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CrossconnectConnectableDatacenterArgs']]]]:
        """
        A list containing all the connectable datacenters
        """
        return pulumi.get(self, "connectable_datacenters")

    @connectable_datacenters.setter
    def connectable_datacenters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CrossconnectConnectableDatacenterArgs']]]]):
        pulumi.set(self, "connectable_datacenters", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The desired description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The desired name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def peers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CrossconnectPeerArgs']]]]:
        """
        A list containing the details of all cross-connected datacenters
        """
        return pulumi.get(self, "peers")

    @peers.setter
    def peers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CrossconnectPeerArgs']]]]):
        pulumi.set(self, "peers", value)


class Crossconnect(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connectable_datacenters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CrossconnectConnectableDatacenterArgs', 'CrossconnectConnectableDatacenterArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 peers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CrossconnectPeerArgs', 'CrossconnectPeerArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a Crossconnect resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CrossconnectConnectableDatacenterArgs', 'CrossconnectConnectableDatacenterArgsDict']]]] connectable_datacenters: A list containing all the connectable datacenters
        :param pulumi.Input[str] description: The desired description
        :param pulumi.Input[str] name: The desired name
        :param pulumi.Input[Sequence[pulumi.Input[Union['CrossconnectPeerArgs', 'CrossconnectPeerArgsDict']]]] peers: A list containing the details of all cross-connected datacenters
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CrossconnectArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Crossconnect resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CrossconnectArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CrossconnectArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connectable_datacenters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CrossconnectConnectableDatacenterArgs', 'CrossconnectConnectableDatacenterArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 peers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CrossconnectPeerArgs', 'CrossconnectPeerArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CrossconnectArgs.__new__(CrossconnectArgs)

            __props__.__dict__["connectable_datacenters"] = connectable_datacenters
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["peers"] = peers
        super(Crossconnect, __self__).__init__(
            'ionoscloud:compute/crossconnect:Crossconnect',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            connectable_datacenters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CrossconnectConnectableDatacenterArgs', 'CrossconnectConnectableDatacenterArgsDict']]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            peers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CrossconnectPeerArgs', 'CrossconnectPeerArgsDict']]]]] = None) -> 'Crossconnect':
        """
        Get an existing Crossconnect resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CrossconnectConnectableDatacenterArgs', 'CrossconnectConnectableDatacenterArgsDict']]]] connectable_datacenters: A list containing all the connectable datacenters
        :param pulumi.Input[str] description: The desired description
        :param pulumi.Input[str] name: The desired name
        :param pulumi.Input[Sequence[pulumi.Input[Union['CrossconnectPeerArgs', 'CrossconnectPeerArgsDict']]]] peers: A list containing the details of all cross-connected datacenters
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CrossconnectState.__new__(_CrossconnectState)

        __props__.__dict__["connectable_datacenters"] = connectable_datacenters
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["peers"] = peers
        return Crossconnect(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="connectableDatacenters")
    def connectable_datacenters(self) -> pulumi.Output[Sequence['outputs.CrossconnectConnectableDatacenter']]:
        """
        A list containing all the connectable datacenters
        """
        return pulumi.get(self, "connectable_datacenters")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The desired description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The desired name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def peers(self) -> pulumi.Output[Sequence['outputs.CrossconnectPeer']]:
        """
        A list containing the details of all cross-connected datacenters
        """
        return pulumi.get(self, "peers")

