# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ServerArgs', 'Server']

@pulumi.input_type
class ServerArgs:
    def __init__(__self__, *,
                 datacenter_id: pulumi.Input[str],
                 volume: pulumi.Input['ServerVolumeArgs'],
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 boot_cdrom: Optional[pulumi.Input[str]] = None,
                 boot_image: Optional[pulumi.Input[str]] = None,
                 cores: Optional[pulumi.Input[int]] = None,
                 cpu_family: Optional[pulumi.Input[str]] = None,
                 firewallrule_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_password: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input['ServerLabelArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nic: Optional[pulumi.Input['ServerNicArgs']] = None,
                 ram: Optional[pulumi.Input[int]] = None,
                 ssh_key_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 template_uuid: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vm_state: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Server resource.
        :param pulumi.Input[str] boot_cdrom: The associated boot drive, if any. Must be the UUID of a bootable CDROM image that you can retrieve using the image data
               source
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_key_paths: Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud
               provided Linux images. Does not support `~` expansion to homedir in the given path. Public SSH keys are set on the image
               as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be
               set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is
               used for the volume creation. This property is immutable.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_keys: Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the
               corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH
               keys are only supported if a public Linux image is used for the volume creation.
        :param pulumi.Input[str] type: server usages: ENTERPRISE or CUBE
        :param pulumi.Input[str] vm_state: Sets the power state of the server. Possible values: `RUNNING`, `SHUTOFF` or `SUSPENDED`. SUSPENDED state is only valid
               for cube. SHUTOFF state is only valid for enterprise
        """
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "volume", volume)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if boot_cdrom is not None:
            warnings.warn("""Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.""", DeprecationWarning)
            pulumi.log.warn("""boot_cdrom is deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.""")
        if boot_cdrom is not None:
            pulumi.set(__self__, "boot_cdrom", boot_cdrom)
        if boot_image is not None:
            pulumi.set(__self__, "boot_image", boot_image)
        if cores is not None:
            pulumi.set(__self__, "cores", cores)
        if cpu_family is not None:
            pulumi.set(__self__, "cpu_family", cpu_family)
        if firewallrule_ids is not None:
            pulumi.set(__self__, "firewallrule_ids", firewallrule_ids)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_password is not None:
            pulumi.set(__self__, "image_password", image_password)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nic is not None:
            pulumi.set(__self__, "nic", nic)
        if ram is not None:
            pulumi.set(__self__, "ram", ram)
        if ssh_key_paths is not None:
            warnings.warn("""Will be renamed to ssh_keys in the future, to allow users to set both the ssh key path or directly the ssh key""", DeprecationWarning)
            pulumi.log.warn("""ssh_key_paths is deprecated: Will be renamed to ssh_keys in the future, to allow users to set both the ssh key path or directly the ssh key""")
        if ssh_key_paths is not None:
            pulumi.set(__self__, "ssh_key_paths", ssh_key_paths)
        if ssh_keys is not None:
            pulumi.set(__self__, "ssh_keys", ssh_keys)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vm_state is not None:
            pulumi.set(__self__, "vm_state", vm_state)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def volume(self) -> pulumi.Input['ServerVolumeArgs']:
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: pulumi.Input['ServerVolumeArgs']):
        pulumi.set(self, "volume", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="bootCdrom")
    @_utilities.deprecated("""Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.""")
    def boot_cdrom(self) -> Optional[pulumi.Input[str]]:
        """
        The associated boot drive, if any. Must be the UUID of a bootable CDROM image that you can retrieve using the image data
        source
        """
        return pulumi.get(self, "boot_cdrom")

    @boot_cdrom.setter
    def boot_cdrom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_cdrom", value)

    @property
    @pulumi.getter(name="bootImage")
    def boot_image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "boot_image")

    @boot_image.setter
    def boot_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_image", value)

    @property
    @pulumi.getter
    def cores(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cores")

    @cores.setter
    def cores(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cores", value)

    @property
    @pulumi.getter(name="cpuFamily")
    def cpu_family(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_family")

    @cpu_family.setter
    def cpu_family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_family", value)

    @property
    @pulumi.getter(name="firewallruleIds")
    def firewallrule_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "firewallrule_ids")

    @firewallrule_ids.setter
    def firewallrule_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "firewallrule_ids", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imagePassword")
    def image_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_password")

    @image_password.setter
    def image_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_password", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerLabelArgs']]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerLabelArgs']]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nic(self) -> Optional[pulumi.Input['ServerNicArgs']]:
        return pulumi.get(self, "nic")

    @nic.setter
    def nic(self, value: Optional[pulumi.Input['ServerNicArgs']]):
        pulumi.set(self, "nic", value)

    @property
    @pulumi.getter
    def ram(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ram")

    @ram.setter
    def ram(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ram", value)

    @property
    @pulumi.getter(name="sshKeyPaths")
    @_utilities.deprecated("""Will be renamed to ssh_keys in the future, to allow users to set both the ssh key path or directly the ssh key""")
    def ssh_key_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud
        provided Linux images. Does not support `~` expansion to homedir in the given path. Public SSH keys are set on the image
        as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be
        set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is
        used for the volume creation. This property is immutable.
        """
        return pulumi.get(self, "ssh_key_paths")

    @ssh_key_paths.setter
    def ssh_key_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ssh_key_paths", value)

    @property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the
        corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH
        keys are only supported if a public Linux image is used for the volume creation.
        """
        return pulumi.get(self, "ssh_keys")

    @ssh_keys.setter
    def ssh_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ssh_keys", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        server usages: ENTERPRISE or CUBE
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="vmState")
    def vm_state(self) -> Optional[pulumi.Input[str]]:
        """
        Sets the power state of the server. Possible values: `RUNNING`, `SHUTOFF` or `SUSPENDED`. SUSPENDED state is only valid
        for cube. SHUTOFF state is only valid for enterprise
        """
        return pulumi.get(self, "vm_state")

    @vm_state.setter
    def vm_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_state", value)


@pulumi.input_type
class _ServerState:
    def __init__(__self__, *,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 boot_cdrom: Optional[pulumi.Input[str]] = None,
                 boot_image: Optional[pulumi.Input[str]] = None,
                 boot_volume: Optional[pulumi.Input[str]] = None,
                 cores: Optional[pulumi.Input[int]] = None,
                 cpu_family: Optional[pulumi.Input[str]] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 firewallrule_id: Optional[pulumi.Input[str]] = None,
                 firewallrule_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_password: Optional[pulumi.Input[str]] = None,
                 inline_volume_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input['ServerLabelArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nic: Optional[pulumi.Input['ServerNicArgs']] = None,
                 primary_ip: Optional[pulumi.Input[str]] = None,
                 primary_nic: Optional[pulumi.Input[str]] = None,
                 ram: Optional[pulumi.Input[int]] = None,
                 ssh_key_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 template_uuid: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vm_state: Optional[pulumi.Input[str]] = None,
                 volume: Optional[pulumi.Input['ServerVolumeArgs']] = None):
        """
        Input properties used for looking up and filtering Server resources.
        :param pulumi.Input[str] boot_cdrom: The associated boot drive, if any. Must be the UUID of a bootable CDROM image that you can retrieve using the image data
               source
        :param pulumi.Input[Sequence[pulumi.Input[str]]] inline_volume_ids: A list that contains the IDs for the volumes defined inside the server resource.
        :param pulumi.Input[str] primary_nic: Id of the primary network interface
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_key_paths: Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud
               provided Linux images. Does not support `~` expansion to homedir in the given path. Public SSH keys are set on the image
               as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be
               set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is
               used for the volume creation. This property is immutable.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_keys: Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the
               corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH
               keys are only supported if a public Linux image is used for the volume creation.
        :param pulumi.Input[str] type: server usages: ENTERPRISE or CUBE
        :param pulumi.Input[str] vm_state: Sets the power state of the server. Possible values: `RUNNING`, `SHUTOFF` or `SUSPENDED`. SUSPENDED state is only valid
               for cube. SHUTOFF state is only valid for enterprise
        """
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if boot_cdrom is not None:
            warnings.warn("""Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.""", DeprecationWarning)
            pulumi.log.warn("""boot_cdrom is deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.""")
        if boot_cdrom is not None:
            pulumi.set(__self__, "boot_cdrom", boot_cdrom)
        if boot_image is not None:
            pulumi.set(__self__, "boot_image", boot_image)
        if boot_volume is not None:
            pulumi.set(__self__, "boot_volume", boot_volume)
        if cores is not None:
            pulumi.set(__self__, "cores", cores)
        if cpu_family is not None:
            pulumi.set(__self__, "cpu_family", cpu_family)
        if datacenter_id is not None:
            pulumi.set(__self__, "datacenter_id", datacenter_id)
        if firewallrule_id is not None:
            pulumi.set(__self__, "firewallrule_id", firewallrule_id)
        if firewallrule_ids is not None:
            pulumi.set(__self__, "firewallrule_ids", firewallrule_ids)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_password is not None:
            pulumi.set(__self__, "image_password", image_password)
        if inline_volume_ids is not None:
            pulumi.set(__self__, "inline_volume_ids", inline_volume_ids)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nic is not None:
            pulumi.set(__self__, "nic", nic)
        if primary_ip is not None:
            pulumi.set(__self__, "primary_ip", primary_ip)
        if primary_nic is not None:
            pulumi.set(__self__, "primary_nic", primary_nic)
        if ram is not None:
            pulumi.set(__self__, "ram", ram)
        if ssh_key_paths is not None:
            warnings.warn("""Will be renamed to ssh_keys in the future, to allow users to set both the ssh key path or directly the ssh key""", DeprecationWarning)
            pulumi.log.warn("""ssh_key_paths is deprecated: Will be renamed to ssh_keys in the future, to allow users to set both the ssh key path or directly the ssh key""")
        if ssh_key_paths is not None:
            pulumi.set(__self__, "ssh_key_paths", ssh_key_paths)
        if ssh_keys is not None:
            pulumi.set(__self__, "ssh_keys", ssh_keys)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vm_state is not None:
            pulumi.set(__self__, "vm_state", vm_state)
        if volume is not None:
            pulumi.set(__self__, "volume", volume)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="bootCdrom")
    @_utilities.deprecated("""Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.""")
    def boot_cdrom(self) -> Optional[pulumi.Input[str]]:
        """
        The associated boot drive, if any. Must be the UUID of a bootable CDROM image that you can retrieve using the image data
        source
        """
        return pulumi.get(self, "boot_cdrom")

    @boot_cdrom.setter
    def boot_cdrom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_cdrom", value)

    @property
    @pulumi.getter(name="bootImage")
    def boot_image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "boot_image")

    @boot_image.setter
    def boot_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_image", value)

    @property
    @pulumi.getter(name="bootVolume")
    def boot_volume(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "boot_volume")

    @boot_volume.setter
    def boot_volume(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_volume", value)

    @property
    @pulumi.getter
    def cores(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cores")

    @cores.setter
    def cores(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cores", value)

    @property
    @pulumi.getter(name="cpuFamily")
    def cpu_family(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu_family")

    @cpu_family.setter
    def cpu_family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_family", value)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter(name="firewallruleId")
    def firewallrule_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "firewallrule_id")

    @firewallrule_id.setter
    def firewallrule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firewallrule_id", value)

    @property
    @pulumi.getter(name="firewallruleIds")
    def firewallrule_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "firewallrule_ids")

    @firewallrule_ids.setter
    def firewallrule_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "firewallrule_ids", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imagePassword")
    def image_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_password")

    @image_password.setter
    def image_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_password", value)

    @property
    @pulumi.getter(name="inlineVolumeIds")
    def inline_volume_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list that contains the IDs for the volumes defined inside the server resource.
        """
        return pulumi.get(self, "inline_volume_ids")

    @inline_volume_ids.setter
    def inline_volume_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "inline_volume_ids", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerLabelArgs']]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerLabelArgs']]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nic(self) -> Optional[pulumi.Input['ServerNicArgs']]:
        return pulumi.get(self, "nic")

    @nic.setter
    def nic(self, value: Optional[pulumi.Input['ServerNicArgs']]):
        pulumi.set(self, "nic", value)

    @property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "primary_ip")

    @primary_ip.setter
    def primary_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_ip", value)

    @property
    @pulumi.getter(name="primaryNic")
    def primary_nic(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the primary network interface
        """
        return pulumi.get(self, "primary_nic")

    @primary_nic.setter
    def primary_nic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_nic", value)

    @property
    @pulumi.getter
    def ram(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ram")

    @ram.setter
    def ram(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ram", value)

    @property
    @pulumi.getter(name="sshKeyPaths")
    @_utilities.deprecated("""Will be renamed to ssh_keys in the future, to allow users to set both the ssh key path or directly the ssh key""")
    def ssh_key_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud
        provided Linux images. Does not support `~` expansion to homedir in the given path. Public SSH keys are set on the image
        as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be
        set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is
        used for the volume creation. This property is immutable.
        """
        return pulumi.get(self, "ssh_key_paths")

    @ssh_key_paths.setter
    def ssh_key_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ssh_key_paths", value)

    @property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the
        corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH
        keys are only supported if a public Linux image is used for the volume creation.
        """
        return pulumi.get(self, "ssh_keys")

    @ssh_keys.setter
    def ssh_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ssh_keys", value)

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "template_uuid")

    @template_uuid.setter
    def template_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_uuid", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        server usages: ENTERPRISE or CUBE
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="vmState")
    def vm_state(self) -> Optional[pulumi.Input[str]]:
        """
        Sets the power state of the server. Possible values: `RUNNING`, `SHUTOFF` or `SUSPENDED`. SUSPENDED state is only valid
        for cube. SHUTOFF state is only valid for enterprise
        """
        return pulumi.get(self, "vm_state")

    @vm_state.setter
    def vm_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_state", value)

    @property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input['ServerVolumeArgs']]:
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input['ServerVolumeArgs']]):
        pulumi.set(self, "volume", value)


warnings.warn("""ionoscloud.index/server.Server has been deprecated in favor of ionoscloud.compute/server.Server""", DeprecationWarning)


class Server(pulumi.CustomResource):
    warnings.warn("""ionoscloud.index/server.Server has been deprecated in favor of ionoscloud.compute/server.Server""", DeprecationWarning)

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 boot_cdrom: Optional[pulumi.Input[str]] = None,
                 boot_image: Optional[pulumi.Input[str]] = None,
                 cores: Optional[pulumi.Input[int]] = None,
                 cpu_family: Optional[pulumi.Input[str]] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 firewallrule_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_password: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServerLabelArgs', 'ServerLabelArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nic: Optional[pulumi.Input[Union['ServerNicArgs', 'ServerNicArgsDict']]] = None,
                 ram: Optional[pulumi.Input[int]] = None,
                 ssh_key_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 template_uuid: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vm_state: Optional[pulumi.Input[str]] = None,
                 volume: Optional[pulumi.Input[Union['ServerVolumeArgs', 'ServerVolumeArgsDict']]] = None,
                 __props__=None):
        """
        Create a Server resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] boot_cdrom: The associated boot drive, if any. Must be the UUID of a bootable CDROM image that you can retrieve using the image data
               source
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_key_paths: Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud
               provided Linux images. Does not support `~` expansion to homedir in the given path. Public SSH keys are set on the image
               as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be
               set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is
               used for the volume creation. This property is immutable.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_keys: Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the
               corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH
               keys are only supported if a public Linux image is used for the volume creation.
        :param pulumi.Input[str] type: server usages: ENTERPRISE or CUBE
        :param pulumi.Input[str] vm_state: Sets the power state of the server. Possible values: `RUNNING`, `SHUTOFF` or `SUSPENDED`. SUSPENDED state is only valid
               for cube. SHUTOFF state is only valid for enterprise
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Server resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ServerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 boot_cdrom: Optional[pulumi.Input[str]] = None,
                 boot_image: Optional[pulumi.Input[str]] = None,
                 cores: Optional[pulumi.Input[int]] = None,
                 cpu_family: Optional[pulumi.Input[str]] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 firewallrule_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_password: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServerLabelArgs', 'ServerLabelArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nic: Optional[pulumi.Input[Union['ServerNicArgs', 'ServerNicArgsDict']]] = None,
                 ram: Optional[pulumi.Input[int]] = None,
                 ssh_key_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 template_uuid: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vm_state: Optional[pulumi.Input[str]] = None,
                 volume: Optional[pulumi.Input[Union['ServerVolumeArgs', 'ServerVolumeArgsDict']]] = None,
                 __props__=None):
        pulumi.log.warn("""Server is deprecated: ionoscloud.index/server.Server has been deprecated in favor of ionoscloud.compute/server.Server""")
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServerArgs.__new__(ServerArgs)

            __props__.__dict__["availability_zone"] = availability_zone
            __props__.__dict__["boot_cdrom"] = boot_cdrom
            __props__.__dict__["boot_image"] = boot_image
            __props__.__dict__["cores"] = cores
            __props__.__dict__["cpu_family"] = cpu_family
            if datacenter_id is None and not opts.urn:
                raise TypeError("Missing required property 'datacenter_id'")
            __props__.__dict__["datacenter_id"] = datacenter_id
            __props__.__dict__["firewallrule_ids"] = firewallrule_ids
            __props__.__dict__["image_name"] = image_name
            __props__.__dict__["image_password"] = None if image_password is None else pulumi.Output.secret(image_password)
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            __props__.__dict__["nic"] = nic
            __props__.__dict__["ram"] = ram
            __props__.__dict__["ssh_key_paths"] = ssh_key_paths
            __props__.__dict__["ssh_keys"] = ssh_keys
            __props__.__dict__["template_uuid"] = template_uuid
            __props__.__dict__["type"] = type
            __props__.__dict__["vm_state"] = vm_state
            if volume is None and not opts.urn:
                raise TypeError("Missing required property 'volume'")
            __props__.__dict__["volume"] = volume
            __props__.__dict__["boot_volume"] = None
            __props__.__dict__["firewallrule_id"] = None
            __props__.__dict__["inline_volume_ids"] = None
            __props__.__dict__["primary_ip"] = None
            __props__.__dict__["primary_nic"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["imagePassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Server, __self__).__init__(
            'ionoscloud:index/server:Server',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            availability_zone: Optional[pulumi.Input[str]] = None,
            boot_cdrom: Optional[pulumi.Input[str]] = None,
            boot_image: Optional[pulumi.Input[str]] = None,
            boot_volume: Optional[pulumi.Input[str]] = None,
            cores: Optional[pulumi.Input[int]] = None,
            cpu_family: Optional[pulumi.Input[str]] = None,
            datacenter_id: Optional[pulumi.Input[str]] = None,
            firewallrule_id: Optional[pulumi.Input[str]] = None,
            firewallrule_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            image_name: Optional[pulumi.Input[str]] = None,
            image_password: Optional[pulumi.Input[str]] = None,
            inline_volume_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            labels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServerLabelArgs', 'ServerLabelArgsDict']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nic: Optional[pulumi.Input[Union['ServerNicArgs', 'ServerNicArgsDict']]] = None,
            primary_ip: Optional[pulumi.Input[str]] = None,
            primary_nic: Optional[pulumi.Input[str]] = None,
            ram: Optional[pulumi.Input[int]] = None,
            ssh_key_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            template_uuid: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            vm_state: Optional[pulumi.Input[str]] = None,
            volume: Optional[pulumi.Input[Union['ServerVolumeArgs', 'ServerVolumeArgsDict']]] = None) -> 'Server':
        """
        Get an existing Server resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] boot_cdrom: The associated boot drive, if any. Must be the UUID of a bootable CDROM image that you can retrieve using the image data
               source
        :param pulumi.Input[Sequence[pulumi.Input[str]]] inline_volume_ids: A list that contains the IDs for the volumes defined inside the server resource.
        :param pulumi.Input[str] primary_nic: Id of the primary network interface
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_key_paths: Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud
               provided Linux images. Does not support `~` expansion to homedir in the given path. Public SSH keys are set on the image
               as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be
               set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is
               used for the volume creation. This property is immutable.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_keys: Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the
               corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH
               keys are only supported if a public Linux image is used for the volume creation.
        :param pulumi.Input[str] type: server usages: ENTERPRISE or CUBE
        :param pulumi.Input[str] vm_state: Sets the power state of the server. Possible values: `RUNNING`, `SHUTOFF` or `SUSPENDED`. SUSPENDED state is only valid
               for cube. SHUTOFF state is only valid for enterprise
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServerState.__new__(_ServerState)

        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["boot_cdrom"] = boot_cdrom
        __props__.__dict__["boot_image"] = boot_image
        __props__.__dict__["boot_volume"] = boot_volume
        __props__.__dict__["cores"] = cores
        __props__.__dict__["cpu_family"] = cpu_family
        __props__.__dict__["datacenter_id"] = datacenter_id
        __props__.__dict__["firewallrule_id"] = firewallrule_id
        __props__.__dict__["firewallrule_ids"] = firewallrule_ids
        __props__.__dict__["image_name"] = image_name
        __props__.__dict__["image_password"] = image_password
        __props__.__dict__["inline_volume_ids"] = inline_volume_ids
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["nic"] = nic
        __props__.__dict__["primary_ip"] = primary_ip
        __props__.__dict__["primary_nic"] = primary_nic
        __props__.__dict__["ram"] = ram
        __props__.__dict__["ssh_key_paths"] = ssh_key_paths
        __props__.__dict__["ssh_keys"] = ssh_keys
        __props__.__dict__["template_uuid"] = template_uuid
        __props__.__dict__["type"] = type
        __props__.__dict__["vm_state"] = vm_state
        __props__.__dict__["volume"] = volume
        return Server(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[str]:
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="bootCdrom")
    @_utilities.deprecated("""Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.""")
    def boot_cdrom(self) -> pulumi.Output[str]:
        """
        The associated boot drive, if any. Must be the UUID of a bootable CDROM image that you can retrieve using the image data
        source
        """
        return pulumi.get(self, "boot_cdrom")

    @property
    @pulumi.getter(name="bootImage")
    def boot_image(self) -> pulumi.Output[str]:
        return pulumi.get(self, "boot_image")

    @property
    @pulumi.getter(name="bootVolume")
    def boot_volume(self) -> pulumi.Output[str]:
        return pulumi.get(self, "boot_volume")

    @property
    @pulumi.getter
    def cores(self) -> pulumi.Output[int]:
        return pulumi.get(self, "cores")

    @property
    @pulumi.getter(name="cpuFamily")
    def cpu_family(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cpu_family")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="firewallruleId")
    def firewallrule_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "firewallrule_id")

    @property
    @pulumi.getter(name="firewallruleIds")
    def firewallrule_ids(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "firewallrule_ids")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imagePassword")
    def image_password(self) -> pulumi.Output[str]:
        return pulumi.get(self, "image_password")

    @property
    @pulumi.getter(name="inlineVolumeIds")
    def inline_volume_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        A list that contains the IDs for the volumes defined inside the server resource.
        """
        return pulumi.get(self, "inline_volume_ids")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Sequence['outputs.ServerLabel']]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nic(self) -> pulumi.Output[Optional['outputs.ServerNic']]:
        return pulumi.get(self, "nic")

    @property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "primary_ip")

    @property
    @pulumi.getter(name="primaryNic")
    def primary_nic(self) -> pulumi.Output[str]:
        """
        Id of the primary network interface
        """
        return pulumi.get(self, "primary_nic")

    @property
    @pulumi.getter
    def ram(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ram")

    @property
    @pulumi.getter(name="sshKeyPaths")
    @_utilities.deprecated("""Will be renamed to ssh_keys in the future, to allow users to set both the ssh key path or directly the ssh key""")
    def ssh_key_paths(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud
        provided Linux images. Does not support `~` expansion to homedir in the given path. Public SSH keys are set on the image
        as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be
        set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is
        used for the volume creation. This property is immutable.
        """
        return pulumi.get(self, "ssh_key_paths")

    @property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the
        corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH
        keys are only supported if a public Linux image is used for the volume creation.
        """
        return pulumi.get(self, "ssh_keys")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        server usages: ENTERPRISE or CUBE
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vmState")
    def vm_state(self) -> pulumi.Output[str]:
        """
        Sets the power state of the server. Possible values: `RUNNING`, `SHUTOFF` or `SUSPENDED`. SUSPENDED state is only valid
        for cube. SHUTOFF state is only valid for enterprise
        """
        return pulumi.get(self, "vm_state")

    @property
    @pulumi.getter
    def volume(self) -> pulumi.Output['outputs.ServerVolume']:
        return pulumi.get(self, "volume")

