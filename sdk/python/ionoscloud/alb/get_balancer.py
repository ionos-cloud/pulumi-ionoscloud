# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetBalancerResult',
    'AwaitableGetBalancerResult',
    'get_balancer',
    'get_balancer_output',
]

@pulumi.output_type
class GetBalancerResult:
    """
    A collection of values returned by getBalancer.
    """
    def __init__(__self__, central_logging=None, datacenter_id=None, flowlogs=None, id=None, ips=None, lb_private_ips=None, listener_lan=None, logging_format=None, name=None, partial_match=None, target_lan=None):
        if central_logging and not isinstance(central_logging, bool):
            raise TypeError("Expected argument 'central_logging' to be a bool")
        pulumi.set(__self__, "central_logging", central_logging)
        if datacenter_id and not isinstance(datacenter_id, str):
            raise TypeError("Expected argument 'datacenter_id' to be a str")
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        if flowlogs and not isinstance(flowlogs, list):
            raise TypeError("Expected argument 'flowlogs' to be a list")
        pulumi.set(__self__, "flowlogs", flowlogs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ips and not isinstance(ips, list):
            raise TypeError("Expected argument 'ips' to be a list")
        pulumi.set(__self__, "ips", ips)
        if lb_private_ips and not isinstance(lb_private_ips, list):
            raise TypeError("Expected argument 'lb_private_ips' to be a list")
        pulumi.set(__self__, "lb_private_ips", lb_private_ips)
        if listener_lan and not isinstance(listener_lan, int):
            raise TypeError("Expected argument 'listener_lan' to be a int")
        pulumi.set(__self__, "listener_lan", listener_lan)
        if logging_format and not isinstance(logging_format, str):
            raise TypeError("Expected argument 'logging_format' to be a str")
        pulumi.set(__self__, "logging_format", logging_format)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if partial_match and not isinstance(partial_match, bool):
            raise TypeError("Expected argument 'partial_match' to be a bool")
        pulumi.set(__self__, "partial_match", partial_match)
        if target_lan and not isinstance(target_lan, int):
            raise TypeError("Expected argument 'target_lan' to be a int")
        pulumi.set(__self__, "target_lan", target_lan)

    @property
    @pulumi.getter(name="centralLogging")
    def central_logging(self) -> bool:
        return pulumi.get(self, "central_logging")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> str:
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter
    def flowlogs(self) -> Sequence['outputs.GetBalancerFlowlogResult']:
        return pulumi.get(self, "flowlogs")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ips(self) -> Sequence[str]:
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter(name="lbPrivateIps")
    def lb_private_ips(self) -> Sequence[str]:
        return pulumi.get(self, "lb_private_ips")

    @property
    @pulumi.getter(name="listenerLan")
    def listener_lan(self) -> int:
        return pulumi.get(self, "listener_lan")

    @property
    @pulumi.getter(name="loggingFormat")
    def logging_format(self) -> str:
        return pulumi.get(self, "logging_format")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partialMatch")
    def partial_match(self) -> Optional[bool]:
        return pulumi.get(self, "partial_match")

    @property
    @pulumi.getter(name="targetLan")
    def target_lan(self) -> int:
        return pulumi.get(self, "target_lan")


class AwaitableGetBalancerResult(GetBalancerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBalancerResult(
            central_logging=self.central_logging,
            datacenter_id=self.datacenter_id,
            flowlogs=self.flowlogs,
            id=self.id,
            ips=self.ips,
            lb_private_ips=self.lb_private_ips,
            listener_lan=self.listener_lan,
            logging_format=self.logging_format,
            name=self.name,
            partial_match=self.partial_match,
            target_lan=self.target_lan)


def get_balancer(datacenter_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 partial_match: Optional[bool] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBalancerResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['datacenterId'] = datacenter_id
    __args__['id'] = id
    __args__['name'] = name
    __args__['partialMatch'] = partial_match
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:alb/getBalancer:getBalancer', __args__, opts=opts, typ=GetBalancerResult).value

    return AwaitableGetBalancerResult(
        central_logging=pulumi.get(__ret__, 'central_logging'),
        datacenter_id=pulumi.get(__ret__, 'datacenter_id'),
        flowlogs=pulumi.get(__ret__, 'flowlogs'),
        id=pulumi.get(__ret__, 'id'),
        ips=pulumi.get(__ret__, 'ips'),
        lb_private_ips=pulumi.get(__ret__, 'lb_private_ips'),
        listener_lan=pulumi.get(__ret__, 'listener_lan'),
        logging_format=pulumi.get(__ret__, 'logging_format'),
        name=pulumi.get(__ret__, 'name'),
        partial_match=pulumi.get(__ret__, 'partial_match'),
        target_lan=pulumi.get(__ret__, 'target_lan'))
def get_balancer_output(datacenter_id: Optional[pulumi.Input[str]] = None,
                        id: Optional[pulumi.Input[Optional[str]]] = None,
                        name: Optional[pulumi.Input[Optional[str]]] = None,
                        partial_match: Optional[pulumi.Input[Optional[bool]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBalancerResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['datacenterId'] = datacenter_id
    __args__['id'] = id
    __args__['name'] = name
    __args__['partialMatch'] = partial_match
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:alb/getBalancer:getBalancer', __args__, opts=opts, typ=GetBalancerResult)
    return __ret__.apply(lambda __response__: GetBalancerResult(
        central_logging=pulumi.get(__response__, 'central_logging'),
        datacenter_id=pulumi.get(__response__, 'datacenter_id'),
        flowlogs=pulumi.get(__response__, 'flowlogs'),
        id=pulumi.get(__response__, 'id'),
        ips=pulumi.get(__response__, 'ips'),
        lb_private_ips=pulumi.get(__response__, 'lb_private_ips'),
        listener_lan=pulumi.get(__response__, 'listener_lan'),
        logging_format=pulumi.get(__response__, 'logging_format'),
        name=pulumi.get(__response__, 'name'),
        partial_match=pulumi.get(__response__, 'partial_match'),
        target_lan=pulumi.get(__response__, 'target_lan')))
