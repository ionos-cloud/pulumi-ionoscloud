# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'RegistryFeatures',
    'RegistryGarbageCollectionSchedule',
    'RegistryStorageUsage',
    'RegistryTokenCredential',
    'RegistryTokenScope',
    'GetRegistryFeatureResult',
    'GetRegistryGarbageCollectionScheduleResult',
    'GetRegistryMaintenanceWindowResult',
    'GetRegistryStorageUsageResult',
    'GetRegistryTokenCredentialResult',
    'GetRegistryTokenScopeResult',
]

@pulumi.output_type
class RegistryFeatures(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vulnerabilityScanning":
            suggest = "vulnerability_scanning"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistryFeatures. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistryFeatures.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistryFeatures.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vulnerability_scanning: Optional[bool] = None):
        """
        :param bool vulnerability_scanning: Enables vulnerability scanning for images in the container registry. Note: this feature can incur additional charges
        """
        if vulnerability_scanning is not None:
            pulumi.set(__self__, "vulnerability_scanning", vulnerability_scanning)

    @property
    @pulumi.getter(name="vulnerabilityScanning")
    def vulnerability_scanning(self) -> Optional[bool]:
        """
        Enables vulnerability scanning for images in the container registry. Note: this feature can incur additional charges
        """
        return pulumi.get(self, "vulnerability_scanning")


@pulumi.output_type
class RegistryGarbageCollectionSchedule(dict):
    def __init__(__self__, *,
                 days: Sequence[str],
                 time: str):
        """
        :param str time: UTC time of day e.g. 01:00:00 - as defined by partial-time - RFC3339
        """
        pulumi.set(__self__, "days", days)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def days(self) -> Sequence[str]:
        return pulumi.get(self, "days")

    @property
    @pulumi.getter
    def time(self) -> str:
        """
        UTC time of day e.g. 01:00:00 - as defined by partial-time - RFC3339
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class RegistryStorageUsage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistryStorageUsage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistryStorageUsage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistryStorageUsage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bytes: Optional[int] = None,
                 updated_at: Optional[str] = None):
        if bytes is not None:
            pulumi.set(__self__, "bytes", bytes)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def bytes(self) -> Optional[int]:
        return pulumi.get(self, "bytes")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class RegistryTokenCredential(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class RegistryTokenScope(dict):
    def __init__(__self__, *,
                 actions: Sequence[str],
                 name: str,
                 type: str):
        """
        :param Sequence[str] actions: Example: ["pull", "push", "delete"]
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def actions(self) -> Sequence[str]:
        """
        Example: ["pull", "push", "delete"]
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRegistryFeatureResult(dict):
    def __init__(__self__, *,
                 vulnerability_scanning: bool):
        pulumi.set(__self__, "vulnerability_scanning", vulnerability_scanning)

    @property
    @pulumi.getter(name="vulnerabilityScanning")
    def vulnerability_scanning(self) -> bool:
        return pulumi.get(self, "vulnerability_scanning")


@pulumi.output_type
class GetRegistryGarbageCollectionScheduleResult(dict):
    def __init__(__self__, *,
                 days: Sequence[str],
                 time: str):
        pulumi.set(__self__, "days", days)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def days(self) -> Sequence[str]:
        return pulumi.get(self, "days")

    @property
    @pulumi.getter
    def time(self) -> str:
        return pulumi.get(self, "time")


@pulumi.output_type
class GetRegistryMaintenanceWindowResult(dict):
    def __init__(__self__, *,
                 days: Sequence[str],
                 time: str):
        pulumi.set(__self__, "days", days)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def days(self) -> Sequence[str]:
        return pulumi.get(self, "days")

    @property
    @pulumi.getter
    def time(self) -> str:
        return pulumi.get(self, "time")


@pulumi.output_type
class GetRegistryStorageUsageResult(dict):
    def __init__(__self__, *,
                 bytes: int,
                 updated_at: str):
        pulumi.set(__self__, "bytes", bytes)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def bytes(self) -> int:
        return pulumi.get(self, "bytes")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetRegistryTokenCredentialResult(dict):
    def __init__(__self__, *,
                 username: str):
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetRegistryTokenScopeResult(dict):
    def __init__(__self__, *,
                 actions: Sequence[str],
                 name: str,
                 type: str):
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def actions(self) -> Sequence[str]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


