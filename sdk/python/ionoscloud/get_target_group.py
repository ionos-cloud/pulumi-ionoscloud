# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetTargetGroupResult',
    'AwaitableGetTargetGroupResult',
    'get_target_group',
    'get_target_group_output',
]

@pulumi.output_type
class GetTargetGroupResult:
    """
    A collection of values returned by getTargetGroup.
    """
    def __init__(__self__, algorithm=None, health_checks=None, http_health_checks=None, id=None, name=None, partial_match=None, protocol=None, protocol_version=None, targets=None):
        if algorithm and not isinstance(algorithm, str):
            raise TypeError("Expected argument 'algorithm' to be a str")
        pulumi.set(__self__, "algorithm", algorithm)
        if health_checks and not isinstance(health_checks, list):
            raise TypeError("Expected argument 'health_checks' to be a list")
        pulumi.set(__self__, "health_checks", health_checks)
        if http_health_checks and not isinstance(http_health_checks, list):
            raise TypeError("Expected argument 'http_health_checks' to be a list")
        pulumi.set(__self__, "http_health_checks", http_health_checks)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if partial_match and not isinstance(partial_match, bool):
            raise TypeError("Expected argument 'partial_match' to be a bool")
        pulumi.set(__self__, "partial_match", partial_match)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if protocol_version and not isinstance(protocol_version, str):
            raise TypeError("Expected argument 'protocol_version' to be a str")
        pulumi.set(__self__, "protocol_version", protocol_version)
        if targets and not isinstance(targets, list):
            raise TypeError("Expected argument 'targets' to be a list")
        pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter
    def algorithm(self) -> str:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Sequence['outputs.GetTargetGroupHealthCheckResult']:
        return pulumi.get(self, "health_checks")

    @property
    @pulumi.getter(name="httpHealthChecks")
    def http_health_checks(self) -> Sequence['outputs.GetTargetGroupHttpHealthCheckResult']:
        return pulumi.get(self, "http_health_checks")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partialMatch")
    def partial_match(self) -> Optional[bool]:
        return pulumi.get(self, "partial_match")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="protocolVersion")
    def protocol_version(self) -> str:
        return pulumi.get(self, "protocol_version")

    @property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetTargetGroupTargetResult']:
        return pulumi.get(self, "targets")


class AwaitableGetTargetGroupResult(GetTargetGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTargetGroupResult(
            algorithm=self.algorithm,
            health_checks=self.health_checks,
            http_health_checks=self.http_health_checks,
            id=self.id,
            name=self.name,
            partial_match=self.partial_match,
            protocol=self.protocol,
            protocol_version=self.protocol_version,
            targets=self.targets)


def get_target_group(id: Optional[str] = None,
                     name: Optional[str] = None,
                     partial_match: Optional[bool] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTargetGroupResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['partialMatch'] = partial_match
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:index/getTargetGroup:getTargetGroup', __args__, opts=opts, typ=GetTargetGroupResult).value

    return AwaitableGetTargetGroupResult(
        algorithm=pulumi.get(__ret__, 'algorithm'),
        health_checks=pulumi.get(__ret__, 'health_checks'),
        http_health_checks=pulumi.get(__ret__, 'http_health_checks'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        partial_match=pulumi.get(__ret__, 'partial_match'),
        protocol=pulumi.get(__ret__, 'protocol'),
        protocol_version=pulumi.get(__ret__, 'protocol_version'),
        targets=pulumi.get(__ret__, 'targets'))
def get_target_group_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                            name: Optional[pulumi.Input[Optional[str]]] = None,
                            partial_match: Optional[pulumi.Input[Optional[bool]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTargetGroupResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['partialMatch'] = partial_match
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:index/getTargetGroup:getTargetGroup', __args__, opts=opts, typ=GetTargetGroupResult)
    return __ret__.apply(lambda __response__: GetTargetGroupResult(
        algorithm=pulumi.get(__response__, 'algorithm'),
        health_checks=pulumi.get(__response__, 'health_checks'),
        http_health_checks=pulumi.get(__response__, 'http_health_checks'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        partial_match=pulumi.get(__response__, 'partial_match'),
        protocol=pulumi.get(__response__, 'protocol'),
        protocol_version=pulumi.get(__response__, 'protocol_version'),
        targets=pulumi.get(__response__, 'targets')))
