# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MariadbClusterArgs', 'MariadbCluster']

@pulumi.input_type
class MariadbClusterArgs:
    def __init__(__self__, *,
                 connections: pulumi.Input['MariadbClusterConnectionsArgs'],
                 cores: pulumi.Input[int],
                 credentials: pulumi.Input['MariadbClusterCredentialsArgs'],
                 display_name: pulumi.Input[str],
                 instances: pulumi.Input[int],
                 mariadb_version: pulumi.Input[str],
                 ram: pulumi.Input[int],
                 storage_size: pulumi.Input[int],
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input['MariadbClusterMaintenanceWindowArgs']] = None):
        """
        The set of arguments for constructing a MariadbCluster resource.
        :param pulumi.Input['MariadbClusterConnectionsArgs'] connections: The network connection for your cluster. Only one connection is allowed.
        :param pulumi.Input[int] cores: The number of CPU cores per instance.
        :param pulumi.Input['MariadbClusterCredentialsArgs'] credentials: Credentials for the database user to be created.
        :param pulumi.Input[str] display_name: The friendly name of your cluster.
        :param pulumi.Input[int] instances: The total number of instances in the cluster (one primary and n-1 secondary).
        :param pulumi.Input[str] mariadb_version: The MariaDB version of your cluster.
        :param pulumi.Input[int] ram: The amount of memory per instance in gigabytes (GB).
        :param pulumi.Input[int] storage_size: The amount of storage per instance in gigabytes (GB).
        :param pulumi.Input[str] location: The cluster location
        :param pulumi.Input['MariadbClusterMaintenanceWindowArgs'] maintenance_window: A weekly 4 hour-long window, during which maintenance might occur.
        """
        pulumi.set(__self__, "connections", connections)
        pulumi.set(__self__, "cores", cores)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "instances", instances)
        pulumi.set(__self__, "mariadb_version", mariadb_version)
        pulumi.set(__self__, "ram", ram)
        pulumi.set(__self__, "storage_size", storage_size)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if maintenance_window is not None:
            pulumi.set(__self__, "maintenance_window", maintenance_window)

    @property
    @pulumi.getter
    def connections(self) -> pulumi.Input['MariadbClusterConnectionsArgs']:
        """
        The network connection for your cluster. Only one connection is allowed.
        """
        return pulumi.get(self, "connections")

    @connections.setter
    def connections(self, value: pulumi.Input['MariadbClusterConnectionsArgs']):
        pulumi.set(self, "connections", value)

    @property
    @pulumi.getter
    def cores(self) -> pulumi.Input[int]:
        """
        The number of CPU cores per instance.
        """
        return pulumi.get(self, "cores")

    @cores.setter
    def cores(self, value: pulumi.Input[int]):
        pulumi.set(self, "cores", value)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input['MariadbClusterCredentialsArgs']:
        """
        Credentials for the database user to be created.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input['MariadbClusterCredentialsArgs']):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        The friendly name of your cluster.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def instances(self) -> pulumi.Input[int]:
        """
        The total number of instances in the cluster (one primary and n-1 secondary).
        """
        return pulumi.get(self, "instances")

    @instances.setter
    def instances(self, value: pulumi.Input[int]):
        pulumi.set(self, "instances", value)

    @property
    @pulumi.getter(name="mariadbVersion")
    def mariadb_version(self) -> pulumi.Input[str]:
        """
        The MariaDB version of your cluster.
        """
        return pulumi.get(self, "mariadb_version")

    @mariadb_version.setter
    def mariadb_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "mariadb_version", value)

    @property
    @pulumi.getter
    def ram(self) -> pulumi.Input[int]:
        """
        The amount of memory per instance in gigabytes (GB).
        """
        return pulumi.get(self, "ram")

    @ram.setter
    def ram(self, value: pulumi.Input[int]):
        pulumi.set(self, "ram", value)

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> pulumi.Input[int]:
        """
        The amount of storage per instance in gigabytes (GB).
        """
        return pulumi.get(self, "storage_size")

    @storage_size.setter
    def storage_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "storage_size", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The cluster location
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional[pulumi.Input['MariadbClusterMaintenanceWindowArgs']]:
        """
        A weekly 4 hour-long window, during which maintenance might occur.
        """
        return pulumi.get(self, "maintenance_window")

    @maintenance_window.setter
    def maintenance_window(self, value: Optional[pulumi.Input['MariadbClusterMaintenanceWindowArgs']]):
        pulumi.set(self, "maintenance_window", value)


@pulumi.input_type
class _MariadbClusterState:
    def __init__(__self__, *,
                 connections: Optional[pulumi.Input['MariadbClusterConnectionsArgs']] = None,
                 cores: Optional[pulumi.Input[int]] = None,
                 credentials: Optional[pulumi.Input['MariadbClusterCredentialsArgs']] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 dns_name: Optional[pulumi.Input[str]] = None,
                 instances: Optional[pulumi.Input[int]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input['MariadbClusterMaintenanceWindowArgs']] = None,
                 mariadb_version: Optional[pulumi.Input[str]] = None,
                 ram: Optional[pulumi.Input[int]] = None,
                 storage_size: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering MariadbCluster resources.
        :param pulumi.Input['MariadbClusterConnectionsArgs'] connections: The network connection for your cluster. Only one connection is allowed.
        :param pulumi.Input[int] cores: The number of CPU cores per instance.
        :param pulumi.Input['MariadbClusterCredentialsArgs'] credentials: Credentials for the database user to be created.
        :param pulumi.Input[str] display_name: The friendly name of your cluster.
        :param pulumi.Input[str] dns_name: The DNS name pointing to your cluster.
        :param pulumi.Input[int] instances: The total number of instances in the cluster (one primary and n-1 secondary).
        :param pulumi.Input[str] location: The cluster location
        :param pulumi.Input['MariadbClusterMaintenanceWindowArgs'] maintenance_window: A weekly 4 hour-long window, during which maintenance might occur.
        :param pulumi.Input[str] mariadb_version: The MariaDB version of your cluster.
        :param pulumi.Input[int] ram: The amount of memory per instance in gigabytes (GB).
        :param pulumi.Input[int] storage_size: The amount of storage per instance in gigabytes (GB).
        """
        if connections is not None:
            pulumi.set(__self__, "connections", connections)
        if cores is not None:
            pulumi.set(__self__, "cores", cores)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if dns_name is not None:
            pulumi.set(__self__, "dns_name", dns_name)
        if instances is not None:
            pulumi.set(__self__, "instances", instances)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if maintenance_window is not None:
            pulumi.set(__self__, "maintenance_window", maintenance_window)
        if mariadb_version is not None:
            pulumi.set(__self__, "mariadb_version", mariadb_version)
        if ram is not None:
            pulumi.set(__self__, "ram", ram)
        if storage_size is not None:
            pulumi.set(__self__, "storage_size", storage_size)

    @property
    @pulumi.getter
    def connections(self) -> Optional[pulumi.Input['MariadbClusterConnectionsArgs']]:
        """
        The network connection for your cluster. Only one connection is allowed.
        """
        return pulumi.get(self, "connections")

    @connections.setter
    def connections(self, value: Optional[pulumi.Input['MariadbClusterConnectionsArgs']]):
        pulumi.set(self, "connections", value)

    @property
    @pulumi.getter
    def cores(self) -> Optional[pulumi.Input[int]]:
        """
        The number of CPU cores per instance.
        """
        return pulumi.get(self, "cores")

    @cores.setter
    def cores(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cores", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['MariadbClusterCredentialsArgs']]:
        """
        Credentials for the database user to be created.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['MariadbClusterCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The friendly name of your cluster.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> Optional[pulumi.Input[str]]:
        """
        The DNS name pointing to your cluster.
        """
        return pulumi.get(self, "dns_name")

    @dns_name.setter
    def dns_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_name", value)

    @property
    @pulumi.getter
    def instances(self) -> Optional[pulumi.Input[int]]:
        """
        The total number of instances in the cluster (one primary and n-1 secondary).
        """
        return pulumi.get(self, "instances")

    @instances.setter
    def instances(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instances", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The cluster location
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional[pulumi.Input['MariadbClusterMaintenanceWindowArgs']]:
        """
        A weekly 4 hour-long window, during which maintenance might occur.
        """
        return pulumi.get(self, "maintenance_window")

    @maintenance_window.setter
    def maintenance_window(self, value: Optional[pulumi.Input['MariadbClusterMaintenanceWindowArgs']]):
        pulumi.set(self, "maintenance_window", value)

    @property
    @pulumi.getter(name="mariadbVersion")
    def mariadb_version(self) -> Optional[pulumi.Input[str]]:
        """
        The MariaDB version of your cluster.
        """
        return pulumi.get(self, "mariadb_version")

    @mariadb_version.setter
    def mariadb_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mariadb_version", value)

    @property
    @pulumi.getter
    def ram(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of memory per instance in gigabytes (GB).
        """
        return pulumi.get(self, "ram")

    @ram.setter
    def ram(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ram", value)

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of storage per instance in gigabytes (GB).
        """
        return pulumi.get(self, "storage_size")

    @storage_size.setter
    def storage_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_size", value)


warnings.warn("""ionoscloud.index/mariadbcluster.MariadbCluster has been deprecated in favor of ionoscloud.dbaas/mariadbcluster.MariaDBCluster""", DeprecationWarning)


class MariadbCluster(pulumi.CustomResource):
    warnings.warn("""ionoscloud.index/mariadbcluster.MariadbCluster has been deprecated in favor of ionoscloud.dbaas/mariadbcluster.MariaDBCluster""", DeprecationWarning)

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connections: Optional[pulumi.Input[Union['MariadbClusterConnectionsArgs', 'MariadbClusterConnectionsArgsDict']]] = None,
                 cores: Optional[pulumi.Input[int]] = None,
                 credentials: Optional[pulumi.Input[Union['MariadbClusterCredentialsArgs', 'MariadbClusterCredentialsArgsDict']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 instances: Optional[pulumi.Input[int]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input[Union['MariadbClusterMaintenanceWindowArgs', 'MariadbClusterMaintenanceWindowArgsDict']]] = None,
                 mariadb_version: Optional[pulumi.Input[str]] = None,
                 ram: Optional[pulumi.Input[int]] = None,
                 storage_size: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a MariadbCluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['MariadbClusterConnectionsArgs', 'MariadbClusterConnectionsArgsDict']] connections: The network connection for your cluster. Only one connection is allowed.
        :param pulumi.Input[int] cores: The number of CPU cores per instance.
        :param pulumi.Input[Union['MariadbClusterCredentialsArgs', 'MariadbClusterCredentialsArgsDict']] credentials: Credentials for the database user to be created.
        :param pulumi.Input[str] display_name: The friendly name of your cluster.
        :param pulumi.Input[int] instances: The total number of instances in the cluster (one primary and n-1 secondary).
        :param pulumi.Input[str] location: The cluster location
        :param pulumi.Input[Union['MariadbClusterMaintenanceWindowArgs', 'MariadbClusterMaintenanceWindowArgsDict']] maintenance_window: A weekly 4 hour-long window, during which maintenance might occur.
        :param pulumi.Input[str] mariadb_version: The MariaDB version of your cluster.
        :param pulumi.Input[int] ram: The amount of memory per instance in gigabytes (GB).
        :param pulumi.Input[int] storage_size: The amount of storage per instance in gigabytes (GB).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MariadbClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a MariadbCluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MariadbClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MariadbClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connections: Optional[pulumi.Input[Union['MariadbClusterConnectionsArgs', 'MariadbClusterConnectionsArgsDict']]] = None,
                 cores: Optional[pulumi.Input[int]] = None,
                 credentials: Optional[pulumi.Input[Union['MariadbClusterCredentialsArgs', 'MariadbClusterCredentialsArgsDict']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 instances: Optional[pulumi.Input[int]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input[Union['MariadbClusterMaintenanceWindowArgs', 'MariadbClusterMaintenanceWindowArgsDict']]] = None,
                 mariadb_version: Optional[pulumi.Input[str]] = None,
                 ram: Optional[pulumi.Input[int]] = None,
                 storage_size: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        pulumi.log.warn("""MariadbCluster is deprecated: ionoscloud.index/mariadbcluster.MariadbCluster has been deprecated in favor of ionoscloud.dbaas/mariadbcluster.MariaDBCluster""")
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MariadbClusterArgs.__new__(MariadbClusterArgs)

            if connections is None and not opts.urn:
                raise TypeError("Missing required property 'connections'")
            __props__.__dict__["connections"] = connections
            if cores is None and not opts.urn:
                raise TypeError("Missing required property 'cores'")
            __props__.__dict__["cores"] = cores
            if credentials is None and not opts.urn:
                raise TypeError("Missing required property 'credentials'")
            __props__.__dict__["credentials"] = credentials
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            if instances is None and not opts.urn:
                raise TypeError("Missing required property 'instances'")
            __props__.__dict__["instances"] = instances
            __props__.__dict__["location"] = location
            __props__.__dict__["maintenance_window"] = maintenance_window
            if mariadb_version is None and not opts.urn:
                raise TypeError("Missing required property 'mariadb_version'")
            __props__.__dict__["mariadb_version"] = mariadb_version
            if ram is None and not opts.urn:
                raise TypeError("Missing required property 'ram'")
            __props__.__dict__["ram"] = ram
            if storage_size is None and not opts.urn:
                raise TypeError("Missing required property 'storage_size'")
            __props__.__dict__["storage_size"] = storage_size
            __props__.__dict__["dns_name"] = None
        super(MariadbCluster, __self__).__init__(
            'ionoscloud:index/mariadbCluster:MariadbCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            connections: Optional[pulumi.Input[Union['MariadbClusterConnectionsArgs', 'MariadbClusterConnectionsArgsDict']]] = None,
            cores: Optional[pulumi.Input[int]] = None,
            credentials: Optional[pulumi.Input[Union['MariadbClusterCredentialsArgs', 'MariadbClusterCredentialsArgsDict']]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            dns_name: Optional[pulumi.Input[str]] = None,
            instances: Optional[pulumi.Input[int]] = None,
            location: Optional[pulumi.Input[str]] = None,
            maintenance_window: Optional[pulumi.Input[Union['MariadbClusterMaintenanceWindowArgs', 'MariadbClusterMaintenanceWindowArgsDict']]] = None,
            mariadb_version: Optional[pulumi.Input[str]] = None,
            ram: Optional[pulumi.Input[int]] = None,
            storage_size: Optional[pulumi.Input[int]] = None) -> 'MariadbCluster':
        """
        Get an existing MariadbCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['MariadbClusterConnectionsArgs', 'MariadbClusterConnectionsArgsDict']] connections: The network connection for your cluster. Only one connection is allowed.
        :param pulumi.Input[int] cores: The number of CPU cores per instance.
        :param pulumi.Input[Union['MariadbClusterCredentialsArgs', 'MariadbClusterCredentialsArgsDict']] credentials: Credentials for the database user to be created.
        :param pulumi.Input[str] display_name: The friendly name of your cluster.
        :param pulumi.Input[str] dns_name: The DNS name pointing to your cluster.
        :param pulumi.Input[int] instances: The total number of instances in the cluster (one primary and n-1 secondary).
        :param pulumi.Input[str] location: The cluster location
        :param pulumi.Input[Union['MariadbClusterMaintenanceWindowArgs', 'MariadbClusterMaintenanceWindowArgsDict']] maintenance_window: A weekly 4 hour-long window, during which maintenance might occur.
        :param pulumi.Input[str] mariadb_version: The MariaDB version of your cluster.
        :param pulumi.Input[int] ram: The amount of memory per instance in gigabytes (GB).
        :param pulumi.Input[int] storage_size: The amount of storage per instance in gigabytes (GB).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MariadbClusterState.__new__(_MariadbClusterState)

        __props__.__dict__["connections"] = connections
        __props__.__dict__["cores"] = cores
        __props__.__dict__["credentials"] = credentials
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["dns_name"] = dns_name
        __props__.__dict__["instances"] = instances
        __props__.__dict__["location"] = location
        __props__.__dict__["maintenance_window"] = maintenance_window
        __props__.__dict__["mariadb_version"] = mariadb_version
        __props__.__dict__["ram"] = ram
        __props__.__dict__["storage_size"] = storage_size
        return MariadbCluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def connections(self) -> pulumi.Output['outputs.MariadbClusterConnections']:
        """
        The network connection for your cluster. Only one connection is allowed.
        """
        return pulumi.get(self, "connections")

    @property
    @pulumi.getter
    def cores(self) -> pulumi.Output[int]:
        """
        The number of CPU cores per instance.
        """
        return pulumi.get(self, "cores")

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Output['outputs.MariadbClusterCredentials']:
        """
        Credentials for the database user to be created.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        The friendly name of your cluster.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> pulumi.Output[str]:
        """
        The DNS name pointing to your cluster.
        """
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter
    def instances(self) -> pulumi.Output[int]:
        """
        The total number of instances in the cluster (one primary and n-1 secondary).
        """
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[Optional[str]]:
        """
        The cluster location
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> pulumi.Output['outputs.MariadbClusterMaintenanceWindow']:
        """
        A weekly 4 hour-long window, during which maintenance might occur.
        """
        return pulumi.get(self, "maintenance_window")

    @property
    @pulumi.getter(name="mariadbVersion")
    def mariadb_version(self) -> pulumi.Output[str]:
        """
        The MariaDB version of your cluster.
        """
        return pulumi.get(self, "mariadb_version")

    @property
    @pulumi.getter
    def ram(self) -> pulumi.Output[int]:
        """
        The amount of memory per instance in gigabytes (GB).
        """
        return pulumi.get(self, "ram")

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> pulumi.Output[int]:
        """
        The amount of storage per instance in gigabytes (GB).
        """
        return pulumi.get(self, "storage_size")

