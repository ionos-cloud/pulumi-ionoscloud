# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPgBackupsResult',
    'AwaitableGetPgBackupsResult',
    'get_pg_backups',
    'get_pg_backups_output',
]

@pulumi.output_type
class GetPgBackupsResult:
    """
    A collection of values returned by getPgBackups.
    """
    def __init__(__self__, cluster_backups=None, cluster_id=None, id=None):
        if cluster_backups and not isinstance(cluster_backups, list):
            raise TypeError("Expected argument 'cluster_backups' to be a list")
        pulumi.set(__self__, "cluster_backups", cluster_backups)
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="clusterBackups")
    def cluster_backups(self) -> Sequence['outputs.GetPgBackupsClusterBackupResult']:
        return pulumi.get(self, "cluster_backups")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetPgBackupsResult(GetPgBackupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPgBackupsResult(
            cluster_backups=self.cluster_backups,
            cluster_id=self.cluster_id,
            id=self.id)


def get_pg_backups(cluster_id: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPgBackupsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:index/getPgBackups:getPgBackups', __args__, opts=opts, typ=GetPgBackupsResult).value

    return AwaitableGetPgBackupsResult(
        cluster_backups=pulumi.get(__ret__, 'cluster_backups'),
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        id=pulumi.get(__ret__, 'id'))
def get_pg_backups_output(cluster_id: Optional[pulumi.Input[str]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPgBackupsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:index/getPgBackups:getPgBackups', __args__, opts=opts, typ=GetPgBackupsResult)
    return __ret__.apply(lambda __response__: GetPgBackupsResult(
        cluster_backups=pulumi.get(__response__, 'cluster_backups'),
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        id=pulumi.get(__response__, 'id')))
