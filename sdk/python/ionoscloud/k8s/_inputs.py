# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ClusterMaintenanceWindowArgs',
    'ClusterMaintenanceWindowArgsDict',
    'ClusterS3BucketArgs',
    'ClusterS3BucketArgsDict',
    'NodePoolAutoScalingArgs',
    'NodePoolAutoScalingArgsDict',
    'NodePoolLanArgs',
    'NodePoolLanArgsDict',
    'NodePoolLanRouteArgs',
    'NodePoolLanRouteArgsDict',
    'NodePoolMaintenanceWindowArgs',
    'NodePoolMaintenanceWindowArgsDict',
]

MYPY = False

if not MYPY:
    class ClusterMaintenanceWindowArgsDict(TypedDict):
        day_of_the_week: pulumi.Input[str]
        """
        Day of the week when maintenance is allowed
        """
        time: pulumi.Input[str]
        """
        A clock time in the day when maintenance is allowed
        """
elif False:
    ClusterMaintenanceWindowArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterMaintenanceWindowArgs:
    def __init__(__self__, *,
                 day_of_the_week: pulumi.Input[str],
                 time: pulumi.Input[str]):
        """
        :param pulumi.Input[str] day_of_the_week: Day of the week when maintenance is allowed
        :param pulumi.Input[str] time: A clock time in the day when maintenance is allowed
        """
        pulumi.set(__self__, "day_of_the_week", day_of_the_week)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="dayOfTheWeek")
    def day_of_the_week(self) -> pulumi.Input[str]:
        """
        Day of the week when maintenance is allowed
        """
        return pulumi.get(self, "day_of_the_week")

    @day_of_the_week.setter
    def day_of_the_week(self, value: pulumi.Input[str]):
        pulumi.set(self, "day_of_the_week", value)

    @property
    @pulumi.getter
    def time(self) -> pulumi.Input[str]:
        """
        A clock time in the day when maintenance is allowed
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: pulumi.Input[str]):
        pulumi.set(self, "time", value)


if not MYPY:
    class ClusterS3BucketArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the Object Storage bucket
        """
elif False:
    ClusterS3BucketArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterS3BucketArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the Object Storage bucket
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Object Storage bucket
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class NodePoolAutoScalingArgsDict(TypedDict):
        max_node_count: pulumi.Input[int]
        """
        The maximum number of worker nodes that the node pool can scale to. Should be greater than min_node_count
        """
        min_node_count: pulumi.Input[int]
        """
        The minimum number of worker nodes the node pool can scale down to. Should be less than max_node_count
        """
elif False:
    NodePoolAutoScalingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NodePoolAutoScalingArgs:
    def __init__(__self__, *,
                 max_node_count: pulumi.Input[int],
                 min_node_count: pulumi.Input[int]):
        """
        :param pulumi.Input[int] max_node_count: The maximum number of worker nodes that the node pool can scale to. Should be greater than min_node_count
        :param pulumi.Input[int] min_node_count: The minimum number of worker nodes the node pool can scale down to. Should be less than max_node_count
        """
        pulumi.set(__self__, "max_node_count", max_node_count)
        pulumi.set(__self__, "min_node_count", min_node_count)

    @property
    @pulumi.getter(name="maxNodeCount")
    def max_node_count(self) -> pulumi.Input[int]:
        """
        The maximum number of worker nodes that the node pool can scale to. Should be greater than min_node_count
        """
        return pulumi.get(self, "max_node_count")

    @max_node_count.setter
    def max_node_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_node_count", value)

    @property
    @pulumi.getter(name="minNodeCount")
    def min_node_count(self) -> pulumi.Input[int]:
        """
        The minimum number of worker nodes the node pool can scale down to. Should be less than max_node_count
        """
        return pulumi.get(self, "min_node_count")

    @min_node_count.setter
    def min_node_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_node_count", value)


if not MYPY:
    class NodePoolLanArgsDict(TypedDict):
        id: pulumi.Input[int]
        """
        The LAN ID of an existing LAN at the related datacenter
        """
        dhcp: NotRequired[pulumi.Input[bool]]
        """
        Indicates if the Kubernetes Node Pool LAN will reserve an IP using DHCP
        """
        routes: NotRequired[pulumi.Input[Sequence[pulumi.Input['NodePoolLanRouteArgsDict']]]]
        """
        An array of additional LANs attached to worker nodes
        """
elif False:
    NodePoolLanArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NodePoolLanArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[int],
                 dhcp: Optional[pulumi.Input[bool]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolLanRouteArgs']]]] = None):
        """
        :param pulumi.Input[int] id: The LAN ID of an existing LAN at the related datacenter
        :param pulumi.Input[bool] dhcp: Indicates if the Kubernetes Node Pool LAN will reserve an IP using DHCP
        :param pulumi.Input[Sequence[pulumi.Input['NodePoolLanRouteArgs']]] routes: An array of additional LANs attached to worker nodes
        """
        pulumi.set(__self__, "id", id)
        if dhcp is not None:
            pulumi.set(__self__, "dhcp", dhcp)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[int]:
        """
        The LAN ID of an existing LAN at the related datacenter
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def dhcp(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the Kubernetes Node Pool LAN will reserve an IP using DHCP
        """
        return pulumi.get(self, "dhcp")

    @dhcp.setter
    def dhcp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dhcp", value)

    @property
    @pulumi.getter
    def routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolLanRouteArgs']]]]:
        """
        An array of additional LANs attached to worker nodes
        """
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolLanRouteArgs']]]]):
        pulumi.set(self, "routes", value)


if not MYPY:
    class NodePoolLanRouteArgsDict(TypedDict):
        gateway_ip: pulumi.Input[str]
        """
        IPv4 or IPv6 Gateway IP for the route
        """
        network: pulumi.Input[str]
        """
        IPv4 or IPv6 CIDR to be routed via the interface
        """
elif False:
    NodePoolLanRouteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NodePoolLanRouteArgs:
    def __init__(__self__, *,
                 gateway_ip: pulumi.Input[str],
                 network: pulumi.Input[str]):
        """
        :param pulumi.Input[str] gateway_ip: IPv4 or IPv6 Gateway IP for the route
        :param pulumi.Input[str] network: IPv4 or IPv6 CIDR to be routed via the interface
        """
        pulumi.set(__self__, "gateway_ip", gateway_ip)
        pulumi.set(__self__, "network", network)

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> pulumi.Input[str]:
        """
        IPv4 or IPv6 Gateway IP for the route
        """
        return pulumi.get(self, "gateway_ip")

    @gateway_ip.setter
    def gateway_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway_ip", value)

    @property
    @pulumi.getter
    def network(self) -> pulumi.Input[str]:
        """
        IPv4 or IPv6 CIDR to be routed via the interface
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: pulumi.Input[str]):
        pulumi.set(self, "network", value)


if not MYPY:
    class NodePoolMaintenanceWindowArgsDict(TypedDict):
        day_of_the_week: pulumi.Input[str]
        """
        Day of the week when maintenance is allowed
        """
        time: pulumi.Input[str]
        """
        A clock time in the day when maintenance is allowed
        """
elif False:
    NodePoolMaintenanceWindowArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NodePoolMaintenanceWindowArgs:
    def __init__(__self__, *,
                 day_of_the_week: pulumi.Input[str],
                 time: pulumi.Input[str]):
        """
        :param pulumi.Input[str] day_of_the_week: Day of the week when maintenance is allowed
        :param pulumi.Input[str] time: A clock time in the day when maintenance is allowed
        """
        pulumi.set(__self__, "day_of_the_week", day_of_the_week)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="dayOfTheWeek")
    def day_of_the_week(self) -> pulumi.Input[str]:
        """
        Day of the week when maintenance is allowed
        """
        return pulumi.get(self, "day_of_the_week")

    @day_of_the_week.setter
    def day_of_the_week(self, value: pulumi.Input[str]):
        pulumi.set(self, "day_of_the_week", value)

    @property
    @pulumi.getter
    def time(self) -> pulumi.Input[str]:
        """
        A clock time in the day when maintenance is allowed
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: pulumi.Input[str]):
        pulumi.set(self, "time", value)


