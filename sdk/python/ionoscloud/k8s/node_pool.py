# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NodePoolArgs', 'NodePool']

@pulumi.input_type
class NodePoolArgs:
    def __init__(__self__, *,
                 availability_zone: pulumi.Input[str],
                 cores_count: pulumi.Input[int],
                 cpu_family: pulumi.Input[str],
                 datacenter_id: pulumi.Input[str],
                 k8s_cluster_id: pulumi.Input[str],
                 k8s_version: pulumi.Input[str],
                 node_count: pulumi.Input[int],
                 ram_size: pulumi.Input[int],
                 storage_size: pulumi.Input[int],
                 storage_type: pulumi.Input[str],
                 allow_replace: Optional[pulumi.Input[bool]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 auto_scaling: Optional[pulumi.Input['NodePoolAutoScalingArgs']] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 lans: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolLanArgs']]]] = None,
                 maintenance_window: Optional[pulumi.Input['NodePoolMaintenanceWindowArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 public_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a NodePool resource.
        :param pulumi.Input[str] availability_zone: The compute availability zone in which the nodes should exist
        :param pulumi.Input[int] cores_count: CPU cores count
        :param pulumi.Input[str] cpu_family: CPU Family
        :param pulumi.Input[str] datacenter_id: The UUID of the VDC
        :param pulumi.Input[str] k8s_cluster_id: The UUID of an existing kubernetes cluster
        :param pulumi.Input[str] k8s_version: The desired Kubernetes Version. For supported values, please check the API documentation. Downgrades are not supported.
               The provider will ignore downgrades of patch level.
        :param pulumi.Input[int] node_count: The number of nodes in this node pool
        :param pulumi.Input[int] ram_size: The amount of RAM in MB
        :param pulumi.Input[int] storage_size: The total allocated storage capacity of a node in GB
        :param pulumi.Input[str] storage_type: Storage type to use
        :param pulumi.Input[bool] allow_replace: When set to true, allows the update of immutable fields by destroying and re-creating the node pool
        :param pulumi.Input['NodePoolAutoScalingArgs'] auto_scaling: The range defining the minimum and maximum number of worker nodes that the managed node group can scale in
        :param pulumi.Input[Sequence[pulumi.Input['NodePoolLanArgs']]] lans: A list of Local Area Networks the node pool should be part of
        :param pulumi.Input['NodePoolMaintenanceWindowArgs'] maintenance_window: A maintenance window comprise of a day of the week and a time for maintenance to be allowed
        :param pulumi.Input[str] name: The desired name for the node pool
        :param pulumi.Input[Sequence[pulumi.Input[str]]] public_ips: A list of fixed IPs. Cannot be set on private clusters.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "cores_count", cores_count)
        pulumi.set(__self__, "cpu_family", cpu_family)
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "k8s_cluster_id", k8s_cluster_id)
        pulumi.set(__self__, "k8s_version", k8s_version)
        pulumi.set(__self__, "node_count", node_count)
        pulumi.set(__self__, "ram_size", ram_size)
        pulumi.set(__self__, "storage_size", storage_size)
        pulumi.set(__self__, "storage_type", storage_type)
        if allow_replace is not None:
            pulumi.set(__self__, "allow_replace", allow_replace)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if lans is not None:
            pulumi.set(__self__, "lans", lans)
        if maintenance_window is not None:
            pulumi.set(__self__, "maintenance_window", maintenance_window)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if public_ips is not None:
            pulumi.set(__self__, "public_ips", public_ips)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Input[str]:
        """
        The compute availability zone in which the nodes should exist
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="coresCount")
    def cores_count(self) -> pulumi.Input[int]:
        """
        CPU cores count
        """
        return pulumi.get(self, "cores_count")

    @cores_count.setter
    def cores_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "cores_count", value)

    @property
    @pulumi.getter(name="cpuFamily")
    def cpu_family(self) -> pulumi.Input[str]:
        """
        CPU Family
        """
        return pulumi.get(self, "cpu_family")

    @cpu_family.setter
    def cpu_family(self, value: pulumi.Input[str]):
        pulumi.set(self, "cpu_family", value)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Input[str]:
        """
        The UUID of the VDC
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter(name="k8sClusterId")
    def k8s_cluster_id(self) -> pulumi.Input[str]:
        """
        The UUID of an existing kubernetes cluster
        """
        return pulumi.get(self, "k8s_cluster_id")

    @k8s_cluster_id.setter
    def k8s_cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "k8s_cluster_id", value)

    @property
    @pulumi.getter(name="k8sVersion")
    def k8s_version(self) -> pulumi.Input[str]:
        """
        The desired Kubernetes Version. For supported values, please check the API documentation. Downgrades are not supported.
        The provider will ignore downgrades of patch level.
        """
        return pulumi.get(self, "k8s_version")

    @k8s_version.setter
    def k8s_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "k8s_version", value)

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> pulumi.Input[int]:
        """
        The number of nodes in this node pool
        """
        return pulumi.get(self, "node_count")

    @node_count.setter
    def node_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "node_count", value)

    @property
    @pulumi.getter(name="ramSize")
    def ram_size(self) -> pulumi.Input[int]:
        """
        The amount of RAM in MB
        """
        return pulumi.get(self, "ram_size")

    @ram_size.setter
    def ram_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "ram_size", value)

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> pulumi.Input[int]:
        """
        The total allocated storage capacity of a node in GB
        """
        return pulumi.get(self, "storage_size")

    @storage_size.setter
    def storage_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "storage_size", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> pulumi.Input[str]:
        """
        Storage type to use
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_type", value)

    @property
    @pulumi.getter(name="allowReplace")
    def allow_replace(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true, allows the update of immutable fields by destroying and re-creating the node pool
        """
        return pulumi.get(self, "allow_replace")

    @allow_replace.setter
    def allow_replace(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_replace", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional[pulumi.Input['NodePoolAutoScalingArgs']]:
        """
        The range defining the minimum and maximum number of worker nodes that the managed node group can scale in
        """
        return pulumi.get(self, "auto_scaling")

    @auto_scaling.setter
    def auto_scaling(self, value: Optional[pulumi.Input['NodePoolAutoScalingArgs']]):
        pulumi.set(self, "auto_scaling", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def lans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolLanArgs']]]]:
        """
        A list of Local Area Networks the node pool should be part of
        """
        return pulumi.get(self, "lans")

    @lans.setter
    def lans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolLanArgs']]]]):
        pulumi.set(self, "lans", value)

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional[pulumi.Input['NodePoolMaintenanceWindowArgs']]:
        """
        A maintenance window comprise of a day of the week and a time for maintenance to be allowed
        """
        return pulumi.get(self, "maintenance_window")

    @maintenance_window.setter
    def maintenance_window(self, value: Optional[pulumi.Input['NodePoolMaintenanceWindowArgs']]):
        pulumi.set(self, "maintenance_window", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The desired name for the node pool
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="publicIps")
    def public_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of fixed IPs. Cannot be set on private clusters.
        """
        return pulumi.get(self, "public_ips")

    @public_ips.setter
    def public_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "public_ips", value)


@pulumi.input_type
class _NodePoolState:
    def __init__(__self__, *,
                 allow_replace: Optional[pulumi.Input[bool]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 auto_scaling: Optional[pulumi.Input['NodePoolAutoScalingArgs']] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 cores_count: Optional[pulumi.Input[int]] = None,
                 cpu_family: Optional[pulumi.Input[str]] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 k8s_cluster_id: Optional[pulumi.Input[str]] = None,
                 k8s_version: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 lans: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolLanArgs']]]] = None,
                 maintenance_window: Optional[pulumi.Input['NodePoolMaintenanceWindowArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_count: Optional[pulumi.Input[int]] = None,
                 public_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ram_size: Optional[pulumi.Input[int]] = None,
                 storage_size: Optional[pulumi.Input[int]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NodePool resources.
        :param pulumi.Input[bool] allow_replace: When set to true, allows the update of immutable fields by destroying and re-creating the node pool
        :param pulumi.Input['NodePoolAutoScalingArgs'] auto_scaling: The range defining the minimum and maximum number of worker nodes that the managed node group can scale in
        :param pulumi.Input[str] availability_zone: The compute availability zone in which the nodes should exist
        :param pulumi.Input[int] cores_count: CPU cores count
        :param pulumi.Input[str] cpu_family: CPU Family
        :param pulumi.Input[str] datacenter_id: The UUID of the VDC
        :param pulumi.Input[str] k8s_cluster_id: The UUID of an existing kubernetes cluster
        :param pulumi.Input[str] k8s_version: The desired Kubernetes Version. For supported values, please check the API documentation. Downgrades are not supported.
               The provider will ignore downgrades of patch level.
        :param pulumi.Input[Sequence[pulumi.Input['NodePoolLanArgs']]] lans: A list of Local Area Networks the node pool should be part of
        :param pulumi.Input['NodePoolMaintenanceWindowArgs'] maintenance_window: A maintenance window comprise of a day of the week and a time for maintenance to be allowed
        :param pulumi.Input[str] name: The desired name for the node pool
        :param pulumi.Input[int] node_count: The number of nodes in this node pool
        :param pulumi.Input[Sequence[pulumi.Input[str]]] public_ips: A list of fixed IPs. Cannot be set on private clusters.
        :param pulumi.Input[int] ram_size: The amount of RAM in MB
        :param pulumi.Input[int] storage_size: The total allocated storage capacity of a node in GB
        :param pulumi.Input[str] storage_type: Storage type to use
        """
        if allow_replace is not None:
            pulumi.set(__self__, "allow_replace", allow_replace)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if cores_count is not None:
            pulumi.set(__self__, "cores_count", cores_count)
        if cpu_family is not None:
            pulumi.set(__self__, "cpu_family", cpu_family)
        if datacenter_id is not None:
            pulumi.set(__self__, "datacenter_id", datacenter_id)
        if k8s_cluster_id is not None:
            pulumi.set(__self__, "k8s_cluster_id", k8s_cluster_id)
        if k8s_version is not None:
            pulumi.set(__self__, "k8s_version", k8s_version)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if lans is not None:
            pulumi.set(__self__, "lans", lans)
        if maintenance_window is not None:
            pulumi.set(__self__, "maintenance_window", maintenance_window)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_count is not None:
            pulumi.set(__self__, "node_count", node_count)
        if public_ips is not None:
            pulumi.set(__self__, "public_ips", public_ips)
        if ram_size is not None:
            pulumi.set(__self__, "ram_size", ram_size)
        if storage_size is not None:
            pulumi.set(__self__, "storage_size", storage_size)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter(name="allowReplace")
    def allow_replace(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true, allows the update of immutable fields by destroying and re-creating the node pool
        """
        return pulumi.get(self, "allow_replace")

    @allow_replace.setter
    def allow_replace(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_replace", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional[pulumi.Input['NodePoolAutoScalingArgs']]:
        """
        The range defining the minimum and maximum number of worker nodes that the managed node group can scale in
        """
        return pulumi.get(self, "auto_scaling")

    @auto_scaling.setter
    def auto_scaling(self, value: Optional[pulumi.Input['NodePoolAutoScalingArgs']]):
        pulumi.set(self, "auto_scaling", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The compute availability zone in which the nodes should exist
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="coresCount")
    def cores_count(self) -> Optional[pulumi.Input[int]]:
        """
        CPU cores count
        """
        return pulumi.get(self, "cores_count")

    @cores_count.setter
    def cores_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cores_count", value)

    @property
    @pulumi.getter(name="cpuFamily")
    def cpu_family(self) -> Optional[pulumi.Input[str]]:
        """
        CPU Family
        """
        return pulumi.get(self, "cpu_family")

    @cpu_family.setter
    def cpu_family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_family", value)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> Optional[pulumi.Input[str]]:
        """
        The UUID of the VDC
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter(name="k8sClusterId")
    def k8s_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The UUID of an existing kubernetes cluster
        """
        return pulumi.get(self, "k8s_cluster_id")

    @k8s_cluster_id.setter
    def k8s_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "k8s_cluster_id", value)

    @property
    @pulumi.getter(name="k8sVersion")
    def k8s_version(self) -> Optional[pulumi.Input[str]]:
        """
        The desired Kubernetes Version. For supported values, please check the API documentation. Downgrades are not supported.
        The provider will ignore downgrades of patch level.
        """
        return pulumi.get(self, "k8s_version")

    @k8s_version.setter
    def k8s_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "k8s_version", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def lans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolLanArgs']]]]:
        """
        A list of Local Area Networks the node pool should be part of
        """
        return pulumi.get(self, "lans")

    @lans.setter
    def lans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolLanArgs']]]]):
        pulumi.set(self, "lans", value)

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional[pulumi.Input['NodePoolMaintenanceWindowArgs']]:
        """
        A maintenance window comprise of a day of the week and a time for maintenance to be allowed
        """
        return pulumi.get(self, "maintenance_window")

    @maintenance_window.setter
    def maintenance_window(self, value: Optional[pulumi.Input['NodePoolMaintenanceWindowArgs']]):
        pulumi.set(self, "maintenance_window", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The desired name for the node pool
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of nodes in this node pool
        """
        return pulumi.get(self, "node_count")

    @node_count.setter
    def node_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_count", value)

    @property
    @pulumi.getter(name="publicIps")
    def public_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of fixed IPs. Cannot be set on private clusters.
        """
        return pulumi.get(self, "public_ips")

    @public_ips.setter
    def public_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "public_ips", value)

    @property
    @pulumi.getter(name="ramSize")
    def ram_size(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of RAM in MB
        """
        return pulumi.get(self, "ram_size")

    @ram_size.setter
    def ram_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ram_size", value)

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> Optional[pulumi.Input[int]]:
        """
        The total allocated storage capacity of a node in GB
        """
        return pulumi.get(self, "storage_size")

    @storage_size.setter
    def storage_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_size", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[str]]:
        """
        Storage type to use
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_type", value)


class NodePool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_replace: Optional[pulumi.Input[bool]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 auto_scaling: Optional[pulumi.Input[Union['NodePoolAutoScalingArgs', 'NodePoolAutoScalingArgsDict']]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 cores_count: Optional[pulumi.Input[int]] = None,
                 cpu_family: Optional[pulumi.Input[str]] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 k8s_cluster_id: Optional[pulumi.Input[str]] = None,
                 k8s_version: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 lans: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NodePoolLanArgs', 'NodePoolLanArgsDict']]]]] = None,
                 maintenance_window: Optional[pulumi.Input[Union['NodePoolMaintenanceWindowArgs', 'NodePoolMaintenanceWindowArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_count: Optional[pulumi.Input[int]] = None,
                 public_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ram_size: Optional[pulumi.Input[int]] = None,
                 storage_size: Optional[pulumi.Input[int]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NodePool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_replace: When set to true, allows the update of immutable fields by destroying and re-creating the node pool
        :param pulumi.Input[Union['NodePoolAutoScalingArgs', 'NodePoolAutoScalingArgsDict']] auto_scaling: The range defining the minimum and maximum number of worker nodes that the managed node group can scale in
        :param pulumi.Input[str] availability_zone: The compute availability zone in which the nodes should exist
        :param pulumi.Input[int] cores_count: CPU cores count
        :param pulumi.Input[str] cpu_family: CPU Family
        :param pulumi.Input[str] datacenter_id: The UUID of the VDC
        :param pulumi.Input[str] k8s_cluster_id: The UUID of an existing kubernetes cluster
        :param pulumi.Input[str] k8s_version: The desired Kubernetes Version. For supported values, please check the API documentation. Downgrades are not supported.
               The provider will ignore downgrades of patch level.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NodePoolLanArgs', 'NodePoolLanArgsDict']]]] lans: A list of Local Area Networks the node pool should be part of
        :param pulumi.Input[Union['NodePoolMaintenanceWindowArgs', 'NodePoolMaintenanceWindowArgsDict']] maintenance_window: A maintenance window comprise of a day of the week and a time for maintenance to be allowed
        :param pulumi.Input[str] name: The desired name for the node pool
        :param pulumi.Input[int] node_count: The number of nodes in this node pool
        :param pulumi.Input[Sequence[pulumi.Input[str]]] public_ips: A list of fixed IPs. Cannot be set on private clusters.
        :param pulumi.Input[int] ram_size: The amount of RAM in MB
        :param pulumi.Input[int] storage_size: The total allocated storage capacity of a node in GB
        :param pulumi.Input[str] storage_type: Storage type to use
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NodePoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NodePool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NodePoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NodePoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_replace: Optional[pulumi.Input[bool]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 auto_scaling: Optional[pulumi.Input[Union['NodePoolAutoScalingArgs', 'NodePoolAutoScalingArgsDict']]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 cores_count: Optional[pulumi.Input[int]] = None,
                 cpu_family: Optional[pulumi.Input[str]] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 k8s_cluster_id: Optional[pulumi.Input[str]] = None,
                 k8s_version: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 lans: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NodePoolLanArgs', 'NodePoolLanArgsDict']]]]] = None,
                 maintenance_window: Optional[pulumi.Input[Union['NodePoolMaintenanceWindowArgs', 'NodePoolMaintenanceWindowArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_count: Optional[pulumi.Input[int]] = None,
                 public_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ram_size: Optional[pulumi.Input[int]] = None,
                 storage_size: Optional[pulumi.Input[int]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NodePoolArgs.__new__(NodePoolArgs)

            __props__.__dict__["allow_replace"] = allow_replace
            __props__.__dict__["annotations"] = annotations
            __props__.__dict__["auto_scaling"] = auto_scaling
            if availability_zone is None and not opts.urn:
                raise TypeError("Missing required property 'availability_zone'")
            __props__.__dict__["availability_zone"] = availability_zone
            if cores_count is None and not opts.urn:
                raise TypeError("Missing required property 'cores_count'")
            __props__.__dict__["cores_count"] = cores_count
            if cpu_family is None and not opts.urn:
                raise TypeError("Missing required property 'cpu_family'")
            __props__.__dict__["cpu_family"] = cpu_family
            if datacenter_id is None and not opts.urn:
                raise TypeError("Missing required property 'datacenter_id'")
            __props__.__dict__["datacenter_id"] = datacenter_id
            if k8s_cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'k8s_cluster_id'")
            __props__.__dict__["k8s_cluster_id"] = k8s_cluster_id
            if k8s_version is None and not opts.urn:
                raise TypeError("Missing required property 'k8s_version'")
            __props__.__dict__["k8s_version"] = k8s_version
            __props__.__dict__["labels"] = labels
            __props__.__dict__["lans"] = lans
            __props__.__dict__["maintenance_window"] = maintenance_window
            __props__.__dict__["name"] = name
            if node_count is None and not opts.urn:
                raise TypeError("Missing required property 'node_count'")
            __props__.__dict__["node_count"] = node_count
            __props__.__dict__["public_ips"] = public_ips
            if ram_size is None and not opts.urn:
                raise TypeError("Missing required property 'ram_size'")
            __props__.__dict__["ram_size"] = ram_size
            if storage_size is None and not opts.urn:
                raise TypeError("Missing required property 'storage_size'")
            __props__.__dict__["storage_size"] = storage_size
            if storage_type is None and not opts.urn:
                raise TypeError("Missing required property 'storage_type'")
            __props__.__dict__["storage_type"] = storage_type
        super(NodePool, __self__).__init__(
            'ionoscloud:k8s/nodePool:NodePool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_replace: Optional[pulumi.Input[bool]] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            auto_scaling: Optional[pulumi.Input[Union['NodePoolAutoScalingArgs', 'NodePoolAutoScalingArgsDict']]] = None,
            availability_zone: Optional[pulumi.Input[str]] = None,
            cores_count: Optional[pulumi.Input[int]] = None,
            cpu_family: Optional[pulumi.Input[str]] = None,
            datacenter_id: Optional[pulumi.Input[str]] = None,
            k8s_cluster_id: Optional[pulumi.Input[str]] = None,
            k8s_version: Optional[pulumi.Input[str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            lans: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NodePoolLanArgs', 'NodePoolLanArgsDict']]]]] = None,
            maintenance_window: Optional[pulumi.Input[Union['NodePoolMaintenanceWindowArgs', 'NodePoolMaintenanceWindowArgsDict']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            node_count: Optional[pulumi.Input[int]] = None,
            public_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ram_size: Optional[pulumi.Input[int]] = None,
            storage_size: Optional[pulumi.Input[int]] = None,
            storage_type: Optional[pulumi.Input[str]] = None) -> 'NodePool':
        """
        Get an existing NodePool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_replace: When set to true, allows the update of immutable fields by destroying and re-creating the node pool
        :param pulumi.Input[Union['NodePoolAutoScalingArgs', 'NodePoolAutoScalingArgsDict']] auto_scaling: The range defining the minimum and maximum number of worker nodes that the managed node group can scale in
        :param pulumi.Input[str] availability_zone: The compute availability zone in which the nodes should exist
        :param pulumi.Input[int] cores_count: CPU cores count
        :param pulumi.Input[str] cpu_family: CPU Family
        :param pulumi.Input[str] datacenter_id: The UUID of the VDC
        :param pulumi.Input[str] k8s_cluster_id: The UUID of an existing kubernetes cluster
        :param pulumi.Input[str] k8s_version: The desired Kubernetes Version. For supported values, please check the API documentation. Downgrades are not supported.
               The provider will ignore downgrades of patch level.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NodePoolLanArgs', 'NodePoolLanArgsDict']]]] lans: A list of Local Area Networks the node pool should be part of
        :param pulumi.Input[Union['NodePoolMaintenanceWindowArgs', 'NodePoolMaintenanceWindowArgsDict']] maintenance_window: A maintenance window comprise of a day of the week and a time for maintenance to be allowed
        :param pulumi.Input[str] name: The desired name for the node pool
        :param pulumi.Input[int] node_count: The number of nodes in this node pool
        :param pulumi.Input[Sequence[pulumi.Input[str]]] public_ips: A list of fixed IPs. Cannot be set on private clusters.
        :param pulumi.Input[int] ram_size: The amount of RAM in MB
        :param pulumi.Input[int] storage_size: The total allocated storage capacity of a node in GB
        :param pulumi.Input[str] storage_type: Storage type to use
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NodePoolState.__new__(_NodePoolState)

        __props__.__dict__["allow_replace"] = allow_replace
        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["auto_scaling"] = auto_scaling
        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["cores_count"] = cores_count
        __props__.__dict__["cpu_family"] = cpu_family
        __props__.__dict__["datacenter_id"] = datacenter_id
        __props__.__dict__["k8s_cluster_id"] = k8s_cluster_id
        __props__.__dict__["k8s_version"] = k8s_version
        __props__.__dict__["labels"] = labels
        __props__.__dict__["lans"] = lans
        __props__.__dict__["maintenance_window"] = maintenance_window
        __props__.__dict__["name"] = name
        __props__.__dict__["node_count"] = node_count
        __props__.__dict__["public_ips"] = public_ips
        __props__.__dict__["ram_size"] = ram_size
        __props__.__dict__["storage_size"] = storage_size
        __props__.__dict__["storage_type"] = storage_type
        return NodePool(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowReplace")
    def allow_replace(self) -> pulumi.Output[Optional[bool]]:
        """
        When set to true, allows the update of immutable fields by destroying and re-creating the node pool
        """
        return pulumi.get(self, "allow_replace")

    @property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> pulumi.Output[Optional['outputs.NodePoolAutoScaling']]:
        """
        The range defining the minimum and maximum number of worker nodes that the managed node group can scale in
        """
        return pulumi.get(self, "auto_scaling")

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[str]:
        """
        The compute availability zone in which the nodes should exist
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="coresCount")
    def cores_count(self) -> pulumi.Output[int]:
        """
        CPU cores count
        """
        return pulumi.get(self, "cores_count")

    @property
    @pulumi.getter(name="cpuFamily")
    def cpu_family(self) -> pulumi.Output[str]:
        """
        CPU Family
        """
        return pulumi.get(self, "cpu_family")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Output[str]:
        """
        The UUID of the VDC
        """
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="k8sClusterId")
    def k8s_cluster_id(self) -> pulumi.Output[str]:
        """
        The UUID of an existing kubernetes cluster
        """
        return pulumi.get(self, "k8s_cluster_id")

    @property
    @pulumi.getter(name="k8sVersion")
    def k8s_version(self) -> pulumi.Output[str]:
        """
        The desired Kubernetes Version. For supported values, please check the API documentation. Downgrades are not supported.
        The provider will ignore downgrades of patch level.
        """
        return pulumi.get(self, "k8s_version")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def lans(self) -> pulumi.Output[Optional[Sequence['outputs.NodePoolLan']]]:
        """
        A list of Local Area Networks the node pool should be part of
        """
        return pulumi.get(self, "lans")

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> pulumi.Output['outputs.NodePoolMaintenanceWindow']:
        """
        A maintenance window comprise of a day of the week and a time for maintenance to be allowed
        """
        return pulumi.get(self, "maintenance_window")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The desired name for the node pool
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> pulumi.Output[int]:
        """
        The number of nodes in this node pool
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="publicIps")
    def public_ips(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of fixed IPs. Cannot be set on private clusters.
        """
        return pulumi.get(self, "public_ips")

    @property
    @pulumi.getter(name="ramSize")
    def ram_size(self) -> pulumi.Output[int]:
        """
        The amount of RAM in MB
        """
        return pulumi.get(self, "ram_size")

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> pulumi.Output[int]:
        """
        The total allocated storage capacity of a node in GB
        """
        return pulumi.get(self, "storage_size")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> pulumi.Output[str]:
        """
        Storage type to use
        """
        return pulumi.get(self, "storage_type")

