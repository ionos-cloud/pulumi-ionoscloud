# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetS3ObjectResult',
    'AwaitableGetS3ObjectResult',
    'get_s3_object',
    'get_s3_object_output',
]

@pulumi.output_type
class GetS3ObjectResult:
    """
    A collection of values returned by getS3Object.
    """
    def __init__(__self__, body=None, bucket=None, cache_control=None, content_disposition=None, content_encoding=None, content_language=None, content_length=None, content_type=None, etag=None, expires=None, id=None, key=None, metadata=None, object_lock_legal_hold=None, object_lock_mode=None, object_lock_retain_until_date=None, range=None, request_payer=None, server_side_encryption=None, server_side_encryption_context=None, server_side_encryption_customer_algorithm=None, server_side_encryption_customer_key=None, server_side_encryption_customer_key_md5=None, storage_class=None, tags=None, version_id=None, website_redirect=None):
        if body and not isinstance(body, str):
            raise TypeError("Expected argument 'body' to be a str")
        pulumi.set(__self__, "body", body)
        if bucket and not isinstance(bucket, str):
            raise TypeError("Expected argument 'bucket' to be a str")
        pulumi.set(__self__, "bucket", bucket)
        if cache_control and not isinstance(cache_control, str):
            raise TypeError("Expected argument 'cache_control' to be a str")
        pulumi.set(__self__, "cache_control", cache_control)
        if content_disposition and not isinstance(content_disposition, str):
            raise TypeError("Expected argument 'content_disposition' to be a str")
        pulumi.set(__self__, "content_disposition", content_disposition)
        if content_encoding and not isinstance(content_encoding, str):
            raise TypeError("Expected argument 'content_encoding' to be a str")
        pulumi.set(__self__, "content_encoding", content_encoding)
        if content_language and not isinstance(content_language, str):
            raise TypeError("Expected argument 'content_language' to be a str")
        pulumi.set(__self__, "content_language", content_language)
        if content_length and not isinstance(content_length, int):
            raise TypeError("Expected argument 'content_length' to be a int")
        pulumi.set(__self__, "content_length", content_length)
        if content_type and not isinstance(content_type, str):
            raise TypeError("Expected argument 'content_type' to be a str")
        pulumi.set(__self__, "content_type", content_type)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if expires and not isinstance(expires, str):
            raise TypeError("Expected argument 'expires' to be a str")
        pulumi.set(__self__, "expires", expires)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key and not isinstance(key, str):
            raise TypeError("Expected argument 'key' to be a str")
        pulumi.set(__self__, "key", key)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if object_lock_legal_hold and not isinstance(object_lock_legal_hold, str):
            raise TypeError("Expected argument 'object_lock_legal_hold' to be a str")
        pulumi.set(__self__, "object_lock_legal_hold", object_lock_legal_hold)
        if object_lock_mode and not isinstance(object_lock_mode, str):
            raise TypeError("Expected argument 'object_lock_mode' to be a str")
        pulumi.set(__self__, "object_lock_mode", object_lock_mode)
        if object_lock_retain_until_date and not isinstance(object_lock_retain_until_date, str):
            raise TypeError("Expected argument 'object_lock_retain_until_date' to be a str")
        pulumi.set(__self__, "object_lock_retain_until_date", object_lock_retain_until_date)
        if range and not isinstance(range, str):
            raise TypeError("Expected argument 'range' to be a str")
        pulumi.set(__self__, "range", range)
        if request_payer and not isinstance(request_payer, str):
            raise TypeError("Expected argument 'request_payer' to be a str")
        pulumi.set(__self__, "request_payer", request_payer)
        if server_side_encryption and not isinstance(server_side_encryption, str):
            raise TypeError("Expected argument 'server_side_encryption' to be a str")
        pulumi.set(__self__, "server_side_encryption", server_side_encryption)
        if server_side_encryption_context and not isinstance(server_side_encryption_context, str):
            raise TypeError("Expected argument 'server_side_encryption_context' to be a str")
        pulumi.set(__self__, "server_side_encryption_context", server_side_encryption_context)
        if server_side_encryption_customer_algorithm and not isinstance(server_side_encryption_customer_algorithm, str):
            raise TypeError("Expected argument 'server_side_encryption_customer_algorithm' to be a str")
        pulumi.set(__self__, "server_side_encryption_customer_algorithm", server_side_encryption_customer_algorithm)
        if server_side_encryption_customer_key and not isinstance(server_side_encryption_customer_key, str):
            raise TypeError("Expected argument 'server_side_encryption_customer_key' to be a str")
        pulumi.set(__self__, "server_side_encryption_customer_key", server_side_encryption_customer_key)
        if server_side_encryption_customer_key_md5 and not isinstance(server_side_encryption_customer_key_md5, str):
            raise TypeError("Expected argument 'server_side_encryption_customer_key_md5' to be a str")
        pulumi.set(__self__, "server_side_encryption_customer_key_md5", server_side_encryption_customer_key_md5)
        if storage_class and not isinstance(storage_class, str):
            raise TypeError("Expected argument 'storage_class' to be a str")
        pulumi.set(__self__, "storage_class", storage_class)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if version_id and not isinstance(version_id, str):
            raise TypeError("Expected argument 'version_id' to be a str")
        pulumi.set(__self__, "version_id", version_id)
        if website_redirect and not isinstance(website_redirect, str):
            raise TypeError("Expected argument 'website_redirect' to be a str")
        pulumi.set(__self__, "website_redirect", website_redirect)

    @property
    @pulumi.getter
    def body(self) -> str:
        """
        The content of the object.
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="cacheControl")
    def cache_control(self) -> str:
        """
        The caching behavior along the request/reply chain.
        """
        return pulumi.get(self, "cache_control")

    @property
    @pulumi.getter(name="contentDisposition")
    def content_disposition(self) -> str:
        """
        Presentational information for the object.
        """
        return pulumi.get(self, "content_disposition")

    @property
    @pulumi.getter(name="contentEncoding")
    def content_encoding(self) -> str:
        """
        The content encodings applied to the object.
        """
        return pulumi.get(self, "content_encoding")

    @property
    @pulumi.getter(name="contentLanguage")
    def content_language(self) -> str:
        """
        The natural language of the intended audience for the object.
        """
        return pulumi.get(self, "content_language")

    @property
    @pulumi.getter(name="contentLength")
    def content_length(self) -> int:
        """
        The size of the object in bytes.
        """
        return pulumi.get(self, "content_length")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        """
        The MIME type describing the format of the contents.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        An entity tag (ETag) assigned by a web server to a specific version of a resource.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def expires(self) -> str:
        """
        The date and time at which the object is no longer cacheable.
        """
        return pulumi.get(self, "expires")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        """
        A map of metadata stored with the object.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="objectLockLegalHold")
    def object_lock_legal_hold(self) -> str:
        """
        The legal hold status of the object, which can be either ON or OFF.
        """
        return pulumi.get(self, "object_lock_legal_hold")

    @property
    @pulumi.getter(name="objectLockMode")
    def object_lock_mode(self) -> str:
        """
        The object lock mode, which can be either GOVERNANCE or COMPLIANCE.
        """
        return pulumi.get(self, "object_lock_mode")

    @property
    @pulumi.getter(name="objectLockRetainUntilDate")
    def object_lock_retain_until_date(self) -> str:
        """
        The date until which the object will remain locked.
        """
        return pulumi.get(self, "object_lock_retain_until_date")

    @property
    @pulumi.getter
    def range(self) -> Optional[str]:
        return pulumi.get(self, "range")

    @property
    @pulumi.getter(name="requestPayer")
    def request_payer(self) -> str:
        """
        Confirms that the requester knows that they will be charged for the request.
        """
        return pulumi.get(self, "request_payer")

    @property
    @pulumi.getter(name="serverSideEncryption")
    def server_side_encryption(self) -> str:
        """
        The server-side encryption algorithm used when storing this object.
        """
        return pulumi.get(self, "server_side_encryption")

    @property
    @pulumi.getter(name="serverSideEncryptionContext")
    def server_side_encryption_context(self) -> str:
        """
        The encryption context to use for object encryption. This attribute is sensitive.
        """
        return pulumi.get(self, "server_side_encryption_context")

    @property
    @pulumi.getter(name="serverSideEncryptionCustomerAlgorithm")
    def server_side_encryption_customer_algorithm(self) -> str:
        """
        The algorithm to use for encrypting the object (e.g., AES256).
        """
        return pulumi.get(self, "server_side_encryption_customer_algorithm")

    @property
    @pulumi.getter(name="serverSideEncryptionCustomerKey")
    def server_side_encryption_customer_key(self) -> str:
        """
        The 256-bit, base64-encoded encryption key to encrypt and decrypt your data. This attribute is sensitive.
        """
        return pulumi.get(self, "server_side_encryption_customer_key")

    @property
    @pulumi.getter(name="serverSideEncryptionCustomerKeyMd5")
    def server_side_encryption_customer_key_md5(self) -> str:
        """
        The 128-bit MD5 digest of the encryption key.
        """
        return pulumi.get(self, "server_side_encryption_customer_key_md5")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> str:
        """
        The storage class of the object.
        """
        return pulumi.get(self, "storage_class")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, str]:
        """
        The tag-set for the object, represented as a map of string key-value pairs.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="versionId")
    def version_id(self) -> str:
        """
        The version of the object. This attribute is optional.
        """
        return pulumi.get(self, "version_id")

    @property
    @pulumi.getter(name="websiteRedirect")
    def website_redirect(self) -> str:
        """
        If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL.
        """
        return pulumi.get(self, "website_redirect")


class AwaitableGetS3ObjectResult(GetS3ObjectResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetS3ObjectResult(
            body=self.body,
            bucket=self.bucket,
            cache_control=self.cache_control,
            content_disposition=self.content_disposition,
            content_encoding=self.content_encoding,
            content_language=self.content_language,
            content_length=self.content_length,
            content_type=self.content_type,
            etag=self.etag,
            expires=self.expires,
            id=self.id,
            key=self.key,
            metadata=self.metadata,
            object_lock_legal_hold=self.object_lock_legal_hold,
            object_lock_mode=self.object_lock_mode,
            object_lock_retain_until_date=self.object_lock_retain_until_date,
            range=self.range,
            request_payer=self.request_payer,
            server_side_encryption=self.server_side_encryption,
            server_side_encryption_context=self.server_side_encryption_context,
            server_side_encryption_customer_algorithm=self.server_side_encryption_customer_algorithm,
            server_side_encryption_customer_key=self.server_side_encryption_customer_key,
            server_side_encryption_customer_key_md5=self.server_side_encryption_customer_key_md5,
            storage_class=self.storage_class,
            tags=self.tags,
            version_id=self.version_id,
            website_redirect=self.website_redirect)


def get_s3_object(bucket: Optional[str] = None,
                  key: Optional[str] = None,
                  range: Optional[str] = None,
                  version_id: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetS3ObjectResult:
    """
    The **Object data source** can be used to search for and return existing objects.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.objectstorage.get_s3_object(bucket="example",
        key="object")
    ```


    :param str bucket: [string] The name of the bucket where the object is stored.
    :param str key: [string] The name of the object.
    :param str range: [string] Downloads the specified range bytes of an object. For more information about the HTTP Range header
    :param str version_id: [string] The version of the object.
    """
    __args__ = dict()
    __args__['bucket'] = bucket
    __args__['key'] = key
    __args__['range'] = range
    __args__['versionId'] = version_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:objectstorage/getS3Object:getS3Object', __args__, opts=opts, typ=GetS3ObjectResult).value

    return AwaitableGetS3ObjectResult(
        body=pulumi.get(__ret__, 'body'),
        bucket=pulumi.get(__ret__, 'bucket'),
        cache_control=pulumi.get(__ret__, 'cache_control'),
        content_disposition=pulumi.get(__ret__, 'content_disposition'),
        content_encoding=pulumi.get(__ret__, 'content_encoding'),
        content_language=pulumi.get(__ret__, 'content_language'),
        content_length=pulumi.get(__ret__, 'content_length'),
        content_type=pulumi.get(__ret__, 'content_type'),
        etag=pulumi.get(__ret__, 'etag'),
        expires=pulumi.get(__ret__, 'expires'),
        id=pulumi.get(__ret__, 'id'),
        key=pulumi.get(__ret__, 'key'),
        metadata=pulumi.get(__ret__, 'metadata'),
        object_lock_legal_hold=pulumi.get(__ret__, 'object_lock_legal_hold'),
        object_lock_mode=pulumi.get(__ret__, 'object_lock_mode'),
        object_lock_retain_until_date=pulumi.get(__ret__, 'object_lock_retain_until_date'),
        range=pulumi.get(__ret__, 'range'),
        request_payer=pulumi.get(__ret__, 'request_payer'),
        server_side_encryption=pulumi.get(__ret__, 'server_side_encryption'),
        server_side_encryption_context=pulumi.get(__ret__, 'server_side_encryption_context'),
        server_side_encryption_customer_algorithm=pulumi.get(__ret__, 'server_side_encryption_customer_algorithm'),
        server_side_encryption_customer_key=pulumi.get(__ret__, 'server_side_encryption_customer_key'),
        server_side_encryption_customer_key_md5=pulumi.get(__ret__, 'server_side_encryption_customer_key_md5'),
        storage_class=pulumi.get(__ret__, 'storage_class'),
        tags=pulumi.get(__ret__, 'tags'),
        version_id=pulumi.get(__ret__, 'version_id'),
        website_redirect=pulumi.get(__ret__, 'website_redirect'))
def get_s3_object_output(bucket: Optional[pulumi.Input[str]] = None,
                         key: Optional[pulumi.Input[str]] = None,
                         range: Optional[pulumi.Input[Optional[str]]] = None,
                         version_id: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetS3ObjectResult]:
    """
    The **Object data source** can be used to search for and return existing objects.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.objectstorage.get_s3_object(bucket="example",
        key="object")
    ```


    :param str bucket: [string] The name of the bucket where the object is stored.
    :param str key: [string] The name of the object.
    :param str range: [string] Downloads the specified range bytes of an object. For more information about the HTTP Range header
    :param str version_id: [string] The version of the object.
    """
    __args__ = dict()
    __args__['bucket'] = bucket
    __args__['key'] = key
    __args__['range'] = range
    __args__['versionId'] = version_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:objectstorage/getS3Object:getS3Object', __args__, opts=opts, typ=GetS3ObjectResult)
    return __ret__.apply(lambda __response__: GetS3ObjectResult(
        body=pulumi.get(__response__, 'body'),
        bucket=pulumi.get(__response__, 'bucket'),
        cache_control=pulumi.get(__response__, 'cache_control'),
        content_disposition=pulumi.get(__response__, 'content_disposition'),
        content_encoding=pulumi.get(__response__, 'content_encoding'),
        content_language=pulumi.get(__response__, 'content_language'),
        content_length=pulumi.get(__response__, 'content_length'),
        content_type=pulumi.get(__response__, 'content_type'),
        etag=pulumi.get(__response__, 'etag'),
        expires=pulumi.get(__response__, 'expires'),
        id=pulumi.get(__response__, 'id'),
        key=pulumi.get(__response__, 'key'),
        metadata=pulumi.get(__response__, 'metadata'),
        object_lock_legal_hold=pulumi.get(__response__, 'object_lock_legal_hold'),
        object_lock_mode=pulumi.get(__response__, 'object_lock_mode'),
        object_lock_retain_until_date=pulumi.get(__response__, 'object_lock_retain_until_date'),
        range=pulumi.get(__response__, 'range'),
        request_payer=pulumi.get(__response__, 'request_payer'),
        server_side_encryption=pulumi.get(__response__, 'server_side_encryption'),
        server_side_encryption_context=pulumi.get(__response__, 'server_side_encryption_context'),
        server_side_encryption_customer_algorithm=pulumi.get(__response__, 'server_side_encryption_customer_algorithm'),
        server_side_encryption_customer_key=pulumi.get(__response__, 'server_side_encryption_customer_key'),
        server_side_encryption_customer_key_md5=pulumi.get(__response__, 'server_side_encryption_customer_key_md5'),
        storage_class=pulumi.get(__response__, 'storage_class'),
        tags=pulumi.get(__response__, 'tags'),
        version_id=pulumi.get(__response__, 'version_id'),
        website_redirect=pulumi.get(__response__, 'website_redirect')))
