# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WebsiteConfigurationArgs', 'WebsiteConfiguration']

@pulumi.input_type
class WebsiteConfigurationArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 error_document: Optional[pulumi.Input['WebsiteConfigurationErrorDocumentArgs']] = None,
                 index_document: Optional[pulumi.Input['WebsiteConfigurationIndexDocumentArgs']] = None,
                 redirect_all_requests_to: Optional[pulumi.Input['WebsiteConfigurationRedirectAllRequestsToArgs']] = None,
                 routing_rules: Optional[pulumi.Input[Sequence[pulumi.Input['WebsiteConfigurationRoutingRuleArgs']]]] = None):
        """
        The set of arguments for constructing a WebsiteConfiguration resource.
        :param pulumi.Input[str] bucket: [string] The name of the bucket where the object will be stored.
        :param pulumi.Input['WebsiteConfigurationErrorDocumentArgs'] error_document: The object key name to use when a 4XX class error occurs. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests
        :param pulumi.Input['WebsiteConfigurationIndexDocumentArgs'] index_document: Container for the Suffix element.
        :param pulumi.Input['WebsiteConfigurationRedirectAllRequestsToArgs'] redirect_all_requests_to: Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can can specify a different error code to return.
        :param pulumi.Input[Sequence[pulumi.Input['WebsiteConfigurationRoutingRuleArgs']]] routing_rules: A container for describing a condition that must be met for the specified redirect to apply.
        """
        pulumi.set(__self__, "bucket", bucket)
        if error_document is not None:
            pulumi.set(__self__, "error_document", error_document)
        if index_document is not None:
            pulumi.set(__self__, "index_document", index_document)
        if redirect_all_requests_to is not None:
            pulumi.set(__self__, "redirect_all_requests_to", redirect_all_requests_to)
        if routing_rules is not None:
            pulumi.set(__self__, "routing_rules", routing_rules)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        [string] The name of the bucket where the object will be stored.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="errorDocument")
    def error_document(self) -> Optional[pulumi.Input['WebsiteConfigurationErrorDocumentArgs']]:
        """
        The object key name to use when a 4XX class error occurs. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests
        """
        return pulumi.get(self, "error_document")

    @error_document.setter
    def error_document(self, value: Optional[pulumi.Input['WebsiteConfigurationErrorDocumentArgs']]):
        pulumi.set(self, "error_document", value)

    @property
    @pulumi.getter(name="indexDocument")
    def index_document(self) -> Optional[pulumi.Input['WebsiteConfigurationIndexDocumentArgs']]:
        """
        Container for the Suffix element.
        """
        return pulumi.get(self, "index_document")

    @index_document.setter
    def index_document(self, value: Optional[pulumi.Input['WebsiteConfigurationIndexDocumentArgs']]):
        pulumi.set(self, "index_document", value)

    @property
    @pulumi.getter(name="redirectAllRequestsTo")
    def redirect_all_requests_to(self) -> Optional[pulumi.Input['WebsiteConfigurationRedirectAllRequestsToArgs']]:
        """
        Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can can specify a different error code to return.
        """
        return pulumi.get(self, "redirect_all_requests_to")

    @redirect_all_requests_to.setter
    def redirect_all_requests_to(self, value: Optional[pulumi.Input['WebsiteConfigurationRedirectAllRequestsToArgs']]):
        pulumi.set(self, "redirect_all_requests_to", value)

    @property
    @pulumi.getter(name="routingRules")
    def routing_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebsiteConfigurationRoutingRuleArgs']]]]:
        """
        A container for describing a condition that must be met for the specified redirect to apply.
        """
        return pulumi.get(self, "routing_rules")

    @routing_rules.setter
    def routing_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebsiteConfigurationRoutingRuleArgs']]]]):
        pulumi.set(self, "routing_rules", value)


@pulumi.input_type
class _WebsiteConfigurationState:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 error_document: Optional[pulumi.Input['WebsiteConfigurationErrorDocumentArgs']] = None,
                 index_document: Optional[pulumi.Input['WebsiteConfigurationIndexDocumentArgs']] = None,
                 redirect_all_requests_to: Optional[pulumi.Input['WebsiteConfigurationRedirectAllRequestsToArgs']] = None,
                 routing_rules: Optional[pulumi.Input[Sequence[pulumi.Input['WebsiteConfigurationRoutingRuleArgs']]]] = None):
        """
        Input properties used for looking up and filtering WebsiteConfiguration resources.
        :param pulumi.Input[str] bucket: [string] The name of the bucket where the object will be stored.
        :param pulumi.Input['WebsiteConfigurationErrorDocumentArgs'] error_document: The object key name to use when a 4XX class error occurs. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests
        :param pulumi.Input['WebsiteConfigurationIndexDocumentArgs'] index_document: Container for the Suffix element.
        :param pulumi.Input['WebsiteConfigurationRedirectAllRequestsToArgs'] redirect_all_requests_to: Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can can specify a different error code to return.
        :param pulumi.Input[Sequence[pulumi.Input['WebsiteConfigurationRoutingRuleArgs']]] routing_rules: A container for describing a condition that must be met for the specified redirect to apply.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if error_document is not None:
            pulumi.set(__self__, "error_document", error_document)
        if index_document is not None:
            pulumi.set(__self__, "index_document", index_document)
        if redirect_all_requests_to is not None:
            pulumi.set(__self__, "redirect_all_requests_to", redirect_all_requests_to)
        if routing_rules is not None:
            pulumi.set(__self__, "routing_rules", routing_rules)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The name of the bucket where the object will be stored.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="errorDocument")
    def error_document(self) -> Optional[pulumi.Input['WebsiteConfigurationErrorDocumentArgs']]:
        """
        The object key name to use when a 4XX class error occurs. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests
        """
        return pulumi.get(self, "error_document")

    @error_document.setter
    def error_document(self, value: Optional[pulumi.Input['WebsiteConfigurationErrorDocumentArgs']]):
        pulumi.set(self, "error_document", value)

    @property
    @pulumi.getter(name="indexDocument")
    def index_document(self) -> Optional[pulumi.Input['WebsiteConfigurationIndexDocumentArgs']]:
        """
        Container for the Suffix element.
        """
        return pulumi.get(self, "index_document")

    @index_document.setter
    def index_document(self, value: Optional[pulumi.Input['WebsiteConfigurationIndexDocumentArgs']]):
        pulumi.set(self, "index_document", value)

    @property
    @pulumi.getter(name="redirectAllRequestsTo")
    def redirect_all_requests_to(self) -> Optional[pulumi.Input['WebsiteConfigurationRedirectAllRequestsToArgs']]:
        """
        Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can can specify a different error code to return.
        """
        return pulumi.get(self, "redirect_all_requests_to")

    @redirect_all_requests_to.setter
    def redirect_all_requests_to(self, value: Optional[pulumi.Input['WebsiteConfigurationRedirectAllRequestsToArgs']]):
        pulumi.set(self, "redirect_all_requests_to", value)

    @property
    @pulumi.getter(name="routingRules")
    def routing_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebsiteConfigurationRoutingRuleArgs']]]]:
        """
        A container for describing a condition that must be met for the specified redirect to apply.
        """
        return pulumi.get(self, "routing_rules")

    @routing_rules.setter
    def routing_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebsiteConfigurationRoutingRuleArgs']]]]):
        pulumi.set(self, "routing_rules", value)


class WebsiteConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 error_document: Optional[pulumi.Input[Union['WebsiteConfigurationErrorDocumentArgs', 'WebsiteConfigurationErrorDocumentArgsDict']]] = None,
                 index_document: Optional[pulumi.Input[Union['WebsiteConfigurationIndexDocumentArgs', 'WebsiteConfigurationIndexDocumentArgsDict']]] = None,
                 redirect_all_requests_to: Optional[pulumi.Input[Union['WebsiteConfigurationRedirectAllRequestsToArgs', 'WebsiteConfigurationRedirectAllRequestsToArgsDict']]] = None,
                 routing_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WebsiteConfigurationRoutingRuleArgs', 'WebsiteConfigurationRoutingRuleArgsDict']]]]] = None,
                 __props__=None):
        """
        Manages Website Configuration for Buckets on IonosCloud.

        ## Import

        IONOS Object Storage Bucket website configuration can be imported using the `bucket` name.

        ```sh
        $ pulumi import ionoscloud:objectstorage/websiteConfiguration:WebsiteConfiguration example example
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: [string] The name of the bucket where the object will be stored.
        :param pulumi.Input[Union['WebsiteConfigurationErrorDocumentArgs', 'WebsiteConfigurationErrorDocumentArgsDict']] error_document: The object key name to use when a 4XX class error occurs. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests
        :param pulumi.Input[Union['WebsiteConfigurationIndexDocumentArgs', 'WebsiteConfigurationIndexDocumentArgsDict']] index_document: Container for the Suffix element.
        :param pulumi.Input[Union['WebsiteConfigurationRedirectAllRequestsToArgs', 'WebsiteConfigurationRedirectAllRequestsToArgsDict']] redirect_all_requests_to: Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can can specify a different error code to return.
        :param pulumi.Input[Sequence[pulumi.Input[Union['WebsiteConfigurationRoutingRuleArgs', 'WebsiteConfigurationRoutingRuleArgsDict']]]] routing_rules: A container for describing a condition that must be met for the specified redirect to apply.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WebsiteConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages Website Configuration for Buckets on IonosCloud.

        ## Import

        IONOS Object Storage Bucket website configuration can be imported using the `bucket` name.

        ```sh
        $ pulumi import ionoscloud:objectstorage/websiteConfiguration:WebsiteConfiguration example example
        ```

        :param str resource_name: The name of the resource.
        :param WebsiteConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WebsiteConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 error_document: Optional[pulumi.Input[Union['WebsiteConfigurationErrorDocumentArgs', 'WebsiteConfigurationErrorDocumentArgsDict']]] = None,
                 index_document: Optional[pulumi.Input[Union['WebsiteConfigurationIndexDocumentArgs', 'WebsiteConfigurationIndexDocumentArgsDict']]] = None,
                 redirect_all_requests_to: Optional[pulumi.Input[Union['WebsiteConfigurationRedirectAllRequestsToArgs', 'WebsiteConfigurationRedirectAllRequestsToArgsDict']]] = None,
                 routing_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WebsiteConfigurationRoutingRuleArgs', 'WebsiteConfigurationRoutingRuleArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WebsiteConfigurationArgs.__new__(WebsiteConfigurationArgs)

            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__.__dict__["bucket"] = bucket
            __props__.__dict__["error_document"] = error_document
            __props__.__dict__["index_document"] = index_document
            __props__.__dict__["redirect_all_requests_to"] = redirect_all_requests_to
            __props__.__dict__["routing_rules"] = routing_rules
        super(WebsiteConfiguration, __self__).__init__(
            'ionoscloud:objectstorage/websiteConfiguration:WebsiteConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket: Optional[pulumi.Input[str]] = None,
            error_document: Optional[pulumi.Input[Union['WebsiteConfigurationErrorDocumentArgs', 'WebsiteConfigurationErrorDocumentArgsDict']]] = None,
            index_document: Optional[pulumi.Input[Union['WebsiteConfigurationIndexDocumentArgs', 'WebsiteConfigurationIndexDocumentArgsDict']]] = None,
            redirect_all_requests_to: Optional[pulumi.Input[Union['WebsiteConfigurationRedirectAllRequestsToArgs', 'WebsiteConfigurationRedirectAllRequestsToArgsDict']]] = None,
            routing_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WebsiteConfigurationRoutingRuleArgs', 'WebsiteConfigurationRoutingRuleArgsDict']]]]] = None) -> 'WebsiteConfiguration':
        """
        Get an existing WebsiteConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: [string] The name of the bucket where the object will be stored.
        :param pulumi.Input[Union['WebsiteConfigurationErrorDocumentArgs', 'WebsiteConfigurationErrorDocumentArgsDict']] error_document: The object key name to use when a 4XX class error occurs. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests
        :param pulumi.Input[Union['WebsiteConfigurationIndexDocumentArgs', 'WebsiteConfigurationIndexDocumentArgsDict']] index_document: Container for the Suffix element.
        :param pulumi.Input[Union['WebsiteConfigurationRedirectAllRequestsToArgs', 'WebsiteConfigurationRedirectAllRequestsToArgsDict']] redirect_all_requests_to: Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can can specify a different error code to return.
        :param pulumi.Input[Sequence[pulumi.Input[Union['WebsiteConfigurationRoutingRuleArgs', 'WebsiteConfigurationRoutingRuleArgsDict']]]] routing_rules: A container for describing a condition that must be met for the specified redirect to apply.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WebsiteConfigurationState.__new__(_WebsiteConfigurationState)

        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["error_document"] = error_document
        __props__.__dict__["index_document"] = index_document
        __props__.__dict__["redirect_all_requests_to"] = redirect_all_requests_to
        __props__.__dict__["routing_rules"] = routing_rules
        return WebsiteConfiguration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[str]:
        """
        [string] The name of the bucket where the object will be stored.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="errorDocument")
    def error_document(self) -> pulumi.Output[Optional['outputs.WebsiteConfigurationErrorDocument']]:
        """
        The object key name to use when a 4XX class error occurs. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests
        """
        return pulumi.get(self, "error_document")

    @property
    @pulumi.getter(name="indexDocument")
    def index_document(self) -> pulumi.Output[Optional['outputs.WebsiteConfigurationIndexDocument']]:
        """
        Container for the Suffix element.
        """
        return pulumi.get(self, "index_document")

    @property
    @pulumi.getter(name="redirectAllRequestsTo")
    def redirect_all_requests_to(self) -> pulumi.Output[Optional['outputs.WebsiteConfigurationRedirectAllRequestsTo']]:
        """
        Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can can specify a different error code to return.
        """
        return pulumi.get(self, "redirect_all_requests_to")

    @property
    @pulumi.getter(name="routingRules")
    def routing_rules(self) -> pulumi.Output[Optional[Sequence['outputs.WebsiteConfigurationRoutingRule']]]:
        """
        A container for describing a condition that must be met for the specified redirect to apply.
        """
        return pulumi.get(self, "routing_rules")

