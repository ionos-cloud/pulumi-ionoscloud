# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ServerBootDeviceSelectionArgs', 'ServerBootDeviceSelection']

@pulumi.input_type
class ServerBootDeviceSelectionArgs:
    def __init__(__self__, *,
                 datacenter_id: pulumi.Input[str],
                 server_id: pulumi.Input[str],
                 boot_device_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ServerBootDeviceSelection resource.
        :param pulumi.Input[str] datacenter_id: ID of the Datacenter that holds the server for which the boot volume is selected
        :param pulumi.Input[str] server_id: ID of the Server for which the boot device will be selected.
        :param pulumi.Input[str] boot_device_id: ID of the entity to set as primary boot device. Possible boot devices are CDROM Images and Volumes. If omitted, server
               will boot from PXE
        """
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "server_id", server_id)
        if boot_device_id is not None:
            pulumi.set(__self__, "boot_device_id", boot_device_id)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Input[str]:
        """
        ID of the Datacenter that holds the server for which the boot volume is selected
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> pulumi.Input[str]:
        """
        ID of the Server for which the boot device will be selected.
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_id", value)

    @property
    @pulumi.getter(name="bootDeviceId")
    def boot_device_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the entity to set as primary boot device. Possible boot devices are CDROM Images and Volumes. If omitted, server
        will boot from PXE
        """
        return pulumi.get(self, "boot_device_id")

    @boot_device_id.setter
    def boot_device_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_device_id", value)


@pulumi.input_type
class _ServerBootDeviceSelectionState:
    def __init__(__self__, *,
                 boot_device_id: Optional[pulumi.Input[str]] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 default_boot_volume_id: Optional[pulumi.Input[str]] = None,
                 server_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ServerBootDeviceSelection resources.
        :param pulumi.Input[str] boot_device_id: ID of the entity to set as primary boot device. Possible boot devices are CDROM Images and Volumes. If omitted, server
               will boot from PXE
        :param pulumi.Input[str] datacenter_id: ID of the Datacenter that holds the server for which the boot volume is selected
        :param pulumi.Input[str] default_boot_volume_id: ID of the first attached volume of the Server, which will be the default boot volume.
        :param pulumi.Input[str] server_id: ID of the Server for which the boot device will be selected.
        """
        if boot_device_id is not None:
            pulumi.set(__self__, "boot_device_id", boot_device_id)
        if datacenter_id is not None:
            pulumi.set(__self__, "datacenter_id", datacenter_id)
        if default_boot_volume_id is not None:
            pulumi.set(__self__, "default_boot_volume_id", default_boot_volume_id)
        if server_id is not None:
            pulumi.set(__self__, "server_id", server_id)

    @property
    @pulumi.getter(name="bootDeviceId")
    def boot_device_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the entity to set as primary boot device. Possible boot devices are CDROM Images and Volumes. If omitted, server
        will boot from PXE
        """
        return pulumi.get(self, "boot_device_id")

    @boot_device_id.setter
    def boot_device_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_device_id", value)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the Datacenter that holds the server for which the boot volume is selected
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter(name="defaultBootVolumeId")
    def default_boot_volume_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the first attached volume of the Server, which will be the default boot volume.
        """
        return pulumi.get(self, "default_boot_volume_id")

    @default_boot_volume_id.setter
    def default_boot_volume_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_boot_volume_id", value)

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the Server for which the boot device will be selected.
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_id", value)


class ServerBootDeviceSelection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 boot_device_id: Optional[pulumi.Input[str]] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 server_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ServerBootDeviceSelection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] boot_device_id: ID of the entity to set as primary boot device. Possible boot devices are CDROM Images and Volumes. If omitted, server
               will boot from PXE
        :param pulumi.Input[str] datacenter_id: ID of the Datacenter that holds the server for which the boot volume is selected
        :param pulumi.Input[str] server_id: ID of the Server for which the boot device will be selected.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServerBootDeviceSelectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ServerBootDeviceSelection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ServerBootDeviceSelectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServerBootDeviceSelectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 boot_device_id: Optional[pulumi.Input[str]] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 server_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServerBootDeviceSelectionArgs.__new__(ServerBootDeviceSelectionArgs)

            __props__.__dict__["boot_device_id"] = boot_device_id
            if datacenter_id is None and not opts.urn:
                raise TypeError("Missing required property 'datacenter_id'")
            __props__.__dict__["datacenter_id"] = datacenter_id
            if server_id is None and not opts.urn:
                raise TypeError("Missing required property 'server_id'")
            __props__.__dict__["server_id"] = server_id
            __props__.__dict__["default_boot_volume_id"] = None
        super(ServerBootDeviceSelection, __self__).__init__(
            'ionoscloud:index/serverBootDeviceSelection:ServerBootDeviceSelection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            boot_device_id: Optional[pulumi.Input[str]] = None,
            datacenter_id: Optional[pulumi.Input[str]] = None,
            default_boot_volume_id: Optional[pulumi.Input[str]] = None,
            server_id: Optional[pulumi.Input[str]] = None) -> 'ServerBootDeviceSelection':
        """
        Get an existing ServerBootDeviceSelection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] boot_device_id: ID of the entity to set as primary boot device. Possible boot devices are CDROM Images and Volumes. If omitted, server
               will boot from PXE
        :param pulumi.Input[str] datacenter_id: ID of the Datacenter that holds the server for which the boot volume is selected
        :param pulumi.Input[str] default_boot_volume_id: ID of the first attached volume of the Server, which will be the default boot volume.
        :param pulumi.Input[str] server_id: ID of the Server for which the boot device will be selected.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServerBootDeviceSelectionState.__new__(_ServerBootDeviceSelectionState)

        __props__.__dict__["boot_device_id"] = boot_device_id
        __props__.__dict__["datacenter_id"] = datacenter_id
        __props__.__dict__["default_boot_volume_id"] = default_boot_volume_id
        __props__.__dict__["server_id"] = server_id
        return ServerBootDeviceSelection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bootDeviceId")
    def boot_device_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the entity to set as primary boot device. Possible boot devices are CDROM Images and Volumes. If omitted, server
        will boot from PXE
        """
        return pulumi.get(self, "boot_device_id")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Output[str]:
        """
        ID of the Datacenter that holds the server for which the boot volume is selected
        """
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="defaultBootVolumeId")
    def default_boot_volume_id(self) -> pulumi.Output[str]:
        """
        ID of the first attached volume of the Server, which will be the default boot volume.
        """
        return pulumi.get(self, "default_boot_volume_id")

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> pulumi.Output[str]:
        """
        ID of the Server for which the boot device will be selected.
        """
        return pulumi.get(self, "server_id")

