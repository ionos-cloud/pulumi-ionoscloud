# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetInmemorydbSnapshotResult',
    'AwaitableGetInmemorydbSnapshotResult',
    'get_inmemorydb_snapshot',
    'get_inmemorydb_snapshot_output',
]

@pulumi.output_type
class GetInmemorydbSnapshotResult:
    """
    A collection of values returned by getInmemorydbSnapshot.
    """
    def __init__(__self__, id=None, location=None, metadatas=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if metadatas and not isinstance(metadatas, list):
            raise TypeError("Expected argument 'metadatas' to be a list")
        pulumi.set(__self__, "metadatas", metadatas)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetInmemorydbSnapshotMetadataResult']:
        return pulumi.get(self, "metadatas")


class AwaitableGetInmemorydbSnapshotResult(GetInmemorydbSnapshotResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInmemorydbSnapshotResult(
            id=self.id,
            location=self.location,
            metadatas=self.metadatas)


def get_inmemorydb_snapshot(id: Optional[str] = None,
                            location: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInmemorydbSnapshotResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['location'] = location
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:index/getInmemorydbSnapshot:getInmemorydbSnapshot', __args__, opts=opts, typ=GetInmemorydbSnapshotResult).value

    return AwaitableGetInmemorydbSnapshotResult(
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        metadatas=pulumi.get(__ret__, 'metadatas'))
def get_inmemorydb_snapshot_output(id: Optional[pulumi.Input[str]] = None,
                                   location: Optional[pulumi.Input[str]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInmemorydbSnapshotResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['location'] = location
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:index/getInmemorydbSnapshot:getInmemorydbSnapshot', __args__, opts=opts, typ=GetInmemorydbSnapshotResult)
    return __ret__.apply(lambda __response__: GetInmemorydbSnapshotResult(
        id=pulumi.get(__response__, 'id'),
        location=pulumi.get(__response__, 'location'),
        metadatas=pulumi.get(__response__, 'metadatas')))
