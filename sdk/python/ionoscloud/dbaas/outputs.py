# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'InMemoryDBReplicaSetConnections',
    'InMemoryDBReplicaSetCredentials',
    'InMemoryDBReplicaSetCredentialsHashedPassword',
    'InMemoryDBReplicaSetMaintenanceWindow',
    'InMemoryDBReplicaSetResources',
    'MariaDBClusterConnections',
    'MariaDBClusterCredentials',
    'MariaDBClusterMaintenanceWindow',
    'MongoClusterBackup',
    'MongoClusterBiConnector',
    'MongoClusterConnections',
    'MongoClusterMaintenanceWindow',
    'MongoUserRole',
    'PSQLClusterConnectionPooler',
    'PSQLClusterConnections',
    'PSQLClusterCredentials',
    'PSQLClusterFromBackup',
    'PSQLClusterMaintenanceWindow',
]

@pulumi.output_type
class InMemoryDBReplicaSetConnections(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datacenterId":
            suggest = "datacenter_id"
        elif key == "lanId":
            suggest = "lan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InMemoryDBReplicaSetConnections. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InMemoryDBReplicaSetConnections.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InMemoryDBReplicaSetConnections.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr: str,
                 datacenter_id: str,
                 lan_id: str):
        """
        :param str cidr: The IP and subnet for your instance. Note the following unavailable IP ranges: 10.233.64.0/18, 10.233.0.0/18, 10.233.114.0/24
        :param str datacenter_id: The datacenter to connect your instance to.
        :param str lan_id: The numeric LAN ID to connect your instance to.
        """
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "lan_id", lan_id)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        """
        The IP and subnet for your instance. Note the following unavailable IP ranges: 10.233.64.0/18, 10.233.0.0/18, 10.233.114.0/24
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> str:
        """
        The datacenter to connect your instance to.
        """
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="lanId")
    def lan_id(self) -> str:
        """
        The numeric LAN ID to connect your instance to.
        """
        return pulumi.get(self, "lan_id")


@pulumi.output_type
class InMemoryDBReplicaSetCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hashedPassword":
            suggest = "hashed_password"
        elif key == "plainTextPassword":
            suggest = "plain_text_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InMemoryDBReplicaSetCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InMemoryDBReplicaSetCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InMemoryDBReplicaSetCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 username: str,
                 hashed_password: Optional['outputs.InMemoryDBReplicaSetCredentialsHashedPassword'] = None,
                 plain_text_password: Optional[str] = None):
        """
        :param str username: The username for the initial InMemoryDB user. Some system usernames are restricted (e.g. 'admin', 'standby').
        :param 'InMemoryDBReplicaSetCredentialsHashedPasswordArgs' hashed_password: The hashed password for a InMemoryDB user.
        :param str plain_text_password: The password for a InMemoryDB user.
        """
        pulumi.set(__self__, "username", username)
        if hashed_password is not None:
            pulumi.set(__self__, "hashed_password", hashed_password)
        if plain_text_password is not None:
            pulumi.set(__self__, "plain_text_password", plain_text_password)

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username for the initial InMemoryDB user. Some system usernames are restricted (e.g. 'admin', 'standby').
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="hashedPassword")
    def hashed_password(self) -> Optional['outputs.InMemoryDBReplicaSetCredentialsHashedPassword']:
        """
        The hashed password for a InMemoryDB user.
        """
        return pulumi.get(self, "hashed_password")

    @property
    @pulumi.getter(name="plainTextPassword")
    def plain_text_password(self) -> Optional[str]:
        """
        The password for a InMemoryDB user.
        """
        return pulumi.get(self, "plain_text_password")


@pulumi.output_type
class InMemoryDBReplicaSetCredentialsHashedPassword(dict):
    def __init__(__self__, *,
                 algorithm: str,
                 hash: str):
        pulumi.set(__self__, "algorithm", algorithm)
        pulumi.set(__self__, "hash", hash)

    @property
    @pulumi.getter
    def algorithm(self) -> str:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter
    def hash(self) -> str:
        return pulumi.get(self, "hash")


@pulumi.output_type
class InMemoryDBReplicaSetMaintenanceWindow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfTheWeek":
            suggest = "day_of_the_week"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InMemoryDBReplicaSetMaintenanceWindow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InMemoryDBReplicaSetMaintenanceWindow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InMemoryDBReplicaSetMaintenanceWindow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_the_week: str,
                 time: str):
        """
        :param str day_of_the_week: The name of the week day.
        :param str time: Start of the maintenance window in UTC time.
        """
        pulumi.set(__self__, "day_of_the_week", day_of_the_week)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="dayOfTheWeek")
    def day_of_the_week(self) -> str:
        """
        The name of the week day.
        """
        return pulumi.get(self, "day_of_the_week")

    @property
    @pulumi.getter
    def time(self) -> str:
        """
        Start of the maintenance window in UTC time.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class InMemoryDBReplicaSetResources(dict):
    def __init__(__self__, *,
                 cores: int,
                 ram: int,
                 storage: Optional[int] = None):
        """
        :param int cores: The number of CPU cores per instance.
        :param int ram: The amount of memory per instance in gigabytes (GB).
        :param int storage: The size of the storage in GB. The size is derived from the amount of RAM and the persistence mode and is not configurable.
        """
        pulumi.set(__self__, "cores", cores)
        pulumi.set(__self__, "ram", ram)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def cores(self) -> int:
        """
        The number of CPU cores per instance.
        """
        return pulumi.get(self, "cores")

    @property
    @pulumi.getter
    def ram(self) -> int:
        """
        The amount of memory per instance in gigabytes (GB).
        """
        return pulumi.get(self, "ram")

    @property
    @pulumi.getter
    def storage(self) -> Optional[int]:
        """
        The size of the storage in GB. The size is derived from the amount of RAM and the persistence mode and is not configurable.
        """
        return pulumi.get(self, "storage")


@pulumi.output_type
class MariaDBClusterConnections(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datacenterId":
            suggest = "datacenter_id"
        elif key == "lanId":
            suggest = "lan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MariaDBClusterConnections. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MariaDBClusterConnections.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MariaDBClusterConnections.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr: str,
                 datacenter_id: str,
                 lan_id: str):
        """
        :param str cidr: The IP and subnet for your cluster.
        :param str datacenter_id: The datacenter to connect your cluster to.
        :param str lan_id: The numeric LAN ID to connect your cluster to.
        """
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "lan_id", lan_id)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        """
        The IP and subnet for your cluster.
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> str:
        """
        The datacenter to connect your cluster to.
        """
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="lanId")
    def lan_id(self) -> str:
        """
        The numeric LAN ID to connect your cluster to.
        """
        return pulumi.get(self, "lan_id")


@pulumi.output_type
class MariaDBClusterCredentials(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        """
        :param str password: The password for a MariaDB user.
        :param str username: The username for the initial MariaDB user. Some system usernames are restricted (e.g 'mariadb', 'admin', 'standby').
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password for a MariaDB user.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username for the initial MariaDB user. Some system usernames are restricted (e.g 'mariadb', 'admin', 'standby').
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class MariaDBClusterMaintenanceWindow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfTheWeek":
            suggest = "day_of_the_week"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MariaDBClusterMaintenanceWindow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MariaDBClusterMaintenanceWindow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MariaDBClusterMaintenanceWindow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_the_week: str,
                 time: str):
        """
        :param str day_of_the_week: The name of the week day.
        :param str time: Start of the maintenance window in UTC time.
        """
        pulumi.set(__self__, "day_of_the_week", day_of_the_week)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="dayOfTheWeek")
    def day_of_the_week(self) -> str:
        """
        The name of the week day.
        """
        return pulumi.get(self, "day_of_the_week")

    @property
    @pulumi.getter
    def time(self) -> str:
        """
        Start of the maintenance window in UTC time.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class MongoClusterBackup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pointInTimeWindowHours":
            suggest = "point_in_time_window_hours"
        elif key == "snapshotIntervalHours":
            suggest = "snapshot_interval_hours"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MongoClusterBackup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MongoClusterBackup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MongoClusterBackup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: Optional[str] = None,
                 point_in_time_window_hours: Optional[int] = None,
                 snapshot_interval_hours: Optional[int] = None):
        """
        :param str location: The location where the cluster backups will be stored. If not set, the backup is stored in the nearest location of the cluster. Examples: de, eu-sounth-2, eu-central-2
        :param int point_in_time_window_hours: Number of hours in the past for which a point-in-time snapshot can be created.
        :param int snapshot_interval_hours: Number of hours between snapshots.
        """
        if location is not None:
            pulumi.set(__self__, "location", location)
        if point_in_time_window_hours is not None:
            pulumi.set(__self__, "point_in_time_window_hours", point_in_time_window_hours)
        if snapshot_interval_hours is not None:
            pulumi.set(__self__, "snapshot_interval_hours", snapshot_interval_hours)

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        The location where the cluster backups will be stored. If not set, the backup is stored in the nearest location of the cluster. Examples: de, eu-sounth-2, eu-central-2
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="pointInTimeWindowHours")
    def point_in_time_window_hours(self) -> Optional[int]:
        """
        Number of hours in the past for which a point-in-time snapshot can be created.
        """
        return pulumi.get(self, "point_in_time_window_hours")

    @property
    @pulumi.getter(name="snapshotIntervalHours")
    def snapshot_interval_hours(self) -> Optional[int]:
        """
        Number of hours between snapshots.
        """
        return pulumi.get(self, "snapshot_interval_hours")


@pulumi.output_type
class MongoClusterBiConnector(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 host: Optional[str] = None,
                 port: Optional[str] = None):
        """
        :param bool enabled: Enable or disable the BiConnector.
        :param str host: The host where this new BI Connector is installed.
        :param str port: Port number used when connecting to this new BI Connector.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable or disable the BiConnector.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        The host where this new BI Connector is installed.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        """
        Port number used when connecting to this new BI Connector.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class MongoClusterConnections(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cidrLists":
            suggest = "cidr_lists"
        elif key == "datacenterId":
            suggest = "datacenter_id"
        elif key == "lanId":
            suggest = "lan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MongoClusterConnections. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MongoClusterConnections.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MongoClusterConnections.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr_lists: Sequence[str],
                 datacenter_id: str,
                 lan_id: str):
        """
        :param Sequence[str] cidr_lists: The list of IPs and subnet for your cluster. Note the following unavailable IP ranges:10.233.64.0/18, 10.233.0.0/18, 10.233.114.0/24. example: [192.168.1.100/24, 192.168.1.101/24]
        :param str datacenter_id: The datacenter to connect your cluster to.
        :param str lan_id: The LAN to connect your cluster to.
        """
        pulumi.set(__self__, "cidr_lists", cidr_lists)
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "lan_id", lan_id)

    @property
    @pulumi.getter(name="cidrLists")
    def cidr_lists(self) -> Sequence[str]:
        """
        The list of IPs and subnet for your cluster. Note the following unavailable IP ranges:10.233.64.0/18, 10.233.0.0/18, 10.233.114.0/24. example: [192.168.1.100/24, 192.168.1.101/24]
        """
        return pulumi.get(self, "cidr_lists")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> str:
        """
        The datacenter to connect your cluster to.
        """
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="lanId")
    def lan_id(self) -> str:
        """
        The LAN to connect your cluster to.
        """
        return pulumi.get(self, "lan_id")


@pulumi.output_type
class MongoClusterMaintenanceWindow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfTheWeek":
            suggest = "day_of_the_week"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MongoClusterMaintenanceWindow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MongoClusterMaintenanceWindow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MongoClusterMaintenanceWindow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_the_week: str,
                 time: str):
        pulumi.set(__self__, "day_of_the_week", day_of_the_week)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="dayOfTheWeek")
    def day_of_the_week(self) -> str:
        return pulumi.get(self, "day_of_the_week")

    @property
    @pulumi.getter
    def time(self) -> str:
        return pulumi.get(self, "time")


@pulumi.output_type
class MongoUserRole(dict):
    def __init__(__self__, *,
                 database: Optional[str] = None,
                 role: Optional[str] = None):
        """
        :param str role: A list of mongodb user roles. Examples: read, readWrite, readAnyDatabase
        """
        if database is not None:
            pulumi.set(__self__, "database", database)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        A list of mongodb user roles. Examples: read, readWrite, readAnyDatabase
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class PSQLClusterConnectionPooler(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "poolMode":
            suggest = "pool_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PSQLClusterConnectionPooler. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PSQLClusterConnectionPooler.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PSQLClusterConnectionPooler.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 pool_mode: str):
        """
        :param str pool_mode: Represents different modes of connection pooling for the connection pooler
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "pool_mode", pool_mode)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="poolMode")
    def pool_mode(self) -> str:
        """
        Represents different modes of connection pooling for the connection pooler
        """
        return pulumi.get(self, "pool_mode")


@pulumi.output_type
class PSQLClusterConnections(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datacenterId":
            suggest = "datacenter_id"
        elif key == "lanId":
            suggest = "lan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PSQLClusterConnections. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PSQLClusterConnections.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PSQLClusterConnections.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr: str,
                 datacenter_id: str,
                 lan_id: str):
        """
        :param str cidr: The IP and subnet for the database.
                         Note the following unavailable IP ranges:
                         10.233.64.0/18
                         10.233.0.0/18
                         10.233.114.0/24
        :param str datacenter_id: The datacenter to connect your cluster to.
        :param str lan_id: The LAN to connect your cluster to.
        """
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "lan_id", lan_id)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        """
        The IP and subnet for the database.
                  Note the following unavailable IP ranges:
                  10.233.64.0/18
                  10.233.0.0/18
                  10.233.114.0/24
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> str:
        """
        The datacenter to connect your cluster to.
        """
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="lanId")
    def lan_id(self) -> str:
        """
        The LAN to connect your cluster to.
        """
        return pulumi.get(self, "lan_id")


@pulumi.output_type
class PSQLClusterCredentials(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        """
        :param str username: the username for the initial postgres user. some system usernames are restricted (e.g. "postgres", "admin", "standby")
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        the username for the initial postgres user. some system usernames are restricted (e.g. "postgres", "admin", "standby")
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class PSQLClusterFromBackup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupId":
            suggest = "backup_id"
        elif key == "recoveryTargetTime":
            suggest = "recovery_target_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PSQLClusterFromBackup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PSQLClusterFromBackup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PSQLClusterFromBackup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_id: str,
                 recovery_target_time: Optional[str] = None):
        """
        :param str backup_id: The unique ID of the backup you want to restore.
        :param str recovery_target_time: If this value is supplied as ISO 8601 timestamp, the backup will be replayed up until the given timestamp. If empty, the backup will be applied completely.
        """
        pulumi.set(__self__, "backup_id", backup_id)
        if recovery_target_time is not None:
            pulumi.set(__self__, "recovery_target_time", recovery_target_time)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> str:
        """
        The unique ID of the backup you want to restore.
        """
        return pulumi.get(self, "backup_id")

    @property
    @pulumi.getter(name="recoveryTargetTime")
    def recovery_target_time(self) -> Optional[str]:
        """
        If this value is supplied as ISO 8601 timestamp, the backup will be replayed up until the given timestamp. If empty, the backup will be applied completely.
        """
        return pulumi.get(self, "recovery_target_time")


@pulumi.output_type
class PSQLClusterMaintenanceWindow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfTheWeek":
            suggest = "day_of_the_week"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PSQLClusterMaintenanceWindow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PSQLClusterMaintenanceWindow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PSQLClusterMaintenanceWindow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_the_week: str,
                 time: str):
        pulumi.set(__self__, "day_of_the_week", day_of_the_week)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="dayOfTheWeek")
    def day_of_the_week(self) -> str:
        return pulumi.get(self, "day_of_the_week")

    @property
    @pulumi.getter
    def time(self) -> str:
        return pulumi.get(self, "time")


