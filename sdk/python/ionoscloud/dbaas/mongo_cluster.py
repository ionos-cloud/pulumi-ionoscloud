# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MongoClusterArgs', 'MongoCluster']

@pulumi.input_type
class MongoClusterArgs:
    def __init__(__self__, *,
                 connections: pulumi.Input['MongoClusterConnectionsArgs'],
                 display_name: pulumi.Input[str],
                 instances: pulumi.Input[int],
                 location: pulumi.Input[str],
                 mongodb_version: pulumi.Input[str],
                 backup: Optional[pulumi.Input['MongoClusterBackupArgs']] = None,
                 bi_connector: Optional[pulumi.Input['MongoClusterBiConnectorArgs']] = None,
                 cores: Optional[pulumi.Input[int]] = None,
                 edition: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input['MongoClusterMaintenanceWindowArgs']] = None,
                 ram: Optional[pulumi.Input[int]] = None,
                 shards: Optional[pulumi.Input[int]] = None,
                 storage_size: Optional[pulumi.Input[int]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 template_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a MongoCluster resource.
        :param pulumi.Input['MongoClusterConnectionsArgs'] connections: Details about the network connection for your cluster.
        :param pulumi.Input[str] display_name: The name of your cluster.
        :param pulumi.Input[int] instances: The total number of instances in the cluster (one master and n-1 standbys). Example: 1, 3, 5, 7. For enterprise edition
               at least 3.
        :param pulumi.Input[str] location: The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
               be modified after datacenter creation (disallowed in update requests). Available locations: de/txl, gb/lhr, es/vit.
               Update forces cluster re-creation.
        :param pulumi.Input[str] mongodb_version: The MongoDB version of your cluster. Update forces cluster re-creation.
        :param pulumi.Input['MongoClusterBackupArgs'] backup: Backup related properties.
        :param pulumi.Input['MongoClusterBiConnectorArgs'] bi_connector: The MongoDB Connector for Business Intelligence allows you to query a MongoDB database using SQL commands to aid in data
               analysis.
        :param pulumi.Input[int] cores: The number of CPU cores per instance.
        :param pulumi.Input[str] edition: The cluster edition. Must be one of: playground, business, enterprise
        :param pulumi.Input['MongoClusterMaintenanceWindowArgs'] maintenance_window: A weekly 4 hour-long window, during which maintenance might occur
        :param pulumi.Input[int] ram: The amount of memory per instance in megabytes. Multiple of 1024
        :param pulumi.Input[int] shards: The total number of shards in the cluster.
        :param pulumi.Input[int] storage_size: The amount of storage per instance in megabytes. At least 5120, at most 2097152
        :param pulumi.Input[str] storage_type: The storage type. One of : HDD, SSD, SSD Standard, SSD Premium
        :param pulumi.Input[str] template_id: The unique ID of the template, which specifies the number of cores, storage size, and memory. You cannot downgrade to a
               smaller template or minor edition (e.g. from business to playground). To get a list of all templates to confirm the
               changes use the /templates endpoint.
        :param pulumi.Input[str] type: The cluster type, either `replicaset` or `sharded-cluster`
        """
        pulumi.set(__self__, "connections", connections)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "instances", instances)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "mongodb_version", mongodb_version)
        if backup is not None:
            pulumi.set(__self__, "backup", backup)
        if bi_connector is not None:
            pulumi.set(__self__, "bi_connector", bi_connector)
        if cores is not None:
            pulumi.set(__self__, "cores", cores)
        if edition is not None:
            pulumi.set(__self__, "edition", edition)
        if maintenance_window is not None:
            pulumi.set(__self__, "maintenance_window", maintenance_window)
        if ram is not None:
            pulumi.set(__self__, "ram", ram)
        if shards is not None:
            pulumi.set(__self__, "shards", shards)
        if storage_size is not None:
            pulumi.set(__self__, "storage_size", storage_size)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def connections(self) -> pulumi.Input['MongoClusterConnectionsArgs']:
        """
        Details about the network connection for your cluster.
        """
        return pulumi.get(self, "connections")

    @connections.setter
    def connections(self, value: pulumi.Input['MongoClusterConnectionsArgs']):
        pulumi.set(self, "connections", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        The name of your cluster.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def instances(self) -> pulumi.Input[int]:
        """
        The total number of instances in the cluster (one master and n-1 standbys). Example: 1, 3, 5, 7. For enterprise edition
        at least 3.
        """
        return pulumi.get(self, "instances")

    @instances.setter
    def instances(self, value: pulumi.Input[int]):
        pulumi.set(self, "instances", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
        be modified after datacenter creation (disallowed in update requests). Available locations: de/txl, gb/lhr, es/vit.
        Update forces cluster re-creation.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="mongodbVersion")
    def mongodb_version(self) -> pulumi.Input[str]:
        """
        The MongoDB version of your cluster. Update forces cluster re-creation.
        """
        return pulumi.get(self, "mongodb_version")

    @mongodb_version.setter
    def mongodb_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "mongodb_version", value)

    @property
    @pulumi.getter
    def backup(self) -> Optional[pulumi.Input['MongoClusterBackupArgs']]:
        """
        Backup related properties.
        """
        return pulumi.get(self, "backup")

    @backup.setter
    def backup(self, value: Optional[pulumi.Input['MongoClusterBackupArgs']]):
        pulumi.set(self, "backup", value)

    @property
    @pulumi.getter(name="biConnector")
    def bi_connector(self) -> Optional[pulumi.Input['MongoClusterBiConnectorArgs']]:
        """
        The MongoDB Connector for Business Intelligence allows you to query a MongoDB database using SQL commands to aid in data
        analysis.
        """
        return pulumi.get(self, "bi_connector")

    @bi_connector.setter
    def bi_connector(self, value: Optional[pulumi.Input['MongoClusterBiConnectorArgs']]):
        pulumi.set(self, "bi_connector", value)

    @property
    @pulumi.getter
    def cores(self) -> Optional[pulumi.Input[int]]:
        """
        The number of CPU cores per instance.
        """
        return pulumi.get(self, "cores")

    @cores.setter
    def cores(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cores", value)

    @property
    @pulumi.getter
    def edition(self) -> Optional[pulumi.Input[str]]:
        """
        The cluster edition. Must be one of: playground, business, enterprise
        """
        return pulumi.get(self, "edition")

    @edition.setter
    def edition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edition", value)

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional[pulumi.Input['MongoClusterMaintenanceWindowArgs']]:
        """
        A weekly 4 hour-long window, during which maintenance might occur
        """
        return pulumi.get(self, "maintenance_window")

    @maintenance_window.setter
    def maintenance_window(self, value: Optional[pulumi.Input['MongoClusterMaintenanceWindowArgs']]):
        pulumi.set(self, "maintenance_window", value)

    @property
    @pulumi.getter
    def ram(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of memory per instance in megabytes. Multiple of 1024
        """
        return pulumi.get(self, "ram")

    @ram.setter
    def ram(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ram", value)

    @property
    @pulumi.getter
    def shards(self) -> Optional[pulumi.Input[int]]:
        """
        The total number of shards in the cluster.
        """
        return pulumi.get(self, "shards")

    @shards.setter
    def shards(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "shards", value)

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of storage per instance in megabytes. At least 5120, at most 2097152
        """
        return pulumi.get(self, "storage_size")

    @storage_size.setter
    def storage_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_size", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[str]]:
        """
        The storage type. One of : HDD, SSD, SSD Standard, SSD Premium
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_type", value)

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID of the template, which specifies the number of cores, storage size, and memory. You cannot downgrade to a
        smaller template or minor edition (e.g. from business to playground). To get a list of all templates to confirm the
        changes use the /templates endpoint.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The cluster type, either `replicaset` or `sharded-cluster`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _MongoClusterState:
    def __init__(__self__, *,
                 backup: Optional[pulumi.Input['MongoClusterBackupArgs']] = None,
                 bi_connector: Optional[pulumi.Input['MongoClusterBiConnectorArgs']] = None,
                 connection_string: Optional[pulumi.Input[str]] = None,
                 connections: Optional[pulumi.Input['MongoClusterConnectionsArgs']] = None,
                 cores: Optional[pulumi.Input[int]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 edition: Optional[pulumi.Input[str]] = None,
                 instances: Optional[pulumi.Input[int]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input['MongoClusterMaintenanceWindowArgs']] = None,
                 mongodb_version: Optional[pulumi.Input[str]] = None,
                 ram: Optional[pulumi.Input[int]] = None,
                 shards: Optional[pulumi.Input[int]] = None,
                 storage_size: Optional[pulumi.Input[int]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 template_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering MongoCluster resources.
        :param pulumi.Input['MongoClusterBackupArgs'] backup: Backup related properties.
        :param pulumi.Input['MongoClusterBiConnectorArgs'] bi_connector: The MongoDB Connector for Business Intelligence allows you to query a MongoDB database using SQL commands to aid in data
               analysis.
        :param pulumi.Input[str] connection_string: The connection string for your cluster.
        :param pulumi.Input['MongoClusterConnectionsArgs'] connections: Details about the network connection for your cluster.
        :param pulumi.Input[int] cores: The number of CPU cores per instance.
        :param pulumi.Input[str] display_name: The name of your cluster.
        :param pulumi.Input[str] edition: The cluster edition. Must be one of: playground, business, enterprise
        :param pulumi.Input[int] instances: The total number of instances in the cluster (one master and n-1 standbys). Example: 1, 3, 5, 7. For enterprise edition
               at least 3.
        :param pulumi.Input[str] location: The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
               be modified after datacenter creation (disallowed in update requests). Available locations: de/txl, gb/lhr, es/vit.
               Update forces cluster re-creation.
        :param pulumi.Input['MongoClusterMaintenanceWindowArgs'] maintenance_window: A weekly 4 hour-long window, during which maintenance might occur
        :param pulumi.Input[str] mongodb_version: The MongoDB version of your cluster. Update forces cluster re-creation.
        :param pulumi.Input[int] ram: The amount of memory per instance in megabytes. Multiple of 1024
        :param pulumi.Input[int] shards: The total number of shards in the cluster.
        :param pulumi.Input[int] storage_size: The amount of storage per instance in megabytes. At least 5120, at most 2097152
        :param pulumi.Input[str] storage_type: The storage type. One of : HDD, SSD, SSD Standard, SSD Premium
        :param pulumi.Input[str] template_id: The unique ID of the template, which specifies the number of cores, storage size, and memory. You cannot downgrade to a
               smaller template or minor edition (e.g. from business to playground). To get a list of all templates to confirm the
               changes use the /templates endpoint.
        :param pulumi.Input[str] type: The cluster type, either `replicaset` or `sharded-cluster`
        """
        if backup is not None:
            pulumi.set(__self__, "backup", backup)
        if bi_connector is not None:
            pulumi.set(__self__, "bi_connector", bi_connector)
        if connection_string is not None:
            pulumi.set(__self__, "connection_string", connection_string)
        if connections is not None:
            pulumi.set(__self__, "connections", connections)
        if cores is not None:
            pulumi.set(__self__, "cores", cores)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if edition is not None:
            pulumi.set(__self__, "edition", edition)
        if instances is not None:
            pulumi.set(__self__, "instances", instances)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if maintenance_window is not None:
            pulumi.set(__self__, "maintenance_window", maintenance_window)
        if mongodb_version is not None:
            pulumi.set(__self__, "mongodb_version", mongodb_version)
        if ram is not None:
            pulumi.set(__self__, "ram", ram)
        if shards is not None:
            pulumi.set(__self__, "shards", shards)
        if storage_size is not None:
            pulumi.set(__self__, "storage_size", storage_size)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def backup(self) -> Optional[pulumi.Input['MongoClusterBackupArgs']]:
        """
        Backup related properties.
        """
        return pulumi.get(self, "backup")

    @backup.setter
    def backup(self, value: Optional[pulumi.Input['MongoClusterBackupArgs']]):
        pulumi.set(self, "backup", value)

    @property
    @pulumi.getter(name="biConnector")
    def bi_connector(self) -> Optional[pulumi.Input['MongoClusterBiConnectorArgs']]:
        """
        The MongoDB Connector for Business Intelligence allows you to query a MongoDB database using SQL commands to aid in data
        analysis.
        """
        return pulumi.get(self, "bi_connector")

    @bi_connector.setter
    def bi_connector(self, value: Optional[pulumi.Input['MongoClusterBiConnectorArgs']]):
        pulumi.set(self, "bi_connector", value)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> Optional[pulumi.Input[str]]:
        """
        The connection string for your cluster.
        """
        return pulumi.get(self, "connection_string")

    @connection_string.setter
    def connection_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_string", value)

    @property
    @pulumi.getter
    def connections(self) -> Optional[pulumi.Input['MongoClusterConnectionsArgs']]:
        """
        Details about the network connection for your cluster.
        """
        return pulumi.get(self, "connections")

    @connections.setter
    def connections(self, value: Optional[pulumi.Input['MongoClusterConnectionsArgs']]):
        pulumi.set(self, "connections", value)

    @property
    @pulumi.getter
    def cores(self) -> Optional[pulumi.Input[int]]:
        """
        The number of CPU cores per instance.
        """
        return pulumi.get(self, "cores")

    @cores.setter
    def cores(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cores", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of your cluster.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def edition(self) -> Optional[pulumi.Input[str]]:
        """
        The cluster edition. Must be one of: playground, business, enterprise
        """
        return pulumi.get(self, "edition")

    @edition.setter
    def edition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edition", value)

    @property
    @pulumi.getter
    def instances(self) -> Optional[pulumi.Input[int]]:
        """
        The total number of instances in the cluster (one master and n-1 standbys). Example: 1, 3, 5, 7. For enterprise edition
        at least 3.
        """
        return pulumi.get(self, "instances")

    @instances.setter
    def instances(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instances", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
        be modified after datacenter creation (disallowed in update requests). Available locations: de/txl, gb/lhr, es/vit.
        Update forces cluster re-creation.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional[pulumi.Input['MongoClusterMaintenanceWindowArgs']]:
        """
        A weekly 4 hour-long window, during which maintenance might occur
        """
        return pulumi.get(self, "maintenance_window")

    @maintenance_window.setter
    def maintenance_window(self, value: Optional[pulumi.Input['MongoClusterMaintenanceWindowArgs']]):
        pulumi.set(self, "maintenance_window", value)

    @property
    @pulumi.getter(name="mongodbVersion")
    def mongodb_version(self) -> Optional[pulumi.Input[str]]:
        """
        The MongoDB version of your cluster. Update forces cluster re-creation.
        """
        return pulumi.get(self, "mongodb_version")

    @mongodb_version.setter
    def mongodb_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mongodb_version", value)

    @property
    @pulumi.getter
    def ram(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of memory per instance in megabytes. Multiple of 1024
        """
        return pulumi.get(self, "ram")

    @ram.setter
    def ram(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ram", value)

    @property
    @pulumi.getter
    def shards(self) -> Optional[pulumi.Input[int]]:
        """
        The total number of shards in the cluster.
        """
        return pulumi.get(self, "shards")

    @shards.setter
    def shards(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "shards", value)

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of storage per instance in megabytes. At least 5120, at most 2097152
        """
        return pulumi.get(self, "storage_size")

    @storage_size.setter
    def storage_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_size", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[str]]:
        """
        The storage type. One of : HDD, SSD, SSD Standard, SSD Premium
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_type", value)

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID of the template, which specifies the number of cores, storage size, and memory. You cannot downgrade to a
        smaller template or minor edition (e.g. from business to playground). To get a list of all templates to confirm the
        changes use the /templates endpoint.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The cluster type, either `replicaset` or `sharded-cluster`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class MongoCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup: Optional[pulumi.Input[Union['MongoClusterBackupArgs', 'MongoClusterBackupArgsDict']]] = None,
                 bi_connector: Optional[pulumi.Input[Union['MongoClusterBiConnectorArgs', 'MongoClusterBiConnectorArgsDict']]] = None,
                 connections: Optional[pulumi.Input[Union['MongoClusterConnectionsArgs', 'MongoClusterConnectionsArgsDict']]] = None,
                 cores: Optional[pulumi.Input[int]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 edition: Optional[pulumi.Input[str]] = None,
                 instances: Optional[pulumi.Input[int]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input[Union['MongoClusterMaintenanceWindowArgs', 'MongoClusterMaintenanceWindowArgsDict']]] = None,
                 mongodb_version: Optional[pulumi.Input[str]] = None,
                 ram: Optional[pulumi.Input[int]] = None,
                 shards: Optional[pulumi.Input[int]] = None,
                 storage_size: Optional[pulumi.Input[int]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 template_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a MongoCluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['MongoClusterBackupArgs', 'MongoClusterBackupArgsDict']] backup: Backup related properties.
        :param pulumi.Input[Union['MongoClusterBiConnectorArgs', 'MongoClusterBiConnectorArgsDict']] bi_connector: The MongoDB Connector for Business Intelligence allows you to query a MongoDB database using SQL commands to aid in data
               analysis.
        :param pulumi.Input[Union['MongoClusterConnectionsArgs', 'MongoClusterConnectionsArgsDict']] connections: Details about the network connection for your cluster.
        :param pulumi.Input[int] cores: The number of CPU cores per instance.
        :param pulumi.Input[str] display_name: The name of your cluster.
        :param pulumi.Input[str] edition: The cluster edition. Must be one of: playground, business, enterprise
        :param pulumi.Input[int] instances: The total number of instances in the cluster (one master and n-1 standbys). Example: 1, 3, 5, 7. For enterprise edition
               at least 3.
        :param pulumi.Input[str] location: The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
               be modified after datacenter creation (disallowed in update requests). Available locations: de/txl, gb/lhr, es/vit.
               Update forces cluster re-creation.
        :param pulumi.Input[Union['MongoClusterMaintenanceWindowArgs', 'MongoClusterMaintenanceWindowArgsDict']] maintenance_window: A weekly 4 hour-long window, during which maintenance might occur
        :param pulumi.Input[str] mongodb_version: The MongoDB version of your cluster. Update forces cluster re-creation.
        :param pulumi.Input[int] ram: The amount of memory per instance in megabytes. Multiple of 1024
        :param pulumi.Input[int] shards: The total number of shards in the cluster.
        :param pulumi.Input[int] storage_size: The amount of storage per instance in megabytes. At least 5120, at most 2097152
        :param pulumi.Input[str] storage_type: The storage type. One of : HDD, SSD, SSD Standard, SSD Premium
        :param pulumi.Input[str] template_id: The unique ID of the template, which specifies the number of cores, storage size, and memory. You cannot downgrade to a
               smaller template or minor edition (e.g. from business to playground). To get a list of all templates to confirm the
               changes use the /templates endpoint.
        :param pulumi.Input[str] type: The cluster type, either `replicaset` or `sharded-cluster`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MongoClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a MongoCluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MongoClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MongoClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup: Optional[pulumi.Input[Union['MongoClusterBackupArgs', 'MongoClusterBackupArgsDict']]] = None,
                 bi_connector: Optional[pulumi.Input[Union['MongoClusterBiConnectorArgs', 'MongoClusterBiConnectorArgsDict']]] = None,
                 connections: Optional[pulumi.Input[Union['MongoClusterConnectionsArgs', 'MongoClusterConnectionsArgsDict']]] = None,
                 cores: Optional[pulumi.Input[int]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 edition: Optional[pulumi.Input[str]] = None,
                 instances: Optional[pulumi.Input[int]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input[Union['MongoClusterMaintenanceWindowArgs', 'MongoClusterMaintenanceWindowArgsDict']]] = None,
                 mongodb_version: Optional[pulumi.Input[str]] = None,
                 ram: Optional[pulumi.Input[int]] = None,
                 shards: Optional[pulumi.Input[int]] = None,
                 storage_size: Optional[pulumi.Input[int]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 template_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MongoClusterArgs.__new__(MongoClusterArgs)

            __props__.__dict__["backup"] = backup
            __props__.__dict__["bi_connector"] = bi_connector
            if connections is None and not opts.urn:
                raise TypeError("Missing required property 'connections'")
            __props__.__dict__["connections"] = connections
            __props__.__dict__["cores"] = cores
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["edition"] = edition
            if instances is None and not opts.urn:
                raise TypeError("Missing required property 'instances'")
            __props__.__dict__["instances"] = instances
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["maintenance_window"] = maintenance_window
            if mongodb_version is None and not opts.urn:
                raise TypeError("Missing required property 'mongodb_version'")
            __props__.__dict__["mongodb_version"] = mongodb_version
            __props__.__dict__["ram"] = ram
            __props__.__dict__["shards"] = shards
            __props__.__dict__["storage_size"] = storage_size
            __props__.__dict__["storage_type"] = storage_type
            __props__.__dict__["template_id"] = template_id
            __props__.__dict__["type"] = type
            __props__.__dict__["connection_string"] = None
        super(MongoCluster, __self__).__init__(
            'ionoscloud:dbaas/mongoCluster:MongoCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backup: Optional[pulumi.Input[Union['MongoClusterBackupArgs', 'MongoClusterBackupArgsDict']]] = None,
            bi_connector: Optional[pulumi.Input[Union['MongoClusterBiConnectorArgs', 'MongoClusterBiConnectorArgsDict']]] = None,
            connection_string: Optional[pulumi.Input[str]] = None,
            connections: Optional[pulumi.Input[Union['MongoClusterConnectionsArgs', 'MongoClusterConnectionsArgsDict']]] = None,
            cores: Optional[pulumi.Input[int]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            edition: Optional[pulumi.Input[str]] = None,
            instances: Optional[pulumi.Input[int]] = None,
            location: Optional[pulumi.Input[str]] = None,
            maintenance_window: Optional[pulumi.Input[Union['MongoClusterMaintenanceWindowArgs', 'MongoClusterMaintenanceWindowArgsDict']]] = None,
            mongodb_version: Optional[pulumi.Input[str]] = None,
            ram: Optional[pulumi.Input[int]] = None,
            shards: Optional[pulumi.Input[int]] = None,
            storage_size: Optional[pulumi.Input[int]] = None,
            storage_type: Optional[pulumi.Input[str]] = None,
            template_id: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'MongoCluster':
        """
        Get an existing MongoCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['MongoClusterBackupArgs', 'MongoClusterBackupArgsDict']] backup: Backup related properties.
        :param pulumi.Input[Union['MongoClusterBiConnectorArgs', 'MongoClusterBiConnectorArgsDict']] bi_connector: The MongoDB Connector for Business Intelligence allows you to query a MongoDB database using SQL commands to aid in data
               analysis.
        :param pulumi.Input[str] connection_string: The connection string for your cluster.
        :param pulumi.Input[Union['MongoClusterConnectionsArgs', 'MongoClusterConnectionsArgsDict']] connections: Details about the network connection for your cluster.
        :param pulumi.Input[int] cores: The number of CPU cores per instance.
        :param pulumi.Input[str] display_name: The name of your cluster.
        :param pulumi.Input[str] edition: The cluster edition. Must be one of: playground, business, enterprise
        :param pulumi.Input[int] instances: The total number of instances in the cluster (one master and n-1 standbys). Example: 1, 3, 5, 7. For enterprise edition
               at least 3.
        :param pulumi.Input[str] location: The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
               be modified after datacenter creation (disallowed in update requests). Available locations: de/txl, gb/lhr, es/vit.
               Update forces cluster re-creation.
        :param pulumi.Input[Union['MongoClusterMaintenanceWindowArgs', 'MongoClusterMaintenanceWindowArgsDict']] maintenance_window: A weekly 4 hour-long window, during which maintenance might occur
        :param pulumi.Input[str] mongodb_version: The MongoDB version of your cluster. Update forces cluster re-creation.
        :param pulumi.Input[int] ram: The amount of memory per instance in megabytes. Multiple of 1024
        :param pulumi.Input[int] shards: The total number of shards in the cluster.
        :param pulumi.Input[int] storage_size: The amount of storage per instance in megabytes. At least 5120, at most 2097152
        :param pulumi.Input[str] storage_type: The storage type. One of : HDD, SSD, SSD Standard, SSD Premium
        :param pulumi.Input[str] template_id: The unique ID of the template, which specifies the number of cores, storage size, and memory. You cannot downgrade to a
               smaller template or minor edition (e.g. from business to playground). To get a list of all templates to confirm the
               changes use the /templates endpoint.
        :param pulumi.Input[str] type: The cluster type, either `replicaset` or `sharded-cluster`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MongoClusterState.__new__(_MongoClusterState)

        __props__.__dict__["backup"] = backup
        __props__.__dict__["bi_connector"] = bi_connector
        __props__.__dict__["connection_string"] = connection_string
        __props__.__dict__["connections"] = connections
        __props__.__dict__["cores"] = cores
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["edition"] = edition
        __props__.__dict__["instances"] = instances
        __props__.__dict__["location"] = location
        __props__.__dict__["maintenance_window"] = maintenance_window
        __props__.__dict__["mongodb_version"] = mongodb_version
        __props__.__dict__["ram"] = ram
        __props__.__dict__["shards"] = shards
        __props__.__dict__["storage_size"] = storage_size
        __props__.__dict__["storage_type"] = storage_type
        __props__.__dict__["template_id"] = template_id
        __props__.__dict__["type"] = type
        return MongoCluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def backup(self) -> pulumi.Output[Optional['outputs.MongoClusterBackup']]:
        """
        Backup related properties.
        """
        return pulumi.get(self, "backup")

    @property
    @pulumi.getter(name="biConnector")
    def bi_connector(self) -> pulumi.Output['outputs.MongoClusterBiConnector']:
        """
        The MongoDB Connector for Business Intelligence allows you to query a MongoDB database using SQL commands to aid in data
        analysis.
        """
        return pulumi.get(self, "bi_connector")

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> pulumi.Output[str]:
        """
        The connection string for your cluster.
        """
        return pulumi.get(self, "connection_string")

    @property
    @pulumi.getter
    def connections(self) -> pulumi.Output['outputs.MongoClusterConnections']:
        """
        Details about the network connection for your cluster.
        """
        return pulumi.get(self, "connections")

    @property
    @pulumi.getter
    def cores(self) -> pulumi.Output[int]:
        """
        The number of CPU cores per instance.
        """
        return pulumi.get(self, "cores")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        The name of your cluster.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def edition(self) -> pulumi.Output[str]:
        """
        The cluster edition. Must be one of: playground, business, enterprise
        """
        return pulumi.get(self, "edition")

    @property
    @pulumi.getter
    def instances(self) -> pulumi.Output[int]:
        """
        The total number of instances in the cluster (one master and n-1 standbys). Example: 1, 3, 5, 7. For enterprise edition
        at least 3.
        """
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
        be modified after datacenter creation (disallowed in update requests). Available locations: de/txl, gb/lhr, es/vit.
        Update forces cluster re-creation.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> pulumi.Output['outputs.MongoClusterMaintenanceWindow']:
        """
        A weekly 4 hour-long window, during which maintenance might occur
        """
        return pulumi.get(self, "maintenance_window")

    @property
    @pulumi.getter(name="mongodbVersion")
    def mongodb_version(self) -> pulumi.Output[str]:
        """
        The MongoDB version of your cluster. Update forces cluster re-creation.
        """
        return pulumi.get(self, "mongodb_version")

    @property
    @pulumi.getter
    def ram(self) -> pulumi.Output[int]:
        """
        The amount of memory per instance in megabytes. Multiple of 1024
        """
        return pulumi.get(self, "ram")

    @property
    @pulumi.getter
    def shards(self) -> pulumi.Output[Optional[int]]:
        """
        The total number of shards in the cluster.
        """
        return pulumi.get(self, "shards")

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> pulumi.Output[int]:
        """
        The amount of storage per instance in megabytes. At least 5120, at most 2097152
        """
        return pulumi.get(self, "storage_size")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> pulumi.Output[str]:
        """
        The storage type. One of : HDD, SSD, SSD Standard, SSD Premium
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Output[Optional[str]]:
        """
        The unique ID of the template, which specifies the number of cores, storage size, and memory. You cannot downgrade to a
        smaller template or minor edition (e.g. from business to playground). To get a list of all templates to confirm the
        changes use the /templates endpoint.
        """
        return pulumi.get(self, "template_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The cluster type, either `replicaset` or `sharded-cluster`
        """
        return pulumi.get(self, "type")

