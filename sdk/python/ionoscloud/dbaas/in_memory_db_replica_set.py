# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InMemoryDBReplicaSetArgs', 'InMemoryDBReplicaSet']

@pulumi.input_type
class InMemoryDBReplicaSetArgs:
    def __init__(__self__, *,
                 connections: pulumi.Input['InMemoryDBReplicaSetConnectionsArgs'],
                 credentials: pulumi.Input['InMemoryDBReplicaSetCredentialsArgs'],
                 display_name: pulumi.Input[str],
                 eviction_policy: pulumi.Input[str],
                 location: pulumi.Input[str],
                 persistence_mode: pulumi.Input[str],
                 replicas: pulumi.Input[int],
                 resources: pulumi.Input['InMemoryDBReplicaSetResourcesArgs'],
                 version: pulumi.Input[str],
                 initial_snapshot_id: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input['InMemoryDBReplicaSetMaintenanceWindowArgs']] = None):
        """
        The set of arguments for constructing a InMemoryDBReplicaSet resource.
        :param pulumi.Input['InMemoryDBReplicaSetConnectionsArgs'] connections: The network connection for your replica set. Only one connection is allowed.
        :param pulumi.Input['InMemoryDBReplicaSetCredentialsArgs'] credentials: Credentials for the InMemoryDB replicaset.
        :param pulumi.Input[str] display_name: The human readable name of your replica set.
        :param pulumi.Input[str] eviction_policy: The eviction policy for the replica set.
        :param pulumi.Input[str] location: The replica set location
        :param pulumi.Input[str] persistence_mode: Specifies How and If data is persisted.
        :param pulumi.Input[int] replicas: The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the
               value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only
               standby for a failure of the active instance.
        :param pulumi.Input['InMemoryDBReplicaSetResourcesArgs'] resources: The resources of the individual replicas.
        :param pulumi.Input[str] version: The InMemoryDB version of your replica set.
        :param pulumi.Input[str] initial_snapshot_id: The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
        :param pulumi.Input['InMemoryDBReplicaSetMaintenanceWindowArgs'] maintenance_window: A weekly 4 hour-long window, during which maintenance might occur.
        """
        pulumi.set(__self__, "connections", connections)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "eviction_policy", eviction_policy)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "persistence_mode", persistence_mode)
        pulumi.set(__self__, "replicas", replicas)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "version", version)
        if initial_snapshot_id is not None:
            pulumi.set(__self__, "initial_snapshot_id", initial_snapshot_id)
        if maintenance_window is not None:
            pulumi.set(__self__, "maintenance_window", maintenance_window)

    @property
    @pulumi.getter
    def connections(self) -> pulumi.Input['InMemoryDBReplicaSetConnectionsArgs']:
        """
        The network connection for your replica set. Only one connection is allowed.
        """
        return pulumi.get(self, "connections")

    @connections.setter
    def connections(self, value: pulumi.Input['InMemoryDBReplicaSetConnectionsArgs']):
        pulumi.set(self, "connections", value)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input['InMemoryDBReplicaSetCredentialsArgs']:
        """
        Credentials for the InMemoryDB replicaset.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input['InMemoryDBReplicaSetCredentialsArgs']):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        The human readable name of your replica set.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="evictionPolicy")
    def eviction_policy(self) -> pulumi.Input[str]:
        """
        The eviction policy for the replica set.
        """
        return pulumi.get(self, "eviction_policy")

    @eviction_policy.setter
    def eviction_policy(self, value: pulumi.Input[str]):
        pulumi.set(self, "eviction_policy", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        The replica set location
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="persistenceMode")
    def persistence_mode(self) -> pulumi.Input[str]:
        """
        Specifies How and If data is persisted.
        """
        return pulumi.get(self, "persistence_mode")

    @persistence_mode.setter
    def persistence_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "persistence_mode", value)

    @property
    @pulumi.getter
    def replicas(self) -> pulumi.Input[int]:
        """
        The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the
        value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only
        standby for a failure of the active instance.
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: pulumi.Input[int]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Input['InMemoryDBReplicaSetResourcesArgs']:
        """
        The resources of the individual replicas.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: pulumi.Input['InMemoryDBReplicaSetResourcesArgs']):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        """
        The InMemoryDB version of your replica set.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="initialSnapshotId")
    def initial_snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
        """
        return pulumi.get(self, "initial_snapshot_id")

    @initial_snapshot_id.setter
    def initial_snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "initial_snapshot_id", value)

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional[pulumi.Input['InMemoryDBReplicaSetMaintenanceWindowArgs']]:
        """
        A weekly 4 hour-long window, during which maintenance might occur.
        """
        return pulumi.get(self, "maintenance_window")

    @maintenance_window.setter
    def maintenance_window(self, value: Optional[pulumi.Input['InMemoryDBReplicaSetMaintenanceWindowArgs']]):
        pulumi.set(self, "maintenance_window", value)


@pulumi.input_type
class _InMemoryDBReplicaSetState:
    def __init__(__self__, *,
                 connections: Optional[pulumi.Input['InMemoryDBReplicaSetConnectionsArgs']] = None,
                 credentials: Optional[pulumi.Input['InMemoryDBReplicaSetCredentialsArgs']] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 dns_name: Optional[pulumi.Input[str]] = None,
                 eviction_policy: Optional[pulumi.Input[str]] = None,
                 initial_snapshot_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input['InMemoryDBReplicaSetMaintenanceWindowArgs']] = None,
                 persistence_mode: Optional[pulumi.Input[str]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 resources: Optional[pulumi.Input['InMemoryDBReplicaSetResourcesArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering InMemoryDBReplicaSet resources.
        :param pulumi.Input['InMemoryDBReplicaSetConnectionsArgs'] connections: The network connection for your replica set. Only one connection is allowed.
        :param pulumi.Input['InMemoryDBReplicaSetCredentialsArgs'] credentials: Credentials for the InMemoryDB replicaset.
        :param pulumi.Input[str] display_name: The human readable name of your replica set.
        :param pulumi.Input[str] dns_name: The DNS name pointing to your replica set. Will be used to connect to the active/standalone instance.
        :param pulumi.Input[str] eviction_policy: The eviction policy for the replica set.
        :param pulumi.Input[str] initial_snapshot_id: The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
        :param pulumi.Input[str] location: The replica set location
        :param pulumi.Input['InMemoryDBReplicaSetMaintenanceWindowArgs'] maintenance_window: A weekly 4 hour-long window, during which maintenance might occur.
        :param pulumi.Input[str] persistence_mode: Specifies How and If data is persisted.
        :param pulumi.Input[int] replicas: The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the
               value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only
               standby for a failure of the active instance.
        :param pulumi.Input['InMemoryDBReplicaSetResourcesArgs'] resources: The resources of the individual replicas.
        :param pulumi.Input[str] version: The InMemoryDB version of your replica set.
        """
        if connections is not None:
            pulumi.set(__self__, "connections", connections)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if dns_name is not None:
            pulumi.set(__self__, "dns_name", dns_name)
        if eviction_policy is not None:
            pulumi.set(__self__, "eviction_policy", eviction_policy)
        if initial_snapshot_id is not None:
            pulumi.set(__self__, "initial_snapshot_id", initial_snapshot_id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if maintenance_window is not None:
            pulumi.set(__self__, "maintenance_window", maintenance_window)
        if persistence_mode is not None:
            pulumi.set(__self__, "persistence_mode", persistence_mode)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def connections(self) -> Optional[pulumi.Input['InMemoryDBReplicaSetConnectionsArgs']]:
        """
        The network connection for your replica set. Only one connection is allowed.
        """
        return pulumi.get(self, "connections")

    @connections.setter
    def connections(self, value: Optional[pulumi.Input['InMemoryDBReplicaSetConnectionsArgs']]):
        pulumi.set(self, "connections", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['InMemoryDBReplicaSetCredentialsArgs']]:
        """
        Credentials for the InMemoryDB replicaset.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['InMemoryDBReplicaSetCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The human readable name of your replica set.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> Optional[pulumi.Input[str]]:
        """
        The DNS name pointing to your replica set. Will be used to connect to the active/standalone instance.
        """
        return pulumi.get(self, "dns_name")

    @dns_name.setter
    def dns_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_name", value)

    @property
    @pulumi.getter(name="evictionPolicy")
    def eviction_policy(self) -> Optional[pulumi.Input[str]]:
        """
        The eviction policy for the replica set.
        """
        return pulumi.get(self, "eviction_policy")

    @eviction_policy.setter
    def eviction_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eviction_policy", value)

    @property
    @pulumi.getter(name="initialSnapshotId")
    def initial_snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
        """
        return pulumi.get(self, "initial_snapshot_id")

    @initial_snapshot_id.setter
    def initial_snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "initial_snapshot_id", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The replica set location
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional[pulumi.Input['InMemoryDBReplicaSetMaintenanceWindowArgs']]:
        """
        A weekly 4 hour-long window, during which maintenance might occur.
        """
        return pulumi.get(self, "maintenance_window")

    @maintenance_window.setter
    def maintenance_window(self, value: Optional[pulumi.Input['InMemoryDBReplicaSetMaintenanceWindowArgs']]):
        pulumi.set(self, "maintenance_window", value)

    @property
    @pulumi.getter(name="persistenceMode")
    def persistence_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies How and If data is persisted.
        """
        return pulumi.get(self, "persistence_mode")

    @persistence_mode.setter
    def persistence_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistence_mode", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        """
        The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the
        value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only
        standby for a failure of the active instance.
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['InMemoryDBReplicaSetResourcesArgs']]:
        """
        The resources of the individual replicas.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['InMemoryDBReplicaSetResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The InMemoryDB version of your replica set.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


class InMemoryDBReplicaSet(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connections: Optional[pulumi.Input[Union['InMemoryDBReplicaSetConnectionsArgs', 'InMemoryDBReplicaSetConnectionsArgsDict']]] = None,
                 credentials: Optional[pulumi.Input[Union['InMemoryDBReplicaSetCredentialsArgs', 'InMemoryDBReplicaSetCredentialsArgsDict']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 eviction_policy: Optional[pulumi.Input[str]] = None,
                 initial_snapshot_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input[Union['InMemoryDBReplicaSetMaintenanceWindowArgs', 'InMemoryDBReplicaSetMaintenanceWindowArgsDict']]] = None,
                 persistence_mode: Optional[pulumi.Input[str]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 resources: Optional[pulumi.Input[Union['InMemoryDBReplicaSetResourcesArgs', 'InMemoryDBReplicaSetResourcesArgsDict']]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a InMemoryDBReplicaSet resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['InMemoryDBReplicaSetConnectionsArgs', 'InMemoryDBReplicaSetConnectionsArgsDict']] connections: The network connection for your replica set. Only one connection is allowed.
        :param pulumi.Input[Union['InMemoryDBReplicaSetCredentialsArgs', 'InMemoryDBReplicaSetCredentialsArgsDict']] credentials: Credentials for the InMemoryDB replicaset.
        :param pulumi.Input[str] display_name: The human readable name of your replica set.
        :param pulumi.Input[str] eviction_policy: The eviction policy for the replica set.
        :param pulumi.Input[str] initial_snapshot_id: The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
        :param pulumi.Input[str] location: The replica set location
        :param pulumi.Input[Union['InMemoryDBReplicaSetMaintenanceWindowArgs', 'InMemoryDBReplicaSetMaintenanceWindowArgsDict']] maintenance_window: A weekly 4 hour-long window, during which maintenance might occur.
        :param pulumi.Input[str] persistence_mode: Specifies How and If data is persisted.
        :param pulumi.Input[int] replicas: The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the
               value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only
               standby for a failure of the active instance.
        :param pulumi.Input[Union['InMemoryDBReplicaSetResourcesArgs', 'InMemoryDBReplicaSetResourcesArgsDict']] resources: The resources of the individual replicas.
        :param pulumi.Input[str] version: The InMemoryDB version of your replica set.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InMemoryDBReplicaSetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a InMemoryDBReplicaSet resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param InMemoryDBReplicaSetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InMemoryDBReplicaSetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connections: Optional[pulumi.Input[Union['InMemoryDBReplicaSetConnectionsArgs', 'InMemoryDBReplicaSetConnectionsArgsDict']]] = None,
                 credentials: Optional[pulumi.Input[Union['InMemoryDBReplicaSetCredentialsArgs', 'InMemoryDBReplicaSetCredentialsArgsDict']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 eviction_policy: Optional[pulumi.Input[str]] = None,
                 initial_snapshot_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input[Union['InMemoryDBReplicaSetMaintenanceWindowArgs', 'InMemoryDBReplicaSetMaintenanceWindowArgsDict']]] = None,
                 persistence_mode: Optional[pulumi.Input[str]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 resources: Optional[pulumi.Input[Union['InMemoryDBReplicaSetResourcesArgs', 'InMemoryDBReplicaSetResourcesArgsDict']]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InMemoryDBReplicaSetArgs.__new__(InMemoryDBReplicaSetArgs)

            if connections is None and not opts.urn:
                raise TypeError("Missing required property 'connections'")
            __props__.__dict__["connections"] = connections
            if credentials is None and not opts.urn:
                raise TypeError("Missing required property 'credentials'")
            __props__.__dict__["credentials"] = credentials
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            if eviction_policy is None and not opts.urn:
                raise TypeError("Missing required property 'eviction_policy'")
            __props__.__dict__["eviction_policy"] = eviction_policy
            __props__.__dict__["initial_snapshot_id"] = initial_snapshot_id
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["maintenance_window"] = maintenance_window
            if persistence_mode is None and not opts.urn:
                raise TypeError("Missing required property 'persistence_mode'")
            __props__.__dict__["persistence_mode"] = persistence_mode
            if replicas is None and not opts.urn:
                raise TypeError("Missing required property 'replicas'")
            __props__.__dict__["replicas"] = replicas
            if resources is None and not opts.urn:
                raise TypeError("Missing required property 'resources'")
            __props__.__dict__["resources"] = resources
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
            __props__.__dict__["dns_name"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="ionoscloud:index/inmemorydbReplicaset:InmemorydbReplicaset")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(InMemoryDBReplicaSet, __self__).__init__(
            'ionoscloud:dbaas/inMemoryDBReplicaSet:InMemoryDBReplicaSet',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            connections: Optional[pulumi.Input[Union['InMemoryDBReplicaSetConnectionsArgs', 'InMemoryDBReplicaSetConnectionsArgsDict']]] = None,
            credentials: Optional[pulumi.Input[Union['InMemoryDBReplicaSetCredentialsArgs', 'InMemoryDBReplicaSetCredentialsArgsDict']]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            dns_name: Optional[pulumi.Input[str]] = None,
            eviction_policy: Optional[pulumi.Input[str]] = None,
            initial_snapshot_id: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[str]] = None,
            maintenance_window: Optional[pulumi.Input[Union['InMemoryDBReplicaSetMaintenanceWindowArgs', 'InMemoryDBReplicaSetMaintenanceWindowArgsDict']]] = None,
            persistence_mode: Optional[pulumi.Input[str]] = None,
            replicas: Optional[pulumi.Input[int]] = None,
            resources: Optional[pulumi.Input[Union['InMemoryDBReplicaSetResourcesArgs', 'InMemoryDBReplicaSetResourcesArgsDict']]] = None,
            version: Optional[pulumi.Input[str]] = None) -> 'InMemoryDBReplicaSet':
        """
        Get an existing InMemoryDBReplicaSet resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['InMemoryDBReplicaSetConnectionsArgs', 'InMemoryDBReplicaSetConnectionsArgsDict']] connections: The network connection for your replica set. Only one connection is allowed.
        :param pulumi.Input[Union['InMemoryDBReplicaSetCredentialsArgs', 'InMemoryDBReplicaSetCredentialsArgsDict']] credentials: Credentials for the InMemoryDB replicaset.
        :param pulumi.Input[str] display_name: The human readable name of your replica set.
        :param pulumi.Input[str] dns_name: The DNS name pointing to your replica set. Will be used to connect to the active/standalone instance.
        :param pulumi.Input[str] eviction_policy: The eviction policy for the replica set.
        :param pulumi.Input[str] initial_snapshot_id: The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
        :param pulumi.Input[str] location: The replica set location
        :param pulumi.Input[Union['InMemoryDBReplicaSetMaintenanceWindowArgs', 'InMemoryDBReplicaSetMaintenanceWindowArgsDict']] maintenance_window: A weekly 4 hour-long window, during which maintenance might occur.
        :param pulumi.Input[str] persistence_mode: Specifies How and If data is persisted.
        :param pulumi.Input[int] replicas: The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the
               value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only
               standby for a failure of the active instance.
        :param pulumi.Input[Union['InMemoryDBReplicaSetResourcesArgs', 'InMemoryDBReplicaSetResourcesArgsDict']] resources: The resources of the individual replicas.
        :param pulumi.Input[str] version: The InMemoryDB version of your replica set.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InMemoryDBReplicaSetState.__new__(_InMemoryDBReplicaSetState)

        __props__.__dict__["connections"] = connections
        __props__.__dict__["credentials"] = credentials
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["dns_name"] = dns_name
        __props__.__dict__["eviction_policy"] = eviction_policy
        __props__.__dict__["initial_snapshot_id"] = initial_snapshot_id
        __props__.__dict__["location"] = location
        __props__.__dict__["maintenance_window"] = maintenance_window
        __props__.__dict__["persistence_mode"] = persistence_mode
        __props__.__dict__["replicas"] = replicas
        __props__.__dict__["resources"] = resources
        __props__.__dict__["version"] = version
        return InMemoryDBReplicaSet(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def connections(self) -> pulumi.Output['outputs.InMemoryDBReplicaSetConnections']:
        """
        The network connection for your replica set. Only one connection is allowed.
        """
        return pulumi.get(self, "connections")

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Output['outputs.InMemoryDBReplicaSetCredentials']:
        """
        Credentials for the InMemoryDB replicaset.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        The human readable name of your replica set.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> pulumi.Output[str]:
        """
        The DNS name pointing to your replica set. Will be used to connect to the active/standalone instance.
        """
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter(name="evictionPolicy")
    def eviction_policy(self) -> pulumi.Output[str]:
        """
        The eviction policy for the replica set.
        """
        return pulumi.get(self, "eviction_policy")

    @property
    @pulumi.getter(name="initialSnapshotId")
    def initial_snapshot_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
        """
        return pulumi.get(self, "initial_snapshot_id")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The replica set location
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> pulumi.Output['outputs.InMemoryDBReplicaSetMaintenanceWindow']:
        """
        A weekly 4 hour-long window, during which maintenance might occur.
        """
        return pulumi.get(self, "maintenance_window")

    @property
    @pulumi.getter(name="persistenceMode")
    def persistence_mode(self) -> pulumi.Output[str]:
        """
        Specifies How and If data is persisted.
        """
        return pulumi.get(self, "persistence_mode")

    @property
    @pulumi.getter
    def replicas(self) -> pulumi.Output[int]:
        """
        The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the
        value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only
        standby for a failure of the active instance.
        """
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Output['outputs.InMemoryDBReplicaSetResources']:
        """
        The resources of the individual replicas.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        The InMemoryDB version of your replica set.
        """
        return pulumi.get(self, "version")

