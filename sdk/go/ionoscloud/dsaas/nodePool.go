// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dsaas

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/dsaas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleDatacenter, err := compute.NewDatacenter(ctx, "exampleDatacenter", &compute.DatacenterArgs{
//				Location:    pulumi.String("de/txl"),
//				Description: pulumi.String("Datacenter for testing Dataplatform Cluster"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleCluster, err := dsaas.NewCluster(ctx, "exampleCluster", &dsaas.ClusterArgs{
//				DatacenterId: exampleDatacenter.ID(),
//				MaintenanceWindows: dsaas.ClusterMaintenanceWindowArray{
//					&dsaas.ClusterMaintenanceWindowArgs{
//						DayOfTheWeek: pulumi.String("Sunday"),
//						Time:         pulumi.String("09:00:00"),
//					},
//				},
//				Version: pulumi.String("23.7"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dsaas.NewNodePool(ctx, "exampleNodePool", &dsaas.NodePoolArgs{
//				ClusterId:        exampleCluster.ID(),
//				NodeCount:        pulumi.Int(1),
//				CpuFamily:        pulumi.String("INTEL_SKYLAKE"),
//				CoresCount:       pulumi.Int(1),
//				RamSize:          pulumi.Int(2048),
//				AvailabilityZone: pulumi.String("AUTO"),
//				StorageType:      pulumi.String("HDD"),
//				StorageSize:      pulumi.Int(10),
//				MaintenanceWindows: dsaas.NodePoolMaintenanceWindowArray{
//					&dsaas.NodePoolMaintenanceWindowArgs{
//						DayOfTheWeek: pulumi.String("Monday"),
//						Time:         pulumi.String("09:00:00"),
//					},
//				},
//				Labels: pulumi.StringMap{
//					"foo":   pulumi.String("bar"),
//					"color": pulumi.String("green"),
//				},
//				Annotations: pulumi.StringMap{
//					"ann1": pulumi.String("value1"),
//					"ann2": pulumi.String("value2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// A Dataplatform Node Pool resource can be imported using its cluster's UUID as well as its own UUID, e.g.:
//
// ```sh
// $ pulumi import ionoscloud:dsaas/nodePool:NodePool mynodepool {dataplatform_cluster_uuid}/{dataplatform_nodepool_id}
// ```
type NodePool struct {
	pulumi.CustomResourceState

	// [map] Key-value pairs attached to node pool resource as [Kubernetes annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/).
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// [string] The availability zone of the virtual datacenter region where the node pool resources should be provisioned. Must be set with one of the values `AUTO`, `ZONE_1` or `ZONE_2`. The default value is `AUTO`.
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// [string] The UUID of an existing Dataplatform cluster.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// [int] The number of CPU cores per node. Must be set with a minimum value of 1. The default value is `4`.
	CoresCount pulumi.IntOutput `pulumi:"coresCount"`
	// [string] A valid CPU family name or `AUTO` if the platform shall choose the best fitting option. Available CPU architectures can be retrieved from the datacenter resource. The default value is `AUTO`.
	CpuFamily pulumi.StringOutput `pulumi:"cpuFamily"`
	// The UUID of the virtual data center (VDC) in which the nodepool is provisioned
	DatacenterId pulumi.StringOutput `pulumi:"datacenterId"`
	// [map] Key-value pairs attached to the node pool resource as [Kubernetes labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/).
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// [string] Starting time of a weekly 4 hour-long window, during which maintenance might occur in hh:mm:ss format
	MaintenanceWindows NodePoolMaintenanceWindowArrayOutput `pulumi:"maintenanceWindows"`
	// [string] The name of your node pool. Must be 63 characters or less and must be empty or begin and end with an alphanumeric character ([a-z0-9A-Z]). It can contain dashes (-), underscores (_), dots (.), and alphanumerics in-between.
	Name pulumi.StringOutput `pulumi:"name"`
	// [int] The number of nodes that make up the node pool. Must be set with a minimum value of 1.
	NodeCount pulumi.IntOutput `pulumi:"nodeCount"`
	// [int] The RAM size for one node in MB. Must be set in multiples of `1024`MB, with a minimum size is of `2048`MB. The default value is `4096`.
	RamSize pulumi.IntOutput `pulumi:"ramSize"`
	// [int] The size of the volume in GB. The size must be greater than `10`GB. The default value is `20`.
	StorageSize pulumi.IntOutput `pulumi:"storageSize"`
	// [int] The type of hardware for the volume. Must be set with one of the values `HDD` or `SSD`. The default value is `SSD`.
	StorageType pulumi.StringOutput `pulumi:"storageType"`
	// The version of the Data Platform.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewNodePool registers a new resource with the given unique name, arguments, and options.
func NewNodePool(ctx *pulumi.Context,
	name string, args *NodePoolArgs, opts ...pulumi.ResourceOption) (*NodePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.NodeCount == nil {
		return nil, errors.New("invalid value for required argument 'NodeCount'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NodePool
	err := ctx.RegisterResource("ionoscloud:dsaas/nodePool:NodePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNodePool gets an existing NodePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodePoolState, opts ...pulumi.ResourceOption) (*NodePool, error) {
	var resource NodePool
	err := ctx.ReadResource("ionoscloud:dsaas/nodePool:NodePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NodePool resources.
type nodePoolState struct {
	// [map] Key-value pairs attached to node pool resource as [Kubernetes annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/).
	Annotations map[string]string `pulumi:"annotations"`
	// [string] The availability zone of the virtual datacenter region where the node pool resources should be provisioned. Must be set with one of the values `AUTO`, `ZONE_1` or `ZONE_2`. The default value is `AUTO`.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// [string] The UUID of an existing Dataplatform cluster.
	ClusterId *string `pulumi:"clusterId"`
	// [int] The number of CPU cores per node. Must be set with a minimum value of 1. The default value is `4`.
	CoresCount *int `pulumi:"coresCount"`
	// [string] A valid CPU family name or `AUTO` if the platform shall choose the best fitting option. Available CPU architectures can be retrieved from the datacenter resource. The default value is `AUTO`.
	CpuFamily *string `pulumi:"cpuFamily"`
	// The UUID of the virtual data center (VDC) in which the nodepool is provisioned
	DatacenterId *string `pulumi:"datacenterId"`
	// [map] Key-value pairs attached to the node pool resource as [Kubernetes labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/).
	Labels map[string]string `pulumi:"labels"`
	// [string] Starting time of a weekly 4 hour-long window, during which maintenance might occur in hh:mm:ss format
	MaintenanceWindows []NodePoolMaintenanceWindow `pulumi:"maintenanceWindows"`
	// [string] The name of your node pool. Must be 63 characters or less and must be empty or begin and end with an alphanumeric character ([a-z0-9A-Z]). It can contain dashes (-), underscores (_), dots (.), and alphanumerics in-between.
	Name *string `pulumi:"name"`
	// [int] The number of nodes that make up the node pool. Must be set with a minimum value of 1.
	NodeCount *int `pulumi:"nodeCount"`
	// [int] The RAM size for one node in MB. Must be set in multiples of `1024`MB, with a minimum size is of `2048`MB. The default value is `4096`.
	RamSize *int `pulumi:"ramSize"`
	// [int] The size of the volume in GB. The size must be greater than `10`GB. The default value is `20`.
	StorageSize *int `pulumi:"storageSize"`
	// [int] The type of hardware for the volume. Must be set with one of the values `HDD` or `SSD`. The default value is `SSD`.
	StorageType *string `pulumi:"storageType"`
	// The version of the Data Platform.
	Version *string `pulumi:"version"`
}

type NodePoolState struct {
	// [map] Key-value pairs attached to node pool resource as [Kubernetes annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/).
	Annotations pulumi.StringMapInput
	// [string] The availability zone of the virtual datacenter region where the node pool resources should be provisioned. Must be set with one of the values `AUTO`, `ZONE_1` or `ZONE_2`. The default value is `AUTO`.
	AvailabilityZone pulumi.StringPtrInput
	// [string] The UUID of an existing Dataplatform cluster.
	ClusterId pulumi.StringPtrInput
	// [int] The number of CPU cores per node. Must be set with a minimum value of 1. The default value is `4`.
	CoresCount pulumi.IntPtrInput
	// [string] A valid CPU family name or `AUTO` if the platform shall choose the best fitting option. Available CPU architectures can be retrieved from the datacenter resource. The default value is `AUTO`.
	CpuFamily pulumi.StringPtrInput
	// The UUID of the virtual data center (VDC) in which the nodepool is provisioned
	DatacenterId pulumi.StringPtrInput
	// [map] Key-value pairs attached to the node pool resource as [Kubernetes labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/).
	Labels pulumi.StringMapInput
	// [string] Starting time of a weekly 4 hour-long window, during which maintenance might occur in hh:mm:ss format
	MaintenanceWindows NodePoolMaintenanceWindowArrayInput
	// [string] The name of your node pool. Must be 63 characters or less and must be empty or begin and end with an alphanumeric character ([a-z0-9A-Z]). It can contain dashes (-), underscores (_), dots (.), and alphanumerics in-between.
	Name pulumi.StringPtrInput
	// [int] The number of nodes that make up the node pool. Must be set with a minimum value of 1.
	NodeCount pulumi.IntPtrInput
	// [int] The RAM size for one node in MB. Must be set in multiples of `1024`MB, with a minimum size is of `2048`MB. The default value is `4096`.
	RamSize pulumi.IntPtrInput
	// [int] The size of the volume in GB. The size must be greater than `10`GB. The default value is `20`.
	StorageSize pulumi.IntPtrInput
	// [int] The type of hardware for the volume. Must be set with one of the values `HDD` or `SSD`. The default value is `SSD`.
	StorageType pulumi.StringPtrInput
	// The version of the Data Platform.
	Version pulumi.StringPtrInput
}

func (NodePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodePoolState)(nil)).Elem()
}

type nodePoolArgs struct {
	// [map] Key-value pairs attached to node pool resource as [Kubernetes annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/).
	Annotations map[string]string `pulumi:"annotations"`
	// [string] The availability zone of the virtual datacenter region where the node pool resources should be provisioned. Must be set with one of the values `AUTO`, `ZONE_1` or `ZONE_2`. The default value is `AUTO`.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// [string] The UUID of an existing Dataplatform cluster.
	ClusterId string `pulumi:"clusterId"`
	// [int] The number of CPU cores per node. Must be set with a minimum value of 1. The default value is `4`.
	CoresCount *int `pulumi:"coresCount"`
	// [string] A valid CPU family name or `AUTO` if the platform shall choose the best fitting option. Available CPU architectures can be retrieved from the datacenter resource. The default value is `AUTO`.
	CpuFamily *string `pulumi:"cpuFamily"`
	// [map] Key-value pairs attached to the node pool resource as [Kubernetes labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/).
	Labels map[string]string `pulumi:"labels"`
	// [string] Starting time of a weekly 4 hour-long window, during which maintenance might occur in hh:mm:ss format
	MaintenanceWindows []NodePoolMaintenanceWindow `pulumi:"maintenanceWindows"`
	// [string] The name of your node pool. Must be 63 characters or less and must be empty or begin and end with an alphanumeric character ([a-z0-9A-Z]). It can contain dashes (-), underscores (_), dots (.), and alphanumerics in-between.
	Name *string `pulumi:"name"`
	// [int] The number of nodes that make up the node pool. Must be set with a minimum value of 1.
	NodeCount int `pulumi:"nodeCount"`
	// [int] The RAM size for one node in MB. Must be set in multiples of `1024`MB, with a minimum size is of `2048`MB. The default value is `4096`.
	RamSize *int `pulumi:"ramSize"`
	// [int] The size of the volume in GB. The size must be greater than `10`GB. The default value is `20`.
	StorageSize *int `pulumi:"storageSize"`
	// [int] The type of hardware for the volume. Must be set with one of the values `HDD` or `SSD`. The default value is `SSD`.
	StorageType *string `pulumi:"storageType"`
}

// The set of arguments for constructing a NodePool resource.
type NodePoolArgs struct {
	// [map] Key-value pairs attached to node pool resource as [Kubernetes annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/).
	Annotations pulumi.StringMapInput
	// [string] The availability zone of the virtual datacenter region where the node pool resources should be provisioned. Must be set with one of the values `AUTO`, `ZONE_1` or `ZONE_2`. The default value is `AUTO`.
	AvailabilityZone pulumi.StringPtrInput
	// [string] The UUID of an existing Dataplatform cluster.
	ClusterId pulumi.StringInput
	// [int] The number of CPU cores per node. Must be set with a minimum value of 1. The default value is `4`.
	CoresCount pulumi.IntPtrInput
	// [string] A valid CPU family name or `AUTO` if the platform shall choose the best fitting option. Available CPU architectures can be retrieved from the datacenter resource. The default value is `AUTO`.
	CpuFamily pulumi.StringPtrInput
	// [map] Key-value pairs attached to the node pool resource as [Kubernetes labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/).
	Labels pulumi.StringMapInput
	// [string] Starting time of a weekly 4 hour-long window, during which maintenance might occur in hh:mm:ss format
	MaintenanceWindows NodePoolMaintenanceWindowArrayInput
	// [string] The name of your node pool. Must be 63 characters or less and must be empty or begin and end with an alphanumeric character ([a-z0-9A-Z]). It can contain dashes (-), underscores (_), dots (.), and alphanumerics in-between.
	Name pulumi.StringPtrInput
	// [int] The number of nodes that make up the node pool. Must be set with a minimum value of 1.
	NodeCount pulumi.IntInput
	// [int] The RAM size for one node in MB. Must be set in multiples of `1024`MB, with a minimum size is of `2048`MB. The default value is `4096`.
	RamSize pulumi.IntPtrInput
	// [int] The size of the volume in GB. The size must be greater than `10`GB. The default value is `20`.
	StorageSize pulumi.IntPtrInput
	// [int] The type of hardware for the volume. Must be set with one of the values `HDD` or `SSD`. The default value is `SSD`.
	StorageType pulumi.StringPtrInput
}

func (NodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodePoolArgs)(nil)).Elem()
}

type NodePoolInput interface {
	pulumi.Input

	ToNodePoolOutput() NodePoolOutput
	ToNodePoolOutputWithContext(ctx context.Context) NodePoolOutput
}

func (*NodePool) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePool)(nil)).Elem()
}

func (i *NodePool) ToNodePoolOutput() NodePoolOutput {
	return i.ToNodePoolOutputWithContext(context.Background())
}

func (i *NodePool) ToNodePoolOutputWithContext(ctx context.Context) NodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolOutput)
}

// NodePoolArrayInput is an input type that accepts NodePoolArray and NodePoolArrayOutput values.
// You can construct a concrete instance of `NodePoolArrayInput` via:
//
//	NodePoolArray{ NodePoolArgs{...} }
type NodePoolArrayInput interface {
	pulumi.Input

	ToNodePoolArrayOutput() NodePoolArrayOutput
	ToNodePoolArrayOutputWithContext(context.Context) NodePoolArrayOutput
}

type NodePoolArray []NodePoolInput

func (NodePoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodePool)(nil)).Elem()
}

func (i NodePoolArray) ToNodePoolArrayOutput() NodePoolArrayOutput {
	return i.ToNodePoolArrayOutputWithContext(context.Background())
}

func (i NodePoolArray) ToNodePoolArrayOutputWithContext(ctx context.Context) NodePoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolArrayOutput)
}

// NodePoolMapInput is an input type that accepts NodePoolMap and NodePoolMapOutput values.
// You can construct a concrete instance of `NodePoolMapInput` via:
//
//	NodePoolMap{ "key": NodePoolArgs{...} }
type NodePoolMapInput interface {
	pulumi.Input

	ToNodePoolMapOutput() NodePoolMapOutput
	ToNodePoolMapOutputWithContext(context.Context) NodePoolMapOutput
}

type NodePoolMap map[string]NodePoolInput

func (NodePoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodePool)(nil)).Elem()
}

func (i NodePoolMap) ToNodePoolMapOutput() NodePoolMapOutput {
	return i.ToNodePoolMapOutputWithContext(context.Background())
}

func (i NodePoolMap) ToNodePoolMapOutputWithContext(ctx context.Context) NodePoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolMapOutput)
}

type NodePoolOutput struct{ *pulumi.OutputState }

func (NodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePool)(nil)).Elem()
}

func (o NodePoolOutput) ToNodePoolOutput() NodePoolOutput {
	return o
}

func (o NodePoolOutput) ToNodePoolOutputWithContext(ctx context.Context) NodePoolOutput {
	return o
}

// [map] Key-value pairs attached to node pool resource as [Kubernetes annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/).
func (o NodePoolOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// [string] The availability zone of the virtual datacenter region where the node pool resources should be provisioned. Must be set with one of the values `AUTO`, `ZONE_1` or `ZONE_2`. The default value is `AUTO`.
func (o NodePoolOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// [string] The UUID of an existing Dataplatform cluster.
func (o NodePoolOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// [int] The number of CPU cores per node. Must be set with a minimum value of 1. The default value is `4`.
func (o NodePoolOutput) CoresCount() pulumi.IntOutput {
	return o.ApplyT(func(v *NodePool) pulumi.IntOutput { return v.CoresCount }).(pulumi.IntOutput)
}

// [string] A valid CPU family name or `AUTO` if the platform shall choose the best fitting option. Available CPU architectures can be retrieved from the datacenter resource. The default value is `AUTO`.
func (o NodePoolOutput) CpuFamily() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.CpuFamily }).(pulumi.StringOutput)
}

// The UUID of the virtual data center (VDC) in which the nodepool is provisioned
func (o NodePoolOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.DatacenterId }).(pulumi.StringOutput)
}

// [map] Key-value pairs attached to the node pool resource as [Kubernetes labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/).
func (o NodePoolOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// [string] Starting time of a weekly 4 hour-long window, during which maintenance might occur in hh:mm:ss format
func (o NodePoolOutput) MaintenanceWindows() NodePoolMaintenanceWindowArrayOutput {
	return o.ApplyT(func(v *NodePool) NodePoolMaintenanceWindowArrayOutput { return v.MaintenanceWindows }).(NodePoolMaintenanceWindowArrayOutput)
}

// [string] The name of your node pool. Must be 63 characters or less and must be empty or begin and end with an alphanumeric character ([a-z0-9A-Z]). It can contain dashes (-), underscores (_), dots (.), and alphanumerics in-between.
func (o NodePoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// [int] The number of nodes that make up the node pool. Must be set with a minimum value of 1.
func (o NodePoolOutput) NodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *NodePool) pulumi.IntOutput { return v.NodeCount }).(pulumi.IntOutput)
}

// [int] The RAM size for one node in MB. Must be set in multiples of `1024`MB, with a minimum size is of `2048`MB. The default value is `4096`.
func (o NodePoolOutput) RamSize() pulumi.IntOutput {
	return o.ApplyT(func(v *NodePool) pulumi.IntOutput { return v.RamSize }).(pulumi.IntOutput)
}

// [int] The size of the volume in GB. The size must be greater than `10`GB. The default value is `20`.
func (o NodePoolOutput) StorageSize() pulumi.IntOutput {
	return o.ApplyT(func(v *NodePool) pulumi.IntOutput { return v.StorageSize }).(pulumi.IntOutput)
}

// [int] The type of hardware for the volume. Must be set with one of the values `HDD` or `SSD`. The default value is `SSD`.
func (o NodePoolOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.StorageType }).(pulumi.StringOutput)
}

// The version of the Data Platform.
func (o NodePoolOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type NodePoolArrayOutput struct{ *pulumi.OutputState }

func (NodePoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodePool)(nil)).Elem()
}

func (o NodePoolArrayOutput) ToNodePoolArrayOutput() NodePoolArrayOutput {
	return o
}

func (o NodePoolArrayOutput) ToNodePoolArrayOutputWithContext(ctx context.Context) NodePoolArrayOutput {
	return o
}

func (o NodePoolArrayOutput) Index(i pulumi.IntInput) NodePoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NodePool {
		return vs[0].([]*NodePool)[vs[1].(int)]
	}).(NodePoolOutput)
}

type NodePoolMapOutput struct{ *pulumi.OutputState }

func (NodePoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodePool)(nil)).Elem()
}

func (o NodePoolMapOutput) ToNodePoolMapOutput() NodePoolMapOutput {
	return o
}

func (o NodePoolMapOutput) ToNodePoolMapOutputWithContext(ctx context.Context) NodePoolMapOutput {
	return o
}

func (o NodePoolMapOutput) MapIndex(k pulumi.StringInput) NodePoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NodePool {
		return vs[0].(map[string]*NodePool)[vs[1].(string)]
	}).(NodePoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolInput)(nil)).Elem(), &NodePool{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolArrayInput)(nil)).Elem(), NodePoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolMapInput)(nil)).Elem(), NodePoolMap{})
	pulumi.RegisterOutputType(NodePoolOutput{})
	pulumi.RegisterOutputType(NodePoolArrayOutput{})
	pulumi.RegisterOutputType(NodePoolMapOutput{})
}
