// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dsaas

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ClusterLan struct {
	// [bool] Indicates if the Kubernetes node pool LAN will reserve an IP using DHCP. The default value is 'true'.
	Dhcp *bool `pulumi:"dhcp"`
	// [string] The LAN ID of an existing LAN at the related data center.
	LanId string `pulumi:"lanId"`
	// [list] An array of additional LANs attached to worker nodes.
	Routes []ClusterLanRoute `pulumi:"routes"`
}

// ClusterLanInput is an input type that accepts ClusterLanArgs and ClusterLanOutput values.
// You can construct a concrete instance of `ClusterLanInput` via:
//
//	ClusterLanArgs{...}
type ClusterLanInput interface {
	pulumi.Input

	ToClusterLanOutput() ClusterLanOutput
	ToClusterLanOutputWithContext(context.Context) ClusterLanOutput
}

type ClusterLanArgs struct {
	// [bool] Indicates if the Kubernetes node pool LAN will reserve an IP using DHCP. The default value is 'true'.
	Dhcp pulumi.BoolPtrInput `pulumi:"dhcp"`
	// [string] The LAN ID of an existing LAN at the related data center.
	LanId pulumi.StringInput `pulumi:"lanId"`
	// [list] An array of additional LANs attached to worker nodes.
	Routes ClusterLanRouteArrayInput `pulumi:"routes"`
}

func (ClusterLanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLan)(nil)).Elem()
}

func (i ClusterLanArgs) ToClusterLanOutput() ClusterLanOutput {
	return i.ToClusterLanOutputWithContext(context.Background())
}

func (i ClusterLanArgs) ToClusterLanOutputWithContext(ctx context.Context) ClusterLanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLanOutput)
}

// ClusterLanArrayInput is an input type that accepts ClusterLanArray and ClusterLanArrayOutput values.
// You can construct a concrete instance of `ClusterLanArrayInput` via:
//
//	ClusterLanArray{ ClusterLanArgs{...} }
type ClusterLanArrayInput interface {
	pulumi.Input

	ToClusterLanArrayOutput() ClusterLanArrayOutput
	ToClusterLanArrayOutputWithContext(context.Context) ClusterLanArrayOutput
}

type ClusterLanArray []ClusterLanInput

func (ClusterLanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterLan)(nil)).Elem()
}

func (i ClusterLanArray) ToClusterLanArrayOutput() ClusterLanArrayOutput {
	return i.ToClusterLanArrayOutputWithContext(context.Background())
}

func (i ClusterLanArray) ToClusterLanArrayOutputWithContext(ctx context.Context) ClusterLanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLanArrayOutput)
}

type ClusterLanOutput struct{ *pulumi.OutputState }

func (ClusterLanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLan)(nil)).Elem()
}

func (o ClusterLanOutput) ToClusterLanOutput() ClusterLanOutput {
	return o
}

func (o ClusterLanOutput) ToClusterLanOutputWithContext(ctx context.Context) ClusterLanOutput {
	return o
}

// [bool] Indicates if the Kubernetes node pool LAN will reserve an IP using DHCP. The default value is 'true'.
func (o ClusterLanOutput) Dhcp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterLan) *bool { return v.Dhcp }).(pulumi.BoolPtrOutput)
}

// [string] The LAN ID of an existing LAN at the related data center.
func (o ClusterLanOutput) LanId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterLan) string { return v.LanId }).(pulumi.StringOutput)
}

// [list] An array of additional LANs attached to worker nodes.
func (o ClusterLanOutput) Routes() ClusterLanRouteArrayOutput {
	return o.ApplyT(func(v ClusterLan) []ClusterLanRoute { return v.Routes }).(ClusterLanRouteArrayOutput)
}

type ClusterLanArrayOutput struct{ *pulumi.OutputState }

func (ClusterLanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterLan)(nil)).Elem()
}

func (o ClusterLanArrayOutput) ToClusterLanArrayOutput() ClusterLanArrayOutput {
	return o
}

func (o ClusterLanArrayOutput) ToClusterLanArrayOutputWithContext(ctx context.Context) ClusterLanArrayOutput {
	return o
}

func (o ClusterLanArrayOutput) Index(i pulumi.IntInput) ClusterLanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterLan {
		return vs[0].([]ClusterLan)[vs[1].(int)]
	}).(ClusterLanOutput)
}

type ClusterLanRoute struct {
	// [string] IPv4 or IPv6 gateway IP for the route.
	Gateway string `pulumi:"gateway"`
	// [string] IPv4 or IPv6 CIDR to be routed via the interface.
	Network string `pulumi:"network"`
}

// ClusterLanRouteInput is an input type that accepts ClusterLanRouteArgs and ClusterLanRouteOutput values.
// You can construct a concrete instance of `ClusterLanRouteInput` via:
//
//	ClusterLanRouteArgs{...}
type ClusterLanRouteInput interface {
	pulumi.Input

	ToClusterLanRouteOutput() ClusterLanRouteOutput
	ToClusterLanRouteOutputWithContext(context.Context) ClusterLanRouteOutput
}

type ClusterLanRouteArgs struct {
	// [string] IPv4 or IPv6 gateway IP for the route.
	Gateway pulumi.StringInput `pulumi:"gateway"`
	// [string] IPv4 or IPv6 CIDR to be routed via the interface.
	Network pulumi.StringInput `pulumi:"network"`
}

func (ClusterLanRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLanRoute)(nil)).Elem()
}

func (i ClusterLanRouteArgs) ToClusterLanRouteOutput() ClusterLanRouteOutput {
	return i.ToClusterLanRouteOutputWithContext(context.Background())
}

func (i ClusterLanRouteArgs) ToClusterLanRouteOutputWithContext(ctx context.Context) ClusterLanRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLanRouteOutput)
}

// ClusterLanRouteArrayInput is an input type that accepts ClusterLanRouteArray and ClusterLanRouteArrayOutput values.
// You can construct a concrete instance of `ClusterLanRouteArrayInput` via:
//
//	ClusterLanRouteArray{ ClusterLanRouteArgs{...} }
type ClusterLanRouteArrayInput interface {
	pulumi.Input

	ToClusterLanRouteArrayOutput() ClusterLanRouteArrayOutput
	ToClusterLanRouteArrayOutputWithContext(context.Context) ClusterLanRouteArrayOutput
}

type ClusterLanRouteArray []ClusterLanRouteInput

func (ClusterLanRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterLanRoute)(nil)).Elem()
}

func (i ClusterLanRouteArray) ToClusterLanRouteArrayOutput() ClusterLanRouteArrayOutput {
	return i.ToClusterLanRouteArrayOutputWithContext(context.Background())
}

func (i ClusterLanRouteArray) ToClusterLanRouteArrayOutputWithContext(ctx context.Context) ClusterLanRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLanRouteArrayOutput)
}

type ClusterLanRouteOutput struct{ *pulumi.OutputState }

func (ClusterLanRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLanRoute)(nil)).Elem()
}

func (o ClusterLanRouteOutput) ToClusterLanRouteOutput() ClusterLanRouteOutput {
	return o
}

func (o ClusterLanRouteOutput) ToClusterLanRouteOutputWithContext(ctx context.Context) ClusterLanRouteOutput {
	return o
}

// [string] IPv4 or IPv6 gateway IP for the route.
func (o ClusterLanRouteOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterLanRoute) string { return v.Gateway }).(pulumi.StringOutput)
}

// [string] IPv4 or IPv6 CIDR to be routed via the interface.
func (o ClusterLanRouteOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterLanRoute) string { return v.Network }).(pulumi.StringOutput)
}

type ClusterLanRouteArrayOutput struct{ *pulumi.OutputState }

func (ClusterLanRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterLanRoute)(nil)).Elem()
}

func (o ClusterLanRouteArrayOutput) ToClusterLanRouteArrayOutput() ClusterLanRouteArrayOutput {
	return o
}

func (o ClusterLanRouteArrayOutput) ToClusterLanRouteArrayOutputWithContext(ctx context.Context) ClusterLanRouteArrayOutput {
	return o
}

func (o ClusterLanRouteArrayOutput) Index(i pulumi.IntInput) ClusterLanRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterLanRoute {
		return vs[0].([]ClusterLanRoute)[vs[1].(int)]
	}).(ClusterLanRouteOutput)
}

type ClusterMaintenanceWindow struct {
	// [string] Must be set with one the values `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday` or `Sunday`.
	DayOfTheWeek string `pulumi:"dayOfTheWeek"`
	// [string] Time at which the maintenance should start. Must conform to the 'HH:MM:SS' 24-hour format. This pattern matches the "HH:MM:SS 24-hour format with leading 0" format. For more information take a look at [this link](https://stackoverflow.com/questions/7536755/regular-expression-for-matching-hhmm-time-format).
	Time string `pulumi:"time"`
}

// ClusterMaintenanceWindowInput is an input type that accepts ClusterMaintenanceWindowArgs and ClusterMaintenanceWindowOutput values.
// You can construct a concrete instance of `ClusterMaintenanceWindowInput` via:
//
//	ClusterMaintenanceWindowArgs{...}
type ClusterMaintenanceWindowInput interface {
	pulumi.Input

	ToClusterMaintenanceWindowOutput() ClusterMaintenanceWindowOutput
	ToClusterMaintenanceWindowOutputWithContext(context.Context) ClusterMaintenanceWindowOutput
}

type ClusterMaintenanceWindowArgs struct {
	// [string] Must be set with one the values `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday` or `Sunday`.
	DayOfTheWeek pulumi.StringInput `pulumi:"dayOfTheWeek"`
	// [string] Time at which the maintenance should start. Must conform to the 'HH:MM:SS' 24-hour format. This pattern matches the "HH:MM:SS 24-hour format with leading 0" format. For more information take a look at [this link](https://stackoverflow.com/questions/7536755/regular-expression-for-matching-hhmm-time-format).
	Time pulumi.StringInput `pulumi:"time"`
}

func (ClusterMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMaintenanceWindow)(nil)).Elem()
}

func (i ClusterMaintenanceWindowArgs) ToClusterMaintenanceWindowOutput() ClusterMaintenanceWindowOutput {
	return i.ToClusterMaintenanceWindowOutputWithContext(context.Background())
}

func (i ClusterMaintenanceWindowArgs) ToClusterMaintenanceWindowOutputWithContext(ctx context.Context) ClusterMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMaintenanceWindowOutput)
}

// ClusterMaintenanceWindowArrayInput is an input type that accepts ClusterMaintenanceWindowArray and ClusterMaintenanceWindowArrayOutput values.
// You can construct a concrete instance of `ClusterMaintenanceWindowArrayInput` via:
//
//	ClusterMaintenanceWindowArray{ ClusterMaintenanceWindowArgs{...} }
type ClusterMaintenanceWindowArrayInput interface {
	pulumi.Input

	ToClusterMaintenanceWindowArrayOutput() ClusterMaintenanceWindowArrayOutput
	ToClusterMaintenanceWindowArrayOutputWithContext(context.Context) ClusterMaintenanceWindowArrayOutput
}

type ClusterMaintenanceWindowArray []ClusterMaintenanceWindowInput

func (ClusterMaintenanceWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterMaintenanceWindow)(nil)).Elem()
}

func (i ClusterMaintenanceWindowArray) ToClusterMaintenanceWindowArrayOutput() ClusterMaintenanceWindowArrayOutput {
	return i.ToClusterMaintenanceWindowArrayOutputWithContext(context.Background())
}

func (i ClusterMaintenanceWindowArray) ToClusterMaintenanceWindowArrayOutputWithContext(ctx context.Context) ClusterMaintenanceWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMaintenanceWindowArrayOutput)
}

type ClusterMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (ClusterMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMaintenanceWindow)(nil)).Elem()
}

func (o ClusterMaintenanceWindowOutput) ToClusterMaintenanceWindowOutput() ClusterMaintenanceWindowOutput {
	return o
}

func (o ClusterMaintenanceWindowOutput) ToClusterMaintenanceWindowOutputWithContext(ctx context.Context) ClusterMaintenanceWindowOutput {
	return o
}

// [string] Must be set with one the values `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday` or `Sunday`.
func (o ClusterMaintenanceWindowOutput) DayOfTheWeek() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterMaintenanceWindow) string { return v.DayOfTheWeek }).(pulumi.StringOutput)
}

// [string] Time at which the maintenance should start. Must conform to the 'HH:MM:SS' 24-hour format. This pattern matches the "HH:MM:SS 24-hour format with leading 0" format. For more information take a look at [this link](https://stackoverflow.com/questions/7536755/regular-expression-for-matching-hhmm-time-format).
func (o ClusterMaintenanceWindowOutput) Time() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterMaintenanceWindow) string { return v.Time }).(pulumi.StringOutput)
}

type ClusterMaintenanceWindowArrayOutput struct{ *pulumi.OutputState }

func (ClusterMaintenanceWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterMaintenanceWindow)(nil)).Elem()
}

func (o ClusterMaintenanceWindowArrayOutput) ToClusterMaintenanceWindowArrayOutput() ClusterMaintenanceWindowArrayOutput {
	return o
}

func (o ClusterMaintenanceWindowArrayOutput) ToClusterMaintenanceWindowArrayOutputWithContext(ctx context.Context) ClusterMaintenanceWindowArrayOutput {
	return o
}

func (o ClusterMaintenanceWindowArrayOutput) Index(i pulumi.IntInput) ClusterMaintenanceWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterMaintenanceWindow {
		return vs[0].([]ClusterMaintenanceWindow)[vs[1].(int)]
	}).(ClusterMaintenanceWindowOutput)
}

type NodePoolMaintenanceWindow struct {
	// [string] Must be set with one the values `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday` or `Sunday`.
	DayOfTheWeek string `pulumi:"dayOfTheWeek"`
	// [string] Time at which the maintenance should start. Must conform to the 'HH:MM:SS' 24-hour format. This pattern matches the "HH:MM:SS 24-hour format with leading 0" format. For more information take a look at [this link](https://stackoverflow.com/questions/7536755/regular-expression-for-matching-hhmm-time-format).
	Time string `pulumi:"time"`
}

// NodePoolMaintenanceWindowInput is an input type that accepts NodePoolMaintenanceWindowArgs and NodePoolMaintenanceWindowOutput values.
// You can construct a concrete instance of `NodePoolMaintenanceWindowInput` via:
//
//	NodePoolMaintenanceWindowArgs{...}
type NodePoolMaintenanceWindowInput interface {
	pulumi.Input

	ToNodePoolMaintenanceWindowOutput() NodePoolMaintenanceWindowOutput
	ToNodePoolMaintenanceWindowOutputWithContext(context.Context) NodePoolMaintenanceWindowOutput
}

type NodePoolMaintenanceWindowArgs struct {
	// [string] Must be set with one the values `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday` or `Sunday`.
	DayOfTheWeek pulumi.StringInput `pulumi:"dayOfTheWeek"`
	// [string] Time at which the maintenance should start. Must conform to the 'HH:MM:SS' 24-hour format. This pattern matches the "HH:MM:SS 24-hour format with leading 0" format. For more information take a look at [this link](https://stackoverflow.com/questions/7536755/regular-expression-for-matching-hhmm-time-format).
	Time pulumi.StringInput `pulumi:"time"`
}

func (NodePoolMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolMaintenanceWindow)(nil)).Elem()
}

func (i NodePoolMaintenanceWindowArgs) ToNodePoolMaintenanceWindowOutput() NodePoolMaintenanceWindowOutput {
	return i.ToNodePoolMaintenanceWindowOutputWithContext(context.Background())
}

func (i NodePoolMaintenanceWindowArgs) ToNodePoolMaintenanceWindowOutputWithContext(ctx context.Context) NodePoolMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolMaintenanceWindowOutput)
}

// NodePoolMaintenanceWindowArrayInput is an input type that accepts NodePoolMaintenanceWindowArray and NodePoolMaintenanceWindowArrayOutput values.
// You can construct a concrete instance of `NodePoolMaintenanceWindowArrayInput` via:
//
//	NodePoolMaintenanceWindowArray{ NodePoolMaintenanceWindowArgs{...} }
type NodePoolMaintenanceWindowArrayInput interface {
	pulumi.Input

	ToNodePoolMaintenanceWindowArrayOutput() NodePoolMaintenanceWindowArrayOutput
	ToNodePoolMaintenanceWindowArrayOutputWithContext(context.Context) NodePoolMaintenanceWindowArrayOutput
}

type NodePoolMaintenanceWindowArray []NodePoolMaintenanceWindowInput

func (NodePoolMaintenanceWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolMaintenanceWindow)(nil)).Elem()
}

func (i NodePoolMaintenanceWindowArray) ToNodePoolMaintenanceWindowArrayOutput() NodePoolMaintenanceWindowArrayOutput {
	return i.ToNodePoolMaintenanceWindowArrayOutputWithContext(context.Background())
}

func (i NodePoolMaintenanceWindowArray) ToNodePoolMaintenanceWindowArrayOutputWithContext(ctx context.Context) NodePoolMaintenanceWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolMaintenanceWindowArrayOutput)
}

type NodePoolMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (NodePoolMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolMaintenanceWindow)(nil)).Elem()
}

func (o NodePoolMaintenanceWindowOutput) ToNodePoolMaintenanceWindowOutput() NodePoolMaintenanceWindowOutput {
	return o
}

func (o NodePoolMaintenanceWindowOutput) ToNodePoolMaintenanceWindowOutputWithContext(ctx context.Context) NodePoolMaintenanceWindowOutput {
	return o
}

// [string] Must be set with one the values `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday` or `Sunday`.
func (o NodePoolMaintenanceWindowOutput) DayOfTheWeek() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolMaintenanceWindow) string { return v.DayOfTheWeek }).(pulumi.StringOutput)
}

// [string] Time at which the maintenance should start. Must conform to the 'HH:MM:SS' 24-hour format. This pattern matches the "HH:MM:SS 24-hour format with leading 0" format. For more information take a look at [this link](https://stackoverflow.com/questions/7536755/regular-expression-for-matching-hhmm-time-format).
func (o NodePoolMaintenanceWindowOutput) Time() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolMaintenanceWindow) string { return v.Time }).(pulumi.StringOutput)
}

type NodePoolMaintenanceWindowArrayOutput struct{ *pulumi.OutputState }

func (NodePoolMaintenanceWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolMaintenanceWindow)(nil)).Elem()
}

func (o NodePoolMaintenanceWindowArrayOutput) ToNodePoolMaintenanceWindowArrayOutput() NodePoolMaintenanceWindowArrayOutput {
	return o
}

func (o NodePoolMaintenanceWindowArrayOutput) ToNodePoolMaintenanceWindowArrayOutputWithContext(ctx context.Context) NodePoolMaintenanceWindowArrayOutput {
	return o
}

func (o NodePoolMaintenanceWindowArrayOutput) Index(i pulumi.IntInput) NodePoolMaintenanceWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodePoolMaintenanceWindow {
		return vs[0].([]NodePoolMaintenanceWindow)[vs[1].(int)]
	}).(NodePoolMaintenanceWindowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLanInput)(nil)).Elem(), ClusterLanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLanArrayInput)(nil)).Elem(), ClusterLanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLanRouteInput)(nil)).Elem(), ClusterLanRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLanRouteArrayInput)(nil)).Elem(), ClusterLanRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMaintenanceWindowInput)(nil)).Elem(), ClusterMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMaintenanceWindowArrayInput)(nil)).Elem(), ClusterMaintenanceWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolMaintenanceWindowInput)(nil)).Elem(), NodePoolMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolMaintenanceWindowArrayInput)(nil)).Elem(), NodePoolMaintenanceWindowArray{})
	pulumi.RegisterOutputType(ClusterLanOutput{})
	pulumi.RegisterOutputType(ClusterLanArrayOutput{})
	pulumi.RegisterOutputType(ClusterLanRouteOutput{})
	pulumi.RegisterOutputType(ClusterLanRouteArrayOutput{})
	pulumi.RegisterOutputType(ClusterMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(ClusterMaintenanceWindowArrayOutput{})
	pulumi.RegisterOutputType(NodePoolMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(NodePoolMaintenanceWindowArrayOutput{})
}
