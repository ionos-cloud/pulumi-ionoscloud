// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kafka

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a **Kafka Cluster** on IonosCloud.
//
// ## Example Usage
//
// This resource will create an operational Kafka Cluster. After this section completes, the provisioner can be called.
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/kafka"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Basic example
//			example, err := compute.NewDatacenter(ctx, "example", &compute.DatacenterArgs{
//				Name:     pulumi.String("example-kafka-datacenter"),
//				Location: pulumi.String("de/fra"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleLan, err := compute.NewLan(ctx, "example", &compute.LanArgs{
//				DatacenterId: example.ID(),
//				Public:       pulumi.Bool(false),
//				Name:         pulumi.String("example-kafka-lan"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = kafka.NewCluster(ctx, "example", &kafka.ClusterArgs{
//				Name:     pulumi.String("example-kafka-cluster"),
//				Location: pulumi.String("de/fra"),
//				Version:  pulumi.String("3.7.0"),
//				Size:     pulumi.String("S"),
//				Connections: &kafka.ClusterConnectionsArgs{
//					DatacenterId: example.ID(),
//					LanId:        exampleLan.ID(),
//					BrokerAddresses: pulumi.StringArray{
//						pulumi.String("192.168.1.101/24"),
//						pulumi.String("192.168.1.102/24"),
//						pulumi.String("192.168.1.103/24"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/kafka"
//	"github.com/pulumi/pulumi-random/sdk/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Complete example
//			example, err := compute.NewDatacenter(ctx, "example", &compute.DatacenterArgs{
//				Name:     pulumi.String("example-kafka-datacenter"),
//				Location: pulumi.String("de/fra"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleLan, err := compute.NewLan(ctx, "example", &compute.LanArgs{
//				DatacenterId: example.ID(),
//				Public:       pulumi.Bool(false),
//				Name:         pulumi.String("example-kafka-lan"),
//			})
//			if err != nil {
//				return err
//			}
//			password, err := random.NewPassword(ctx, "password", &random.PasswordArgs{
//				Length:  16,
//				Special: false,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewServer(ctx, "example", &compute.ServerArgs{
//				Name:             pulumi.String("example-kafka-server"),
//				DatacenterId:     example.ID(),
//				Cores:            pulumi.Int(1),
//				Ram:              int(2 * 1024),
//				AvailabilityZone: pulumi.String("AUTO"),
//				CpuFamily:        pulumi.String("INTEL_SKYLAKE"),
//				ImageName:        pulumi.String("ubuntu:latest"),
//				ImagePassword:    password.Result,
//				Volume: &compute.ServerVolumeArgs{
//					Name:     pulumi.String("example-kafka-volume"),
//					Size:     pulumi.Int(6),
//					DiskType: pulumi.String("SSD Standard"),
//				},
//				Nic: &compute.ServerNicArgs{
//					Lan:  exampleLan.ID(),
//					Name: pulumi.String("example-kafka-nic"),
//					Dhcp: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = kafka.NewCluster(ctx, "example", &kafka.ClusterArgs{
//				Name:     pulumi.String("example-kafka-cluster"),
//				Location: example.Location,
//				Version:  pulumi.String("3.7.0"),
//				Size:     pulumi.String("S"),
//				Connections: &kafka.ClusterConnectionsArgs{
//					DatacenterId:    example.ID(),
//					LanId:           exampleLan.ID(),
//					BrokerAddresses: pulumi.StringArray("kafka_cluster_broker_ips_cidr_list"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Kafka Cluster can be imported using the `location` and `kafka cluster id`:
//
// ```sh
// $ pulumi import ionoscloud:kafka/cluster:Cluster mycluster location:kafka cluster uuid
// ```
type Cluster struct {
	pulumi.CustomResourceState

	// [list] IP address and port of cluster brokers.
	//
	// > **⚠ NOTE:** `IONOS_API_URL_KAFKA` can be used to set a custom API URL for the kafka resource. `location` field needs to be empty, otherwise it will override the custom API URL. Setting `endpoint` or `IONOS_API_URL` does not have any effect.
	BrokerAddresses pulumi.StringArrayOutput `pulumi:"brokerAddresses"`
	// Connection information of the Kafka Cluster. Minimum items: 1, maximum items: 1.
	Connections ClusterConnectionsOutput `pulumi:"connections"`
	// [string] The location of the Kafka Cluster. Possible values: `de/fra`, `de/txl`. If this is not set and if no value is provided for the `IONOS_API_URL` env var, the default `location` will be: `de/fra`.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// [string] Name of the Kafka Cluster.
	Name pulumi.StringOutput `pulumi:"name"`
	// [string] Size of the Kafka Cluster. Possible values: `XS`, `S`
	Size pulumi.StringOutput `pulumi:"size"`
	// [string] Version of the Kafka Cluster. Possible values: `3.7.0`
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connections == nil {
		return nil, errors.New("invalid value for required argument 'Connections'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("ionoscloud:kafka/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("ionoscloud:kafka/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// [list] IP address and port of cluster brokers.
	//
	// > **⚠ NOTE:** `IONOS_API_URL_KAFKA` can be used to set a custom API URL for the kafka resource. `location` field needs to be empty, otherwise it will override the custom API URL. Setting `endpoint` or `IONOS_API_URL` does not have any effect.
	BrokerAddresses []string `pulumi:"brokerAddresses"`
	// Connection information of the Kafka Cluster. Minimum items: 1, maximum items: 1.
	Connections *ClusterConnections `pulumi:"connections"`
	// [string] The location of the Kafka Cluster. Possible values: `de/fra`, `de/txl`. If this is not set and if no value is provided for the `IONOS_API_URL` env var, the default `location` will be: `de/fra`.
	Location *string `pulumi:"location"`
	// [string] Name of the Kafka Cluster.
	Name *string `pulumi:"name"`
	// [string] Size of the Kafka Cluster. Possible values: `XS`, `S`
	Size *string `pulumi:"size"`
	// [string] Version of the Kafka Cluster. Possible values: `3.7.0`
	Version *string `pulumi:"version"`
}

type ClusterState struct {
	// [list] IP address and port of cluster brokers.
	//
	// > **⚠ NOTE:** `IONOS_API_URL_KAFKA` can be used to set a custom API URL for the kafka resource. `location` field needs to be empty, otherwise it will override the custom API URL. Setting `endpoint` or `IONOS_API_URL` does not have any effect.
	BrokerAddresses pulumi.StringArrayInput
	// Connection information of the Kafka Cluster. Minimum items: 1, maximum items: 1.
	Connections ClusterConnectionsPtrInput
	// [string] The location of the Kafka Cluster. Possible values: `de/fra`, `de/txl`. If this is not set and if no value is provided for the `IONOS_API_URL` env var, the default `location` will be: `de/fra`.
	Location pulumi.StringPtrInput
	// [string] Name of the Kafka Cluster.
	Name pulumi.StringPtrInput
	// [string] Size of the Kafka Cluster. Possible values: `XS`, `S`
	Size pulumi.StringPtrInput
	// [string] Version of the Kafka Cluster. Possible values: `3.7.0`
	Version pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// Connection information of the Kafka Cluster. Minimum items: 1, maximum items: 1.
	Connections ClusterConnections `pulumi:"connections"`
	// [string] The location of the Kafka Cluster. Possible values: `de/fra`, `de/txl`. If this is not set and if no value is provided for the `IONOS_API_URL` env var, the default `location` will be: `de/fra`.
	Location *string `pulumi:"location"`
	// [string] Name of the Kafka Cluster.
	Name *string `pulumi:"name"`
	// [string] Size of the Kafka Cluster. Possible values: `XS`, `S`
	Size string `pulumi:"size"`
	// [string] Version of the Kafka Cluster. Possible values: `3.7.0`
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// Connection information of the Kafka Cluster. Minimum items: 1, maximum items: 1.
	Connections ClusterConnectionsInput
	// [string] The location of the Kafka Cluster. Possible values: `de/fra`, `de/txl`. If this is not set and if no value is provided for the `IONOS_API_URL` env var, the default `location` will be: `de/fra`.
	Location pulumi.StringPtrInput
	// [string] Name of the Kafka Cluster.
	Name pulumi.StringPtrInput
	// [string] Size of the Kafka Cluster. Possible values: `XS`, `S`
	Size pulumi.StringInput
	// [string] Version of the Kafka Cluster. Possible values: `3.7.0`
	Version pulumi.StringInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// [list] IP address and port of cluster brokers.
//
// > **⚠ NOTE:** `IONOS_API_URL_KAFKA` can be used to set a custom API URL for the kafka resource. `location` field needs to be empty, otherwise it will override the custom API URL. Setting `endpoint` or `IONOS_API_URL` does not have any effect.
func (o ClusterOutput) BrokerAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.BrokerAddresses }).(pulumi.StringArrayOutput)
}

// Connection information of the Kafka Cluster. Minimum items: 1, maximum items: 1.
func (o ClusterOutput) Connections() ClusterConnectionsOutput {
	return o.ApplyT(func(v *Cluster) ClusterConnectionsOutput { return v.Connections }).(ClusterConnectionsOutput)
}

// [string] The location of the Kafka Cluster. Possible values: `de/fra`, `de/txl`. If this is not set and if no value is provided for the `IONOS_API_URL` env var, the default `location` will be: `de/fra`.
func (o ClusterOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// [string] Name of the Kafka Cluster.
func (o ClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// [string] Size of the Kafka Cluster. Possible values: `XS`, `S`
func (o ClusterOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Size }).(pulumi.StringOutput)
}

// [string] Version of the Kafka Cluster. Possible values: `3.7.0`
func (o ClusterOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
