// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kafka

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **Kafka Cluster data source** can be used to search for and return an existing Kafka Cluster.
// You can provide a string for the name parameter which will be compared with provisioned Kafka Clusters.
// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
// When this happens, please refine your search string so that it is specific enough to return only one result.
//
// ## Example Usage
//
// ### By ID
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/kafka"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kafka.LookupCluster(ctx, &kafka.LookupClusterArgs{
//				Id:       pulumi.StringRef("your_kafka_cluster_id"),
//				Location: "location_of_kafka_cluster",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### By Name
//
// Needs to have the resource be previously created, or a dependsOn clause to ensure that the resource is created before
// this data source is called.
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/kafka"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kafka.LookupCluster(ctx, &kafka.LookupClusterArgs{
//				Name:     pulumi.StringRef("kafka-cluster"),
//				Location: "location_of_kafka_cluster",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCluster(ctx *pulumi.Context, args *LookupClusterArgs, opts ...pulumi.InvokeOption) (*LookupClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupClusterResult
	err := ctx.Invoke("ionoscloud:kafka/getCluster:getCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCluster.
type LookupClusterArgs struct {
	// ID of an existing Kafka Cluster that you want to search for.
	Id *string `pulumi:"id"`
	// The location of the Kafka Cluster. Possible values: `de/fra`, `de/txl`
	Location string `pulumi:"location"`
	// Name of an existing Kafka Cluster that you want to search for.
	Name         *string `pulumi:"name"`
	PartialMatch *bool   `pulumi:"partialMatch"`
}

// A collection of values returned by getCluster.
type LookupClusterResult struct {
	// IP address and port of cluster brokers.
	BrokerAddresses []string `pulumi:"brokerAddresses"`
	// Connection information of the Kafka Cluster. Minimum items: 1, maximum items: 1.
	Connections []GetClusterConnection `pulumi:"connections"`
	// UUID of the Kafka Cluster.
	Id       string `pulumi:"id"`
	Location string `pulumi:"location"`
	// The name of the Kafka Cluster.
	Name         string `pulumi:"name"`
	PartialMatch *bool  `pulumi:"partialMatch"`
	// The size of the Kafka Cluster.
	Size string `pulumi:"size"`
	// The version of the Kafka Cluster.
	Version string `pulumi:"version"`
}

func LookupClusterOutput(ctx *pulumi.Context, args LookupClusterOutputArgs, opts ...pulumi.InvokeOption) LookupClusterResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupClusterResultOutput, error) {
			args := v.(LookupClusterArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ionoscloud:kafka/getCluster:getCluster", args, LookupClusterResultOutput{}, options).(LookupClusterResultOutput), nil
		}).(LookupClusterResultOutput)
}

// A collection of arguments for invoking getCluster.
type LookupClusterOutputArgs struct {
	// ID of an existing Kafka Cluster that you want to search for.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The location of the Kafka Cluster. Possible values: `de/fra`, `de/txl`
	Location pulumi.StringInput `pulumi:"location"`
	// Name of an existing Kafka Cluster that you want to search for.
	Name         pulumi.StringPtrInput `pulumi:"name"`
	PartialMatch pulumi.BoolPtrInput   `pulumi:"partialMatch"`
}

func (LookupClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterArgs)(nil)).Elem()
}

// A collection of values returned by getCluster.
type LookupClusterResultOutput struct{ *pulumi.OutputState }

func (LookupClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterResult)(nil)).Elem()
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutput() LookupClusterResultOutput {
	return o
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutputWithContext(ctx context.Context) LookupClusterResultOutput {
	return o
}

// IP address and port of cluster brokers.
func (o LookupClusterResultOutput) BrokerAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupClusterResult) []string { return v.BrokerAddresses }).(pulumi.StringArrayOutput)
}

// Connection information of the Kafka Cluster. Minimum items: 1, maximum items: 1.
func (o LookupClusterResultOutput) Connections() GetClusterConnectionArrayOutput {
	return o.ApplyT(func(v LookupClusterResult) []GetClusterConnection { return v.Connections }).(GetClusterConnectionArrayOutput)
}

// UUID of the Kafka Cluster.
func (o LookupClusterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupClusterResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the Kafka Cluster.
func (o LookupClusterResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupClusterResultOutput) PartialMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *bool { return v.PartialMatch }).(pulumi.BoolPtrOutput)
}

// The size of the Kafka Cluster.
func (o LookupClusterResultOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Size }).(pulumi.StringOutput)
}

// The version of the Kafka Cluster.
func (o LookupClusterResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupClusterResultOutput{})
}
