// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kafka

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **Kafka Cluster data source** can be used to search for and return an existing Kafka Cluster.
// You can provide a string for the name parameter which will be compared with provisioned Kafka Clusters.
// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
// When this happens, please refine your search string so that it is specific enough to return only one result.
//
// ## Example Usage
func LookupTopic(ctx *pulumi.Context, args *LookupTopicArgs, opts ...pulumi.InvokeOption) (*LookupTopicResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTopicResult
	err := ctx.Invoke("ionoscloud:kafka/getTopic:getTopic", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTopic.
type LookupTopicArgs struct {
	ClusterId string `pulumi:"clusterId"`
	// ID of an existing Kafka Cluster that you want to search for.
	Id *string `pulumi:"id"`
	// The location of the Kafka Cluster. Possible values: `de/fra`, `de/txl`
	Location string `pulumi:"location"`
	// Name of an existing Kafka Cluster that you want to search for.
	Name         *string `pulumi:"name"`
	PartialMatch *bool   `pulumi:"partialMatch"`
}

// A collection of values returned by getTopic.
type LookupTopicResult struct {
	ClusterId string `pulumi:"clusterId"`
	// UUID of the Kafka Cluster.
	Id       string `pulumi:"id"`
	Location string `pulumi:"location"`
	// The name of the Kafka Cluster.
	Name               string `pulumi:"name"`
	NumberOfPartitions int    `pulumi:"numberOfPartitions"`
	PartialMatch       *bool  `pulumi:"partialMatch"`
	ReplicationFactor  int    `pulumi:"replicationFactor"`
	RetentionTime      int    `pulumi:"retentionTime"`
	SegmentBytes       int    `pulumi:"segmentBytes"`
}

func LookupTopicOutput(ctx *pulumi.Context, args LookupTopicOutputArgs, opts ...pulumi.InvokeOption) LookupTopicResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTopicResultOutput, error) {
			args := v.(LookupTopicArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ionoscloud:kafka/getTopic:getTopic", args, LookupTopicResultOutput{}, options).(LookupTopicResultOutput), nil
		}).(LookupTopicResultOutput)
}

// A collection of arguments for invoking getTopic.
type LookupTopicOutputArgs struct {
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// ID of an existing Kafka Cluster that you want to search for.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The location of the Kafka Cluster. Possible values: `de/fra`, `de/txl`
	Location pulumi.StringInput `pulumi:"location"`
	// Name of an existing Kafka Cluster that you want to search for.
	Name         pulumi.StringPtrInput `pulumi:"name"`
	PartialMatch pulumi.BoolPtrInput   `pulumi:"partialMatch"`
}

func (LookupTopicOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTopicArgs)(nil)).Elem()
}

// A collection of values returned by getTopic.
type LookupTopicResultOutput struct{ *pulumi.OutputState }

func (LookupTopicResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTopicResult)(nil)).Elem()
}

func (o LookupTopicResultOutput) ToLookupTopicResultOutput() LookupTopicResultOutput {
	return o
}

func (o LookupTopicResultOutput) ToLookupTopicResultOutputWithContext(ctx context.Context) LookupTopicResultOutput {
	return o
}

func (o LookupTopicResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTopicResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

// UUID of the Kafka Cluster.
func (o LookupTopicResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTopicResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupTopicResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTopicResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the Kafka Cluster.
func (o LookupTopicResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTopicResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupTopicResultOutput) NumberOfPartitions() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTopicResult) int { return v.NumberOfPartitions }).(pulumi.IntOutput)
}

func (o LookupTopicResultOutput) PartialMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupTopicResult) *bool { return v.PartialMatch }).(pulumi.BoolPtrOutput)
}

func (o LookupTopicResultOutput) ReplicationFactor() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTopicResult) int { return v.ReplicationFactor }).(pulumi.IntOutput)
}

func (o LookupTopicResultOutput) RetentionTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTopicResult) int { return v.RetentionTime }).(pulumi.IntOutput)
}

func (o LookupTopicResultOutput) SegmentBytes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTopicResult) int { return v.SegmentBytes }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTopicResultOutput{})
}
