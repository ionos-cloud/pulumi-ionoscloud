// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **IP Failover data source** can be used to search for and return an existing IP Failover object.
// You need to provide the datacenterId and the id of the lan to get the ip failover object for the provided datacenter.
// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
func LookupIpfailover(ctx *pulumi.Context, args *LookupIpfailoverArgs, opts ...pulumi.InvokeOption) (*LookupIpfailoverResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIpfailoverResult
	err := ctx.Invoke("ionoscloud:index/getIpfailover:getIpfailover", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIpfailover.
type LookupIpfailoverArgs struct {
	// The ID of the datacenter containing the ip failover datasource
	DatacenterId string `pulumi:"datacenterId"`
	// The reserved IP address to be used in the IP failover group.
	Ip string `pulumi:"ip"`
	// The ID of a LAN.
	LanId string `pulumi:"lanId"`
}

// A collection of values returned by getIpfailover.
type LookupIpfailoverResult struct {
	// The ID of a Data Center.
	DatacenterId string `pulumi:"datacenterId"`
	Id           string `pulumi:"id"`
	// The reserved IP address to be used in the IP failover group.
	Ip string `pulumi:"ip"`
	// The ID of a LAN.
	LanId string `pulumi:"lanId"`
	// The ID of a NIC.
	Nicuuid string `pulumi:"nicuuid"`
}

func LookupIpfailoverOutput(ctx *pulumi.Context, args LookupIpfailoverOutputArgs, opts ...pulumi.InvokeOption) LookupIpfailoverResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupIpfailoverResult, error) {
			args := v.(LookupIpfailoverArgs)
			r, err := LookupIpfailover(ctx, &args, opts...)
			var s LookupIpfailoverResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupIpfailoverResultOutput)
}

// A collection of arguments for invoking getIpfailover.
type LookupIpfailoverOutputArgs struct {
	// The ID of the datacenter containing the ip failover datasource
	DatacenterId pulumi.StringInput `pulumi:"datacenterId"`
	// The reserved IP address to be used in the IP failover group.
	Ip pulumi.StringInput `pulumi:"ip"`
	// The ID of a LAN.
	LanId pulumi.StringInput `pulumi:"lanId"`
}

func (LookupIpfailoverOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIpfailoverArgs)(nil)).Elem()
}

// A collection of values returned by getIpfailover.
type LookupIpfailoverResultOutput struct{ *pulumi.OutputState }

func (LookupIpfailoverResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIpfailoverResult)(nil)).Elem()
}

func (o LookupIpfailoverResultOutput) ToLookupIpfailoverResultOutput() LookupIpfailoverResultOutput {
	return o
}

func (o LookupIpfailoverResultOutput) ToLookupIpfailoverResultOutputWithContext(ctx context.Context) LookupIpfailoverResultOutput {
	return o
}

// The ID of a Data Center.
func (o LookupIpfailoverResultOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpfailoverResult) string { return v.DatacenterId }).(pulumi.StringOutput)
}

func (o LookupIpfailoverResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpfailoverResult) string { return v.Id }).(pulumi.StringOutput)
}

// The reserved IP address to be used in the IP failover group.
func (o LookupIpfailoverResultOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpfailoverResult) string { return v.Ip }).(pulumi.StringOutput)
}

// The ID of a LAN.
func (o LookupIpfailoverResultOutput) LanId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpfailoverResult) string { return v.LanId }).(pulumi.StringOutput)
}

// The ID of a NIC.
func (o LookupIpfailoverResultOutput) Nicuuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpfailoverResult) string { return v.Nicuuid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIpfailoverResultOutput{})
}
