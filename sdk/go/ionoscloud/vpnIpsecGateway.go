// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An IPSec Gateway resource manages the creation, management, and deletion of VPN IPSec Gateways within the IONOS Cloud
// infrastructure. This resource facilitates the creation of VPN IPSec Gateways, enabling secure connections between your
// network resources.
//
// ## Usage example
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Basic example
//			testDatacenter, err := compute.NewDatacenter(ctx, "testDatacenter", &compute.DatacenterArgs{
//				Location: pulumi.String("de/fra"),
//			})
//			if err != nil {
//				return err
//			}
//			testLan, err := compute.NewLan(ctx, "testLan", &compute.LanArgs{
//				Public:       pulumi.Bool(false),
//				DatacenterId: testDatacenter.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			testIpblock, err := compute.NewIPBlock(ctx, "testIpblock", &compute.IPBlockArgs{
//				Location: pulumi.String("de/fra"),
//				Size:     pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ionoscloud.NewVpnIpsecGateway(ctx, "example", &ionoscloud.VpnIpsecGatewayArgs{
//				Location: pulumi.String("de/fra"),
//				GatewayIp: testIpblock.Ips.ApplyT(func(ips []string) (string, error) {
//					return ips[0], nil
//				}).(pulumi.StringOutput),
//				Version:     pulumi.String("IKEv2"),
//				Description: pulumi.String("This gateway connects site A to VDC X."),
//				Connections: ionoscloud.VpnIpsecGatewayConnectionArray{
//					&ionoscloud.VpnIpsecGatewayConnectionArgs{
//						DatacenterId: testDatacenter.ID(),
//						LanId:        testLan.ID(),
//						Ipv4Cidr:     pulumi.String("192.168.100.10/24"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The resource can be imported using the `location` and `gateway_id`, for example:
//
// ```sh
// $ pulumi import ionoscloud:index/vpnIpsecGateway:VpnIpsecGateway example {location}:{gateway_id}
// ```
type VpnIpsecGateway struct {
	pulumi.CustomResourceState

	// [list] The network connection for your gateway. **Note**: all connections must belong to the
	// same datacenter. Minimum items: 1. Maximum items: 10.
	Connections VpnIpsecGatewayConnectionArrayOutput `pulumi:"connections"`
	// [string] The human-readable description of the IPSec Gateway.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// [string] Public IP address to be assigned to the gateway. Note: This must be an IP address in
	// the same datacenter as the connections.
	GatewayIp pulumi.StringOutput `pulumi:"gatewayIp"`
	// [string] The location of the IPSec Gateway. Supported locations: de/fra, de/txl, es/vit,
	// gb/lhr, us/ewr, us/las, us/mci, fr/par
	Location pulumi.StringOutput `pulumi:"location"`
	// [string] The name of the IPSec Gateway.
	Name pulumi.StringOutput `pulumi:"name"`
	// [string] The IKE version that is permitted for the VPN tunnels. Default: `IKEv2`. Possible
	// values: `IKEv2`.
	Version pulumi.StringPtrOutput `pulumi:"version"`
}

// NewVpnIpsecGateway registers a new resource with the given unique name, arguments, and options.
func NewVpnIpsecGateway(ctx *pulumi.Context,
	name string, args *VpnIpsecGatewayArgs, opts ...pulumi.ResourceOption) (*VpnIpsecGateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connections == nil {
		return nil, errors.New("invalid value for required argument 'Connections'")
	}
	if args.GatewayIp == nil {
		return nil, errors.New("invalid value for required argument 'GatewayIp'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpnIpsecGateway
	err := ctx.RegisterResource("ionoscloud:index/vpnIpsecGateway:VpnIpsecGateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnIpsecGateway gets an existing VpnIpsecGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnIpsecGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnIpsecGatewayState, opts ...pulumi.ResourceOption) (*VpnIpsecGateway, error) {
	var resource VpnIpsecGateway
	err := ctx.ReadResource("ionoscloud:index/vpnIpsecGateway:VpnIpsecGateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnIpsecGateway resources.
type vpnIpsecGatewayState struct {
	// [list] The network connection for your gateway. **Note**: all connections must belong to the
	// same datacenter. Minimum items: 1. Maximum items: 10.
	Connections []VpnIpsecGatewayConnection `pulumi:"connections"`
	// [string] The human-readable description of the IPSec Gateway.
	Description *string `pulumi:"description"`
	// [string] Public IP address to be assigned to the gateway. Note: This must be an IP address in
	// the same datacenter as the connections.
	GatewayIp *string `pulumi:"gatewayIp"`
	// [string] The location of the IPSec Gateway. Supported locations: de/fra, de/txl, es/vit,
	// gb/lhr, us/ewr, us/las, us/mci, fr/par
	Location *string `pulumi:"location"`
	// [string] The name of the IPSec Gateway.
	Name *string `pulumi:"name"`
	// [string] The IKE version that is permitted for the VPN tunnels. Default: `IKEv2`. Possible
	// values: `IKEv2`.
	Version *string `pulumi:"version"`
}

type VpnIpsecGatewayState struct {
	// [list] The network connection for your gateway. **Note**: all connections must belong to the
	// same datacenter. Minimum items: 1. Maximum items: 10.
	Connections VpnIpsecGatewayConnectionArrayInput
	// [string] The human-readable description of the IPSec Gateway.
	Description pulumi.StringPtrInput
	// [string] Public IP address to be assigned to the gateway. Note: This must be an IP address in
	// the same datacenter as the connections.
	GatewayIp pulumi.StringPtrInput
	// [string] The location of the IPSec Gateway. Supported locations: de/fra, de/txl, es/vit,
	// gb/lhr, us/ewr, us/las, us/mci, fr/par
	Location pulumi.StringPtrInput
	// [string] The name of the IPSec Gateway.
	Name pulumi.StringPtrInput
	// [string] The IKE version that is permitted for the VPN tunnels. Default: `IKEv2`. Possible
	// values: `IKEv2`.
	Version pulumi.StringPtrInput
}

func (VpnIpsecGatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnIpsecGatewayState)(nil)).Elem()
}

type vpnIpsecGatewayArgs struct {
	// [list] The network connection for your gateway. **Note**: all connections must belong to the
	// same datacenter. Minimum items: 1. Maximum items: 10.
	Connections []VpnIpsecGatewayConnection `pulumi:"connections"`
	// [string] The human-readable description of the IPSec Gateway.
	Description *string `pulumi:"description"`
	// [string] Public IP address to be assigned to the gateway. Note: This must be an IP address in
	// the same datacenter as the connections.
	GatewayIp string `pulumi:"gatewayIp"`
	// [string] The location of the IPSec Gateway. Supported locations: de/fra, de/txl, es/vit,
	// gb/lhr, us/ewr, us/las, us/mci, fr/par
	Location string `pulumi:"location"`
	// [string] The name of the IPSec Gateway.
	Name *string `pulumi:"name"`
	// [string] The IKE version that is permitted for the VPN tunnels. Default: `IKEv2`. Possible
	// values: `IKEv2`.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a VpnIpsecGateway resource.
type VpnIpsecGatewayArgs struct {
	// [list] The network connection for your gateway. **Note**: all connections must belong to the
	// same datacenter. Minimum items: 1. Maximum items: 10.
	Connections VpnIpsecGatewayConnectionArrayInput
	// [string] The human-readable description of the IPSec Gateway.
	Description pulumi.StringPtrInput
	// [string] Public IP address to be assigned to the gateway. Note: This must be an IP address in
	// the same datacenter as the connections.
	GatewayIp pulumi.StringInput
	// [string] The location of the IPSec Gateway. Supported locations: de/fra, de/txl, es/vit,
	// gb/lhr, us/ewr, us/las, us/mci, fr/par
	Location pulumi.StringInput
	// [string] The name of the IPSec Gateway.
	Name pulumi.StringPtrInput
	// [string] The IKE version that is permitted for the VPN tunnels. Default: `IKEv2`. Possible
	// values: `IKEv2`.
	Version pulumi.StringPtrInput
}

func (VpnIpsecGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnIpsecGatewayArgs)(nil)).Elem()
}

type VpnIpsecGatewayInput interface {
	pulumi.Input

	ToVpnIpsecGatewayOutput() VpnIpsecGatewayOutput
	ToVpnIpsecGatewayOutputWithContext(ctx context.Context) VpnIpsecGatewayOutput
}

func (*VpnIpsecGateway) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnIpsecGateway)(nil)).Elem()
}

func (i *VpnIpsecGateway) ToVpnIpsecGatewayOutput() VpnIpsecGatewayOutput {
	return i.ToVpnIpsecGatewayOutputWithContext(context.Background())
}

func (i *VpnIpsecGateway) ToVpnIpsecGatewayOutputWithContext(ctx context.Context) VpnIpsecGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnIpsecGatewayOutput)
}

// VpnIpsecGatewayArrayInput is an input type that accepts VpnIpsecGatewayArray and VpnIpsecGatewayArrayOutput values.
// You can construct a concrete instance of `VpnIpsecGatewayArrayInput` via:
//
//	VpnIpsecGatewayArray{ VpnIpsecGatewayArgs{...} }
type VpnIpsecGatewayArrayInput interface {
	pulumi.Input

	ToVpnIpsecGatewayArrayOutput() VpnIpsecGatewayArrayOutput
	ToVpnIpsecGatewayArrayOutputWithContext(context.Context) VpnIpsecGatewayArrayOutput
}

type VpnIpsecGatewayArray []VpnIpsecGatewayInput

func (VpnIpsecGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnIpsecGateway)(nil)).Elem()
}

func (i VpnIpsecGatewayArray) ToVpnIpsecGatewayArrayOutput() VpnIpsecGatewayArrayOutput {
	return i.ToVpnIpsecGatewayArrayOutputWithContext(context.Background())
}

func (i VpnIpsecGatewayArray) ToVpnIpsecGatewayArrayOutputWithContext(ctx context.Context) VpnIpsecGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnIpsecGatewayArrayOutput)
}

// VpnIpsecGatewayMapInput is an input type that accepts VpnIpsecGatewayMap and VpnIpsecGatewayMapOutput values.
// You can construct a concrete instance of `VpnIpsecGatewayMapInput` via:
//
//	VpnIpsecGatewayMap{ "key": VpnIpsecGatewayArgs{...} }
type VpnIpsecGatewayMapInput interface {
	pulumi.Input

	ToVpnIpsecGatewayMapOutput() VpnIpsecGatewayMapOutput
	ToVpnIpsecGatewayMapOutputWithContext(context.Context) VpnIpsecGatewayMapOutput
}

type VpnIpsecGatewayMap map[string]VpnIpsecGatewayInput

func (VpnIpsecGatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnIpsecGateway)(nil)).Elem()
}

func (i VpnIpsecGatewayMap) ToVpnIpsecGatewayMapOutput() VpnIpsecGatewayMapOutput {
	return i.ToVpnIpsecGatewayMapOutputWithContext(context.Background())
}

func (i VpnIpsecGatewayMap) ToVpnIpsecGatewayMapOutputWithContext(ctx context.Context) VpnIpsecGatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnIpsecGatewayMapOutput)
}

type VpnIpsecGatewayOutput struct{ *pulumi.OutputState }

func (VpnIpsecGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnIpsecGateway)(nil)).Elem()
}

func (o VpnIpsecGatewayOutput) ToVpnIpsecGatewayOutput() VpnIpsecGatewayOutput {
	return o
}

func (o VpnIpsecGatewayOutput) ToVpnIpsecGatewayOutputWithContext(ctx context.Context) VpnIpsecGatewayOutput {
	return o
}

// [list] The network connection for your gateway. **Note**: all connections must belong to the
// same datacenter. Minimum items: 1. Maximum items: 10.
func (o VpnIpsecGatewayOutput) Connections() VpnIpsecGatewayConnectionArrayOutput {
	return o.ApplyT(func(v *VpnIpsecGateway) VpnIpsecGatewayConnectionArrayOutput { return v.Connections }).(VpnIpsecGatewayConnectionArrayOutput)
}

// [string] The human-readable description of the IPSec Gateway.
func (o VpnIpsecGatewayOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnIpsecGateway) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// [string] Public IP address to be assigned to the gateway. Note: This must be an IP address in
// the same datacenter as the connections.
func (o VpnIpsecGatewayOutput) GatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecGateway) pulumi.StringOutput { return v.GatewayIp }).(pulumi.StringOutput)
}

// [string] The location of the IPSec Gateway. Supported locations: de/fra, de/txl, es/vit,
// gb/lhr, us/ewr, us/las, us/mci, fr/par
func (o VpnIpsecGatewayOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecGateway) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// [string] The name of the IPSec Gateway.
func (o VpnIpsecGatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnIpsecGateway) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// [string] The IKE version that is permitted for the VPN tunnels. Default: `IKEv2`. Possible
// values: `IKEv2`.
func (o VpnIpsecGatewayOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnIpsecGateway) pulumi.StringPtrOutput { return v.Version }).(pulumi.StringPtrOutput)
}

type VpnIpsecGatewayArrayOutput struct{ *pulumi.OutputState }

func (VpnIpsecGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnIpsecGateway)(nil)).Elem()
}

func (o VpnIpsecGatewayArrayOutput) ToVpnIpsecGatewayArrayOutput() VpnIpsecGatewayArrayOutput {
	return o
}

func (o VpnIpsecGatewayArrayOutput) ToVpnIpsecGatewayArrayOutputWithContext(ctx context.Context) VpnIpsecGatewayArrayOutput {
	return o
}

func (o VpnIpsecGatewayArrayOutput) Index(i pulumi.IntInput) VpnIpsecGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpnIpsecGateway {
		return vs[0].([]*VpnIpsecGateway)[vs[1].(int)]
	}).(VpnIpsecGatewayOutput)
}

type VpnIpsecGatewayMapOutput struct{ *pulumi.OutputState }

func (VpnIpsecGatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnIpsecGateway)(nil)).Elem()
}

func (o VpnIpsecGatewayMapOutput) ToVpnIpsecGatewayMapOutput() VpnIpsecGatewayMapOutput {
	return o
}

func (o VpnIpsecGatewayMapOutput) ToVpnIpsecGatewayMapOutputWithContext(ctx context.Context) VpnIpsecGatewayMapOutput {
	return o
}

func (o VpnIpsecGatewayMapOutput) MapIndex(k pulumi.StringInput) VpnIpsecGatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpnIpsecGateway {
		return vs[0].(map[string]*VpnIpsecGateway)[vs[1].(string)]
	}).(VpnIpsecGatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpnIpsecGatewayInput)(nil)).Elem(), &VpnIpsecGateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnIpsecGatewayArrayInput)(nil)).Elem(), VpnIpsecGatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnIpsecGatewayMapInput)(nil)).Elem(), VpnIpsecGatewayMap{})
	pulumi.RegisterOutputType(VpnIpsecGatewayOutput{})
	pulumi.RegisterOutputType(VpnIpsecGatewayArrayOutput{})
	pulumi.RegisterOutputType(VpnIpsecGatewayMapOutput{})
}
