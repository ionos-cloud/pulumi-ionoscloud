// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages **IP Failover** groups on IonosCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleDatacenter, err := compute.NewDatacenter(ctx, "exampleDatacenter", &compute.DatacenterArgs{
//				Location:          pulumi.String("us/las"),
//				Description:       pulumi.String("Datacenter Description"),
//				SecAuthProtection: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			exampleIPBlock, err := compute.NewIPBlock(ctx, "exampleIPBlock", &compute.IPBlockArgs{
//				Location: pulumi.String("us/las"),
//				Size:     pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			exampleLan, err := compute.NewLan(ctx, "exampleLan", &compute.LanArgs{
//				DatacenterId: exampleDatacenter.ID(),
//				Public:       pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			serverImagePassword, err := random.NewRandomPassword(ctx, "serverImagePassword", &random.RandomPasswordArgs{
//				Length:  pulumi.Int(16),
//				Special: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			exampleServer, err := compute.NewServer(ctx, "exampleServer", &compute.ServerArgs{
//				DatacenterId:     exampleDatacenter.ID(),
//				Cores:            pulumi.Int(1),
//				Ram:              pulumi.Int(1024),
//				AvailabilityZone: pulumi.String("ZONE_1"),
//				CpuFamily:        pulumi.String("INTEL_XEON"),
//				ImageName:        pulumi.String("Ubuntu-20.04"),
//				ImagePassword:    serverImagePassword.Result,
//				Volume: &compute.ServerVolumeArgs{
//					Name:     pulumi.String("system"),
//					Size:     pulumi.Int(14),
//					DiskType: pulumi.String("SSD"),
//				},
//				Nic: &compute.ServerNicArgs{
//					Lan:            pulumi.Int(1),
//					Dhcp:           pulumi.Bool(true),
//					FirewallActive: pulumi.Bool(true),
//					Ips: pulumi.StringArray{
//						exampleIPBlock.Ips.ApplyT(func(ips []string) (string, error) {
//							return ips[0], nil
//						}).(pulumi.StringOutput),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ionoscloud.NewIpfailover(ctx, "exampleIpfailover", &ionoscloud.IpfailoverArgs{
//				DatacenterId: exampleDatacenter.ID(),
//				LanId:        exampleLan.ID(),
//				Ip: exampleIPBlock.Ips.ApplyT(func(ips []string) (string, error) {
//					return ips[0], nil
//				}).(pulumi.StringOutput),
//				Nicuuid: exampleServer.PrimaryNic,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				exampleLan,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## A note on multiple NICs on an IP Failover
//
// If you want to add a secondary NIC to an IP Failover, follow these steps:
// 1) Creating NIC A with failover IP on LAN 1
// 2) Create NIC B unde the same LAN but with a different IP
// 3) Create the IP Failover on LAN 1 with NIC A and failover IP of NIC A (A becomes now "master", no slaves)
// 4) Update NIC B IP to be the failover IP ( B becomes now a slave, A remains master)
//
// After this you can create a new NIC C, NIC D and so on, in LAN 1, directly with the failover IP.
//
// Please check examples for a full example with the above steps.
//
// ## Import
//
// Resource IpFailover can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import ionoscloud:index/ipfailover:Ipfailover myipfailover {datacenter uuid}/{lan uuid}
// ```
type Ipfailover struct {
	pulumi.CustomResourceState

	// [string] The ID of a Virtual Data Center.
	DatacenterId pulumi.StringOutput `pulumi:"datacenterId"`
	// [string] The reserved IP address to be used in the IP failover group.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// [string] The ID of a LAN.
	LanId pulumi.StringOutput `pulumi:"lanId"`
	// The UUID of the master NIC
	Nicuuid pulumi.StringOutput `pulumi:"nicuuid"`
}

// NewIpfailover registers a new resource with the given unique name, arguments, and options.
func NewIpfailover(ctx *pulumi.Context,
	name string, args *IpfailoverArgs, opts ...pulumi.ResourceOption) (*Ipfailover, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatacenterId == nil {
		return nil, errors.New("invalid value for required argument 'DatacenterId'")
	}
	if args.Ip == nil {
		return nil, errors.New("invalid value for required argument 'Ip'")
	}
	if args.LanId == nil {
		return nil, errors.New("invalid value for required argument 'LanId'")
	}
	if args.Nicuuid == nil {
		return nil, errors.New("invalid value for required argument 'Nicuuid'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ipfailover
	err := ctx.RegisterResource("ionoscloud:index/ipfailover:Ipfailover", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpfailover gets an existing Ipfailover resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpfailover(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpfailoverState, opts ...pulumi.ResourceOption) (*Ipfailover, error) {
	var resource Ipfailover
	err := ctx.ReadResource("ionoscloud:index/ipfailover:Ipfailover", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ipfailover resources.
type ipfailoverState struct {
	// [string] The ID of a Virtual Data Center.
	DatacenterId *string `pulumi:"datacenterId"`
	// [string] The reserved IP address to be used in the IP failover group.
	Ip *string `pulumi:"ip"`
	// [string] The ID of a LAN.
	LanId *string `pulumi:"lanId"`
	// The UUID of the master NIC
	Nicuuid *string `pulumi:"nicuuid"`
}

type IpfailoverState struct {
	// [string] The ID of a Virtual Data Center.
	DatacenterId pulumi.StringPtrInput
	// [string] The reserved IP address to be used in the IP failover group.
	Ip pulumi.StringPtrInput
	// [string] The ID of a LAN.
	LanId pulumi.StringPtrInput
	// The UUID of the master NIC
	Nicuuid pulumi.StringPtrInput
}

func (IpfailoverState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipfailoverState)(nil)).Elem()
}

type ipfailoverArgs struct {
	// [string] The ID of a Virtual Data Center.
	DatacenterId string `pulumi:"datacenterId"`
	// [string] The reserved IP address to be used in the IP failover group.
	Ip string `pulumi:"ip"`
	// [string] The ID of a LAN.
	LanId string `pulumi:"lanId"`
	// The UUID of the master NIC
	Nicuuid string `pulumi:"nicuuid"`
}

// The set of arguments for constructing a Ipfailover resource.
type IpfailoverArgs struct {
	// [string] The ID of a Virtual Data Center.
	DatacenterId pulumi.StringInput
	// [string] The reserved IP address to be used in the IP failover group.
	Ip pulumi.StringInput
	// [string] The ID of a LAN.
	LanId pulumi.StringInput
	// The UUID of the master NIC
	Nicuuid pulumi.StringInput
}

func (IpfailoverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipfailoverArgs)(nil)).Elem()
}

type IpfailoverInput interface {
	pulumi.Input

	ToIpfailoverOutput() IpfailoverOutput
	ToIpfailoverOutputWithContext(ctx context.Context) IpfailoverOutput
}

func (*Ipfailover) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipfailover)(nil)).Elem()
}

func (i *Ipfailover) ToIpfailoverOutput() IpfailoverOutput {
	return i.ToIpfailoverOutputWithContext(context.Background())
}

func (i *Ipfailover) ToIpfailoverOutputWithContext(ctx context.Context) IpfailoverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpfailoverOutput)
}

// IpfailoverArrayInput is an input type that accepts IpfailoverArray and IpfailoverArrayOutput values.
// You can construct a concrete instance of `IpfailoverArrayInput` via:
//
//	IpfailoverArray{ IpfailoverArgs{...} }
type IpfailoverArrayInput interface {
	pulumi.Input

	ToIpfailoverArrayOutput() IpfailoverArrayOutput
	ToIpfailoverArrayOutputWithContext(context.Context) IpfailoverArrayOutput
}

type IpfailoverArray []IpfailoverInput

func (IpfailoverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipfailover)(nil)).Elem()
}

func (i IpfailoverArray) ToIpfailoverArrayOutput() IpfailoverArrayOutput {
	return i.ToIpfailoverArrayOutputWithContext(context.Background())
}

func (i IpfailoverArray) ToIpfailoverArrayOutputWithContext(ctx context.Context) IpfailoverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpfailoverArrayOutput)
}

// IpfailoverMapInput is an input type that accepts IpfailoverMap and IpfailoverMapOutput values.
// You can construct a concrete instance of `IpfailoverMapInput` via:
//
//	IpfailoverMap{ "key": IpfailoverArgs{...} }
type IpfailoverMapInput interface {
	pulumi.Input

	ToIpfailoverMapOutput() IpfailoverMapOutput
	ToIpfailoverMapOutputWithContext(context.Context) IpfailoverMapOutput
}

type IpfailoverMap map[string]IpfailoverInput

func (IpfailoverMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipfailover)(nil)).Elem()
}

func (i IpfailoverMap) ToIpfailoverMapOutput() IpfailoverMapOutput {
	return i.ToIpfailoverMapOutputWithContext(context.Background())
}

func (i IpfailoverMap) ToIpfailoverMapOutputWithContext(ctx context.Context) IpfailoverMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpfailoverMapOutput)
}

type IpfailoverOutput struct{ *pulumi.OutputState }

func (IpfailoverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipfailover)(nil)).Elem()
}

func (o IpfailoverOutput) ToIpfailoverOutput() IpfailoverOutput {
	return o
}

func (o IpfailoverOutput) ToIpfailoverOutputWithContext(ctx context.Context) IpfailoverOutput {
	return o
}

// [string] The ID of a Virtual Data Center.
func (o IpfailoverOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipfailover) pulumi.StringOutput { return v.DatacenterId }).(pulumi.StringOutput)
}

// [string] The reserved IP address to be used in the IP failover group.
func (o IpfailoverOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipfailover) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// [string] The ID of a LAN.
func (o IpfailoverOutput) LanId() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipfailover) pulumi.StringOutput { return v.LanId }).(pulumi.StringOutput)
}

// The UUID of the master NIC
func (o IpfailoverOutput) Nicuuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipfailover) pulumi.StringOutput { return v.Nicuuid }).(pulumi.StringOutput)
}

type IpfailoverArrayOutput struct{ *pulumi.OutputState }

func (IpfailoverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipfailover)(nil)).Elem()
}

func (o IpfailoverArrayOutput) ToIpfailoverArrayOutput() IpfailoverArrayOutput {
	return o
}

func (o IpfailoverArrayOutput) ToIpfailoverArrayOutputWithContext(ctx context.Context) IpfailoverArrayOutput {
	return o
}

func (o IpfailoverArrayOutput) Index(i pulumi.IntInput) IpfailoverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ipfailover {
		return vs[0].([]*Ipfailover)[vs[1].(int)]
	}).(IpfailoverOutput)
}

type IpfailoverMapOutput struct{ *pulumi.OutputState }

func (IpfailoverMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipfailover)(nil)).Elem()
}

func (o IpfailoverMapOutput) ToIpfailoverMapOutput() IpfailoverMapOutput {
	return o
}

func (o IpfailoverMapOutput) ToIpfailoverMapOutputWithContext(ctx context.Context) IpfailoverMapOutput {
	return o
}

func (o IpfailoverMapOutput) MapIndex(k pulumi.StringInput) IpfailoverOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ipfailover {
		return vs[0].(map[string]*Ipfailover)[vs[1].(string)]
	}).(IpfailoverOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpfailoverInput)(nil)).Elem(), &Ipfailover{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpfailoverArrayInput)(nil)).Elem(), IpfailoverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpfailoverMapInput)(nil)).Elem(), IpfailoverMap{})
	pulumi.RegisterOutputType(IpfailoverOutput{})
	pulumi.RegisterOutputType(IpfailoverArrayOutput{})
	pulumi.RegisterOutputType(IpfailoverMapOutput{})
}
