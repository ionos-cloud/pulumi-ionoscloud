// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package k8s

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ClusterMaintenanceWindow struct {
	// [string] Day of the week when maintenance is allowed
	DayOfTheWeek string `pulumi:"dayOfTheWeek"`
	// [string] A clock time in the day when maintenance is allowed
	Time string `pulumi:"time"`
}

// ClusterMaintenanceWindowInput is an input type that accepts ClusterMaintenanceWindowArgs and ClusterMaintenanceWindowOutput values.
// You can construct a concrete instance of `ClusterMaintenanceWindowInput` via:
//
//	ClusterMaintenanceWindowArgs{...}
type ClusterMaintenanceWindowInput interface {
	pulumi.Input

	ToClusterMaintenanceWindowOutput() ClusterMaintenanceWindowOutput
	ToClusterMaintenanceWindowOutputWithContext(context.Context) ClusterMaintenanceWindowOutput
}

type ClusterMaintenanceWindowArgs struct {
	// [string] Day of the week when maintenance is allowed
	DayOfTheWeek pulumi.StringInput `pulumi:"dayOfTheWeek"`
	// [string] A clock time in the day when maintenance is allowed
	Time pulumi.StringInput `pulumi:"time"`
}

func (ClusterMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMaintenanceWindow)(nil)).Elem()
}

func (i ClusterMaintenanceWindowArgs) ToClusterMaintenanceWindowOutput() ClusterMaintenanceWindowOutput {
	return i.ToClusterMaintenanceWindowOutputWithContext(context.Background())
}

func (i ClusterMaintenanceWindowArgs) ToClusterMaintenanceWindowOutputWithContext(ctx context.Context) ClusterMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMaintenanceWindowOutput)
}

func (i ClusterMaintenanceWindowArgs) ToClusterMaintenanceWindowPtrOutput() ClusterMaintenanceWindowPtrOutput {
	return i.ToClusterMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i ClusterMaintenanceWindowArgs) ToClusterMaintenanceWindowPtrOutputWithContext(ctx context.Context) ClusterMaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMaintenanceWindowOutput).ToClusterMaintenanceWindowPtrOutputWithContext(ctx)
}

// ClusterMaintenanceWindowPtrInput is an input type that accepts ClusterMaintenanceWindowArgs, ClusterMaintenanceWindowPtr and ClusterMaintenanceWindowPtrOutput values.
// You can construct a concrete instance of `ClusterMaintenanceWindowPtrInput` via:
//
//	        ClusterMaintenanceWindowArgs{...}
//
//	or:
//
//	        nil
type ClusterMaintenanceWindowPtrInput interface {
	pulumi.Input

	ToClusterMaintenanceWindowPtrOutput() ClusterMaintenanceWindowPtrOutput
	ToClusterMaintenanceWindowPtrOutputWithContext(context.Context) ClusterMaintenanceWindowPtrOutput
}

type clusterMaintenanceWindowPtrType ClusterMaintenanceWindowArgs

func ClusterMaintenanceWindowPtr(v *ClusterMaintenanceWindowArgs) ClusterMaintenanceWindowPtrInput {
	return (*clusterMaintenanceWindowPtrType)(v)
}

func (*clusterMaintenanceWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterMaintenanceWindow)(nil)).Elem()
}

func (i *clusterMaintenanceWindowPtrType) ToClusterMaintenanceWindowPtrOutput() ClusterMaintenanceWindowPtrOutput {
	return i.ToClusterMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i *clusterMaintenanceWindowPtrType) ToClusterMaintenanceWindowPtrOutputWithContext(ctx context.Context) ClusterMaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMaintenanceWindowPtrOutput)
}

type ClusterMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (ClusterMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMaintenanceWindow)(nil)).Elem()
}

func (o ClusterMaintenanceWindowOutput) ToClusterMaintenanceWindowOutput() ClusterMaintenanceWindowOutput {
	return o
}

func (o ClusterMaintenanceWindowOutput) ToClusterMaintenanceWindowOutputWithContext(ctx context.Context) ClusterMaintenanceWindowOutput {
	return o
}

func (o ClusterMaintenanceWindowOutput) ToClusterMaintenanceWindowPtrOutput() ClusterMaintenanceWindowPtrOutput {
	return o.ToClusterMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (o ClusterMaintenanceWindowOutput) ToClusterMaintenanceWindowPtrOutputWithContext(ctx context.Context) ClusterMaintenanceWindowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterMaintenanceWindow) *ClusterMaintenanceWindow {
		return &v
	}).(ClusterMaintenanceWindowPtrOutput)
}

// [string] Day of the week when maintenance is allowed
func (o ClusterMaintenanceWindowOutput) DayOfTheWeek() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterMaintenanceWindow) string { return v.DayOfTheWeek }).(pulumi.StringOutput)
}

// [string] A clock time in the day when maintenance is allowed
func (o ClusterMaintenanceWindowOutput) Time() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterMaintenanceWindow) string { return v.Time }).(pulumi.StringOutput)
}

type ClusterMaintenanceWindowPtrOutput struct{ *pulumi.OutputState }

func (ClusterMaintenanceWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterMaintenanceWindow)(nil)).Elem()
}

func (o ClusterMaintenanceWindowPtrOutput) ToClusterMaintenanceWindowPtrOutput() ClusterMaintenanceWindowPtrOutput {
	return o
}

func (o ClusterMaintenanceWindowPtrOutput) ToClusterMaintenanceWindowPtrOutputWithContext(ctx context.Context) ClusterMaintenanceWindowPtrOutput {
	return o
}

func (o ClusterMaintenanceWindowPtrOutput) Elem() ClusterMaintenanceWindowOutput {
	return o.ApplyT(func(v *ClusterMaintenanceWindow) ClusterMaintenanceWindow {
		if v != nil {
			return *v
		}
		var ret ClusterMaintenanceWindow
		return ret
	}).(ClusterMaintenanceWindowOutput)
}

// [string] Day of the week when maintenance is allowed
func (o ClusterMaintenanceWindowPtrOutput) DayOfTheWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterMaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return &v.DayOfTheWeek
	}).(pulumi.StringPtrOutput)
}

// [string] A clock time in the day when maintenance is allowed
func (o ClusterMaintenanceWindowPtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterMaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return &v.Time
	}).(pulumi.StringPtrOutput)
}

type ClusterS3Bucket struct {
	// [string] The name of the Kubernetes Cluster.
	Name *string `pulumi:"name"`
}

// ClusterS3BucketInput is an input type that accepts ClusterS3BucketArgs and ClusterS3BucketOutput values.
// You can construct a concrete instance of `ClusterS3BucketInput` via:
//
//	ClusterS3BucketArgs{...}
type ClusterS3BucketInput interface {
	pulumi.Input

	ToClusterS3BucketOutput() ClusterS3BucketOutput
	ToClusterS3BucketOutputWithContext(context.Context) ClusterS3BucketOutput
}

type ClusterS3BucketArgs struct {
	// [string] The name of the Kubernetes Cluster.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ClusterS3BucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterS3Bucket)(nil)).Elem()
}

func (i ClusterS3BucketArgs) ToClusterS3BucketOutput() ClusterS3BucketOutput {
	return i.ToClusterS3BucketOutputWithContext(context.Background())
}

func (i ClusterS3BucketArgs) ToClusterS3BucketOutputWithContext(ctx context.Context) ClusterS3BucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterS3BucketOutput)
}

// ClusterS3BucketArrayInput is an input type that accepts ClusterS3BucketArray and ClusterS3BucketArrayOutput values.
// You can construct a concrete instance of `ClusterS3BucketArrayInput` via:
//
//	ClusterS3BucketArray{ ClusterS3BucketArgs{...} }
type ClusterS3BucketArrayInput interface {
	pulumi.Input

	ToClusterS3BucketArrayOutput() ClusterS3BucketArrayOutput
	ToClusterS3BucketArrayOutputWithContext(context.Context) ClusterS3BucketArrayOutput
}

type ClusterS3BucketArray []ClusterS3BucketInput

func (ClusterS3BucketArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterS3Bucket)(nil)).Elem()
}

func (i ClusterS3BucketArray) ToClusterS3BucketArrayOutput() ClusterS3BucketArrayOutput {
	return i.ToClusterS3BucketArrayOutputWithContext(context.Background())
}

func (i ClusterS3BucketArray) ToClusterS3BucketArrayOutputWithContext(ctx context.Context) ClusterS3BucketArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterS3BucketArrayOutput)
}

type ClusterS3BucketOutput struct{ *pulumi.OutputState }

func (ClusterS3BucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterS3Bucket)(nil)).Elem()
}

func (o ClusterS3BucketOutput) ToClusterS3BucketOutput() ClusterS3BucketOutput {
	return o
}

func (o ClusterS3BucketOutput) ToClusterS3BucketOutputWithContext(ctx context.Context) ClusterS3BucketOutput {
	return o
}

// [string] The name of the Kubernetes Cluster.
func (o ClusterS3BucketOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterS3Bucket) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ClusterS3BucketArrayOutput struct{ *pulumi.OutputState }

func (ClusterS3BucketArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterS3Bucket)(nil)).Elem()
}

func (o ClusterS3BucketArrayOutput) ToClusterS3BucketArrayOutput() ClusterS3BucketArrayOutput {
	return o
}

func (o ClusterS3BucketArrayOutput) ToClusterS3BucketArrayOutputWithContext(ctx context.Context) ClusterS3BucketArrayOutput {
	return o
}

func (o ClusterS3BucketArrayOutput) Index(i pulumi.IntInput) ClusterS3BucketOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterS3Bucket {
		return vs[0].([]ClusterS3Bucket)[vs[1].(int)]
	}).(ClusterS3BucketOutput)
}

type NodePoolAutoScaling struct {
	// [int] The maximum number of worker nodes that the node pool can scale to. Should be greater than min_node_count
	MaxNodeCount int `pulumi:"maxNodeCount"`
	// [int] The minimum number of worker nodes the node pool can scale down to. Should be less than max_node_count
	MinNodeCount int `pulumi:"minNodeCount"`
}

// NodePoolAutoScalingInput is an input type that accepts NodePoolAutoScalingArgs and NodePoolAutoScalingOutput values.
// You can construct a concrete instance of `NodePoolAutoScalingInput` via:
//
//	NodePoolAutoScalingArgs{...}
type NodePoolAutoScalingInput interface {
	pulumi.Input

	ToNodePoolAutoScalingOutput() NodePoolAutoScalingOutput
	ToNodePoolAutoScalingOutputWithContext(context.Context) NodePoolAutoScalingOutput
}

type NodePoolAutoScalingArgs struct {
	// [int] The maximum number of worker nodes that the node pool can scale to. Should be greater than min_node_count
	MaxNodeCount pulumi.IntInput `pulumi:"maxNodeCount"`
	// [int] The minimum number of worker nodes the node pool can scale down to. Should be less than max_node_count
	MinNodeCount pulumi.IntInput `pulumi:"minNodeCount"`
}

func (NodePoolAutoScalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolAutoScaling)(nil)).Elem()
}

func (i NodePoolAutoScalingArgs) ToNodePoolAutoScalingOutput() NodePoolAutoScalingOutput {
	return i.ToNodePoolAutoScalingOutputWithContext(context.Background())
}

func (i NodePoolAutoScalingArgs) ToNodePoolAutoScalingOutputWithContext(ctx context.Context) NodePoolAutoScalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolAutoScalingOutput)
}

func (i NodePoolAutoScalingArgs) ToNodePoolAutoScalingPtrOutput() NodePoolAutoScalingPtrOutput {
	return i.ToNodePoolAutoScalingPtrOutputWithContext(context.Background())
}

func (i NodePoolAutoScalingArgs) ToNodePoolAutoScalingPtrOutputWithContext(ctx context.Context) NodePoolAutoScalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolAutoScalingOutput).ToNodePoolAutoScalingPtrOutputWithContext(ctx)
}

// NodePoolAutoScalingPtrInput is an input type that accepts NodePoolAutoScalingArgs, NodePoolAutoScalingPtr and NodePoolAutoScalingPtrOutput values.
// You can construct a concrete instance of `NodePoolAutoScalingPtrInput` via:
//
//	        NodePoolAutoScalingArgs{...}
//
//	or:
//
//	        nil
type NodePoolAutoScalingPtrInput interface {
	pulumi.Input

	ToNodePoolAutoScalingPtrOutput() NodePoolAutoScalingPtrOutput
	ToNodePoolAutoScalingPtrOutputWithContext(context.Context) NodePoolAutoScalingPtrOutput
}

type nodePoolAutoScalingPtrType NodePoolAutoScalingArgs

func NodePoolAutoScalingPtr(v *NodePoolAutoScalingArgs) NodePoolAutoScalingPtrInput {
	return (*nodePoolAutoScalingPtrType)(v)
}

func (*nodePoolAutoScalingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolAutoScaling)(nil)).Elem()
}

func (i *nodePoolAutoScalingPtrType) ToNodePoolAutoScalingPtrOutput() NodePoolAutoScalingPtrOutput {
	return i.ToNodePoolAutoScalingPtrOutputWithContext(context.Background())
}

func (i *nodePoolAutoScalingPtrType) ToNodePoolAutoScalingPtrOutputWithContext(ctx context.Context) NodePoolAutoScalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolAutoScalingPtrOutput)
}

type NodePoolAutoScalingOutput struct{ *pulumi.OutputState }

func (NodePoolAutoScalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolAutoScaling)(nil)).Elem()
}

func (o NodePoolAutoScalingOutput) ToNodePoolAutoScalingOutput() NodePoolAutoScalingOutput {
	return o
}

func (o NodePoolAutoScalingOutput) ToNodePoolAutoScalingOutputWithContext(ctx context.Context) NodePoolAutoScalingOutput {
	return o
}

func (o NodePoolAutoScalingOutput) ToNodePoolAutoScalingPtrOutput() NodePoolAutoScalingPtrOutput {
	return o.ToNodePoolAutoScalingPtrOutputWithContext(context.Background())
}

func (o NodePoolAutoScalingOutput) ToNodePoolAutoScalingPtrOutputWithContext(ctx context.Context) NodePoolAutoScalingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodePoolAutoScaling) *NodePoolAutoScaling {
		return &v
	}).(NodePoolAutoScalingPtrOutput)
}

// [int] The maximum number of worker nodes that the node pool can scale to. Should be greater than min_node_count
func (o NodePoolAutoScalingOutput) MaxNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodePoolAutoScaling) int { return v.MaxNodeCount }).(pulumi.IntOutput)
}

// [int] The minimum number of worker nodes the node pool can scale down to. Should be less than max_node_count
func (o NodePoolAutoScalingOutput) MinNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodePoolAutoScaling) int { return v.MinNodeCount }).(pulumi.IntOutput)
}

type NodePoolAutoScalingPtrOutput struct{ *pulumi.OutputState }

func (NodePoolAutoScalingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolAutoScaling)(nil)).Elem()
}

func (o NodePoolAutoScalingPtrOutput) ToNodePoolAutoScalingPtrOutput() NodePoolAutoScalingPtrOutput {
	return o
}

func (o NodePoolAutoScalingPtrOutput) ToNodePoolAutoScalingPtrOutputWithContext(ctx context.Context) NodePoolAutoScalingPtrOutput {
	return o
}

func (o NodePoolAutoScalingPtrOutput) Elem() NodePoolAutoScalingOutput {
	return o.ApplyT(func(v *NodePoolAutoScaling) NodePoolAutoScaling {
		if v != nil {
			return *v
		}
		var ret NodePoolAutoScaling
		return ret
	}).(NodePoolAutoScalingOutput)
}

// [int] The maximum number of worker nodes that the node pool can scale to. Should be greater than min_node_count
func (o NodePoolAutoScalingPtrOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePoolAutoScaling) *int {
		if v == nil {
			return nil
		}
		return &v.MaxNodeCount
	}).(pulumi.IntPtrOutput)
}

// [int] The minimum number of worker nodes the node pool can scale down to. Should be less than max_node_count
func (o NodePoolAutoScalingPtrOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePoolAutoScaling) *int {
		if v == nil {
			return nil
		}
		return &v.MinNodeCount
	}).(pulumi.IntPtrOutput)
}

type NodePoolLan struct {
	// [boolean] Indicates if the Kubernetes Node Pool LAN will reserve an IP using DHCP. Default value is `true`
	Dhcp *bool `pulumi:"dhcp"`
	// [int] The LAN ID of an existing LAN at the related datacenter
	Id int `pulumi:"id"`
	// An array of additional LANs attached to worker nodes
	Routes []NodePoolLanRoute `pulumi:"routes"`
}

// NodePoolLanInput is an input type that accepts NodePoolLanArgs and NodePoolLanOutput values.
// You can construct a concrete instance of `NodePoolLanInput` via:
//
//	NodePoolLanArgs{...}
type NodePoolLanInput interface {
	pulumi.Input

	ToNodePoolLanOutput() NodePoolLanOutput
	ToNodePoolLanOutputWithContext(context.Context) NodePoolLanOutput
}

type NodePoolLanArgs struct {
	// [boolean] Indicates if the Kubernetes Node Pool LAN will reserve an IP using DHCP. Default value is `true`
	Dhcp pulumi.BoolPtrInput `pulumi:"dhcp"`
	// [int] The LAN ID of an existing LAN at the related datacenter
	Id pulumi.IntInput `pulumi:"id"`
	// An array of additional LANs attached to worker nodes
	Routes NodePoolLanRouteArrayInput `pulumi:"routes"`
}

func (NodePoolLanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolLan)(nil)).Elem()
}

func (i NodePoolLanArgs) ToNodePoolLanOutput() NodePoolLanOutput {
	return i.ToNodePoolLanOutputWithContext(context.Background())
}

func (i NodePoolLanArgs) ToNodePoolLanOutputWithContext(ctx context.Context) NodePoolLanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolLanOutput)
}

// NodePoolLanArrayInput is an input type that accepts NodePoolLanArray and NodePoolLanArrayOutput values.
// You can construct a concrete instance of `NodePoolLanArrayInput` via:
//
//	NodePoolLanArray{ NodePoolLanArgs{...} }
type NodePoolLanArrayInput interface {
	pulumi.Input

	ToNodePoolLanArrayOutput() NodePoolLanArrayOutput
	ToNodePoolLanArrayOutputWithContext(context.Context) NodePoolLanArrayOutput
}

type NodePoolLanArray []NodePoolLanInput

func (NodePoolLanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolLan)(nil)).Elem()
}

func (i NodePoolLanArray) ToNodePoolLanArrayOutput() NodePoolLanArrayOutput {
	return i.ToNodePoolLanArrayOutputWithContext(context.Background())
}

func (i NodePoolLanArray) ToNodePoolLanArrayOutputWithContext(ctx context.Context) NodePoolLanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolLanArrayOutput)
}

type NodePoolLanOutput struct{ *pulumi.OutputState }

func (NodePoolLanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolLan)(nil)).Elem()
}

func (o NodePoolLanOutput) ToNodePoolLanOutput() NodePoolLanOutput {
	return o
}

func (o NodePoolLanOutput) ToNodePoolLanOutputWithContext(ctx context.Context) NodePoolLanOutput {
	return o
}

// [boolean] Indicates if the Kubernetes Node Pool LAN will reserve an IP using DHCP. Default value is `true`
func (o NodePoolLanOutput) Dhcp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodePoolLan) *bool { return v.Dhcp }).(pulumi.BoolPtrOutput)
}

// [int] The LAN ID of an existing LAN at the related datacenter
func (o NodePoolLanOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v NodePoolLan) int { return v.Id }).(pulumi.IntOutput)
}

// An array of additional LANs attached to worker nodes
func (o NodePoolLanOutput) Routes() NodePoolLanRouteArrayOutput {
	return o.ApplyT(func(v NodePoolLan) []NodePoolLanRoute { return v.Routes }).(NodePoolLanRouteArrayOutput)
}

type NodePoolLanArrayOutput struct{ *pulumi.OutputState }

func (NodePoolLanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolLan)(nil)).Elem()
}

func (o NodePoolLanArrayOutput) ToNodePoolLanArrayOutput() NodePoolLanArrayOutput {
	return o
}

func (o NodePoolLanArrayOutput) ToNodePoolLanArrayOutputWithContext(ctx context.Context) NodePoolLanArrayOutput {
	return o
}

func (o NodePoolLanArrayOutput) Index(i pulumi.IntInput) NodePoolLanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodePoolLan {
		return vs[0].([]NodePoolLan)[vs[1].(int)]
	}).(NodePoolLanOutput)
}

type NodePoolLanRoute struct {
	// [string] IPv4 or IPv6 Gateway IP for the route
	GatewayIp string `pulumi:"gatewayIp"`
	// [string] IPv4 or IPv6 CIDR to be routed via the interface
	Network string `pulumi:"network"`
}

// NodePoolLanRouteInput is an input type that accepts NodePoolLanRouteArgs and NodePoolLanRouteOutput values.
// You can construct a concrete instance of `NodePoolLanRouteInput` via:
//
//	NodePoolLanRouteArgs{...}
type NodePoolLanRouteInput interface {
	pulumi.Input

	ToNodePoolLanRouteOutput() NodePoolLanRouteOutput
	ToNodePoolLanRouteOutputWithContext(context.Context) NodePoolLanRouteOutput
}

type NodePoolLanRouteArgs struct {
	// [string] IPv4 or IPv6 Gateway IP for the route
	GatewayIp pulumi.StringInput `pulumi:"gatewayIp"`
	// [string] IPv4 or IPv6 CIDR to be routed via the interface
	Network pulumi.StringInput `pulumi:"network"`
}

func (NodePoolLanRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolLanRoute)(nil)).Elem()
}

func (i NodePoolLanRouteArgs) ToNodePoolLanRouteOutput() NodePoolLanRouteOutput {
	return i.ToNodePoolLanRouteOutputWithContext(context.Background())
}

func (i NodePoolLanRouteArgs) ToNodePoolLanRouteOutputWithContext(ctx context.Context) NodePoolLanRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolLanRouteOutput)
}

// NodePoolLanRouteArrayInput is an input type that accepts NodePoolLanRouteArray and NodePoolLanRouteArrayOutput values.
// You can construct a concrete instance of `NodePoolLanRouteArrayInput` via:
//
//	NodePoolLanRouteArray{ NodePoolLanRouteArgs{...} }
type NodePoolLanRouteArrayInput interface {
	pulumi.Input

	ToNodePoolLanRouteArrayOutput() NodePoolLanRouteArrayOutput
	ToNodePoolLanRouteArrayOutputWithContext(context.Context) NodePoolLanRouteArrayOutput
}

type NodePoolLanRouteArray []NodePoolLanRouteInput

func (NodePoolLanRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolLanRoute)(nil)).Elem()
}

func (i NodePoolLanRouteArray) ToNodePoolLanRouteArrayOutput() NodePoolLanRouteArrayOutput {
	return i.ToNodePoolLanRouteArrayOutputWithContext(context.Background())
}

func (i NodePoolLanRouteArray) ToNodePoolLanRouteArrayOutputWithContext(ctx context.Context) NodePoolLanRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolLanRouteArrayOutput)
}

type NodePoolLanRouteOutput struct{ *pulumi.OutputState }

func (NodePoolLanRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolLanRoute)(nil)).Elem()
}

func (o NodePoolLanRouteOutput) ToNodePoolLanRouteOutput() NodePoolLanRouteOutput {
	return o
}

func (o NodePoolLanRouteOutput) ToNodePoolLanRouteOutputWithContext(ctx context.Context) NodePoolLanRouteOutput {
	return o
}

// [string] IPv4 or IPv6 Gateway IP for the route
func (o NodePoolLanRouteOutput) GatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolLanRoute) string { return v.GatewayIp }).(pulumi.StringOutput)
}

// [string] IPv4 or IPv6 CIDR to be routed via the interface
func (o NodePoolLanRouteOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolLanRoute) string { return v.Network }).(pulumi.StringOutput)
}

type NodePoolLanRouteArrayOutput struct{ *pulumi.OutputState }

func (NodePoolLanRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolLanRoute)(nil)).Elem()
}

func (o NodePoolLanRouteArrayOutput) ToNodePoolLanRouteArrayOutput() NodePoolLanRouteArrayOutput {
	return o
}

func (o NodePoolLanRouteArrayOutput) ToNodePoolLanRouteArrayOutputWithContext(ctx context.Context) NodePoolLanRouteArrayOutput {
	return o
}

func (o NodePoolLanRouteArrayOutput) Index(i pulumi.IntInput) NodePoolLanRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodePoolLanRoute {
		return vs[0].([]NodePoolLanRoute)[vs[1].(int)]
	}).(NodePoolLanRouteOutput)
}

type NodePoolMaintenanceWindow struct {
	// [string] Day of the week when maintenance is allowed
	DayOfTheWeek string `pulumi:"dayOfTheWeek"`
	// [string] A clock time in the day when maintenance is allowed
	Time string `pulumi:"time"`
}

// NodePoolMaintenanceWindowInput is an input type that accepts NodePoolMaintenanceWindowArgs and NodePoolMaintenanceWindowOutput values.
// You can construct a concrete instance of `NodePoolMaintenanceWindowInput` via:
//
//	NodePoolMaintenanceWindowArgs{...}
type NodePoolMaintenanceWindowInput interface {
	pulumi.Input

	ToNodePoolMaintenanceWindowOutput() NodePoolMaintenanceWindowOutput
	ToNodePoolMaintenanceWindowOutputWithContext(context.Context) NodePoolMaintenanceWindowOutput
}

type NodePoolMaintenanceWindowArgs struct {
	// [string] Day of the week when maintenance is allowed
	DayOfTheWeek pulumi.StringInput `pulumi:"dayOfTheWeek"`
	// [string] A clock time in the day when maintenance is allowed
	Time pulumi.StringInput `pulumi:"time"`
}

func (NodePoolMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolMaintenanceWindow)(nil)).Elem()
}

func (i NodePoolMaintenanceWindowArgs) ToNodePoolMaintenanceWindowOutput() NodePoolMaintenanceWindowOutput {
	return i.ToNodePoolMaintenanceWindowOutputWithContext(context.Background())
}

func (i NodePoolMaintenanceWindowArgs) ToNodePoolMaintenanceWindowOutputWithContext(ctx context.Context) NodePoolMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolMaintenanceWindowOutput)
}

func (i NodePoolMaintenanceWindowArgs) ToNodePoolMaintenanceWindowPtrOutput() NodePoolMaintenanceWindowPtrOutput {
	return i.ToNodePoolMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i NodePoolMaintenanceWindowArgs) ToNodePoolMaintenanceWindowPtrOutputWithContext(ctx context.Context) NodePoolMaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolMaintenanceWindowOutput).ToNodePoolMaintenanceWindowPtrOutputWithContext(ctx)
}

// NodePoolMaintenanceWindowPtrInput is an input type that accepts NodePoolMaintenanceWindowArgs, NodePoolMaintenanceWindowPtr and NodePoolMaintenanceWindowPtrOutput values.
// You can construct a concrete instance of `NodePoolMaintenanceWindowPtrInput` via:
//
//	        NodePoolMaintenanceWindowArgs{...}
//
//	or:
//
//	        nil
type NodePoolMaintenanceWindowPtrInput interface {
	pulumi.Input

	ToNodePoolMaintenanceWindowPtrOutput() NodePoolMaintenanceWindowPtrOutput
	ToNodePoolMaintenanceWindowPtrOutputWithContext(context.Context) NodePoolMaintenanceWindowPtrOutput
}

type nodePoolMaintenanceWindowPtrType NodePoolMaintenanceWindowArgs

func NodePoolMaintenanceWindowPtr(v *NodePoolMaintenanceWindowArgs) NodePoolMaintenanceWindowPtrInput {
	return (*nodePoolMaintenanceWindowPtrType)(v)
}

func (*nodePoolMaintenanceWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolMaintenanceWindow)(nil)).Elem()
}

func (i *nodePoolMaintenanceWindowPtrType) ToNodePoolMaintenanceWindowPtrOutput() NodePoolMaintenanceWindowPtrOutput {
	return i.ToNodePoolMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i *nodePoolMaintenanceWindowPtrType) ToNodePoolMaintenanceWindowPtrOutputWithContext(ctx context.Context) NodePoolMaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolMaintenanceWindowPtrOutput)
}

type NodePoolMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (NodePoolMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolMaintenanceWindow)(nil)).Elem()
}

func (o NodePoolMaintenanceWindowOutput) ToNodePoolMaintenanceWindowOutput() NodePoolMaintenanceWindowOutput {
	return o
}

func (o NodePoolMaintenanceWindowOutput) ToNodePoolMaintenanceWindowOutputWithContext(ctx context.Context) NodePoolMaintenanceWindowOutput {
	return o
}

func (o NodePoolMaintenanceWindowOutput) ToNodePoolMaintenanceWindowPtrOutput() NodePoolMaintenanceWindowPtrOutput {
	return o.ToNodePoolMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (o NodePoolMaintenanceWindowOutput) ToNodePoolMaintenanceWindowPtrOutputWithContext(ctx context.Context) NodePoolMaintenanceWindowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodePoolMaintenanceWindow) *NodePoolMaintenanceWindow {
		return &v
	}).(NodePoolMaintenanceWindowPtrOutput)
}

// [string] Day of the week when maintenance is allowed
func (o NodePoolMaintenanceWindowOutput) DayOfTheWeek() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolMaintenanceWindow) string { return v.DayOfTheWeek }).(pulumi.StringOutput)
}

// [string] A clock time in the day when maintenance is allowed
func (o NodePoolMaintenanceWindowOutput) Time() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolMaintenanceWindow) string { return v.Time }).(pulumi.StringOutput)
}

type NodePoolMaintenanceWindowPtrOutput struct{ *pulumi.OutputState }

func (NodePoolMaintenanceWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolMaintenanceWindow)(nil)).Elem()
}

func (o NodePoolMaintenanceWindowPtrOutput) ToNodePoolMaintenanceWindowPtrOutput() NodePoolMaintenanceWindowPtrOutput {
	return o
}

func (o NodePoolMaintenanceWindowPtrOutput) ToNodePoolMaintenanceWindowPtrOutputWithContext(ctx context.Context) NodePoolMaintenanceWindowPtrOutput {
	return o
}

func (o NodePoolMaintenanceWindowPtrOutput) Elem() NodePoolMaintenanceWindowOutput {
	return o.ApplyT(func(v *NodePoolMaintenanceWindow) NodePoolMaintenanceWindow {
		if v != nil {
			return *v
		}
		var ret NodePoolMaintenanceWindow
		return ret
	}).(NodePoolMaintenanceWindowOutput)
}

// [string] Day of the week when maintenance is allowed
func (o NodePoolMaintenanceWindowPtrOutput) DayOfTheWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolMaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return &v.DayOfTheWeek
	}).(pulumi.StringPtrOutput)
}

// [string] A clock time in the day when maintenance is allowed
func (o NodePoolMaintenanceWindowPtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolMaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return &v.Time
	}).(pulumi.StringPtrOutput)
}

type GetClusterConfig struct {
	ApiVersion     string                    `pulumi:"apiVersion"`
	Clusters       []GetClusterConfigCluster `pulumi:"clusters"`
	Contexts       []GetClusterConfigContext `pulumi:"contexts"`
	CurrentContext string                    `pulumi:"currentContext"`
	Kind           string                    `pulumi:"kind"`
	Users          []GetClusterConfigUser    `pulumi:"users"`
}

// GetClusterConfigInput is an input type that accepts GetClusterConfigArgs and GetClusterConfigOutput values.
// You can construct a concrete instance of `GetClusterConfigInput` via:
//
//	GetClusterConfigArgs{...}
type GetClusterConfigInput interface {
	pulumi.Input

	ToGetClusterConfigOutput() GetClusterConfigOutput
	ToGetClusterConfigOutputWithContext(context.Context) GetClusterConfigOutput
}

type GetClusterConfigArgs struct {
	ApiVersion     pulumi.StringInput                `pulumi:"apiVersion"`
	Clusters       GetClusterConfigClusterArrayInput `pulumi:"clusters"`
	Contexts       GetClusterConfigContextArrayInput `pulumi:"contexts"`
	CurrentContext pulumi.StringInput                `pulumi:"currentContext"`
	Kind           pulumi.StringInput                `pulumi:"kind"`
	Users          GetClusterConfigUserArrayInput    `pulumi:"users"`
}

func (GetClusterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterConfig)(nil)).Elem()
}

func (i GetClusterConfigArgs) ToGetClusterConfigOutput() GetClusterConfigOutput {
	return i.ToGetClusterConfigOutputWithContext(context.Background())
}

func (i GetClusterConfigArgs) ToGetClusterConfigOutputWithContext(ctx context.Context) GetClusterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterConfigOutput)
}

// GetClusterConfigArrayInput is an input type that accepts GetClusterConfigArray and GetClusterConfigArrayOutput values.
// You can construct a concrete instance of `GetClusterConfigArrayInput` via:
//
//	GetClusterConfigArray{ GetClusterConfigArgs{...} }
type GetClusterConfigArrayInput interface {
	pulumi.Input

	ToGetClusterConfigArrayOutput() GetClusterConfigArrayOutput
	ToGetClusterConfigArrayOutputWithContext(context.Context) GetClusterConfigArrayOutput
}

type GetClusterConfigArray []GetClusterConfigInput

func (GetClusterConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterConfig)(nil)).Elem()
}

func (i GetClusterConfigArray) ToGetClusterConfigArrayOutput() GetClusterConfigArrayOutput {
	return i.ToGetClusterConfigArrayOutputWithContext(context.Background())
}

func (i GetClusterConfigArray) ToGetClusterConfigArrayOutputWithContext(ctx context.Context) GetClusterConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterConfigArrayOutput)
}

type GetClusterConfigOutput struct{ *pulumi.OutputState }

func (GetClusterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterConfig)(nil)).Elem()
}

func (o GetClusterConfigOutput) ToGetClusterConfigOutput() GetClusterConfigOutput {
	return o
}

func (o GetClusterConfigOutput) ToGetClusterConfigOutputWithContext(ctx context.Context) GetClusterConfigOutput {
	return o
}

func (o GetClusterConfigOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterConfig) string { return v.ApiVersion }).(pulumi.StringOutput)
}

func (o GetClusterConfigOutput) Clusters() GetClusterConfigClusterArrayOutput {
	return o.ApplyT(func(v GetClusterConfig) []GetClusterConfigCluster { return v.Clusters }).(GetClusterConfigClusterArrayOutput)
}

func (o GetClusterConfigOutput) Contexts() GetClusterConfigContextArrayOutput {
	return o.ApplyT(func(v GetClusterConfig) []GetClusterConfigContext { return v.Contexts }).(GetClusterConfigContextArrayOutput)
}

func (o GetClusterConfigOutput) CurrentContext() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterConfig) string { return v.CurrentContext }).(pulumi.StringOutput)
}

func (o GetClusterConfigOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterConfig) string { return v.Kind }).(pulumi.StringOutput)
}

func (o GetClusterConfigOutput) Users() GetClusterConfigUserArrayOutput {
	return o.ApplyT(func(v GetClusterConfig) []GetClusterConfigUser { return v.Users }).(GetClusterConfigUserArrayOutput)
}

type GetClusterConfigArrayOutput struct{ *pulumi.OutputState }

func (GetClusterConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterConfig)(nil)).Elem()
}

func (o GetClusterConfigArrayOutput) ToGetClusterConfigArrayOutput() GetClusterConfigArrayOutput {
	return o
}

func (o GetClusterConfigArrayOutput) ToGetClusterConfigArrayOutputWithContext(ctx context.Context) GetClusterConfigArrayOutput {
	return o
}

func (o GetClusterConfigArrayOutput) Index(i pulumi.IntInput) GetClusterConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterConfig {
		return vs[0].([]GetClusterConfig)[vs[1].(int)]
	}).(GetClusterConfigOutput)
}

type GetClusterConfigCluster struct {
	Cluster map[string]string `pulumi:"cluster"`
	// Name of an existing cluster that you want to search for.
	Name string `pulumi:"name"`
}

// GetClusterConfigClusterInput is an input type that accepts GetClusterConfigClusterArgs and GetClusterConfigClusterOutput values.
// You can construct a concrete instance of `GetClusterConfigClusterInput` via:
//
//	GetClusterConfigClusterArgs{...}
type GetClusterConfigClusterInput interface {
	pulumi.Input

	ToGetClusterConfigClusterOutput() GetClusterConfigClusterOutput
	ToGetClusterConfigClusterOutputWithContext(context.Context) GetClusterConfigClusterOutput
}

type GetClusterConfigClusterArgs struct {
	Cluster pulumi.StringMapInput `pulumi:"cluster"`
	// Name of an existing cluster that you want to search for.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetClusterConfigClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterConfigCluster)(nil)).Elem()
}

func (i GetClusterConfigClusterArgs) ToGetClusterConfigClusterOutput() GetClusterConfigClusterOutput {
	return i.ToGetClusterConfigClusterOutputWithContext(context.Background())
}

func (i GetClusterConfigClusterArgs) ToGetClusterConfigClusterOutputWithContext(ctx context.Context) GetClusterConfigClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterConfigClusterOutput)
}

// GetClusterConfigClusterArrayInput is an input type that accepts GetClusterConfigClusterArray and GetClusterConfigClusterArrayOutput values.
// You can construct a concrete instance of `GetClusterConfigClusterArrayInput` via:
//
//	GetClusterConfigClusterArray{ GetClusterConfigClusterArgs{...} }
type GetClusterConfigClusterArrayInput interface {
	pulumi.Input

	ToGetClusterConfigClusterArrayOutput() GetClusterConfigClusterArrayOutput
	ToGetClusterConfigClusterArrayOutputWithContext(context.Context) GetClusterConfigClusterArrayOutput
}

type GetClusterConfigClusterArray []GetClusterConfigClusterInput

func (GetClusterConfigClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterConfigCluster)(nil)).Elem()
}

func (i GetClusterConfigClusterArray) ToGetClusterConfigClusterArrayOutput() GetClusterConfigClusterArrayOutput {
	return i.ToGetClusterConfigClusterArrayOutputWithContext(context.Background())
}

func (i GetClusterConfigClusterArray) ToGetClusterConfigClusterArrayOutputWithContext(ctx context.Context) GetClusterConfigClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterConfigClusterArrayOutput)
}

type GetClusterConfigClusterOutput struct{ *pulumi.OutputState }

func (GetClusterConfigClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterConfigCluster)(nil)).Elem()
}

func (o GetClusterConfigClusterOutput) ToGetClusterConfigClusterOutput() GetClusterConfigClusterOutput {
	return o
}

func (o GetClusterConfigClusterOutput) ToGetClusterConfigClusterOutputWithContext(ctx context.Context) GetClusterConfigClusterOutput {
	return o
}

func (o GetClusterConfigClusterOutput) Cluster() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetClusterConfigCluster) map[string]string { return v.Cluster }).(pulumi.StringMapOutput)
}

// Name of an existing cluster that you want to search for.
func (o GetClusterConfigClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterConfigCluster) string { return v.Name }).(pulumi.StringOutput)
}

type GetClusterConfigClusterArrayOutput struct{ *pulumi.OutputState }

func (GetClusterConfigClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterConfigCluster)(nil)).Elem()
}

func (o GetClusterConfigClusterArrayOutput) ToGetClusterConfigClusterArrayOutput() GetClusterConfigClusterArrayOutput {
	return o
}

func (o GetClusterConfigClusterArrayOutput) ToGetClusterConfigClusterArrayOutputWithContext(ctx context.Context) GetClusterConfigClusterArrayOutput {
	return o
}

func (o GetClusterConfigClusterArrayOutput) Index(i pulumi.IntInput) GetClusterConfigClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterConfigCluster {
		return vs[0].([]GetClusterConfigCluster)[vs[1].(int)]
	}).(GetClusterConfigClusterOutput)
}

type GetClusterConfigContext struct {
	Context map[string]string `pulumi:"context"`
	// Name of an existing cluster that you want to search for.
	Name string `pulumi:"name"`
}

// GetClusterConfigContextInput is an input type that accepts GetClusterConfigContextArgs and GetClusterConfigContextOutput values.
// You can construct a concrete instance of `GetClusterConfigContextInput` via:
//
//	GetClusterConfigContextArgs{...}
type GetClusterConfigContextInput interface {
	pulumi.Input

	ToGetClusterConfigContextOutput() GetClusterConfigContextOutput
	ToGetClusterConfigContextOutputWithContext(context.Context) GetClusterConfigContextOutput
}

type GetClusterConfigContextArgs struct {
	Context pulumi.StringMapInput `pulumi:"context"`
	// Name of an existing cluster that you want to search for.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetClusterConfigContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterConfigContext)(nil)).Elem()
}

func (i GetClusterConfigContextArgs) ToGetClusterConfigContextOutput() GetClusterConfigContextOutput {
	return i.ToGetClusterConfigContextOutputWithContext(context.Background())
}

func (i GetClusterConfigContextArgs) ToGetClusterConfigContextOutputWithContext(ctx context.Context) GetClusterConfigContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterConfigContextOutput)
}

// GetClusterConfigContextArrayInput is an input type that accepts GetClusterConfigContextArray and GetClusterConfigContextArrayOutput values.
// You can construct a concrete instance of `GetClusterConfigContextArrayInput` via:
//
//	GetClusterConfigContextArray{ GetClusterConfigContextArgs{...} }
type GetClusterConfigContextArrayInput interface {
	pulumi.Input

	ToGetClusterConfigContextArrayOutput() GetClusterConfigContextArrayOutput
	ToGetClusterConfigContextArrayOutputWithContext(context.Context) GetClusterConfigContextArrayOutput
}

type GetClusterConfigContextArray []GetClusterConfigContextInput

func (GetClusterConfigContextArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterConfigContext)(nil)).Elem()
}

func (i GetClusterConfigContextArray) ToGetClusterConfigContextArrayOutput() GetClusterConfigContextArrayOutput {
	return i.ToGetClusterConfigContextArrayOutputWithContext(context.Background())
}

func (i GetClusterConfigContextArray) ToGetClusterConfigContextArrayOutputWithContext(ctx context.Context) GetClusterConfigContextArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterConfigContextArrayOutput)
}

type GetClusterConfigContextOutput struct{ *pulumi.OutputState }

func (GetClusterConfigContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterConfigContext)(nil)).Elem()
}

func (o GetClusterConfigContextOutput) ToGetClusterConfigContextOutput() GetClusterConfigContextOutput {
	return o
}

func (o GetClusterConfigContextOutput) ToGetClusterConfigContextOutputWithContext(ctx context.Context) GetClusterConfigContextOutput {
	return o
}

func (o GetClusterConfigContextOutput) Context() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetClusterConfigContext) map[string]string { return v.Context }).(pulumi.StringMapOutput)
}

// Name of an existing cluster that you want to search for.
func (o GetClusterConfigContextOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterConfigContext) string { return v.Name }).(pulumi.StringOutput)
}

type GetClusterConfigContextArrayOutput struct{ *pulumi.OutputState }

func (GetClusterConfigContextArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterConfigContext)(nil)).Elem()
}

func (o GetClusterConfigContextArrayOutput) ToGetClusterConfigContextArrayOutput() GetClusterConfigContextArrayOutput {
	return o
}

func (o GetClusterConfigContextArrayOutput) ToGetClusterConfigContextArrayOutputWithContext(ctx context.Context) GetClusterConfigContextArrayOutput {
	return o
}

func (o GetClusterConfigContextArrayOutput) Index(i pulumi.IntInput) GetClusterConfigContextOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterConfigContext {
		return vs[0].([]GetClusterConfigContext)[vs[1].(int)]
	}).(GetClusterConfigContextOutput)
}

type GetClusterConfigUser struct {
	// Name of an existing cluster that you want to search for.
	Name string            `pulumi:"name"`
	User map[string]string `pulumi:"user"`
}

// GetClusterConfigUserInput is an input type that accepts GetClusterConfigUserArgs and GetClusterConfigUserOutput values.
// You can construct a concrete instance of `GetClusterConfigUserInput` via:
//
//	GetClusterConfigUserArgs{...}
type GetClusterConfigUserInput interface {
	pulumi.Input

	ToGetClusterConfigUserOutput() GetClusterConfigUserOutput
	ToGetClusterConfigUserOutputWithContext(context.Context) GetClusterConfigUserOutput
}

type GetClusterConfigUserArgs struct {
	// Name of an existing cluster that you want to search for.
	Name pulumi.StringInput    `pulumi:"name"`
	User pulumi.StringMapInput `pulumi:"user"`
}

func (GetClusterConfigUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterConfigUser)(nil)).Elem()
}

func (i GetClusterConfigUserArgs) ToGetClusterConfigUserOutput() GetClusterConfigUserOutput {
	return i.ToGetClusterConfigUserOutputWithContext(context.Background())
}

func (i GetClusterConfigUserArgs) ToGetClusterConfigUserOutputWithContext(ctx context.Context) GetClusterConfigUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterConfigUserOutput)
}

// GetClusterConfigUserArrayInput is an input type that accepts GetClusterConfigUserArray and GetClusterConfigUserArrayOutput values.
// You can construct a concrete instance of `GetClusterConfigUserArrayInput` via:
//
//	GetClusterConfigUserArray{ GetClusterConfigUserArgs{...} }
type GetClusterConfigUserArrayInput interface {
	pulumi.Input

	ToGetClusterConfigUserArrayOutput() GetClusterConfigUserArrayOutput
	ToGetClusterConfigUserArrayOutputWithContext(context.Context) GetClusterConfigUserArrayOutput
}

type GetClusterConfigUserArray []GetClusterConfigUserInput

func (GetClusterConfigUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterConfigUser)(nil)).Elem()
}

func (i GetClusterConfigUserArray) ToGetClusterConfigUserArrayOutput() GetClusterConfigUserArrayOutput {
	return i.ToGetClusterConfigUserArrayOutputWithContext(context.Background())
}

func (i GetClusterConfigUserArray) ToGetClusterConfigUserArrayOutputWithContext(ctx context.Context) GetClusterConfigUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterConfigUserArrayOutput)
}

type GetClusterConfigUserOutput struct{ *pulumi.OutputState }

func (GetClusterConfigUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterConfigUser)(nil)).Elem()
}

func (o GetClusterConfigUserOutput) ToGetClusterConfigUserOutput() GetClusterConfigUserOutput {
	return o
}

func (o GetClusterConfigUserOutput) ToGetClusterConfigUserOutputWithContext(ctx context.Context) GetClusterConfigUserOutput {
	return o
}

// Name of an existing cluster that you want to search for.
func (o GetClusterConfigUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterConfigUser) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetClusterConfigUserOutput) User() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetClusterConfigUser) map[string]string { return v.User }).(pulumi.StringMapOutput)
}

type GetClusterConfigUserArrayOutput struct{ *pulumi.OutputState }

func (GetClusterConfigUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterConfigUser)(nil)).Elem()
}

func (o GetClusterConfigUserArrayOutput) ToGetClusterConfigUserArrayOutput() GetClusterConfigUserArrayOutput {
	return o
}

func (o GetClusterConfigUserArrayOutput) ToGetClusterConfigUserArrayOutputWithContext(ctx context.Context) GetClusterConfigUserArrayOutput {
	return o
}

func (o GetClusterConfigUserArrayOutput) Index(i pulumi.IntInput) GetClusterConfigUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterConfigUser {
		return vs[0].([]GetClusterConfigUser)[vs[1].(int)]
	}).(GetClusterConfigUserOutput)
}

type GetClusterMaintenanceWindow struct {
	// Day of the week when maintenance is allowed
	DayOfTheWeek string `pulumi:"dayOfTheWeek"`
	// A clock time in the day when maintenance is allowed
	Time string `pulumi:"time"`
}

// GetClusterMaintenanceWindowInput is an input type that accepts GetClusterMaintenanceWindowArgs and GetClusterMaintenanceWindowOutput values.
// You can construct a concrete instance of `GetClusterMaintenanceWindowInput` via:
//
//	GetClusterMaintenanceWindowArgs{...}
type GetClusterMaintenanceWindowInput interface {
	pulumi.Input

	ToGetClusterMaintenanceWindowOutput() GetClusterMaintenanceWindowOutput
	ToGetClusterMaintenanceWindowOutputWithContext(context.Context) GetClusterMaintenanceWindowOutput
}

type GetClusterMaintenanceWindowArgs struct {
	// Day of the week when maintenance is allowed
	DayOfTheWeek pulumi.StringInput `pulumi:"dayOfTheWeek"`
	// A clock time in the day when maintenance is allowed
	Time pulumi.StringInput `pulumi:"time"`
}

func (GetClusterMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterMaintenanceWindow)(nil)).Elem()
}

func (i GetClusterMaintenanceWindowArgs) ToGetClusterMaintenanceWindowOutput() GetClusterMaintenanceWindowOutput {
	return i.ToGetClusterMaintenanceWindowOutputWithContext(context.Background())
}

func (i GetClusterMaintenanceWindowArgs) ToGetClusterMaintenanceWindowOutputWithContext(ctx context.Context) GetClusterMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterMaintenanceWindowOutput)
}

// GetClusterMaintenanceWindowArrayInput is an input type that accepts GetClusterMaintenanceWindowArray and GetClusterMaintenanceWindowArrayOutput values.
// You can construct a concrete instance of `GetClusterMaintenanceWindowArrayInput` via:
//
//	GetClusterMaintenanceWindowArray{ GetClusterMaintenanceWindowArgs{...} }
type GetClusterMaintenanceWindowArrayInput interface {
	pulumi.Input

	ToGetClusterMaintenanceWindowArrayOutput() GetClusterMaintenanceWindowArrayOutput
	ToGetClusterMaintenanceWindowArrayOutputWithContext(context.Context) GetClusterMaintenanceWindowArrayOutput
}

type GetClusterMaintenanceWindowArray []GetClusterMaintenanceWindowInput

func (GetClusterMaintenanceWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterMaintenanceWindow)(nil)).Elem()
}

func (i GetClusterMaintenanceWindowArray) ToGetClusterMaintenanceWindowArrayOutput() GetClusterMaintenanceWindowArrayOutput {
	return i.ToGetClusterMaintenanceWindowArrayOutputWithContext(context.Background())
}

func (i GetClusterMaintenanceWindowArray) ToGetClusterMaintenanceWindowArrayOutputWithContext(ctx context.Context) GetClusterMaintenanceWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterMaintenanceWindowArrayOutput)
}

type GetClusterMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (GetClusterMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterMaintenanceWindow)(nil)).Elem()
}

func (o GetClusterMaintenanceWindowOutput) ToGetClusterMaintenanceWindowOutput() GetClusterMaintenanceWindowOutput {
	return o
}

func (o GetClusterMaintenanceWindowOutput) ToGetClusterMaintenanceWindowOutputWithContext(ctx context.Context) GetClusterMaintenanceWindowOutput {
	return o
}

// Day of the week when maintenance is allowed
func (o GetClusterMaintenanceWindowOutput) DayOfTheWeek() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterMaintenanceWindow) string { return v.DayOfTheWeek }).(pulumi.StringOutput)
}

// A clock time in the day when maintenance is allowed
func (o GetClusterMaintenanceWindowOutput) Time() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterMaintenanceWindow) string { return v.Time }).(pulumi.StringOutput)
}

type GetClusterMaintenanceWindowArrayOutput struct{ *pulumi.OutputState }

func (GetClusterMaintenanceWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterMaintenanceWindow)(nil)).Elem()
}

func (o GetClusterMaintenanceWindowArrayOutput) ToGetClusterMaintenanceWindowArrayOutput() GetClusterMaintenanceWindowArrayOutput {
	return o
}

func (o GetClusterMaintenanceWindowArrayOutput) ToGetClusterMaintenanceWindowArrayOutputWithContext(ctx context.Context) GetClusterMaintenanceWindowArrayOutput {
	return o
}

func (o GetClusterMaintenanceWindowArrayOutput) Index(i pulumi.IntInput) GetClusterMaintenanceWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterMaintenanceWindow {
		return vs[0].([]GetClusterMaintenanceWindow)[vs[1].(int)]
	}).(GetClusterMaintenanceWindowOutput)
}

type GetClusterS3Bucket struct {
	// Name of an existing cluster that you want to search for.
	Name string `pulumi:"name"`
}

// GetClusterS3BucketInput is an input type that accepts GetClusterS3BucketArgs and GetClusterS3BucketOutput values.
// You can construct a concrete instance of `GetClusterS3BucketInput` via:
//
//	GetClusterS3BucketArgs{...}
type GetClusterS3BucketInput interface {
	pulumi.Input

	ToGetClusterS3BucketOutput() GetClusterS3BucketOutput
	ToGetClusterS3BucketOutputWithContext(context.Context) GetClusterS3BucketOutput
}

type GetClusterS3BucketArgs struct {
	// Name of an existing cluster that you want to search for.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetClusterS3BucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterS3Bucket)(nil)).Elem()
}

func (i GetClusterS3BucketArgs) ToGetClusterS3BucketOutput() GetClusterS3BucketOutput {
	return i.ToGetClusterS3BucketOutputWithContext(context.Background())
}

func (i GetClusterS3BucketArgs) ToGetClusterS3BucketOutputWithContext(ctx context.Context) GetClusterS3BucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterS3BucketOutput)
}

// GetClusterS3BucketArrayInput is an input type that accepts GetClusterS3BucketArray and GetClusterS3BucketArrayOutput values.
// You can construct a concrete instance of `GetClusterS3BucketArrayInput` via:
//
//	GetClusterS3BucketArray{ GetClusterS3BucketArgs{...} }
type GetClusterS3BucketArrayInput interface {
	pulumi.Input

	ToGetClusterS3BucketArrayOutput() GetClusterS3BucketArrayOutput
	ToGetClusterS3BucketArrayOutputWithContext(context.Context) GetClusterS3BucketArrayOutput
}

type GetClusterS3BucketArray []GetClusterS3BucketInput

func (GetClusterS3BucketArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterS3Bucket)(nil)).Elem()
}

func (i GetClusterS3BucketArray) ToGetClusterS3BucketArrayOutput() GetClusterS3BucketArrayOutput {
	return i.ToGetClusterS3BucketArrayOutputWithContext(context.Background())
}

func (i GetClusterS3BucketArray) ToGetClusterS3BucketArrayOutputWithContext(ctx context.Context) GetClusterS3BucketArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterS3BucketArrayOutput)
}

type GetClusterS3BucketOutput struct{ *pulumi.OutputState }

func (GetClusterS3BucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterS3Bucket)(nil)).Elem()
}

func (o GetClusterS3BucketOutput) ToGetClusterS3BucketOutput() GetClusterS3BucketOutput {
	return o
}

func (o GetClusterS3BucketOutput) ToGetClusterS3BucketOutputWithContext(ctx context.Context) GetClusterS3BucketOutput {
	return o
}

// Name of an existing cluster that you want to search for.
func (o GetClusterS3BucketOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterS3Bucket) string { return v.Name }).(pulumi.StringOutput)
}

type GetClusterS3BucketArrayOutput struct{ *pulumi.OutputState }

func (GetClusterS3BucketArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterS3Bucket)(nil)).Elem()
}

func (o GetClusterS3BucketArrayOutput) ToGetClusterS3BucketArrayOutput() GetClusterS3BucketArrayOutput {
	return o
}

func (o GetClusterS3BucketArrayOutput) ToGetClusterS3BucketArrayOutputWithContext(ctx context.Context) GetClusterS3BucketArrayOutput {
	return o
}

func (o GetClusterS3BucketArrayOutput) Index(i pulumi.IntInput) GetClusterS3BucketOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterS3Bucket {
		return vs[0].([]GetClusterS3Bucket)[vs[1].(int)]
	}).(GetClusterS3BucketOutput)
}

type GetClustersCluster struct {
	// Access to the K8s API server is restricted to these CIDRs. Cluster-internal traffic is not affected by this restriction. If no allowlist is specified, access is not restricted. If an IP without subnet mask is provided, the default value will be used: 32 for IPv4 and 128 for IPv6.
	ApiSubnetAllowLists []string `pulumi:"apiSubnetAllowLists"`
	// A list of available versions for upgrading the cluster
	AvailableUpgradeVersions []string                   `pulumi:"availableUpgradeVersions"`
	CaCrt                    string                     `pulumi:"caCrt"`
	Configs                  []GetClustersClusterConfig `pulumi:"configs"`
	Id                       string                     `pulumi:"id"`
	K8sVersion               string                     `pulumi:"k8sVersion"`
	KubeConfig               string                     `pulumi:"kubeConfig"`
	Location                 string                     `pulumi:"location"`
	// A maintenance window comprise of a day of the week and a time for maintenance to be allowed
	MaintenanceWindows []GetClustersClusterMaintenanceWindow `pulumi:"maintenanceWindows"`
	Name               string                                `pulumi:"name"`
	// The NAT gateway IP of the cluster if the cluster is private.
	NatGatewayIp string   `pulumi:"natGatewayIp"`
	NodePools    []string `pulumi:"nodePools"`
	// The node subnet of the cluster, if the cluster is private.
	NodeSubnet string `pulumi:"nodeSubnet"`
	// The indicator if the cluster is public or private.
	Public bool `pulumi:"public"`
	// List of Object Storage bucket configured for K8s usage. For now it contains only an Object Storage bucket used to store K8s API audit logs.
	S3Buckets  []GetClustersClusterS3Bucket `pulumi:"s3Buckets"`
	Server     string                       `pulumi:"server"`
	State      string                       `pulumi:"state"`
	UserTokens map[string]string            `pulumi:"userTokens"`
	// A list of versions that may be used for node pools under this cluster
	ViableNodePoolVersions []string `pulumi:"viableNodePoolVersions"`
}

// GetClustersClusterInput is an input type that accepts GetClustersClusterArgs and GetClustersClusterOutput values.
// You can construct a concrete instance of `GetClustersClusterInput` via:
//
//	GetClustersClusterArgs{...}
type GetClustersClusterInput interface {
	pulumi.Input

	ToGetClustersClusterOutput() GetClustersClusterOutput
	ToGetClustersClusterOutputWithContext(context.Context) GetClustersClusterOutput
}

type GetClustersClusterArgs struct {
	// Access to the K8s API server is restricted to these CIDRs. Cluster-internal traffic is not affected by this restriction. If no allowlist is specified, access is not restricted. If an IP without subnet mask is provided, the default value will be used: 32 for IPv4 and 128 for IPv6.
	ApiSubnetAllowLists pulumi.StringArrayInput `pulumi:"apiSubnetAllowLists"`
	// A list of available versions for upgrading the cluster
	AvailableUpgradeVersions pulumi.StringArrayInput            `pulumi:"availableUpgradeVersions"`
	CaCrt                    pulumi.StringInput                 `pulumi:"caCrt"`
	Configs                  GetClustersClusterConfigArrayInput `pulumi:"configs"`
	Id                       pulumi.StringInput                 `pulumi:"id"`
	K8sVersion               pulumi.StringInput                 `pulumi:"k8sVersion"`
	KubeConfig               pulumi.StringInput                 `pulumi:"kubeConfig"`
	Location                 pulumi.StringInput                 `pulumi:"location"`
	// A maintenance window comprise of a day of the week and a time for maintenance to be allowed
	MaintenanceWindows GetClustersClusterMaintenanceWindowArrayInput `pulumi:"maintenanceWindows"`
	Name               pulumi.StringInput                            `pulumi:"name"`
	// The NAT gateway IP of the cluster if the cluster is private.
	NatGatewayIp pulumi.StringInput      `pulumi:"natGatewayIp"`
	NodePools    pulumi.StringArrayInput `pulumi:"nodePools"`
	// The node subnet of the cluster, if the cluster is private.
	NodeSubnet pulumi.StringInput `pulumi:"nodeSubnet"`
	// The indicator if the cluster is public or private.
	Public pulumi.BoolInput `pulumi:"public"`
	// List of Object Storage bucket configured for K8s usage. For now it contains only an Object Storage bucket used to store K8s API audit logs.
	S3Buckets  GetClustersClusterS3BucketArrayInput `pulumi:"s3Buckets"`
	Server     pulumi.StringInput                   `pulumi:"server"`
	State      pulumi.StringInput                   `pulumi:"state"`
	UserTokens pulumi.StringMapInput                `pulumi:"userTokens"`
	// A list of versions that may be used for node pools under this cluster
	ViableNodePoolVersions pulumi.StringArrayInput `pulumi:"viableNodePoolVersions"`
}

func (GetClustersClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersCluster)(nil)).Elem()
}

func (i GetClustersClusterArgs) ToGetClustersClusterOutput() GetClustersClusterOutput {
	return i.ToGetClustersClusterOutputWithContext(context.Background())
}

func (i GetClustersClusterArgs) ToGetClustersClusterOutputWithContext(ctx context.Context) GetClustersClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterOutput)
}

// GetClustersClusterArrayInput is an input type that accepts GetClustersClusterArray and GetClustersClusterArrayOutput values.
// You can construct a concrete instance of `GetClustersClusterArrayInput` via:
//
//	GetClustersClusterArray{ GetClustersClusterArgs{...} }
type GetClustersClusterArrayInput interface {
	pulumi.Input

	ToGetClustersClusterArrayOutput() GetClustersClusterArrayOutput
	ToGetClustersClusterArrayOutputWithContext(context.Context) GetClustersClusterArrayOutput
}

type GetClustersClusterArray []GetClustersClusterInput

func (GetClustersClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersCluster)(nil)).Elem()
}

func (i GetClustersClusterArray) ToGetClustersClusterArrayOutput() GetClustersClusterArrayOutput {
	return i.ToGetClustersClusterArrayOutputWithContext(context.Background())
}

func (i GetClustersClusterArray) ToGetClustersClusterArrayOutputWithContext(ctx context.Context) GetClustersClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterArrayOutput)
}

type GetClustersClusterOutput struct{ *pulumi.OutputState }

func (GetClustersClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersCluster)(nil)).Elem()
}

func (o GetClustersClusterOutput) ToGetClustersClusterOutput() GetClustersClusterOutput {
	return o
}

func (o GetClustersClusterOutput) ToGetClustersClusterOutputWithContext(ctx context.Context) GetClustersClusterOutput {
	return o
}

// Access to the K8s API server is restricted to these CIDRs. Cluster-internal traffic is not affected by this restriction. If no allowlist is specified, access is not restricted. If an IP without subnet mask is provided, the default value will be used: 32 for IPv4 and 128 for IPv6.
func (o GetClustersClusterOutput) ApiSubnetAllowLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetClustersCluster) []string { return v.ApiSubnetAllowLists }).(pulumi.StringArrayOutput)
}

// A list of available versions for upgrading the cluster
func (o GetClustersClusterOutput) AvailableUpgradeVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetClustersCluster) []string { return v.AvailableUpgradeVersions }).(pulumi.StringArrayOutput)
}

func (o GetClustersClusterOutput) CaCrt() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.CaCrt }).(pulumi.StringOutput)
}

func (o GetClustersClusterOutput) Configs() GetClustersClusterConfigArrayOutput {
	return o.ApplyT(func(v GetClustersCluster) []GetClustersClusterConfig { return v.Configs }).(GetClustersClusterConfigArrayOutput)
}

func (o GetClustersClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetClustersClusterOutput) K8sVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.K8sVersion }).(pulumi.StringOutput)
}

func (o GetClustersClusterOutput) KubeConfig() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.KubeConfig }).(pulumi.StringOutput)
}

func (o GetClustersClusterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.Location }).(pulumi.StringOutput)
}

// A maintenance window comprise of a day of the week and a time for maintenance to be allowed
func (o GetClustersClusterOutput) MaintenanceWindows() GetClustersClusterMaintenanceWindowArrayOutput {
	return o.ApplyT(func(v GetClustersCluster) []GetClustersClusterMaintenanceWindow { return v.MaintenanceWindows }).(GetClustersClusterMaintenanceWindowArrayOutput)
}

func (o GetClustersClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.Name }).(pulumi.StringOutput)
}

// The NAT gateway IP of the cluster if the cluster is private.
func (o GetClustersClusterOutput) NatGatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.NatGatewayIp }).(pulumi.StringOutput)
}

func (o GetClustersClusterOutput) NodePools() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetClustersCluster) []string { return v.NodePools }).(pulumi.StringArrayOutput)
}

// The node subnet of the cluster, if the cluster is private.
func (o GetClustersClusterOutput) NodeSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.NodeSubnet }).(pulumi.StringOutput)
}

// The indicator if the cluster is public or private.
func (o GetClustersClusterOutput) Public() pulumi.BoolOutput {
	return o.ApplyT(func(v GetClustersCluster) bool { return v.Public }).(pulumi.BoolOutput)
}

// List of Object Storage bucket configured for K8s usage. For now it contains only an Object Storage bucket used to store K8s API audit logs.
func (o GetClustersClusterOutput) S3Buckets() GetClustersClusterS3BucketArrayOutput {
	return o.ApplyT(func(v GetClustersCluster) []GetClustersClusterS3Bucket { return v.S3Buckets }).(GetClustersClusterS3BucketArrayOutput)
}

func (o GetClustersClusterOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.Server }).(pulumi.StringOutput)
}

func (o GetClustersClusterOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.State }).(pulumi.StringOutput)
}

func (o GetClustersClusterOutput) UserTokens() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetClustersCluster) map[string]string { return v.UserTokens }).(pulumi.StringMapOutput)
}

// A list of versions that may be used for node pools under this cluster
func (o GetClustersClusterOutput) ViableNodePoolVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetClustersCluster) []string { return v.ViableNodePoolVersions }).(pulumi.StringArrayOutput)
}

type GetClustersClusterArrayOutput struct{ *pulumi.OutputState }

func (GetClustersClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersCluster)(nil)).Elem()
}

func (o GetClustersClusterArrayOutput) ToGetClustersClusterArrayOutput() GetClustersClusterArrayOutput {
	return o
}

func (o GetClustersClusterArrayOutput) ToGetClustersClusterArrayOutputWithContext(ctx context.Context) GetClustersClusterArrayOutput {
	return o
}

func (o GetClustersClusterArrayOutput) Index(i pulumi.IntInput) GetClustersClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClustersCluster {
		return vs[0].([]GetClustersCluster)[vs[1].(int)]
	}).(GetClustersClusterOutput)
}

type GetClustersClusterConfig struct {
	ApiVersion string `pulumi:"apiVersion"`
	// list of Kubernetes clusters that match the provided filters. The elements of this list are structurally identical to the `k8sCluster` datasource, which is limited to retrieving only 1 cluster in a single query.
	Clusters       []GetClustersClusterConfigCluster `pulumi:"clusters"`
	Contexts       []GetClustersClusterConfigContext `pulumi:"contexts"`
	CurrentContext string                            `pulumi:"currentContext"`
	Kind           string                            `pulumi:"kind"`
	Users          []GetClustersClusterConfigUser    `pulumi:"users"`
}

// GetClustersClusterConfigInput is an input type that accepts GetClustersClusterConfigArgs and GetClustersClusterConfigOutput values.
// You can construct a concrete instance of `GetClustersClusterConfigInput` via:
//
//	GetClustersClusterConfigArgs{...}
type GetClustersClusterConfigInput interface {
	pulumi.Input

	ToGetClustersClusterConfigOutput() GetClustersClusterConfigOutput
	ToGetClustersClusterConfigOutputWithContext(context.Context) GetClustersClusterConfigOutput
}

type GetClustersClusterConfigArgs struct {
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`
	// list of Kubernetes clusters that match the provided filters. The elements of this list are structurally identical to the `k8sCluster` datasource, which is limited to retrieving only 1 cluster in a single query.
	Clusters       GetClustersClusterConfigClusterArrayInput `pulumi:"clusters"`
	Contexts       GetClustersClusterConfigContextArrayInput `pulumi:"contexts"`
	CurrentContext pulumi.StringInput                        `pulumi:"currentContext"`
	Kind           pulumi.StringInput                        `pulumi:"kind"`
	Users          GetClustersClusterConfigUserArrayInput    `pulumi:"users"`
}

func (GetClustersClusterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterConfig)(nil)).Elem()
}

func (i GetClustersClusterConfigArgs) ToGetClustersClusterConfigOutput() GetClustersClusterConfigOutput {
	return i.ToGetClustersClusterConfigOutputWithContext(context.Background())
}

func (i GetClustersClusterConfigArgs) ToGetClustersClusterConfigOutputWithContext(ctx context.Context) GetClustersClusterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterConfigOutput)
}

// GetClustersClusterConfigArrayInput is an input type that accepts GetClustersClusterConfigArray and GetClustersClusterConfigArrayOutput values.
// You can construct a concrete instance of `GetClustersClusterConfigArrayInput` via:
//
//	GetClustersClusterConfigArray{ GetClustersClusterConfigArgs{...} }
type GetClustersClusterConfigArrayInput interface {
	pulumi.Input

	ToGetClustersClusterConfigArrayOutput() GetClustersClusterConfigArrayOutput
	ToGetClustersClusterConfigArrayOutputWithContext(context.Context) GetClustersClusterConfigArrayOutput
}

type GetClustersClusterConfigArray []GetClustersClusterConfigInput

func (GetClustersClusterConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterConfig)(nil)).Elem()
}

func (i GetClustersClusterConfigArray) ToGetClustersClusterConfigArrayOutput() GetClustersClusterConfigArrayOutput {
	return i.ToGetClustersClusterConfigArrayOutputWithContext(context.Background())
}

func (i GetClustersClusterConfigArray) ToGetClustersClusterConfigArrayOutputWithContext(ctx context.Context) GetClustersClusterConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterConfigArrayOutput)
}

type GetClustersClusterConfigOutput struct{ *pulumi.OutputState }

func (GetClustersClusterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterConfig)(nil)).Elem()
}

func (o GetClustersClusterConfigOutput) ToGetClustersClusterConfigOutput() GetClustersClusterConfigOutput {
	return o
}

func (o GetClustersClusterConfigOutput) ToGetClustersClusterConfigOutputWithContext(ctx context.Context) GetClustersClusterConfigOutput {
	return o
}

func (o GetClustersClusterConfigOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterConfig) string { return v.ApiVersion }).(pulumi.StringOutput)
}

// list of Kubernetes clusters that match the provided filters. The elements of this list are structurally identical to the `k8sCluster` datasource, which is limited to retrieving only 1 cluster in a single query.
func (o GetClustersClusterConfigOutput) Clusters() GetClustersClusterConfigClusterArrayOutput {
	return o.ApplyT(func(v GetClustersClusterConfig) []GetClustersClusterConfigCluster { return v.Clusters }).(GetClustersClusterConfigClusterArrayOutput)
}

func (o GetClustersClusterConfigOutput) Contexts() GetClustersClusterConfigContextArrayOutput {
	return o.ApplyT(func(v GetClustersClusterConfig) []GetClustersClusterConfigContext { return v.Contexts }).(GetClustersClusterConfigContextArrayOutput)
}

func (o GetClustersClusterConfigOutput) CurrentContext() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterConfig) string { return v.CurrentContext }).(pulumi.StringOutput)
}

func (o GetClustersClusterConfigOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterConfig) string { return v.Kind }).(pulumi.StringOutput)
}

func (o GetClustersClusterConfigOutput) Users() GetClustersClusterConfigUserArrayOutput {
	return o.ApplyT(func(v GetClustersClusterConfig) []GetClustersClusterConfigUser { return v.Users }).(GetClustersClusterConfigUserArrayOutput)
}

type GetClustersClusterConfigArrayOutput struct{ *pulumi.OutputState }

func (GetClustersClusterConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterConfig)(nil)).Elem()
}

func (o GetClustersClusterConfigArrayOutput) ToGetClustersClusterConfigArrayOutput() GetClustersClusterConfigArrayOutput {
	return o
}

func (o GetClustersClusterConfigArrayOutput) ToGetClustersClusterConfigArrayOutputWithContext(ctx context.Context) GetClustersClusterConfigArrayOutput {
	return o
}

func (o GetClustersClusterConfigArrayOutput) Index(i pulumi.IntInput) GetClustersClusterConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClustersClusterConfig {
		return vs[0].([]GetClustersClusterConfig)[vs[1].(int)]
	}).(GetClustersClusterConfigOutput)
}

type GetClustersClusterConfigCluster struct {
	Cluster map[string]string `pulumi:"cluster"`
	Name    string            `pulumi:"name"`
}

// GetClustersClusterConfigClusterInput is an input type that accepts GetClustersClusterConfigClusterArgs and GetClustersClusterConfigClusterOutput values.
// You can construct a concrete instance of `GetClustersClusterConfigClusterInput` via:
//
//	GetClustersClusterConfigClusterArgs{...}
type GetClustersClusterConfigClusterInput interface {
	pulumi.Input

	ToGetClustersClusterConfigClusterOutput() GetClustersClusterConfigClusterOutput
	ToGetClustersClusterConfigClusterOutputWithContext(context.Context) GetClustersClusterConfigClusterOutput
}

type GetClustersClusterConfigClusterArgs struct {
	Cluster pulumi.StringMapInput `pulumi:"cluster"`
	Name    pulumi.StringInput    `pulumi:"name"`
}

func (GetClustersClusterConfigClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterConfigCluster)(nil)).Elem()
}

func (i GetClustersClusterConfigClusterArgs) ToGetClustersClusterConfigClusterOutput() GetClustersClusterConfigClusterOutput {
	return i.ToGetClustersClusterConfigClusterOutputWithContext(context.Background())
}

func (i GetClustersClusterConfigClusterArgs) ToGetClustersClusterConfigClusterOutputWithContext(ctx context.Context) GetClustersClusterConfigClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterConfigClusterOutput)
}

// GetClustersClusterConfigClusterArrayInput is an input type that accepts GetClustersClusterConfigClusterArray and GetClustersClusterConfigClusterArrayOutput values.
// You can construct a concrete instance of `GetClustersClusterConfigClusterArrayInput` via:
//
//	GetClustersClusterConfigClusterArray{ GetClustersClusterConfigClusterArgs{...} }
type GetClustersClusterConfigClusterArrayInput interface {
	pulumi.Input

	ToGetClustersClusterConfigClusterArrayOutput() GetClustersClusterConfigClusterArrayOutput
	ToGetClustersClusterConfigClusterArrayOutputWithContext(context.Context) GetClustersClusterConfigClusterArrayOutput
}

type GetClustersClusterConfigClusterArray []GetClustersClusterConfigClusterInput

func (GetClustersClusterConfigClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterConfigCluster)(nil)).Elem()
}

func (i GetClustersClusterConfigClusterArray) ToGetClustersClusterConfigClusterArrayOutput() GetClustersClusterConfigClusterArrayOutput {
	return i.ToGetClustersClusterConfigClusterArrayOutputWithContext(context.Background())
}

func (i GetClustersClusterConfigClusterArray) ToGetClustersClusterConfigClusterArrayOutputWithContext(ctx context.Context) GetClustersClusterConfigClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterConfigClusterArrayOutput)
}

type GetClustersClusterConfigClusterOutput struct{ *pulumi.OutputState }

func (GetClustersClusterConfigClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterConfigCluster)(nil)).Elem()
}

func (o GetClustersClusterConfigClusterOutput) ToGetClustersClusterConfigClusterOutput() GetClustersClusterConfigClusterOutput {
	return o
}

func (o GetClustersClusterConfigClusterOutput) ToGetClustersClusterConfigClusterOutputWithContext(ctx context.Context) GetClustersClusterConfigClusterOutput {
	return o
}

func (o GetClustersClusterConfigClusterOutput) Cluster() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetClustersClusterConfigCluster) map[string]string { return v.Cluster }).(pulumi.StringMapOutput)
}

func (o GetClustersClusterConfigClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterConfigCluster) string { return v.Name }).(pulumi.StringOutput)
}

type GetClustersClusterConfigClusterArrayOutput struct{ *pulumi.OutputState }

func (GetClustersClusterConfigClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterConfigCluster)(nil)).Elem()
}

func (o GetClustersClusterConfigClusterArrayOutput) ToGetClustersClusterConfigClusterArrayOutput() GetClustersClusterConfigClusterArrayOutput {
	return o
}

func (o GetClustersClusterConfigClusterArrayOutput) ToGetClustersClusterConfigClusterArrayOutputWithContext(ctx context.Context) GetClustersClusterConfigClusterArrayOutput {
	return o
}

func (o GetClustersClusterConfigClusterArrayOutput) Index(i pulumi.IntInput) GetClustersClusterConfigClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClustersClusterConfigCluster {
		return vs[0].([]GetClustersClusterConfigCluster)[vs[1].(int)]
	}).(GetClustersClusterConfigClusterOutput)
}

type GetClustersClusterConfigContext struct {
	Context map[string]string `pulumi:"context"`
	Name    string            `pulumi:"name"`
}

// GetClustersClusterConfigContextInput is an input type that accepts GetClustersClusterConfigContextArgs and GetClustersClusterConfigContextOutput values.
// You can construct a concrete instance of `GetClustersClusterConfigContextInput` via:
//
//	GetClustersClusterConfigContextArgs{...}
type GetClustersClusterConfigContextInput interface {
	pulumi.Input

	ToGetClustersClusterConfigContextOutput() GetClustersClusterConfigContextOutput
	ToGetClustersClusterConfigContextOutputWithContext(context.Context) GetClustersClusterConfigContextOutput
}

type GetClustersClusterConfigContextArgs struct {
	Context pulumi.StringMapInput `pulumi:"context"`
	Name    pulumi.StringInput    `pulumi:"name"`
}

func (GetClustersClusterConfigContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterConfigContext)(nil)).Elem()
}

func (i GetClustersClusterConfigContextArgs) ToGetClustersClusterConfigContextOutput() GetClustersClusterConfigContextOutput {
	return i.ToGetClustersClusterConfigContextOutputWithContext(context.Background())
}

func (i GetClustersClusterConfigContextArgs) ToGetClustersClusterConfigContextOutputWithContext(ctx context.Context) GetClustersClusterConfigContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterConfigContextOutput)
}

// GetClustersClusterConfigContextArrayInput is an input type that accepts GetClustersClusterConfigContextArray and GetClustersClusterConfigContextArrayOutput values.
// You can construct a concrete instance of `GetClustersClusterConfigContextArrayInput` via:
//
//	GetClustersClusterConfigContextArray{ GetClustersClusterConfigContextArgs{...} }
type GetClustersClusterConfigContextArrayInput interface {
	pulumi.Input

	ToGetClustersClusterConfigContextArrayOutput() GetClustersClusterConfigContextArrayOutput
	ToGetClustersClusterConfigContextArrayOutputWithContext(context.Context) GetClustersClusterConfigContextArrayOutput
}

type GetClustersClusterConfigContextArray []GetClustersClusterConfigContextInput

func (GetClustersClusterConfigContextArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterConfigContext)(nil)).Elem()
}

func (i GetClustersClusterConfigContextArray) ToGetClustersClusterConfigContextArrayOutput() GetClustersClusterConfigContextArrayOutput {
	return i.ToGetClustersClusterConfigContextArrayOutputWithContext(context.Background())
}

func (i GetClustersClusterConfigContextArray) ToGetClustersClusterConfigContextArrayOutputWithContext(ctx context.Context) GetClustersClusterConfigContextArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterConfigContextArrayOutput)
}

type GetClustersClusterConfigContextOutput struct{ *pulumi.OutputState }

func (GetClustersClusterConfigContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterConfigContext)(nil)).Elem()
}

func (o GetClustersClusterConfigContextOutput) ToGetClustersClusterConfigContextOutput() GetClustersClusterConfigContextOutput {
	return o
}

func (o GetClustersClusterConfigContextOutput) ToGetClustersClusterConfigContextOutputWithContext(ctx context.Context) GetClustersClusterConfigContextOutput {
	return o
}

func (o GetClustersClusterConfigContextOutput) Context() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetClustersClusterConfigContext) map[string]string { return v.Context }).(pulumi.StringMapOutput)
}

func (o GetClustersClusterConfigContextOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterConfigContext) string { return v.Name }).(pulumi.StringOutput)
}

type GetClustersClusterConfigContextArrayOutput struct{ *pulumi.OutputState }

func (GetClustersClusterConfigContextArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterConfigContext)(nil)).Elem()
}

func (o GetClustersClusterConfigContextArrayOutput) ToGetClustersClusterConfigContextArrayOutput() GetClustersClusterConfigContextArrayOutput {
	return o
}

func (o GetClustersClusterConfigContextArrayOutput) ToGetClustersClusterConfigContextArrayOutputWithContext(ctx context.Context) GetClustersClusterConfigContextArrayOutput {
	return o
}

func (o GetClustersClusterConfigContextArrayOutput) Index(i pulumi.IntInput) GetClustersClusterConfigContextOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClustersClusterConfigContext {
		return vs[0].([]GetClustersClusterConfigContext)[vs[1].(int)]
	}).(GetClustersClusterConfigContextOutput)
}

type GetClustersClusterConfigUser struct {
	Name string            `pulumi:"name"`
	User map[string]string `pulumi:"user"`
}

// GetClustersClusterConfigUserInput is an input type that accepts GetClustersClusterConfigUserArgs and GetClustersClusterConfigUserOutput values.
// You can construct a concrete instance of `GetClustersClusterConfigUserInput` via:
//
//	GetClustersClusterConfigUserArgs{...}
type GetClustersClusterConfigUserInput interface {
	pulumi.Input

	ToGetClustersClusterConfigUserOutput() GetClustersClusterConfigUserOutput
	ToGetClustersClusterConfigUserOutputWithContext(context.Context) GetClustersClusterConfigUserOutput
}

type GetClustersClusterConfigUserArgs struct {
	Name pulumi.StringInput    `pulumi:"name"`
	User pulumi.StringMapInput `pulumi:"user"`
}

func (GetClustersClusterConfigUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterConfigUser)(nil)).Elem()
}

func (i GetClustersClusterConfigUserArgs) ToGetClustersClusterConfigUserOutput() GetClustersClusterConfigUserOutput {
	return i.ToGetClustersClusterConfigUserOutputWithContext(context.Background())
}

func (i GetClustersClusterConfigUserArgs) ToGetClustersClusterConfigUserOutputWithContext(ctx context.Context) GetClustersClusterConfigUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterConfigUserOutput)
}

// GetClustersClusterConfigUserArrayInput is an input type that accepts GetClustersClusterConfigUserArray and GetClustersClusterConfigUserArrayOutput values.
// You can construct a concrete instance of `GetClustersClusterConfigUserArrayInput` via:
//
//	GetClustersClusterConfigUserArray{ GetClustersClusterConfigUserArgs{...} }
type GetClustersClusterConfigUserArrayInput interface {
	pulumi.Input

	ToGetClustersClusterConfigUserArrayOutput() GetClustersClusterConfigUserArrayOutput
	ToGetClustersClusterConfigUserArrayOutputWithContext(context.Context) GetClustersClusterConfigUserArrayOutput
}

type GetClustersClusterConfigUserArray []GetClustersClusterConfigUserInput

func (GetClustersClusterConfigUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterConfigUser)(nil)).Elem()
}

func (i GetClustersClusterConfigUserArray) ToGetClustersClusterConfigUserArrayOutput() GetClustersClusterConfigUserArrayOutput {
	return i.ToGetClustersClusterConfigUserArrayOutputWithContext(context.Background())
}

func (i GetClustersClusterConfigUserArray) ToGetClustersClusterConfigUserArrayOutputWithContext(ctx context.Context) GetClustersClusterConfigUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterConfigUserArrayOutput)
}

type GetClustersClusterConfigUserOutput struct{ *pulumi.OutputState }

func (GetClustersClusterConfigUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterConfigUser)(nil)).Elem()
}

func (o GetClustersClusterConfigUserOutput) ToGetClustersClusterConfigUserOutput() GetClustersClusterConfigUserOutput {
	return o
}

func (o GetClustersClusterConfigUserOutput) ToGetClustersClusterConfigUserOutputWithContext(ctx context.Context) GetClustersClusterConfigUserOutput {
	return o
}

func (o GetClustersClusterConfigUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterConfigUser) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetClustersClusterConfigUserOutput) User() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetClustersClusterConfigUser) map[string]string { return v.User }).(pulumi.StringMapOutput)
}

type GetClustersClusterConfigUserArrayOutput struct{ *pulumi.OutputState }

func (GetClustersClusterConfigUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterConfigUser)(nil)).Elem()
}

func (o GetClustersClusterConfigUserArrayOutput) ToGetClustersClusterConfigUserArrayOutput() GetClustersClusterConfigUserArrayOutput {
	return o
}

func (o GetClustersClusterConfigUserArrayOutput) ToGetClustersClusterConfigUserArrayOutputWithContext(ctx context.Context) GetClustersClusterConfigUserArrayOutput {
	return o
}

func (o GetClustersClusterConfigUserArrayOutput) Index(i pulumi.IntInput) GetClustersClusterConfigUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClustersClusterConfigUser {
		return vs[0].([]GetClustersClusterConfigUser)[vs[1].(int)]
	}).(GetClustersClusterConfigUserOutput)
}

type GetClustersClusterMaintenanceWindow struct {
	// Day of the week when maintenance is allowed
	DayOfTheWeek string `pulumi:"dayOfTheWeek"`
	// A clock time in the day when maintenance is allowed
	Time string `pulumi:"time"`
}

// GetClustersClusterMaintenanceWindowInput is an input type that accepts GetClustersClusterMaintenanceWindowArgs and GetClustersClusterMaintenanceWindowOutput values.
// You can construct a concrete instance of `GetClustersClusterMaintenanceWindowInput` via:
//
//	GetClustersClusterMaintenanceWindowArgs{...}
type GetClustersClusterMaintenanceWindowInput interface {
	pulumi.Input

	ToGetClustersClusterMaintenanceWindowOutput() GetClustersClusterMaintenanceWindowOutput
	ToGetClustersClusterMaintenanceWindowOutputWithContext(context.Context) GetClustersClusterMaintenanceWindowOutput
}

type GetClustersClusterMaintenanceWindowArgs struct {
	// Day of the week when maintenance is allowed
	DayOfTheWeek pulumi.StringInput `pulumi:"dayOfTheWeek"`
	// A clock time in the day when maintenance is allowed
	Time pulumi.StringInput `pulumi:"time"`
}

func (GetClustersClusterMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterMaintenanceWindow)(nil)).Elem()
}

func (i GetClustersClusterMaintenanceWindowArgs) ToGetClustersClusterMaintenanceWindowOutput() GetClustersClusterMaintenanceWindowOutput {
	return i.ToGetClustersClusterMaintenanceWindowOutputWithContext(context.Background())
}

func (i GetClustersClusterMaintenanceWindowArgs) ToGetClustersClusterMaintenanceWindowOutputWithContext(ctx context.Context) GetClustersClusterMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterMaintenanceWindowOutput)
}

// GetClustersClusterMaintenanceWindowArrayInput is an input type that accepts GetClustersClusterMaintenanceWindowArray and GetClustersClusterMaintenanceWindowArrayOutput values.
// You can construct a concrete instance of `GetClustersClusterMaintenanceWindowArrayInput` via:
//
//	GetClustersClusterMaintenanceWindowArray{ GetClustersClusterMaintenanceWindowArgs{...} }
type GetClustersClusterMaintenanceWindowArrayInput interface {
	pulumi.Input

	ToGetClustersClusterMaintenanceWindowArrayOutput() GetClustersClusterMaintenanceWindowArrayOutput
	ToGetClustersClusterMaintenanceWindowArrayOutputWithContext(context.Context) GetClustersClusterMaintenanceWindowArrayOutput
}

type GetClustersClusterMaintenanceWindowArray []GetClustersClusterMaintenanceWindowInput

func (GetClustersClusterMaintenanceWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterMaintenanceWindow)(nil)).Elem()
}

func (i GetClustersClusterMaintenanceWindowArray) ToGetClustersClusterMaintenanceWindowArrayOutput() GetClustersClusterMaintenanceWindowArrayOutput {
	return i.ToGetClustersClusterMaintenanceWindowArrayOutputWithContext(context.Background())
}

func (i GetClustersClusterMaintenanceWindowArray) ToGetClustersClusterMaintenanceWindowArrayOutputWithContext(ctx context.Context) GetClustersClusterMaintenanceWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterMaintenanceWindowArrayOutput)
}

type GetClustersClusterMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (GetClustersClusterMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterMaintenanceWindow)(nil)).Elem()
}

func (o GetClustersClusterMaintenanceWindowOutput) ToGetClustersClusterMaintenanceWindowOutput() GetClustersClusterMaintenanceWindowOutput {
	return o
}

func (o GetClustersClusterMaintenanceWindowOutput) ToGetClustersClusterMaintenanceWindowOutputWithContext(ctx context.Context) GetClustersClusterMaintenanceWindowOutput {
	return o
}

// Day of the week when maintenance is allowed
func (o GetClustersClusterMaintenanceWindowOutput) DayOfTheWeek() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterMaintenanceWindow) string { return v.DayOfTheWeek }).(pulumi.StringOutput)
}

// A clock time in the day when maintenance is allowed
func (o GetClustersClusterMaintenanceWindowOutput) Time() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterMaintenanceWindow) string { return v.Time }).(pulumi.StringOutput)
}

type GetClustersClusterMaintenanceWindowArrayOutput struct{ *pulumi.OutputState }

func (GetClustersClusterMaintenanceWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterMaintenanceWindow)(nil)).Elem()
}

func (o GetClustersClusterMaintenanceWindowArrayOutput) ToGetClustersClusterMaintenanceWindowArrayOutput() GetClustersClusterMaintenanceWindowArrayOutput {
	return o
}

func (o GetClustersClusterMaintenanceWindowArrayOutput) ToGetClustersClusterMaintenanceWindowArrayOutputWithContext(ctx context.Context) GetClustersClusterMaintenanceWindowArrayOutput {
	return o
}

func (o GetClustersClusterMaintenanceWindowArrayOutput) Index(i pulumi.IntInput) GetClustersClusterMaintenanceWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClustersClusterMaintenanceWindow {
		return vs[0].([]GetClustersClusterMaintenanceWindow)[vs[1].(int)]
	}).(GetClustersClusterMaintenanceWindowOutput)
}

type GetClustersClusterS3Bucket struct {
	// Name of the Object Storage bucket
	Name string `pulumi:"name"`
}

// GetClustersClusterS3BucketInput is an input type that accepts GetClustersClusterS3BucketArgs and GetClustersClusterS3BucketOutput values.
// You can construct a concrete instance of `GetClustersClusterS3BucketInput` via:
//
//	GetClustersClusterS3BucketArgs{...}
type GetClustersClusterS3BucketInput interface {
	pulumi.Input

	ToGetClustersClusterS3BucketOutput() GetClustersClusterS3BucketOutput
	ToGetClustersClusterS3BucketOutputWithContext(context.Context) GetClustersClusterS3BucketOutput
}

type GetClustersClusterS3BucketArgs struct {
	// Name of the Object Storage bucket
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetClustersClusterS3BucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterS3Bucket)(nil)).Elem()
}

func (i GetClustersClusterS3BucketArgs) ToGetClustersClusterS3BucketOutput() GetClustersClusterS3BucketOutput {
	return i.ToGetClustersClusterS3BucketOutputWithContext(context.Background())
}

func (i GetClustersClusterS3BucketArgs) ToGetClustersClusterS3BucketOutputWithContext(ctx context.Context) GetClustersClusterS3BucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterS3BucketOutput)
}

// GetClustersClusterS3BucketArrayInput is an input type that accepts GetClustersClusterS3BucketArray and GetClustersClusterS3BucketArrayOutput values.
// You can construct a concrete instance of `GetClustersClusterS3BucketArrayInput` via:
//
//	GetClustersClusterS3BucketArray{ GetClustersClusterS3BucketArgs{...} }
type GetClustersClusterS3BucketArrayInput interface {
	pulumi.Input

	ToGetClustersClusterS3BucketArrayOutput() GetClustersClusterS3BucketArrayOutput
	ToGetClustersClusterS3BucketArrayOutputWithContext(context.Context) GetClustersClusterS3BucketArrayOutput
}

type GetClustersClusterS3BucketArray []GetClustersClusterS3BucketInput

func (GetClustersClusterS3BucketArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterS3Bucket)(nil)).Elem()
}

func (i GetClustersClusterS3BucketArray) ToGetClustersClusterS3BucketArrayOutput() GetClustersClusterS3BucketArrayOutput {
	return i.ToGetClustersClusterS3BucketArrayOutputWithContext(context.Background())
}

func (i GetClustersClusterS3BucketArray) ToGetClustersClusterS3BucketArrayOutputWithContext(ctx context.Context) GetClustersClusterS3BucketArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterS3BucketArrayOutput)
}

type GetClustersClusterS3BucketOutput struct{ *pulumi.OutputState }

func (GetClustersClusterS3BucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterS3Bucket)(nil)).Elem()
}

func (o GetClustersClusterS3BucketOutput) ToGetClustersClusterS3BucketOutput() GetClustersClusterS3BucketOutput {
	return o
}

func (o GetClustersClusterS3BucketOutput) ToGetClustersClusterS3BucketOutputWithContext(ctx context.Context) GetClustersClusterS3BucketOutput {
	return o
}

// Name of the Object Storage bucket
func (o GetClustersClusterS3BucketOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterS3Bucket) string { return v.Name }).(pulumi.StringOutput)
}

type GetClustersClusterS3BucketArrayOutput struct{ *pulumi.OutputState }

func (GetClustersClusterS3BucketArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterS3Bucket)(nil)).Elem()
}

func (o GetClustersClusterS3BucketArrayOutput) ToGetClustersClusterS3BucketArrayOutput() GetClustersClusterS3BucketArrayOutput {
	return o
}

func (o GetClustersClusterS3BucketArrayOutput) ToGetClustersClusterS3BucketArrayOutputWithContext(ctx context.Context) GetClustersClusterS3BucketArrayOutput {
	return o
}

func (o GetClustersClusterS3BucketArrayOutput) Index(i pulumi.IntInput) GetClustersClusterS3BucketOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClustersClusterS3Bucket {
		return vs[0].([]GetClustersClusterS3Bucket)[vs[1].(int)]
	}).(GetClustersClusterS3BucketOutput)
}

type GetClustersFilter struct {
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

// GetClustersFilterInput is an input type that accepts GetClustersFilterArgs and GetClustersFilterOutput values.
// You can construct a concrete instance of `GetClustersFilterInput` via:
//
//	GetClustersFilterArgs{...}
type GetClustersFilterInput interface {
	pulumi.Input

	ToGetClustersFilterOutput() GetClustersFilterOutput
	ToGetClustersFilterOutputWithContext(context.Context) GetClustersFilterOutput
}

type GetClustersFilterArgs struct {
	Name  pulumi.StringInput `pulumi:"name"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetClustersFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersFilter)(nil)).Elem()
}

func (i GetClustersFilterArgs) ToGetClustersFilterOutput() GetClustersFilterOutput {
	return i.ToGetClustersFilterOutputWithContext(context.Background())
}

func (i GetClustersFilterArgs) ToGetClustersFilterOutputWithContext(ctx context.Context) GetClustersFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersFilterOutput)
}

// GetClustersFilterArrayInput is an input type that accepts GetClustersFilterArray and GetClustersFilterArrayOutput values.
// You can construct a concrete instance of `GetClustersFilterArrayInput` via:
//
//	GetClustersFilterArray{ GetClustersFilterArgs{...} }
type GetClustersFilterArrayInput interface {
	pulumi.Input

	ToGetClustersFilterArrayOutput() GetClustersFilterArrayOutput
	ToGetClustersFilterArrayOutputWithContext(context.Context) GetClustersFilterArrayOutput
}

type GetClustersFilterArray []GetClustersFilterInput

func (GetClustersFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersFilter)(nil)).Elem()
}

func (i GetClustersFilterArray) ToGetClustersFilterArrayOutput() GetClustersFilterArrayOutput {
	return i.ToGetClustersFilterArrayOutputWithContext(context.Background())
}

func (i GetClustersFilterArray) ToGetClustersFilterArrayOutputWithContext(ctx context.Context) GetClustersFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersFilterArrayOutput)
}

type GetClustersFilterOutput struct{ *pulumi.OutputState }

func (GetClustersFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersFilter)(nil)).Elem()
}

func (o GetClustersFilterOutput) ToGetClustersFilterOutput() GetClustersFilterOutput {
	return o
}

func (o GetClustersFilterOutput) ToGetClustersFilterOutputWithContext(ctx context.Context) GetClustersFilterOutput {
	return o
}

func (o GetClustersFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetClustersFilterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersFilter) string { return v.Value }).(pulumi.StringOutput)
}

type GetClustersFilterArrayOutput struct{ *pulumi.OutputState }

func (GetClustersFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersFilter)(nil)).Elem()
}

func (o GetClustersFilterArrayOutput) ToGetClustersFilterArrayOutput() GetClustersFilterArrayOutput {
	return o
}

func (o GetClustersFilterArrayOutput) ToGetClustersFilterArrayOutputWithContext(ctx context.Context) GetClustersFilterArrayOutput {
	return o
}

func (o GetClustersFilterArrayOutput) Index(i pulumi.IntInput) GetClustersFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClustersFilter {
		return vs[0].([]GetClustersFilter)[vs[1].(int)]
	}).(GetClustersFilterOutput)
}

type GetNodePoolAutoScaling struct {
	// The maximum number of worker nodes that the node pool can scale to
	MaxNodeCount int `pulumi:"maxNodeCount"`
	// The minimum number of worker nodes the node pool can scale down to
	MinNodeCount int `pulumi:"minNodeCount"`
}

// GetNodePoolAutoScalingInput is an input type that accepts GetNodePoolAutoScalingArgs and GetNodePoolAutoScalingOutput values.
// You can construct a concrete instance of `GetNodePoolAutoScalingInput` via:
//
//	GetNodePoolAutoScalingArgs{...}
type GetNodePoolAutoScalingInput interface {
	pulumi.Input

	ToGetNodePoolAutoScalingOutput() GetNodePoolAutoScalingOutput
	ToGetNodePoolAutoScalingOutputWithContext(context.Context) GetNodePoolAutoScalingOutput
}

type GetNodePoolAutoScalingArgs struct {
	// The maximum number of worker nodes that the node pool can scale to
	MaxNodeCount pulumi.IntInput `pulumi:"maxNodeCount"`
	// The minimum number of worker nodes the node pool can scale down to
	MinNodeCount pulumi.IntInput `pulumi:"minNodeCount"`
}

func (GetNodePoolAutoScalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolAutoScaling)(nil)).Elem()
}

func (i GetNodePoolAutoScalingArgs) ToGetNodePoolAutoScalingOutput() GetNodePoolAutoScalingOutput {
	return i.ToGetNodePoolAutoScalingOutputWithContext(context.Background())
}

func (i GetNodePoolAutoScalingArgs) ToGetNodePoolAutoScalingOutputWithContext(ctx context.Context) GetNodePoolAutoScalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolAutoScalingOutput)
}

// GetNodePoolAutoScalingArrayInput is an input type that accepts GetNodePoolAutoScalingArray and GetNodePoolAutoScalingArrayOutput values.
// You can construct a concrete instance of `GetNodePoolAutoScalingArrayInput` via:
//
//	GetNodePoolAutoScalingArray{ GetNodePoolAutoScalingArgs{...} }
type GetNodePoolAutoScalingArrayInput interface {
	pulumi.Input

	ToGetNodePoolAutoScalingArrayOutput() GetNodePoolAutoScalingArrayOutput
	ToGetNodePoolAutoScalingArrayOutputWithContext(context.Context) GetNodePoolAutoScalingArrayOutput
}

type GetNodePoolAutoScalingArray []GetNodePoolAutoScalingInput

func (GetNodePoolAutoScalingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolAutoScaling)(nil)).Elem()
}

func (i GetNodePoolAutoScalingArray) ToGetNodePoolAutoScalingArrayOutput() GetNodePoolAutoScalingArrayOutput {
	return i.ToGetNodePoolAutoScalingArrayOutputWithContext(context.Background())
}

func (i GetNodePoolAutoScalingArray) ToGetNodePoolAutoScalingArrayOutputWithContext(ctx context.Context) GetNodePoolAutoScalingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolAutoScalingArrayOutput)
}

type GetNodePoolAutoScalingOutput struct{ *pulumi.OutputState }

func (GetNodePoolAutoScalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolAutoScaling)(nil)).Elem()
}

func (o GetNodePoolAutoScalingOutput) ToGetNodePoolAutoScalingOutput() GetNodePoolAutoScalingOutput {
	return o
}

func (o GetNodePoolAutoScalingOutput) ToGetNodePoolAutoScalingOutputWithContext(ctx context.Context) GetNodePoolAutoScalingOutput {
	return o
}

// The maximum number of worker nodes that the node pool can scale to
func (o GetNodePoolAutoScalingOutput) MaxNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodePoolAutoScaling) int { return v.MaxNodeCount }).(pulumi.IntOutput)
}

// The minimum number of worker nodes the node pool can scale down to
func (o GetNodePoolAutoScalingOutput) MinNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodePoolAutoScaling) int { return v.MinNodeCount }).(pulumi.IntOutput)
}

type GetNodePoolAutoScalingArrayOutput struct{ *pulumi.OutputState }

func (GetNodePoolAutoScalingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolAutoScaling)(nil)).Elem()
}

func (o GetNodePoolAutoScalingArrayOutput) ToGetNodePoolAutoScalingArrayOutput() GetNodePoolAutoScalingArrayOutput {
	return o
}

func (o GetNodePoolAutoScalingArrayOutput) ToGetNodePoolAutoScalingArrayOutputWithContext(ctx context.Context) GetNodePoolAutoScalingArrayOutput {
	return o
}

func (o GetNodePoolAutoScalingArrayOutput) Index(i pulumi.IntInput) GetNodePoolAutoScalingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodePoolAutoScaling {
		return vs[0].([]GetNodePoolAutoScaling)[vs[1].(int)]
	}).(GetNodePoolAutoScalingOutput)
}

type GetNodePoolLan struct {
	// Indicates if the Kubernetes Node Pool LAN will reserve an IP using DHCP
	Dhcp bool `pulumi:"dhcp"`
	// ID of the node pool you want to search for.
	//
	// `k8sClusterId` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
	Id int `pulumi:"id"`
	// An array of additional LANs attached to worker nodes
	Routes []GetNodePoolLanRoute `pulumi:"routes"`
}

// GetNodePoolLanInput is an input type that accepts GetNodePoolLanArgs and GetNodePoolLanOutput values.
// You can construct a concrete instance of `GetNodePoolLanInput` via:
//
//	GetNodePoolLanArgs{...}
type GetNodePoolLanInput interface {
	pulumi.Input

	ToGetNodePoolLanOutput() GetNodePoolLanOutput
	ToGetNodePoolLanOutputWithContext(context.Context) GetNodePoolLanOutput
}

type GetNodePoolLanArgs struct {
	// Indicates if the Kubernetes Node Pool LAN will reserve an IP using DHCP
	Dhcp pulumi.BoolInput `pulumi:"dhcp"`
	// ID of the node pool you want to search for.
	//
	// `k8sClusterId` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
	Id pulumi.IntInput `pulumi:"id"`
	// An array of additional LANs attached to worker nodes
	Routes GetNodePoolLanRouteArrayInput `pulumi:"routes"`
}

func (GetNodePoolLanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolLan)(nil)).Elem()
}

func (i GetNodePoolLanArgs) ToGetNodePoolLanOutput() GetNodePoolLanOutput {
	return i.ToGetNodePoolLanOutputWithContext(context.Background())
}

func (i GetNodePoolLanArgs) ToGetNodePoolLanOutputWithContext(ctx context.Context) GetNodePoolLanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolLanOutput)
}

// GetNodePoolLanArrayInput is an input type that accepts GetNodePoolLanArray and GetNodePoolLanArrayOutput values.
// You can construct a concrete instance of `GetNodePoolLanArrayInput` via:
//
//	GetNodePoolLanArray{ GetNodePoolLanArgs{...} }
type GetNodePoolLanArrayInput interface {
	pulumi.Input

	ToGetNodePoolLanArrayOutput() GetNodePoolLanArrayOutput
	ToGetNodePoolLanArrayOutputWithContext(context.Context) GetNodePoolLanArrayOutput
}

type GetNodePoolLanArray []GetNodePoolLanInput

func (GetNodePoolLanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolLan)(nil)).Elem()
}

func (i GetNodePoolLanArray) ToGetNodePoolLanArrayOutput() GetNodePoolLanArrayOutput {
	return i.ToGetNodePoolLanArrayOutputWithContext(context.Background())
}

func (i GetNodePoolLanArray) ToGetNodePoolLanArrayOutputWithContext(ctx context.Context) GetNodePoolLanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolLanArrayOutput)
}

type GetNodePoolLanOutput struct{ *pulumi.OutputState }

func (GetNodePoolLanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolLan)(nil)).Elem()
}

func (o GetNodePoolLanOutput) ToGetNodePoolLanOutput() GetNodePoolLanOutput {
	return o
}

func (o GetNodePoolLanOutput) ToGetNodePoolLanOutputWithContext(ctx context.Context) GetNodePoolLanOutput {
	return o
}

// Indicates if the Kubernetes Node Pool LAN will reserve an IP using DHCP
func (o GetNodePoolLanOutput) Dhcp() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNodePoolLan) bool { return v.Dhcp }).(pulumi.BoolOutput)
}

// ID of the node pool you want to search for.
//
// `k8sClusterId` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
func (o GetNodePoolLanOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodePoolLan) int { return v.Id }).(pulumi.IntOutput)
}

// An array of additional LANs attached to worker nodes
func (o GetNodePoolLanOutput) Routes() GetNodePoolLanRouteArrayOutput {
	return o.ApplyT(func(v GetNodePoolLan) []GetNodePoolLanRoute { return v.Routes }).(GetNodePoolLanRouteArrayOutput)
}

type GetNodePoolLanArrayOutput struct{ *pulumi.OutputState }

func (GetNodePoolLanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolLan)(nil)).Elem()
}

func (o GetNodePoolLanArrayOutput) ToGetNodePoolLanArrayOutput() GetNodePoolLanArrayOutput {
	return o
}

func (o GetNodePoolLanArrayOutput) ToGetNodePoolLanArrayOutputWithContext(ctx context.Context) GetNodePoolLanArrayOutput {
	return o
}

func (o GetNodePoolLanArrayOutput) Index(i pulumi.IntInput) GetNodePoolLanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodePoolLan {
		return vs[0].([]GetNodePoolLan)[vs[1].(int)]
	}).(GetNodePoolLanOutput)
}

type GetNodePoolLanRoute struct {
	// IPv4 or IPv6 Gateway IP for the route
	GatewayIp string `pulumi:"gatewayIp"`
	// IPv4 or IPv6 CIDR to be routed via the interface
	Network string `pulumi:"network"`
}

// GetNodePoolLanRouteInput is an input type that accepts GetNodePoolLanRouteArgs and GetNodePoolLanRouteOutput values.
// You can construct a concrete instance of `GetNodePoolLanRouteInput` via:
//
//	GetNodePoolLanRouteArgs{...}
type GetNodePoolLanRouteInput interface {
	pulumi.Input

	ToGetNodePoolLanRouteOutput() GetNodePoolLanRouteOutput
	ToGetNodePoolLanRouteOutputWithContext(context.Context) GetNodePoolLanRouteOutput
}

type GetNodePoolLanRouteArgs struct {
	// IPv4 or IPv6 Gateway IP for the route
	GatewayIp pulumi.StringInput `pulumi:"gatewayIp"`
	// IPv4 or IPv6 CIDR to be routed via the interface
	Network pulumi.StringInput `pulumi:"network"`
}

func (GetNodePoolLanRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolLanRoute)(nil)).Elem()
}

func (i GetNodePoolLanRouteArgs) ToGetNodePoolLanRouteOutput() GetNodePoolLanRouteOutput {
	return i.ToGetNodePoolLanRouteOutputWithContext(context.Background())
}

func (i GetNodePoolLanRouteArgs) ToGetNodePoolLanRouteOutputWithContext(ctx context.Context) GetNodePoolLanRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolLanRouteOutput)
}

// GetNodePoolLanRouteArrayInput is an input type that accepts GetNodePoolLanRouteArray and GetNodePoolLanRouteArrayOutput values.
// You can construct a concrete instance of `GetNodePoolLanRouteArrayInput` via:
//
//	GetNodePoolLanRouteArray{ GetNodePoolLanRouteArgs{...} }
type GetNodePoolLanRouteArrayInput interface {
	pulumi.Input

	ToGetNodePoolLanRouteArrayOutput() GetNodePoolLanRouteArrayOutput
	ToGetNodePoolLanRouteArrayOutputWithContext(context.Context) GetNodePoolLanRouteArrayOutput
}

type GetNodePoolLanRouteArray []GetNodePoolLanRouteInput

func (GetNodePoolLanRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolLanRoute)(nil)).Elem()
}

func (i GetNodePoolLanRouteArray) ToGetNodePoolLanRouteArrayOutput() GetNodePoolLanRouteArrayOutput {
	return i.ToGetNodePoolLanRouteArrayOutputWithContext(context.Background())
}

func (i GetNodePoolLanRouteArray) ToGetNodePoolLanRouteArrayOutputWithContext(ctx context.Context) GetNodePoolLanRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolLanRouteArrayOutput)
}

type GetNodePoolLanRouteOutput struct{ *pulumi.OutputState }

func (GetNodePoolLanRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolLanRoute)(nil)).Elem()
}

func (o GetNodePoolLanRouteOutput) ToGetNodePoolLanRouteOutput() GetNodePoolLanRouteOutput {
	return o
}

func (o GetNodePoolLanRouteOutput) ToGetNodePoolLanRouteOutputWithContext(ctx context.Context) GetNodePoolLanRouteOutput {
	return o
}

// IPv4 or IPv6 Gateway IP for the route
func (o GetNodePoolLanRouteOutput) GatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodePoolLanRoute) string { return v.GatewayIp }).(pulumi.StringOutput)
}

// IPv4 or IPv6 CIDR to be routed via the interface
func (o GetNodePoolLanRouteOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodePoolLanRoute) string { return v.Network }).(pulumi.StringOutput)
}

type GetNodePoolLanRouteArrayOutput struct{ *pulumi.OutputState }

func (GetNodePoolLanRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolLanRoute)(nil)).Elem()
}

func (o GetNodePoolLanRouteArrayOutput) ToGetNodePoolLanRouteArrayOutput() GetNodePoolLanRouteArrayOutput {
	return o
}

func (o GetNodePoolLanRouteArrayOutput) ToGetNodePoolLanRouteArrayOutputWithContext(ctx context.Context) GetNodePoolLanRouteArrayOutput {
	return o
}

func (o GetNodePoolLanRouteArrayOutput) Index(i pulumi.IntInput) GetNodePoolLanRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodePoolLanRoute {
		return vs[0].([]GetNodePoolLanRoute)[vs[1].(int)]
	}).(GetNodePoolLanRouteOutput)
}

type GetNodePoolMaintenanceWindow struct {
	// Day of the week when maintenance is allowed
	DayOfTheWeek string `pulumi:"dayOfTheWeek"`
	// A clock time in the day when maintenance is allowed
	Time string `pulumi:"time"`
}

// GetNodePoolMaintenanceWindowInput is an input type that accepts GetNodePoolMaintenanceWindowArgs and GetNodePoolMaintenanceWindowOutput values.
// You can construct a concrete instance of `GetNodePoolMaintenanceWindowInput` via:
//
//	GetNodePoolMaintenanceWindowArgs{...}
type GetNodePoolMaintenanceWindowInput interface {
	pulumi.Input

	ToGetNodePoolMaintenanceWindowOutput() GetNodePoolMaintenanceWindowOutput
	ToGetNodePoolMaintenanceWindowOutputWithContext(context.Context) GetNodePoolMaintenanceWindowOutput
}

type GetNodePoolMaintenanceWindowArgs struct {
	// Day of the week when maintenance is allowed
	DayOfTheWeek pulumi.StringInput `pulumi:"dayOfTheWeek"`
	// A clock time in the day when maintenance is allowed
	Time pulumi.StringInput `pulumi:"time"`
}

func (GetNodePoolMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolMaintenanceWindow)(nil)).Elem()
}

func (i GetNodePoolMaintenanceWindowArgs) ToGetNodePoolMaintenanceWindowOutput() GetNodePoolMaintenanceWindowOutput {
	return i.ToGetNodePoolMaintenanceWindowOutputWithContext(context.Background())
}

func (i GetNodePoolMaintenanceWindowArgs) ToGetNodePoolMaintenanceWindowOutputWithContext(ctx context.Context) GetNodePoolMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolMaintenanceWindowOutput)
}

// GetNodePoolMaintenanceWindowArrayInput is an input type that accepts GetNodePoolMaintenanceWindowArray and GetNodePoolMaintenanceWindowArrayOutput values.
// You can construct a concrete instance of `GetNodePoolMaintenanceWindowArrayInput` via:
//
//	GetNodePoolMaintenanceWindowArray{ GetNodePoolMaintenanceWindowArgs{...} }
type GetNodePoolMaintenanceWindowArrayInput interface {
	pulumi.Input

	ToGetNodePoolMaintenanceWindowArrayOutput() GetNodePoolMaintenanceWindowArrayOutput
	ToGetNodePoolMaintenanceWindowArrayOutputWithContext(context.Context) GetNodePoolMaintenanceWindowArrayOutput
}

type GetNodePoolMaintenanceWindowArray []GetNodePoolMaintenanceWindowInput

func (GetNodePoolMaintenanceWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolMaintenanceWindow)(nil)).Elem()
}

func (i GetNodePoolMaintenanceWindowArray) ToGetNodePoolMaintenanceWindowArrayOutput() GetNodePoolMaintenanceWindowArrayOutput {
	return i.ToGetNodePoolMaintenanceWindowArrayOutputWithContext(context.Background())
}

func (i GetNodePoolMaintenanceWindowArray) ToGetNodePoolMaintenanceWindowArrayOutputWithContext(ctx context.Context) GetNodePoolMaintenanceWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolMaintenanceWindowArrayOutput)
}

type GetNodePoolMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (GetNodePoolMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolMaintenanceWindow)(nil)).Elem()
}

func (o GetNodePoolMaintenanceWindowOutput) ToGetNodePoolMaintenanceWindowOutput() GetNodePoolMaintenanceWindowOutput {
	return o
}

func (o GetNodePoolMaintenanceWindowOutput) ToGetNodePoolMaintenanceWindowOutputWithContext(ctx context.Context) GetNodePoolMaintenanceWindowOutput {
	return o
}

// Day of the week when maintenance is allowed
func (o GetNodePoolMaintenanceWindowOutput) DayOfTheWeek() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodePoolMaintenanceWindow) string { return v.DayOfTheWeek }).(pulumi.StringOutput)
}

// A clock time in the day when maintenance is allowed
func (o GetNodePoolMaintenanceWindowOutput) Time() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodePoolMaintenanceWindow) string { return v.Time }).(pulumi.StringOutput)
}

type GetNodePoolMaintenanceWindowArrayOutput struct{ *pulumi.OutputState }

func (GetNodePoolMaintenanceWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolMaintenanceWindow)(nil)).Elem()
}

func (o GetNodePoolMaintenanceWindowArrayOutput) ToGetNodePoolMaintenanceWindowArrayOutput() GetNodePoolMaintenanceWindowArrayOutput {
	return o
}

func (o GetNodePoolMaintenanceWindowArrayOutput) ToGetNodePoolMaintenanceWindowArrayOutputWithContext(ctx context.Context) GetNodePoolMaintenanceWindowArrayOutput {
	return o
}

func (o GetNodePoolMaintenanceWindowArrayOutput) Index(i pulumi.IntInput) GetNodePoolMaintenanceWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodePoolMaintenanceWindow {
		return vs[0].([]GetNodePoolMaintenanceWindow)[vs[1].(int)]
	}).(GetNodePoolMaintenanceWindowOutput)
}

type GetNodePoolNodesNode struct {
	// ID of the node pool you want to search for.
	//
	// `k8sClusterId` and `nodePoolId` must be provided.
	Id string `pulumi:"id"`
	// The kubernetes version
	K8sVersion string `pulumi:"k8sVersion"`
	// Name of an existing node pool that you want to search for.
	Name string `pulumi:"name"`
	// private ip of the node
	PrivateIp string `pulumi:"privateIp"`
	// public ip of the node
	PublicIp string `pulumi:"publicIp"`
}

// GetNodePoolNodesNodeInput is an input type that accepts GetNodePoolNodesNodeArgs and GetNodePoolNodesNodeOutput values.
// You can construct a concrete instance of `GetNodePoolNodesNodeInput` via:
//
//	GetNodePoolNodesNodeArgs{...}
type GetNodePoolNodesNodeInput interface {
	pulumi.Input

	ToGetNodePoolNodesNodeOutput() GetNodePoolNodesNodeOutput
	ToGetNodePoolNodesNodeOutputWithContext(context.Context) GetNodePoolNodesNodeOutput
}

type GetNodePoolNodesNodeArgs struct {
	// ID of the node pool you want to search for.
	//
	// `k8sClusterId` and `nodePoolId` must be provided.
	Id pulumi.StringInput `pulumi:"id"`
	// The kubernetes version
	K8sVersion pulumi.StringInput `pulumi:"k8sVersion"`
	// Name of an existing node pool that you want to search for.
	Name pulumi.StringInput `pulumi:"name"`
	// private ip of the node
	PrivateIp pulumi.StringInput `pulumi:"privateIp"`
	// public ip of the node
	PublicIp pulumi.StringInput `pulumi:"publicIp"`
}

func (GetNodePoolNodesNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolNodesNode)(nil)).Elem()
}

func (i GetNodePoolNodesNodeArgs) ToGetNodePoolNodesNodeOutput() GetNodePoolNodesNodeOutput {
	return i.ToGetNodePoolNodesNodeOutputWithContext(context.Background())
}

func (i GetNodePoolNodesNodeArgs) ToGetNodePoolNodesNodeOutputWithContext(ctx context.Context) GetNodePoolNodesNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolNodesNodeOutput)
}

// GetNodePoolNodesNodeArrayInput is an input type that accepts GetNodePoolNodesNodeArray and GetNodePoolNodesNodeArrayOutput values.
// You can construct a concrete instance of `GetNodePoolNodesNodeArrayInput` via:
//
//	GetNodePoolNodesNodeArray{ GetNodePoolNodesNodeArgs{...} }
type GetNodePoolNodesNodeArrayInput interface {
	pulumi.Input

	ToGetNodePoolNodesNodeArrayOutput() GetNodePoolNodesNodeArrayOutput
	ToGetNodePoolNodesNodeArrayOutputWithContext(context.Context) GetNodePoolNodesNodeArrayOutput
}

type GetNodePoolNodesNodeArray []GetNodePoolNodesNodeInput

func (GetNodePoolNodesNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolNodesNode)(nil)).Elem()
}

func (i GetNodePoolNodesNodeArray) ToGetNodePoolNodesNodeArrayOutput() GetNodePoolNodesNodeArrayOutput {
	return i.ToGetNodePoolNodesNodeArrayOutputWithContext(context.Background())
}

func (i GetNodePoolNodesNodeArray) ToGetNodePoolNodesNodeArrayOutputWithContext(ctx context.Context) GetNodePoolNodesNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolNodesNodeArrayOutput)
}

type GetNodePoolNodesNodeOutput struct{ *pulumi.OutputState }

func (GetNodePoolNodesNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolNodesNode)(nil)).Elem()
}

func (o GetNodePoolNodesNodeOutput) ToGetNodePoolNodesNodeOutput() GetNodePoolNodesNodeOutput {
	return o
}

func (o GetNodePoolNodesNodeOutput) ToGetNodePoolNodesNodeOutputWithContext(ctx context.Context) GetNodePoolNodesNodeOutput {
	return o
}

// ID of the node pool you want to search for.
//
// `k8sClusterId` and `nodePoolId` must be provided.
func (o GetNodePoolNodesNodeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodePoolNodesNode) string { return v.Id }).(pulumi.StringOutput)
}

// The kubernetes version
func (o GetNodePoolNodesNodeOutput) K8sVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodePoolNodesNode) string { return v.K8sVersion }).(pulumi.StringOutput)
}

// Name of an existing node pool that you want to search for.
func (o GetNodePoolNodesNodeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodePoolNodesNode) string { return v.Name }).(pulumi.StringOutput)
}

// private ip of the node
func (o GetNodePoolNodesNodeOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodePoolNodesNode) string { return v.PrivateIp }).(pulumi.StringOutput)
}

// public ip of the node
func (o GetNodePoolNodesNodeOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodePoolNodesNode) string { return v.PublicIp }).(pulumi.StringOutput)
}

type GetNodePoolNodesNodeArrayOutput struct{ *pulumi.OutputState }

func (GetNodePoolNodesNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolNodesNode)(nil)).Elem()
}

func (o GetNodePoolNodesNodeArrayOutput) ToGetNodePoolNodesNodeArrayOutput() GetNodePoolNodesNodeArrayOutput {
	return o
}

func (o GetNodePoolNodesNodeArrayOutput) ToGetNodePoolNodesNodeArrayOutputWithContext(ctx context.Context) GetNodePoolNodesNodeArrayOutput {
	return o
}

func (o GetNodePoolNodesNodeArrayOutput) Index(i pulumi.IntInput) GetNodePoolNodesNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodePoolNodesNode {
		return vs[0].([]GetNodePoolNodesNode)[vs[1].(int)]
	}).(GetNodePoolNodesNodeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMaintenanceWindowInput)(nil)).Elem(), ClusterMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMaintenanceWindowPtrInput)(nil)).Elem(), ClusterMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterS3BucketInput)(nil)).Elem(), ClusterS3BucketArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterS3BucketArrayInput)(nil)).Elem(), ClusterS3BucketArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolAutoScalingInput)(nil)).Elem(), NodePoolAutoScalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolAutoScalingPtrInput)(nil)).Elem(), NodePoolAutoScalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolLanInput)(nil)).Elem(), NodePoolLanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolLanArrayInput)(nil)).Elem(), NodePoolLanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolLanRouteInput)(nil)).Elem(), NodePoolLanRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolLanRouteArrayInput)(nil)).Elem(), NodePoolLanRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolMaintenanceWindowInput)(nil)).Elem(), NodePoolMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolMaintenanceWindowPtrInput)(nil)).Elem(), NodePoolMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterConfigInput)(nil)).Elem(), GetClusterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterConfigArrayInput)(nil)).Elem(), GetClusterConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterConfigClusterInput)(nil)).Elem(), GetClusterConfigClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterConfigClusterArrayInput)(nil)).Elem(), GetClusterConfigClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterConfigContextInput)(nil)).Elem(), GetClusterConfigContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterConfigContextArrayInput)(nil)).Elem(), GetClusterConfigContextArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterConfigUserInput)(nil)).Elem(), GetClusterConfigUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterConfigUserArrayInput)(nil)).Elem(), GetClusterConfigUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterMaintenanceWindowInput)(nil)).Elem(), GetClusterMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterMaintenanceWindowArrayInput)(nil)).Elem(), GetClusterMaintenanceWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterS3BucketInput)(nil)).Elem(), GetClusterS3BucketArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterS3BucketArrayInput)(nil)).Elem(), GetClusterS3BucketArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterInput)(nil)).Elem(), GetClustersClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterArrayInput)(nil)).Elem(), GetClustersClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterConfigInput)(nil)).Elem(), GetClustersClusterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterConfigArrayInput)(nil)).Elem(), GetClustersClusterConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterConfigClusterInput)(nil)).Elem(), GetClustersClusterConfigClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterConfigClusterArrayInput)(nil)).Elem(), GetClustersClusterConfigClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterConfigContextInput)(nil)).Elem(), GetClustersClusterConfigContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterConfigContextArrayInput)(nil)).Elem(), GetClustersClusterConfigContextArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterConfigUserInput)(nil)).Elem(), GetClustersClusterConfigUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterConfigUserArrayInput)(nil)).Elem(), GetClustersClusterConfigUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterMaintenanceWindowInput)(nil)).Elem(), GetClustersClusterMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterMaintenanceWindowArrayInput)(nil)).Elem(), GetClustersClusterMaintenanceWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterS3BucketInput)(nil)).Elem(), GetClustersClusterS3BucketArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterS3BucketArrayInput)(nil)).Elem(), GetClustersClusterS3BucketArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersFilterInput)(nil)).Elem(), GetClustersFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersFilterArrayInput)(nil)).Elem(), GetClustersFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolAutoScalingInput)(nil)).Elem(), GetNodePoolAutoScalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolAutoScalingArrayInput)(nil)).Elem(), GetNodePoolAutoScalingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolLanInput)(nil)).Elem(), GetNodePoolLanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolLanArrayInput)(nil)).Elem(), GetNodePoolLanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolLanRouteInput)(nil)).Elem(), GetNodePoolLanRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolLanRouteArrayInput)(nil)).Elem(), GetNodePoolLanRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolMaintenanceWindowInput)(nil)).Elem(), GetNodePoolMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolMaintenanceWindowArrayInput)(nil)).Elem(), GetNodePoolMaintenanceWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolNodesNodeInput)(nil)).Elem(), GetNodePoolNodesNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolNodesNodeArrayInput)(nil)).Elem(), GetNodePoolNodesNodeArray{})
	pulumi.RegisterOutputType(ClusterMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(ClusterMaintenanceWindowPtrOutput{})
	pulumi.RegisterOutputType(ClusterS3BucketOutput{})
	pulumi.RegisterOutputType(ClusterS3BucketArrayOutput{})
	pulumi.RegisterOutputType(NodePoolAutoScalingOutput{})
	pulumi.RegisterOutputType(NodePoolAutoScalingPtrOutput{})
	pulumi.RegisterOutputType(NodePoolLanOutput{})
	pulumi.RegisterOutputType(NodePoolLanArrayOutput{})
	pulumi.RegisterOutputType(NodePoolLanRouteOutput{})
	pulumi.RegisterOutputType(NodePoolLanRouteArrayOutput{})
	pulumi.RegisterOutputType(NodePoolMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(NodePoolMaintenanceWindowPtrOutput{})
	pulumi.RegisterOutputType(GetClusterConfigOutput{})
	pulumi.RegisterOutputType(GetClusterConfigArrayOutput{})
	pulumi.RegisterOutputType(GetClusterConfigClusterOutput{})
	pulumi.RegisterOutputType(GetClusterConfigClusterArrayOutput{})
	pulumi.RegisterOutputType(GetClusterConfigContextOutput{})
	pulumi.RegisterOutputType(GetClusterConfigContextArrayOutput{})
	pulumi.RegisterOutputType(GetClusterConfigUserOutput{})
	pulumi.RegisterOutputType(GetClusterConfigUserArrayOutput{})
	pulumi.RegisterOutputType(GetClusterMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(GetClusterMaintenanceWindowArrayOutput{})
	pulumi.RegisterOutputType(GetClusterS3BucketOutput{})
	pulumi.RegisterOutputType(GetClusterS3BucketArrayOutput{})
	pulumi.RegisterOutputType(GetClustersClusterOutput{})
	pulumi.RegisterOutputType(GetClustersClusterArrayOutput{})
	pulumi.RegisterOutputType(GetClustersClusterConfigOutput{})
	pulumi.RegisterOutputType(GetClustersClusterConfigArrayOutput{})
	pulumi.RegisterOutputType(GetClustersClusterConfigClusterOutput{})
	pulumi.RegisterOutputType(GetClustersClusterConfigClusterArrayOutput{})
	pulumi.RegisterOutputType(GetClustersClusterConfigContextOutput{})
	pulumi.RegisterOutputType(GetClustersClusterConfigContextArrayOutput{})
	pulumi.RegisterOutputType(GetClustersClusterConfigUserOutput{})
	pulumi.RegisterOutputType(GetClustersClusterConfigUserArrayOutput{})
	pulumi.RegisterOutputType(GetClustersClusterMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(GetClustersClusterMaintenanceWindowArrayOutput{})
	pulumi.RegisterOutputType(GetClustersClusterS3BucketOutput{})
	pulumi.RegisterOutputType(GetClustersClusterS3BucketArrayOutput{})
	pulumi.RegisterOutputType(GetClustersFilterOutput{})
	pulumi.RegisterOutputType(GetClustersFilterArrayOutput{})
	pulumi.RegisterOutputType(GetNodePoolAutoScalingOutput{})
	pulumi.RegisterOutputType(GetNodePoolAutoScalingArrayOutput{})
	pulumi.RegisterOutputType(GetNodePoolLanOutput{})
	pulumi.RegisterOutputType(GetNodePoolLanArrayOutput{})
	pulumi.RegisterOutputType(GetNodePoolLanRouteOutput{})
	pulumi.RegisterOutputType(GetNodePoolLanRouteArrayOutput{})
	pulumi.RegisterOutputType(GetNodePoolMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(GetNodePoolMaintenanceWindowArrayOutput{})
	pulumi.RegisterOutputType(GetNodePoolNodesNodeOutput{})
	pulumi.RegisterOutputType(GetNodePoolNodesNodeArrayOutput{})
}
