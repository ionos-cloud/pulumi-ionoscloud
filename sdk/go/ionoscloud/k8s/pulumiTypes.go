// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package k8s

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ClusterMaintenanceWindow struct {
	// [string] Day of the week when maintenance is allowed
	DayOfTheWeek string `pulumi:"dayOfTheWeek"`
	// [string] A clock time in the day when maintenance is allowed
	Time string `pulumi:"time"`
}

// ClusterMaintenanceWindowInput is an input type that accepts ClusterMaintenanceWindowArgs and ClusterMaintenanceWindowOutput values.
// You can construct a concrete instance of `ClusterMaintenanceWindowInput` via:
//
//	ClusterMaintenanceWindowArgs{...}
type ClusterMaintenanceWindowInput interface {
	pulumi.Input

	ToClusterMaintenanceWindowOutput() ClusterMaintenanceWindowOutput
	ToClusterMaintenanceWindowOutputWithContext(context.Context) ClusterMaintenanceWindowOutput
}

type ClusterMaintenanceWindowArgs struct {
	// [string] Day of the week when maintenance is allowed
	DayOfTheWeek pulumi.StringInput `pulumi:"dayOfTheWeek"`
	// [string] A clock time in the day when maintenance is allowed
	Time pulumi.StringInput `pulumi:"time"`
}

func (ClusterMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMaintenanceWindow)(nil)).Elem()
}

func (i ClusterMaintenanceWindowArgs) ToClusterMaintenanceWindowOutput() ClusterMaintenanceWindowOutput {
	return i.ToClusterMaintenanceWindowOutputWithContext(context.Background())
}

func (i ClusterMaintenanceWindowArgs) ToClusterMaintenanceWindowOutputWithContext(ctx context.Context) ClusterMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMaintenanceWindowOutput)
}

func (i ClusterMaintenanceWindowArgs) ToClusterMaintenanceWindowPtrOutput() ClusterMaintenanceWindowPtrOutput {
	return i.ToClusterMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i ClusterMaintenanceWindowArgs) ToClusterMaintenanceWindowPtrOutputWithContext(ctx context.Context) ClusterMaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMaintenanceWindowOutput).ToClusterMaintenanceWindowPtrOutputWithContext(ctx)
}

// ClusterMaintenanceWindowPtrInput is an input type that accepts ClusterMaintenanceWindowArgs, ClusterMaintenanceWindowPtr and ClusterMaintenanceWindowPtrOutput values.
// You can construct a concrete instance of `ClusterMaintenanceWindowPtrInput` via:
//
//	        ClusterMaintenanceWindowArgs{...}
//
//	or:
//
//	        nil
type ClusterMaintenanceWindowPtrInput interface {
	pulumi.Input

	ToClusterMaintenanceWindowPtrOutput() ClusterMaintenanceWindowPtrOutput
	ToClusterMaintenanceWindowPtrOutputWithContext(context.Context) ClusterMaintenanceWindowPtrOutput
}

type clusterMaintenanceWindowPtrType ClusterMaintenanceWindowArgs

func ClusterMaintenanceWindowPtr(v *ClusterMaintenanceWindowArgs) ClusterMaintenanceWindowPtrInput {
	return (*clusterMaintenanceWindowPtrType)(v)
}

func (*clusterMaintenanceWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterMaintenanceWindow)(nil)).Elem()
}

func (i *clusterMaintenanceWindowPtrType) ToClusterMaintenanceWindowPtrOutput() ClusterMaintenanceWindowPtrOutput {
	return i.ToClusterMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i *clusterMaintenanceWindowPtrType) ToClusterMaintenanceWindowPtrOutputWithContext(ctx context.Context) ClusterMaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMaintenanceWindowPtrOutput)
}

type ClusterMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (ClusterMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMaintenanceWindow)(nil)).Elem()
}

func (o ClusterMaintenanceWindowOutput) ToClusterMaintenanceWindowOutput() ClusterMaintenanceWindowOutput {
	return o
}

func (o ClusterMaintenanceWindowOutput) ToClusterMaintenanceWindowOutputWithContext(ctx context.Context) ClusterMaintenanceWindowOutput {
	return o
}

func (o ClusterMaintenanceWindowOutput) ToClusterMaintenanceWindowPtrOutput() ClusterMaintenanceWindowPtrOutput {
	return o.ToClusterMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (o ClusterMaintenanceWindowOutput) ToClusterMaintenanceWindowPtrOutputWithContext(ctx context.Context) ClusterMaintenanceWindowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterMaintenanceWindow) *ClusterMaintenanceWindow {
		return &v
	}).(ClusterMaintenanceWindowPtrOutput)
}

// [string] Day of the week when maintenance is allowed
func (o ClusterMaintenanceWindowOutput) DayOfTheWeek() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterMaintenanceWindow) string { return v.DayOfTheWeek }).(pulumi.StringOutput)
}

// [string] A clock time in the day when maintenance is allowed
func (o ClusterMaintenanceWindowOutput) Time() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterMaintenanceWindow) string { return v.Time }).(pulumi.StringOutput)
}

type ClusterMaintenanceWindowPtrOutput struct{ *pulumi.OutputState }

func (ClusterMaintenanceWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterMaintenanceWindow)(nil)).Elem()
}

func (o ClusterMaintenanceWindowPtrOutput) ToClusterMaintenanceWindowPtrOutput() ClusterMaintenanceWindowPtrOutput {
	return o
}

func (o ClusterMaintenanceWindowPtrOutput) ToClusterMaintenanceWindowPtrOutputWithContext(ctx context.Context) ClusterMaintenanceWindowPtrOutput {
	return o
}

func (o ClusterMaintenanceWindowPtrOutput) Elem() ClusterMaintenanceWindowOutput {
	return o.ApplyT(func(v *ClusterMaintenanceWindow) ClusterMaintenanceWindow {
		if v != nil {
			return *v
		}
		var ret ClusterMaintenanceWindow
		return ret
	}).(ClusterMaintenanceWindowOutput)
}

// [string] Day of the week when maintenance is allowed
func (o ClusterMaintenanceWindowPtrOutput) DayOfTheWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterMaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return &v.DayOfTheWeek
	}).(pulumi.StringPtrOutput)
}

// [string] A clock time in the day when maintenance is allowed
func (o ClusterMaintenanceWindowPtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterMaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return &v.Time
	}).(pulumi.StringPtrOutput)
}

type ClusterS3Bucket struct {
	// [string] The name of the Kubernetes Cluster.
	Name *string `pulumi:"name"`
}

// ClusterS3BucketInput is an input type that accepts ClusterS3BucketArgs and ClusterS3BucketOutput values.
// You can construct a concrete instance of `ClusterS3BucketInput` via:
//
//	ClusterS3BucketArgs{...}
type ClusterS3BucketInput interface {
	pulumi.Input

	ToClusterS3BucketOutput() ClusterS3BucketOutput
	ToClusterS3BucketOutputWithContext(context.Context) ClusterS3BucketOutput
}

type ClusterS3BucketArgs struct {
	// [string] The name of the Kubernetes Cluster.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ClusterS3BucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterS3Bucket)(nil)).Elem()
}

func (i ClusterS3BucketArgs) ToClusterS3BucketOutput() ClusterS3BucketOutput {
	return i.ToClusterS3BucketOutputWithContext(context.Background())
}

func (i ClusterS3BucketArgs) ToClusterS3BucketOutputWithContext(ctx context.Context) ClusterS3BucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterS3BucketOutput)
}

// ClusterS3BucketArrayInput is an input type that accepts ClusterS3BucketArray and ClusterS3BucketArrayOutput values.
// You can construct a concrete instance of `ClusterS3BucketArrayInput` via:
//
//	ClusterS3BucketArray{ ClusterS3BucketArgs{...} }
type ClusterS3BucketArrayInput interface {
	pulumi.Input

	ToClusterS3BucketArrayOutput() ClusterS3BucketArrayOutput
	ToClusterS3BucketArrayOutputWithContext(context.Context) ClusterS3BucketArrayOutput
}

type ClusterS3BucketArray []ClusterS3BucketInput

func (ClusterS3BucketArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterS3Bucket)(nil)).Elem()
}

func (i ClusterS3BucketArray) ToClusterS3BucketArrayOutput() ClusterS3BucketArrayOutput {
	return i.ToClusterS3BucketArrayOutputWithContext(context.Background())
}

func (i ClusterS3BucketArray) ToClusterS3BucketArrayOutputWithContext(ctx context.Context) ClusterS3BucketArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterS3BucketArrayOutput)
}

type ClusterS3BucketOutput struct{ *pulumi.OutputState }

func (ClusterS3BucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterS3Bucket)(nil)).Elem()
}

func (o ClusterS3BucketOutput) ToClusterS3BucketOutput() ClusterS3BucketOutput {
	return o
}

func (o ClusterS3BucketOutput) ToClusterS3BucketOutputWithContext(ctx context.Context) ClusterS3BucketOutput {
	return o
}

// [string] The name of the Kubernetes Cluster.
func (o ClusterS3BucketOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterS3Bucket) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ClusterS3BucketArrayOutput struct{ *pulumi.OutputState }

func (ClusterS3BucketArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterS3Bucket)(nil)).Elem()
}

func (o ClusterS3BucketArrayOutput) ToClusterS3BucketArrayOutput() ClusterS3BucketArrayOutput {
	return o
}

func (o ClusterS3BucketArrayOutput) ToClusterS3BucketArrayOutputWithContext(ctx context.Context) ClusterS3BucketArrayOutput {
	return o
}

func (o ClusterS3BucketArrayOutput) Index(i pulumi.IntInput) ClusterS3BucketOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterS3Bucket {
		return vs[0].([]ClusterS3Bucket)[vs[1].(int)]
	}).(ClusterS3BucketOutput)
}

type NodePoolAutoScaling struct {
	// [int] The maximum number of worker nodes that the node pool can scale to. Should be greater than min_node_count
	MaxNodeCount int `pulumi:"maxNodeCount"`
	// [int] The minimum number of worker nodes the node pool can scale down to. Should be less than max_node_count
	MinNodeCount int `pulumi:"minNodeCount"`
}

// NodePoolAutoScalingInput is an input type that accepts NodePoolAutoScalingArgs and NodePoolAutoScalingOutput values.
// You can construct a concrete instance of `NodePoolAutoScalingInput` via:
//
//	NodePoolAutoScalingArgs{...}
type NodePoolAutoScalingInput interface {
	pulumi.Input

	ToNodePoolAutoScalingOutput() NodePoolAutoScalingOutput
	ToNodePoolAutoScalingOutputWithContext(context.Context) NodePoolAutoScalingOutput
}

type NodePoolAutoScalingArgs struct {
	// [int] The maximum number of worker nodes that the node pool can scale to. Should be greater than min_node_count
	MaxNodeCount pulumi.IntInput `pulumi:"maxNodeCount"`
	// [int] The minimum number of worker nodes the node pool can scale down to. Should be less than max_node_count
	MinNodeCount pulumi.IntInput `pulumi:"minNodeCount"`
}

func (NodePoolAutoScalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolAutoScaling)(nil)).Elem()
}

func (i NodePoolAutoScalingArgs) ToNodePoolAutoScalingOutput() NodePoolAutoScalingOutput {
	return i.ToNodePoolAutoScalingOutputWithContext(context.Background())
}

func (i NodePoolAutoScalingArgs) ToNodePoolAutoScalingOutputWithContext(ctx context.Context) NodePoolAutoScalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolAutoScalingOutput)
}

func (i NodePoolAutoScalingArgs) ToNodePoolAutoScalingPtrOutput() NodePoolAutoScalingPtrOutput {
	return i.ToNodePoolAutoScalingPtrOutputWithContext(context.Background())
}

func (i NodePoolAutoScalingArgs) ToNodePoolAutoScalingPtrOutputWithContext(ctx context.Context) NodePoolAutoScalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolAutoScalingOutput).ToNodePoolAutoScalingPtrOutputWithContext(ctx)
}

// NodePoolAutoScalingPtrInput is an input type that accepts NodePoolAutoScalingArgs, NodePoolAutoScalingPtr and NodePoolAutoScalingPtrOutput values.
// You can construct a concrete instance of `NodePoolAutoScalingPtrInput` via:
//
//	        NodePoolAutoScalingArgs{...}
//
//	or:
//
//	        nil
type NodePoolAutoScalingPtrInput interface {
	pulumi.Input

	ToNodePoolAutoScalingPtrOutput() NodePoolAutoScalingPtrOutput
	ToNodePoolAutoScalingPtrOutputWithContext(context.Context) NodePoolAutoScalingPtrOutput
}

type nodePoolAutoScalingPtrType NodePoolAutoScalingArgs

func NodePoolAutoScalingPtr(v *NodePoolAutoScalingArgs) NodePoolAutoScalingPtrInput {
	return (*nodePoolAutoScalingPtrType)(v)
}

func (*nodePoolAutoScalingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolAutoScaling)(nil)).Elem()
}

func (i *nodePoolAutoScalingPtrType) ToNodePoolAutoScalingPtrOutput() NodePoolAutoScalingPtrOutput {
	return i.ToNodePoolAutoScalingPtrOutputWithContext(context.Background())
}

func (i *nodePoolAutoScalingPtrType) ToNodePoolAutoScalingPtrOutputWithContext(ctx context.Context) NodePoolAutoScalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolAutoScalingPtrOutput)
}

type NodePoolAutoScalingOutput struct{ *pulumi.OutputState }

func (NodePoolAutoScalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolAutoScaling)(nil)).Elem()
}

func (o NodePoolAutoScalingOutput) ToNodePoolAutoScalingOutput() NodePoolAutoScalingOutput {
	return o
}

func (o NodePoolAutoScalingOutput) ToNodePoolAutoScalingOutputWithContext(ctx context.Context) NodePoolAutoScalingOutput {
	return o
}

func (o NodePoolAutoScalingOutput) ToNodePoolAutoScalingPtrOutput() NodePoolAutoScalingPtrOutput {
	return o.ToNodePoolAutoScalingPtrOutputWithContext(context.Background())
}

func (o NodePoolAutoScalingOutput) ToNodePoolAutoScalingPtrOutputWithContext(ctx context.Context) NodePoolAutoScalingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodePoolAutoScaling) *NodePoolAutoScaling {
		return &v
	}).(NodePoolAutoScalingPtrOutput)
}

// [int] The maximum number of worker nodes that the node pool can scale to. Should be greater than min_node_count
func (o NodePoolAutoScalingOutput) MaxNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodePoolAutoScaling) int { return v.MaxNodeCount }).(pulumi.IntOutput)
}

// [int] The minimum number of worker nodes the node pool can scale down to. Should be less than max_node_count
func (o NodePoolAutoScalingOutput) MinNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodePoolAutoScaling) int { return v.MinNodeCount }).(pulumi.IntOutput)
}

type NodePoolAutoScalingPtrOutput struct{ *pulumi.OutputState }

func (NodePoolAutoScalingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolAutoScaling)(nil)).Elem()
}

func (o NodePoolAutoScalingPtrOutput) ToNodePoolAutoScalingPtrOutput() NodePoolAutoScalingPtrOutput {
	return o
}

func (o NodePoolAutoScalingPtrOutput) ToNodePoolAutoScalingPtrOutputWithContext(ctx context.Context) NodePoolAutoScalingPtrOutput {
	return o
}

func (o NodePoolAutoScalingPtrOutput) Elem() NodePoolAutoScalingOutput {
	return o.ApplyT(func(v *NodePoolAutoScaling) NodePoolAutoScaling {
		if v != nil {
			return *v
		}
		var ret NodePoolAutoScaling
		return ret
	}).(NodePoolAutoScalingOutput)
}

// [int] The maximum number of worker nodes that the node pool can scale to. Should be greater than min_node_count
func (o NodePoolAutoScalingPtrOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePoolAutoScaling) *int {
		if v == nil {
			return nil
		}
		return &v.MaxNodeCount
	}).(pulumi.IntPtrOutput)
}

// [int] The minimum number of worker nodes the node pool can scale down to. Should be less than max_node_count
func (o NodePoolAutoScalingPtrOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePoolAutoScaling) *int {
		if v == nil {
			return nil
		}
		return &v.MinNodeCount
	}).(pulumi.IntPtrOutput)
}

type NodePoolLan struct {
	// [boolean] Indicates if the Kubernetes Node Pool LAN will reserve an IP using DHCP. Default value is `true`
	Dhcp *bool `pulumi:"dhcp"`
	// [int] The LAN ID of an existing LAN at the related datacenter
	Id int `pulumi:"id"`
	// An array of additional LANs attached to worker nodes
	Routes []NodePoolLanRoute `pulumi:"routes"`
}

// NodePoolLanInput is an input type that accepts NodePoolLanArgs and NodePoolLanOutput values.
// You can construct a concrete instance of `NodePoolLanInput` via:
//
//	NodePoolLanArgs{...}
type NodePoolLanInput interface {
	pulumi.Input

	ToNodePoolLanOutput() NodePoolLanOutput
	ToNodePoolLanOutputWithContext(context.Context) NodePoolLanOutput
}

type NodePoolLanArgs struct {
	// [boolean] Indicates if the Kubernetes Node Pool LAN will reserve an IP using DHCP. Default value is `true`
	Dhcp pulumi.BoolPtrInput `pulumi:"dhcp"`
	// [int] The LAN ID of an existing LAN at the related datacenter
	Id pulumi.IntInput `pulumi:"id"`
	// An array of additional LANs attached to worker nodes
	Routes NodePoolLanRouteArrayInput `pulumi:"routes"`
}

func (NodePoolLanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolLan)(nil)).Elem()
}

func (i NodePoolLanArgs) ToNodePoolLanOutput() NodePoolLanOutput {
	return i.ToNodePoolLanOutputWithContext(context.Background())
}

func (i NodePoolLanArgs) ToNodePoolLanOutputWithContext(ctx context.Context) NodePoolLanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolLanOutput)
}

// NodePoolLanArrayInput is an input type that accepts NodePoolLanArray and NodePoolLanArrayOutput values.
// You can construct a concrete instance of `NodePoolLanArrayInput` via:
//
//	NodePoolLanArray{ NodePoolLanArgs{...} }
type NodePoolLanArrayInput interface {
	pulumi.Input

	ToNodePoolLanArrayOutput() NodePoolLanArrayOutput
	ToNodePoolLanArrayOutputWithContext(context.Context) NodePoolLanArrayOutput
}

type NodePoolLanArray []NodePoolLanInput

func (NodePoolLanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolLan)(nil)).Elem()
}

func (i NodePoolLanArray) ToNodePoolLanArrayOutput() NodePoolLanArrayOutput {
	return i.ToNodePoolLanArrayOutputWithContext(context.Background())
}

func (i NodePoolLanArray) ToNodePoolLanArrayOutputWithContext(ctx context.Context) NodePoolLanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolLanArrayOutput)
}

type NodePoolLanOutput struct{ *pulumi.OutputState }

func (NodePoolLanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolLan)(nil)).Elem()
}

func (o NodePoolLanOutput) ToNodePoolLanOutput() NodePoolLanOutput {
	return o
}

func (o NodePoolLanOutput) ToNodePoolLanOutputWithContext(ctx context.Context) NodePoolLanOutput {
	return o
}

// [boolean] Indicates if the Kubernetes Node Pool LAN will reserve an IP using DHCP. Default value is `true`
func (o NodePoolLanOutput) Dhcp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodePoolLan) *bool { return v.Dhcp }).(pulumi.BoolPtrOutput)
}

// [int] The LAN ID of an existing LAN at the related datacenter
func (o NodePoolLanOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v NodePoolLan) int { return v.Id }).(pulumi.IntOutput)
}

// An array of additional LANs attached to worker nodes
func (o NodePoolLanOutput) Routes() NodePoolLanRouteArrayOutput {
	return o.ApplyT(func(v NodePoolLan) []NodePoolLanRoute { return v.Routes }).(NodePoolLanRouteArrayOutput)
}

type NodePoolLanArrayOutput struct{ *pulumi.OutputState }

func (NodePoolLanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolLan)(nil)).Elem()
}

func (o NodePoolLanArrayOutput) ToNodePoolLanArrayOutput() NodePoolLanArrayOutput {
	return o
}

func (o NodePoolLanArrayOutput) ToNodePoolLanArrayOutputWithContext(ctx context.Context) NodePoolLanArrayOutput {
	return o
}

func (o NodePoolLanArrayOutput) Index(i pulumi.IntInput) NodePoolLanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodePoolLan {
		return vs[0].([]NodePoolLan)[vs[1].(int)]
	}).(NodePoolLanOutput)
}

type NodePoolLanRoute struct {
	// [string] IPv4 or IPv6 Gateway IP for the route
	GatewayIp string `pulumi:"gatewayIp"`
	// [string] IPv4 or IPv6 CIDR to be routed via the interface
	Network string `pulumi:"network"`
}

// NodePoolLanRouteInput is an input type that accepts NodePoolLanRouteArgs and NodePoolLanRouteOutput values.
// You can construct a concrete instance of `NodePoolLanRouteInput` via:
//
//	NodePoolLanRouteArgs{...}
type NodePoolLanRouteInput interface {
	pulumi.Input

	ToNodePoolLanRouteOutput() NodePoolLanRouteOutput
	ToNodePoolLanRouteOutputWithContext(context.Context) NodePoolLanRouteOutput
}

type NodePoolLanRouteArgs struct {
	// [string] IPv4 or IPv6 Gateway IP for the route
	GatewayIp pulumi.StringInput `pulumi:"gatewayIp"`
	// [string] IPv4 or IPv6 CIDR to be routed via the interface
	Network pulumi.StringInput `pulumi:"network"`
}

func (NodePoolLanRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolLanRoute)(nil)).Elem()
}

func (i NodePoolLanRouteArgs) ToNodePoolLanRouteOutput() NodePoolLanRouteOutput {
	return i.ToNodePoolLanRouteOutputWithContext(context.Background())
}

func (i NodePoolLanRouteArgs) ToNodePoolLanRouteOutputWithContext(ctx context.Context) NodePoolLanRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolLanRouteOutput)
}

// NodePoolLanRouteArrayInput is an input type that accepts NodePoolLanRouteArray and NodePoolLanRouteArrayOutput values.
// You can construct a concrete instance of `NodePoolLanRouteArrayInput` via:
//
//	NodePoolLanRouteArray{ NodePoolLanRouteArgs{...} }
type NodePoolLanRouteArrayInput interface {
	pulumi.Input

	ToNodePoolLanRouteArrayOutput() NodePoolLanRouteArrayOutput
	ToNodePoolLanRouteArrayOutputWithContext(context.Context) NodePoolLanRouteArrayOutput
}

type NodePoolLanRouteArray []NodePoolLanRouteInput

func (NodePoolLanRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolLanRoute)(nil)).Elem()
}

func (i NodePoolLanRouteArray) ToNodePoolLanRouteArrayOutput() NodePoolLanRouteArrayOutput {
	return i.ToNodePoolLanRouteArrayOutputWithContext(context.Background())
}

func (i NodePoolLanRouteArray) ToNodePoolLanRouteArrayOutputWithContext(ctx context.Context) NodePoolLanRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolLanRouteArrayOutput)
}

type NodePoolLanRouteOutput struct{ *pulumi.OutputState }

func (NodePoolLanRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolLanRoute)(nil)).Elem()
}

func (o NodePoolLanRouteOutput) ToNodePoolLanRouteOutput() NodePoolLanRouteOutput {
	return o
}

func (o NodePoolLanRouteOutput) ToNodePoolLanRouteOutputWithContext(ctx context.Context) NodePoolLanRouteOutput {
	return o
}

// [string] IPv4 or IPv6 Gateway IP for the route
func (o NodePoolLanRouteOutput) GatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolLanRoute) string { return v.GatewayIp }).(pulumi.StringOutput)
}

// [string] IPv4 or IPv6 CIDR to be routed via the interface
func (o NodePoolLanRouteOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolLanRoute) string { return v.Network }).(pulumi.StringOutput)
}

type NodePoolLanRouteArrayOutput struct{ *pulumi.OutputState }

func (NodePoolLanRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolLanRoute)(nil)).Elem()
}

func (o NodePoolLanRouteArrayOutput) ToNodePoolLanRouteArrayOutput() NodePoolLanRouteArrayOutput {
	return o
}

func (o NodePoolLanRouteArrayOutput) ToNodePoolLanRouteArrayOutputWithContext(ctx context.Context) NodePoolLanRouteArrayOutput {
	return o
}

func (o NodePoolLanRouteArrayOutput) Index(i pulumi.IntInput) NodePoolLanRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodePoolLanRoute {
		return vs[0].([]NodePoolLanRoute)[vs[1].(int)]
	}).(NodePoolLanRouteOutput)
}

type NodePoolMaintenanceWindow struct {
	// [string] Day of the week when maintenance is allowed
	DayOfTheWeek string `pulumi:"dayOfTheWeek"`
	// [string] A clock time in the day when maintenance is allowed
	Time string `pulumi:"time"`
}

// NodePoolMaintenanceWindowInput is an input type that accepts NodePoolMaintenanceWindowArgs and NodePoolMaintenanceWindowOutput values.
// You can construct a concrete instance of `NodePoolMaintenanceWindowInput` via:
//
//	NodePoolMaintenanceWindowArgs{...}
type NodePoolMaintenanceWindowInput interface {
	pulumi.Input

	ToNodePoolMaintenanceWindowOutput() NodePoolMaintenanceWindowOutput
	ToNodePoolMaintenanceWindowOutputWithContext(context.Context) NodePoolMaintenanceWindowOutput
}

type NodePoolMaintenanceWindowArgs struct {
	// [string] Day of the week when maintenance is allowed
	DayOfTheWeek pulumi.StringInput `pulumi:"dayOfTheWeek"`
	// [string] A clock time in the day when maintenance is allowed
	Time pulumi.StringInput `pulumi:"time"`
}

func (NodePoolMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolMaintenanceWindow)(nil)).Elem()
}

func (i NodePoolMaintenanceWindowArgs) ToNodePoolMaintenanceWindowOutput() NodePoolMaintenanceWindowOutput {
	return i.ToNodePoolMaintenanceWindowOutputWithContext(context.Background())
}

func (i NodePoolMaintenanceWindowArgs) ToNodePoolMaintenanceWindowOutputWithContext(ctx context.Context) NodePoolMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolMaintenanceWindowOutput)
}

func (i NodePoolMaintenanceWindowArgs) ToNodePoolMaintenanceWindowPtrOutput() NodePoolMaintenanceWindowPtrOutput {
	return i.ToNodePoolMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i NodePoolMaintenanceWindowArgs) ToNodePoolMaintenanceWindowPtrOutputWithContext(ctx context.Context) NodePoolMaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolMaintenanceWindowOutput).ToNodePoolMaintenanceWindowPtrOutputWithContext(ctx)
}

// NodePoolMaintenanceWindowPtrInput is an input type that accepts NodePoolMaintenanceWindowArgs, NodePoolMaintenanceWindowPtr and NodePoolMaintenanceWindowPtrOutput values.
// You can construct a concrete instance of `NodePoolMaintenanceWindowPtrInput` via:
//
//	        NodePoolMaintenanceWindowArgs{...}
//
//	or:
//
//	        nil
type NodePoolMaintenanceWindowPtrInput interface {
	pulumi.Input

	ToNodePoolMaintenanceWindowPtrOutput() NodePoolMaintenanceWindowPtrOutput
	ToNodePoolMaintenanceWindowPtrOutputWithContext(context.Context) NodePoolMaintenanceWindowPtrOutput
}

type nodePoolMaintenanceWindowPtrType NodePoolMaintenanceWindowArgs

func NodePoolMaintenanceWindowPtr(v *NodePoolMaintenanceWindowArgs) NodePoolMaintenanceWindowPtrInput {
	return (*nodePoolMaintenanceWindowPtrType)(v)
}

func (*nodePoolMaintenanceWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolMaintenanceWindow)(nil)).Elem()
}

func (i *nodePoolMaintenanceWindowPtrType) ToNodePoolMaintenanceWindowPtrOutput() NodePoolMaintenanceWindowPtrOutput {
	return i.ToNodePoolMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i *nodePoolMaintenanceWindowPtrType) ToNodePoolMaintenanceWindowPtrOutputWithContext(ctx context.Context) NodePoolMaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolMaintenanceWindowPtrOutput)
}

type NodePoolMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (NodePoolMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolMaintenanceWindow)(nil)).Elem()
}

func (o NodePoolMaintenanceWindowOutput) ToNodePoolMaintenanceWindowOutput() NodePoolMaintenanceWindowOutput {
	return o
}

func (o NodePoolMaintenanceWindowOutput) ToNodePoolMaintenanceWindowOutputWithContext(ctx context.Context) NodePoolMaintenanceWindowOutput {
	return o
}

func (o NodePoolMaintenanceWindowOutput) ToNodePoolMaintenanceWindowPtrOutput() NodePoolMaintenanceWindowPtrOutput {
	return o.ToNodePoolMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (o NodePoolMaintenanceWindowOutput) ToNodePoolMaintenanceWindowPtrOutputWithContext(ctx context.Context) NodePoolMaintenanceWindowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodePoolMaintenanceWindow) *NodePoolMaintenanceWindow {
		return &v
	}).(NodePoolMaintenanceWindowPtrOutput)
}

// [string] Day of the week when maintenance is allowed
func (o NodePoolMaintenanceWindowOutput) DayOfTheWeek() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolMaintenanceWindow) string { return v.DayOfTheWeek }).(pulumi.StringOutput)
}

// [string] A clock time in the day when maintenance is allowed
func (o NodePoolMaintenanceWindowOutput) Time() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolMaintenanceWindow) string { return v.Time }).(pulumi.StringOutput)
}

type NodePoolMaintenanceWindowPtrOutput struct{ *pulumi.OutputState }

func (NodePoolMaintenanceWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolMaintenanceWindow)(nil)).Elem()
}

func (o NodePoolMaintenanceWindowPtrOutput) ToNodePoolMaintenanceWindowPtrOutput() NodePoolMaintenanceWindowPtrOutput {
	return o
}

func (o NodePoolMaintenanceWindowPtrOutput) ToNodePoolMaintenanceWindowPtrOutputWithContext(ctx context.Context) NodePoolMaintenanceWindowPtrOutput {
	return o
}

func (o NodePoolMaintenanceWindowPtrOutput) Elem() NodePoolMaintenanceWindowOutput {
	return o.ApplyT(func(v *NodePoolMaintenanceWindow) NodePoolMaintenanceWindow {
		if v != nil {
			return *v
		}
		var ret NodePoolMaintenanceWindow
		return ret
	}).(NodePoolMaintenanceWindowOutput)
}

// [string] Day of the week when maintenance is allowed
func (o NodePoolMaintenanceWindowPtrOutput) DayOfTheWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolMaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return &v.DayOfTheWeek
	}).(pulumi.StringPtrOutput)
}

// [string] A clock time in the day when maintenance is allowed
func (o NodePoolMaintenanceWindowPtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolMaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return &v.Time
	}).(pulumi.StringPtrOutput)
}

type GetClusterConfig struct {
	ApiVersion     string                    `pulumi:"apiVersion"`
	Clusters       []GetClusterConfigCluster `pulumi:"clusters"`
	Contexts       []GetClusterConfigContext `pulumi:"contexts"`
	CurrentContext string                    `pulumi:"currentContext"`
	Kind           string                    `pulumi:"kind"`
	Users          []GetClusterConfigUser    `pulumi:"users"`
}

// GetClusterConfigInput is an input type that accepts GetClusterConfigArgs and GetClusterConfigOutput values.
// You can construct a concrete instance of `GetClusterConfigInput` via:
//
//	GetClusterConfigArgs{...}
type GetClusterConfigInput interface {
	pulumi.Input

	ToGetClusterConfigOutput() GetClusterConfigOutput
	ToGetClusterConfigOutputWithContext(context.Context) GetClusterConfigOutput
}

type GetClusterConfigArgs struct {
	ApiVersion     pulumi.StringInput                `pulumi:"apiVersion"`
	Clusters       GetClusterConfigClusterArrayInput `pulumi:"clusters"`
	Contexts       GetClusterConfigContextArrayInput `pulumi:"contexts"`
	CurrentContext pulumi.StringInput                `pulumi:"currentContext"`
	Kind           pulumi.StringInput                `pulumi:"kind"`
	Users          GetClusterConfigUserArrayInput    `pulumi:"users"`
}

func (GetClusterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterConfig)(nil)).Elem()
}

func (i GetClusterConfigArgs) ToGetClusterConfigOutput() GetClusterConfigOutput {
	return i.ToGetClusterConfigOutputWithContext(context.Background())
}

func (i GetClusterConfigArgs) ToGetClusterConfigOutputWithContext(ctx context.Context) GetClusterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterConfigOutput)
}

// GetClusterConfigArrayInput is an input type that accepts GetClusterConfigArray and GetClusterConfigArrayOutput values.
// You can construct a concrete instance of `GetClusterConfigArrayInput` via:
//
//	GetClusterConfigArray{ GetClusterConfigArgs{...} }
type GetClusterConfigArrayInput interface {
	pulumi.Input

	ToGetClusterConfigArrayOutput() GetClusterConfigArrayOutput
	ToGetClusterConfigArrayOutputWithContext(context.Context) GetClusterConfigArrayOutput
}

type GetClusterConfigArray []GetClusterConfigInput

func (GetClusterConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterConfig)(nil)).Elem()
}

func (i GetClusterConfigArray) ToGetClusterConfigArrayOutput() GetClusterConfigArrayOutput {
	return i.ToGetClusterConfigArrayOutputWithContext(context.Background())
}

func (i GetClusterConfigArray) ToGetClusterConfigArrayOutputWithContext(ctx context.Context) GetClusterConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterConfigArrayOutput)
}

type GetClusterConfigOutput struct{ *pulumi.OutputState }

func (GetClusterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterConfig)(nil)).Elem()
}

func (o GetClusterConfigOutput) ToGetClusterConfigOutput() GetClusterConfigOutput {
	return o
}

func (o GetClusterConfigOutput) ToGetClusterConfigOutputWithContext(ctx context.Context) GetClusterConfigOutput {
	return o
}

func (o GetClusterConfigOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterConfig) string { return v.ApiVersion }).(pulumi.StringOutput)
}

func (o GetClusterConfigOutput) Clusters() GetClusterConfigClusterArrayOutput {
	return o.ApplyT(func(v GetClusterConfig) []GetClusterConfigCluster { return v.Clusters }).(GetClusterConfigClusterArrayOutput)
}

func (o GetClusterConfigOutput) Contexts() GetClusterConfigContextArrayOutput {
	return o.ApplyT(func(v GetClusterConfig) []GetClusterConfigContext { return v.Contexts }).(GetClusterConfigContextArrayOutput)
}

func (o GetClusterConfigOutput) CurrentContext() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterConfig) string { return v.CurrentContext }).(pulumi.StringOutput)
}

func (o GetClusterConfigOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterConfig) string { return v.Kind }).(pulumi.StringOutput)
}

func (o GetClusterConfigOutput) Users() GetClusterConfigUserArrayOutput {
	return o.ApplyT(func(v GetClusterConfig) []GetClusterConfigUser { return v.Users }).(GetClusterConfigUserArrayOutput)
}

type GetClusterConfigArrayOutput struct{ *pulumi.OutputState }

func (GetClusterConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterConfig)(nil)).Elem()
}

func (o GetClusterConfigArrayOutput) ToGetClusterConfigArrayOutput() GetClusterConfigArrayOutput {
	return o
}

func (o GetClusterConfigArrayOutput) ToGetClusterConfigArrayOutputWithContext(ctx context.Context) GetClusterConfigArrayOutput {
	return o
}

func (o GetClusterConfigArrayOutput) Index(i pulumi.IntInput) GetClusterConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterConfig {
		return vs[0].([]GetClusterConfig)[vs[1].(int)]
	}).(GetClusterConfigOutput)
}

type GetClusterConfigCluster struct {
	Cluster map[string]string `pulumi:"cluster"`
	// Name of an existing cluster that you want to search for.
	Name string `pulumi:"name"`
}

// GetClusterConfigClusterInput is an input type that accepts GetClusterConfigClusterArgs and GetClusterConfigClusterOutput values.
// You can construct a concrete instance of `GetClusterConfigClusterInput` via:
//
//	GetClusterConfigClusterArgs{...}
type GetClusterConfigClusterInput interface {
	pulumi.Input

	ToGetClusterConfigClusterOutput() GetClusterConfigClusterOutput
	ToGetClusterConfigClusterOutputWithContext(context.Context) GetClusterConfigClusterOutput
}

type GetClusterConfigClusterArgs struct {
	Cluster pulumi.StringMapInput `pulumi:"cluster"`
	// Name of an existing cluster that you want to search for.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetClusterConfigClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterConfigCluster)(nil)).Elem()
}

func (i GetClusterConfigClusterArgs) ToGetClusterConfigClusterOutput() GetClusterConfigClusterOutput {
	return i.ToGetClusterConfigClusterOutputWithContext(context.Background())
}

func (i GetClusterConfigClusterArgs) ToGetClusterConfigClusterOutputWithContext(ctx context.Context) GetClusterConfigClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterConfigClusterOutput)
}

// GetClusterConfigClusterArrayInput is an input type that accepts GetClusterConfigClusterArray and GetClusterConfigClusterArrayOutput values.
// You can construct a concrete instance of `GetClusterConfigClusterArrayInput` via:
//
//	GetClusterConfigClusterArray{ GetClusterConfigClusterArgs{...} }
type GetClusterConfigClusterArrayInput interface {
	pulumi.Input

	ToGetClusterConfigClusterArrayOutput() GetClusterConfigClusterArrayOutput
	ToGetClusterConfigClusterArrayOutputWithContext(context.Context) GetClusterConfigClusterArrayOutput
}

type GetClusterConfigClusterArray []GetClusterConfigClusterInput

func (GetClusterConfigClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterConfigCluster)(nil)).Elem()
}

func (i GetClusterConfigClusterArray) ToGetClusterConfigClusterArrayOutput() GetClusterConfigClusterArrayOutput {
	return i.ToGetClusterConfigClusterArrayOutputWithContext(context.Background())
}

func (i GetClusterConfigClusterArray) ToGetClusterConfigClusterArrayOutputWithContext(ctx context.Context) GetClusterConfigClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterConfigClusterArrayOutput)
}

type GetClusterConfigClusterOutput struct{ *pulumi.OutputState }

func (GetClusterConfigClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterConfigCluster)(nil)).Elem()
}

func (o GetClusterConfigClusterOutput) ToGetClusterConfigClusterOutput() GetClusterConfigClusterOutput {
	return o
}

func (o GetClusterConfigClusterOutput) ToGetClusterConfigClusterOutputWithContext(ctx context.Context) GetClusterConfigClusterOutput {
	return o
}

func (o GetClusterConfigClusterOutput) Cluster() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetClusterConfigCluster) map[string]string { return v.Cluster }).(pulumi.StringMapOutput)
}

// Name of an existing cluster that you want to search for.
func (o GetClusterConfigClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterConfigCluster) string { return v.Name }).(pulumi.StringOutput)
}

type GetClusterConfigClusterArrayOutput struct{ *pulumi.OutputState }

func (GetClusterConfigClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterConfigCluster)(nil)).Elem()
}

func (o GetClusterConfigClusterArrayOutput) ToGetClusterConfigClusterArrayOutput() GetClusterConfigClusterArrayOutput {
	return o
}

func (o GetClusterConfigClusterArrayOutput) ToGetClusterConfigClusterArrayOutputWithContext(ctx context.Context) GetClusterConfigClusterArrayOutput {
	return o
}

func (o GetClusterConfigClusterArrayOutput) Index(i pulumi.IntInput) GetClusterConfigClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterConfigCluster {
		return vs[0].([]GetClusterConfigCluster)[vs[1].(int)]
	}).(GetClusterConfigClusterOutput)
}

type GetClusterConfigContext struct {
	Context map[string]string `pulumi:"context"`
	// Name of an existing cluster that you want to search for.
	Name string `pulumi:"name"`
}

// GetClusterConfigContextInput is an input type that accepts GetClusterConfigContextArgs and GetClusterConfigContextOutput values.
// You can construct a concrete instance of `GetClusterConfigContextInput` via:
//
//	GetClusterConfigContextArgs{...}
type GetClusterConfigContextInput interface {
	pulumi.Input

	ToGetClusterConfigContextOutput() GetClusterConfigContextOutput
	ToGetClusterConfigContextOutputWithContext(context.Context) GetClusterConfigContextOutput
}

type GetClusterConfigContextArgs struct {
	Context pulumi.StringMapInput `pulumi:"context"`
	// Name of an existing cluster that you want to search for.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetClusterConfigContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterConfigContext)(nil)).Elem()
}

func (i GetClusterConfigContextArgs) ToGetClusterConfigContextOutput() GetClusterConfigContextOutput {
	return i.ToGetClusterConfigContextOutputWithContext(context.Background())
}

func (i GetClusterConfigContextArgs) ToGetClusterConfigContextOutputWithContext(ctx context.Context) GetClusterConfigContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterConfigContextOutput)
}

// GetClusterConfigContextArrayInput is an input type that accepts GetClusterConfigContextArray and GetClusterConfigContextArrayOutput values.
// You can construct a concrete instance of `GetClusterConfigContextArrayInput` via:
//
//	GetClusterConfigContextArray{ GetClusterConfigContextArgs{...} }
type GetClusterConfigContextArrayInput interface {
	pulumi.Input

	ToGetClusterConfigContextArrayOutput() GetClusterConfigContextArrayOutput
	ToGetClusterConfigContextArrayOutputWithContext(context.Context) GetClusterConfigContextArrayOutput
}

type GetClusterConfigContextArray []GetClusterConfigContextInput

func (GetClusterConfigContextArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterConfigContext)(nil)).Elem()
}

func (i GetClusterConfigContextArray) ToGetClusterConfigContextArrayOutput() GetClusterConfigContextArrayOutput {
	return i.ToGetClusterConfigContextArrayOutputWithContext(context.Background())
}

func (i GetClusterConfigContextArray) ToGetClusterConfigContextArrayOutputWithContext(ctx context.Context) GetClusterConfigContextArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterConfigContextArrayOutput)
}

type GetClusterConfigContextOutput struct{ *pulumi.OutputState }

func (GetClusterConfigContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterConfigContext)(nil)).Elem()
}

func (o GetClusterConfigContextOutput) ToGetClusterConfigContextOutput() GetClusterConfigContextOutput {
	return o
}

func (o GetClusterConfigContextOutput) ToGetClusterConfigContextOutputWithContext(ctx context.Context) GetClusterConfigContextOutput {
	return o
}

func (o GetClusterConfigContextOutput) Context() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetClusterConfigContext) map[string]string { return v.Context }).(pulumi.StringMapOutput)
}

// Name of an existing cluster that you want to search for.
func (o GetClusterConfigContextOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterConfigContext) string { return v.Name }).(pulumi.StringOutput)
}

type GetClusterConfigContextArrayOutput struct{ *pulumi.OutputState }

func (GetClusterConfigContextArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterConfigContext)(nil)).Elem()
}

func (o GetClusterConfigContextArrayOutput) ToGetClusterConfigContextArrayOutput() GetClusterConfigContextArrayOutput {
	return o
}

func (o GetClusterConfigContextArrayOutput) ToGetClusterConfigContextArrayOutputWithContext(ctx context.Context) GetClusterConfigContextArrayOutput {
	return o
}

func (o GetClusterConfigContextArrayOutput) Index(i pulumi.IntInput) GetClusterConfigContextOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterConfigContext {
		return vs[0].([]GetClusterConfigContext)[vs[1].(int)]
	}).(GetClusterConfigContextOutput)
}

type GetClusterConfigUser struct {
	// Name of an existing cluster that you want to search for.
	Name string            `pulumi:"name"`
	User map[string]string `pulumi:"user"`
}

// GetClusterConfigUserInput is an input type that accepts GetClusterConfigUserArgs and GetClusterConfigUserOutput values.
// You can construct a concrete instance of `GetClusterConfigUserInput` via:
//
//	GetClusterConfigUserArgs{...}
type GetClusterConfigUserInput interface {
	pulumi.Input

	ToGetClusterConfigUserOutput() GetClusterConfigUserOutput
	ToGetClusterConfigUserOutputWithContext(context.Context) GetClusterConfigUserOutput
}

type GetClusterConfigUserArgs struct {
	// Name of an existing cluster that you want to search for.
	Name pulumi.StringInput    `pulumi:"name"`
	User pulumi.StringMapInput `pulumi:"user"`
}

func (GetClusterConfigUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterConfigUser)(nil)).Elem()
}

func (i GetClusterConfigUserArgs) ToGetClusterConfigUserOutput() GetClusterConfigUserOutput {
	return i.ToGetClusterConfigUserOutputWithContext(context.Background())
}

func (i GetClusterConfigUserArgs) ToGetClusterConfigUserOutputWithContext(ctx context.Context) GetClusterConfigUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterConfigUserOutput)
}

// GetClusterConfigUserArrayInput is an input type that accepts GetClusterConfigUserArray and GetClusterConfigUserArrayOutput values.
// You can construct a concrete instance of `GetClusterConfigUserArrayInput` via:
//
//	GetClusterConfigUserArray{ GetClusterConfigUserArgs{...} }
type GetClusterConfigUserArrayInput interface {
	pulumi.Input

	ToGetClusterConfigUserArrayOutput() GetClusterConfigUserArrayOutput
	ToGetClusterConfigUserArrayOutputWithContext(context.Context) GetClusterConfigUserArrayOutput
}

type GetClusterConfigUserArray []GetClusterConfigUserInput

func (GetClusterConfigUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterConfigUser)(nil)).Elem()
}

func (i GetClusterConfigUserArray) ToGetClusterConfigUserArrayOutput() GetClusterConfigUserArrayOutput {
	return i.ToGetClusterConfigUserArrayOutputWithContext(context.Background())
}

func (i GetClusterConfigUserArray) ToGetClusterConfigUserArrayOutputWithContext(ctx context.Context) GetClusterConfigUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterConfigUserArrayOutput)
}

type GetClusterConfigUserOutput struct{ *pulumi.OutputState }

func (GetClusterConfigUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterConfigUser)(nil)).Elem()
}

func (o GetClusterConfigUserOutput) ToGetClusterConfigUserOutput() GetClusterConfigUserOutput {
	return o
}

func (o GetClusterConfigUserOutput) ToGetClusterConfigUserOutputWithContext(ctx context.Context) GetClusterConfigUserOutput {
	return o
}

// Name of an existing cluster that you want to search for.
func (o GetClusterConfigUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterConfigUser) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetClusterConfigUserOutput) User() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetClusterConfigUser) map[string]string { return v.User }).(pulumi.StringMapOutput)
}

type GetClusterConfigUserArrayOutput struct{ *pulumi.OutputState }

func (GetClusterConfigUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterConfigUser)(nil)).Elem()
}

func (o GetClusterConfigUserArrayOutput) ToGetClusterConfigUserArrayOutput() GetClusterConfigUserArrayOutput {
	return o
}

func (o GetClusterConfigUserArrayOutput) ToGetClusterConfigUserArrayOutputWithContext(ctx context.Context) GetClusterConfigUserArrayOutput {
	return o
}

func (o GetClusterConfigUserArrayOutput) Index(i pulumi.IntInput) GetClusterConfigUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterConfigUser {
		return vs[0].([]GetClusterConfigUser)[vs[1].(int)]
	}).(GetClusterConfigUserOutput)
}

type GetClusterMaintenanceWindow struct {
	// Day of the week when maintenance is allowed
	DayOfTheWeek string `pulumi:"dayOfTheWeek"`
	// A clock time in the day when maintenance is allowed
	Time string `pulumi:"time"`
}

// GetClusterMaintenanceWindowInput is an input type that accepts GetClusterMaintenanceWindowArgs and GetClusterMaintenanceWindowOutput values.
// You can construct a concrete instance of `GetClusterMaintenanceWindowInput` via:
//
//	GetClusterMaintenanceWindowArgs{...}
type GetClusterMaintenanceWindowInput interface {
	pulumi.Input

	ToGetClusterMaintenanceWindowOutput() GetClusterMaintenanceWindowOutput
	ToGetClusterMaintenanceWindowOutputWithContext(context.Context) GetClusterMaintenanceWindowOutput
}

type GetClusterMaintenanceWindowArgs struct {
	// Day of the week when maintenance is allowed
	DayOfTheWeek pulumi.StringInput `pulumi:"dayOfTheWeek"`
	// A clock time in the day when maintenance is allowed
	Time pulumi.StringInput `pulumi:"time"`
}

func (GetClusterMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterMaintenanceWindow)(nil)).Elem()
}

func (i GetClusterMaintenanceWindowArgs) ToGetClusterMaintenanceWindowOutput() GetClusterMaintenanceWindowOutput {
	return i.ToGetClusterMaintenanceWindowOutputWithContext(context.Background())
}

func (i GetClusterMaintenanceWindowArgs) ToGetClusterMaintenanceWindowOutputWithContext(ctx context.Context) GetClusterMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterMaintenanceWindowOutput)
}

// GetClusterMaintenanceWindowArrayInput is an input type that accepts GetClusterMaintenanceWindowArray and GetClusterMaintenanceWindowArrayOutput values.
// You can construct a concrete instance of `GetClusterMaintenanceWindowArrayInput` via:
//
//	GetClusterMaintenanceWindowArray{ GetClusterMaintenanceWindowArgs{...} }
type GetClusterMaintenanceWindowArrayInput interface {
	pulumi.Input

	ToGetClusterMaintenanceWindowArrayOutput() GetClusterMaintenanceWindowArrayOutput
	ToGetClusterMaintenanceWindowArrayOutputWithContext(context.Context) GetClusterMaintenanceWindowArrayOutput
}

type GetClusterMaintenanceWindowArray []GetClusterMaintenanceWindowInput

func (GetClusterMaintenanceWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterMaintenanceWindow)(nil)).Elem()
}

func (i GetClusterMaintenanceWindowArray) ToGetClusterMaintenanceWindowArrayOutput() GetClusterMaintenanceWindowArrayOutput {
	return i.ToGetClusterMaintenanceWindowArrayOutputWithContext(context.Background())
}

func (i GetClusterMaintenanceWindowArray) ToGetClusterMaintenanceWindowArrayOutputWithContext(ctx context.Context) GetClusterMaintenanceWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterMaintenanceWindowArrayOutput)
}

type GetClusterMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (GetClusterMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterMaintenanceWindow)(nil)).Elem()
}

func (o GetClusterMaintenanceWindowOutput) ToGetClusterMaintenanceWindowOutput() GetClusterMaintenanceWindowOutput {
	return o
}

func (o GetClusterMaintenanceWindowOutput) ToGetClusterMaintenanceWindowOutputWithContext(ctx context.Context) GetClusterMaintenanceWindowOutput {
	return o
}

// Day of the week when maintenance is allowed
func (o GetClusterMaintenanceWindowOutput) DayOfTheWeek() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterMaintenanceWindow) string { return v.DayOfTheWeek }).(pulumi.StringOutput)
}

// A clock time in the day when maintenance is allowed
func (o GetClusterMaintenanceWindowOutput) Time() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterMaintenanceWindow) string { return v.Time }).(pulumi.StringOutput)
}

type GetClusterMaintenanceWindowArrayOutput struct{ *pulumi.OutputState }

func (GetClusterMaintenanceWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterMaintenanceWindow)(nil)).Elem()
}

func (o GetClusterMaintenanceWindowArrayOutput) ToGetClusterMaintenanceWindowArrayOutput() GetClusterMaintenanceWindowArrayOutput {
	return o
}

func (o GetClusterMaintenanceWindowArrayOutput) ToGetClusterMaintenanceWindowArrayOutputWithContext(ctx context.Context) GetClusterMaintenanceWindowArrayOutput {
	return o
}

func (o GetClusterMaintenanceWindowArrayOutput) Index(i pulumi.IntInput) GetClusterMaintenanceWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterMaintenanceWindow {
		return vs[0].([]GetClusterMaintenanceWindow)[vs[1].(int)]
	}).(GetClusterMaintenanceWindowOutput)
}

type GetClusterS3Bucket struct {
	// Name of an existing cluster that you want to search for.
	Name string `pulumi:"name"`
}

// GetClusterS3BucketInput is an input type that accepts GetClusterS3BucketArgs and GetClusterS3BucketOutput values.
// You can construct a concrete instance of `GetClusterS3BucketInput` via:
//
//	GetClusterS3BucketArgs{...}
type GetClusterS3BucketInput interface {
	pulumi.Input

	ToGetClusterS3BucketOutput() GetClusterS3BucketOutput
	ToGetClusterS3BucketOutputWithContext(context.Context) GetClusterS3BucketOutput
}

type GetClusterS3BucketArgs struct {
	// Name of an existing cluster that you want to search for.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetClusterS3BucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterS3Bucket)(nil)).Elem()
}

func (i GetClusterS3BucketArgs) ToGetClusterS3BucketOutput() GetClusterS3BucketOutput {
	return i.ToGetClusterS3BucketOutputWithContext(context.Background())
}

func (i GetClusterS3BucketArgs) ToGetClusterS3BucketOutputWithContext(ctx context.Context) GetClusterS3BucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterS3BucketOutput)
}

// GetClusterS3BucketArrayInput is an input type that accepts GetClusterS3BucketArray and GetClusterS3BucketArrayOutput values.
// You can construct a concrete instance of `GetClusterS3BucketArrayInput` via:
//
//	GetClusterS3BucketArray{ GetClusterS3BucketArgs{...} }
type GetClusterS3BucketArrayInput interface {
	pulumi.Input

	ToGetClusterS3BucketArrayOutput() GetClusterS3BucketArrayOutput
	ToGetClusterS3BucketArrayOutputWithContext(context.Context) GetClusterS3BucketArrayOutput
}

type GetClusterS3BucketArray []GetClusterS3BucketInput

func (GetClusterS3BucketArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterS3Bucket)(nil)).Elem()
}

func (i GetClusterS3BucketArray) ToGetClusterS3BucketArrayOutput() GetClusterS3BucketArrayOutput {
	return i.ToGetClusterS3BucketArrayOutputWithContext(context.Background())
}

func (i GetClusterS3BucketArray) ToGetClusterS3BucketArrayOutputWithContext(ctx context.Context) GetClusterS3BucketArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterS3BucketArrayOutput)
}

type GetClusterS3BucketOutput struct{ *pulumi.OutputState }

func (GetClusterS3BucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterS3Bucket)(nil)).Elem()
}

func (o GetClusterS3BucketOutput) ToGetClusterS3BucketOutput() GetClusterS3BucketOutput {
	return o
}

func (o GetClusterS3BucketOutput) ToGetClusterS3BucketOutputWithContext(ctx context.Context) GetClusterS3BucketOutput {
	return o
}

// Name of an existing cluster that you want to search for.
func (o GetClusterS3BucketOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterS3Bucket) string { return v.Name }).(pulumi.StringOutput)
}

type GetClusterS3BucketArrayOutput struct{ *pulumi.OutputState }

func (GetClusterS3BucketArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterS3Bucket)(nil)).Elem()
}

func (o GetClusterS3BucketArrayOutput) ToGetClusterS3BucketArrayOutput() GetClusterS3BucketArrayOutput {
	return o
}

func (o GetClusterS3BucketArrayOutput) ToGetClusterS3BucketArrayOutputWithContext(ctx context.Context) GetClusterS3BucketArrayOutput {
	return o
}

func (o GetClusterS3BucketArrayOutput) Index(i pulumi.IntInput) GetClusterS3BucketOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterS3Bucket {
		return vs[0].([]GetClusterS3Bucket)[vs[1].(int)]
	}).(GetClusterS3BucketOutput)
}

type GetNodePoolAutoScaling struct {
	// The maximum number of worker nodes that the node pool can scale to
	MaxNodeCount int `pulumi:"maxNodeCount"`
	// The minimum number of worker nodes the node pool can scale down to
	MinNodeCount int `pulumi:"minNodeCount"`
}

// GetNodePoolAutoScalingInput is an input type that accepts GetNodePoolAutoScalingArgs and GetNodePoolAutoScalingOutput values.
// You can construct a concrete instance of `GetNodePoolAutoScalingInput` via:
//
//	GetNodePoolAutoScalingArgs{...}
type GetNodePoolAutoScalingInput interface {
	pulumi.Input

	ToGetNodePoolAutoScalingOutput() GetNodePoolAutoScalingOutput
	ToGetNodePoolAutoScalingOutputWithContext(context.Context) GetNodePoolAutoScalingOutput
}

type GetNodePoolAutoScalingArgs struct {
	// The maximum number of worker nodes that the node pool can scale to
	MaxNodeCount pulumi.IntInput `pulumi:"maxNodeCount"`
	// The minimum number of worker nodes the node pool can scale down to
	MinNodeCount pulumi.IntInput `pulumi:"minNodeCount"`
}

func (GetNodePoolAutoScalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolAutoScaling)(nil)).Elem()
}

func (i GetNodePoolAutoScalingArgs) ToGetNodePoolAutoScalingOutput() GetNodePoolAutoScalingOutput {
	return i.ToGetNodePoolAutoScalingOutputWithContext(context.Background())
}

func (i GetNodePoolAutoScalingArgs) ToGetNodePoolAutoScalingOutputWithContext(ctx context.Context) GetNodePoolAutoScalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolAutoScalingOutput)
}

// GetNodePoolAutoScalingArrayInput is an input type that accepts GetNodePoolAutoScalingArray and GetNodePoolAutoScalingArrayOutput values.
// You can construct a concrete instance of `GetNodePoolAutoScalingArrayInput` via:
//
//	GetNodePoolAutoScalingArray{ GetNodePoolAutoScalingArgs{...} }
type GetNodePoolAutoScalingArrayInput interface {
	pulumi.Input

	ToGetNodePoolAutoScalingArrayOutput() GetNodePoolAutoScalingArrayOutput
	ToGetNodePoolAutoScalingArrayOutputWithContext(context.Context) GetNodePoolAutoScalingArrayOutput
}

type GetNodePoolAutoScalingArray []GetNodePoolAutoScalingInput

func (GetNodePoolAutoScalingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolAutoScaling)(nil)).Elem()
}

func (i GetNodePoolAutoScalingArray) ToGetNodePoolAutoScalingArrayOutput() GetNodePoolAutoScalingArrayOutput {
	return i.ToGetNodePoolAutoScalingArrayOutputWithContext(context.Background())
}

func (i GetNodePoolAutoScalingArray) ToGetNodePoolAutoScalingArrayOutputWithContext(ctx context.Context) GetNodePoolAutoScalingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolAutoScalingArrayOutput)
}

type GetNodePoolAutoScalingOutput struct{ *pulumi.OutputState }

func (GetNodePoolAutoScalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolAutoScaling)(nil)).Elem()
}

func (o GetNodePoolAutoScalingOutput) ToGetNodePoolAutoScalingOutput() GetNodePoolAutoScalingOutput {
	return o
}

func (o GetNodePoolAutoScalingOutput) ToGetNodePoolAutoScalingOutputWithContext(ctx context.Context) GetNodePoolAutoScalingOutput {
	return o
}

// The maximum number of worker nodes that the node pool can scale to
func (o GetNodePoolAutoScalingOutput) MaxNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodePoolAutoScaling) int { return v.MaxNodeCount }).(pulumi.IntOutput)
}

// The minimum number of worker nodes the node pool can scale down to
func (o GetNodePoolAutoScalingOutput) MinNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodePoolAutoScaling) int { return v.MinNodeCount }).(pulumi.IntOutput)
}

type GetNodePoolAutoScalingArrayOutput struct{ *pulumi.OutputState }

func (GetNodePoolAutoScalingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolAutoScaling)(nil)).Elem()
}

func (o GetNodePoolAutoScalingArrayOutput) ToGetNodePoolAutoScalingArrayOutput() GetNodePoolAutoScalingArrayOutput {
	return o
}

func (o GetNodePoolAutoScalingArrayOutput) ToGetNodePoolAutoScalingArrayOutputWithContext(ctx context.Context) GetNodePoolAutoScalingArrayOutput {
	return o
}

func (o GetNodePoolAutoScalingArrayOutput) Index(i pulumi.IntInput) GetNodePoolAutoScalingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodePoolAutoScaling {
		return vs[0].([]GetNodePoolAutoScaling)[vs[1].(int)]
	}).(GetNodePoolAutoScalingOutput)
}

type GetNodePoolLan struct {
	// Indicates if the Kubernetes Node Pool LAN will reserve an IP using DHCP
	Dhcp bool `pulumi:"dhcp"`
	// ID of the node pool you want to search for.
	//
	// `k8sClusterId` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
	Id int `pulumi:"id"`
	// An array of additional LANs attached to worker nodes
	Routes []GetNodePoolLanRoute `pulumi:"routes"`
}

// GetNodePoolLanInput is an input type that accepts GetNodePoolLanArgs and GetNodePoolLanOutput values.
// You can construct a concrete instance of `GetNodePoolLanInput` via:
//
//	GetNodePoolLanArgs{...}
type GetNodePoolLanInput interface {
	pulumi.Input

	ToGetNodePoolLanOutput() GetNodePoolLanOutput
	ToGetNodePoolLanOutputWithContext(context.Context) GetNodePoolLanOutput
}

type GetNodePoolLanArgs struct {
	// Indicates if the Kubernetes Node Pool LAN will reserve an IP using DHCP
	Dhcp pulumi.BoolInput `pulumi:"dhcp"`
	// ID of the node pool you want to search for.
	//
	// `k8sClusterId` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
	Id pulumi.IntInput `pulumi:"id"`
	// An array of additional LANs attached to worker nodes
	Routes GetNodePoolLanRouteArrayInput `pulumi:"routes"`
}

func (GetNodePoolLanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolLan)(nil)).Elem()
}

func (i GetNodePoolLanArgs) ToGetNodePoolLanOutput() GetNodePoolLanOutput {
	return i.ToGetNodePoolLanOutputWithContext(context.Background())
}

func (i GetNodePoolLanArgs) ToGetNodePoolLanOutputWithContext(ctx context.Context) GetNodePoolLanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolLanOutput)
}

// GetNodePoolLanArrayInput is an input type that accepts GetNodePoolLanArray and GetNodePoolLanArrayOutput values.
// You can construct a concrete instance of `GetNodePoolLanArrayInput` via:
//
//	GetNodePoolLanArray{ GetNodePoolLanArgs{...} }
type GetNodePoolLanArrayInput interface {
	pulumi.Input

	ToGetNodePoolLanArrayOutput() GetNodePoolLanArrayOutput
	ToGetNodePoolLanArrayOutputWithContext(context.Context) GetNodePoolLanArrayOutput
}

type GetNodePoolLanArray []GetNodePoolLanInput

func (GetNodePoolLanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolLan)(nil)).Elem()
}

func (i GetNodePoolLanArray) ToGetNodePoolLanArrayOutput() GetNodePoolLanArrayOutput {
	return i.ToGetNodePoolLanArrayOutputWithContext(context.Background())
}

func (i GetNodePoolLanArray) ToGetNodePoolLanArrayOutputWithContext(ctx context.Context) GetNodePoolLanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolLanArrayOutput)
}

type GetNodePoolLanOutput struct{ *pulumi.OutputState }

func (GetNodePoolLanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolLan)(nil)).Elem()
}

func (o GetNodePoolLanOutput) ToGetNodePoolLanOutput() GetNodePoolLanOutput {
	return o
}

func (o GetNodePoolLanOutput) ToGetNodePoolLanOutputWithContext(ctx context.Context) GetNodePoolLanOutput {
	return o
}

// Indicates if the Kubernetes Node Pool LAN will reserve an IP using DHCP
func (o GetNodePoolLanOutput) Dhcp() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNodePoolLan) bool { return v.Dhcp }).(pulumi.BoolOutput)
}

// ID of the node pool you want to search for.
//
// `k8sClusterId` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
func (o GetNodePoolLanOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodePoolLan) int { return v.Id }).(pulumi.IntOutput)
}

// An array of additional LANs attached to worker nodes
func (o GetNodePoolLanOutput) Routes() GetNodePoolLanRouteArrayOutput {
	return o.ApplyT(func(v GetNodePoolLan) []GetNodePoolLanRoute { return v.Routes }).(GetNodePoolLanRouteArrayOutput)
}

type GetNodePoolLanArrayOutput struct{ *pulumi.OutputState }

func (GetNodePoolLanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolLan)(nil)).Elem()
}

func (o GetNodePoolLanArrayOutput) ToGetNodePoolLanArrayOutput() GetNodePoolLanArrayOutput {
	return o
}

func (o GetNodePoolLanArrayOutput) ToGetNodePoolLanArrayOutputWithContext(ctx context.Context) GetNodePoolLanArrayOutput {
	return o
}

func (o GetNodePoolLanArrayOutput) Index(i pulumi.IntInput) GetNodePoolLanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodePoolLan {
		return vs[0].([]GetNodePoolLan)[vs[1].(int)]
	}).(GetNodePoolLanOutput)
}

type GetNodePoolLanRoute struct {
	// IPv4 or IPv6 Gateway IP for the route
	GatewayIp string `pulumi:"gatewayIp"`
	// IPv4 or IPv6 CIDR to be routed via the interface
	Network string `pulumi:"network"`
}

// GetNodePoolLanRouteInput is an input type that accepts GetNodePoolLanRouteArgs and GetNodePoolLanRouteOutput values.
// You can construct a concrete instance of `GetNodePoolLanRouteInput` via:
//
//	GetNodePoolLanRouteArgs{...}
type GetNodePoolLanRouteInput interface {
	pulumi.Input

	ToGetNodePoolLanRouteOutput() GetNodePoolLanRouteOutput
	ToGetNodePoolLanRouteOutputWithContext(context.Context) GetNodePoolLanRouteOutput
}

type GetNodePoolLanRouteArgs struct {
	// IPv4 or IPv6 Gateway IP for the route
	GatewayIp pulumi.StringInput `pulumi:"gatewayIp"`
	// IPv4 or IPv6 CIDR to be routed via the interface
	Network pulumi.StringInput `pulumi:"network"`
}

func (GetNodePoolLanRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolLanRoute)(nil)).Elem()
}

func (i GetNodePoolLanRouteArgs) ToGetNodePoolLanRouteOutput() GetNodePoolLanRouteOutput {
	return i.ToGetNodePoolLanRouteOutputWithContext(context.Background())
}

func (i GetNodePoolLanRouteArgs) ToGetNodePoolLanRouteOutputWithContext(ctx context.Context) GetNodePoolLanRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolLanRouteOutput)
}

// GetNodePoolLanRouteArrayInput is an input type that accepts GetNodePoolLanRouteArray and GetNodePoolLanRouteArrayOutput values.
// You can construct a concrete instance of `GetNodePoolLanRouteArrayInput` via:
//
//	GetNodePoolLanRouteArray{ GetNodePoolLanRouteArgs{...} }
type GetNodePoolLanRouteArrayInput interface {
	pulumi.Input

	ToGetNodePoolLanRouteArrayOutput() GetNodePoolLanRouteArrayOutput
	ToGetNodePoolLanRouteArrayOutputWithContext(context.Context) GetNodePoolLanRouteArrayOutput
}

type GetNodePoolLanRouteArray []GetNodePoolLanRouteInput

func (GetNodePoolLanRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolLanRoute)(nil)).Elem()
}

func (i GetNodePoolLanRouteArray) ToGetNodePoolLanRouteArrayOutput() GetNodePoolLanRouteArrayOutput {
	return i.ToGetNodePoolLanRouteArrayOutputWithContext(context.Background())
}

func (i GetNodePoolLanRouteArray) ToGetNodePoolLanRouteArrayOutputWithContext(ctx context.Context) GetNodePoolLanRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolLanRouteArrayOutput)
}

type GetNodePoolLanRouteOutput struct{ *pulumi.OutputState }

func (GetNodePoolLanRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolLanRoute)(nil)).Elem()
}

func (o GetNodePoolLanRouteOutput) ToGetNodePoolLanRouteOutput() GetNodePoolLanRouteOutput {
	return o
}

func (o GetNodePoolLanRouteOutput) ToGetNodePoolLanRouteOutputWithContext(ctx context.Context) GetNodePoolLanRouteOutput {
	return o
}

// IPv4 or IPv6 Gateway IP for the route
func (o GetNodePoolLanRouteOutput) GatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodePoolLanRoute) string { return v.GatewayIp }).(pulumi.StringOutput)
}

// IPv4 or IPv6 CIDR to be routed via the interface
func (o GetNodePoolLanRouteOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodePoolLanRoute) string { return v.Network }).(pulumi.StringOutput)
}

type GetNodePoolLanRouteArrayOutput struct{ *pulumi.OutputState }

func (GetNodePoolLanRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolLanRoute)(nil)).Elem()
}

func (o GetNodePoolLanRouteArrayOutput) ToGetNodePoolLanRouteArrayOutput() GetNodePoolLanRouteArrayOutput {
	return o
}

func (o GetNodePoolLanRouteArrayOutput) ToGetNodePoolLanRouteArrayOutputWithContext(ctx context.Context) GetNodePoolLanRouteArrayOutput {
	return o
}

func (o GetNodePoolLanRouteArrayOutput) Index(i pulumi.IntInput) GetNodePoolLanRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodePoolLanRoute {
		return vs[0].([]GetNodePoolLanRoute)[vs[1].(int)]
	}).(GetNodePoolLanRouteOutput)
}

type GetNodePoolMaintenanceWindow struct {
	// Day of the week when maintenance is allowed
	DayOfTheWeek string `pulumi:"dayOfTheWeek"`
	// A clock time in the day when maintenance is allowed
	Time string `pulumi:"time"`
}

// GetNodePoolMaintenanceWindowInput is an input type that accepts GetNodePoolMaintenanceWindowArgs and GetNodePoolMaintenanceWindowOutput values.
// You can construct a concrete instance of `GetNodePoolMaintenanceWindowInput` via:
//
//	GetNodePoolMaintenanceWindowArgs{...}
type GetNodePoolMaintenanceWindowInput interface {
	pulumi.Input

	ToGetNodePoolMaintenanceWindowOutput() GetNodePoolMaintenanceWindowOutput
	ToGetNodePoolMaintenanceWindowOutputWithContext(context.Context) GetNodePoolMaintenanceWindowOutput
}

type GetNodePoolMaintenanceWindowArgs struct {
	// Day of the week when maintenance is allowed
	DayOfTheWeek pulumi.StringInput `pulumi:"dayOfTheWeek"`
	// A clock time in the day when maintenance is allowed
	Time pulumi.StringInput `pulumi:"time"`
}

func (GetNodePoolMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolMaintenanceWindow)(nil)).Elem()
}

func (i GetNodePoolMaintenanceWindowArgs) ToGetNodePoolMaintenanceWindowOutput() GetNodePoolMaintenanceWindowOutput {
	return i.ToGetNodePoolMaintenanceWindowOutputWithContext(context.Background())
}

func (i GetNodePoolMaintenanceWindowArgs) ToGetNodePoolMaintenanceWindowOutputWithContext(ctx context.Context) GetNodePoolMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolMaintenanceWindowOutput)
}

// GetNodePoolMaintenanceWindowArrayInput is an input type that accepts GetNodePoolMaintenanceWindowArray and GetNodePoolMaintenanceWindowArrayOutput values.
// You can construct a concrete instance of `GetNodePoolMaintenanceWindowArrayInput` via:
//
//	GetNodePoolMaintenanceWindowArray{ GetNodePoolMaintenanceWindowArgs{...} }
type GetNodePoolMaintenanceWindowArrayInput interface {
	pulumi.Input

	ToGetNodePoolMaintenanceWindowArrayOutput() GetNodePoolMaintenanceWindowArrayOutput
	ToGetNodePoolMaintenanceWindowArrayOutputWithContext(context.Context) GetNodePoolMaintenanceWindowArrayOutput
}

type GetNodePoolMaintenanceWindowArray []GetNodePoolMaintenanceWindowInput

func (GetNodePoolMaintenanceWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolMaintenanceWindow)(nil)).Elem()
}

func (i GetNodePoolMaintenanceWindowArray) ToGetNodePoolMaintenanceWindowArrayOutput() GetNodePoolMaintenanceWindowArrayOutput {
	return i.ToGetNodePoolMaintenanceWindowArrayOutputWithContext(context.Background())
}

func (i GetNodePoolMaintenanceWindowArray) ToGetNodePoolMaintenanceWindowArrayOutputWithContext(ctx context.Context) GetNodePoolMaintenanceWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolMaintenanceWindowArrayOutput)
}

type GetNodePoolMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (GetNodePoolMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolMaintenanceWindow)(nil)).Elem()
}

func (o GetNodePoolMaintenanceWindowOutput) ToGetNodePoolMaintenanceWindowOutput() GetNodePoolMaintenanceWindowOutput {
	return o
}

func (o GetNodePoolMaintenanceWindowOutput) ToGetNodePoolMaintenanceWindowOutputWithContext(ctx context.Context) GetNodePoolMaintenanceWindowOutput {
	return o
}

// Day of the week when maintenance is allowed
func (o GetNodePoolMaintenanceWindowOutput) DayOfTheWeek() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodePoolMaintenanceWindow) string { return v.DayOfTheWeek }).(pulumi.StringOutput)
}

// A clock time in the day when maintenance is allowed
func (o GetNodePoolMaintenanceWindowOutput) Time() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodePoolMaintenanceWindow) string { return v.Time }).(pulumi.StringOutput)
}

type GetNodePoolMaintenanceWindowArrayOutput struct{ *pulumi.OutputState }

func (GetNodePoolMaintenanceWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolMaintenanceWindow)(nil)).Elem()
}

func (o GetNodePoolMaintenanceWindowArrayOutput) ToGetNodePoolMaintenanceWindowArrayOutput() GetNodePoolMaintenanceWindowArrayOutput {
	return o
}

func (o GetNodePoolMaintenanceWindowArrayOutput) ToGetNodePoolMaintenanceWindowArrayOutputWithContext(ctx context.Context) GetNodePoolMaintenanceWindowArrayOutput {
	return o
}

func (o GetNodePoolMaintenanceWindowArrayOutput) Index(i pulumi.IntInput) GetNodePoolMaintenanceWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodePoolMaintenanceWindow {
		return vs[0].([]GetNodePoolMaintenanceWindow)[vs[1].(int)]
	}).(GetNodePoolMaintenanceWindowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMaintenanceWindowInput)(nil)).Elem(), ClusterMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMaintenanceWindowPtrInput)(nil)).Elem(), ClusterMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterS3BucketInput)(nil)).Elem(), ClusterS3BucketArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterS3BucketArrayInput)(nil)).Elem(), ClusterS3BucketArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolAutoScalingInput)(nil)).Elem(), NodePoolAutoScalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolAutoScalingPtrInput)(nil)).Elem(), NodePoolAutoScalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolLanInput)(nil)).Elem(), NodePoolLanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolLanArrayInput)(nil)).Elem(), NodePoolLanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolLanRouteInput)(nil)).Elem(), NodePoolLanRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolLanRouteArrayInput)(nil)).Elem(), NodePoolLanRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolMaintenanceWindowInput)(nil)).Elem(), NodePoolMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolMaintenanceWindowPtrInput)(nil)).Elem(), NodePoolMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterConfigInput)(nil)).Elem(), GetClusterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterConfigArrayInput)(nil)).Elem(), GetClusterConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterConfigClusterInput)(nil)).Elem(), GetClusterConfigClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterConfigClusterArrayInput)(nil)).Elem(), GetClusterConfigClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterConfigContextInput)(nil)).Elem(), GetClusterConfigContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterConfigContextArrayInput)(nil)).Elem(), GetClusterConfigContextArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterConfigUserInput)(nil)).Elem(), GetClusterConfigUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterConfigUserArrayInput)(nil)).Elem(), GetClusterConfigUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterMaintenanceWindowInput)(nil)).Elem(), GetClusterMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterMaintenanceWindowArrayInput)(nil)).Elem(), GetClusterMaintenanceWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterS3BucketInput)(nil)).Elem(), GetClusterS3BucketArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterS3BucketArrayInput)(nil)).Elem(), GetClusterS3BucketArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolAutoScalingInput)(nil)).Elem(), GetNodePoolAutoScalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolAutoScalingArrayInput)(nil)).Elem(), GetNodePoolAutoScalingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolLanInput)(nil)).Elem(), GetNodePoolLanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolLanArrayInput)(nil)).Elem(), GetNodePoolLanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolLanRouteInput)(nil)).Elem(), GetNodePoolLanRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolLanRouteArrayInput)(nil)).Elem(), GetNodePoolLanRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolMaintenanceWindowInput)(nil)).Elem(), GetNodePoolMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolMaintenanceWindowArrayInput)(nil)).Elem(), GetNodePoolMaintenanceWindowArray{})
	pulumi.RegisterOutputType(ClusterMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(ClusterMaintenanceWindowPtrOutput{})
	pulumi.RegisterOutputType(ClusterS3BucketOutput{})
	pulumi.RegisterOutputType(ClusterS3BucketArrayOutput{})
	pulumi.RegisterOutputType(NodePoolAutoScalingOutput{})
	pulumi.RegisterOutputType(NodePoolAutoScalingPtrOutput{})
	pulumi.RegisterOutputType(NodePoolLanOutput{})
	pulumi.RegisterOutputType(NodePoolLanArrayOutput{})
	pulumi.RegisterOutputType(NodePoolLanRouteOutput{})
	pulumi.RegisterOutputType(NodePoolLanRouteArrayOutput{})
	pulumi.RegisterOutputType(NodePoolMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(NodePoolMaintenanceWindowPtrOutput{})
	pulumi.RegisterOutputType(GetClusterConfigOutput{})
	pulumi.RegisterOutputType(GetClusterConfigArrayOutput{})
	pulumi.RegisterOutputType(GetClusterConfigClusterOutput{})
	pulumi.RegisterOutputType(GetClusterConfigClusterArrayOutput{})
	pulumi.RegisterOutputType(GetClusterConfigContextOutput{})
	pulumi.RegisterOutputType(GetClusterConfigContextArrayOutput{})
	pulumi.RegisterOutputType(GetClusterConfigUserOutput{})
	pulumi.RegisterOutputType(GetClusterConfigUserArrayOutput{})
	pulumi.RegisterOutputType(GetClusterMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(GetClusterMaintenanceWindowArrayOutput{})
	pulumi.RegisterOutputType(GetClusterS3BucketOutput{})
	pulumi.RegisterOutputType(GetClusterS3BucketArrayOutput{})
	pulumi.RegisterOutputType(GetNodePoolAutoScalingOutput{})
	pulumi.RegisterOutputType(GetNodePoolAutoScalingArrayOutput{})
	pulumi.RegisterOutputType(GetNodePoolLanOutput{})
	pulumi.RegisterOutputType(GetNodePoolLanArrayOutput{})
	pulumi.RegisterOutputType(GetNodePoolLanRouteOutput{})
	pulumi.RegisterOutputType(GetNodePoolLanRouteArrayOutput{})
	pulumi.RegisterOutputType(GetNodePoolMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(GetNodePoolMaintenanceWindowArrayOutput{})
}
