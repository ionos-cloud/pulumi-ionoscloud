// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nlb

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **Network Load Balancer Forwarding Rule data source** can be used to search for and return existing network forwarding rules.
// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
// When this happens, please refine your search string so that it is specific enough to return only one result.
//
// ## By ID
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/nlb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nlb.LookupForwardingRule(ctx, &nlb.LookupForwardingRuleArgs{
//				DatacenterId:          "datacenter_id",
//				NetworkloadbalancerId: "networkloadbalancer_id",
//				Id:                    pulumi.StringRef("networkloadbalancer_forwardingrule_id"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## By Name
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/nlb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nlb.LookupForwardingRule(ctx, &nlb.LookupForwardingRuleArgs{
//				DatacenterId:          "datacenter_id",
//				NetworkloadbalancerId: "networkloadbalancer_id",
//				Name:                  pulumi.StringRef("Network Load Balancer Forwarding Rule Example"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupForwardingRule(ctx *pulumi.Context, args *LookupForwardingRuleArgs, opts ...pulumi.InvokeOption) (*LookupForwardingRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupForwardingRuleResult
	err := ctx.Invoke("ionoscloud:nlb/getForwardingRule:getForwardingRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getForwardingRule.
type LookupForwardingRuleArgs struct {
	// Datacenter's UUID.
	DatacenterId string `pulumi:"datacenterId"`
	// ID of the network load balancer forwarding rule you want to search for.
	//
	// Both `datacenterId` and `networkloadbalancerId` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
	Id *string `pulumi:"id"`
	// Name of an existing network load balancer forwarding rule that you want to search for.
	Name *string `pulumi:"name"`
	// Network Load Balancer's UUID.
	NetworkloadbalancerId string `pulumi:"networkloadbalancerId"`
}

// A collection of values returned by getForwardingRule.
type LookupForwardingRuleResult struct {
	// Algorithm for the balancing.
	Algorithm    string `pulumi:"algorithm"`
	DatacenterId string `pulumi:"datacenterId"`
	// Health check attributes for Network Load Balancer forwarding rule target.
	HealthChecks []GetForwardingRuleHealthCheck `pulumi:"healthChecks"`
	// The id of that Network Load Balancer forwarding rule.
	Id string `pulumi:"id"`
	// Listening IP. (inbound)
	ListenerIp string `pulumi:"listenerIp"`
	// Listening port number. (inbound) (range: 1 to 65535)
	ListenerPort int `pulumi:"listenerPort"`
	// The name of that Network Load Balancer forwarding rule.
	Name                  string `pulumi:"name"`
	NetworkloadbalancerId string `pulumi:"networkloadbalancerId"`
	// Protocol of the balancing.
	Protocol string `pulumi:"protocol"`
	// Array of items in that collection.
	Targets []GetForwardingRuleTarget `pulumi:"targets"`
}

func LookupForwardingRuleOutput(ctx *pulumi.Context, args LookupForwardingRuleOutputArgs, opts ...pulumi.InvokeOption) LookupForwardingRuleResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupForwardingRuleResultOutput, error) {
			args := v.(LookupForwardingRuleArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ionoscloud:nlb/getForwardingRule:getForwardingRule", args, LookupForwardingRuleResultOutput{}, options).(LookupForwardingRuleResultOutput), nil
		}).(LookupForwardingRuleResultOutput)
}

// A collection of arguments for invoking getForwardingRule.
type LookupForwardingRuleOutputArgs struct {
	// Datacenter's UUID.
	DatacenterId pulumi.StringInput `pulumi:"datacenterId"`
	// ID of the network load balancer forwarding rule you want to search for.
	//
	// Both `datacenterId` and `networkloadbalancerId` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of an existing network load balancer forwarding rule that you want to search for.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Network Load Balancer's UUID.
	NetworkloadbalancerId pulumi.StringInput `pulumi:"networkloadbalancerId"`
}

func (LookupForwardingRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupForwardingRuleArgs)(nil)).Elem()
}

// A collection of values returned by getForwardingRule.
type LookupForwardingRuleResultOutput struct{ *pulumi.OutputState }

func (LookupForwardingRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupForwardingRuleResult)(nil)).Elem()
}

func (o LookupForwardingRuleResultOutput) ToLookupForwardingRuleResultOutput() LookupForwardingRuleResultOutput {
	return o
}

func (o LookupForwardingRuleResultOutput) ToLookupForwardingRuleResultOutputWithContext(ctx context.Context) LookupForwardingRuleResultOutput {
	return o
}

// Algorithm for the balancing.
func (o LookupForwardingRuleResultOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v LookupForwardingRuleResult) string { return v.Algorithm }).(pulumi.StringOutput)
}

func (o LookupForwardingRuleResultOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupForwardingRuleResult) string { return v.DatacenterId }).(pulumi.StringOutput)
}

// Health check attributes for Network Load Balancer forwarding rule target.
func (o LookupForwardingRuleResultOutput) HealthChecks() GetForwardingRuleHealthCheckArrayOutput {
	return o.ApplyT(func(v LookupForwardingRuleResult) []GetForwardingRuleHealthCheck { return v.HealthChecks }).(GetForwardingRuleHealthCheckArrayOutput)
}

// The id of that Network Load Balancer forwarding rule.
func (o LookupForwardingRuleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupForwardingRuleResult) string { return v.Id }).(pulumi.StringOutput)
}

// Listening IP. (inbound)
func (o LookupForwardingRuleResultOutput) ListenerIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupForwardingRuleResult) string { return v.ListenerIp }).(pulumi.StringOutput)
}

// Listening port number. (inbound) (range: 1 to 65535)
func (o LookupForwardingRuleResultOutput) ListenerPort() pulumi.IntOutput {
	return o.ApplyT(func(v LookupForwardingRuleResult) int { return v.ListenerPort }).(pulumi.IntOutput)
}

// The name of that Network Load Balancer forwarding rule.
func (o LookupForwardingRuleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupForwardingRuleResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupForwardingRuleResultOutput) NetworkloadbalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupForwardingRuleResult) string { return v.NetworkloadbalancerId }).(pulumi.StringOutput)
}

// Protocol of the balancing.
func (o LookupForwardingRuleResultOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v LookupForwardingRuleResult) string { return v.Protocol }).(pulumi.StringOutput)
}

// Array of items in that collection.
func (o LookupForwardingRuleResultOutput) Targets() GetForwardingRuleTargetArrayOutput {
	return o.ApplyT(func(v LookupForwardingRuleResult) []GetForwardingRuleTarget { return v.Targets }).(GetForwardingRuleTargetArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupForwardingRuleResultOutput{})
}
