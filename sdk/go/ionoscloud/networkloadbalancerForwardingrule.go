// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a **Network Load Balancer Forwarding Rule** on IonosCloud.
//
// ## Example Usage
//
// ###
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleDatacenter, err := compute.NewDatacenter(ctx, "exampleDatacenter", &compute.DatacenterArgs{
//				Location:          pulumi.String("us/las"),
//				Description:       pulumi.String("Datacenter Description"),
//				SecAuthProtection: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			example1, err := compute.NewLan(ctx, "example1", &compute.LanArgs{
//				DatacenterId: exampleDatacenter.ID(),
//				Public:       pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			example2, err := compute.NewLan(ctx, "example2", &compute.LanArgs{
//				DatacenterId: exampleDatacenter.ID(),
//				Public:       pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			exampleNetworkloadbalancer, err := ionoscloud.NewNetworkloadbalancer(ctx, "exampleNetworkloadbalancer", &ionoscloud.NetworkloadbalancerArgs{
//				DatacenterId: exampleDatacenter.ID(),
//				ListenerLan:  example1.ID(),
//				TargetLan:    example2.ID(),
//				Ips: pulumi.StringArray{
//					pulumi.String("10.12.118.224"),
//				},
//				LbPrivateIps: pulumi.StringArray{
//					pulumi.String("10.13.72.225/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ionoscloud.NewNetworkloadbalancerForwardingrule(ctx, "exampleNetworkloadbalancerForwardingrule", &ionoscloud.NetworkloadbalancerForwardingruleArgs{
//				DatacenterId:          exampleDatacenter.ID(),
//				NetworkloadbalancerId: exampleNetworkloadbalancer.ID(),
//				Algorithm:             pulumi.String("SOURCE_IP"),
//				Protocol:              pulumi.String("TCP"),
//				ListenerIp:            pulumi.String("10.12.118.224"),
//				ListenerPort:          pulumi.Int(8081),
//				Targets: ionoscloud.NetworkloadbalancerForwardingruleTargetArray{
//					&ionoscloud.NetworkloadbalancerForwardingruleTargetArgs{
//						Ip:            pulumi.String("22.231.2.2"),
//						Port:          pulumi.Int(8080),
//						Weight:        pulumi.Int(123),
//						ProxyProtocol: pulumi.String("v1"),
//						HealthCheck: &ionoscloud.NetworkloadbalancerForwardingruleTargetHealthCheckArgs{
//							Check:         pulumi.Bool(true),
//							CheckInterval: pulumi.Int(1000),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A Network Load Balancer Forwarding Rule resource can be imported using its `resource id`, the `datacenter id` and the `networkloadbalancer id` e.g.
//
// ```sh
// $ pulumi import ionoscloud:index/networkloadbalancerForwardingrule:NetworkloadbalancerForwardingrule my_networkloadbalancer_forwardingrule {datacenter uuid}/{networkloadbalancer uuid}/{networkloadbalancer_forwardingrule uuid}
// ```
type NetworkloadbalancerForwardingrule struct {
	pulumi.CustomResourceState

	// [string] Algorithm for the balancing.
	Algorithm pulumi.StringOutput `pulumi:"algorithm"`
	// [string] A Datacenter's UUID.
	DatacenterId pulumi.StringOutput `pulumi:"datacenterId"`
	// Health check attributes for Network Load Balancer forwarding rule.
	HealthCheck NetworkloadbalancerForwardingruleHealthCheckOutput `pulumi:"healthCheck"`
	// [string] Listening IP. (inbound)
	ListenerIp pulumi.StringOutput `pulumi:"listenerIp"`
	// [int] Listening port number. (inbound) (range: 1 to 65535)
	ListenerPort pulumi.IntOutput `pulumi:"listenerPort"`
	// [string] A name of that Network Load Balancer forwarding rule.
	Name                  pulumi.StringOutput `pulumi:"name"`
	NetworkloadbalancerId pulumi.StringOutput `pulumi:"networkloadbalancerId"`
	// [string] Protocol of the balancing.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// [Set] Array of items in that collection.
	Targets NetworkloadbalancerForwardingruleTargetArrayOutput `pulumi:"targets"`
}

// NewNetworkloadbalancerForwardingrule registers a new resource with the given unique name, arguments, and options.
func NewNetworkloadbalancerForwardingrule(ctx *pulumi.Context,
	name string, args *NetworkloadbalancerForwardingruleArgs, opts ...pulumi.ResourceOption) (*NetworkloadbalancerForwardingrule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Algorithm == nil {
		return nil, errors.New("invalid value for required argument 'Algorithm'")
	}
	if args.DatacenterId == nil {
		return nil, errors.New("invalid value for required argument 'DatacenterId'")
	}
	if args.ListenerIp == nil {
		return nil, errors.New("invalid value for required argument 'ListenerIp'")
	}
	if args.ListenerPort == nil {
		return nil, errors.New("invalid value for required argument 'ListenerPort'")
	}
	if args.NetworkloadbalancerId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkloadbalancerId'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.Targets == nil {
		return nil, errors.New("invalid value for required argument 'Targets'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkloadbalancerForwardingrule
	err := ctx.RegisterResource("ionoscloud:index/networkloadbalancerForwardingrule:NetworkloadbalancerForwardingrule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkloadbalancerForwardingrule gets an existing NetworkloadbalancerForwardingrule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkloadbalancerForwardingrule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkloadbalancerForwardingruleState, opts ...pulumi.ResourceOption) (*NetworkloadbalancerForwardingrule, error) {
	var resource NetworkloadbalancerForwardingrule
	err := ctx.ReadResource("ionoscloud:index/networkloadbalancerForwardingrule:NetworkloadbalancerForwardingrule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkloadbalancerForwardingrule resources.
type networkloadbalancerForwardingruleState struct {
	// [string] Algorithm for the balancing.
	Algorithm *string `pulumi:"algorithm"`
	// [string] A Datacenter's UUID.
	DatacenterId *string `pulumi:"datacenterId"`
	// Health check attributes for Network Load Balancer forwarding rule.
	HealthCheck *NetworkloadbalancerForwardingruleHealthCheck `pulumi:"healthCheck"`
	// [string] Listening IP. (inbound)
	ListenerIp *string `pulumi:"listenerIp"`
	// [int] Listening port number. (inbound) (range: 1 to 65535)
	ListenerPort *int `pulumi:"listenerPort"`
	// [string] A name of that Network Load Balancer forwarding rule.
	Name                  *string `pulumi:"name"`
	NetworkloadbalancerId *string `pulumi:"networkloadbalancerId"`
	// [string] Protocol of the balancing.
	Protocol *string `pulumi:"protocol"`
	// [Set] Array of items in that collection.
	Targets []NetworkloadbalancerForwardingruleTarget `pulumi:"targets"`
}

type NetworkloadbalancerForwardingruleState struct {
	// [string] Algorithm for the balancing.
	Algorithm pulumi.StringPtrInput
	// [string] A Datacenter's UUID.
	DatacenterId pulumi.StringPtrInput
	// Health check attributes for Network Load Balancer forwarding rule.
	HealthCheck NetworkloadbalancerForwardingruleHealthCheckPtrInput
	// [string] Listening IP. (inbound)
	ListenerIp pulumi.StringPtrInput
	// [int] Listening port number. (inbound) (range: 1 to 65535)
	ListenerPort pulumi.IntPtrInput
	// [string] A name of that Network Load Balancer forwarding rule.
	Name                  pulumi.StringPtrInput
	NetworkloadbalancerId pulumi.StringPtrInput
	// [string] Protocol of the balancing.
	Protocol pulumi.StringPtrInput
	// [Set] Array of items in that collection.
	Targets NetworkloadbalancerForwardingruleTargetArrayInput
}

func (NetworkloadbalancerForwardingruleState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkloadbalancerForwardingruleState)(nil)).Elem()
}

type networkloadbalancerForwardingruleArgs struct {
	// [string] Algorithm for the balancing.
	Algorithm string `pulumi:"algorithm"`
	// [string] A Datacenter's UUID.
	DatacenterId string `pulumi:"datacenterId"`
	// Health check attributes for Network Load Balancer forwarding rule.
	HealthCheck *NetworkloadbalancerForwardingruleHealthCheck `pulumi:"healthCheck"`
	// [string] Listening IP. (inbound)
	ListenerIp string `pulumi:"listenerIp"`
	// [int] Listening port number. (inbound) (range: 1 to 65535)
	ListenerPort int `pulumi:"listenerPort"`
	// [string] A name of that Network Load Balancer forwarding rule.
	Name                  *string `pulumi:"name"`
	NetworkloadbalancerId string  `pulumi:"networkloadbalancerId"`
	// [string] Protocol of the balancing.
	Protocol string `pulumi:"protocol"`
	// [Set] Array of items in that collection.
	Targets []NetworkloadbalancerForwardingruleTarget `pulumi:"targets"`
}

// The set of arguments for constructing a NetworkloadbalancerForwardingrule resource.
type NetworkloadbalancerForwardingruleArgs struct {
	// [string] Algorithm for the balancing.
	Algorithm pulumi.StringInput
	// [string] A Datacenter's UUID.
	DatacenterId pulumi.StringInput
	// Health check attributes for Network Load Balancer forwarding rule.
	HealthCheck NetworkloadbalancerForwardingruleHealthCheckPtrInput
	// [string] Listening IP. (inbound)
	ListenerIp pulumi.StringInput
	// [int] Listening port number. (inbound) (range: 1 to 65535)
	ListenerPort pulumi.IntInput
	// [string] A name of that Network Load Balancer forwarding rule.
	Name                  pulumi.StringPtrInput
	NetworkloadbalancerId pulumi.StringInput
	// [string] Protocol of the balancing.
	Protocol pulumi.StringInput
	// [Set] Array of items in that collection.
	Targets NetworkloadbalancerForwardingruleTargetArrayInput
}

func (NetworkloadbalancerForwardingruleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkloadbalancerForwardingruleArgs)(nil)).Elem()
}

type NetworkloadbalancerForwardingruleInput interface {
	pulumi.Input

	ToNetworkloadbalancerForwardingruleOutput() NetworkloadbalancerForwardingruleOutput
	ToNetworkloadbalancerForwardingruleOutputWithContext(ctx context.Context) NetworkloadbalancerForwardingruleOutput
}

func (*NetworkloadbalancerForwardingrule) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkloadbalancerForwardingrule)(nil)).Elem()
}

func (i *NetworkloadbalancerForwardingrule) ToNetworkloadbalancerForwardingruleOutput() NetworkloadbalancerForwardingruleOutput {
	return i.ToNetworkloadbalancerForwardingruleOutputWithContext(context.Background())
}

func (i *NetworkloadbalancerForwardingrule) ToNetworkloadbalancerForwardingruleOutputWithContext(ctx context.Context) NetworkloadbalancerForwardingruleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkloadbalancerForwardingruleOutput)
}

// NetworkloadbalancerForwardingruleArrayInput is an input type that accepts NetworkloadbalancerForwardingruleArray and NetworkloadbalancerForwardingruleArrayOutput values.
// You can construct a concrete instance of `NetworkloadbalancerForwardingruleArrayInput` via:
//
//	NetworkloadbalancerForwardingruleArray{ NetworkloadbalancerForwardingruleArgs{...} }
type NetworkloadbalancerForwardingruleArrayInput interface {
	pulumi.Input

	ToNetworkloadbalancerForwardingruleArrayOutput() NetworkloadbalancerForwardingruleArrayOutput
	ToNetworkloadbalancerForwardingruleArrayOutputWithContext(context.Context) NetworkloadbalancerForwardingruleArrayOutput
}

type NetworkloadbalancerForwardingruleArray []NetworkloadbalancerForwardingruleInput

func (NetworkloadbalancerForwardingruleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkloadbalancerForwardingrule)(nil)).Elem()
}

func (i NetworkloadbalancerForwardingruleArray) ToNetworkloadbalancerForwardingruleArrayOutput() NetworkloadbalancerForwardingruleArrayOutput {
	return i.ToNetworkloadbalancerForwardingruleArrayOutputWithContext(context.Background())
}

func (i NetworkloadbalancerForwardingruleArray) ToNetworkloadbalancerForwardingruleArrayOutputWithContext(ctx context.Context) NetworkloadbalancerForwardingruleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkloadbalancerForwardingruleArrayOutput)
}

// NetworkloadbalancerForwardingruleMapInput is an input type that accepts NetworkloadbalancerForwardingruleMap and NetworkloadbalancerForwardingruleMapOutput values.
// You can construct a concrete instance of `NetworkloadbalancerForwardingruleMapInput` via:
//
//	NetworkloadbalancerForwardingruleMap{ "key": NetworkloadbalancerForwardingruleArgs{...} }
type NetworkloadbalancerForwardingruleMapInput interface {
	pulumi.Input

	ToNetworkloadbalancerForwardingruleMapOutput() NetworkloadbalancerForwardingruleMapOutput
	ToNetworkloadbalancerForwardingruleMapOutputWithContext(context.Context) NetworkloadbalancerForwardingruleMapOutput
}

type NetworkloadbalancerForwardingruleMap map[string]NetworkloadbalancerForwardingruleInput

func (NetworkloadbalancerForwardingruleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkloadbalancerForwardingrule)(nil)).Elem()
}

func (i NetworkloadbalancerForwardingruleMap) ToNetworkloadbalancerForwardingruleMapOutput() NetworkloadbalancerForwardingruleMapOutput {
	return i.ToNetworkloadbalancerForwardingruleMapOutputWithContext(context.Background())
}

func (i NetworkloadbalancerForwardingruleMap) ToNetworkloadbalancerForwardingruleMapOutputWithContext(ctx context.Context) NetworkloadbalancerForwardingruleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkloadbalancerForwardingruleMapOutput)
}

type NetworkloadbalancerForwardingruleOutput struct{ *pulumi.OutputState }

func (NetworkloadbalancerForwardingruleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkloadbalancerForwardingrule)(nil)).Elem()
}

func (o NetworkloadbalancerForwardingruleOutput) ToNetworkloadbalancerForwardingruleOutput() NetworkloadbalancerForwardingruleOutput {
	return o
}

func (o NetworkloadbalancerForwardingruleOutput) ToNetworkloadbalancerForwardingruleOutputWithContext(ctx context.Context) NetworkloadbalancerForwardingruleOutput {
	return o
}

// [string] Algorithm for the balancing.
func (o NetworkloadbalancerForwardingruleOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkloadbalancerForwardingrule) pulumi.StringOutput { return v.Algorithm }).(pulumi.StringOutput)
}

// [string] A Datacenter's UUID.
func (o NetworkloadbalancerForwardingruleOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkloadbalancerForwardingrule) pulumi.StringOutput { return v.DatacenterId }).(pulumi.StringOutput)
}

// Health check attributes for Network Load Balancer forwarding rule.
func (o NetworkloadbalancerForwardingruleOutput) HealthCheck() NetworkloadbalancerForwardingruleHealthCheckOutput {
	return o.ApplyT(func(v *NetworkloadbalancerForwardingrule) NetworkloadbalancerForwardingruleHealthCheckOutput {
		return v.HealthCheck
	}).(NetworkloadbalancerForwardingruleHealthCheckOutput)
}

// [string] Listening IP. (inbound)
func (o NetworkloadbalancerForwardingruleOutput) ListenerIp() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkloadbalancerForwardingrule) pulumi.StringOutput { return v.ListenerIp }).(pulumi.StringOutput)
}

// [int] Listening port number. (inbound) (range: 1 to 65535)
func (o NetworkloadbalancerForwardingruleOutput) ListenerPort() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkloadbalancerForwardingrule) pulumi.IntOutput { return v.ListenerPort }).(pulumi.IntOutput)
}

// [string] A name of that Network Load Balancer forwarding rule.
func (o NetworkloadbalancerForwardingruleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkloadbalancerForwardingrule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NetworkloadbalancerForwardingruleOutput) NetworkloadbalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkloadbalancerForwardingrule) pulumi.StringOutput { return v.NetworkloadbalancerId }).(pulumi.StringOutput)
}

// [string] Protocol of the balancing.
func (o NetworkloadbalancerForwardingruleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkloadbalancerForwardingrule) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// [Set] Array of items in that collection.
func (o NetworkloadbalancerForwardingruleOutput) Targets() NetworkloadbalancerForwardingruleTargetArrayOutput {
	return o.ApplyT(func(v *NetworkloadbalancerForwardingrule) NetworkloadbalancerForwardingruleTargetArrayOutput {
		return v.Targets
	}).(NetworkloadbalancerForwardingruleTargetArrayOutput)
}

type NetworkloadbalancerForwardingruleArrayOutput struct{ *pulumi.OutputState }

func (NetworkloadbalancerForwardingruleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkloadbalancerForwardingrule)(nil)).Elem()
}

func (o NetworkloadbalancerForwardingruleArrayOutput) ToNetworkloadbalancerForwardingruleArrayOutput() NetworkloadbalancerForwardingruleArrayOutput {
	return o
}

func (o NetworkloadbalancerForwardingruleArrayOutput) ToNetworkloadbalancerForwardingruleArrayOutputWithContext(ctx context.Context) NetworkloadbalancerForwardingruleArrayOutput {
	return o
}

func (o NetworkloadbalancerForwardingruleArrayOutput) Index(i pulumi.IntInput) NetworkloadbalancerForwardingruleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkloadbalancerForwardingrule {
		return vs[0].([]*NetworkloadbalancerForwardingrule)[vs[1].(int)]
	}).(NetworkloadbalancerForwardingruleOutput)
}

type NetworkloadbalancerForwardingruleMapOutput struct{ *pulumi.OutputState }

func (NetworkloadbalancerForwardingruleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkloadbalancerForwardingrule)(nil)).Elem()
}

func (o NetworkloadbalancerForwardingruleMapOutput) ToNetworkloadbalancerForwardingruleMapOutput() NetworkloadbalancerForwardingruleMapOutput {
	return o
}

func (o NetworkloadbalancerForwardingruleMapOutput) ToNetworkloadbalancerForwardingruleMapOutputWithContext(ctx context.Context) NetworkloadbalancerForwardingruleMapOutput {
	return o
}

func (o NetworkloadbalancerForwardingruleMapOutput) MapIndex(k pulumi.StringInput) NetworkloadbalancerForwardingruleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkloadbalancerForwardingrule {
		return vs[0].(map[string]*NetworkloadbalancerForwardingrule)[vs[1].(string)]
	}).(NetworkloadbalancerForwardingruleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkloadbalancerForwardingruleInput)(nil)).Elem(), &NetworkloadbalancerForwardingrule{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkloadbalancerForwardingruleArrayInput)(nil)).Elem(), NetworkloadbalancerForwardingruleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkloadbalancerForwardingruleMapInput)(nil)).Elem(), NetworkloadbalancerForwardingruleMap{})
	pulumi.RegisterOutputType(NetworkloadbalancerForwardingruleOutput{})
	pulumi.RegisterOutputType(NetworkloadbalancerForwardingruleArrayOutput{})
	pulumi.RegisterOutputType(NetworkloadbalancerForwardingruleMapOutput{})
}
