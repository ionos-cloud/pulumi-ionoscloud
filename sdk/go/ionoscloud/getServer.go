// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **Server data source** can be used to search for and return existing servers.
// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
// When this happens, please refine your search string so that it is specific enough to return only one result.
//
// ## Example Usage
func GetServer(ctx *pulumi.Context, args *GetServerArgs, opts ...pulumi.InvokeOption) (*GetServerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetServerResult
	err := ctx.Invoke("ionoscloud:index/getServer:getServer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServer.
type GetServerArgs struct {
	// Datacenter's UUID.
	DatacenterId string `pulumi:"datacenterId"`
	// ID of the server you want to search for.
	//
	// `datacenterId` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
	Id *string `pulumi:"id"`
	// Name of an existing server that you want to search for.
	Name *string `pulumi:"name"`
	// The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
	TemplateUuid *string `pulumi:"templateUuid"`
	// The type of firewall rule
	Type *string `pulumi:"type"`
}

// A collection of values returned by getServer.
type GetServerResult struct {
	// The availability zone in which the volume should exist
	AvailabilityZone string `pulumi:"availabilityZone"`
	BootCdrom        string `pulumi:"bootCdrom"`
	BootImage        string `pulumi:"bootImage"`
	BootVolume       string `pulumi:"bootVolume"`
	// list of
	Cdroms []GetServerCdrom `pulumi:"cdroms"`
	// The total number of cores for the server
	Cores int `pulumi:"cores"`
	// CPU architecture on which server gets provisioned; not all CPU architectures are available in all datacenter regions; available CPU architectures can be retrieved from the datacenter resource.
	CpuFamily string `pulumi:"cpuFamily"`
	// The id of the datacenter
	DatacenterId string `pulumi:"datacenterId"`
	// The Id of the label
	Id *string `pulumi:"id"`
	// list of
	Labels []GetServerLabel `pulumi:"labels"`
	// Name of the firewall rule
	Name *string `pulumi:"name"`
	// list of
	Nics []GetServerNic `pulumi:"nics"`
	// The amount of memory for the server in MB
	Ram int `pulumi:"ram"`
	// The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
	TemplateUuid *string `pulumi:"templateUuid"`
	Token        string  `pulumi:"token"`
	// The type of firewall rule
	Type string `pulumi:"type"`
	// Status of the virtual Machine
	VmState string `pulumi:"vmState"`
	// list of
	Volumes []GetServerVolume `pulumi:"volumes"`
}

func GetServerOutput(ctx *pulumi.Context, args GetServerOutputArgs, opts ...pulumi.InvokeOption) GetServerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetServerResultOutput, error) {
			args := v.(GetServerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ionoscloud:index/getServer:getServer", args, GetServerResultOutput{}, options).(GetServerResultOutput), nil
		}).(GetServerResultOutput)
}

// A collection of arguments for invoking getServer.
type GetServerOutputArgs struct {
	// Datacenter's UUID.
	DatacenterId pulumi.StringInput `pulumi:"datacenterId"`
	// ID of the server you want to search for.
	//
	// `datacenterId` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of an existing server that you want to search for.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
	TemplateUuid pulumi.StringPtrInput `pulumi:"templateUuid"`
	// The type of firewall rule
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GetServerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerArgs)(nil)).Elem()
}

// A collection of values returned by getServer.
type GetServerResultOutput struct{ *pulumi.OutputState }

func (GetServerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerResult)(nil)).Elem()
}

func (o GetServerResultOutput) ToGetServerResultOutput() GetServerResultOutput {
	return o
}

func (o GetServerResultOutput) ToGetServerResultOutputWithContext(ctx context.Context) GetServerResultOutput {
	return o
}

// The availability zone in which the volume should exist
func (o GetServerResultOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerResult) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o GetServerResultOutput) BootCdrom() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerResult) string { return v.BootCdrom }).(pulumi.StringOutput)
}

func (o GetServerResultOutput) BootImage() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerResult) string { return v.BootImage }).(pulumi.StringOutput)
}

func (o GetServerResultOutput) BootVolume() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerResult) string { return v.BootVolume }).(pulumi.StringOutput)
}

// list of
func (o GetServerResultOutput) Cdroms() GetServerCdromArrayOutput {
	return o.ApplyT(func(v GetServerResult) []GetServerCdrom { return v.Cdroms }).(GetServerCdromArrayOutput)
}

// The total number of cores for the server
func (o GetServerResultOutput) Cores() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerResult) int { return v.Cores }).(pulumi.IntOutput)
}

// CPU architecture on which server gets provisioned; not all CPU architectures are available in all datacenter regions; available CPU architectures can be retrieved from the datacenter resource.
func (o GetServerResultOutput) CpuFamily() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerResult) string { return v.CpuFamily }).(pulumi.StringOutput)
}

// The id of the datacenter
func (o GetServerResultOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerResult) string { return v.DatacenterId }).(pulumi.StringOutput)
}

// The Id of the label
func (o GetServerResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetServerResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// list of
func (o GetServerResultOutput) Labels() GetServerLabelArrayOutput {
	return o.ApplyT(func(v GetServerResult) []GetServerLabel { return v.Labels }).(GetServerLabelArrayOutput)
}

// Name of the firewall rule
func (o GetServerResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetServerResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// list of
func (o GetServerResultOutput) Nics() GetServerNicArrayOutput {
	return o.ApplyT(func(v GetServerResult) []GetServerNic { return v.Nics }).(GetServerNicArrayOutput)
}

// The amount of memory for the server in MB
func (o GetServerResultOutput) Ram() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerResult) int { return v.Ram }).(pulumi.IntOutput)
}

// The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
func (o GetServerResultOutput) TemplateUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetServerResult) *string { return v.TemplateUuid }).(pulumi.StringPtrOutput)
}

func (o GetServerResultOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerResult) string { return v.Token }).(pulumi.StringOutput)
}

// The type of firewall rule
func (o GetServerResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerResult) string { return v.Type }).(pulumi.StringOutput)
}

// Status of the virtual Machine
func (o GetServerResultOutput) VmState() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerResult) string { return v.VmState }).(pulumi.StringOutput)
}

// list of
func (o GetServerResultOutput) Volumes() GetServerVolumeArrayOutput {
	return o.ApplyT(func(v GetServerResult) []GetServerVolume { return v.Volumes }).(GetServerVolumeArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetServerResultOutput{})
}
