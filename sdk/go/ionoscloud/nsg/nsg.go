// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nsg

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a **Network Security Group** on IonosCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/nsg"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := compute.NewDatacenter(ctx, "example", &compute.DatacenterArgs{
//				Name:     pulumi.String("Datacenter NSG Example"),
//				Location: pulumi.String("de/txl"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = nsg.NewNsg(ctx, "example", &nsg.NsgArgs{
//				Name:         pulumi.String("Example NSG"),
//				Description:  pulumi.String("Example NSG Description"),
//				DatacenterId: example.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Resource Server can be imported using the `resource id` and the `datacenter id`, e.g.
//
// ```sh
// $ pulumi import ionoscloud:nsg/nsg:Nsg mynsg datacenter uuid/nsg uuid
// ```
//
// Or by using an `import` block. Here is an example that allows you to import the default created nsg into pulumi.
//
// hcl
//
// resource "ionoscloud_datacenter" "example" {
//
//	name            = "Datacenter NSG Example"
//
//	location        = "de/txl"
//
// }
//
// import {
//
//	to = ionoscloud_nsg.imported
//
//	id = "datacenter uuid/default nsg uuid"
//
// }
//
// resource "ionoscloud_nsg" "imported_default" {  # Imported here
//
//	datacenter_id     = ionoscloud_datacenter.example.id
//
// }
type Nsg struct {
	pulumi.CustomResourceState

	// [string] The ID of a Virtual Data Center.
	DatacenterId pulumi.StringOutput `pulumi:"datacenterId"`
	// [string] Description for the Network Security Group.
	Description pulumi.StringOutput `pulumi:"description"`
	// [string] The name of the Network Security Group.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of Firewall Rules that are part of the Network Security Group
	RuleIds pulumi.StringArrayOutput `pulumi:"ruleIds"`
}

// NewNsg registers a new resource with the given unique name, arguments, and options.
func NewNsg(ctx *pulumi.Context,
	name string, args *NsgArgs, opts ...pulumi.ResourceOption) (*Nsg, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatacenterId == nil {
		return nil, errors.New("invalid value for required argument 'DatacenterId'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Nsg
	err := ctx.RegisterResource("ionoscloud:nsg/nsg:Nsg", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNsg gets an existing Nsg resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNsg(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NsgState, opts ...pulumi.ResourceOption) (*Nsg, error) {
	var resource Nsg
	err := ctx.ReadResource("ionoscloud:nsg/nsg:Nsg", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Nsg resources.
type nsgState struct {
	// [string] The ID of a Virtual Data Center.
	DatacenterId *string `pulumi:"datacenterId"`
	// [string] Description for the Network Security Group.
	Description *string `pulumi:"description"`
	// [string] The name of the Network Security Group.
	Name *string `pulumi:"name"`
	// List of Firewall Rules that are part of the Network Security Group
	RuleIds []string `pulumi:"ruleIds"`
}

type NsgState struct {
	// [string] The ID of a Virtual Data Center.
	DatacenterId pulumi.StringPtrInput
	// [string] Description for the Network Security Group.
	Description pulumi.StringPtrInput
	// [string] The name of the Network Security Group.
	Name pulumi.StringPtrInput
	// List of Firewall Rules that are part of the Network Security Group
	RuleIds pulumi.StringArrayInput
}

func (NsgState) ElementType() reflect.Type {
	return reflect.TypeOf((*nsgState)(nil)).Elem()
}

type nsgArgs struct {
	// [string] The ID of a Virtual Data Center.
	DatacenterId string `pulumi:"datacenterId"`
	// [string] Description for the Network Security Group.
	Description string `pulumi:"description"`
	// [string] The name of the Network Security Group.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Nsg resource.
type NsgArgs struct {
	// [string] The ID of a Virtual Data Center.
	DatacenterId pulumi.StringInput
	// [string] Description for the Network Security Group.
	Description pulumi.StringInput
	// [string] The name of the Network Security Group.
	Name pulumi.StringPtrInput
}

func (NsgArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nsgArgs)(nil)).Elem()
}

type NsgInput interface {
	pulumi.Input

	ToNsgOutput() NsgOutput
	ToNsgOutputWithContext(ctx context.Context) NsgOutput
}

func (*Nsg) ElementType() reflect.Type {
	return reflect.TypeOf((**Nsg)(nil)).Elem()
}

func (i *Nsg) ToNsgOutput() NsgOutput {
	return i.ToNsgOutputWithContext(context.Background())
}

func (i *Nsg) ToNsgOutputWithContext(ctx context.Context) NsgOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsgOutput)
}

// NsgArrayInput is an input type that accepts NsgArray and NsgArrayOutput values.
// You can construct a concrete instance of `NsgArrayInput` via:
//
//	NsgArray{ NsgArgs{...} }
type NsgArrayInput interface {
	pulumi.Input

	ToNsgArrayOutput() NsgArrayOutput
	ToNsgArrayOutputWithContext(context.Context) NsgArrayOutput
}

type NsgArray []NsgInput

func (NsgArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Nsg)(nil)).Elem()
}

func (i NsgArray) ToNsgArrayOutput() NsgArrayOutput {
	return i.ToNsgArrayOutputWithContext(context.Background())
}

func (i NsgArray) ToNsgArrayOutputWithContext(ctx context.Context) NsgArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsgArrayOutput)
}

// NsgMapInput is an input type that accepts NsgMap and NsgMapOutput values.
// You can construct a concrete instance of `NsgMapInput` via:
//
//	NsgMap{ "key": NsgArgs{...} }
type NsgMapInput interface {
	pulumi.Input

	ToNsgMapOutput() NsgMapOutput
	ToNsgMapOutputWithContext(context.Context) NsgMapOutput
}

type NsgMap map[string]NsgInput

func (NsgMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Nsg)(nil)).Elem()
}

func (i NsgMap) ToNsgMapOutput() NsgMapOutput {
	return i.ToNsgMapOutputWithContext(context.Background())
}

func (i NsgMap) ToNsgMapOutputWithContext(ctx context.Context) NsgMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsgMapOutput)
}

type NsgOutput struct{ *pulumi.OutputState }

func (NsgOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Nsg)(nil)).Elem()
}

func (o NsgOutput) ToNsgOutput() NsgOutput {
	return o
}

func (o NsgOutput) ToNsgOutputWithContext(ctx context.Context) NsgOutput {
	return o
}

// [string] The ID of a Virtual Data Center.
func (o NsgOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Nsg) pulumi.StringOutput { return v.DatacenterId }).(pulumi.StringOutput)
}

// [string] Description for the Network Security Group.
func (o NsgOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Nsg) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// [string] The name of the Network Security Group.
func (o NsgOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Nsg) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of Firewall Rules that are part of the Network Security Group
func (o NsgOutput) RuleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Nsg) pulumi.StringArrayOutput { return v.RuleIds }).(pulumi.StringArrayOutput)
}

type NsgArrayOutput struct{ *pulumi.OutputState }

func (NsgArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Nsg)(nil)).Elem()
}

func (o NsgArrayOutput) ToNsgArrayOutput() NsgArrayOutput {
	return o
}

func (o NsgArrayOutput) ToNsgArrayOutputWithContext(ctx context.Context) NsgArrayOutput {
	return o
}

func (o NsgArrayOutput) Index(i pulumi.IntInput) NsgOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Nsg {
		return vs[0].([]*Nsg)[vs[1].(int)]
	}).(NsgOutput)
}

type NsgMapOutput struct{ *pulumi.OutputState }

func (NsgMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Nsg)(nil)).Elem()
}

func (o NsgMapOutput) ToNsgMapOutput() NsgMapOutput {
	return o
}

func (o NsgMapOutput) ToNsgMapOutputWithContext(ctx context.Context) NsgMapOutput {
	return o
}

func (o NsgMapOutput) MapIndex(k pulumi.StringInput) NsgOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Nsg {
		return vs[0].(map[string]*Nsg)[vs[1].(string)]
	}).(NsgOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NsgInput)(nil)).Elem(), &Nsg{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsgArrayInput)(nil)).Elem(), NsgArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsgMapInput)(nil)).Elem(), NsgMap{})
	pulumi.RegisterOutputType(NsgOutput{})
	pulumi.RegisterOutputType(NsgArrayOutput{})
	pulumi.RegisterOutputType(NsgMapOutput{})
}
