// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nsg

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Links a Network Security Group to a IonosCloud datacenter. The datacenter can only have one linked NSG. To set a new NSG for the datacenter, the current one will be unlinked.
//
// ## Example Usage
//
// A Network Security Group can be linked to a `compute.Datacenter` with this resource.
// Deleting the resource will unlink the NSG from the datacenter.
//
// ### Select an external volume
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/nsg"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := compute.NewDatacenter(ctx, "example", &compute.DatacenterArgs{
//				Name:     pulumi.String("Datacenter Default NSG Example"),
//				Location: pulumi.String("de/fra"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleNsg, err := nsg.NewNsg(ctx, "example", &nsg.NsgArgs{
//				Name:         pulumi.String("NSG"),
//				Description:  pulumi.String("NSG"),
//				DatacenterId: example.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = nsg.NewDatacenterNsgSelection(ctx, "example", &nsg.DatacenterNsgSelectionArgs{
//				DatacenterId: example.ID(),
//				NsgId:        exampleNsg.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DatacenterNsgSelection struct {
	pulumi.CustomResourceState

	// [string] The ID of a Virtual Data Center.
	DatacenterId pulumi.StringOutput `pulumi:"datacenterId"`
	// [string] The ID of a Network Security Group.
	NsgId pulumi.StringOutput `pulumi:"nsgId"`
}

// NewDatacenterNsgSelection registers a new resource with the given unique name, arguments, and options.
func NewDatacenterNsgSelection(ctx *pulumi.Context,
	name string, args *DatacenterNsgSelectionArgs, opts ...pulumi.ResourceOption) (*DatacenterNsgSelection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatacenterId == nil {
		return nil, errors.New("invalid value for required argument 'DatacenterId'")
	}
	if args.NsgId == nil {
		return nil, errors.New("invalid value for required argument 'NsgId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatacenterNsgSelection
	err := ctx.RegisterResource("ionoscloud:nsg/datacenterNsgSelection:DatacenterNsgSelection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatacenterNsgSelection gets an existing DatacenterNsgSelection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatacenterNsgSelection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatacenterNsgSelectionState, opts ...pulumi.ResourceOption) (*DatacenterNsgSelection, error) {
	var resource DatacenterNsgSelection
	err := ctx.ReadResource("ionoscloud:nsg/datacenterNsgSelection:DatacenterNsgSelection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatacenterNsgSelection resources.
type datacenterNsgSelectionState struct {
	// [string] The ID of a Virtual Data Center.
	DatacenterId *string `pulumi:"datacenterId"`
	// [string] The ID of a Network Security Group.
	NsgId *string `pulumi:"nsgId"`
}

type DatacenterNsgSelectionState struct {
	// [string] The ID of a Virtual Data Center.
	DatacenterId pulumi.StringPtrInput
	// [string] The ID of a Network Security Group.
	NsgId pulumi.StringPtrInput
}

func (DatacenterNsgSelectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*datacenterNsgSelectionState)(nil)).Elem()
}

type datacenterNsgSelectionArgs struct {
	// [string] The ID of a Virtual Data Center.
	DatacenterId string `pulumi:"datacenterId"`
	// [string] The ID of a Network Security Group.
	NsgId string `pulumi:"nsgId"`
}

// The set of arguments for constructing a DatacenterNsgSelection resource.
type DatacenterNsgSelectionArgs struct {
	// [string] The ID of a Virtual Data Center.
	DatacenterId pulumi.StringInput
	// [string] The ID of a Network Security Group.
	NsgId pulumi.StringInput
}

func (DatacenterNsgSelectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datacenterNsgSelectionArgs)(nil)).Elem()
}

type DatacenterNsgSelectionInput interface {
	pulumi.Input

	ToDatacenterNsgSelectionOutput() DatacenterNsgSelectionOutput
	ToDatacenterNsgSelectionOutputWithContext(ctx context.Context) DatacenterNsgSelectionOutput
}

func (*DatacenterNsgSelection) ElementType() reflect.Type {
	return reflect.TypeOf((**DatacenterNsgSelection)(nil)).Elem()
}

func (i *DatacenterNsgSelection) ToDatacenterNsgSelectionOutput() DatacenterNsgSelectionOutput {
	return i.ToDatacenterNsgSelectionOutputWithContext(context.Background())
}

func (i *DatacenterNsgSelection) ToDatacenterNsgSelectionOutputWithContext(ctx context.Context) DatacenterNsgSelectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacenterNsgSelectionOutput)
}

// DatacenterNsgSelectionArrayInput is an input type that accepts DatacenterNsgSelectionArray and DatacenterNsgSelectionArrayOutput values.
// You can construct a concrete instance of `DatacenterNsgSelectionArrayInput` via:
//
//	DatacenterNsgSelectionArray{ DatacenterNsgSelectionArgs{...} }
type DatacenterNsgSelectionArrayInput interface {
	pulumi.Input

	ToDatacenterNsgSelectionArrayOutput() DatacenterNsgSelectionArrayOutput
	ToDatacenterNsgSelectionArrayOutputWithContext(context.Context) DatacenterNsgSelectionArrayOutput
}

type DatacenterNsgSelectionArray []DatacenterNsgSelectionInput

func (DatacenterNsgSelectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatacenterNsgSelection)(nil)).Elem()
}

func (i DatacenterNsgSelectionArray) ToDatacenterNsgSelectionArrayOutput() DatacenterNsgSelectionArrayOutput {
	return i.ToDatacenterNsgSelectionArrayOutputWithContext(context.Background())
}

func (i DatacenterNsgSelectionArray) ToDatacenterNsgSelectionArrayOutputWithContext(ctx context.Context) DatacenterNsgSelectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacenterNsgSelectionArrayOutput)
}

// DatacenterNsgSelectionMapInput is an input type that accepts DatacenterNsgSelectionMap and DatacenterNsgSelectionMapOutput values.
// You can construct a concrete instance of `DatacenterNsgSelectionMapInput` via:
//
//	DatacenterNsgSelectionMap{ "key": DatacenterNsgSelectionArgs{...} }
type DatacenterNsgSelectionMapInput interface {
	pulumi.Input

	ToDatacenterNsgSelectionMapOutput() DatacenterNsgSelectionMapOutput
	ToDatacenterNsgSelectionMapOutputWithContext(context.Context) DatacenterNsgSelectionMapOutput
}

type DatacenterNsgSelectionMap map[string]DatacenterNsgSelectionInput

func (DatacenterNsgSelectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatacenterNsgSelection)(nil)).Elem()
}

func (i DatacenterNsgSelectionMap) ToDatacenterNsgSelectionMapOutput() DatacenterNsgSelectionMapOutput {
	return i.ToDatacenterNsgSelectionMapOutputWithContext(context.Background())
}

func (i DatacenterNsgSelectionMap) ToDatacenterNsgSelectionMapOutputWithContext(ctx context.Context) DatacenterNsgSelectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacenterNsgSelectionMapOutput)
}

type DatacenterNsgSelectionOutput struct{ *pulumi.OutputState }

func (DatacenterNsgSelectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatacenterNsgSelection)(nil)).Elem()
}

func (o DatacenterNsgSelectionOutput) ToDatacenterNsgSelectionOutput() DatacenterNsgSelectionOutput {
	return o
}

func (o DatacenterNsgSelectionOutput) ToDatacenterNsgSelectionOutputWithContext(ctx context.Context) DatacenterNsgSelectionOutput {
	return o
}

// [string] The ID of a Virtual Data Center.
func (o DatacenterNsgSelectionOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatacenterNsgSelection) pulumi.StringOutput { return v.DatacenterId }).(pulumi.StringOutput)
}

// [string] The ID of a Network Security Group.
func (o DatacenterNsgSelectionOutput) NsgId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatacenterNsgSelection) pulumi.StringOutput { return v.NsgId }).(pulumi.StringOutput)
}

type DatacenterNsgSelectionArrayOutput struct{ *pulumi.OutputState }

func (DatacenterNsgSelectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatacenterNsgSelection)(nil)).Elem()
}

func (o DatacenterNsgSelectionArrayOutput) ToDatacenterNsgSelectionArrayOutput() DatacenterNsgSelectionArrayOutput {
	return o
}

func (o DatacenterNsgSelectionArrayOutput) ToDatacenterNsgSelectionArrayOutputWithContext(ctx context.Context) DatacenterNsgSelectionArrayOutput {
	return o
}

func (o DatacenterNsgSelectionArrayOutput) Index(i pulumi.IntInput) DatacenterNsgSelectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatacenterNsgSelection {
		return vs[0].([]*DatacenterNsgSelection)[vs[1].(int)]
	}).(DatacenterNsgSelectionOutput)
}

type DatacenterNsgSelectionMapOutput struct{ *pulumi.OutputState }

func (DatacenterNsgSelectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatacenterNsgSelection)(nil)).Elem()
}

func (o DatacenterNsgSelectionMapOutput) ToDatacenterNsgSelectionMapOutput() DatacenterNsgSelectionMapOutput {
	return o
}

func (o DatacenterNsgSelectionMapOutput) ToDatacenterNsgSelectionMapOutputWithContext(ctx context.Context) DatacenterNsgSelectionMapOutput {
	return o
}

func (o DatacenterNsgSelectionMapOutput) MapIndex(k pulumi.StringInput) DatacenterNsgSelectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatacenterNsgSelection {
		return vs[0].(map[string]*DatacenterNsgSelection)[vs[1].(string)]
	}).(DatacenterNsgSelectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatacenterNsgSelectionInput)(nil)).Elem(), &DatacenterNsgSelection{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatacenterNsgSelectionArrayInput)(nil)).Elem(), DatacenterNsgSelectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatacenterNsgSelectionMapInput)(nil)).Elem(), DatacenterNsgSelectionMap{})
	pulumi.RegisterOutputType(DatacenterNsgSelectionOutput{})
	pulumi.RegisterOutputType(DatacenterNsgSelectionArrayOutput{})
	pulumi.RegisterOutputType(DatacenterNsgSelectionMapOutput{})
}
