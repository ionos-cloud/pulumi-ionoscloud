// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a **Monitoring pipeline**.
//
// > ⚠️  Only tokens are accepted for authorization in the **monitoring_pipeline** resource. Please ensure you are using tokens as other methods will not be valid.
//
// ## Usage example
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ionoscloud.NewMonitoringPipeline(ctx, "example", &ionoscloud.MonitoringPipelineArgs{
//				Location: pulumi.String("es/vit"),
//				Name:     pulumi.String("pipelineExample"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// **NOTE:** The default timeout for all operations is 60 minutes. If you want to change the default value, you can use `timeouts` attribute inside the resource:
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ionoscloud.NewMonitoringPipeline(ctx, "example", &ionoscloud.MonitoringPipelineArgs{
//				Location: pulumi.String("es/vit"),
//				Name:     pulumi.String("pipelineExample"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// In order to import a Monitoring pipeline, you can define an empty Monitoring pipeline resource in the plan:
//
// hcl
//
// resource "ionoscloud_monitoring_pipeline" "example" {
//
// }
//
// The resource can be imported using the `location` and `pipeline_id`, for example:
//
// ```sh
// $ pulumi import ionoscloud:index/monitoringPipeline:MonitoringPipeline example location:pipeline_id
// ```
type MonitoringPipeline struct {
	pulumi.CustomResourceState

	// [string] The endpoint of the Grafana instance.
	GrafanaEndpoint pulumi.StringOutput `pulumi:"grafanaEndpoint"`
	// [string] The HTTP endpoint of the monitoring instance.
	HttpEndpoint pulumi.StringOutput `pulumi:"httpEndpoint"`
	// (Sensitive)[string] The key used to connect to the monitoring pipeline.
	//
	// > **⚠ NOTE:** `IONOS_API_URL_MONITORING` can be used to set a custom API URL for the resource. `location` field needs to be empty, otherwise it will override the custom API URL.
	Key pulumi.StringOutput `pulumi:"key"`
	// [string] The location of the Monitoring pipeline. Default is `de/fra`. It can be one of `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `fr/par`. If this is not set and if no value is provided for the `IONOS_API_URL_MONITORING` env var, the default `location` will be: `de/fra`.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// [string] The name of the Monitoring pipeline.
	Name     pulumi.StringOutput                 `pulumi:"name"`
	Timeouts MonitoringPipelineTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewMonitoringPipeline registers a new resource with the given unique name, arguments, and options.
func NewMonitoringPipeline(ctx *pulumi.Context,
	name string, args *MonitoringPipelineArgs, opts ...pulumi.ResourceOption) (*MonitoringPipeline, error) {
	if args == nil {
		args = &MonitoringPipelineArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"key",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MonitoringPipeline
	err := ctx.RegisterResource("ionoscloud:index/monitoringPipeline:MonitoringPipeline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitoringPipeline gets an existing MonitoringPipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitoringPipeline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitoringPipelineState, opts ...pulumi.ResourceOption) (*MonitoringPipeline, error) {
	var resource MonitoringPipeline
	err := ctx.ReadResource("ionoscloud:index/monitoringPipeline:MonitoringPipeline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MonitoringPipeline resources.
type monitoringPipelineState struct {
	// [string] The endpoint of the Grafana instance.
	GrafanaEndpoint *string `pulumi:"grafanaEndpoint"`
	// [string] The HTTP endpoint of the monitoring instance.
	HttpEndpoint *string `pulumi:"httpEndpoint"`
	// (Sensitive)[string] The key used to connect to the monitoring pipeline.
	//
	// > **⚠ NOTE:** `IONOS_API_URL_MONITORING` can be used to set a custom API URL for the resource. `location` field needs to be empty, otherwise it will override the custom API URL.
	Key *string `pulumi:"key"`
	// [string] The location of the Monitoring pipeline. Default is `de/fra`. It can be one of `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `fr/par`. If this is not set and if no value is provided for the `IONOS_API_URL_MONITORING` env var, the default `location` will be: `de/fra`.
	Location *string `pulumi:"location"`
	// [string] The name of the Monitoring pipeline.
	Name     *string                     `pulumi:"name"`
	Timeouts *MonitoringPipelineTimeouts `pulumi:"timeouts"`
}

type MonitoringPipelineState struct {
	// [string] The endpoint of the Grafana instance.
	GrafanaEndpoint pulumi.StringPtrInput
	// [string] The HTTP endpoint of the monitoring instance.
	HttpEndpoint pulumi.StringPtrInput
	// (Sensitive)[string] The key used to connect to the monitoring pipeline.
	//
	// > **⚠ NOTE:** `IONOS_API_URL_MONITORING` can be used to set a custom API URL for the resource. `location` field needs to be empty, otherwise it will override the custom API URL.
	Key pulumi.StringPtrInput
	// [string] The location of the Monitoring pipeline. Default is `de/fra`. It can be one of `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `fr/par`. If this is not set and if no value is provided for the `IONOS_API_URL_MONITORING` env var, the default `location` will be: `de/fra`.
	Location pulumi.StringPtrInput
	// [string] The name of the Monitoring pipeline.
	Name     pulumi.StringPtrInput
	Timeouts MonitoringPipelineTimeoutsPtrInput
}

func (MonitoringPipelineState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoringPipelineState)(nil)).Elem()
}

type monitoringPipelineArgs struct {
	// [string] The location of the Monitoring pipeline. Default is `de/fra`. It can be one of `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `fr/par`. If this is not set and if no value is provided for the `IONOS_API_URL_MONITORING` env var, the default `location` will be: `de/fra`.
	Location *string `pulumi:"location"`
	// [string] The name of the Monitoring pipeline.
	Name     *string                     `pulumi:"name"`
	Timeouts *MonitoringPipelineTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a MonitoringPipeline resource.
type MonitoringPipelineArgs struct {
	// [string] The location of the Monitoring pipeline. Default is `de/fra`. It can be one of `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `fr/par`. If this is not set and if no value is provided for the `IONOS_API_URL_MONITORING` env var, the default `location` will be: `de/fra`.
	Location pulumi.StringPtrInput
	// [string] The name of the Monitoring pipeline.
	Name     pulumi.StringPtrInput
	Timeouts MonitoringPipelineTimeoutsPtrInput
}

func (MonitoringPipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoringPipelineArgs)(nil)).Elem()
}

type MonitoringPipelineInput interface {
	pulumi.Input

	ToMonitoringPipelineOutput() MonitoringPipelineOutput
	ToMonitoringPipelineOutputWithContext(ctx context.Context) MonitoringPipelineOutput
}

func (*MonitoringPipeline) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringPipeline)(nil)).Elem()
}

func (i *MonitoringPipeline) ToMonitoringPipelineOutput() MonitoringPipelineOutput {
	return i.ToMonitoringPipelineOutputWithContext(context.Background())
}

func (i *MonitoringPipeline) ToMonitoringPipelineOutputWithContext(ctx context.Context) MonitoringPipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringPipelineOutput)
}

// MonitoringPipelineArrayInput is an input type that accepts MonitoringPipelineArray and MonitoringPipelineArrayOutput values.
// You can construct a concrete instance of `MonitoringPipelineArrayInput` via:
//
//	MonitoringPipelineArray{ MonitoringPipelineArgs{...} }
type MonitoringPipelineArrayInput interface {
	pulumi.Input

	ToMonitoringPipelineArrayOutput() MonitoringPipelineArrayOutput
	ToMonitoringPipelineArrayOutputWithContext(context.Context) MonitoringPipelineArrayOutput
}

type MonitoringPipelineArray []MonitoringPipelineInput

func (MonitoringPipelineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitoringPipeline)(nil)).Elem()
}

func (i MonitoringPipelineArray) ToMonitoringPipelineArrayOutput() MonitoringPipelineArrayOutput {
	return i.ToMonitoringPipelineArrayOutputWithContext(context.Background())
}

func (i MonitoringPipelineArray) ToMonitoringPipelineArrayOutputWithContext(ctx context.Context) MonitoringPipelineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringPipelineArrayOutput)
}

// MonitoringPipelineMapInput is an input type that accepts MonitoringPipelineMap and MonitoringPipelineMapOutput values.
// You can construct a concrete instance of `MonitoringPipelineMapInput` via:
//
//	MonitoringPipelineMap{ "key": MonitoringPipelineArgs{...} }
type MonitoringPipelineMapInput interface {
	pulumi.Input

	ToMonitoringPipelineMapOutput() MonitoringPipelineMapOutput
	ToMonitoringPipelineMapOutputWithContext(context.Context) MonitoringPipelineMapOutput
}

type MonitoringPipelineMap map[string]MonitoringPipelineInput

func (MonitoringPipelineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitoringPipeline)(nil)).Elem()
}

func (i MonitoringPipelineMap) ToMonitoringPipelineMapOutput() MonitoringPipelineMapOutput {
	return i.ToMonitoringPipelineMapOutputWithContext(context.Background())
}

func (i MonitoringPipelineMap) ToMonitoringPipelineMapOutputWithContext(ctx context.Context) MonitoringPipelineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringPipelineMapOutput)
}

type MonitoringPipelineOutput struct{ *pulumi.OutputState }

func (MonitoringPipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringPipeline)(nil)).Elem()
}

func (o MonitoringPipelineOutput) ToMonitoringPipelineOutput() MonitoringPipelineOutput {
	return o
}

func (o MonitoringPipelineOutput) ToMonitoringPipelineOutputWithContext(ctx context.Context) MonitoringPipelineOutput {
	return o
}

// [string] The endpoint of the Grafana instance.
func (o MonitoringPipelineOutput) GrafanaEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringPipeline) pulumi.StringOutput { return v.GrafanaEndpoint }).(pulumi.StringOutput)
}

// [string] The HTTP endpoint of the monitoring instance.
func (o MonitoringPipelineOutput) HttpEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringPipeline) pulumi.StringOutput { return v.HttpEndpoint }).(pulumi.StringOutput)
}

// (Sensitive)[string] The key used to connect to the monitoring pipeline.
//
// > **⚠ NOTE:** `IONOS_API_URL_MONITORING` can be used to set a custom API URL for the resource. `location` field needs to be empty, otherwise it will override the custom API URL.
func (o MonitoringPipelineOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringPipeline) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// [string] The location of the Monitoring pipeline. Default is `de/fra`. It can be one of `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `fr/par`. If this is not set and if no value is provided for the `IONOS_API_URL_MONITORING` env var, the default `location` will be: `de/fra`.
func (o MonitoringPipelineOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoringPipeline) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// [string] The name of the Monitoring pipeline.
func (o MonitoringPipelineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringPipeline) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MonitoringPipelineOutput) Timeouts() MonitoringPipelineTimeoutsPtrOutput {
	return o.ApplyT(func(v *MonitoringPipeline) MonitoringPipelineTimeoutsPtrOutput { return v.Timeouts }).(MonitoringPipelineTimeoutsPtrOutput)
}

type MonitoringPipelineArrayOutput struct{ *pulumi.OutputState }

func (MonitoringPipelineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitoringPipeline)(nil)).Elem()
}

func (o MonitoringPipelineArrayOutput) ToMonitoringPipelineArrayOutput() MonitoringPipelineArrayOutput {
	return o
}

func (o MonitoringPipelineArrayOutput) ToMonitoringPipelineArrayOutputWithContext(ctx context.Context) MonitoringPipelineArrayOutput {
	return o
}

func (o MonitoringPipelineArrayOutput) Index(i pulumi.IntInput) MonitoringPipelineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MonitoringPipeline {
		return vs[0].([]*MonitoringPipeline)[vs[1].(int)]
	}).(MonitoringPipelineOutput)
}

type MonitoringPipelineMapOutput struct{ *pulumi.OutputState }

func (MonitoringPipelineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitoringPipeline)(nil)).Elem()
}

func (o MonitoringPipelineMapOutput) ToMonitoringPipelineMapOutput() MonitoringPipelineMapOutput {
	return o
}

func (o MonitoringPipelineMapOutput) ToMonitoringPipelineMapOutputWithContext(ctx context.Context) MonitoringPipelineMapOutput {
	return o
}

func (o MonitoringPipelineMapOutput) MapIndex(k pulumi.StringInput) MonitoringPipelineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MonitoringPipeline {
		return vs[0].(map[string]*MonitoringPipeline)[vs[1].(string)]
	}).(MonitoringPipelineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoringPipelineInput)(nil)).Elem(), &MonitoringPipeline{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoringPipelineArrayInput)(nil)).Elem(), MonitoringPipelineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoringPipelineMapInput)(nil)).Elem(), MonitoringPipelineMap{})
	pulumi.RegisterOutputType(MonitoringPipelineOutput{})
	pulumi.RegisterOutputType(MonitoringPipelineArrayOutput{})
	pulumi.RegisterOutputType(MonitoringPipelineMapOutput{})
}
