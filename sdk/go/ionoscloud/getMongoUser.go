// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupMongoUser(ctx *pulumi.Context, args *LookupMongoUserArgs, opts ...pulumi.InvokeOption) (*LookupMongoUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMongoUserResult
	err := ctx.Invoke("ionoscloud:index/getMongoUser:getMongoUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMongoUser.
type LookupMongoUserArgs struct {
	ClusterId string             `pulumi:"clusterId"`
	Database  *string            `pulumi:"database"`
	Id        *string            `pulumi:"id"`
	Roles     []GetMongoUserRole `pulumi:"roles"`
	Username  string             `pulumi:"username"`
}

// A collection of values returned by getMongoUser.
type LookupMongoUserResult struct {
	ClusterId string             `pulumi:"clusterId"`
	Database  string             `pulumi:"database"`
	Id        *string            `pulumi:"id"`
	Roles     []GetMongoUserRole `pulumi:"roles"`
	Username  string             `pulumi:"username"`
}

func LookupMongoUserOutput(ctx *pulumi.Context, args LookupMongoUserOutputArgs, opts ...pulumi.InvokeOption) LookupMongoUserResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupMongoUserResult, error) {
			args := v.(LookupMongoUserArgs)
			r, err := LookupMongoUser(ctx, &args, opts...)
			var s LookupMongoUserResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupMongoUserResultOutput)
}

// A collection of arguments for invoking getMongoUser.
type LookupMongoUserOutputArgs struct {
	ClusterId pulumi.StringInput         `pulumi:"clusterId"`
	Database  pulumi.StringPtrInput      `pulumi:"database"`
	Id        pulumi.StringPtrInput      `pulumi:"id"`
	Roles     GetMongoUserRoleArrayInput `pulumi:"roles"`
	Username  pulumi.StringInput         `pulumi:"username"`
}

func (LookupMongoUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMongoUserArgs)(nil)).Elem()
}

// A collection of values returned by getMongoUser.
type LookupMongoUserResultOutput struct{ *pulumi.OutputState }

func (LookupMongoUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMongoUserResult)(nil)).Elem()
}

func (o LookupMongoUserResultOutput) ToLookupMongoUserResultOutput() LookupMongoUserResultOutput {
	return o
}

func (o LookupMongoUserResultOutput) ToLookupMongoUserResultOutputWithContext(ctx context.Context) LookupMongoUserResultOutput {
	return o
}

func (o LookupMongoUserResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMongoUserResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

func (o LookupMongoUserResultOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMongoUserResult) string { return v.Database }).(pulumi.StringOutput)
}

func (o LookupMongoUserResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMongoUserResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupMongoUserResultOutput) Roles() GetMongoUserRoleArrayOutput {
	return o.ApplyT(func(v LookupMongoUserResult) []GetMongoUserRole { return v.Roles }).(GetMongoUserRoleArrayOutput)
}

func (o LookupMongoUserResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMongoUserResult) string { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMongoUserResultOutput{})
}
