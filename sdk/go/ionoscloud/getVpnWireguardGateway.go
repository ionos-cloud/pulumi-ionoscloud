// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `vpn.WireguardGateway` data source provides information about a specific IonosCloud VPN WireGuard Gateway. You can use this data source to retrieve details of a WireGuard Gateway for use in other resources and configurations.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ionoscloud.GetVpnWireguardGateway(ctx, &ionoscloud.GetVpnWireguardGatewayArgs{
//				Location: "de/fra",
//				Name:     pulumi.StringRef("example-gateway"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("vpnWireguardGatewayPublicKey", data.Vpn_wireguard_gateway.Example.Public_key)
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetVpnWireguardGateway(ctx *pulumi.Context, args *GetVpnWireguardGatewayArgs, opts ...pulumi.InvokeOption) (*GetVpnWireguardGatewayResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVpnWireguardGatewayResult
	err := ctx.Invoke("ionoscloud:index/getVpnWireguardGateway:getVpnWireguardGateway", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpnWireguardGateway.
type GetVpnWireguardGatewayArgs struct {
	// The description of the WireGuard Gateway.
	Description *string `pulumi:"description"`
	// [String] The ID of the WireGuard Gateway.
	Id *string `pulumi:"id"`
	// [String] The location of the WireGuard Gateway.
	Location string `pulumi:"location"`
	// [String] The name of the WireGuard Gateway.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getVpnWireguardGateway.
type GetVpnWireguardGatewayResult struct {
	// A list of connection configurations for the WireGuard Gateway. Each `connections` block contains:
	Connections []GetVpnWireguardGatewayConnection `pulumi:"connections"`
	// The description of the WireGuard Gateway.
	Description *string `pulumi:"description"`
	// The IP address of the WireGuard Gateway.
	GatewayIp string `pulumi:"gatewayIp"`
	Id        string `pulumi:"id"`
	// The IPv4 CIDR for the WireGuard Gateway interface.
	InterfaceIpv4Cidr string `pulumi:"interfaceIpv4Cidr"`
	// The IPv6 CIDR for the WireGuard Gateway interface.
	InterfaceIpv6Cidr string `pulumi:"interfaceIpv6Cidr"`
	ListenPort        int    `pulumi:"listenPort"`
	Location          string `pulumi:"location"`
	Name              string `pulumi:"name"`
	// The public key for the WireGuard Gateway.
	PublicKey string `pulumi:"publicKey"`
	// The current status of the WireGuard Gateway.
	Status string `pulumi:"status"`
}

func GetVpnWireguardGatewayOutput(ctx *pulumi.Context, args GetVpnWireguardGatewayOutputArgs, opts ...pulumi.InvokeOption) GetVpnWireguardGatewayResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetVpnWireguardGatewayResult, error) {
			args := v.(GetVpnWireguardGatewayArgs)
			r, err := GetVpnWireguardGateway(ctx, &args, opts...)
			var s GetVpnWireguardGatewayResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetVpnWireguardGatewayResultOutput)
}

// A collection of arguments for invoking getVpnWireguardGateway.
type GetVpnWireguardGatewayOutputArgs struct {
	// The description of the WireGuard Gateway.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// [String] The ID of the WireGuard Gateway.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// [String] The location of the WireGuard Gateway.
	Location pulumi.StringInput `pulumi:"location"`
	// [String] The name of the WireGuard Gateway.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GetVpnWireguardGatewayOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpnWireguardGatewayArgs)(nil)).Elem()
}

// A collection of values returned by getVpnWireguardGateway.
type GetVpnWireguardGatewayResultOutput struct{ *pulumi.OutputState }

func (GetVpnWireguardGatewayResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpnWireguardGatewayResult)(nil)).Elem()
}

func (o GetVpnWireguardGatewayResultOutput) ToGetVpnWireguardGatewayResultOutput() GetVpnWireguardGatewayResultOutput {
	return o
}

func (o GetVpnWireguardGatewayResultOutput) ToGetVpnWireguardGatewayResultOutputWithContext(ctx context.Context) GetVpnWireguardGatewayResultOutput {
	return o
}

// A list of connection configurations for the WireGuard Gateway. Each `connections` block contains:
func (o GetVpnWireguardGatewayResultOutput) Connections() GetVpnWireguardGatewayConnectionArrayOutput {
	return o.ApplyT(func(v GetVpnWireguardGatewayResult) []GetVpnWireguardGatewayConnection { return v.Connections }).(GetVpnWireguardGatewayConnectionArrayOutput)
}

// The description of the WireGuard Gateway.
func (o GetVpnWireguardGatewayResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVpnWireguardGatewayResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The IP address of the WireGuard Gateway.
func (o GetVpnWireguardGatewayResultOutput) GatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpnWireguardGatewayResult) string { return v.GatewayIp }).(pulumi.StringOutput)
}

func (o GetVpnWireguardGatewayResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpnWireguardGatewayResult) string { return v.Id }).(pulumi.StringOutput)
}

// The IPv4 CIDR for the WireGuard Gateway interface.
func (o GetVpnWireguardGatewayResultOutput) InterfaceIpv4Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpnWireguardGatewayResult) string { return v.InterfaceIpv4Cidr }).(pulumi.StringOutput)
}

// The IPv6 CIDR for the WireGuard Gateway interface.
func (o GetVpnWireguardGatewayResultOutput) InterfaceIpv6Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpnWireguardGatewayResult) string { return v.InterfaceIpv6Cidr }).(pulumi.StringOutput)
}

func (o GetVpnWireguardGatewayResultOutput) ListenPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetVpnWireguardGatewayResult) int { return v.ListenPort }).(pulumi.IntOutput)
}

func (o GetVpnWireguardGatewayResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpnWireguardGatewayResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o GetVpnWireguardGatewayResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpnWireguardGatewayResult) string { return v.Name }).(pulumi.StringOutput)
}

// The public key for the WireGuard Gateway.
func (o GetVpnWireguardGatewayResultOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpnWireguardGatewayResult) string { return v.PublicKey }).(pulumi.StringOutput)
}

// The current status of the WireGuard Gateway.
func (o GetVpnWireguardGatewayResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpnWireguardGatewayResult) string { return v.Status }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVpnWireguardGatewayResultOutput{})
}
