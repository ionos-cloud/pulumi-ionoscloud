// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a **DNS Record**.
//
// > ⚠️  Only tokens are accepted for authorization in the **ionoscloud_dns_record** resource. Please ensure you are using tokens as other methods will not be valid.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := ionoscloud.NewDnsZone(ctx, "example", &ionoscloud.DnsZoneArgs{
//				Description: pulumi.String("description"),
//				Enabled:     pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ionoscloud.NewDnsRecord(ctx, "recordexample", &ionoscloud.DnsRecordArgs{
//				ZoneId:   example.ID(),
//				Type:     pulumi.String("CNAME"),
//				Content:  pulumi.String("1.2.3.4"),
//				Ttl:      pulumi.Int(2000),
//				Priority: pulumi.Int(1024),
//				Enabled:  pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// In order to import a DNS Record, you can define an empty DNS Record resource in the plan:
//
// hcl
//
// resource "ionoscloud_dns_record" "example" {
//
// }
//
// The resource can be imported using the `zone_id` and the `record_id`, for example:
//
// ```sh
// $ pulumi import ionoscloud:index/dnsRecord:DnsRecord example {zone_id}/{record_id}
// ```
type DnsRecord struct {
	pulumi.CustomResourceState

	// [string] The content of the DNS Record.
	Content pulumi.StringOutput `pulumi:"content"`
	// [bool] Indicates if the DNS Record is active or not. Default is `true`.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Fully qualified domain name
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`
	// [string] The name of the DNS Record.
	Name pulumi.StringOutput `pulumi:"name"`
	// [int] The priority for the DNS Record.
	Priority pulumi.IntPtrOutput `pulumi:"priority"`
	// [int] Time to live for the DNS Record. Default is `3600`.
	Ttl pulumi.IntOutput `pulumi:"ttl"`
	// [string] The type of the DNS Record, can have one of these values: `A, AAAA, CNAME, ALIAS, MX, NS, SRV, TXT, CAA, SSHFP, TLSA, SMIMEA, DS, HTTPS, SVCB, OPENPGPKEY, CERT, URI, RP, LOC`. More details about types can be found [here](https://docs.ionos.com/dns-as-a-service/readme/api-how-tos/create-a-new-dns-record#create-records-of-other-types).
	Type pulumi.StringOutput `pulumi:"type"`
	// [string] The DNS Zone ID in which the DNS Record will be created.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewDnsRecord registers a new resource with the given unique name, arguments, and options.
func NewDnsRecord(ctx *pulumi.Context,
	name string, args *DnsRecordArgs, opts ...pulumi.ResourceOption) (*DnsRecord, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DnsRecord
	err := ctx.RegisterResource("ionoscloud:index/dnsRecord:DnsRecord", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsRecord gets an existing DnsRecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsRecordState, opts ...pulumi.ResourceOption) (*DnsRecord, error) {
	var resource DnsRecord
	err := ctx.ReadResource("ionoscloud:index/dnsRecord:DnsRecord", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsRecord resources.
type dnsRecordState struct {
	// [string] The content of the DNS Record.
	Content *string `pulumi:"content"`
	// [bool] Indicates if the DNS Record is active or not. Default is `true`.
	Enabled *bool `pulumi:"enabled"`
	// Fully qualified domain name
	Fqdn *string `pulumi:"fqdn"`
	// [string] The name of the DNS Record.
	Name *string `pulumi:"name"`
	// [int] The priority for the DNS Record.
	Priority *int `pulumi:"priority"`
	// [int] Time to live for the DNS Record. Default is `3600`.
	Ttl *int `pulumi:"ttl"`
	// [string] The type of the DNS Record, can have one of these values: `A, AAAA, CNAME, ALIAS, MX, NS, SRV, TXT, CAA, SSHFP, TLSA, SMIMEA, DS, HTTPS, SVCB, OPENPGPKEY, CERT, URI, RP, LOC`. More details about types can be found [here](https://docs.ionos.com/dns-as-a-service/readme/api-how-tos/create-a-new-dns-record#create-records-of-other-types).
	Type *string `pulumi:"type"`
	// [string] The DNS Zone ID in which the DNS Record will be created.
	ZoneId *string `pulumi:"zoneId"`
}

type DnsRecordState struct {
	// [string] The content of the DNS Record.
	Content pulumi.StringPtrInput
	// [bool] Indicates if the DNS Record is active or not. Default is `true`.
	Enabled pulumi.BoolPtrInput
	// Fully qualified domain name
	Fqdn pulumi.StringPtrInput
	// [string] The name of the DNS Record.
	Name pulumi.StringPtrInput
	// [int] The priority for the DNS Record.
	Priority pulumi.IntPtrInput
	// [int] Time to live for the DNS Record. Default is `3600`.
	Ttl pulumi.IntPtrInput
	// [string] The type of the DNS Record, can have one of these values: `A, AAAA, CNAME, ALIAS, MX, NS, SRV, TXT, CAA, SSHFP, TLSA, SMIMEA, DS, HTTPS, SVCB, OPENPGPKEY, CERT, URI, RP, LOC`. More details about types can be found [here](https://docs.ionos.com/dns-as-a-service/readme/api-how-tos/create-a-new-dns-record#create-records-of-other-types).
	Type pulumi.StringPtrInput
	// [string] The DNS Zone ID in which the DNS Record will be created.
	ZoneId pulumi.StringPtrInput
}

func (DnsRecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsRecordState)(nil)).Elem()
}

type dnsRecordArgs struct {
	// [string] The content of the DNS Record.
	Content string `pulumi:"content"`
	// [bool] Indicates if the DNS Record is active or not. Default is `true`.
	Enabled *bool `pulumi:"enabled"`
	// [string] The name of the DNS Record.
	Name *string `pulumi:"name"`
	// [int] The priority for the DNS Record.
	Priority *int `pulumi:"priority"`
	// [int] Time to live for the DNS Record. Default is `3600`.
	Ttl *int `pulumi:"ttl"`
	// [string] The type of the DNS Record, can have one of these values: `A, AAAA, CNAME, ALIAS, MX, NS, SRV, TXT, CAA, SSHFP, TLSA, SMIMEA, DS, HTTPS, SVCB, OPENPGPKEY, CERT, URI, RP, LOC`. More details about types can be found [here](https://docs.ionos.com/dns-as-a-service/readme/api-how-tos/create-a-new-dns-record#create-records-of-other-types).
	Type string `pulumi:"type"`
	// [string] The DNS Zone ID in which the DNS Record will be created.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a DnsRecord resource.
type DnsRecordArgs struct {
	// [string] The content of the DNS Record.
	Content pulumi.StringInput
	// [bool] Indicates if the DNS Record is active or not. Default is `true`.
	Enabled pulumi.BoolPtrInput
	// [string] The name of the DNS Record.
	Name pulumi.StringPtrInput
	// [int] The priority for the DNS Record.
	Priority pulumi.IntPtrInput
	// [int] Time to live for the DNS Record. Default is `3600`.
	Ttl pulumi.IntPtrInput
	// [string] The type of the DNS Record, can have one of these values: `A, AAAA, CNAME, ALIAS, MX, NS, SRV, TXT, CAA, SSHFP, TLSA, SMIMEA, DS, HTTPS, SVCB, OPENPGPKEY, CERT, URI, RP, LOC`. More details about types can be found [here](https://docs.ionos.com/dns-as-a-service/readme/api-how-tos/create-a-new-dns-record#create-records-of-other-types).
	Type pulumi.StringInput
	// [string] The DNS Zone ID in which the DNS Record will be created.
	ZoneId pulumi.StringInput
}

func (DnsRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsRecordArgs)(nil)).Elem()
}

type DnsRecordInput interface {
	pulumi.Input

	ToDnsRecordOutput() DnsRecordOutput
	ToDnsRecordOutputWithContext(ctx context.Context) DnsRecordOutput
}

func (*DnsRecord) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsRecord)(nil)).Elem()
}

func (i *DnsRecord) ToDnsRecordOutput() DnsRecordOutput {
	return i.ToDnsRecordOutputWithContext(context.Background())
}

func (i *DnsRecord) ToDnsRecordOutputWithContext(ctx context.Context) DnsRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsRecordOutput)
}

// DnsRecordArrayInput is an input type that accepts DnsRecordArray and DnsRecordArrayOutput values.
// You can construct a concrete instance of `DnsRecordArrayInput` via:
//
//	DnsRecordArray{ DnsRecordArgs{...} }
type DnsRecordArrayInput interface {
	pulumi.Input

	ToDnsRecordArrayOutput() DnsRecordArrayOutput
	ToDnsRecordArrayOutputWithContext(context.Context) DnsRecordArrayOutput
}

type DnsRecordArray []DnsRecordInput

func (DnsRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsRecord)(nil)).Elem()
}

func (i DnsRecordArray) ToDnsRecordArrayOutput() DnsRecordArrayOutput {
	return i.ToDnsRecordArrayOutputWithContext(context.Background())
}

func (i DnsRecordArray) ToDnsRecordArrayOutputWithContext(ctx context.Context) DnsRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsRecordArrayOutput)
}

// DnsRecordMapInput is an input type that accepts DnsRecordMap and DnsRecordMapOutput values.
// You can construct a concrete instance of `DnsRecordMapInput` via:
//
//	DnsRecordMap{ "key": DnsRecordArgs{...} }
type DnsRecordMapInput interface {
	pulumi.Input

	ToDnsRecordMapOutput() DnsRecordMapOutput
	ToDnsRecordMapOutputWithContext(context.Context) DnsRecordMapOutput
}

type DnsRecordMap map[string]DnsRecordInput

func (DnsRecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsRecord)(nil)).Elem()
}

func (i DnsRecordMap) ToDnsRecordMapOutput() DnsRecordMapOutput {
	return i.ToDnsRecordMapOutputWithContext(context.Background())
}

func (i DnsRecordMap) ToDnsRecordMapOutputWithContext(ctx context.Context) DnsRecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsRecordMapOutput)
}

type DnsRecordOutput struct{ *pulumi.OutputState }

func (DnsRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsRecord)(nil)).Elem()
}

func (o DnsRecordOutput) ToDnsRecordOutput() DnsRecordOutput {
	return o
}

func (o DnsRecordOutput) ToDnsRecordOutputWithContext(ctx context.Context) DnsRecordOutput {
	return o
}

// [string] The content of the DNS Record.
func (o DnsRecordOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// [bool] Indicates if the DNS Record is active or not. Default is `true`.
func (o DnsRecordOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Fully qualified domain name
func (o DnsRecordOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.StringOutput { return v.Fqdn }).(pulumi.StringOutput)
}

// [string] The name of the DNS Record.
func (o DnsRecordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// [int] The priority for the DNS Record.
func (o DnsRecordOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.IntPtrOutput { return v.Priority }).(pulumi.IntPtrOutput)
}

// [int] Time to live for the DNS Record. Default is `3600`.
func (o DnsRecordOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.IntOutput { return v.Ttl }).(pulumi.IntOutput)
}

// [string] The type of the DNS Record, can have one of these values: `A, AAAA, CNAME, ALIAS, MX, NS, SRV, TXT, CAA, SSHFP, TLSA, SMIMEA, DS, HTTPS, SVCB, OPENPGPKEY, CERT, URI, RP, LOC`. More details about types can be found [here](https://docs.ionos.com/dns-as-a-service/readme/api-how-tos/create-a-new-dns-record#create-records-of-other-types).
func (o DnsRecordOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// [string] The DNS Zone ID in which the DNS Record will be created.
func (o DnsRecordOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type DnsRecordArrayOutput struct{ *pulumi.OutputState }

func (DnsRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsRecord)(nil)).Elem()
}

func (o DnsRecordArrayOutput) ToDnsRecordArrayOutput() DnsRecordArrayOutput {
	return o
}

func (o DnsRecordArrayOutput) ToDnsRecordArrayOutputWithContext(ctx context.Context) DnsRecordArrayOutput {
	return o
}

func (o DnsRecordArrayOutput) Index(i pulumi.IntInput) DnsRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DnsRecord {
		return vs[0].([]*DnsRecord)[vs[1].(int)]
	}).(DnsRecordOutput)
}

type DnsRecordMapOutput struct{ *pulumi.OutputState }

func (DnsRecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsRecord)(nil)).Elem()
}

func (o DnsRecordMapOutput) ToDnsRecordMapOutput() DnsRecordMapOutput {
	return o
}

func (o DnsRecordMapOutput) ToDnsRecordMapOutputWithContext(ctx context.Context) DnsRecordMapOutput {
	return o
}

func (o DnsRecordMapOutput) MapIndex(k pulumi.StringInput) DnsRecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DnsRecord {
		return vs[0].(map[string]*DnsRecord)[vs[1].(string)]
	}).(DnsRecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsRecordInput)(nil)).Elem(), &DnsRecord{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsRecordArrayInput)(nil)).Elem(), DnsRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsRecordMapInput)(nil)).Elem(), DnsRecordMap{})
	pulumi.RegisterOutputType(DnsRecordOutput{})
	pulumi.RegisterOutputType(DnsRecordArrayOutput{})
	pulumi.RegisterOutputType(DnsRecordMapOutput{})
}
