// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package objectstorage

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages **IONOS Object Storage Buckets** on IonosCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/objectstorage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := objectstorage.NewBucket(ctx, "example", &objectstorage.BucketArgs{
//				Name:              pulumi.String("example"),
//				Region:            pulumi.String("eu-central-3"),
//				ObjectLockEnabled: pulumi.Bool(true),
//				ForceDestroy:      pulumi.Bool(true),
//				Tags: pulumi.StringMap{
//					"key1": pulumi.String("value1"),
//					"key2": pulumi.String("value2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Resource Bucket can be imported using the `bucket name`
//
// ```sh
// $ pulumi import ionoscloud:objectstorage/bucket:Bucket example example
// ```
type Bucket struct {
	pulumi.CustomResourceState

	// Whether all objects should be deleted from the bucket so that the bucket can be destroyed
	ForceDestroy pulumi.BoolOutput `pulumi:"forceDestroy"`
	// [string] The bucket name. [ 3 .. 63 ] characters
	Name pulumi.StringOutput `pulumi:"name"`
	// [bool] The object lock configuration status of the bucket. Must be `true` or `false`.
	ObjectLockEnabled pulumi.BoolOutput `pulumi:"objectLockEnabled"`
	// [string] Specifies the Region where the bucket will be created. Please refer to the list of available regions
	Region pulumi.StringOutput `pulumi:"region"`
	// A mapping of tags to assign to the bucket.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Timeouts for this resource.
	Timeouts BucketTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewBucket registers a new resource with the given unique name, arguments, and options.
func NewBucket(ctx *pulumi.Context,
	name string, args *BucketArgs, opts ...pulumi.ResourceOption) (*Bucket, error) {
	if args == nil {
		args = &BucketArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Bucket
	err := ctx.RegisterResource("ionoscloud:objectstorage/bucket:Bucket", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucket gets an existing Bucket resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucket(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketState, opts ...pulumi.ResourceOption) (*Bucket, error) {
	var resource Bucket
	err := ctx.ReadResource("ionoscloud:objectstorage/bucket:Bucket", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Bucket resources.
type bucketState struct {
	// Whether all objects should be deleted from the bucket so that the bucket can be destroyed
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// [string] The bucket name. [ 3 .. 63 ] characters
	Name *string `pulumi:"name"`
	// [bool] The object lock configuration status of the bucket. Must be `true` or `false`.
	ObjectLockEnabled *bool `pulumi:"objectLockEnabled"`
	// [string] Specifies the Region where the bucket will be created. Please refer to the list of available regions
	Region *string `pulumi:"region"`
	// A mapping of tags to assign to the bucket.
	Tags map[string]string `pulumi:"tags"`
	// Timeouts for this resource.
	Timeouts *BucketTimeouts `pulumi:"timeouts"`
}

type BucketState struct {
	// Whether all objects should be deleted from the bucket so that the bucket can be destroyed
	ForceDestroy pulumi.BoolPtrInput
	// [string] The bucket name. [ 3 .. 63 ] characters
	Name pulumi.StringPtrInput
	// [bool] The object lock configuration status of the bucket. Must be `true` or `false`.
	ObjectLockEnabled pulumi.BoolPtrInput
	// [string] Specifies the Region where the bucket will be created. Please refer to the list of available regions
	Region pulumi.StringPtrInput
	// A mapping of tags to assign to the bucket.
	Tags pulumi.StringMapInput
	// Timeouts for this resource.
	Timeouts BucketTimeoutsPtrInput
}

func (BucketState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketState)(nil)).Elem()
}

type bucketArgs struct {
	// Whether all objects should be deleted from the bucket so that the bucket can be destroyed
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// [string] The bucket name. [ 3 .. 63 ] characters
	Name *string `pulumi:"name"`
	// [bool] The object lock configuration status of the bucket. Must be `true` or `false`.
	ObjectLockEnabled *bool `pulumi:"objectLockEnabled"`
	// [string] Specifies the Region where the bucket will be created. Please refer to the list of available regions
	Region *string `pulumi:"region"`
	// A mapping of tags to assign to the bucket.
	Tags map[string]string `pulumi:"tags"`
	// Timeouts for this resource.
	Timeouts *BucketTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a Bucket resource.
type BucketArgs struct {
	// Whether all objects should be deleted from the bucket so that the bucket can be destroyed
	ForceDestroy pulumi.BoolPtrInput
	// [string] The bucket name. [ 3 .. 63 ] characters
	Name pulumi.StringPtrInput
	// [bool] The object lock configuration status of the bucket. Must be `true` or `false`.
	ObjectLockEnabled pulumi.BoolPtrInput
	// [string] Specifies the Region where the bucket will be created. Please refer to the list of available regions
	Region pulumi.StringPtrInput
	// A mapping of tags to assign to the bucket.
	Tags pulumi.StringMapInput
	// Timeouts for this resource.
	Timeouts BucketTimeoutsPtrInput
}

func (BucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketArgs)(nil)).Elem()
}

type BucketInput interface {
	pulumi.Input

	ToBucketOutput() BucketOutput
	ToBucketOutputWithContext(ctx context.Context) BucketOutput
}

func (*Bucket) ElementType() reflect.Type {
	return reflect.TypeOf((**Bucket)(nil)).Elem()
}

func (i *Bucket) ToBucketOutput() BucketOutput {
	return i.ToBucketOutputWithContext(context.Background())
}

func (i *Bucket) ToBucketOutputWithContext(ctx context.Context) BucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketOutput)
}

// BucketArrayInput is an input type that accepts BucketArray and BucketArrayOutput values.
// You can construct a concrete instance of `BucketArrayInput` via:
//
//	BucketArray{ BucketArgs{...} }
type BucketArrayInput interface {
	pulumi.Input

	ToBucketArrayOutput() BucketArrayOutput
	ToBucketArrayOutputWithContext(context.Context) BucketArrayOutput
}

type BucketArray []BucketInput

func (BucketArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Bucket)(nil)).Elem()
}

func (i BucketArray) ToBucketArrayOutput() BucketArrayOutput {
	return i.ToBucketArrayOutputWithContext(context.Background())
}

func (i BucketArray) ToBucketArrayOutputWithContext(ctx context.Context) BucketArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketArrayOutput)
}

// BucketMapInput is an input type that accepts BucketMap and BucketMapOutput values.
// You can construct a concrete instance of `BucketMapInput` via:
//
//	BucketMap{ "key": BucketArgs{...} }
type BucketMapInput interface {
	pulumi.Input

	ToBucketMapOutput() BucketMapOutput
	ToBucketMapOutputWithContext(context.Context) BucketMapOutput
}

type BucketMap map[string]BucketInput

func (BucketMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Bucket)(nil)).Elem()
}

func (i BucketMap) ToBucketMapOutput() BucketMapOutput {
	return i.ToBucketMapOutputWithContext(context.Background())
}

func (i BucketMap) ToBucketMapOutputWithContext(ctx context.Context) BucketMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketMapOutput)
}

type BucketOutput struct{ *pulumi.OutputState }

func (BucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Bucket)(nil)).Elem()
}

func (o BucketOutput) ToBucketOutput() BucketOutput {
	return o
}

func (o BucketOutput) ToBucketOutputWithContext(ctx context.Context) BucketOutput {
	return o
}

// Whether all objects should be deleted from the bucket so that the bucket can be destroyed
func (o BucketOutput) ForceDestroy() pulumi.BoolOutput {
	return o.ApplyT(func(v *Bucket) pulumi.BoolOutput { return v.ForceDestroy }).(pulumi.BoolOutput)
}

// [string] The bucket name. [ 3 .. 63 ] characters
func (o BucketOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// [bool] The object lock configuration status of the bucket. Must be `true` or `false`.
func (o BucketOutput) ObjectLockEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Bucket) pulumi.BoolOutput { return v.ObjectLockEnabled }).(pulumi.BoolOutput)
}

// [string] Specifies the Region where the bucket will be created. Please refer to the list of available regions
func (o BucketOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the bucket.
func (o BucketOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Timeouts for this resource.
func (o BucketOutput) Timeouts() BucketTimeoutsPtrOutput {
	return o.ApplyT(func(v *Bucket) BucketTimeoutsPtrOutput { return v.Timeouts }).(BucketTimeoutsPtrOutput)
}

type BucketArrayOutput struct{ *pulumi.OutputState }

func (BucketArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Bucket)(nil)).Elem()
}

func (o BucketArrayOutput) ToBucketArrayOutput() BucketArrayOutput {
	return o
}

func (o BucketArrayOutput) ToBucketArrayOutputWithContext(ctx context.Context) BucketArrayOutput {
	return o
}

func (o BucketArrayOutput) Index(i pulumi.IntInput) BucketOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Bucket {
		return vs[0].([]*Bucket)[vs[1].(int)]
	}).(BucketOutput)
}

type BucketMapOutput struct{ *pulumi.OutputState }

func (BucketMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Bucket)(nil)).Elem()
}

func (o BucketMapOutput) ToBucketMapOutput() BucketMapOutput {
	return o
}

func (o BucketMapOutput) ToBucketMapOutputWithContext(ctx context.Context) BucketMapOutput {
	return o
}

func (o BucketMapOutput) MapIndex(k pulumi.StringInput) BucketOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Bucket {
		return vs[0].(map[string]*Bucket)[vs[1].(string)]
	}).(BucketOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketInput)(nil)).Elem(), &Bucket{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketArrayInput)(nil)).Elem(), BucketArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketMapInput)(nil)).Elem(), BucketMap{})
	pulumi.RegisterOutputType(BucketOutput{})
	pulumi.RegisterOutputType(BucketArrayOutput{})
	pulumi.RegisterOutputType(BucketMapOutput{})
}
