// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package objectstorage

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages Object Lock Configuration for Buckets on IonosCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/objectstorage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := objectstorage.NewBucket(ctx, "example", nil)
//			if err != nil {
//				return err
//			}
//			_, err = objectstorage.NewCorsConfiguration(ctx, "test", &objectstorage.CorsConfigurationArgs{
//				Bucket: example.Name,
//				CorsRules: objectstorage.CorsConfigurationCorsRuleArray{
//					&objectstorage.CorsConfigurationCorsRuleArgs{
//						AllowedHeaders: pulumi.StringArray{
//							pulumi.String("*"),
//						},
//						AllowedMethods: pulumi.StringArray{
//							pulumi.String("PUT"),
//							pulumi.String("POST"),
//						},
//						AllowedOrigins: pulumi.StringArray{
//							pulumi.String("https://s3-website-test.hashicorp.com"),
//						},
//						ExposeHeaders: pulumi.StringArray{
//							pulumi.String("ETag"),
//						},
//						MaxAgeSeconds: pulumi.Int(3000),
//						Id:            pulumi.Int(1234),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// IONOS Object Storage Bucket cors configuration can be imported using the `bucket` name.
//
// ```sh
// $ pulumi import ionoscloud:objectstorage/corsConfiguration:CorsConfiguration example example
// ```
type CorsConfiguration struct {
	pulumi.CustomResourceState

	// [string] The name of the bucket where the object will be stored.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// [block] A block of corsRule as defined below.
	CorsRules CorsConfigurationCorsRuleArrayOutput `pulumi:"corsRules"`
}

// NewCorsConfiguration registers a new resource with the given unique name, arguments, and options.
func NewCorsConfiguration(ctx *pulumi.Context,
	name string, args *CorsConfigurationArgs, opts ...pulumi.ResourceOption) (*CorsConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CorsConfiguration
	err := ctx.RegisterResource("ionoscloud:objectstorage/corsConfiguration:CorsConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCorsConfiguration gets an existing CorsConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCorsConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CorsConfigurationState, opts ...pulumi.ResourceOption) (*CorsConfiguration, error) {
	var resource CorsConfiguration
	err := ctx.ReadResource("ionoscloud:objectstorage/corsConfiguration:CorsConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CorsConfiguration resources.
type corsConfigurationState struct {
	// [string] The name of the bucket where the object will be stored.
	Bucket *string `pulumi:"bucket"`
	// [block] A block of corsRule as defined below.
	CorsRules []CorsConfigurationCorsRule `pulumi:"corsRules"`
}

type CorsConfigurationState struct {
	// [string] The name of the bucket where the object will be stored.
	Bucket pulumi.StringPtrInput
	// [block] A block of corsRule as defined below.
	CorsRules CorsConfigurationCorsRuleArrayInput
}

func (CorsConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*corsConfigurationState)(nil)).Elem()
}

type corsConfigurationArgs struct {
	// [string] The name of the bucket where the object will be stored.
	Bucket string `pulumi:"bucket"`
	// [block] A block of corsRule as defined below.
	CorsRules []CorsConfigurationCorsRule `pulumi:"corsRules"`
}

// The set of arguments for constructing a CorsConfiguration resource.
type CorsConfigurationArgs struct {
	// [string] The name of the bucket where the object will be stored.
	Bucket pulumi.StringInput
	// [block] A block of corsRule as defined below.
	CorsRules CorsConfigurationCorsRuleArrayInput
}

func (CorsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*corsConfigurationArgs)(nil)).Elem()
}

type CorsConfigurationInput interface {
	pulumi.Input

	ToCorsConfigurationOutput() CorsConfigurationOutput
	ToCorsConfigurationOutputWithContext(ctx context.Context) CorsConfigurationOutput
}

func (*CorsConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**CorsConfiguration)(nil)).Elem()
}

func (i *CorsConfiguration) ToCorsConfigurationOutput() CorsConfigurationOutput {
	return i.ToCorsConfigurationOutputWithContext(context.Background())
}

func (i *CorsConfiguration) ToCorsConfigurationOutputWithContext(ctx context.Context) CorsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorsConfigurationOutput)
}

// CorsConfigurationArrayInput is an input type that accepts CorsConfigurationArray and CorsConfigurationArrayOutput values.
// You can construct a concrete instance of `CorsConfigurationArrayInput` via:
//
//	CorsConfigurationArray{ CorsConfigurationArgs{...} }
type CorsConfigurationArrayInput interface {
	pulumi.Input

	ToCorsConfigurationArrayOutput() CorsConfigurationArrayOutput
	ToCorsConfigurationArrayOutputWithContext(context.Context) CorsConfigurationArrayOutput
}

type CorsConfigurationArray []CorsConfigurationInput

func (CorsConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CorsConfiguration)(nil)).Elem()
}

func (i CorsConfigurationArray) ToCorsConfigurationArrayOutput() CorsConfigurationArrayOutput {
	return i.ToCorsConfigurationArrayOutputWithContext(context.Background())
}

func (i CorsConfigurationArray) ToCorsConfigurationArrayOutputWithContext(ctx context.Context) CorsConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorsConfigurationArrayOutput)
}

// CorsConfigurationMapInput is an input type that accepts CorsConfigurationMap and CorsConfigurationMapOutput values.
// You can construct a concrete instance of `CorsConfigurationMapInput` via:
//
//	CorsConfigurationMap{ "key": CorsConfigurationArgs{...} }
type CorsConfigurationMapInput interface {
	pulumi.Input

	ToCorsConfigurationMapOutput() CorsConfigurationMapOutput
	ToCorsConfigurationMapOutputWithContext(context.Context) CorsConfigurationMapOutput
}

type CorsConfigurationMap map[string]CorsConfigurationInput

func (CorsConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CorsConfiguration)(nil)).Elem()
}

func (i CorsConfigurationMap) ToCorsConfigurationMapOutput() CorsConfigurationMapOutput {
	return i.ToCorsConfigurationMapOutputWithContext(context.Background())
}

func (i CorsConfigurationMap) ToCorsConfigurationMapOutputWithContext(ctx context.Context) CorsConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorsConfigurationMapOutput)
}

type CorsConfigurationOutput struct{ *pulumi.OutputState }

func (CorsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CorsConfiguration)(nil)).Elem()
}

func (o CorsConfigurationOutput) ToCorsConfigurationOutput() CorsConfigurationOutput {
	return o
}

func (o CorsConfigurationOutput) ToCorsConfigurationOutputWithContext(ctx context.Context) CorsConfigurationOutput {
	return o
}

// [string] The name of the bucket where the object will be stored.
func (o CorsConfigurationOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *CorsConfiguration) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// [block] A block of corsRule as defined below.
func (o CorsConfigurationOutput) CorsRules() CorsConfigurationCorsRuleArrayOutput {
	return o.ApplyT(func(v *CorsConfiguration) CorsConfigurationCorsRuleArrayOutput { return v.CorsRules }).(CorsConfigurationCorsRuleArrayOutput)
}

type CorsConfigurationArrayOutput struct{ *pulumi.OutputState }

func (CorsConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CorsConfiguration)(nil)).Elem()
}

func (o CorsConfigurationArrayOutput) ToCorsConfigurationArrayOutput() CorsConfigurationArrayOutput {
	return o
}

func (o CorsConfigurationArrayOutput) ToCorsConfigurationArrayOutputWithContext(ctx context.Context) CorsConfigurationArrayOutput {
	return o
}

func (o CorsConfigurationArrayOutput) Index(i pulumi.IntInput) CorsConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CorsConfiguration {
		return vs[0].([]*CorsConfiguration)[vs[1].(int)]
	}).(CorsConfigurationOutput)
}

type CorsConfigurationMapOutput struct{ *pulumi.OutputState }

func (CorsConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CorsConfiguration)(nil)).Elem()
}

func (o CorsConfigurationMapOutput) ToCorsConfigurationMapOutput() CorsConfigurationMapOutput {
	return o
}

func (o CorsConfigurationMapOutput) ToCorsConfigurationMapOutputWithContext(ctx context.Context) CorsConfigurationMapOutput {
	return o
}

func (o CorsConfigurationMapOutput) MapIndex(k pulumi.StringInput) CorsConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CorsConfiguration {
		return vs[0].(map[string]*CorsConfiguration)[vs[1].(string)]
	}).(CorsConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CorsConfigurationInput)(nil)).Elem(), &CorsConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*CorsConfigurationArrayInput)(nil)).Elem(), CorsConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CorsConfigurationMapInput)(nil)).Elem(), CorsConfigurationMap{})
	pulumi.RegisterOutputType(CorsConfigurationOutput{})
	pulumi.RegisterOutputType(CorsConfigurationArrayOutput{})
	pulumi.RegisterOutputType(CorsConfigurationMapOutput{})
}
