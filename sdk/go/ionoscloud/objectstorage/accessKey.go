// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package objectstorage

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an **Object Storage Accesskey** on IonosCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/objectstorage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := objectstorage.NewAccessKey(ctx, "example", &objectstorage.AccessKeyArgs{
//				Description: pulumi.String("my description"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// An object storage accesskey resource can be imported using its `resource id`, e.g.
//
// ```sh
// $ pulumi import ionoscloud:objectstorage/accessKey:AccessKey demo objectStorageAccesskeyid
// ```
//
// This can be helpful when you want to import Object Storage Accesskeys which you have already created manually or using other means, outside of terraform.
type AccessKey struct {
	pulumi.CustomResourceState

	// Access key metadata is a string of 92 characters.
	Accesskey pulumi.StringOutput `pulumi:"accesskey"`
	// The canonical user ID which is valid for user-owned buckets.
	CanonicalUserId pulumi.StringOutput `pulumi:"canonicalUserId"`
	// The contract user ID which is valid for contract-owned buckets
	ContractUserId pulumi.StringOutput `pulumi:"contractUserId"`
	// [string] Description of the Access key.
	Description pulumi.StringOutput `pulumi:"description"`
	// The secret key of the Access key.
	Secretkey pulumi.StringOutput `pulumi:"secretkey"`
	// Timeouts for this resource.
	Timeouts AccessKeyTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewAccessKey registers a new resource with the given unique name, arguments, and options.
func NewAccessKey(ctx *pulumi.Context,
	name string, args *AccessKeyArgs, opts ...pulumi.ResourceOption) (*AccessKey, error) {
	if args == nil {
		args = &AccessKeyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccessKey
	err := ctx.RegisterResource("ionoscloud:objectstorage/accessKey:AccessKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessKey gets an existing AccessKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessKeyState, opts ...pulumi.ResourceOption) (*AccessKey, error) {
	var resource AccessKey
	err := ctx.ReadResource("ionoscloud:objectstorage/accessKey:AccessKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessKey resources.
type accessKeyState struct {
	// Access key metadata is a string of 92 characters.
	Accesskey *string `pulumi:"accesskey"`
	// The canonical user ID which is valid for user-owned buckets.
	CanonicalUserId *string `pulumi:"canonicalUserId"`
	// The contract user ID which is valid for contract-owned buckets
	ContractUserId *string `pulumi:"contractUserId"`
	// [string] Description of the Access key.
	Description *string `pulumi:"description"`
	// The secret key of the Access key.
	Secretkey *string `pulumi:"secretkey"`
	// Timeouts for this resource.
	Timeouts *AccessKeyTimeouts `pulumi:"timeouts"`
}

type AccessKeyState struct {
	// Access key metadata is a string of 92 characters.
	Accesskey pulumi.StringPtrInput
	// The canonical user ID which is valid for user-owned buckets.
	CanonicalUserId pulumi.StringPtrInput
	// The contract user ID which is valid for contract-owned buckets
	ContractUserId pulumi.StringPtrInput
	// [string] Description of the Access key.
	Description pulumi.StringPtrInput
	// The secret key of the Access key.
	Secretkey pulumi.StringPtrInput
	// Timeouts for this resource.
	Timeouts AccessKeyTimeoutsPtrInput
}

func (AccessKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessKeyState)(nil)).Elem()
}

type accessKeyArgs struct {
	// [string] Description of the Access key.
	Description *string `pulumi:"description"`
	// Timeouts for this resource.
	Timeouts *AccessKeyTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a AccessKey resource.
type AccessKeyArgs struct {
	// [string] Description of the Access key.
	Description pulumi.StringPtrInput
	// Timeouts for this resource.
	Timeouts AccessKeyTimeoutsPtrInput
}

func (AccessKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessKeyArgs)(nil)).Elem()
}

type AccessKeyInput interface {
	pulumi.Input

	ToAccessKeyOutput() AccessKeyOutput
	ToAccessKeyOutputWithContext(ctx context.Context) AccessKeyOutput
}

func (*AccessKey) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessKey)(nil)).Elem()
}

func (i *AccessKey) ToAccessKeyOutput() AccessKeyOutput {
	return i.ToAccessKeyOutputWithContext(context.Background())
}

func (i *AccessKey) ToAccessKeyOutputWithContext(ctx context.Context) AccessKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessKeyOutput)
}

// AccessKeyArrayInput is an input type that accepts AccessKeyArray and AccessKeyArrayOutput values.
// You can construct a concrete instance of `AccessKeyArrayInput` via:
//
//	AccessKeyArray{ AccessKeyArgs{...} }
type AccessKeyArrayInput interface {
	pulumi.Input

	ToAccessKeyArrayOutput() AccessKeyArrayOutput
	ToAccessKeyArrayOutputWithContext(context.Context) AccessKeyArrayOutput
}

type AccessKeyArray []AccessKeyInput

func (AccessKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessKey)(nil)).Elem()
}

func (i AccessKeyArray) ToAccessKeyArrayOutput() AccessKeyArrayOutput {
	return i.ToAccessKeyArrayOutputWithContext(context.Background())
}

func (i AccessKeyArray) ToAccessKeyArrayOutputWithContext(ctx context.Context) AccessKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessKeyArrayOutput)
}

// AccessKeyMapInput is an input type that accepts AccessKeyMap and AccessKeyMapOutput values.
// You can construct a concrete instance of `AccessKeyMapInput` via:
//
//	AccessKeyMap{ "key": AccessKeyArgs{...} }
type AccessKeyMapInput interface {
	pulumi.Input

	ToAccessKeyMapOutput() AccessKeyMapOutput
	ToAccessKeyMapOutputWithContext(context.Context) AccessKeyMapOutput
}

type AccessKeyMap map[string]AccessKeyInput

func (AccessKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessKey)(nil)).Elem()
}

func (i AccessKeyMap) ToAccessKeyMapOutput() AccessKeyMapOutput {
	return i.ToAccessKeyMapOutputWithContext(context.Background())
}

func (i AccessKeyMap) ToAccessKeyMapOutputWithContext(ctx context.Context) AccessKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessKeyMapOutput)
}

type AccessKeyOutput struct{ *pulumi.OutputState }

func (AccessKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessKey)(nil)).Elem()
}

func (o AccessKeyOutput) ToAccessKeyOutput() AccessKeyOutput {
	return o
}

func (o AccessKeyOutput) ToAccessKeyOutputWithContext(ctx context.Context) AccessKeyOutput {
	return o
}

// Access key metadata is a string of 92 characters.
func (o AccessKeyOutput) Accesskey() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessKey) pulumi.StringOutput { return v.Accesskey }).(pulumi.StringOutput)
}

// The canonical user ID which is valid for user-owned buckets.
func (o AccessKeyOutput) CanonicalUserId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessKey) pulumi.StringOutput { return v.CanonicalUserId }).(pulumi.StringOutput)
}

// The contract user ID which is valid for contract-owned buckets
func (o AccessKeyOutput) ContractUserId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessKey) pulumi.StringOutput { return v.ContractUserId }).(pulumi.StringOutput)
}

// [string] Description of the Access key.
func (o AccessKeyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessKey) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The secret key of the Access key.
func (o AccessKeyOutput) Secretkey() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessKey) pulumi.StringOutput { return v.Secretkey }).(pulumi.StringOutput)
}

// Timeouts for this resource.
func (o AccessKeyOutput) Timeouts() AccessKeyTimeoutsPtrOutput {
	return o.ApplyT(func(v *AccessKey) AccessKeyTimeoutsPtrOutput { return v.Timeouts }).(AccessKeyTimeoutsPtrOutput)
}

type AccessKeyArrayOutput struct{ *pulumi.OutputState }

func (AccessKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessKey)(nil)).Elem()
}

func (o AccessKeyArrayOutput) ToAccessKeyArrayOutput() AccessKeyArrayOutput {
	return o
}

func (o AccessKeyArrayOutput) ToAccessKeyArrayOutputWithContext(ctx context.Context) AccessKeyArrayOutput {
	return o
}

func (o AccessKeyArrayOutput) Index(i pulumi.IntInput) AccessKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccessKey {
		return vs[0].([]*AccessKey)[vs[1].(int)]
	}).(AccessKeyOutput)
}

type AccessKeyMapOutput struct{ *pulumi.OutputState }

func (AccessKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessKey)(nil)).Elem()
}

func (o AccessKeyMapOutput) ToAccessKeyMapOutput() AccessKeyMapOutput {
	return o
}

func (o AccessKeyMapOutput) ToAccessKeyMapOutputWithContext(ctx context.Context) AccessKeyMapOutput {
	return o
}

func (o AccessKeyMapOutput) MapIndex(k pulumi.StringInput) AccessKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccessKey {
		return vs[0].(map[string]*AccessKey)[vs[1].(string)]
	}).(AccessKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessKeyInput)(nil)).Elem(), &AccessKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessKeyArrayInput)(nil)).Elem(), AccessKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessKeyMapInput)(nil)).Elem(), AccessKeyMap{})
	pulumi.RegisterOutputType(AccessKeyOutput{})
	pulumi.RegisterOutputType(AccessKeyArrayOutput{})
	pulumi.RegisterOutputType(AccessKeyMapOutput{})
}
