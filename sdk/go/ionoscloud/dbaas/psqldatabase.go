// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbaas

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a **DbaaS PgSql Database**.
//
// ## Example Usage
//
// Create a `PgSQL` cluster as presented in the documentation for the cluster, then define a database resource
// and link it with the previously created cluster:
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/dbaas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dbaas.NewPSQLDatabase(ctx, "example_pg_database", &dbaas.PSQLDatabaseArgs{
//				ClusterId: pulumi.Any(example.Id),
//				Name:      pulumi.String("exampledatabase"),
//				Owner:     pulumi.String("exampleuser"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// In order to import a PgSql database, you can define an empty database resource in the plan:
//
// hcl
//
// resource "ionoscloud_pg_database" "example" {
//
// }
//
// The resource can be imported using the `clusterId` and the `name`, for example:
//
// ```sh
// $ pulumi import ionoscloud:dbaas/pSQLDatabase:PSQLDatabase example clusterid/name
// ```
type PSQLDatabase struct {
	pulumi.CustomResourceState

	// [string] The unique ID of the cluster.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// [string] The name of the database.
	Name pulumi.StringOutput `pulumi:"name"`
	// [string] The owner of the database.
	Owner pulumi.StringOutput `pulumi:"owner"`
}

// NewPSQLDatabase registers a new resource with the given unique name, arguments, and options.
func NewPSQLDatabase(ctx *pulumi.Context,
	name string, args *PSQLDatabaseArgs, opts ...pulumi.ResourceOption) (*PSQLDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Owner == nil {
		return nil, errors.New("invalid value for required argument 'Owner'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PSQLDatabase
	err := ctx.RegisterResource("ionoscloud:dbaas/pSQLDatabase:PSQLDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPSQLDatabase gets an existing PSQLDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPSQLDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PSQLDatabaseState, opts ...pulumi.ResourceOption) (*PSQLDatabase, error) {
	var resource PSQLDatabase
	err := ctx.ReadResource("ionoscloud:dbaas/pSQLDatabase:PSQLDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PSQLDatabase resources.
type psqldatabaseState struct {
	// [string] The unique ID of the cluster.
	ClusterId *string `pulumi:"clusterId"`
	// [string] The name of the database.
	Name *string `pulumi:"name"`
	// [string] The owner of the database.
	Owner *string `pulumi:"owner"`
}

type PSQLDatabaseState struct {
	// [string] The unique ID of the cluster.
	ClusterId pulumi.StringPtrInput
	// [string] The name of the database.
	Name pulumi.StringPtrInput
	// [string] The owner of the database.
	Owner pulumi.StringPtrInput
}

func (PSQLDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*psqldatabaseState)(nil)).Elem()
}

type psqldatabaseArgs struct {
	// [string] The unique ID of the cluster.
	ClusterId string `pulumi:"clusterId"`
	// [string] The name of the database.
	Name *string `pulumi:"name"`
	// [string] The owner of the database.
	Owner string `pulumi:"owner"`
}

// The set of arguments for constructing a PSQLDatabase resource.
type PSQLDatabaseArgs struct {
	// [string] The unique ID of the cluster.
	ClusterId pulumi.StringInput
	// [string] The name of the database.
	Name pulumi.StringPtrInput
	// [string] The owner of the database.
	Owner pulumi.StringInput
}

func (PSQLDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*psqldatabaseArgs)(nil)).Elem()
}

type PSQLDatabaseInput interface {
	pulumi.Input

	ToPSQLDatabaseOutput() PSQLDatabaseOutput
	ToPSQLDatabaseOutputWithContext(ctx context.Context) PSQLDatabaseOutput
}

func (*PSQLDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**PSQLDatabase)(nil)).Elem()
}

func (i *PSQLDatabase) ToPSQLDatabaseOutput() PSQLDatabaseOutput {
	return i.ToPSQLDatabaseOutputWithContext(context.Background())
}

func (i *PSQLDatabase) ToPSQLDatabaseOutputWithContext(ctx context.Context) PSQLDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PSQLDatabaseOutput)
}

// PSQLDatabaseArrayInput is an input type that accepts PSQLDatabaseArray and PSQLDatabaseArrayOutput values.
// You can construct a concrete instance of `PSQLDatabaseArrayInput` via:
//
//	PSQLDatabaseArray{ PSQLDatabaseArgs{...} }
type PSQLDatabaseArrayInput interface {
	pulumi.Input

	ToPSQLDatabaseArrayOutput() PSQLDatabaseArrayOutput
	ToPSQLDatabaseArrayOutputWithContext(context.Context) PSQLDatabaseArrayOutput
}

type PSQLDatabaseArray []PSQLDatabaseInput

func (PSQLDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PSQLDatabase)(nil)).Elem()
}

func (i PSQLDatabaseArray) ToPSQLDatabaseArrayOutput() PSQLDatabaseArrayOutput {
	return i.ToPSQLDatabaseArrayOutputWithContext(context.Background())
}

func (i PSQLDatabaseArray) ToPSQLDatabaseArrayOutputWithContext(ctx context.Context) PSQLDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PSQLDatabaseArrayOutput)
}

// PSQLDatabaseMapInput is an input type that accepts PSQLDatabaseMap and PSQLDatabaseMapOutput values.
// You can construct a concrete instance of `PSQLDatabaseMapInput` via:
//
//	PSQLDatabaseMap{ "key": PSQLDatabaseArgs{...} }
type PSQLDatabaseMapInput interface {
	pulumi.Input

	ToPSQLDatabaseMapOutput() PSQLDatabaseMapOutput
	ToPSQLDatabaseMapOutputWithContext(context.Context) PSQLDatabaseMapOutput
}

type PSQLDatabaseMap map[string]PSQLDatabaseInput

func (PSQLDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PSQLDatabase)(nil)).Elem()
}

func (i PSQLDatabaseMap) ToPSQLDatabaseMapOutput() PSQLDatabaseMapOutput {
	return i.ToPSQLDatabaseMapOutputWithContext(context.Background())
}

func (i PSQLDatabaseMap) ToPSQLDatabaseMapOutputWithContext(ctx context.Context) PSQLDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PSQLDatabaseMapOutput)
}

type PSQLDatabaseOutput struct{ *pulumi.OutputState }

func (PSQLDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PSQLDatabase)(nil)).Elem()
}

func (o PSQLDatabaseOutput) ToPSQLDatabaseOutput() PSQLDatabaseOutput {
	return o
}

func (o PSQLDatabaseOutput) ToPSQLDatabaseOutputWithContext(ctx context.Context) PSQLDatabaseOutput {
	return o
}

// [string] The unique ID of the cluster.
func (o PSQLDatabaseOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *PSQLDatabase) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// [string] The name of the database.
func (o PSQLDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PSQLDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// [string] The owner of the database.
func (o PSQLDatabaseOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *PSQLDatabase) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

type PSQLDatabaseArrayOutput struct{ *pulumi.OutputState }

func (PSQLDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PSQLDatabase)(nil)).Elem()
}

func (o PSQLDatabaseArrayOutput) ToPSQLDatabaseArrayOutput() PSQLDatabaseArrayOutput {
	return o
}

func (o PSQLDatabaseArrayOutput) ToPSQLDatabaseArrayOutputWithContext(ctx context.Context) PSQLDatabaseArrayOutput {
	return o
}

func (o PSQLDatabaseArrayOutput) Index(i pulumi.IntInput) PSQLDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PSQLDatabase {
		return vs[0].([]*PSQLDatabase)[vs[1].(int)]
	}).(PSQLDatabaseOutput)
}

type PSQLDatabaseMapOutput struct{ *pulumi.OutputState }

func (PSQLDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PSQLDatabase)(nil)).Elem()
}

func (o PSQLDatabaseMapOutput) ToPSQLDatabaseMapOutput() PSQLDatabaseMapOutput {
	return o
}

func (o PSQLDatabaseMapOutput) ToPSQLDatabaseMapOutputWithContext(ctx context.Context) PSQLDatabaseMapOutput {
	return o
}

func (o PSQLDatabaseMapOutput) MapIndex(k pulumi.StringInput) PSQLDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PSQLDatabase {
		return vs[0].(map[string]*PSQLDatabase)[vs[1].(string)]
	}).(PSQLDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PSQLDatabaseInput)(nil)).Elem(), &PSQLDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*PSQLDatabaseArrayInput)(nil)).Elem(), PSQLDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PSQLDatabaseMapInput)(nil)).Elem(), PSQLDatabaseMap{})
	pulumi.RegisterOutputType(PSQLDatabaseOutput{})
	pulumi.RegisterOutputType(PSQLDatabaseArrayOutput{})
	pulumi.RegisterOutputType(PSQLDatabaseMapOutput{})
}
