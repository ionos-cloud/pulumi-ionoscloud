// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbaas

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `dbaas.InMemoryDBReplicaSet` data source can be used to retrieve information about an existing InMemoryDB Replica Set.
//
// ## Example Usage
//
// ### By id
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/dbaas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dbaas.LookupInMemoryDBReplicaSet(ctx, &dbaas.LookupInMemoryDBReplicaSetArgs{
//				Id:       pulumi.StringRef("example-id"),
//				Location: "es/vit",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### By displayName
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/dbaas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dbaas.LookupInMemoryDBReplicaSet(ctx, &dbaas.LookupInMemoryDBReplicaSetArgs{
//				DisplayName: pulumi.StringRef("example-id"),
//				Location:    "us/las",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupInMemoryDBReplicaSet(ctx *pulumi.Context, args *LookupInMemoryDBReplicaSetArgs, opts ...pulumi.InvokeOption) (*LookupInMemoryDBReplicaSetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupInMemoryDBReplicaSetResult
	err := ctx.Invoke("ionoscloud:dbaas/getInMemoryDBReplicaSet:getInMemoryDBReplicaSet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInMemoryDBReplicaSet.
type LookupInMemoryDBReplicaSetArgs struct {
	// The display name of the InMemoryDB Replica Set.
	DisplayName *string `pulumi:"displayName"`
	// The ID of the InMemoryDB Replica Set.
	Id *string `pulumi:"id"`
	// The location of the InMemoryDB Replica Set.
	//
	// > **Note:** Either `id` or `displayName` must be provided. If none, or both are provided, the datasource will return an error.
	Location string `pulumi:"location"`
}

// A collection of values returned by getInMemoryDBReplicaSet.
type LookupInMemoryDBReplicaSetResult struct {
	// [object] The network connection for your replica set. Only one connection is allowed. It includes:
	Connections []GetInMemoryDBReplicaSetConnection `pulumi:"connections"`
	// [object] Credentials for the InMemoryDB replicaset, only one type of password can be used since they are mutually exclusive. It includes:
	Credentials []GetInMemoryDBReplicaSetCredential `pulumi:"credentials"`
	DisplayName *string                             `pulumi:"displayName"`
	// [string] The DNS name pointing to your replica set. Will be used to connect to the active/standalone instance.
	DnsName string `pulumi:"dnsName"`
	// [string] The eviction policy for the replica set, possible values are:
	EvictionPolicy string  `pulumi:"evictionPolicy"`
	Id             *string `pulumi:"id"`
	Location       string  `pulumi:"location"`
	// A weekly 4 hour-long window, during which maintenance might occur. It includes:
	MaintenanceWindows []GetInMemoryDBReplicaSetMaintenanceWindow `pulumi:"maintenanceWindows"`
	// [string] Specifies How and If data is persisted, possible values are:
	// * `None` - Data is inMemory only and will not be persisted. Useful for cache only applications.
	// * `AOF` - (Append Only File) AOF persistence logs every write operation received by the server. These operations can then be replayed again at server startup, reconstructing the original dataset. Commands are logged using the same format as the InMemoryDB protocol itself.
	// * `RDB` - RDB persistence performs snapshots of the current in memory state.
	// * `RDB_AOF` - Both, RDB and AOF persistence are enabled.
	PersistenceMode string `pulumi:"persistenceMode"`
	// [int] The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only standby for a failure of the active instance.
	Replicas int `pulumi:"replicas"`
	// [object] The resources of the individual replicas. It includes:
	Resources []GetInMemoryDBReplicaSetResource `pulumi:"resources"`
	// [string] The InMemoryDB version of your replica set.
	Version string `pulumi:"version"`
}

func LookupInMemoryDBReplicaSetOutput(ctx *pulumi.Context, args LookupInMemoryDBReplicaSetOutputArgs, opts ...pulumi.InvokeOption) LookupInMemoryDBReplicaSetResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupInMemoryDBReplicaSetResultOutput, error) {
			args := v.(LookupInMemoryDBReplicaSetArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ionoscloud:dbaas/getInMemoryDBReplicaSet:getInMemoryDBReplicaSet", args, LookupInMemoryDBReplicaSetResultOutput{}, options).(LookupInMemoryDBReplicaSetResultOutput), nil
		}).(LookupInMemoryDBReplicaSetResultOutput)
}

// A collection of arguments for invoking getInMemoryDBReplicaSet.
type LookupInMemoryDBReplicaSetOutputArgs struct {
	// The display name of the InMemoryDB Replica Set.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The ID of the InMemoryDB Replica Set.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The location of the InMemoryDB Replica Set.
	//
	// > **Note:** Either `id` or `displayName` must be provided. If none, or both are provided, the datasource will return an error.
	Location pulumi.StringInput `pulumi:"location"`
}

func (LookupInMemoryDBReplicaSetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInMemoryDBReplicaSetArgs)(nil)).Elem()
}

// A collection of values returned by getInMemoryDBReplicaSet.
type LookupInMemoryDBReplicaSetResultOutput struct{ *pulumi.OutputState }

func (LookupInMemoryDBReplicaSetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInMemoryDBReplicaSetResult)(nil)).Elem()
}

func (o LookupInMemoryDBReplicaSetResultOutput) ToLookupInMemoryDBReplicaSetResultOutput() LookupInMemoryDBReplicaSetResultOutput {
	return o
}

func (o LookupInMemoryDBReplicaSetResultOutput) ToLookupInMemoryDBReplicaSetResultOutputWithContext(ctx context.Context) LookupInMemoryDBReplicaSetResultOutput {
	return o
}

// [object] The network connection for your replica set. Only one connection is allowed. It includes:
func (o LookupInMemoryDBReplicaSetResultOutput) Connections() GetInMemoryDBReplicaSetConnectionArrayOutput {
	return o.ApplyT(func(v LookupInMemoryDBReplicaSetResult) []GetInMemoryDBReplicaSetConnection { return v.Connections }).(GetInMemoryDBReplicaSetConnectionArrayOutput)
}

// [object] Credentials for the InMemoryDB replicaset, only one type of password can be used since they are mutually exclusive. It includes:
func (o LookupInMemoryDBReplicaSetResultOutput) Credentials() GetInMemoryDBReplicaSetCredentialArrayOutput {
	return o.ApplyT(func(v LookupInMemoryDBReplicaSetResult) []GetInMemoryDBReplicaSetCredential { return v.Credentials }).(GetInMemoryDBReplicaSetCredentialArrayOutput)
}

func (o LookupInMemoryDBReplicaSetResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInMemoryDBReplicaSetResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// [string] The DNS name pointing to your replica set. Will be used to connect to the active/standalone instance.
func (o LookupInMemoryDBReplicaSetResultOutput) DnsName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInMemoryDBReplicaSetResult) string { return v.DnsName }).(pulumi.StringOutput)
}

// [string] The eviction policy for the replica set, possible values are:
func (o LookupInMemoryDBReplicaSetResultOutput) EvictionPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInMemoryDBReplicaSetResult) string { return v.EvictionPolicy }).(pulumi.StringOutput)
}

func (o LookupInMemoryDBReplicaSetResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInMemoryDBReplicaSetResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupInMemoryDBReplicaSetResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInMemoryDBReplicaSetResult) string { return v.Location }).(pulumi.StringOutput)
}

// A weekly 4 hour-long window, during which maintenance might occur. It includes:
func (o LookupInMemoryDBReplicaSetResultOutput) MaintenanceWindows() GetInMemoryDBReplicaSetMaintenanceWindowArrayOutput {
	return o.ApplyT(func(v LookupInMemoryDBReplicaSetResult) []GetInMemoryDBReplicaSetMaintenanceWindow {
		return v.MaintenanceWindows
	}).(GetInMemoryDBReplicaSetMaintenanceWindowArrayOutput)
}

// [string] Specifies How and If data is persisted, possible values are:
// * `None` - Data is inMemory only and will not be persisted. Useful for cache only applications.
// * `AOF` - (Append Only File) AOF persistence logs every write operation received by the server. These operations can then be replayed again at server startup, reconstructing the original dataset. Commands are logged using the same format as the InMemoryDB protocol itself.
// * `RDB` - RDB persistence performs snapshots of the current in memory state.
// * `RDB_AOF` - Both, RDB and AOF persistence are enabled.
func (o LookupInMemoryDBReplicaSetResultOutput) PersistenceMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInMemoryDBReplicaSetResult) string { return v.PersistenceMode }).(pulumi.StringOutput)
}

// [int] The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only standby for a failure of the active instance.
func (o LookupInMemoryDBReplicaSetResultOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInMemoryDBReplicaSetResult) int { return v.Replicas }).(pulumi.IntOutput)
}

// [object] The resources of the individual replicas. It includes:
func (o LookupInMemoryDBReplicaSetResultOutput) Resources() GetInMemoryDBReplicaSetResourceArrayOutput {
	return o.ApplyT(func(v LookupInMemoryDBReplicaSetResult) []GetInMemoryDBReplicaSetResource { return v.Resources }).(GetInMemoryDBReplicaSetResourceArrayOutput)
}

// [string] The InMemoryDB version of your replica set.
func (o LookupInMemoryDBReplicaSetResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInMemoryDBReplicaSetResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupInMemoryDBReplicaSetResultOutput{})
}
