// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbaas

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a **DbaaS Mongo User**. .
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/dbaas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Basic example
//			datacenterExample, err := compute.NewDatacenter(ctx, "datacenter_example", &compute.DatacenterArgs{
//				Name:        pulumi.String("example"),
//				Location:    pulumi.String("de/txl"),
//				Description: pulumi.String("Datacenter for testing dbaas cluster"),
//			})
//			if err != nil {
//				return err
//			}
//			lanExample, err := compute.NewLan(ctx, "lan_example", &compute.LanArgs{
//				DatacenterId: datacenterExample.ID(),
//				Public:       pulumi.Bool(false),
//				Name:         pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleMongoCluster, err := dbaas.NewMongoCluster(ctx, "example_mongo_cluster", &dbaas.MongoClusterArgs{
//				MaintenanceWindow: &dbaas.MongoClusterMaintenanceWindowArgs{
//					DayOfTheWeek: pulumi.String("Sunday"),
//					Time:         pulumi.String("09:00:00"),
//				},
//				MongodbVersion: pulumi.String("5.0"),
//				Instances:      pulumi.Int(1),
//				DisplayName:    pulumi.String("example_mongo_cluster"),
//				Location:       datacenterExample.Location,
//				Connections: &dbaas.MongoClusterConnectionsArgs{
//					DatacenterId: datacenterExample.ID(),
//					LanId:        lanExample.ID(),
//					CidrLists: pulumi.StringArray{
//						pulumi.String("192.168.1.108/24"),
//					},
//				},
//				TemplateId: pulumi.String("6b78ea06-ee0e-4689-998c-fc9c46e781f6"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dbaas.NewMongoUser(ctx, "example_mongo_user", &dbaas.MongoUserArgs{
//				ClusterId: exampleMongoCluster.ID(),
//				Username:  pulumi.String("myUser"),
//				Password:  pulumi.String("strongPassword"),
//				Roles: dbaas.MongoUserRoleArray{
//					&dbaas.MongoUserRoleArgs{
//						Role:     pulumi.String("read"),
//						Database: pulumi.String("db1"),
//					},
//					&dbaas.MongoUserRoleArgs{
//						Role:     pulumi.String("readWrite"),
//						Database: pulumi.String("db2"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/dbaas"
//	"github.com/pulumi/pulumi-random/sdk/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Complete example
//			datacenterExample, err := compute.NewDatacenter(ctx, "datacenter_example", &compute.DatacenterArgs{
//				Name:        pulumi.String("example"),
//				Location:    pulumi.String("de/txl"),
//				Description: pulumi.String("Datacenter for testing dbaas cluster"),
//			})
//			if err != nil {
//				return err
//			}
//			lanExample, err := compute.NewLan(ctx, "lan_example", &compute.LanArgs{
//				DatacenterId: datacenterExample.ID(),
//				Public:       pulumi.Bool(false),
//				Name:         pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleMongoCluster, err := dbaas.NewMongoCluster(ctx, "example_mongo_cluster", &dbaas.MongoClusterArgs{
//				MaintenanceWindow: &dbaas.MongoClusterMaintenanceWindowArgs{
//					DayOfTheWeek: pulumi.String("Sunday"),
//					Time:         pulumi.String("09:00:00"),
//				},
//				MongodbVersion: pulumi.String("5.0"),
//				Instances:      pulumi.Int(1),
//				DisplayName:    pulumi.String("example_mongo_cluster"),
//				Location:       datacenterExample.Location,
//				Connections: &dbaas.MongoClusterConnectionsArgs{
//					DatacenterId: datacenterExample.ID(),
//					LanId:        lanExample.ID(),
//					CidrLists: pulumi.StringArray{
//						pulumi.String("192.168.1.108/24"),
//					},
//				},
//				TemplateId: pulumi.String("6b78ea06-ee0e-4689-998c-fc9c46e781f6"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = random.NewPassword(ctx, "cluster_password", &random.PasswordArgs{
//				Length:          16,
//				Special:         true,
//				OverrideSpecial: "!#$%&*()-_=+[]{}<>:?",
//			})
//			if err != nil {
//				return err
//			}
//			userPassword, err := random.NewPassword(ctx, "user_password", &random.PasswordArgs{
//				Length:          16,
//				Special:         true,
//				OverrideSpecial: "!#$%&*()-_=+[]{}<>:?",
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dbaas.NewMongoUser(ctx, "example_mongo_user", &dbaas.MongoUserArgs{
//				ClusterId: exampleMongoCluster.ID(),
//				Username:  pulumi.String("myUser"),
//				Password:  userPassword.Result,
//				Roles: dbaas.MongoUserRoleArray{
//					&dbaas.MongoUserRoleArgs{
//						Role:     pulumi.String("read"),
//						Database: pulumi.String("db1"),
//					},
//					&dbaas.MongoUserRoleArgs{
//						Role:     pulumi.String("readWrite"),
//						Database: pulumi.String("db2"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Resource DBaaS MongoDB User can be imported using the `clusterID` and the `username`.
//
// First, define an empty resource in the plan:
//
// hcl
//
// resource "ionoscloud_mongo_user" "importeduser" {
//
// }
//
// Then you can import the user using the following command:
//
// ```sh
// $ pulumi import ionoscloud:dbaas/mongoUser:MongoUser mycluser clusterid/username
// ```
type MongoUser struct {
	pulumi.CustomResourceState

	// [string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// [string] User password. Updates to the value of the field force the cluster to be re-created.
	Password pulumi.StringOutput `pulumi:"password"`
	// [string] a list of mongodb user roles. Updates to the value of the field force the cluster to be re-created.
	Roles MongoUserRoleArrayOutput `pulumi:"roles"`
	// [string] Used for authentication. Updates to the value of the field force the cluster to be re-created.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewMongoUser registers a new resource with the given unique name, arguments, and options.
func NewMongoUser(ctx *pulumi.Context,
	name string, args *MongoUserArgs, opts ...pulumi.ResourceOption) (*MongoUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MongoUser
	err := ctx.RegisterResource("ionoscloud:dbaas/mongoUser:MongoUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMongoUser gets an existing MongoUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMongoUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MongoUserState, opts ...pulumi.ResourceOption) (*MongoUser, error) {
	var resource MongoUser
	err := ctx.ReadResource("ionoscloud:dbaas/mongoUser:MongoUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MongoUser resources.
type mongoUserState struct {
	// [string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.
	ClusterId *string `pulumi:"clusterId"`
	// [string] User password. Updates to the value of the field force the cluster to be re-created.
	Password *string `pulumi:"password"`
	// [string] a list of mongodb user roles. Updates to the value of the field force the cluster to be re-created.
	Roles []MongoUserRole `pulumi:"roles"`
	// [string] Used for authentication. Updates to the value of the field force the cluster to be re-created.
	Username *string `pulumi:"username"`
}

type MongoUserState struct {
	// [string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.
	ClusterId pulumi.StringPtrInput
	// [string] User password. Updates to the value of the field force the cluster to be re-created.
	Password pulumi.StringPtrInput
	// [string] a list of mongodb user roles. Updates to the value of the field force the cluster to be re-created.
	Roles MongoUserRoleArrayInput
	// [string] Used for authentication. Updates to the value of the field force the cluster to be re-created.
	Username pulumi.StringPtrInput
}

func (MongoUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*mongoUserState)(nil)).Elem()
}

type mongoUserArgs struct {
	// [string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.
	ClusterId string `pulumi:"clusterId"`
	// [string] User password. Updates to the value of the field force the cluster to be re-created.
	Password string `pulumi:"password"`
	// [string] a list of mongodb user roles. Updates to the value of the field force the cluster to be re-created.
	Roles []MongoUserRole `pulumi:"roles"`
	// [string] Used for authentication. Updates to the value of the field force the cluster to be re-created.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a MongoUser resource.
type MongoUserArgs struct {
	// [string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.
	ClusterId pulumi.StringInput
	// [string] User password. Updates to the value of the field force the cluster to be re-created.
	Password pulumi.StringInput
	// [string] a list of mongodb user roles. Updates to the value of the field force the cluster to be re-created.
	Roles MongoUserRoleArrayInput
	// [string] Used for authentication. Updates to the value of the field force the cluster to be re-created.
	Username pulumi.StringInput
}

func (MongoUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mongoUserArgs)(nil)).Elem()
}

type MongoUserInput interface {
	pulumi.Input

	ToMongoUserOutput() MongoUserOutput
	ToMongoUserOutputWithContext(ctx context.Context) MongoUserOutput
}

func (*MongoUser) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoUser)(nil)).Elem()
}

func (i *MongoUser) ToMongoUserOutput() MongoUserOutput {
	return i.ToMongoUserOutputWithContext(context.Background())
}

func (i *MongoUser) ToMongoUserOutputWithContext(ctx context.Context) MongoUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoUserOutput)
}

// MongoUserArrayInput is an input type that accepts MongoUserArray and MongoUserArrayOutput values.
// You can construct a concrete instance of `MongoUserArrayInput` via:
//
//	MongoUserArray{ MongoUserArgs{...} }
type MongoUserArrayInput interface {
	pulumi.Input

	ToMongoUserArrayOutput() MongoUserArrayOutput
	ToMongoUserArrayOutputWithContext(context.Context) MongoUserArrayOutput
}

type MongoUserArray []MongoUserInput

func (MongoUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongoUser)(nil)).Elem()
}

func (i MongoUserArray) ToMongoUserArrayOutput() MongoUserArrayOutput {
	return i.ToMongoUserArrayOutputWithContext(context.Background())
}

func (i MongoUserArray) ToMongoUserArrayOutputWithContext(ctx context.Context) MongoUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoUserArrayOutput)
}

// MongoUserMapInput is an input type that accepts MongoUserMap and MongoUserMapOutput values.
// You can construct a concrete instance of `MongoUserMapInput` via:
//
//	MongoUserMap{ "key": MongoUserArgs{...} }
type MongoUserMapInput interface {
	pulumi.Input

	ToMongoUserMapOutput() MongoUserMapOutput
	ToMongoUserMapOutputWithContext(context.Context) MongoUserMapOutput
}

type MongoUserMap map[string]MongoUserInput

func (MongoUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongoUser)(nil)).Elem()
}

func (i MongoUserMap) ToMongoUserMapOutput() MongoUserMapOutput {
	return i.ToMongoUserMapOutputWithContext(context.Background())
}

func (i MongoUserMap) ToMongoUserMapOutputWithContext(ctx context.Context) MongoUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoUserMapOutput)
}

type MongoUserOutput struct{ *pulumi.OutputState }

func (MongoUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoUser)(nil)).Elem()
}

func (o MongoUserOutput) ToMongoUserOutput() MongoUserOutput {
	return o
}

func (o MongoUserOutput) ToMongoUserOutputWithContext(ctx context.Context) MongoUserOutput {
	return o
}

// [string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.
func (o MongoUserOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoUser) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// [string] User password. Updates to the value of the field force the cluster to be re-created.
func (o MongoUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// [string] a list of mongodb user roles. Updates to the value of the field force the cluster to be re-created.
func (o MongoUserOutput) Roles() MongoUserRoleArrayOutput {
	return o.ApplyT(func(v *MongoUser) MongoUserRoleArrayOutput { return v.Roles }).(MongoUserRoleArrayOutput)
}

// [string] Used for authentication. Updates to the value of the field force the cluster to be re-created.
func (o MongoUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoUser) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type MongoUserArrayOutput struct{ *pulumi.OutputState }

func (MongoUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongoUser)(nil)).Elem()
}

func (o MongoUserArrayOutput) ToMongoUserArrayOutput() MongoUserArrayOutput {
	return o
}

func (o MongoUserArrayOutput) ToMongoUserArrayOutputWithContext(ctx context.Context) MongoUserArrayOutput {
	return o
}

func (o MongoUserArrayOutput) Index(i pulumi.IntInput) MongoUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MongoUser {
		return vs[0].([]*MongoUser)[vs[1].(int)]
	}).(MongoUserOutput)
}

type MongoUserMapOutput struct{ *pulumi.OutputState }

func (MongoUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongoUser)(nil)).Elem()
}

func (o MongoUserMapOutput) ToMongoUserMapOutput() MongoUserMapOutput {
	return o
}

func (o MongoUserMapOutput) ToMongoUserMapOutputWithContext(ctx context.Context) MongoUserMapOutput {
	return o
}

func (o MongoUserMapOutput) MapIndex(k pulumi.StringInput) MongoUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MongoUser {
		return vs[0].(map[string]*MongoUser)[vs[1].(string)]
	}).(MongoUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MongoUserInput)(nil)).Elem(), &MongoUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongoUserArrayInput)(nil)).Elem(), MongoUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongoUserMapInput)(nil)).Elem(), MongoUserMap{})
	pulumi.RegisterOutputType(MongoUserOutput{})
	pulumi.RegisterOutputType(MongoUserArrayOutput{})
	pulumi.RegisterOutputType(MongoUserMapOutput{})
}
