// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbaas

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type InMemoryDBReplicaSet struct {
	pulumi.CustomResourceState

	// The network connection for your replica set. Only one connection is allowed.
	Connections InMemoryDBReplicaSetConnectionsOutput `pulumi:"connections"`
	// Credentials for the InMemoryDB replicaset.
	Credentials InMemoryDBReplicaSetCredentialsOutput `pulumi:"credentials"`
	// The human readable name of your replica set.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The DNS name pointing to your replica set. Will be used to connect to the active/standalone instance.
	DnsName pulumi.StringOutput `pulumi:"dnsName"`
	// The eviction policy for the replica set.
	EvictionPolicy pulumi.StringOutput `pulumi:"evictionPolicy"`
	// The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
	InitialSnapshotId pulumi.StringPtrOutput `pulumi:"initialSnapshotId"`
	// The replica set location
	Location pulumi.StringOutput `pulumi:"location"`
	// A weekly 4 hour-long window, during which maintenance might occur.
	MaintenanceWindow InMemoryDBReplicaSetMaintenanceWindowOutput `pulumi:"maintenanceWindow"`
	// Specifies How and If data is persisted.
	PersistenceMode pulumi.StringOutput `pulumi:"persistenceMode"`
	// The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the
	// value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only
	// standby for a failure of the active instance.
	Replicas pulumi.IntOutput `pulumi:"replicas"`
	// The resources of the individual replicas.
	Resources InMemoryDBReplicaSetResourcesOutput `pulumi:"resources"`
	// The InMemoryDB version of your replica set.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewInMemoryDBReplicaSet registers a new resource with the given unique name, arguments, and options.
func NewInMemoryDBReplicaSet(ctx *pulumi.Context,
	name string, args *InMemoryDBReplicaSetArgs, opts ...pulumi.ResourceOption) (*InMemoryDBReplicaSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connections == nil {
		return nil, errors.New("invalid value for required argument 'Connections'")
	}
	if args.Credentials == nil {
		return nil, errors.New("invalid value for required argument 'Credentials'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.EvictionPolicy == nil {
		return nil, errors.New("invalid value for required argument 'EvictionPolicy'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.PersistenceMode == nil {
		return nil, errors.New("invalid value for required argument 'PersistenceMode'")
	}
	if args.Replicas == nil {
		return nil, errors.New("invalid value for required argument 'Replicas'")
	}
	if args.Resources == nil {
		return nil, errors.New("invalid value for required argument 'Resources'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("ionoscloud:index/inmemorydbReplicaset:InmemorydbReplicaset"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InMemoryDBReplicaSet
	err := ctx.RegisterResource("ionoscloud:dbaas/inMemoryDBReplicaSet:InMemoryDBReplicaSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInMemoryDBReplicaSet gets an existing InMemoryDBReplicaSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInMemoryDBReplicaSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InMemoryDBReplicaSetState, opts ...pulumi.ResourceOption) (*InMemoryDBReplicaSet, error) {
	var resource InMemoryDBReplicaSet
	err := ctx.ReadResource("ionoscloud:dbaas/inMemoryDBReplicaSet:InMemoryDBReplicaSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InMemoryDBReplicaSet resources.
type inMemoryDBReplicaSetState struct {
	// The network connection for your replica set. Only one connection is allowed.
	Connections *InMemoryDBReplicaSetConnections `pulumi:"connections"`
	// Credentials for the InMemoryDB replicaset.
	Credentials *InMemoryDBReplicaSetCredentials `pulumi:"credentials"`
	// The human readable name of your replica set.
	DisplayName *string `pulumi:"displayName"`
	// The DNS name pointing to your replica set. Will be used to connect to the active/standalone instance.
	DnsName *string `pulumi:"dnsName"`
	// The eviction policy for the replica set.
	EvictionPolicy *string `pulumi:"evictionPolicy"`
	// The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
	InitialSnapshotId *string `pulumi:"initialSnapshotId"`
	// The replica set location
	Location *string `pulumi:"location"`
	// A weekly 4 hour-long window, during which maintenance might occur.
	MaintenanceWindow *InMemoryDBReplicaSetMaintenanceWindow `pulumi:"maintenanceWindow"`
	// Specifies How and If data is persisted.
	PersistenceMode *string `pulumi:"persistenceMode"`
	// The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the
	// value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only
	// standby for a failure of the active instance.
	Replicas *int `pulumi:"replicas"`
	// The resources of the individual replicas.
	Resources *InMemoryDBReplicaSetResources `pulumi:"resources"`
	// The InMemoryDB version of your replica set.
	Version *string `pulumi:"version"`
}

type InMemoryDBReplicaSetState struct {
	// The network connection for your replica set. Only one connection is allowed.
	Connections InMemoryDBReplicaSetConnectionsPtrInput
	// Credentials for the InMemoryDB replicaset.
	Credentials InMemoryDBReplicaSetCredentialsPtrInput
	// The human readable name of your replica set.
	DisplayName pulumi.StringPtrInput
	// The DNS name pointing to your replica set. Will be used to connect to the active/standalone instance.
	DnsName pulumi.StringPtrInput
	// The eviction policy for the replica set.
	EvictionPolicy pulumi.StringPtrInput
	// The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
	InitialSnapshotId pulumi.StringPtrInput
	// The replica set location
	Location pulumi.StringPtrInput
	// A weekly 4 hour-long window, during which maintenance might occur.
	MaintenanceWindow InMemoryDBReplicaSetMaintenanceWindowPtrInput
	// Specifies How and If data is persisted.
	PersistenceMode pulumi.StringPtrInput
	// The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the
	// value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only
	// standby for a failure of the active instance.
	Replicas pulumi.IntPtrInput
	// The resources of the individual replicas.
	Resources InMemoryDBReplicaSetResourcesPtrInput
	// The InMemoryDB version of your replica set.
	Version pulumi.StringPtrInput
}

func (InMemoryDBReplicaSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*inMemoryDBReplicaSetState)(nil)).Elem()
}

type inMemoryDBReplicaSetArgs struct {
	// The network connection for your replica set. Only one connection is allowed.
	Connections InMemoryDBReplicaSetConnections `pulumi:"connections"`
	// Credentials for the InMemoryDB replicaset.
	Credentials InMemoryDBReplicaSetCredentials `pulumi:"credentials"`
	// The human readable name of your replica set.
	DisplayName string `pulumi:"displayName"`
	// The eviction policy for the replica set.
	EvictionPolicy string `pulumi:"evictionPolicy"`
	// The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
	InitialSnapshotId *string `pulumi:"initialSnapshotId"`
	// The replica set location
	Location string `pulumi:"location"`
	// A weekly 4 hour-long window, during which maintenance might occur.
	MaintenanceWindow *InMemoryDBReplicaSetMaintenanceWindow `pulumi:"maintenanceWindow"`
	// Specifies How and If data is persisted.
	PersistenceMode string `pulumi:"persistenceMode"`
	// The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the
	// value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only
	// standby for a failure of the active instance.
	Replicas int `pulumi:"replicas"`
	// The resources of the individual replicas.
	Resources InMemoryDBReplicaSetResources `pulumi:"resources"`
	// The InMemoryDB version of your replica set.
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a InMemoryDBReplicaSet resource.
type InMemoryDBReplicaSetArgs struct {
	// The network connection for your replica set. Only one connection is allowed.
	Connections InMemoryDBReplicaSetConnectionsInput
	// Credentials for the InMemoryDB replicaset.
	Credentials InMemoryDBReplicaSetCredentialsInput
	// The human readable name of your replica set.
	DisplayName pulumi.StringInput
	// The eviction policy for the replica set.
	EvictionPolicy pulumi.StringInput
	// The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
	InitialSnapshotId pulumi.StringPtrInput
	// The replica set location
	Location pulumi.StringInput
	// A weekly 4 hour-long window, during which maintenance might occur.
	MaintenanceWindow InMemoryDBReplicaSetMaintenanceWindowPtrInput
	// Specifies How and If data is persisted.
	PersistenceMode pulumi.StringInput
	// The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the
	// value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only
	// standby for a failure of the active instance.
	Replicas pulumi.IntInput
	// The resources of the individual replicas.
	Resources InMemoryDBReplicaSetResourcesInput
	// The InMemoryDB version of your replica set.
	Version pulumi.StringInput
}

func (InMemoryDBReplicaSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*inMemoryDBReplicaSetArgs)(nil)).Elem()
}

type InMemoryDBReplicaSetInput interface {
	pulumi.Input

	ToInMemoryDBReplicaSetOutput() InMemoryDBReplicaSetOutput
	ToInMemoryDBReplicaSetOutputWithContext(ctx context.Context) InMemoryDBReplicaSetOutput
}

func (*InMemoryDBReplicaSet) ElementType() reflect.Type {
	return reflect.TypeOf((**InMemoryDBReplicaSet)(nil)).Elem()
}

func (i *InMemoryDBReplicaSet) ToInMemoryDBReplicaSetOutput() InMemoryDBReplicaSetOutput {
	return i.ToInMemoryDBReplicaSetOutputWithContext(context.Background())
}

func (i *InMemoryDBReplicaSet) ToInMemoryDBReplicaSetOutputWithContext(ctx context.Context) InMemoryDBReplicaSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InMemoryDBReplicaSetOutput)
}

// InMemoryDBReplicaSetArrayInput is an input type that accepts InMemoryDBReplicaSetArray and InMemoryDBReplicaSetArrayOutput values.
// You can construct a concrete instance of `InMemoryDBReplicaSetArrayInput` via:
//
//	InMemoryDBReplicaSetArray{ InMemoryDBReplicaSetArgs{...} }
type InMemoryDBReplicaSetArrayInput interface {
	pulumi.Input

	ToInMemoryDBReplicaSetArrayOutput() InMemoryDBReplicaSetArrayOutput
	ToInMemoryDBReplicaSetArrayOutputWithContext(context.Context) InMemoryDBReplicaSetArrayOutput
}

type InMemoryDBReplicaSetArray []InMemoryDBReplicaSetInput

func (InMemoryDBReplicaSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InMemoryDBReplicaSet)(nil)).Elem()
}

func (i InMemoryDBReplicaSetArray) ToInMemoryDBReplicaSetArrayOutput() InMemoryDBReplicaSetArrayOutput {
	return i.ToInMemoryDBReplicaSetArrayOutputWithContext(context.Background())
}

func (i InMemoryDBReplicaSetArray) ToInMemoryDBReplicaSetArrayOutputWithContext(ctx context.Context) InMemoryDBReplicaSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InMemoryDBReplicaSetArrayOutput)
}

// InMemoryDBReplicaSetMapInput is an input type that accepts InMemoryDBReplicaSetMap and InMemoryDBReplicaSetMapOutput values.
// You can construct a concrete instance of `InMemoryDBReplicaSetMapInput` via:
//
//	InMemoryDBReplicaSetMap{ "key": InMemoryDBReplicaSetArgs{...} }
type InMemoryDBReplicaSetMapInput interface {
	pulumi.Input

	ToInMemoryDBReplicaSetMapOutput() InMemoryDBReplicaSetMapOutput
	ToInMemoryDBReplicaSetMapOutputWithContext(context.Context) InMemoryDBReplicaSetMapOutput
}

type InMemoryDBReplicaSetMap map[string]InMemoryDBReplicaSetInput

func (InMemoryDBReplicaSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InMemoryDBReplicaSet)(nil)).Elem()
}

func (i InMemoryDBReplicaSetMap) ToInMemoryDBReplicaSetMapOutput() InMemoryDBReplicaSetMapOutput {
	return i.ToInMemoryDBReplicaSetMapOutputWithContext(context.Background())
}

func (i InMemoryDBReplicaSetMap) ToInMemoryDBReplicaSetMapOutputWithContext(ctx context.Context) InMemoryDBReplicaSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InMemoryDBReplicaSetMapOutput)
}

type InMemoryDBReplicaSetOutput struct{ *pulumi.OutputState }

func (InMemoryDBReplicaSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InMemoryDBReplicaSet)(nil)).Elem()
}

func (o InMemoryDBReplicaSetOutput) ToInMemoryDBReplicaSetOutput() InMemoryDBReplicaSetOutput {
	return o
}

func (o InMemoryDBReplicaSetOutput) ToInMemoryDBReplicaSetOutputWithContext(ctx context.Context) InMemoryDBReplicaSetOutput {
	return o
}

// The network connection for your replica set. Only one connection is allowed.
func (o InMemoryDBReplicaSetOutput) Connections() InMemoryDBReplicaSetConnectionsOutput {
	return o.ApplyT(func(v *InMemoryDBReplicaSet) InMemoryDBReplicaSetConnectionsOutput { return v.Connections }).(InMemoryDBReplicaSetConnectionsOutput)
}

// Credentials for the InMemoryDB replicaset.
func (o InMemoryDBReplicaSetOutput) Credentials() InMemoryDBReplicaSetCredentialsOutput {
	return o.ApplyT(func(v *InMemoryDBReplicaSet) InMemoryDBReplicaSetCredentialsOutput { return v.Credentials }).(InMemoryDBReplicaSetCredentialsOutput)
}

// The human readable name of your replica set.
func (o InMemoryDBReplicaSetOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *InMemoryDBReplicaSet) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The DNS name pointing to your replica set. Will be used to connect to the active/standalone instance.
func (o InMemoryDBReplicaSetOutput) DnsName() pulumi.StringOutput {
	return o.ApplyT(func(v *InMemoryDBReplicaSet) pulumi.StringOutput { return v.DnsName }).(pulumi.StringOutput)
}

// The eviction policy for the replica set.
func (o InMemoryDBReplicaSetOutput) EvictionPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *InMemoryDBReplicaSet) pulumi.StringOutput { return v.EvictionPolicy }).(pulumi.StringOutput)
}

// The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
func (o InMemoryDBReplicaSetOutput) InitialSnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InMemoryDBReplicaSet) pulumi.StringPtrOutput { return v.InitialSnapshotId }).(pulumi.StringPtrOutput)
}

// The replica set location
func (o InMemoryDBReplicaSetOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *InMemoryDBReplicaSet) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// A weekly 4 hour-long window, during which maintenance might occur.
func (o InMemoryDBReplicaSetOutput) MaintenanceWindow() InMemoryDBReplicaSetMaintenanceWindowOutput {
	return o.ApplyT(func(v *InMemoryDBReplicaSet) InMemoryDBReplicaSetMaintenanceWindowOutput { return v.MaintenanceWindow }).(InMemoryDBReplicaSetMaintenanceWindowOutput)
}

// Specifies How and If data is persisted.
func (o InMemoryDBReplicaSetOutput) PersistenceMode() pulumi.StringOutput {
	return o.ApplyT(func(v *InMemoryDBReplicaSet) pulumi.StringOutput { return v.PersistenceMode }).(pulumi.StringOutput)
}

// The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the
// value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only
// standby for a failure of the active instance.
func (o InMemoryDBReplicaSetOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v *InMemoryDBReplicaSet) pulumi.IntOutput { return v.Replicas }).(pulumi.IntOutput)
}

// The resources of the individual replicas.
func (o InMemoryDBReplicaSetOutput) Resources() InMemoryDBReplicaSetResourcesOutput {
	return o.ApplyT(func(v *InMemoryDBReplicaSet) InMemoryDBReplicaSetResourcesOutput { return v.Resources }).(InMemoryDBReplicaSetResourcesOutput)
}

// The InMemoryDB version of your replica set.
func (o InMemoryDBReplicaSetOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *InMemoryDBReplicaSet) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type InMemoryDBReplicaSetArrayOutput struct{ *pulumi.OutputState }

func (InMemoryDBReplicaSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InMemoryDBReplicaSet)(nil)).Elem()
}

func (o InMemoryDBReplicaSetArrayOutput) ToInMemoryDBReplicaSetArrayOutput() InMemoryDBReplicaSetArrayOutput {
	return o
}

func (o InMemoryDBReplicaSetArrayOutput) ToInMemoryDBReplicaSetArrayOutputWithContext(ctx context.Context) InMemoryDBReplicaSetArrayOutput {
	return o
}

func (o InMemoryDBReplicaSetArrayOutput) Index(i pulumi.IntInput) InMemoryDBReplicaSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InMemoryDBReplicaSet {
		return vs[0].([]*InMemoryDBReplicaSet)[vs[1].(int)]
	}).(InMemoryDBReplicaSetOutput)
}

type InMemoryDBReplicaSetMapOutput struct{ *pulumi.OutputState }

func (InMemoryDBReplicaSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InMemoryDBReplicaSet)(nil)).Elem()
}

func (o InMemoryDBReplicaSetMapOutput) ToInMemoryDBReplicaSetMapOutput() InMemoryDBReplicaSetMapOutput {
	return o
}

func (o InMemoryDBReplicaSetMapOutput) ToInMemoryDBReplicaSetMapOutputWithContext(ctx context.Context) InMemoryDBReplicaSetMapOutput {
	return o
}

func (o InMemoryDBReplicaSetMapOutput) MapIndex(k pulumi.StringInput) InMemoryDBReplicaSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InMemoryDBReplicaSet {
		return vs[0].(map[string]*InMemoryDBReplicaSet)[vs[1].(string)]
	}).(InMemoryDBReplicaSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InMemoryDBReplicaSetInput)(nil)).Elem(), &InMemoryDBReplicaSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*InMemoryDBReplicaSetArrayInput)(nil)).Elem(), InMemoryDBReplicaSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InMemoryDBReplicaSetMapInput)(nil)).Elem(), InMemoryDBReplicaSetMap{})
	pulumi.RegisterOutputType(InMemoryDBReplicaSetOutput{})
	pulumi.RegisterOutputType(InMemoryDBReplicaSetArrayOutput{})
	pulumi.RegisterOutputType(InMemoryDBReplicaSetMapOutput{})
}
