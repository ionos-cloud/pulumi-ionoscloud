// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbaas

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MariaDBCluster struct {
	pulumi.CustomResourceState

	// The network connection for your cluster. Only one connection is allowed.
	Connections MariaDBClusterConnectionsOutput `pulumi:"connections"`
	// The number of CPU cores per instance.
	Cores pulumi.IntOutput `pulumi:"cores"`
	// Credentials for the database user to be created.
	Credentials MariaDBClusterCredentialsOutput `pulumi:"credentials"`
	// The friendly name of your cluster.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The DNS name pointing to your cluster.
	DnsName pulumi.StringOutput `pulumi:"dnsName"`
	// The total number of instances in the cluster (one primary and n-1 secondary).
	Instances pulumi.IntOutput `pulumi:"instances"`
	// The cluster location
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// A weekly 4 hour-long window, during which maintenance might occur.
	MaintenanceWindow MariaDBClusterMaintenanceWindowOutput `pulumi:"maintenanceWindow"`
	// The MariaDB version of your cluster.
	MariadbVersion pulumi.StringOutput `pulumi:"mariadbVersion"`
	// The amount of memory per instance in gigabytes (GB).
	Ram pulumi.IntOutput `pulumi:"ram"`
	// The amount of storage per instance in gigabytes (GB).
	StorageSize pulumi.IntOutput `pulumi:"storageSize"`
}

// NewMariaDBCluster registers a new resource with the given unique name, arguments, and options.
func NewMariaDBCluster(ctx *pulumi.Context,
	name string, args *MariaDBClusterArgs, opts ...pulumi.ResourceOption) (*MariaDBCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connections == nil {
		return nil, errors.New("invalid value for required argument 'Connections'")
	}
	if args.Cores == nil {
		return nil, errors.New("invalid value for required argument 'Cores'")
	}
	if args.Credentials == nil {
		return nil, errors.New("invalid value for required argument 'Credentials'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Instances == nil {
		return nil, errors.New("invalid value for required argument 'Instances'")
	}
	if args.MariadbVersion == nil {
		return nil, errors.New("invalid value for required argument 'MariadbVersion'")
	}
	if args.Ram == nil {
		return nil, errors.New("invalid value for required argument 'Ram'")
	}
	if args.StorageSize == nil {
		return nil, errors.New("invalid value for required argument 'StorageSize'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("ionoscloud:index/mariadbCluster:MariadbCluster"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MariaDBCluster
	err := ctx.RegisterResource("ionoscloud:dbaas/mariaDBCluster:MariaDBCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMariaDBCluster gets an existing MariaDBCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMariaDBCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MariaDBClusterState, opts ...pulumi.ResourceOption) (*MariaDBCluster, error) {
	var resource MariaDBCluster
	err := ctx.ReadResource("ionoscloud:dbaas/mariaDBCluster:MariaDBCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MariaDBCluster resources.
type mariaDBClusterState struct {
	// The network connection for your cluster. Only one connection is allowed.
	Connections *MariaDBClusterConnections `pulumi:"connections"`
	// The number of CPU cores per instance.
	Cores *int `pulumi:"cores"`
	// Credentials for the database user to be created.
	Credentials *MariaDBClusterCredentials `pulumi:"credentials"`
	// The friendly name of your cluster.
	DisplayName *string `pulumi:"displayName"`
	// The DNS name pointing to your cluster.
	DnsName *string `pulumi:"dnsName"`
	// The total number of instances in the cluster (one primary and n-1 secondary).
	Instances *int `pulumi:"instances"`
	// The cluster location
	Location *string `pulumi:"location"`
	// A weekly 4 hour-long window, during which maintenance might occur.
	MaintenanceWindow *MariaDBClusterMaintenanceWindow `pulumi:"maintenanceWindow"`
	// The MariaDB version of your cluster.
	MariadbVersion *string `pulumi:"mariadbVersion"`
	// The amount of memory per instance in gigabytes (GB).
	Ram *int `pulumi:"ram"`
	// The amount of storage per instance in gigabytes (GB).
	StorageSize *int `pulumi:"storageSize"`
}

type MariaDBClusterState struct {
	// The network connection for your cluster. Only one connection is allowed.
	Connections MariaDBClusterConnectionsPtrInput
	// The number of CPU cores per instance.
	Cores pulumi.IntPtrInput
	// Credentials for the database user to be created.
	Credentials MariaDBClusterCredentialsPtrInput
	// The friendly name of your cluster.
	DisplayName pulumi.StringPtrInput
	// The DNS name pointing to your cluster.
	DnsName pulumi.StringPtrInput
	// The total number of instances in the cluster (one primary and n-1 secondary).
	Instances pulumi.IntPtrInput
	// The cluster location
	Location pulumi.StringPtrInput
	// A weekly 4 hour-long window, during which maintenance might occur.
	MaintenanceWindow MariaDBClusterMaintenanceWindowPtrInput
	// The MariaDB version of your cluster.
	MariadbVersion pulumi.StringPtrInput
	// The amount of memory per instance in gigabytes (GB).
	Ram pulumi.IntPtrInput
	// The amount of storage per instance in gigabytes (GB).
	StorageSize pulumi.IntPtrInput
}

func (MariaDBClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*mariaDBClusterState)(nil)).Elem()
}

type mariaDBClusterArgs struct {
	// The network connection for your cluster. Only one connection is allowed.
	Connections MariaDBClusterConnections `pulumi:"connections"`
	// The number of CPU cores per instance.
	Cores int `pulumi:"cores"`
	// Credentials for the database user to be created.
	Credentials MariaDBClusterCredentials `pulumi:"credentials"`
	// The friendly name of your cluster.
	DisplayName string `pulumi:"displayName"`
	// The total number of instances in the cluster (one primary and n-1 secondary).
	Instances int `pulumi:"instances"`
	// The cluster location
	Location *string `pulumi:"location"`
	// A weekly 4 hour-long window, during which maintenance might occur.
	MaintenanceWindow *MariaDBClusterMaintenanceWindow `pulumi:"maintenanceWindow"`
	// The MariaDB version of your cluster.
	MariadbVersion string `pulumi:"mariadbVersion"`
	// The amount of memory per instance in gigabytes (GB).
	Ram int `pulumi:"ram"`
	// The amount of storage per instance in gigabytes (GB).
	StorageSize int `pulumi:"storageSize"`
}

// The set of arguments for constructing a MariaDBCluster resource.
type MariaDBClusterArgs struct {
	// The network connection for your cluster. Only one connection is allowed.
	Connections MariaDBClusterConnectionsInput
	// The number of CPU cores per instance.
	Cores pulumi.IntInput
	// Credentials for the database user to be created.
	Credentials MariaDBClusterCredentialsInput
	// The friendly name of your cluster.
	DisplayName pulumi.StringInput
	// The total number of instances in the cluster (one primary and n-1 secondary).
	Instances pulumi.IntInput
	// The cluster location
	Location pulumi.StringPtrInput
	// A weekly 4 hour-long window, during which maintenance might occur.
	MaintenanceWindow MariaDBClusterMaintenanceWindowPtrInput
	// The MariaDB version of your cluster.
	MariadbVersion pulumi.StringInput
	// The amount of memory per instance in gigabytes (GB).
	Ram pulumi.IntInput
	// The amount of storage per instance in gigabytes (GB).
	StorageSize pulumi.IntInput
}

func (MariaDBClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mariaDBClusterArgs)(nil)).Elem()
}

type MariaDBClusterInput interface {
	pulumi.Input

	ToMariaDBClusterOutput() MariaDBClusterOutput
	ToMariaDBClusterOutputWithContext(ctx context.Context) MariaDBClusterOutput
}

func (*MariaDBCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**MariaDBCluster)(nil)).Elem()
}

func (i *MariaDBCluster) ToMariaDBClusterOutput() MariaDBClusterOutput {
	return i.ToMariaDBClusterOutputWithContext(context.Background())
}

func (i *MariaDBCluster) ToMariaDBClusterOutputWithContext(ctx context.Context) MariaDBClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MariaDBClusterOutput)
}

// MariaDBClusterArrayInput is an input type that accepts MariaDBClusterArray and MariaDBClusterArrayOutput values.
// You can construct a concrete instance of `MariaDBClusterArrayInput` via:
//
//	MariaDBClusterArray{ MariaDBClusterArgs{...} }
type MariaDBClusterArrayInput interface {
	pulumi.Input

	ToMariaDBClusterArrayOutput() MariaDBClusterArrayOutput
	ToMariaDBClusterArrayOutputWithContext(context.Context) MariaDBClusterArrayOutput
}

type MariaDBClusterArray []MariaDBClusterInput

func (MariaDBClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MariaDBCluster)(nil)).Elem()
}

func (i MariaDBClusterArray) ToMariaDBClusterArrayOutput() MariaDBClusterArrayOutput {
	return i.ToMariaDBClusterArrayOutputWithContext(context.Background())
}

func (i MariaDBClusterArray) ToMariaDBClusterArrayOutputWithContext(ctx context.Context) MariaDBClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MariaDBClusterArrayOutput)
}

// MariaDBClusterMapInput is an input type that accepts MariaDBClusterMap and MariaDBClusterMapOutput values.
// You can construct a concrete instance of `MariaDBClusterMapInput` via:
//
//	MariaDBClusterMap{ "key": MariaDBClusterArgs{...} }
type MariaDBClusterMapInput interface {
	pulumi.Input

	ToMariaDBClusterMapOutput() MariaDBClusterMapOutput
	ToMariaDBClusterMapOutputWithContext(context.Context) MariaDBClusterMapOutput
}

type MariaDBClusterMap map[string]MariaDBClusterInput

func (MariaDBClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MariaDBCluster)(nil)).Elem()
}

func (i MariaDBClusterMap) ToMariaDBClusterMapOutput() MariaDBClusterMapOutput {
	return i.ToMariaDBClusterMapOutputWithContext(context.Background())
}

func (i MariaDBClusterMap) ToMariaDBClusterMapOutputWithContext(ctx context.Context) MariaDBClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MariaDBClusterMapOutput)
}

type MariaDBClusterOutput struct{ *pulumi.OutputState }

func (MariaDBClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MariaDBCluster)(nil)).Elem()
}

func (o MariaDBClusterOutput) ToMariaDBClusterOutput() MariaDBClusterOutput {
	return o
}

func (o MariaDBClusterOutput) ToMariaDBClusterOutputWithContext(ctx context.Context) MariaDBClusterOutput {
	return o
}

// The network connection for your cluster. Only one connection is allowed.
func (o MariaDBClusterOutput) Connections() MariaDBClusterConnectionsOutput {
	return o.ApplyT(func(v *MariaDBCluster) MariaDBClusterConnectionsOutput { return v.Connections }).(MariaDBClusterConnectionsOutput)
}

// The number of CPU cores per instance.
func (o MariaDBClusterOutput) Cores() pulumi.IntOutput {
	return o.ApplyT(func(v *MariaDBCluster) pulumi.IntOutput { return v.Cores }).(pulumi.IntOutput)
}

// Credentials for the database user to be created.
func (o MariaDBClusterOutput) Credentials() MariaDBClusterCredentialsOutput {
	return o.ApplyT(func(v *MariaDBCluster) MariaDBClusterCredentialsOutput { return v.Credentials }).(MariaDBClusterCredentialsOutput)
}

// The friendly name of your cluster.
func (o MariaDBClusterOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *MariaDBCluster) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The DNS name pointing to your cluster.
func (o MariaDBClusterOutput) DnsName() pulumi.StringOutput {
	return o.ApplyT(func(v *MariaDBCluster) pulumi.StringOutput { return v.DnsName }).(pulumi.StringOutput)
}

// The total number of instances in the cluster (one primary and n-1 secondary).
func (o MariaDBClusterOutput) Instances() pulumi.IntOutput {
	return o.ApplyT(func(v *MariaDBCluster) pulumi.IntOutput { return v.Instances }).(pulumi.IntOutput)
}

// The cluster location
func (o MariaDBClusterOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MariaDBCluster) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// A weekly 4 hour-long window, during which maintenance might occur.
func (o MariaDBClusterOutput) MaintenanceWindow() MariaDBClusterMaintenanceWindowOutput {
	return o.ApplyT(func(v *MariaDBCluster) MariaDBClusterMaintenanceWindowOutput { return v.MaintenanceWindow }).(MariaDBClusterMaintenanceWindowOutput)
}

// The MariaDB version of your cluster.
func (o MariaDBClusterOutput) MariadbVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *MariaDBCluster) pulumi.StringOutput { return v.MariadbVersion }).(pulumi.StringOutput)
}

// The amount of memory per instance in gigabytes (GB).
func (o MariaDBClusterOutput) Ram() pulumi.IntOutput {
	return o.ApplyT(func(v *MariaDBCluster) pulumi.IntOutput { return v.Ram }).(pulumi.IntOutput)
}

// The amount of storage per instance in gigabytes (GB).
func (o MariaDBClusterOutput) StorageSize() pulumi.IntOutput {
	return o.ApplyT(func(v *MariaDBCluster) pulumi.IntOutput { return v.StorageSize }).(pulumi.IntOutput)
}

type MariaDBClusterArrayOutput struct{ *pulumi.OutputState }

func (MariaDBClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MariaDBCluster)(nil)).Elem()
}

func (o MariaDBClusterArrayOutput) ToMariaDBClusterArrayOutput() MariaDBClusterArrayOutput {
	return o
}

func (o MariaDBClusterArrayOutput) ToMariaDBClusterArrayOutputWithContext(ctx context.Context) MariaDBClusterArrayOutput {
	return o
}

func (o MariaDBClusterArrayOutput) Index(i pulumi.IntInput) MariaDBClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MariaDBCluster {
		return vs[0].([]*MariaDBCluster)[vs[1].(int)]
	}).(MariaDBClusterOutput)
}

type MariaDBClusterMapOutput struct{ *pulumi.OutputState }

func (MariaDBClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MariaDBCluster)(nil)).Elem()
}

func (o MariaDBClusterMapOutput) ToMariaDBClusterMapOutput() MariaDBClusterMapOutput {
	return o
}

func (o MariaDBClusterMapOutput) ToMariaDBClusterMapOutputWithContext(ctx context.Context) MariaDBClusterMapOutput {
	return o
}

func (o MariaDBClusterMapOutput) MapIndex(k pulumi.StringInput) MariaDBClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MariaDBCluster {
		return vs[0].(map[string]*MariaDBCluster)[vs[1].(string)]
	}).(MariaDBClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MariaDBClusterInput)(nil)).Elem(), &MariaDBCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*MariaDBClusterArrayInput)(nil)).Elem(), MariaDBClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MariaDBClusterMapInput)(nil)).Elem(), MariaDBClusterMap{})
	pulumi.RegisterOutputType(MariaDBClusterOutput{})
	pulumi.RegisterOutputType(MariaDBClusterArrayOutput{})
	pulumi.RegisterOutputType(MariaDBClusterMapOutput{})
}
