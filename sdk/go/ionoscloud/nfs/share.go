// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nfs

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates and manages Network File Storage (NFS) Share objects on IonosCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/nfs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Basic example
//			nfsDc, err := compute.NewDatacenter(ctx, "nfsDc", &compute.DatacenterArgs{
//				Location:          pulumi.String("de/txl"),
//				Description:       pulumi.String("Datacenter Description"),
//				SecAuthProtection: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			nfsLan, err := compute.NewLan(ctx, "nfsLan", &compute.LanArgs{
//				DatacenterId: nfsDc.ID(),
//				Public:       pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			exampleCluster, err := nfs.NewCluster(ctx, "exampleCluster", &nfs.ClusterArgs{
//				Location: pulumi.String("de/txl"),
//				Size:     pulumi.Int(2),
//				Nfs: &nfs.ClusterNfsArgs{
//					MinVersion: pulumi.String("4.2"),
//				},
//				Connections: &nfs.ClusterConnectionsArgs{
//					DatacenterId: nfsDc.ID(),
//					IpAddress:    pulumi.String("192.168.100.10/24"),
//					Lan:          nfsLan.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = nfs.NewShare(ctx, "exampleShare", &nfs.ShareArgs{
//				Location:  pulumi.String("de/txl"),
//				ClusterId: exampleCluster.ID(),
//				Quota:     pulumi.Int(512),
//				Gid:       pulumi.Int(512),
//				Uid:       pulumi.Int(512),
//				ClientGroups: nfs.ShareClientGroupArray{
//					&nfs.ShareClientGroupArgs{
//						Description: pulumi.String("Client Group 1"),
//						IpNetworks: pulumi.StringArray{
//							pulumi.String("10.234.50.0/24"),
//						},
//						Hosts: pulumi.StringArray{
//							pulumi.String("10.234.62.123"),
//						},
//						Nfs: &nfs.ShareClientGroupNfsArgs{
//							Squash: pulumi.String("all-anonymous"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A Network File Storage Share resource can be imported using its `location`, `cluster_id` and `resource id`:
//
// ```sh
// $ pulumi import ionoscloud:nfs/share:Share name location:cluster_id:resource_id
// ```
type Share struct {
	pulumi.CustomResourceState

	// The groups of clients are the systems connecting to the Network File Storage cluster. Each group includes:
	ClientGroups ShareClientGroupArrayOutput `pulumi:"clientGroups"`
	// The ID of the Network File Storage Cluster.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The group ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
	Gid pulumi.IntPtrOutput `pulumi:"gid"`
	// The location of the Network File Storage Cluster.
	Location pulumi.StringOutput `pulumi:"location"`
	// The directory being exported.
	Name pulumi.StringOutput `pulumi:"name"`
	// Path to the NFS export. The NFS path is the path to the directory being exported.
	NfsPath pulumi.StringOutput `pulumi:"nfsPath"`
	// The quota in MiB for the export. The quota can restrict the amount of data that can be stored within the export. The quota can be disabled using `0`. Default is `0`.
	Quota pulumi.IntPtrOutput `pulumi:"quota"`
	// The user ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
	Uid pulumi.IntPtrOutput `pulumi:"uid"`
}

// NewShare registers a new resource with the given unique name, arguments, and options.
func NewShare(ctx *pulumi.Context,
	name string, args *ShareArgs, opts ...pulumi.ResourceOption) (*Share, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClientGroups == nil {
		return nil, errors.New("invalid value for required argument 'ClientGroups'")
	}
	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Share
	err := ctx.RegisterResource("ionoscloud:nfs/share:Share", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetShare gets an existing Share resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetShare(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ShareState, opts ...pulumi.ResourceOption) (*Share, error) {
	var resource Share
	err := ctx.ReadResource("ionoscloud:nfs/share:Share", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Share resources.
type shareState struct {
	// The groups of clients are the systems connecting to the Network File Storage cluster. Each group includes:
	ClientGroups []ShareClientGroup `pulumi:"clientGroups"`
	// The ID of the Network File Storage Cluster.
	ClusterId *string `pulumi:"clusterId"`
	// The group ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
	Gid *int `pulumi:"gid"`
	// The location of the Network File Storage Cluster.
	Location *string `pulumi:"location"`
	// The directory being exported.
	Name *string `pulumi:"name"`
	// Path to the NFS export. The NFS path is the path to the directory being exported.
	NfsPath *string `pulumi:"nfsPath"`
	// The quota in MiB for the export. The quota can restrict the amount of data that can be stored within the export. The quota can be disabled using `0`. Default is `0`.
	Quota *int `pulumi:"quota"`
	// The user ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
	Uid *int `pulumi:"uid"`
}

type ShareState struct {
	// The groups of clients are the systems connecting to the Network File Storage cluster. Each group includes:
	ClientGroups ShareClientGroupArrayInput
	// The ID of the Network File Storage Cluster.
	ClusterId pulumi.StringPtrInput
	// The group ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
	Gid pulumi.IntPtrInput
	// The location of the Network File Storage Cluster.
	Location pulumi.StringPtrInput
	// The directory being exported.
	Name pulumi.StringPtrInput
	// Path to the NFS export. The NFS path is the path to the directory being exported.
	NfsPath pulumi.StringPtrInput
	// The quota in MiB for the export. The quota can restrict the amount of data that can be stored within the export. The quota can be disabled using `0`. Default is `0`.
	Quota pulumi.IntPtrInput
	// The user ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
	Uid pulumi.IntPtrInput
}

func (ShareState) ElementType() reflect.Type {
	return reflect.TypeOf((*shareState)(nil)).Elem()
}

type shareArgs struct {
	// The groups of clients are the systems connecting to the Network File Storage cluster. Each group includes:
	ClientGroups []ShareClientGroup `pulumi:"clientGroups"`
	// The ID of the Network File Storage Cluster.
	ClusterId string `pulumi:"clusterId"`
	// The group ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
	Gid *int `pulumi:"gid"`
	// The location of the Network File Storage Cluster.
	Location string `pulumi:"location"`
	// The directory being exported.
	Name *string `pulumi:"name"`
	// The quota in MiB for the export. The quota can restrict the amount of data that can be stored within the export. The quota can be disabled using `0`. Default is `0`.
	Quota *int `pulumi:"quota"`
	// The user ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
	Uid *int `pulumi:"uid"`
}

// The set of arguments for constructing a Share resource.
type ShareArgs struct {
	// The groups of clients are the systems connecting to the Network File Storage cluster. Each group includes:
	ClientGroups ShareClientGroupArrayInput
	// The ID of the Network File Storage Cluster.
	ClusterId pulumi.StringInput
	// The group ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
	Gid pulumi.IntPtrInput
	// The location of the Network File Storage Cluster.
	Location pulumi.StringInput
	// The directory being exported.
	Name pulumi.StringPtrInput
	// The quota in MiB for the export. The quota can restrict the amount of data that can be stored within the export. The quota can be disabled using `0`. Default is `0`.
	Quota pulumi.IntPtrInput
	// The user ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
	Uid pulumi.IntPtrInput
}

func (ShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*shareArgs)(nil)).Elem()
}

type ShareInput interface {
	pulumi.Input

	ToShareOutput() ShareOutput
	ToShareOutputWithContext(ctx context.Context) ShareOutput
}

func (*Share) ElementType() reflect.Type {
	return reflect.TypeOf((**Share)(nil)).Elem()
}

func (i *Share) ToShareOutput() ShareOutput {
	return i.ToShareOutputWithContext(context.Background())
}

func (i *Share) ToShareOutputWithContext(ctx context.Context) ShareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareOutput)
}

// ShareArrayInput is an input type that accepts ShareArray and ShareArrayOutput values.
// You can construct a concrete instance of `ShareArrayInput` via:
//
//	ShareArray{ ShareArgs{...} }
type ShareArrayInput interface {
	pulumi.Input

	ToShareArrayOutput() ShareArrayOutput
	ToShareArrayOutputWithContext(context.Context) ShareArrayOutput
}

type ShareArray []ShareInput

func (ShareArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Share)(nil)).Elem()
}

func (i ShareArray) ToShareArrayOutput() ShareArrayOutput {
	return i.ToShareArrayOutputWithContext(context.Background())
}

func (i ShareArray) ToShareArrayOutputWithContext(ctx context.Context) ShareArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareArrayOutput)
}

// ShareMapInput is an input type that accepts ShareMap and ShareMapOutput values.
// You can construct a concrete instance of `ShareMapInput` via:
//
//	ShareMap{ "key": ShareArgs{...} }
type ShareMapInput interface {
	pulumi.Input

	ToShareMapOutput() ShareMapOutput
	ToShareMapOutputWithContext(context.Context) ShareMapOutput
}

type ShareMap map[string]ShareInput

func (ShareMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Share)(nil)).Elem()
}

func (i ShareMap) ToShareMapOutput() ShareMapOutput {
	return i.ToShareMapOutputWithContext(context.Background())
}

func (i ShareMap) ToShareMapOutputWithContext(ctx context.Context) ShareMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareMapOutput)
}

type ShareOutput struct{ *pulumi.OutputState }

func (ShareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Share)(nil)).Elem()
}

func (o ShareOutput) ToShareOutput() ShareOutput {
	return o
}

func (o ShareOutput) ToShareOutputWithContext(ctx context.Context) ShareOutput {
	return o
}

// The groups of clients are the systems connecting to the Network File Storage cluster. Each group includes:
func (o ShareOutput) ClientGroups() ShareClientGroupArrayOutput {
	return o.ApplyT(func(v *Share) ShareClientGroupArrayOutput { return v.ClientGroups }).(ShareClientGroupArrayOutput)
}

// The ID of the Network File Storage Cluster.
func (o ShareOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Share) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The group ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
func (o ShareOutput) Gid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Share) pulumi.IntPtrOutput { return v.Gid }).(pulumi.IntPtrOutput)
}

// The location of the Network File Storage Cluster.
func (o ShareOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Share) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The directory being exported.
func (o ShareOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Share) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Path to the NFS export. The NFS path is the path to the directory being exported.
func (o ShareOutput) NfsPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Share) pulumi.StringOutput { return v.NfsPath }).(pulumi.StringOutput)
}

// The quota in MiB for the export. The quota can restrict the amount of data that can be stored within the export. The quota can be disabled using `0`. Default is `0`.
func (o ShareOutput) Quota() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Share) pulumi.IntPtrOutput { return v.Quota }).(pulumi.IntPtrOutput)
}

// The user ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
func (o ShareOutput) Uid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Share) pulumi.IntPtrOutput { return v.Uid }).(pulumi.IntPtrOutput)
}

type ShareArrayOutput struct{ *pulumi.OutputState }

func (ShareArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Share)(nil)).Elem()
}

func (o ShareArrayOutput) ToShareArrayOutput() ShareArrayOutput {
	return o
}

func (o ShareArrayOutput) ToShareArrayOutputWithContext(ctx context.Context) ShareArrayOutput {
	return o
}

func (o ShareArrayOutput) Index(i pulumi.IntInput) ShareOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Share {
		return vs[0].([]*Share)[vs[1].(int)]
	}).(ShareOutput)
}

type ShareMapOutput struct{ *pulumi.OutputState }

func (ShareMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Share)(nil)).Elem()
}

func (o ShareMapOutput) ToShareMapOutput() ShareMapOutput {
	return o
}

func (o ShareMapOutput) ToShareMapOutputWithContext(ctx context.Context) ShareMapOutput {
	return o
}

func (o ShareMapOutput) MapIndex(k pulumi.StringInput) ShareOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Share {
		return vs[0].(map[string]*Share)[vs[1].(string)]
	}).(ShareOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ShareInput)(nil)).Elem(), &Share{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShareArrayInput)(nil)).Elem(), ShareArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShareMapInput)(nil)).Elem(), ShareMap{})
	pulumi.RegisterOutputType(ShareOutput{})
	pulumi.RegisterOutputType(ShareArrayOutput{})
	pulumi.RegisterOutputType(ShareMapOutput{})
}
