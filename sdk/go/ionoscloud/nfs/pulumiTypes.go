// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nfs

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ClusterConnections struct {
	// The ID of the datacenter where the Network File Storage cluster is located.
	DatacenterId string `pulumi:"datacenterId"`
	// The IP address and prefix of the Network File Storage cluster. The IP address can be either IPv4 or IPv6. The IP address has to be given with CIDR notation.
	IpAddress string `pulumi:"ipAddress"`
	// The Private LAN to which the Network File Storage cluster must be connected.
	// ---
	// > **⚠ NOTE:** `IONOS_API_URL_NFS` can be used to set a custom API URL for the resource. `location` field needs to be empty, otherwise it will override the custom API URL. Setting `token` or `IONOS_API_URL` does not have any effect.
	Lan string `pulumi:"lan"`
}

// ClusterConnectionsInput is an input type that accepts ClusterConnectionsArgs and ClusterConnectionsOutput values.
// You can construct a concrete instance of `ClusterConnectionsInput` via:
//
//	ClusterConnectionsArgs{...}
type ClusterConnectionsInput interface {
	pulumi.Input

	ToClusterConnectionsOutput() ClusterConnectionsOutput
	ToClusterConnectionsOutputWithContext(context.Context) ClusterConnectionsOutput
}

type ClusterConnectionsArgs struct {
	// The ID of the datacenter where the Network File Storage cluster is located.
	DatacenterId pulumi.StringInput `pulumi:"datacenterId"`
	// The IP address and prefix of the Network File Storage cluster. The IP address can be either IPv4 or IPv6. The IP address has to be given with CIDR notation.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The Private LAN to which the Network File Storage cluster must be connected.
	// ---
	// > **⚠ NOTE:** `IONOS_API_URL_NFS` can be used to set a custom API URL for the resource. `location` field needs to be empty, otherwise it will override the custom API URL. Setting `token` or `IONOS_API_URL` does not have any effect.
	Lan pulumi.StringInput `pulumi:"lan"`
}

func (ClusterConnectionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConnections)(nil)).Elem()
}

func (i ClusterConnectionsArgs) ToClusterConnectionsOutput() ClusterConnectionsOutput {
	return i.ToClusterConnectionsOutputWithContext(context.Background())
}

func (i ClusterConnectionsArgs) ToClusterConnectionsOutputWithContext(ctx context.Context) ClusterConnectionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConnectionsOutput)
}

func (i ClusterConnectionsArgs) ToClusterConnectionsPtrOutput() ClusterConnectionsPtrOutput {
	return i.ToClusterConnectionsPtrOutputWithContext(context.Background())
}

func (i ClusterConnectionsArgs) ToClusterConnectionsPtrOutputWithContext(ctx context.Context) ClusterConnectionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConnectionsOutput).ToClusterConnectionsPtrOutputWithContext(ctx)
}

// ClusterConnectionsPtrInput is an input type that accepts ClusterConnectionsArgs, ClusterConnectionsPtr and ClusterConnectionsPtrOutput values.
// You can construct a concrete instance of `ClusterConnectionsPtrInput` via:
//
//	        ClusterConnectionsArgs{...}
//
//	or:
//
//	        nil
type ClusterConnectionsPtrInput interface {
	pulumi.Input

	ToClusterConnectionsPtrOutput() ClusterConnectionsPtrOutput
	ToClusterConnectionsPtrOutputWithContext(context.Context) ClusterConnectionsPtrOutput
}

type clusterConnectionsPtrType ClusterConnectionsArgs

func ClusterConnectionsPtr(v *ClusterConnectionsArgs) ClusterConnectionsPtrInput {
	return (*clusterConnectionsPtrType)(v)
}

func (*clusterConnectionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterConnections)(nil)).Elem()
}

func (i *clusterConnectionsPtrType) ToClusterConnectionsPtrOutput() ClusterConnectionsPtrOutput {
	return i.ToClusterConnectionsPtrOutputWithContext(context.Background())
}

func (i *clusterConnectionsPtrType) ToClusterConnectionsPtrOutputWithContext(ctx context.Context) ClusterConnectionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConnectionsPtrOutput)
}

type ClusterConnectionsOutput struct{ *pulumi.OutputState }

func (ClusterConnectionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConnections)(nil)).Elem()
}

func (o ClusterConnectionsOutput) ToClusterConnectionsOutput() ClusterConnectionsOutput {
	return o
}

func (o ClusterConnectionsOutput) ToClusterConnectionsOutputWithContext(ctx context.Context) ClusterConnectionsOutput {
	return o
}

func (o ClusterConnectionsOutput) ToClusterConnectionsPtrOutput() ClusterConnectionsPtrOutput {
	return o.ToClusterConnectionsPtrOutputWithContext(context.Background())
}

func (o ClusterConnectionsOutput) ToClusterConnectionsPtrOutputWithContext(ctx context.Context) ClusterConnectionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterConnections) *ClusterConnections {
		return &v
	}).(ClusterConnectionsPtrOutput)
}

// The ID of the datacenter where the Network File Storage cluster is located.
func (o ClusterConnectionsOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterConnections) string { return v.DatacenterId }).(pulumi.StringOutput)
}

// The IP address and prefix of the Network File Storage cluster. The IP address can be either IPv4 or IPv6. The IP address has to be given with CIDR notation.
func (o ClusterConnectionsOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterConnections) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The Private LAN to which the Network File Storage cluster must be connected.
// ---
// > **⚠ NOTE:** `IONOS_API_URL_NFS` can be used to set a custom API URL for the resource. `location` field needs to be empty, otherwise it will override the custom API URL. Setting `token` or `IONOS_API_URL` does not have any effect.
func (o ClusterConnectionsOutput) Lan() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterConnections) string { return v.Lan }).(pulumi.StringOutput)
}

type ClusterConnectionsPtrOutput struct{ *pulumi.OutputState }

func (ClusterConnectionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterConnections)(nil)).Elem()
}

func (o ClusterConnectionsPtrOutput) ToClusterConnectionsPtrOutput() ClusterConnectionsPtrOutput {
	return o
}

func (o ClusterConnectionsPtrOutput) ToClusterConnectionsPtrOutputWithContext(ctx context.Context) ClusterConnectionsPtrOutput {
	return o
}

func (o ClusterConnectionsPtrOutput) Elem() ClusterConnectionsOutput {
	return o.ApplyT(func(v *ClusterConnections) ClusterConnections {
		if v != nil {
			return *v
		}
		var ret ClusterConnections
		return ret
	}).(ClusterConnectionsOutput)
}

// The ID of the datacenter where the Network File Storage cluster is located.
func (o ClusterConnectionsPtrOutput) DatacenterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterConnections) *string {
		if v == nil {
			return nil
		}
		return &v.DatacenterId
	}).(pulumi.StringPtrOutput)
}

// The IP address and prefix of the Network File Storage cluster. The IP address can be either IPv4 or IPv6. The IP address has to be given with CIDR notation.
func (o ClusterConnectionsPtrOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterConnections) *string {
		if v == nil {
			return nil
		}
		return &v.IpAddress
	}).(pulumi.StringPtrOutput)
}

// The Private LAN to which the Network File Storage cluster must be connected.
// ---
// > **⚠ NOTE:** `IONOS_API_URL_NFS` can be used to set a custom API URL for the resource. `location` field needs to be empty, otherwise it will override the custom API URL. Setting `token` or `IONOS_API_URL` does not have any effect.
func (o ClusterConnectionsPtrOutput) Lan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterConnections) *string {
		if v == nil {
			return nil
		}
		return &v.Lan
	}).(pulumi.StringPtrOutput)
}

type ClusterNfs struct {
	// The minimum supported version of the NFS cluster. Supported values: `4.2`. Default is `4.2`.
	MinVersion *string `pulumi:"minVersion"`
}

// ClusterNfsInput is an input type that accepts ClusterNfsArgs and ClusterNfsOutput values.
// You can construct a concrete instance of `ClusterNfsInput` via:
//
//	ClusterNfsArgs{...}
type ClusterNfsInput interface {
	pulumi.Input

	ToClusterNfsOutput() ClusterNfsOutput
	ToClusterNfsOutputWithContext(context.Context) ClusterNfsOutput
}

type ClusterNfsArgs struct {
	// The minimum supported version of the NFS cluster. Supported values: `4.2`. Default is `4.2`.
	MinVersion pulumi.StringPtrInput `pulumi:"minVersion"`
}

func (ClusterNfsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNfs)(nil)).Elem()
}

func (i ClusterNfsArgs) ToClusterNfsOutput() ClusterNfsOutput {
	return i.ToClusterNfsOutputWithContext(context.Background())
}

func (i ClusterNfsArgs) ToClusterNfsOutputWithContext(ctx context.Context) ClusterNfsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNfsOutput)
}

func (i ClusterNfsArgs) ToClusterNfsPtrOutput() ClusterNfsPtrOutput {
	return i.ToClusterNfsPtrOutputWithContext(context.Background())
}

func (i ClusterNfsArgs) ToClusterNfsPtrOutputWithContext(ctx context.Context) ClusterNfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNfsOutput).ToClusterNfsPtrOutputWithContext(ctx)
}

// ClusterNfsPtrInput is an input type that accepts ClusterNfsArgs, ClusterNfsPtr and ClusterNfsPtrOutput values.
// You can construct a concrete instance of `ClusterNfsPtrInput` via:
//
//	        ClusterNfsArgs{...}
//
//	or:
//
//	        nil
type ClusterNfsPtrInput interface {
	pulumi.Input

	ToClusterNfsPtrOutput() ClusterNfsPtrOutput
	ToClusterNfsPtrOutputWithContext(context.Context) ClusterNfsPtrOutput
}

type clusterNfsPtrType ClusterNfsArgs

func ClusterNfsPtr(v *ClusterNfsArgs) ClusterNfsPtrInput {
	return (*clusterNfsPtrType)(v)
}

func (*clusterNfsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterNfs)(nil)).Elem()
}

func (i *clusterNfsPtrType) ToClusterNfsPtrOutput() ClusterNfsPtrOutput {
	return i.ToClusterNfsPtrOutputWithContext(context.Background())
}

func (i *clusterNfsPtrType) ToClusterNfsPtrOutputWithContext(ctx context.Context) ClusterNfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNfsPtrOutput)
}

type ClusterNfsOutput struct{ *pulumi.OutputState }

func (ClusterNfsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNfs)(nil)).Elem()
}

func (o ClusterNfsOutput) ToClusterNfsOutput() ClusterNfsOutput {
	return o
}

func (o ClusterNfsOutput) ToClusterNfsOutputWithContext(ctx context.Context) ClusterNfsOutput {
	return o
}

func (o ClusterNfsOutput) ToClusterNfsPtrOutput() ClusterNfsPtrOutput {
	return o.ToClusterNfsPtrOutputWithContext(context.Background())
}

func (o ClusterNfsOutput) ToClusterNfsPtrOutputWithContext(ctx context.Context) ClusterNfsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterNfs) *ClusterNfs {
		return &v
	}).(ClusterNfsPtrOutput)
}

// The minimum supported version of the NFS cluster. Supported values: `4.2`. Default is `4.2`.
func (o ClusterNfsOutput) MinVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterNfs) *string { return v.MinVersion }).(pulumi.StringPtrOutput)
}

type ClusterNfsPtrOutput struct{ *pulumi.OutputState }

func (ClusterNfsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterNfs)(nil)).Elem()
}

func (o ClusterNfsPtrOutput) ToClusterNfsPtrOutput() ClusterNfsPtrOutput {
	return o
}

func (o ClusterNfsPtrOutput) ToClusterNfsPtrOutputWithContext(ctx context.Context) ClusterNfsPtrOutput {
	return o
}

func (o ClusterNfsPtrOutput) Elem() ClusterNfsOutput {
	return o.ApplyT(func(v *ClusterNfs) ClusterNfs {
		if v != nil {
			return *v
		}
		var ret ClusterNfs
		return ret
	}).(ClusterNfsOutput)
}

// The minimum supported version of the NFS cluster. Supported values: `4.2`. Default is `4.2`.
func (o ClusterNfsPtrOutput) MinVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterNfs) *string {
		if v == nil {
			return nil
		}
		return v.MinVersion
	}).(pulumi.StringPtrOutput)
}

type ShareClientGroup struct {
	// Optional description for the clients groups.
	Description *string `pulumi:"description"`
	// A singular host allowed to connect to the share. The host can be specified as IP address and can be either IPv4 or IPv6.
	Hosts []string `pulumi:"hosts"`
	// The allowed host or network to which the export is being shared. The IP address can be either IPv4 or IPv6 and has to be given with CIDR notation.
	IpNetworks []string `pulumi:"ipNetworks"`
	// NFS specific configurations. Each configuration includes:
	Nfs *ShareClientGroupNfs `pulumi:"nfs"`
}

// ShareClientGroupInput is an input type that accepts ShareClientGroupArgs and ShareClientGroupOutput values.
// You can construct a concrete instance of `ShareClientGroupInput` via:
//
//	ShareClientGroupArgs{...}
type ShareClientGroupInput interface {
	pulumi.Input

	ToShareClientGroupOutput() ShareClientGroupOutput
	ToShareClientGroupOutputWithContext(context.Context) ShareClientGroupOutput
}

type ShareClientGroupArgs struct {
	// Optional description for the clients groups.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// A singular host allowed to connect to the share. The host can be specified as IP address and can be either IPv4 or IPv6.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// The allowed host or network to which the export is being shared. The IP address can be either IPv4 or IPv6 and has to be given with CIDR notation.
	IpNetworks pulumi.StringArrayInput `pulumi:"ipNetworks"`
	// NFS specific configurations. Each configuration includes:
	Nfs ShareClientGroupNfsPtrInput `pulumi:"nfs"`
}

func (ShareClientGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShareClientGroup)(nil)).Elem()
}

func (i ShareClientGroupArgs) ToShareClientGroupOutput() ShareClientGroupOutput {
	return i.ToShareClientGroupOutputWithContext(context.Background())
}

func (i ShareClientGroupArgs) ToShareClientGroupOutputWithContext(ctx context.Context) ShareClientGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareClientGroupOutput)
}

// ShareClientGroupArrayInput is an input type that accepts ShareClientGroupArray and ShareClientGroupArrayOutput values.
// You can construct a concrete instance of `ShareClientGroupArrayInput` via:
//
//	ShareClientGroupArray{ ShareClientGroupArgs{...} }
type ShareClientGroupArrayInput interface {
	pulumi.Input

	ToShareClientGroupArrayOutput() ShareClientGroupArrayOutput
	ToShareClientGroupArrayOutputWithContext(context.Context) ShareClientGroupArrayOutput
}

type ShareClientGroupArray []ShareClientGroupInput

func (ShareClientGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ShareClientGroup)(nil)).Elem()
}

func (i ShareClientGroupArray) ToShareClientGroupArrayOutput() ShareClientGroupArrayOutput {
	return i.ToShareClientGroupArrayOutputWithContext(context.Background())
}

func (i ShareClientGroupArray) ToShareClientGroupArrayOutputWithContext(ctx context.Context) ShareClientGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareClientGroupArrayOutput)
}

type ShareClientGroupOutput struct{ *pulumi.OutputState }

func (ShareClientGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShareClientGroup)(nil)).Elem()
}

func (o ShareClientGroupOutput) ToShareClientGroupOutput() ShareClientGroupOutput {
	return o
}

func (o ShareClientGroupOutput) ToShareClientGroupOutputWithContext(ctx context.Context) ShareClientGroupOutput {
	return o
}

// Optional description for the clients groups.
func (o ShareClientGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShareClientGroup) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// A singular host allowed to connect to the share. The host can be specified as IP address and can be either IPv4 or IPv6.
func (o ShareClientGroupOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ShareClientGroup) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// The allowed host or network to which the export is being shared. The IP address can be either IPv4 or IPv6 and has to be given with CIDR notation.
func (o ShareClientGroupOutput) IpNetworks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ShareClientGroup) []string { return v.IpNetworks }).(pulumi.StringArrayOutput)
}

// NFS specific configurations. Each configuration includes:
func (o ShareClientGroupOutput) Nfs() ShareClientGroupNfsPtrOutput {
	return o.ApplyT(func(v ShareClientGroup) *ShareClientGroupNfs { return v.Nfs }).(ShareClientGroupNfsPtrOutput)
}

type ShareClientGroupArrayOutput struct{ *pulumi.OutputState }

func (ShareClientGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ShareClientGroup)(nil)).Elem()
}

func (o ShareClientGroupArrayOutput) ToShareClientGroupArrayOutput() ShareClientGroupArrayOutput {
	return o
}

func (o ShareClientGroupArrayOutput) ToShareClientGroupArrayOutputWithContext(ctx context.Context) ShareClientGroupArrayOutput {
	return o
}

func (o ShareClientGroupArrayOutput) Index(i pulumi.IntInput) ShareClientGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ShareClientGroup {
		return vs[0].([]ShareClientGroup)[vs[1].(int)]
	}).(ShareClientGroupOutput)
}

type ShareClientGroupNfs struct {
	// The squash mode for the export. The squash mode can be:
	Squash *string `pulumi:"squash"`
}

// ShareClientGroupNfsInput is an input type that accepts ShareClientGroupNfsArgs and ShareClientGroupNfsOutput values.
// You can construct a concrete instance of `ShareClientGroupNfsInput` via:
//
//	ShareClientGroupNfsArgs{...}
type ShareClientGroupNfsInput interface {
	pulumi.Input

	ToShareClientGroupNfsOutput() ShareClientGroupNfsOutput
	ToShareClientGroupNfsOutputWithContext(context.Context) ShareClientGroupNfsOutput
}

type ShareClientGroupNfsArgs struct {
	// The squash mode for the export. The squash mode can be:
	Squash pulumi.StringPtrInput `pulumi:"squash"`
}

func (ShareClientGroupNfsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShareClientGroupNfs)(nil)).Elem()
}

func (i ShareClientGroupNfsArgs) ToShareClientGroupNfsOutput() ShareClientGroupNfsOutput {
	return i.ToShareClientGroupNfsOutputWithContext(context.Background())
}

func (i ShareClientGroupNfsArgs) ToShareClientGroupNfsOutputWithContext(ctx context.Context) ShareClientGroupNfsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareClientGroupNfsOutput)
}

func (i ShareClientGroupNfsArgs) ToShareClientGroupNfsPtrOutput() ShareClientGroupNfsPtrOutput {
	return i.ToShareClientGroupNfsPtrOutputWithContext(context.Background())
}

func (i ShareClientGroupNfsArgs) ToShareClientGroupNfsPtrOutputWithContext(ctx context.Context) ShareClientGroupNfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareClientGroupNfsOutput).ToShareClientGroupNfsPtrOutputWithContext(ctx)
}

// ShareClientGroupNfsPtrInput is an input type that accepts ShareClientGroupNfsArgs, ShareClientGroupNfsPtr and ShareClientGroupNfsPtrOutput values.
// You can construct a concrete instance of `ShareClientGroupNfsPtrInput` via:
//
//	        ShareClientGroupNfsArgs{...}
//
//	or:
//
//	        nil
type ShareClientGroupNfsPtrInput interface {
	pulumi.Input

	ToShareClientGroupNfsPtrOutput() ShareClientGroupNfsPtrOutput
	ToShareClientGroupNfsPtrOutputWithContext(context.Context) ShareClientGroupNfsPtrOutput
}

type shareClientGroupNfsPtrType ShareClientGroupNfsArgs

func ShareClientGroupNfsPtr(v *ShareClientGroupNfsArgs) ShareClientGroupNfsPtrInput {
	return (*shareClientGroupNfsPtrType)(v)
}

func (*shareClientGroupNfsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ShareClientGroupNfs)(nil)).Elem()
}

func (i *shareClientGroupNfsPtrType) ToShareClientGroupNfsPtrOutput() ShareClientGroupNfsPtrOutput {
	return i.ToShareClientGroupNfsPtrOutputWithContext(context.Background())
}

func (i *shareClientGroupNfsPtrType) ToShareClientGroupNfsPtrOutputWithContext(ctx context.Context) ShareClientGroupNfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareClientGroupNfsPtrOutput)
}

type ShareClientGroupNfsOutput struct{ *pulumi.OutputState }

func (ShareClientGroupNfsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShareClientGroupNfs)(nil)).Elem()
}

func (o ShareClientGroupNfsOutput) ToShareClientGroupNfsOutput() ShareClientGroupNfsOutput {
	return o
}

func (o ShareClientGroupNfsOutput) ToShareClientGroupNfsOutputWithContext(ctx context.Context) ShareClientGroupNfsOutput {
	return o
}

func (o ShareClientGroupNfsOutput) ToShareClientGroupNfsPtrOutput() ShareClientGroupNfsPtrOutput {
	return o.ToShareClientGroupNfsPtrOutputWithContext(context.Background())
}

func (o ShareClientGroupNfsOutput) ToShareClientGroupNfsPtrOutputWithContext(ctx context.Context) ShareClientGroupNfsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ShareClientGroupNfs) *ShareClientGroupNfs {
		return &v
	}).(ShareClientGroupNfsPtrOutput)
}

// The squash mode for the export. The squash mode can be:
func (o ShareClientGroupNfsOutput) Squash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShareClientGroupNfs) *string { return v.Squash }).(pulumi.StringPtrOutput)
}

type ShareClientGroupNfsPtrOutput struct{ *pulumi.OutputState }

func (ShareClientGroupNfsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShareClientGroupNfs)(nil)).Elem()
}

func (o ShareClientGroupNfsPtrOutput) ToShareClientGroupNfsPtrOutput() ShareClientGroupNfsPtrOutput {
	return o
}

func (o ShareClientGroupNfsPtrOutput) ToShareClientGroupNfsPtrOutputWithContext(ctx context.Context) ShareClientGroupNfsPtrOutput {
	return o
}

func (o ShareClientGroupNfsPtrOutput) Elem() ShareClientGroupNfsOutput {
	return o.ApplyT(func(v *ShareClientGroupNfs) ShareClientGroupNfs {
		if v != nil {
			return *v
		}
		var ret ShareClientGroupNfs
		return ret
	}).(ShareClientGroupNfsOutput)
}

// The squash mode for the export. The squash mode can be:
func (o ShareClientGroupNfsPtrOutput) Squash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShareClientGroupNfs) *string {
		if v == nil {
			return nil
		}
		return v.Squash
	}).(pulumi.StringPtrOutput)
}

type GetClusterConnection struct {
	// The ID of the datacenter where the Network File Storage cluster is located.
	DatacenterId string `pulumi:"datacenterId"`
	// The IP address and prefix of the Network File Storage cluster. The IP address can be either IPv4 or IPv6. The IP address has to be given with CIDR notation.
	IpAddress string `pulumi:"ipAddress"`
	// The Private LAN to which the Network File Storage cluster must be connected.
	Lan string `pulumi:"lan"`
}

// GetClusterConnectionInput is an input type that accepts GetClusterConnectionArgs and GetClusterConnectionOutput values.
// You can construct a concrete instance of `GetClusterConnectionInput` via:
//
//	GetClusterConnectionArgs{...}
type GetClusterConnectionInput interface {
	pulumi.Input

	ToGetClusterConnectionOutput() GetClusterConnectionOutput
	ToGetClusterConnectionOutputWithContext(context.Context) GetClusterConnectionOutput
}

type GetClusterConnectionArgs struct {
	// The ID of the datacenter where the Network File Storage cluster is located.
	DatacenterId pulumi.StringInput `pulumi:"datacenterId"`
	// The IP address and prefix of the Network File Storage cluster. The IP address can be either IPv4 or IPv6. The IP address has to be given with CIDR notation.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The Private LAN to which the Network File Storage cluster must be connected.
	Lan pulumi.StringInput `pulumi:"lan"`
}

func (GetClusterConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterConnection)(nil)).Elem()
}

func (i GetClusterConnectionArgs) ToGetClusterConnectionOutput() GetClusterConnectionOutput {
	return i.ToGetClusterConnectionOutputWithContext(context.Background())
}

func (i GetClusterConnectionArgs) ToGetClusterConnectionOutputWithContext(ctx context.Context) GetClusterConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterConnectionOutput)
}

// GetClusterConnectionArrayInput is an input type that accepts GetClusterConnectionArray and GetClusterConnectionArrayOutput values.
// You can construct a concrete instance of `GetClusterConnectionArrayInput` via:
//
//	GetClusterConnectionArray{ GetClusterConnectionArgs{...} }
type GetClusterConnectionArrayInput interface {
	pulumi.Input

	ToGetClusterConnectionArrayOutput() GetClusterConnectionArrayOutput
	ToGetClusterConnectionArrayOutputWithContext(context.Context) GetClusterConnectionArrayOutput
}

type GetClusterConnectionArray []GetClusterConnectionInput

func (GetClusterConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterConnection)(nil)).Elem()
}

func (i GetClusterConnectionArray) ToGetClusterConnectionArrayOutput() GetClusterConnectionArrayOutput {
	return i.ToGetClusterConnectionArrayOutputWithContext(context.Background())
}

func (i GetClusterConnectionArray) ToGetClusterConnectionArrayOutputWithContext(ctx context.Context) GetClusterConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterConnectionArrayOutput)
}

type GetClusterConnectionOutput struct{ *pulumi.OutputState }

func (GetClusterConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterConnection)(nil)).Elem()
}

func (o GetClusterConnectionOutput) ToGetClusterConnectionOutput() GetClusterConnectionOutput {
	return o
}

func (o GetClusterConnectionOutput) ToGetClusterConnectionOutputWithContext(ctx context.Context) GetClusterConnectionOutput {
	return o
}

// The ID of the datacenter where the Network File Storage cluster is located.
func (o GetClusterConnectionOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterConnection) string { return v.DatacenterId }).(pulumi.StringOutput)
}

// The IP address and prefix of the Network File Storage cluster. The IP address can be either IPv4 or IPv6. The IP address has to be given with CIDR notation.
func (o GetClusterConnectionOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterConnection) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The Private LAN to which the Network File Storage cluster must be connected.
func (o GetClusterConnectionOutput) Lan() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterConnection) string { return v.Lan }).(pulumi.StringOutput)
}

type GetClusterConnectionArrayOutput struct{ *pulumi.OutputState }

func (GetClusterConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterConnection)(nil)).Elem()
}

func (o GetClusterConnectionArrayOutput) ToGetClusterConnectionArrayOutput() GetClusterConnectionArrayOutput {
	return o
}

func (o GetClusterConnectionArrayOutput) ToGetClusterConnectionArrayOutputWithContext(ctx context.Context) GetClusterConnectionArrayOutput {
	return o
}

func (o GetClusterConnectionArrayOutput) Index(i pulumi.IntInput) GetClusterConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterConnection {
		return vs[0].([]GetClusterConnection)[vs[1].(int)]
	}).(GetClusterConnectionOutput)
}

type GetClusterNf struct {
	// The minimum supported version of the NFS cluster. Default is `4.2`
	MinVersion string `pulumi:"minVersion"`
}

// GetClusterNfInput is an input type that accepts GetClusterNfArgs and GetClusterNfOutput values.
// You can construct a concrete instance of `GetClusterNfInput` via:
//
//	GetClusterNfArgs{...}
type GetClusterNfInput interface {
	pulumi.Input

	ToGetClusterNfOutput() GetClusterNfOutput
	ToGetClusterNfOutputWithContext(context.Context) GetClusterNfOutput
}

type GetClusterNfArgs struct {
	// The minimum supported version of the NFS cluster. Default is `4.2`
	MinVersion pulumi.StringInput `pulumi:"minVersion"`
}

func (GetClusterNfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterNf)(nil)).Elem()
}

func (i GetClusterNfArgs) ToGetClusterNfOutput() GetClusterNfOutput {
	return i.ToGetClusterNfOutputWithContext(context.Background())
}

func (i GetClusterNfArgs) ToGetClusterNfOutputWithContext(ctx context.Context) GetClusterNfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterNfOutput)
}

// GetClusterNfArrayInput is an input type that accepts GetClusterNfArray and GetClusterNfArrayOutput values.
// You can construct a concrete instance of `GetClusterNfArrayInput` via:
//
//	GetClusterNfArray{ GetClusterNfArgs{...} }
type GetClusterNfArrayInput interface {
	pulumi.Input

	ToGetClusterNfArrayOutput() GetClusterNfArrayOutput
	ToGetClusterNfArrayOutputWithContext(context.Context) GetClusterNfArrayOutput
}

type GetClusterNfArray []GetClusterNfInput

func (GetClusterNfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterNf)(nil)).Elem()
}

func (i GetClusterNfArray) ToGetClusterNfArrayOutput() GetClusterNfArrayOutput {
	return i.ToGetClusterNfArrayOutputWithContext(context.Background())
}

func (i GetClusterNfArray) ToGetClusterNfArrayOutputWithContext(ctx context.Context) GetClusterNfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterNfArrayOutput)
}

type GetClusterNfOutput struct{ *pulumi.OutputState }

func (GetClusterNfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterNf)(nil)).Elem()
}

func (o GetClusterNfOutput) ToGetClusterNfOutput() GetClusterNfOutput {
	return o
}

func (o GetClusterNfOutput) ToGetClusterNfOutputWithContext(ctx context.Context) GetClusterNfOutput {
	return o
}

// The minimum supported version of the NFS cluster. Default is `4.2`
func (o GetClusterNfOutput) MinVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterNf) string { return v.MinVersion }).(pulumi.StringOutput)
}

type GetClusterNfArrayOutput struct{ *pulumi.OutputState }

func (GetClusterNfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterNf)(nil)).Elem()
}

func (o GetClusterNfArrayOutput) ToGetClusterNfArrayOutput() GetClusterNfArrayOutput {
	return o
}

func (o GetClusterNfArrayOutput) ToGetClusterNfArrayOutputWithContext(ctx context.Context) GetClusterNfArrayOutput {
	return o
}

func (o GetClusterNfArrayOutput) Index(i pulumi.IntInput) GetClusterNfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterNf {
		return vs[0].([]GetClusterNf)[vs[1].(int)]
	}).(GetClusterNfOutput)
}

type GetShareClientGroup struct {
	// Optional description for the clients groups.
	Description string `pulumi:"description"`
	// A singular host allowed to connect to the share. The host can be specified as IP address and can be either IPv4 or IPv6.
	Hosts []string `pulumi:"hosts"`
	// The allowed host or network to which the export is being shared. The IP address can be either IPv4 or IPv6 and has to be given with CIDR notation.
	IpNetworks []string `pulumi:"ipNetworks"`
	// The NFS configuration for the client group. Each NFS configuration supports the following:
	Nfs []GetShareClientGroupNf `pulumi:"nfs"`
}

// GetShareClientGroupInput is an input type that accepts GetShareClientGroupArgs and GetShareClientGroupOutput values.
// You can construct a concrete instance of `GetShareClientGroupInput` via:
//
//	GetShareClientGroupArgs{...}
type GetShareClientGroupInput interface {
	pulumi.Input

	ToGetShareClientGroupOutput() GetShareClientGroupOutput
	ToGetShareClientGroupOutputWithContext(context.Context) GetShareClientGroupOutput
}

type GetShareClientGroupArgs struct {
	// Optional description for the clients groups.
	Description pulumi.StringInput `pulumi:"description"`
	// A singular host allowed to connect to the share. The host can be specified as IP address and can be either IPv4 or IPv6.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// The allowed host or network to which the export is being shared. The IP address can be either IPv4 or IPv6 and has to be given with CIDR notation.
	IpNetworks pulumi.StringArrayInput `pulumi:"ipNetworks"`
	// The NFS configuration for the client group. Each NFS configuration supports the following:
	Nfs GetShareClientGroupNfArrayInput `pulumi:"nfs"`
}

func (GetShareClientGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetShareClientGroup)(nil)).Elem()
}

func (i GetShareClientGroupArgs) ToGetShareClientGroupOutput() GetShareClientGroupOutput {
	return i.ToGetShareClientGroupOutputWithContext(context.Background())
}

func (i GetShareClientGroupArgs) ToGetShareClientGroupOutputWithContext(ctx context.Context) GetShareClientGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetShareClientGroupOutput)
}

// GetShareClientGroupArrayInput is an input type that accepts GetShareClientGroupArray and GetShareClientGroupArrayOutput values.
// You can construct a concrete instance of `GetShareClientGroupArrayInput` via:
//
//	GetShareClientGroupArray{ GetShareClientGroupArgs{...} }
type GetShareClientGroupArrayInput interface {
	pulumi.Input

	ToGetShareClientGroupArrayOutput() GetShareClientGroupArrayOutput
	ToGetShareClientGroupArrayOutputWithContext(context.Context) GetShareClientGroupArrayOutput
}

type GetShareClientGroupArray []GetShareClientGroupInput

func (GetShareClientGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetShareClientGroup)(nil)).Elem()
}

func (i GetShareClientGroupArray) ToGetShareClientGroupArrayOutput() GetShareClientGroupArrayOutput {
	return i.ToGetShareClientGroupArrayOutputWithContext(context.Background())
}

func (i GetShareClientGroupArray) ToGetShareClientGroupArrayOutputWithContext(ctx context.Context) GetShareClientGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetShareClientGroupArrayOutput)
}

type GetShareClientGroupOutput struct{ *pulumi.OutputState }

func (GetShareClientGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetShareClientGroup)(nil)).Elem()
}

func (o GetShareClientGroupOutput) ToGetShareClientGroupOutput() GetShareClientGroupOutput {
	return o
}

func (o GetShareClientGroupOutput) ToGetShareClientGroupOutputWithContext(ctx context.Context) GetShareClientGroupOutput {
	return o
}

// Optional description for the clients groups.
func (o GetShareClientGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetShareClientGroup) string { return v.Description }).(pulumi.StringOutput)
}

// A singular host allowed to connect to the share. The host can be specified as IP address and can be either IPv4 or IPv6.
func (o GetShareClientGroupOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetShareClientGroup) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// The allowed host or network to which the export is being shared. The IP address can be either IPv4 or IPv6 and has to be given with CIDR notation.
func (o GetShareClientGroupOutput) IpNetworks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetShareClientGroup) []string { return v.IpNetworks }).(pulumi.StringArrayOutput)
}

// The NFS configuration for the client group. Each NFS configuration supports the following:
func (o GetShareClientGroupOutput) Nfs() GetShareClientGroupNfArrayOutput {
	return o.ApplyT(func(v GetShareClientGroup) []GetShareClientGroupNf { return v.Nfs }).(GetShareClientGroupNfArrayOutput)
}

type GetShareClientGroupArrayOutput struct{ *pulumi.OutputState }

func (GetShareClientGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetShareClientGroup)(nil)).Elem()
}

func (o GetShareClientGroupArrayOutput) ToGetShareClientGroupArrayOutput() GetShareClientGroupArrayOutput {
	return o
}

func (o GetShareClientGroupArrayOutput) ToGetShareClientGroupArrayOutputWithContext(ctx context.Context) GetShareClientGroupArrayOutput {
	return o
}

func (o GetShareClientGroupArrayOutput) Index(i pulumi.IntInput) GetShareClientGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetShareClientGroup {
		return vs[0].([]GetShareClientGroup)[vs[1].(int)]
	}).(GetShareClientGroupOutput)
}

type GetShareClientGroupNf struct {
	// The squash mode for the export. The squash mode can be: none - No squash mode. no mapping, root-anonymous - Map root user to anonymous uid, all-anonymous - Map all users to anonymous uid.
	Squash string `pulumi:"squash"`
}

// GetShareClientGroupNfInput is an input type that accepts GetShareClientGroupNfArgs and GetShareClientGroupNfOutput values.
// You can construct a concrete instance of `GetShareClientGroupNfInput` via:
//
//	GetShareClientGroupNfArgs{...}
type GetShareClientGroupNfInput interface {
	pulumi.Input

	ToGetShareClientGroupNfOutput() GetShareClientGroupNfOutput
	ToGetShareClientGroupNfOutputWithContext(context.Context) GetShareClientGroupNfOutput
}

type GetShareClientGroupNfArgs struct {
	// The squash mode for the export. The squash mode can be: none - No squash mode. no mapping, root-anonymous - Map root user to anonymous uid, all-anonymous - Map all users to anonymous uid.
	Squash pulumi.StringInput `pulumi:"squash"`
}

func (GetShareClientGroupNfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetShareClientGroupNf)(nil)).Elem()
}

func (i GetShareClientGroupNfArgs) ToGetShareClientGroupNfOutput() GetShareClientGroupNfOutput {
	return i.ToGetShareClientGroupNfOutputWithContext(context.Background())
}

func (i GetShareClientGroupNfArgs) ToGetShareClientGroupNfOutputWithContext(ctx context.Context) GetShareClientGroupNfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetShareClientGroupNfOutput)
}

// GetShareClientGroupNfArrayInput is an input type that accepts GetShareClientGroupNfArray and GetShareClientGroupNfArrayOutput values.
// You can construct a concrete instance of `GetShareClientGroupNfArrayInput` via:
//
//	GetShareClientGroupNfArray{ GetShareClientGroupNfArgs{...} }
type GetShareClientGroupNfArrayInput interface {
	pulumi.Input

	ToGetShareClientGroupNfArrayOutput() GetShareClientGroupNfArrayOutput
	ToGetShareClientGroupNfArrayOutputWithContext(context.Context) GetShareClientGroupNfArrayOutput
}

type GetShareClientGroupNfArray []GetShareClientGroupNfInput

func (GetShareClientGroupNfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetShareClientGroupNf)(nil)).Elem()
}

func (i GetShareClientGroupNfArray) ToGetShareClientGroupNfArrayOutput() GetShareClientGroupNfArrayOutput {
	return i.ToGetShareClientGroupNfArrayOutputWithContext(context.Background())
}

func (i GetShareClientGroupNfArray) ToGetShareClientGroupNfArrayOutputWithContext(ctx context.Context) GetShareClientGroupNfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetShareClientGroupNfArrayOutput)
}

type GetShareClientGroupNfOutput struct{ *pulumi.OutputState }

func (GetShareClientGroupNfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetShareClientGroupNf)(nil)).Elem()
}

func (o GetShareClientGroupNfOutput) ToGetShareClientGroupNfOutput() GetShareClientGroupNfOutput {
	return o
}

func (o GetShareClientGroupNfOutput) ToGetShareClientGroupNfOutputWithContext(ctx context.Context) GetShareClientGroupNfOutput {
	return o
}

// The squash mode for the export. The squash mode can be: none - No squash mode. no mapping, root-anonymous - Map root user to anonymous uid, all-anonymous - Map all users to anonymous uid.
func (o GetShareClientGroupNfOutput) Squash() pulumi.StringOutput {
	return o.ApplyT(func(v GetShareClientGroupNf) string { return v.Squash }).(pulumi.StringOutput)
}

type GetShareClientGroupNfArrayOutput struct{ *pulumi.OutputState }

func (GetShareClientGroupNfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetShareClientGroupNf)(nil)).Elem()
}

func (o GetShareClientGroupNfArrayOutput) ToGetShareClientGroupNfArrayOutput() GetShareClientGroupNfArrayOutput {
	return o
}

func (o GetShareClientGroupNfArrayOutput) ToGetShareClientGroupNfArrayOutputWithContext(ctx context.Context) GetShareClientGroupNfArrayOutput {
	return o
}

func (o GetShareClientGroupNfArrayOutput) Index(i pulumi.IntInput) GetShareClientGroupNfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetShareClientGroupNf {
		return vs[0].([]GetShareClientGroupNf)[vs[1].(int)]
	}).(GetShareClientGroupNfOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterConnectionsInput)(nil)).Elem(), ClusterConnectionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterConnectionsPtrInput)(nil)).Elem(), ClusterConnectionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterNfsInput)(nil)).Elem(), ClusterNfsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterNfsPtrInput)(nil)).Elem(), ClusterNfsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShareClientGroupInput)(nil)).Elem(), ShareClientGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShareClientGroupArrayInput)(nil)).Elem(), ShareClientGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShareClientGroupNfsInput)(nil)).Elem(), ShareClientGroupNfsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShareClientGroupNfsPtrInput)(nil)).Elem(), ShareClientGroupNfsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterConnectionInput)(nil)).Elem(), GetClusterConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterConnectionArrayInput)(nil)).Elem(), GetClusterConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterNfInput)(nil)).Elem(), GetClusterNfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterNfArrayInput)(nil)).Elem(), GetClusterNfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetShareClientGroupInput)(nil)).Elem(), GetShareClientGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetShareClientGroupArrayInput)(nil)).Elem(), GetShareClientGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetShareClientGroupNfInput)(nil)).Elem(), GetShareClientGroupNfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetShareClientGroupNfArrayInput)(nil)).Elem(), GetShareClientGroupNfArray{})
	pulumi.RegisterOutputType(ClusterConnectionsOutput{})
	pulumi.RegisterOutputType(ClusterConnectionsPtrOutput{})
	pulumi.RegisterOutputType(ClusterNfsOutput{})
	pulumi.RegisterOutputType(ClusterNfsPtrOutput{})
	pulumi.RegisterOutputType(ShareClientGroupOutput{})
	pulumi.RegisterOutputType(ShareClientGroupArrayOutput{})
	pulumi.RegisterOutputType(ShareClientGroupNfsOutput{})
	pulumi.RegisterOutputType(ShareClientGroupNfsPtrOutput{})
	pulumi.RegisterOutputType(GetClusterConnectionOutput{})
	pulumi.RegisterOutputType(GetClusterConnectionArrayOutput{})
	pulumi.RegisterOutputType(GetClusterNfOutput{})
	pulumi.RegisterOutputType(GetClusterNfArrayOutput{})
	pulumi.RegisterOutputType(GetShareClientGroupOutput{})
	pulumi.RegisterOutputType(GetShareClientGroupArrayOutput{})
	pulumi.RegisterOutputType(GetShareClientGroupNfOutput{})
	pulumi.RegisterOutputType(GetShareClientGroupNfArrayOutput{})
}
