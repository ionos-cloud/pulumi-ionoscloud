// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nfs

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create clusters of Network File Storage (NFS) on IonosCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/nfs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Basic example
//			nfsDc, err := compute.NewDatacenter(ctx, "nfs_dc", &compute.DatacenterArgs{
//				Name:              pulumi.String("NFS Datacenter"),
//				Location:          pulumi.String("de/txl"),
//				Description:       pulumi.String("Datacenter Description"),
//				SecAuthProtection: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			nfsLan, err := compute.NewLan(ctx, "nfs_lan", &compute.LanArgs{
//				DatacenterId: nfsDc.ID(),
//				Public:       pulumi.Bool(false),
//				Name:         pulumi.String("Lan for NFS"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = nfs.NewCluster(ctx, "example", &nfs.ClusterArgs{
//				Name:     pulumi.String("test"),
//				Location: pulumi.String("de/txl"),
//				Size:     pulumi.Int(2),
//				Nfs: &nfs.ClusterNfsArgs{
//					MinVersion: pulumi.String("4.2"),
//				},
//				Connections: &nfs.ClusterConnectionsArgs{
//					DatacenterId: nfsDc.ID(),
//					IpAddress:    pulumi.String("192.168.100.10/24"),
//					Lan:          nfsLan.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/nfs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Complete example
//			nfsDc, err := compute.NewDatacenter(ctx, "nfs_dc", &compute.DatacenterArgs{
//				Name:              pulumi.String("NFS Datacenter"),
//				Location:          pulumi.String("de/txl"),
//				Description:       pulumi.String("Datacenter Description"),
//				SecAuthProtection: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			nfsLan, err := compute.NewLan(ctx, "nfs_lan", &compute.LanArgs{
//				DatacenterId: nfsDc.ID(),
//				Public:       pulumi.Bool(false),
//				Name:         pulumi.String("Lan for NFS"),
//			})
//			if err != nil {
//				return err
//			}
//			hDDImage, err := compute.GetImage(ctx, &compute.GetImageArgs{
//				ImageAlias: pulumi.StringRef("ubuntu:20.04"),
//				Type:       pulumi.StringRef("HDD"),
//				CloudInit:  pulumi.StringRef("V1"),
//				Location:   pulumi.StringRef("de/txl"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// needed for the NIC - which provides the IP address for the NFS cluster.
//			_, err = compute.NewServer(ctx, "nfs_server", &compute.ServerArgs{
//				Name:             pulumi.String("Server for NFS"),
//				DatacenterId:     nfsDc.ID(),
//				Cores:            pulumi.Int(1),
//				Ram:              pulumi.Int(2048),
//				AvailabilityZone: pulumi.String("ZONE_1"),
//				CpuFamily:        pulumi.String("INTEL_SKYLAKE"),
//				ImageName:        pulumi.String(hDDImage.Id),
//				ImagePassword:    pulumi.String("your_password_here"),
//				Volume: &compute.ServerVolumeArgs{
//					Name:     pulumi.String("system"),
//					Size:     pulumi.Int(14),
//					DiskType: pulumi.String("SSD"),
//				},
//				Nic: &compute.ServerNicArgs{
//					Name:           pulumi.String("NIC A"),
//					Lan:            nfsLan.ID(),
//					Dhcp:           pulumi.Bool(true),
//					FirewallActive: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = nfs.NewCluster(ctx, "example", &nfs.ClusterArgs{
//				Name:     pulumi.String("test"),
//				Location: pulumi.String("de/txl"),
//				Size:     pulumi.Int(2),
//				Nfs: &nfs.ClusterNfsArgs{
//					MinVersion: pulumi.String("4.2"),
//				},
//				Connections: &nfs.ClusterConnectionsArgs{
//					DatacenterId: nfsDc.ID(),
//					IpAddress:    pulumi.String("nfs_cluster_cidr_from_nic"),
//					Lan:          nfsLan.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A Network File Storage Cluster resource can be imported using its `location` and `resource id`:
//
// ```sh
// $ pulumi import ionoscloud:nfs/cluster:Cluster name location:uuid
// ```
type Cluster struct {
	pulumi.CustomResourceState

	// The network connections for the Network File Storage Cluster.
	Connections ClusterConnectionsOutput `pulumi:"connections"`
	// The location where the Network File Storage cluster is located. If this is not set and if no value is provided for the `IONOS_API_URL` env var, the default `location` will be: `de/fra`.
	// - `de/fra` - Frankfurt
	// - `de/txl` - Berlin
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The name of the Network File Storage cluster.
	Name pulumi.StringOutput `pulumi:"name"`
	Nfs  ClusterNfsPtrOutput `pulumi:"nfs"`
	// The size of the Network File Storage cluster in TiB. Note that the cluster size cannot be reduced after provisioning. This value determines the billing fees. Default is `2`. The minimum value is `2` and the maximum value is `42`.
	Size pulumi.IntOutput `pulumi:"size"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connections == nil {
		return nil, errors.New("invalid value for required argument 'Connections'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("ionoscloud:nfs/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("ionoscloud:nfs/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// The network connections for the Network File Storage Cluster.
	Connections *ClusterConnections `pulumi:"connections"`
	// The location where the Network File Storage cluster is located. If this is not set and if no value is provided for the `IONOS_API_URL` env var, the default `location` will be: `de/fra`.
	// - `de/fra` - Frankfurt
	// - `de/txl` - Berlin
	Location *string `pulumi:"location"`
	// The name of the Network File Storage cluster.
	Name *string     `pulumi:"name"`
	Nfs  *ClusterNfs `pulumi:"nfs"`
	// The size of the Network File Storage cluster in TiB. Note that the cluster size cannot be reduced after provisioning. This value determines the billing fees. Default is `2`. The minimum value is `2` and the maximum value is `42`.
	Size *int `pulumi:"size"`
}

type ClusterState struct {
	// The network connections for the Network File Storage Cluster.
	Connections ClusterConnectionsPtrInput
	// The location where the Network File Storage cluster is located. If this is not set and if no value is provided for the `IONOS_API_URL` env var, the default `location` will be: `de/fra`.
	// - `de/fra` - Frankfurt
	// - `de/txl` - Berlin
	Location pulumi.StringPtrInput
	// The name of the Network File Storage cluster.
	Name pulumi.StringPtrInput
	Nfs  ClusterNfsPtrInput
	// The size of the Network File Storage cluster in TiB. Note that the cluster size cannot be reduced after provisioning. This value determines the billing fees. Default is `2`. The minimum value is `2` and the maximum value is `42`.
	Size pulumi.IntPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// The network connections for the Network File Storage Cluster.
	Connections ClusterConnections `pulumi:"connections"`
	// The location where the Network File Storage cluster is located. If this is not set and if no value is provided for the `IONOS_API_URL` env var, the default `location` will be: `de/fra`.
	// - `de/fra` - Frankfurt
	// - `de/txl` - Berlin
	Location *string `pulumi:"location"`
	// The name of the Network File Storage cluster.
	Name *string     `pulumi:"name"`
	Nfs  *ClusterNfs `pulumi:"nfs"`
	// The size of the Network File Storage cluster in TiB. Note that the cluster size cannot be reduced after provisioning. This value determines the billing fees. Default is `2`. The minimum value is `2` and the maximum value is `42`.
	Size int `pulumi:"size"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// The network connections for the Network File Storage Cluster.
	Connections ClusterConnectionsInput
	// The location where the Network File Storage cluster is located. If this is not set and if no value is provided for the `IONOS_API_URL` env var, the default `location` will be: `de/fra`.
	// - `de/fra` - Frankfurt
	// - `de/txl` - Berlin
	Location pulumi.StringPtrInput
	// The name of the Network File Storage cluster.
	Name pulumi.StringPtrInput
	Nfs  ClusterNfsPtrInput
	// The size of the Network File Storage cluster in TiB. Note that the cluster size cannot be reduced after provisioning. This value determines the billing fees. Default is `2`. The minimum value is `2` and the maximum value is `42`.
	Size pulumi.IntInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// The network connections for the Network File Storage Cluster.
func (o ClusterOutput) Connections() ClusterConnectionsOutput {
	return o.ApplyT(func(v *Cluster) ClusterConnectionsOutput { return v.Connections }).(ClusterConnectionsOutput)
}

// The location where the Network File Storage cluster is located. If this is not set and if no value is provided for the `IONOS_API_URL` env var, the default `location` will be: `de/fra`.
// - `de/fra` - Frankfurt
// - `de/txl` - Berlin
func (o ClusterOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the Network File Storage cluster.
func (o ClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ClusterOutput) Nfs() ClusterNfsPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterNfsPtrOutput { return v.Nfs }).(ClusterNfsPtrOutput)
}

// The size of the Network File Storage cluster in TiB. Note that the cluster size cannot be reduced after provisioning. This value determines the billing fees. Default is `2`. The minimum value is `2` and the maximum value is `42`.
func (o ClusterOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
