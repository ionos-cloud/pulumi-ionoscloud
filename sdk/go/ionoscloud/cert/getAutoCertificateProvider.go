// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cert

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **CM Provider data source** can be used to search for and return an existing certificate manager provider.
// You can provide a string for either id or name parameters which will be compared with provisioned providers.
// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
// When this happens, please refine your search string so that it is specific enough to return only one result.
//
// ## Example Usage
//
// ### By ID
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/cert"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cert.LookupAutoCertificateProvider(ctx, &cert.LookupAutoCertificateProviderArgs{
//				Id:       pulumi.StringRef("provider_id"),
//				Location: pulumi.StringRef("provider_location"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### By Name
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/cert"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cert.LookupAutoCertificateProvider(ctx, &cert.LookupAutoCertificateProviderArgs{
//				Name:     pulumi.StringRef("Provider Name Example"),
//				Location: pulumi.StringRef("provider_location"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAutoCertificateProvider(ctx *pulumi.Context, args *LookupAutoCertificateProviderArgs, opts ...pulumi.InvokeOption) (*LookupAutoCertificateProviderResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAutoCertificateProviderResult
	err := ctx.Invoke("ionoscloud:cert/getAutoCertificateProvider:getAutoCertificateProvider", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAutoCertificateProvider.
type LookupAutoCertificateProviderArgs struct {
	// [string] ID of the provider you want to search for.
	//
	// Either `name` or `id` must be provided. If none, or both are provided, the datasource will return an error.
	Id *string `pulumi:"id"`
	// [string] The location of the provider.
	Location *string `pulumi:"location"`
	// [string] Name of an existing provider that you want to search for.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getAutoCertificateProvider.
type LookupAutoCertificateProviderResult struct {
	// [string] The email address of the certificate requester.
	Email string `pulumi:"email"`
	// [list]
	ExternalAccountBindings []GetAutoCertificateProviderExternalAccountBinding `pulumi:"externalAccountBindings"`
	Id                      string                                             `pulumi:"id"`
	Location                *string                                            `pulumi:"location"`
	Name                    string                                             `pulumi:"name"`
	// [string] The URL of the certificate provider.
	Server string `pulumi:"server"`
}

func LookupAutoCertificateProviderOutput(ctx *pulumi.Context, args LookupAutoCertificateProviderOutputArgs, opts ...pulumi.InvokeOption) LookupAutoCertificateProviderResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAutoCertificateProviderResultOutput, error) {
			args := v.(LookupAutoCertificateProviderArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ionoscloud:cert/getAutoCertificateProvider:getAutoCertificateProvider", args, LookupAutoCertificateProviderResultOutput{}, options).(LookupAutoCertificateProviderResultOutput), nil
		}).(LookupAutoCertificateProviderResultOutput)
}

// A collection of arguments for invoking getAutoCertificateProvider.
type LookupAutoCertificateProviderOutputArgs struct {
	// [string] ID of the provider you want to search for.
	//
	// Either `name` or `id` must be provided. If none, or both are provided, the datasource will return an error.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// [string] The location of the provider.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// [string] Name of an existing provider that you want to search for.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupAutoCertificateProviderOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAutoCertificateProviderArgs)(nil)).Elem()
}

// A collection of values returned by getAutoCertificateProvider.
type LookupAutoCertificateProviderResultOutput struct{ *pulumi.OutputState }

func (LookupAutoCertificateProviderResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAutoCertificateProviderResult)(nil)).Elem()
}

func (o LookupAutoCertificateProviderResultOutput) ToLookupAutoCertificateProviderResultOutput() LookupAutoCertificateProviderResultOutput {
	return o
}

func (o LookupAutoCertificateProviderResultOutput) ToLookupAutoCertificateProviderResultOutputWithContext(ctx context.Context) LookupAutoCertificateProviderResultOutput {
	return o
}

// [string] The email address of the certificate requester.
func (o LookupAutoCertificateProviderResultOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAutoCertificateProviderResult) string { return v.Email }).(pulumi.StringOutput)
}

// [list]
func (o LookupAutoCertificateProviderResultOutput) ExternalAccountBindings() GetAutoCertificateProviderExternalAccountBindingArrayOutput {
	return o.ApplyT(func(v LookupAutoCertificateProviderResult) []GetAutoCertificateProviderExternalAccountBinding {
		return v.ExternalAccountBindings
	}).(GetAutoCertificateProviderExternalAccountBindingArrayOutput)
}

func (o LookupAutoCertificateProviderResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAutoCertificateProviderResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupAutoCertificateProviderResultOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAutoCertificateProviderResult) *string { return v.Location }).(pulumi.StringPtrOutput)
}

func (o LookupAutoCertificateProviderResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAutoCertificateProviderResult) string { return v.Name }).(pulumi.StringOutput)
}

// [string] The URL of the certificate provider.
func (o LookupAutoCertificateProviderResultOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAutoCertificateProviderResult) string { return v.Server }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAutoCertificateProviderResultOutput{})
}
