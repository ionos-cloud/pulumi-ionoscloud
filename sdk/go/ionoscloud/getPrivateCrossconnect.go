// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **Cross Connect data source** can be used to search for and return existing cross connects.
// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
// When this happens, please refine your search string so that it is specific enough to return only one result.
//
// ## Example Usage
//
// ### By Name
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ionoscloud.LookupPrivateCrossconnect(ctx, &ionoscloud.LookupPrivateCrossconnectArgs{
//				Name: pulumi.StringRef("Cross Connect Example"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupPrivateCrossconnect(ctx *pulumi.Context, args *LookupPrivateCrossconnectArgs, opts ...pulumi.InvokeOption) (*LookupPrivateCrossconnectResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPrivateCrossconnectResult
	err := ctx.Invoke("ionoscloud:index/getPrivateCrossconnect:getPrivateCrossconnect", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPrivateCrossconnect.
type LookupPrivateCrossconnectArgs struct {
	// Description of cross connect
	Description *string `pulumi:"description"`
	// ID of the cross connect you want to search for.
	//
	// Either `name` or `id` must be provided. If none, or both are provided, the datasource will return an error.
	Id *string `pulumi:"id"`
	// Name of an existing cross connect that you want to search for.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getPrivateCrossconnect.
type LookupPrivateCrossconnectResult struct {
	// Lists datacenters that can be joined to this cross connect
	ConnectableDatacenters []GetPrivateCrossconnectConnectableDatacenter `pulumi:"connectableDatacenters"`
	// Description of cross connect
	Description *string `pulumi:"description"`
	// The UUID of the connectable datacenter
	Id *string `pulumi:"id"`
	// The name of the connectable datacenter
	Name *string `pulumi:"name"`
	// Lists LAN's joined to this cross connect
	Peers []GetPrivateCrossconnectPeer `pulumi:"peers"`
}

func LookupPrivateCrossconnectOutput(ctx *pulumi.Context, args LookupPrivateCrossconnectOutputArgs, opts ...pulumi.InvokeOption) LookupPrivateCrossconnectResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPrivateCrossconnectResultOutput, error) {
			args := v.(LookupPrivateCrossconnectArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupPrivateCrossconnectResult
			secret, err := ctx.InvokePackageRaw("ionoscloud:index/getPrivateCrossconnect:getPrivateCrossconnect", args, &rv, "", opts...)
			if err != nil {
				return LookupPrivateCrossconnectResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupPrivateCrossconnectResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupPrivateCrossconnectResultOutput), nil
			}
			return output, nil
		}).(LookupPrivateCrossconnectResultOutput)
}

// A collection of arguments for invoking getPrivateCrossconnect.
type LookupPrivateCrossconnectOutputArgs struct {
	// Description of cross connect
	Description pulumi.StringPtrInput `pulumi:"description"`
	// ID of the cross connect you want to search for.
	//
	// Either `name` or `id` must be provided. If none, or both are provided, the datasource will return an error.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of an existing cross connect that you want to search for.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupPrivateCrossconnectOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPrivateCrossconnectArgs)(nil)).Elem()
}

// A collection of values returned by getPrivateCrossconnect.
type LookupPrivateCrossconnectResultOutput struct{ *pulumi.OutputState }

func (LookupPrivateCrossconnectResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPrivateCrossconnectResult)(nil)).Elem()
}

func (o LookupPrivateCrossconnectResultOutput) ToLookupPrivateCrossconnectResultOutput() LookupPrivateCrossconnectResultOutput {
	return o
}

func (o LookupPrivateCrossconnectResultOutput) ToLookupPrivateCrossconnectResultOutputWithContext(ctx context.Context) LookupPrivateCrossconnectResultOutput {
	return o
}

// Lists datacenters that can be joined to this cross connect
func (o LookupPrivateCrossconnectResultOutput) ConnectableDatacenters() GetPrivateCrossconnectConnectableDatacenterArrayOutput {
	return o.ApplyT(func(v LookupPrivateCrossconnectResult) []GetPrivateCrossconnectConnectableDatacenter {
		return v.ConnectableDatacenters
	}).(GetPrivateCrossconnectConnectableDatacenterArrayOutput)
}

// Description of cross connect
func (o LookupPrivateCrossconnectResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPrivateCrossconnectResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The UUID of the connectable datacenter
func (o LookupPrivateCrossconnectResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPrivateCrossconnectResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the connectable datacenter
func (o LookupPrivateCrossconnectResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPrivateCrossconnectResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Lists LAN's joined to this cross connect
func (o LookupPrivateCrossconnectResultOutput) Peers() GetPrivateCrossconnectPeerArrayOutput {
	return o.ApplyT(func(v LookupPrivateCrossconnectResult) []GetPrivateCrossconnectPeer { return v.Peers }).(GetPrivateCrossconnectPeerArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPrivateCrossconnectResultOutput{})
}
