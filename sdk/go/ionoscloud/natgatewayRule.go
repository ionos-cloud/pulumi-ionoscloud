// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a **Nat Gateway Rule** on IonosCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleDatacenter, err := compute.NewDatacenter(ctx, "exampleDatacenter", &compute.DatacenterArgs{
//				Location:          pulumi.String("us/las"),
//				Description:       pulumi.String("Datacenter Description"),
//				SecAuthProtection: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			exampleIPBlock, err := compute.NewIPBlock(ctx, "exampleIPBlock", &compute.IPBlockArgs{
//				Location: pulumi.String("us/las"),
//				Size:     pulumi.Int(2),
//			})
//			if err != nil {
//				return err
//			}
//			exampleLan, err := compute.NewLan(ctx, "exampleLan", &compute.LanArgs{
//				DatacenterId: exampleDatacenter.ID(),
//				Public:       pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			exampleNatgateway, err := ionoscloud.NewNatgateway(ctx, "exampleNatgateway", &ionoscloud.NatgatewayArgs{
//				DatacenterId: exampleDatacenter.ID(),
//				PublicIps: pulumi.StringArray{
//					exampleIPBlock.Ips.ApplyT(func(ips []string) (string, error) {
//						return ips[0], nil
//					}).(pulumi.StringOutput),
//					exampleIPBlock.Ips.ApplyT(func(ips []string) (string, error) {
//						return ips[1], nil
//					}).(pulumi.StringOutput),
//				},
//				Lans: ionoscloud.NatgatewayLanArray{
//					&ionoscloud.NatgatewayLanArgs{
//						Id: exampleLan.ID(),
//						GatewayIps: pulumi.StringArray{
//							pulumi.String("10.11.2.5"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ionoscloud.NewNatgatewayRule(ctx, "exampleNatgatewayRule", &ionoscloud.NatgatewayRuleArgs{
//				DatacenterId: exampleDatacenter.ID(),
//				NatgatewayId: exampleNatgateway.ID(),
//				Type:         pulumi.String("SNAT"),
//				Protocol:     pulumi.String("TCP"),
//				SourceSubnet: pulumi.String("10.0.1.0/24"),
//				PublicIp: exampleIPBlock.Ips.ApplyT(func(ips []string) (string, error) {
//					return ips[0], nil
//				}).(pulumi.StringOutput),
//				TargetSubnet: pulumi.String("10.0.1.0/24"),
//				TargetPortRange: &ionoscloud.NatgatewayRuleTargetPortRangeArgs{
//					Start: pulumi.Int(500),
//					End:   pulumi.Int(1000),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A Nat Gateway Rule resource can be imported using its `resource id`, the `datacenter id` and the `natgateway id , e.g.
//
// ```sh
// $ pulumi import ionoscloud:index/natgatewayRule:NatgatewayRule my_natgateway_rule {datacenter uuid}/{nat gateway uuid}/{nat gateway rule uuid}
// ```
type NatgatewayRule struct {
	pulumi.CustomResourceState

	// [string] A Datacenter's UUID.
	DatacenterId pulumi.StringOutput `pulumi:"datacenterId"`
	// [string] Name of the NAT gateway rule.
	Name pulumi.StringOutput `pulumi:"name"`
	// [string] Nat Gateway's UUID.
	NatgatewayId pulumi.StringOutput `pulumi:"natgatewayId"`
	// [string] Protocol of the NAT gateway rule. Defaults to ALL. If protocol is 'ICMP' then targetPortRange start and end cannot be set.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// [string] Public IP address of the NAT gateway rule. Specifies the address used for masking outgoing packets source address field. Should be one of the customer reserved IP address already configured on the NAT gateway resource.
	PublicIp pulumi.StringOutput `pulumi:"publicIp"`
	// [string] Source subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on the packets source IP address.
	SourceSubnet pulumi.StringOutput `pulumi:"sourceSubnet"`
	// Target port range of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on destination port. If none is provided, rule will match any port.
	TargetPortRange NatgatewayRuleTargetPortRangeOutput `pulumi:"targetPortRange"`
	// [string] Target or destination subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on the packets destination IP address. If none is provided, rule will match any address.
	TargetSubnet pulumi.StringOutput `pulumi:"targetSubnet"`
	// [string] Type of the NAT gateway rule.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNatgatewayRule registers a new resource with the given unique name, arguments, and options.
func NewNatgatewayRule(ctx *pulumi.Context,
	name string, args *NatgatewayRuleArgs, opts ...pulumi.ResourceOption) (*NatgatewayRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatacenterId == nil {
		return nil, errors.New("invalid value for required argument 'DatacenterId'")
	}
	if args.NatgatewayId == nil {
		return nil, errors.New("invalid value for required argument 'NatgatewayId'")
	}
	if args.PublicIp == nil {
		return nil, errors.New("invalid value for required argument 'PublicIp'")
	}
	if args.SourceSubnet == nil {
		return nil, errors.New("invalid value for required argument 'SourceSubnet'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NatgatewayRule
	err := ctx.RegisterResource("ionoscloud:index/natgatewayRule:NatgatewayRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNatgatewayRule gets an existing NatgatewayRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNatgatewayRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NatgatewayRuleState, opts ...pulumi.ResourceOption) (*NatgatewayRule, error) {
	var resource NatgatewayRule
	err := ctx.ReadResource("ionoscloud:index/natgatewayRule:NatgatewayRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NatgatewayRule resources.
type natgatewayRuleState struct {
	// [string] A Datacenter's UUID.
	DatacenterId *string `pulumi:"datacenterId"`
	// [string] Name of the NAT gateway rule.
	Name *string `pulumi:"name"`
	// [string] Nat Gateway's UUID.
	NatgatewayId *string `pulumi:"natgatewayId"`
	// [string] Protocol of the NAT gateway rule. Defaults to ALL. If protocol is 'ICMP' then targetPortRange start and end cannot be set.
	Protocol *string `pulumi:"protocol"`
	// [string] Public IP address of the NAT gateway rule. Specifies the address used for masking outgoing packets source address field. Should be one of the customer reserved IP address already configured on the NAT gateway resource.
	PublicIp *string `pulumi:"publicIp"`
	// [string] Source subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on the packets source IP address.
	SourceSubnet *string `pulumi:"sourceSubnet"`
	// Target port range of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on destination port. If none is provided, rule will match any port.
	TargetPortRange *NatgatewayRuleTargetPortRange `pulumi:"targetPortRange"`
	// [string] Target or destination subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on the packets destination IP address. If none is provided, rule will match any address.
	TargetSubnet *string `pulumi:"targetSubnet"`
	// [string] Type of the NAT gateway rule.
	Type *string `pulumi:"type"`
}

type NatgatewayRuleState struct {
	// [string] A Datacenter's UUID.
	DatacenterId pulumi.StringPtrInput
	// [string] Name of the NAT gateway rule.
	Name pulumi.StringPtrInput
	// [string] Nat Gateway's UUID.
	NatgatewayId pulumi.StringPtrInput
	// [string] Protocol of the NAT gateway rule. Defaults to ALL. If protocol is 'ICMP' then targetPortRange start and end cannot be set.
	Protocol pulumi.StringPtrInput
	// [string] Public IP address of the NAT gateway rule. Specifies the address used for masking outgoing packets source address field. Should be one of the customer reserved IP address already configured on the NAT gateway resource.
	PublicIp pulumi.StringPtrInput
	// [string] Source subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on the packets source IP address.
	SourceSubnet pulumi.StringPtrInput
	// Target port range of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on destination port. If none is provided, rule will match any port.
	TargetPortRange NatgatewayRuleTargetPortRangePtrInput
	// [string] Target or destination subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on the packets destination IP address. If none is provided, rule will match any address.
	TargetSubnet pulumi.StringPtrInput
	// [string] Type of the NAT gateway rule.
	Type pulumi.StringPtrInput
}

func (NatgatewayRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*natgatewayRuleState)(nil)).Elem()
}

type natgatewayRuleArgs struct {
	// [string] A Datacenter's UUID.
	DatacenterId string `pulumi:"datacenterId"`
	// [string] Name of the NAT gateway rule.
	Name *string `pulumi:"name"`
	// [string] Nat Gateway's UUID.
	NatgatewayId string `pulumi:"natgatewayId"`
	// [string] Protocol of the NAT gateway rule. Defaults to ALL. If protocol is 'ICMP' then targetPortRange start and end cannot be set.
	Protocol *string `pulumi:"protocol"`
	// [string] Public IP address of the NAT gateway rule. Specifies the address used for masking outgoing packets source address field. Should be one of the customer reserved IP address already configured on the NAT gateway resource.
	PublicIp string `pulumi:"publicIp"`
	// [string] Source subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on the packets source IP address.
	SourceSubnet string `pulumi:"sourceSubnet"`
	// Target port range of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on destination port. If none is provided, rule will match any port.
	TargetPortRange *NatgatewayRuleTargetPortRange `pulumi:"targetPortRange"`
	// [string] Target or destination subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on the packets destination IP address. If none is provided, rule will match any address.
	TargetSubnet *string `pulumi:"targetSubnet"`
	// [string] Type of the NAT gateway rule.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a NatgatewayRule resource.
type NatgatewayRuleArgs struct {
	// [string] A Datacenter's UUID.
	DatacenterId pulumi.StringInput
	// [string] Name of the NAT gateway rule.
	Name pulumi.StringPtrInput
	// [string] Nat Gateway's UUID.
	NatgatewayId pulumi.StringInput
	// [string] Protocol of the NAT gateway rule. Defaults to ALL. If protocol is 'ICMP' then targetPortRange start and end cannot be set.
	Protocol pulumi.StringPtrInput
	// [string] Public IP address of the NAT gateway rule. Specifies the address used for masking outgoing packets source address field. Should be one of the customer reserved IP address already configured on the NAT gateway resource.
	PublicIp pulumi.StringInput
	// [string] Source subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on the packets source IP address.
	SourceSubnet pulumi.StringInput
	// Target port range of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on destination port. If none is provided, rule will match any port.
	TargetPortRange NatgatewayRuleTargetPortRangePtrInput
	// [string] Target or destination subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on the packets destination IP address. If none is provided, rule will match any address.
	TargetSubnet pulumi.StringPtrInput
	// [string] Type of the NAT gateway rule.
	Type pulumi.StringPtrInput
}

func (NatgatewayRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*natgatewayRuleArgs)(nil)).Elem()
}

type NatgatewayRuleInput interface {
	pulumi.Input

	ToNatgatewayRuleOutput() NatgatewayRuleOutput
	ToNatgatewayRuleOutputWithContext(ctx context.Context) NatgatewayRuleOutput
}

func (*NatgatewayRule) ElementType() reflect.Type {
	return reflect.TypeOf((**NatgatewayRule)(nil)).Elem()
}

func (i *NatgatewayRule) ToNatgatewayRuleOutput() NatgatewayRuleOutput {
	return i.ToNatgatewayRuleOutputWithContext(context.Background())
}

func (i *NatgatewayRule) ToNatgatewayRuleOutputWithContext(ctx context.Context) NatgatewayRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatgatewayRuleOutput)
}

// NatgatewayRuleArrayInput is an input type that accepts NatgatewayRuleArray and NatgatewayRuleArrayOutput values.
// You can construct a concrete instance of `NatgatewayRuleArrayInput` via:
//
//	NatgatewayRuleArray{ NatgatewayRuleArgs{...} }
type NatgatewayRuleArrayInput interface {
	pulumi.Input

	ToNatgatewayRuleArrayOutput() NatgatewayRuleArrayOutput
	ToNatgatewayRuleArrayOutputWithContext(context.Context) NatgatewayRuleArrayOutput
}

type NatgatewayRuleArray []NatgatewayRuleInput

func (NatgatewayRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NatgatewayRule)(nil)).Elem()
}

func (i NatgatewayRuleArray) ToNatgatewayRuleArrayOutput() NatgatewayRuleArrayOutput {
	return i.ToNatgatewayRuleArrayOutputWithContext(context.Background())
}

func (i NatgatewayRuleArray) ToNatgatewayRuleArrayOutputWithContext(ctx context.Context) NatgatewayRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatgatewayRuleArrayOutput)
}

// NatgatewayRuleMapInput is an input type that accepts NatgatewayRuleMap and NatgatewayRuleMapOutput values.
// You can construct a concrete instance of `NatgatewayRuleMapInput` via:
//
//	NatgatewayRuleMap{ "key": NatgatewayRuleArgs{...} }
type NatgatewayRuleMapInput interface {
	pulumi.Input

	ToNatgatewayRuleMapOutput() NatgatewayRuleMapOutput
	ToNatgatewayRuleMapOutputWithContext(context.Context) NatgatewayRuleMapOutput
}

type NatgatewayRuleMap map[string]NatgatewayRuleInput

func (NatgatewayRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NatgatewayRule)(nil)).Elem()
}

func (i NatgatewayRuleMap) ToNatgatewayRuleMapOutput() NatgatewayRuleMapOutput {
	return i.ToNatgatewayRuleMapOutputWithContext(context.Background())
}

func (i NatgatewayRuleMap) ToNatgatewayRuleMapOutputWithContext(ctx context.Context) NatgatewayRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatgatewayRuleMapOutput)
}

type NatgatewayRuleOutput struct{ *pulumi.OutputState }

func (NatgatewayRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NatgatewayRule)(nil)).Elem()
}

func (o NatgatewayRuleOutput) ToNatgatewayRuleOutput() NatgatewayRuleOutput {
	return o
}

func (o NatgatewayRuleOutput) ToNatgatewayRuleOutputWithContext(ctx context.Context) NatgatewayRuleOutput {
	return o
}

// [string] A Datacenter's UUID.
func (o NatgatewayRuleOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatgatewayRule) pulumi.StringOutput { return v.DatacenterId }).(pulumi.StringOutput)
}

// [string] Name of the NAT gateway rule.
func (o NatgatewayRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NatgatewayRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// [string] Nat Gateway's UUID.
func (o NatgatewayRuleOutput) NatgatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatgatewayRule) pulumi.StringOutput { return v.NatgatewayId }).(pulumi.StringOutput)
}

// [string] Protocol of the NAT gateway rule. Defaults to ALL. If protocol is 'ICMP' then targetPortRange start and end cannot be set.
func (o NatgatewayRuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *NatgatewayRule) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// [string] Public IP address of the NAT gateway rule. Specifies the address used for masking outgoing packets source address field. Should be one of the customer reserved IP address already configured on the NAT gateway resource.
func (o NatgatewayRuleOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v *NatgatewayRule) pulumi.StringOutput { return v.PublicIp }).(pulumi.StringOutput)
}

// [string] Source subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on the packets source IP address.
func (o NatgatewayRuleOutput) SourceSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v *NatgatewayRule) pulumi.StringOutput { return v.SourceSubnet }).(pulumi.StringOutput)
}

// Target port range of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on destination port. If none is provided, rule will match any port.
func (o NatgatewayRuleOutput) TargetPortRange() NatgatewayRuleTargetPortRangeOutput {
	return o.ApplyT(func(v *NatgatewayRule) NatgatewayRuleTargetPortRangeOutput { return v.TargetPortRange }).(NatgatewayRuleTargetPortRangeOutput)
}

// [string] Target or destination subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on the packets destination IP address. If none is provided, rule will match any address.
func (o NatgatewayRuleOutput) TargetSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v *NatgatewayRule) pulumi.StringOutput { return v.TargetSubnet }).(pulumi.StringOutput)
}

// [string] Type of the NAT gateway rule.
func (o NatgatewayRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NatgatewayRule) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type NatgatewayRuleArrayOutput struct{ *pulumi.OutputState }

func (NatgatewayRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NatgatewayRule)(nil)).Elem()
}

func (o NatgatewayRuleArrayOutput) ToNatgatewayRuleArrayOutput() NatgatewayRuleArrayOutput {
	return o
}

func (o NatgatewayRuleArrayOutput) ToNatgatewayRuleArrayOutputWithContext(ctx context.Context) NatgatewayRuleArrayOutput {
	return o
}

func (o NatgatewayRuleArrayOutput) Index(i pulumi.IntInput) NatgatewayRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NatgatewayRule {
		return vs[0].([]*NatgatewayRule)[vs[1].(int)]
	}).(NatgatewayRuleOutput)
}

type NatgatewayRuleMapOutput struct{ *pulumi.OutputState }

func (NatgatewayRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NatgatewayRule)(nil)).Elem()
}

func (o NatgatewayRuleMapOutput) ToNatgatewayRuleMapOutput() NatgatewayRuleMapOutput {
	return o
}

func (o NatgatewayRuleMapOutput) ToNatgatewayRuleMapOutputWithContext(ctx context.Context) NatgatewayRuleMapOutput {
	return o
}

func (o NatgatewayRuleMapOutput) MapIndex(k pulumi.StringInput) NatgatewayRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NatgatewayRule {
		return vs[0].(map[string]*NatgatewayRule)[vs[1].(string)]
	}).(NatgatewayRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NatgatewayRuleInput)(nil)).Elem(), &NatgatewayRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*NatgatewayRuleArrayInput)(nil)).Elem(), NatgatewayRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NatgatewayRuleMapInput)(nil)).Elem(), NatgatewayRuleMap{})
	pulumi.RegisterOutputType(NatgatewayRuleOutput{})
	pulumi.RegisterOutputType(NatgatewayRuleArrayOutput{})
	pulumi.RegisterOutputType(NatgatewayRuleMapOutput{})
}
