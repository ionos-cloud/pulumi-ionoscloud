// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AutoscalingGroup struct {
	pulumi.CustomResourceState

	// Unique identifier for the resource
	DatacenterId pulumi.StringOutput `pulumi:"datacenterId"`
	// Location of the data center.
	Location pulumi.StringOutput `pulumi:"location"`
	// The maximum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for
	// both automatic and manual changes.
	MaxReplicaCount pulumi.IntOutput `pulumi:"maxReplicaCount"`
	// The minimum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for
	// both automatic and manual changes
	MinReplicaCount pulumi.IntOutput `pulumi:"minReplicaCount"`
	// User-defined name for the Autoscaling Group.
	Name pulumi.StringOutput `pulumi:"name"`
	// Defines the behavior of this VM Auto Scaling Group. A policy consists of triggers and actions, where an action is an
	// automated behavior, and the trigger defines the circumstances under which the action is triggered. Currently, two
	// separate actions are supported, namely scaling inward and outward, triggered by the thresholds defined for a particular
	// metric.
	Policy               AutoscalingGroupPolicyOutput               `pulumi:"policy"`
	ReplicaConfiguration AutoscalingGroupReplicaConfigurationOutput `pulumi:"replicaConfiguration"`
}

// NewAutoscalingGroup registers a new resource with the given unique name, arguments, and options.
func NewAutoscalingGroup(ctx *pulumi.Context,
	name string, args *AutoscalingGroupArgs, opts ...pulumi.ResourceOption) (*AutoscalingGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatacenterId == nil {
		return nil, errors.New("invalid value for required argument 'DatacenterId'")
	}
	if args.MaxReplicaCount == nil {
		return nil, errors.New("invalid value for required argument 'MaxReplicaCount'")
	}
	if args.MinReplicaCount == nil {
		return nil, errors.New("invalid value for required argument 'MinReplicaCount'")
	}
	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	if args.ReplicaConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'ReplicaConfiguration'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AutoscalingGroup
	err := ctx.RegisterResource("ionoscloud:index/autoscalingGroup:AutoscalingGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAutoscalingGroup gets an existing AutoscalingGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAutoscalingGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AutoscalingGroupState, opts ...pulumi.ResourceOption) (*AutoscalingGroup, error) {
	var resource AutoscalingGroup
	err := ctx.ReadResource("ionoscloud:index/autoscalingGroup:AutoscalingGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AutoscalingGroup resources.
type autoscalingGroupState struct {
	// Unique identifier for the resource
	DatacenterId *string `pulumi:"datacenterId"`
	// Location of the data center.
	Location *string `pulumi:"location"`
	// The maximum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for
	// both automatic and manual changes.
	MaxReplicaCount *int `pulumi:"maxReplicaCount"`
	// The minimum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for
	// both automatic and manual changes
	MinReplicaCount *int `pulumi:"minReplicaCount"`
	// User-defined name for the Autoscaling Group.
	Name *string `pulumi:"name"`
	// Defines the behavior of this VM Auto Scaling Group. A policy consists of triggers and actions, where an action is an
	// automated behavior, and the trigger defines the circumstances under which the action is triggered. Currently, two
	// separate actions are supported, namely scaling inward and outward, triggered by the thresholds defined for a particular
	// metric.
	Policy               *AutoscalingGroupPolicy               `pulumi:"policy"`
	ReplicaConfiguration *AutoscalingGroupReplicaConfiguration `pulumi:"replicaConfiguration"`
}

type AutoscalingGroupState struct {
	// Unique identifier for the resource
	DatacenterId pulumi.StringPtrInput
	// Location of the data center.
	Location pulumi.StringPtrInput
	// The maximum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for
	// both automatic and manual changes.
	MaxReplicaCount pulumi.IntPtrInput
	// The minimum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for
	// both automatic and manual changes
	MinReplicaCount pulumi.IntPtrInput
	// User-defined name for the Autoscaling Group.
	Name pulumi.StringPtrInput
	// Defines the behavior of this VM Auto Scaling Group. A policy consists of triggers and actions, where an action is an
	// automated behavior, and the trigger defines the circumstances under which the action is triggered. Currently, two
	// separate actions are supported, namely scaling inward and outward, triggered by the thresholds defined for a particular
	// metric.
	Policy               AutoscalingGroupPolicyPtrInput
	ReplicaConfiguration AutoscalingGroupReplicaConfigurationPtrInput
}

func (AutoscalingGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*autoscalingGroupState)(nil)).Elem()
}

type autoscalingGroupArgs struct {
	// Unique identifier for the resource
	DatacenterId string `pulumi:"datacenterId"`
	// The maximum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for
	// both automatic and manual changes.
	MaxReplicaCount int `pulumi:"maxReplicaCount"`
	// The minimum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for
	// both automatic and manual changes
	MinReplicaCount int `pulumi:"minReplicaCount"`
	// User-defined name for the Autoscaling Group.
	Name *string `pulumi:"name"`
	// Defines the behavior of this VM Auto Scaling Group. A policy consists of triggers and actions, where an action is an
	// automated behavior, and the trigger defines the circumstances under which the action is triggered. Currently, two
	// separate actions are supported, namely scaling inward and outward, triggered by the thresholds defined for a particular
	// metric.
	Policy               AutoscalingGroupPolicy               `pulumi:"policy"`
	ReplicaConfiguration AutoscalingGroupReplicaConfiguration `pulumi:"replicaConfiguration"`
}

// The set of arguments for constructing a AutoscalingGroup resource.
type AutoscalingGroupArgs struct {
	// Unique identifier for the resource
	DatacenterId pulumi.StringInput
	// The maximum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for
	// both automatic and manual changes.
	MaxReplicaCount pulumi.IntInput
	// The minimum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for
	// both automatic and manual changes
	MinReplicaCount pulumi.IntInput
	// User-defined name for the Autoscaling Group.
	Name pulumi.StringPtrInput
	// Defines the behavior of this VM Auto Scaling Group. A policy consists of triggers and actions, where an action is an
	// automated behavior, and the trigger defines the circumstances under which the action is triggered. Currently, two
	// separate actions are supported, namely scaling inward and outward, triggered by the thresholds defined for a particular
	// metric.
	Policy               AutoscalingGroupPolicyInput
	ReplicaConfiguration AutoscalingGroupReplicaConfigurationInput
}

func (AutoscalingGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*autoscalingGroupArgs)(nil)).Elem()
}

type AutoscalingGroupInput interface {
	pulumi.Input

	ToAutoscalingGroupOutput() AutoscalingGroupOutput
	ToAutoscalingGroupOutputWithContext(ctx context.Context) AutoscalingGroupOutput
}

func (*AutoscalingGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingGroup)(nil)).Elem()
}

func (i *AutoscalingGroup) ToAutoscalingGroupOutput() AutoscalingGroupOutput {
	return i.ToAutoscalingGroupOutputWithContext(context.Background())
}

func (i *AutoscalingGroup) ToAutoscalingGroupOutputWithContext(ctx context.Context) AutoscalingGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingGroupOutput)
}

// AutoscalingGroupArrayInput is an input type that accepts AutoscalingGroupArray and AutoscalingGroupArrayOutput values.
// You can construct a concrete instance of `AutoscalingGroupArrayInput` via:
//
//	AutoscalingGroupArray{ AutoscalingGroupArgs{...} }
type AutoscalingGroupArrayInput interface {
	pulumi.Input

	ToAutoscalingGroupArrayOutput() AutoscalingGroupArrayOutput
	ToAutoscalingGroupArrayOutputWithContext(context.Context) AutoscalingGroupArrayOutput
}

type AutoscalingGroupArray []AutoscalingGroupInput

func (AutoscalingGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AutoscalingGroup)(nil)).Elem()
}

func (i AutoscalingGroupArray) ToAutoscalingGroupArrayOutput() AutoscalingGroupArrayOutput {
	return i.ToAutoscalingGroupArrayOutputWithContext(context.Background())
}

func (i AutoscalingGroupArray) ToAutoscalingGroupArrayOutputWithContext(ctx context.Context) AutoscalingGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingGroupArrayOutput)
}

// AutoscalingGroupMapInput is an input type that accepts AutoscalingGroupMap and AutoscalingGroupMapOutput values.
// You can construct a concrete instance of `AutoscalingGroupMapInput` via:
//
//	AutoscalingGroupMap{ "key": AutoscalingGroupArgs{...} }
type AutoscalingGroupMapInput interface {
	pulumi.Input

	ToAutoscalingGroupMapOutput() AutoscalingGroupMapOutput
	ToAutoscalingGroupMapOutputWithContext(context.Context) AutoscalingGroupMapOutput
}

type AutoscalingGroupMap map[string]AutoscalingGroupInput

func (AutoscalingGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AutoscalingGroup)(nil)).Elem()
}

func (i AutoscalingGroupMap) ToAutoscalingGroupMapOutput() AutoscalingGroupMapOutput {
	return i.ToAutoscalingGroupMapOutputWithContext(context.Background())
}

func (i AutoscalingGroupMap) ToAutoscalingGroupMapOutputWithContext(ctx context.Context) AutoscalingGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingGroupMapOutput)
}

type AutoscalingGroupOutput struct{ *pulumi.OutputState }

func (AutoscalingGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingGroup)(nil)).Elem()
}

func (o AutoscalingGroupOutput) ToAutoscalingGroupOutput() AutoscalingGroupOutput {
	return o
}

func (o AutoscalingGroupOutput) ToAutoscalingGroupOutputWithContext(ctx context.Context) AutoscalingGroupOutput {
	return o
}

// Unique identifier for the resource
func (o AutoscalingGroupOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoscalingGroup) pulumi.StringOutput { return v.DatacenterId }).(pulumi.StringOutput)
}

// Location of the data center.
func (o AutoscalingGroupOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoscalingGroup) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The maximum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for
// both automatic and manual changes.
func (o AutoscalingGroupOutput) MaxReplicaCount() pulumi.IntOutput {
	return o.ApplyT(func(v *AutoscalingGroup) pulumi.IntOutput { return v.MaxReplicaCount }).(pulumi.IntOutput)
}

// The minimum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for
// both automatic and manual changes
func (o AutoscalingGroupOutput) MinReplicaCount() pulumi.IntOutput {
	return o.ApplyT(func(v *AutoscalingGroup) pulumi.IntOutput { return v.MinReplicaCount }).(pulumi.IntOutput)
}

// User-defined name for the Autoscaling Group.
func (o AutoscalingGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoscalingGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Defines the behavior of this VM Auto Scaling Group. A policy consists of triggers and actions, where an action is an
// automated behavior, and the trigger defines the circumstances under which the action is triggered. Currently, two
// separate actions are supported, namely scaling inward and outward, triggered by the thresholds defined for a particular
// metric.
func (o AutoscalingGroupOutput) Policy() AutoscalingGroupPolicyOutput {
	return o.ApplyT(func(v *AutoscalingGroup) AutoscalingGroupPolicyOutput { return v.Policy }).(AutoscalingGroupPolicyOutput)
}

func (o AutoscalingGroupOutput) ReplicaConfiguration() AutoscalingGroupReplicaConfigurationOutput {
	return o.ApplyT(func(v *AutoscalingGroup) AutoscalingGroupReplicaConfigurationOutput { return v.ReplicaConfiguration }).(AutoscalingGroupReplicaConfigurationOutput)
}

type AutoscalingGroupArrayOutput struct{ *pulumi.OutputState }

func (AutoscalingGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AutoscalingGroup)(nil)).Elem()
}

func (o AutoscalingGroupArrayOutput) ToAutoscalingGroupArrayOutput() AutoscalingGroupArrayOutput {
	return o
}

func (o AutoscalingGroupArrayOutput) ToAutoscalingGroupArrayOutputWithContext(ctx context.Context) AutoscalingGroupArrayOutput {
	return o
}

func (o AutoscalingGroupArrayOutput) Index(i pulumi.IntInput) AutoscalingGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AutoscalingGroup {
		return vs[0].([]*AutoscalingGroup)[vs[1].(int)]
	}).(AutoscalingGroupOutput)
}

type AutoscalingGroupMapOutput struct{ *pulumi.OutputState }

func (AutoscalingGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AutoscalingGroup)(nil)).Elem()
}

func (o AutoscalingGroupMapOutput) ToAutoscalingGroupMapOutput() AutoscalingGroupMapOutput {
	return o
}

func (o AutoscalingGroupMapOutput) ToAutoscalingGroupMapOutputWithContext(ctx context.Context) AutoscalingGroupMapOutput {
	return o
}

func (o AutoscalingGroupMapOutput) MapIndex(k pulumi.StringInput) AutoscalingGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AutoscalingGroup {
		return vs[0].(map[string]*AutoscalingGroup)[vs[1].(string)]
	}).(AutoscalingGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingGroupInput)(nil)).Elem(), &AutoscalingGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingGroupArrayInput)(nil)).Elem(), AutoscalingGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingGroupMapInput)(nil)).Elem(), AutoscalingGroupMap{})
	pulumi.RegisterOutputType(AutoscalingGroupOutput{})
	pulumi.RegisterOutputType(AutoscalingGroupArrayOutput{})
	pulumi.RegisterOutputType(AutoscalingGroupMapOutput{})
}
