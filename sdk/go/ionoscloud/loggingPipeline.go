// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// In order to import a Logging pipeline, you can define an empty Logging pipeline resource in the plan:
//
// hcl
//
// resource "ionoscloud_logging_pipeline" "example" {
//
// }
//
// The resource can be imported using the `location` and `pipeline_id`, for example:
//
// ```sh
// $ pulumi import ionoscloud:index/loggingPipeline:LoggingPipeline example {location}:{pipeline_id}
// ```
type LoggingPipeline struct {
	pulumi.CustomResourceState

	// [string] The address of the client's grafana instance.
	GrafanaAddress pulumi.StringOutput `pulumi:"grafanaAddress"`
	// [string] The location of the Logging pipeline. Default: `de/txl` One of `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `fr/par`.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// [list] Pipeline logs, a list that contains elements with the following structure:
	Logs LoggingPipelineLogArrayOutput `pulumi:"logs"`
	// [string] The name of the Logging pipeline.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewLoggingPipeline registers a new resource with the given unique name, arguments, and options.
func NewLoggingPipeline(ctx *pulumi.Context,
	name string, args *LoggingPipelineArgs, opts ...pulumi.ResourceOption) (*LoggingPipeline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Logs == nil {
		return nil, errors.New("invalid value for required argument 'Logs'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoggingPipeline
	err := ctx.RegisterResource("ionoscloud:index/loggingPipeline:LoggingPipeline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoggingPipeline gets an existing LoggingPipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoggingPipeline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoggingPipelineState, opts ...pulumi.ResourceOption) (*LoggingPipeline, error) {
	var resource LoggingPipeline
	err := ctx.ReadResource("ionoscloud:index/loggingPipeline:LoggingPipeline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoggingPipeline resources.
type loggingPipelineState struct {
	// [string] The address of the client's grafana instance.
	GrafanaAddress *string `pulumi:"grafanaAddress"`
	// [string] The location of the Logging pipeline. Default: `de/txl` One of `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `fr/par`.
	Location *string `pulumi:"location"`
	// [list] Pipeline logs, a list that contains elements with the following structure:
	Logs []LoggingPipelineLog `pulumi:"logs"`
	// [string] The name of the Logging pipeline.
	Name *string `pulumi:"name"`
}

type LoggingPipelineState struct {
	// [string] The address of the client's grafana instance.
	GrafanaAddress pulumi.StringPtrInput
	// [string] The location of the Logging pipeline. Default: `de/txl` One of `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `fr/par`.
	Location pulumi.StringPtrInput
	// [list] Pipeline logs, a list that contains elements with the following structure:
	Logs LoggingPipelineLogArrayInput
	// [string] The name of the Logging pipeline.
	Name pulumi.StringPtrInput
}

func (LoggingPipelineState) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingPipelineState)(nil)).Elem()
}

type loggingPipelineArgs struct {
	// [string] The location of the Logging pipeline. Default: `de/txl` One of `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `fr/par`.
	Location *string `pulumi:"location"`
	// [list] Pipeline logs, a list that contains elements with the following structure:
	Logs []LoggingPipelineLog `pulumi:"logs"`
	// [string] The name of the Logging pipeline.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a LoggingPipeline resource.
type LoggingPipelineArgs struct {
	// [string] The location of the Logging pipeline. Default: `de/txl` One of `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `fr/par`.
	Location pulumi.StringPtrInput
	// [list] Pipeline logs, a list that contains elements with the following structure:
	Logs LoggingPipelineLogArrayInput
	// [string] The name of the Logging pipeline.
	Name pulumi.StringPtrInput
}

func (LoggingPipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingPipelineArgs)(nil)).Elem()
}

type LoggingPipelineInput interface {
	pulumi.Input

	ToLoggingPipelineOutput() LoggingPipelineOutput
	ToLoggingPipelineOutputWithContext(ctx context.Context) LoggingPipelineOutput
}

func (*LoggingPipeline) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingPipeline)(nil)).Elem()
}

func (i *LoggingPipeline) ToLoggingPipelineOutput() LoggingPipelineOutput {
	return i.ToLoggingPipelineOutputWithContext(context.Background())
}

func (i *LoggingPipeline) ToLoggingPipelineOutputWithContext(ctx context.Context) LoggingPipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingPipelineOutput)
}

// LoggingPipelineArrayInput is an input type that accepts LoggingPipelineArray and LoggingPipelineArrayOutput values.
// You can construct a concrete instance of `LoggingPipelineArrayInput` via:
//
//	LoggingPipelineArray{ LoggingPipelineArgs{...} }
type LoggingPipelineArrayInput interface {
	pulumi.Input

	ToLoggingPipelineArrayOutput() LoggingPipelineArrayOutput
	ToLoggingPipelineArrayOutputWithContext(context.Context) LoggingPipelineArrayOutput
}

type LoggingPipelineArray []LoggingPipelineInput

func (LoggingPipelineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoggingPipeline)(nil)).Elem()
}

func (i LoggingPipelineArray) ToLoggingPipelineArrayOutput() LoggingPipelineArrayOutput {
	return i.ToLoggingPipelineArrayOutputWithContext(context.Background())
}

func (i LoggingPipelineArray) ToLoggingPipelineArrayOutputWithContext(ctx context.Context) LoggingPipelineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingPipelineArrayOutput)
}

// LoggingPipelineMapInput is an input type that accepts LoggingPipelineMap and LoggingPipelineMapOutput values.
// You can construct a concrete instance of `LoggingPipelineMapInput` via:
//
//	LoggingPipelineMap{ "key": LoggingPipelineArgs{...} }
type LoggingPipelineMapInput interface {
	pulumi.Input

	ToLoggingPipelineMapOutput() LoggingPipelineMapOutput
	ToLoggingPipelineMapOutputWithContext(context.Context) LoggingPipelineMapOutput
}

type LoggingPipelineMap map[string]LoggingPipelineInput

func (LoggingPipelineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoggingPipeline)(nil)).Elem()
}

func (i LoggingPipelineMap) ToLoggingPipelineMapOutput() LoggingPipelineMapOutput {
	return i.ToLoggingPipelineMapOutputWithContext(context.Background())
}

func (i LoggingPipelineMap) ToLoggingPipelineMapOutputWithContext(ctx context.Context) LoggingPipelineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingPipelineMapOutput)
}

type LoggingPipelineOutput struct{ *pulumi.OutputState }

func (LoggingPipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingPipeline)(nil)).Elem()
}

func (o LoggingPipelineOutput) ToLoggingPipelineOutput() LoggingPipelineOutput {
	return o
}

func (o LoggingPipelineOutput) ToLoggingPipelineOutputWithContext(ctx context.Context) LoggingPipelineOutput {
	return o
}

// [string] The address of the client's grafana instance.
func (o LoggingPipelineOutput) GrafanaAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingPipeline) pulumi.StringOutput { return v.GrafanaAddress }).(pulumi.StringOutput)
}

// [string] The location of the Logging pipeline. Default: `de/txl` One of `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `fr/par`.
func (o LoggingPipelineOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoggingPipeline) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// [list] Pipeline logs, a list that contains elements with the following structure:
func (o LoggingPipelineOutput) Logs() LoggingPipelineLogArrayOutput {
	return o.ApplyT(func(v *LoggingPipeline) LoggingPipelineLogArrayOutput { return v.Logs }).(LoggingPipelineLogArrayOutput)
}

// [string] The name of the Logging pipeline.
func (o LoggingPipelineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingPipeline) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type LoggingPipelineArrayOutput struct{ *pulumi.OutputState }

func (LoggingPipelineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoggingPipeline)(nil)).Elem()
}

func (o LoggingPipelineArrayOutput) ToLoggingPipelineArrayOutput() LoggingPipelineArrayOutput {
	return o
}

func (o LoggingPipelineArrayOutput) ToLoggingPipelineArrayOutputWithContext(ctx context.Context) LoggingPipelineArrayOutput {
	return o
}

func (o LoggingPipelineArrayOutput) Index(i pulumi.IntInput) LoggingPipelineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoggingPipeline {
		return vs[0].([]*LoggingPipeline)[vs[1].(int)]
	}).(LoggingPipelineOutput)
}

type LoggingPipelineMapOutput struct{ *pulumi.OutputState }

func (LoggingPipelineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoggingPipeline)(nil)).Elem()
}

func (o LoggingPipelineMapOutput) ToLoggingPipelineMapOutput() LoggingPipelineMapOutput {
	return o
}

func (o LoggingPipelineMapOutput) ToLoggingPipelineMapOutputWithContext(ctx context.Context) LoggingPipelineMapOutput {
	return o
}

func (o LoggingPipelineMapOutput) MapIndex(k pulumi.StringInput) LoggingPipelineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoggingPipeline {
		return vs[0].(map[string]*LoggingPipeline)[vs[1].(string)]
	}).(LoggingPipelineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingPipelineInput)(nil)).Elem(), &LoggingPipeline{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingPipelineArrayInput)(nil)).Elem(), LoggingPipelineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingPipelineMapInput)(nil)).Elem(), LoggingPipelineMap{})
	pulumi.RegisterOutputType(LoggingPipelineOutput{})
	pulumi.RegisterOutputType(LoggingPipelineArrayOutput{})
	pulumi.RegisterOutputType(LoggingPipelineMapOutput{})
}
