// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **DNS Record** can be used to search for and return an existing DNS Record.
// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
// When this happens, please refine your search and make sure that your resources have unique names.
//
// > ⚠️  Only tokens are accepted for authorization in the **ionoscloud_dns_record** data source. Please ensure you are using tokens as other methods will not be valid.
//
// ## Example Usage
func LookupDnsRecord(ctx *pulumi.Context, args *LookupDnsRecordArgs, opts ...pulumi.InvokeOption) (*LookupDnsRecordResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDnsRecordResult
	err := ctx.Invoke("ionoscloud:index/getDnsRecord:getDnsRecord", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDnsRecord.
type LookupDnsRecordArgs struct {
	// [string] The ID of the DNS Record you want to search for.
	Id *string `pulumi:"id"`
	// [string] The name of the DNS Record you want to search for.
	Name *string `pulumi:"name"`
	// [bool] Whether partial matching is allowed or not when using name argument. Default value is false.
	//
	// Either `id` or `name` must be provided. If none, or both are provided, the datasource will return an error.
	PartialMatch *bool `pulumi:"partialMatch"`
	// [string] The ID of the DNS Zone in which the DNS Record can be found.
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getDnsRecord.
type LookupDnsRecordResult struct {
	// The content of the DNS Record.
	Content string `pulumi:"content"`
	// Indicates if the DNS Record is active or not.
	Enabled bool   `pulumi:"enabled"`
	Fqdn    string `pulumi:"fqdn"`
	// The UUID of the DNS Record.
	Id *string `pulumi:"id"`
	// The name of the DNS Record.
	Name         *string `pulumi:"name"`
	PartialMatch *bool   `pulumi:"partialMatch"`
	// The priority for the DNS Record.
	Priority int `pulumi:"priority"`
	// The time to live of the DNS Record.
	Ttl int `pulumi:"ttl"`
	// The type of the DNS Record.
	Type   string `pulumi:"type"`
	ZoneId string `pulumi:"zoneId"`
}

func LookupDnsRecordOutput(ctx *pulumi.Context, args LookupDnsRecordOutputArgs, opts ...pulumi.InvokeOption) LookupDnsRecordResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDnsRecordResult, error) {
			args := v.(LookupDnsRecordArgs)
			r, err := LookupDnsRecord(ctx, &args, opts...)
			var s LookupDnsRecordResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDnsRecordResultOutput)
}

// A collection of arguments for invoking getDnsRecord.
type LookupDnsRecordOutputArgs struct {
	// [string] The ID of the DNS Record you want to search for.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// [string] The name of the DNS Record you want to search for.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [bool] Whether partial matching is allowed or not when using name argument. Default value is false.
	//
	// Either `id` or `name` must be provided. If none, or both are provided, the datasource will return an error.
	PartialMatch pulumi.BoolPtrInput `pulumi:"partialMatch"`
	// [string] The ID of the DNS Zone in which the DNS Record can be found.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupDnsRecordOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsRecordArgs)(nil)).Elem()
}

// A collection of values returned by getDnsRecord.
type LookupDnsRecordResultOutput struct{ *pulumi.OutputState }

func (LookupDnsRecordResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsRecordResult)(nil)).Elem()
}

func (o LookupDnsRecordResultOutput) ToLookupDnsRecordResultOutput() LookupDnsRecordResultOutput {
	return o
}

func (o LookupDnsRecordResultOutput) ToLookupDnsRecordResultOutputWithContext(ctx context.Context) LookupDnsRecordResultOutput {
	return o
}

// The content of the DNS Record.
func (o LookupDnsRecordResultOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsRecordResult) string { return v.Content }).(pulumi.StringOutput)
}

// Indicates if the DNS Record is active or not.
func (o LookupDnsRecordResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDnsRecordResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o LookupDnsRecordResultOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsRecordResult) string { return v.Fqdn }).(pulumi.StringOutput)
}

// The UUID of the DNS Record.
func (o LookupDnsRecordResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDnsRecordResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the DNS Record.
func (o LookupDnsRecordResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDnsRecordResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupDnsRecordResultOutput) PartialMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupDnsRecordResult) *bool { return v.PartialMatch }).(pulumi.BoolPtrOutput)
}

// The priority for the DNS Record.
func (o LookupDnsRecordResultOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDnsRecordResult) int { return v.Priority }).(pulumi.IntOutput)
}

// The time to live of the DNS Record.
func (o LookupDnsRecordResultOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDnsRecordResult) int { return v.Ttl }).(pulumi.IntOutput)
}

// The type of the DNS Record.
func (o LookupDnsRecordResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsRecordResult) string { return v.Type }).(pulumi.StringOutput)
}

func (o LookupDnsRecordResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsRecordResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDnsRecordResultOutput{})
}
