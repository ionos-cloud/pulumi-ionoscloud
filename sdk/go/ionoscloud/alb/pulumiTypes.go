// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type BalancerFlowlog struct {
	// [string] Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, forces re-creation.
	Action string `pulumi:"action"`
	// [string] Specifies the IONOS Object Storage bucket where the flow log data will be stored. The bucket must exist. Immutable, forces re-creation.
	Bucket string `pulumi:"bucket"`
	// [string] Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, forces re-creation.
	Direction string `pulumi:"direction"`
	// The resource's unique identifier.
	Id *string `pulumi:"id"`
	// [string] Specifies the name of the flow log.
	//
	// ⚠️ **Note:**: Removing the `flowlog` forces re-creation of the application load balancer resource.
	Name string `pulumi:"name"`
}

// BalancerFlowlogInput is an input type that accepts BalancerFlowlogArgs and BalancerFlowlogOutput values.
// You can construct a concrete instance of `BalancerFlowlogInput` via:
//
//	BalancerFlowlogArgs{...}
type BalancerFlowlogInput interface {
	pulumi.Input

	ToBalancerFlowlogOutput() BalancerFlowlogOutput
	ToBalancerFlowlogOutputWithContext(context.Context) BalancerFlowlogOutput
}

type BalancerFlowlogArgs struct {
	// [string] Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, forces re-creation.
	Action pulumi.StringInput `pulumi:"action"`
	// [string] Specifies the IONOS Object Storage bucket where the flow log data will be stored. The bucket must exist. Immutable, forces re-creation.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// [string] Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, forces re-creation.
	Direction pulumi.StringInput `pulumi:"direction"`
	// The resource's unique identifier.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// [string] Specifies the name of the flow log.
	//
	// ⚠️ **Note:**: Removing the `flowlog` forces re-creation of the application load balancer resource.
	Name pulumi.StringInput `pulumi:"name"`
}

func (BalancerFlowlogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BalancerFlowlog)(nil)).Elem()
}

func (i BalancerFlowlogArgs) ToBalancerFlowlogOutput() BalancerFlowlogOutput {
	return i.ToBalancerFlowlogOutputWithContext(context.Background())
}

func (i BalancerFlowlogArgs) ToBalancerFlowlogOutputWithContext(ctx context.Context) BalancerFlowlogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BalancerFlowlogOutput)
}

func (i BalancerFlowlogArgs) ToBalancerFlowlogPtrOutput() BalancerFlowlogPtrOutput {
	return i.ToBalancerFlowlogPtrOutputWithContext(context.Background())
}

func (i BalancerFlowlogArgs) ToBalancerFlowlogPtrOutputWithContext(ctx context.Context) BalancerFlowlogPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BalancerFlowlogOutput).ToBalancerFlowlogPtrOutputWithContext(ctx)
}

// BalancerFlowlogPtrInput is an input type that accepts BalancerFlowlogArgs, BalancerFlowlogPtr and BalancerFlowlogPtrOutput values.
// You can construct a concrete instance of `BalancerFlowlogPtrInput` via:
//
//	        BalancerFlowlogArgs{...}
//
//	or:
//
//	        nil
type BalancerFlowlogPtrInput interface {
	pulumi.Input

	ToBalancerFlowlogPtrOutput() BalancerFlowlogPtrOutput
	ToBalancerFlowlogPtrOutputWithContext(context.Context) BalancerFlowlogPtrOutput
}

type balancerFlowlogPtrType BalancerFlowlogArgs

func BalancerFlowlogPtr(v *BalancerFlowlogArgs) BalancerFlowlogPtrInput {
	return (*balancerFlowlogPtrType)(v)
}

func (*balancerFlowlogPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BalancerFlowlog)(nil)).Elem()
}

func (i *balancerFlowlogPtrType) ToBalancerFlowlogPtrOutput() BalancerFlowlogPtrOutput {
	return i.ToBalancerFlowlogPtrOutputWithContext(context.Background())
}

func (i *balancerFlowlogPtrType) ToBalancerFlowlogPtrOutputWithContext(ctx context.Context) BalancerFlowlogPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BalancerFlowlogPtrOutput)
}

type BalancerFlowlogOutput struct{ *pulumi.OutputState }

func (BalancerFlowlogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BalancerFlowlog)(nil)).Elem()
}

func (o BalancerFlowlogOutput) ToBalancerFlowlogOutput() BalancerFlowlogOutput {
	return o
}

func (o BalancerFlowlogOutput) ToBalancerFlowlogOutputWithContext(ctx context.Context) BalancerFlowlogOutput {
	return o
}

func (o BalancerFlowlogOutput) ToBalancerFlowlogPtrOutput() BalancerFlowlogPtrOutput {
	return o.ToBalancerFlowlogPtrOutputWithContext(context.Background())
}

func (o BalancerFlowlogOutput) ToBalancerFlowlogPtrOutputWithContext(ctx context.Context) BalancerFlowlogPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BalancerFlowlog) *BalancerFlowlog {
		return &v
	}).(BalancerFlowlogPtrOutput)
}

// [string] Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, forces re-creation.
func (o BalancerFlowlogOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v BalancerFlowlog) string { return v.Action }).(pulumi.StringOutput)
}

// [string] Specifies the IONOS Object Storage bucket where the flow log data will be stored. The bucket must exist. Immutable, forces re-creation.
func (o BalancerFlowlogOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v BalancerFlowlog) string { return v.Bucket }).(pulumi.StringOutput)
}

// [string] Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, forces re-creation.
func (o BalancerFlowlogOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v BalancerFlowlog) string { return v.Direction }).(pulumi.StringOutput)
}

// The resource's unique identifier.
func (o BalancerFlowlogOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BalancerFlowlog) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// [string] Specifies the name of the flow log.
//
// ⚠️ **Note:**: Removing the `flowlog` forces re-creation of the application load balancer resource.
func (o BalancerFlowlogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BalancerFlowlog) string { return v.Name }).(pulumi.StringOutput)
}

type BalancerFlowlogPtrOutput struct{ *pulumi.OutputState }

func (BalancerFlowlogPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BalancerFlowlog)(nil)).Elem()
}

func (o BalancerFlowlogPtrOutput) ToBalancerFlowlogPtrOutput() BalancerFlowlogPtrOutput {
	return o
}

func (o BalancerFlowlogPtrOutput) ToBalancerFlowlogPtrOutputWithContext(ctx context.Context) BalancerFlowlogPtrOutput {
	return o
}

func (o BalancerFlowlogPtrOutput) Elem() BalancerFlowlogOutput {
	return o.ApplyT(func(v *BalancerFlowlog) BalancerFlowlog {
		if v != nil {
			return *v
		}
		var ret BalancerFlowlog
		return ret
	}).(BalancerFlowlogOutput)
}

// [string] Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, forces re-creation.
func (o BalancerFlowlogPtrOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BalancerFlowlog) *string {
		if v == nil {
			return nil
		}
		return &v.Action
	}).(pulumi.StringPtrOutput)
}

// [string] Specifies the IONOS Object Storage bucket where the flow log data will be stored. The bucket must exist. Immutable, forces re-creation.
func (o BalancerFlowlogPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BalancerFlowlog) *string {
		if v == nil {
			return nil
		}
		return &v.Bucket
	}).(pulumi.StringPtrOutput)
}

// [string] Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, forces re-creation.
func (o BalancerFlowlogPtrOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BalancerFlowlog) *string {
		if v == nil {
			return nil
		}
		return &v.Direction
	}).(pulumi.StringPtrOutput)
}

// The resource's unique identifier.
func (o BalancerFlowlogPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BalancerFlowlog) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// [string] Specifies the name of the flow log.
//
// ⚠️ **Note:**: Removing the `flowlog` forces re-creation of the application load balancer resource.
func (o BalancerFlowlogPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BalancerFlowlog) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

type ForwardingRuleHttpRule struct {
	// [list] - An array of items in the collection.The action is only performed if each and every condition is met; if no conditions are set, the rule will always be performed.
	Conditions []ForwardingRuleHttpRuleCondition `pulumi:"conditions"`
	// [string] Valid only for STATIC actions.
	ContentType *string `pulumi:"contentType"`
	// [bool] Default is false; valid only for REDIRECT actions.
	DropQuery *bool `pulumi:"dropQuery"`
	// [string] The location for redirecting; mandatory and valid only for REDIRECT actions.
	Location *string `pulumi:"location"`
	// [string] The unique name of the Application Load Balancer HTTP rule.
	Name string `pulumi:"name"`
	// [string] The response message of the request; mandatory for STATIC action.
	ResponseMessage *string `pulumi:"responseMessage"`
	// [int] Valid only for REDIRECT and STATIC actions. For REDIRECT actions, default is 301 and possible values are 301, 302, 303, 307, and 308. For STATIC actions, default is 503 and valid range is 200 to 599.
	StatusCode *int `pulumi:"statusCode"`
	// [string] The UUID of the target group; mandatory for FORWARD action.
	TargetGroup *string `pulumi:"targetGroup"`
	// [string] Type of the Http Rule.
	Type string `pulumi:"type"`
}

// ForwardingRuleHttpRuleInput is an input type that accepts ForwardingRuleHttpRuleArgs and ForwardingRuleHttpRuleOutput values.
// You can construct a concrete instance of `ForwardingRuleHttpRuleInput` via:
//
//	ForwardingRuleHttpRuleArgs{...}
type ForwardingRuleHttpRuleInput interface {
	pulumi.Input

	ToForwardingRuleHttpRuleOutput() ForwardingRuleHttpRuleOutput
	ToForwardingRuleHttpRuleOutputWithContext(context.Context) ForwardingRuleHttpRuleOutput
}

type ForwardingRuleHttpRuleArgs struct {
	// [list] - An array of items in the collection.The action is only performed if each and every condition is met; if no conditions are set, the rule will always be performed.
	Conditions ForwardingRuleHttpRuleConditionArrayInput `pulumi:"conditions"`
	// [string] Valid only for STATIC actions.
	ContentType pulumi.StringPtrInput `pulumi:"contentType"`
	// [bool] Default is false; valid only for REDIRECT actions.
	DropQuery pulumi.BoolPtrInput `pulumi:"dropQuery"`
	// [string] The location for redirecting; mandatory and valid only for REDIRECT actions.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// [string] The unique name of the Application Load Balancer HTTP rule.
	Name pulumi.StringInput `pulumi:"name"`
	// [string] The response message of the request; mandatory for STATIC action.
	ResponseMessage pulumi.StringPtrInput `pulumi:"responseMessage"`
	// [int] Valid only for REDIRECT and STATIC actions. For REDIRECT actions, default is 301 and possible values are 301, 302, 303, 307, and 308. For STATIC actions, default is 503 and valid range is 200 to 599.
	StatusCode pulumi.IntPtrInput `pulumi:"statusCode"`
	// [string] The UUID of the target group; mandatory for FORWARD action.
	TargetGroup pulumi.StringPtrInput `pulumi:"targetGroup"`
	// [string] Type of the Http Rule.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ForwardingRuleHttpRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardingRuleHttpRule)(nil)).Elem()
}

func (i ForwardingRuleHttpRuleArgs) ToForwardingRuleHttpRuleOutput() ForwardingRuleHttpRuleOutput {
	return i.ToForwardingRuleHttpRuleOutputWithContext(context.Background())
}

func (i ForwardingRuleHttpRuleArgs) ToForwardingRuleHttpRuleOutputWithContext(ctx context.Context) ForwardingRuleHttpRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardingRuleHttpRuleOutput)
}

// ForwardingRuleHttpRuleArrayInput is an input type that accepts ForwardingRuleHttpRuleArray and ForwardingRuleHttpRuleArrayOutput values.
// You can construct a concrete instance of `ForwardingRuleHttpRuleArrayInput` via:
//
//	ForwardingRuleHttpRuleArray{ ForwardingRuleHttpRuleArgs{...} }
type ForwardingRuleHttpRuleArrayInput interface {
	pulumi.Input

	ToForwardingRuleHttpRuleArrayOutput() ForwardingRuleHttpRuleArrayOutput
	ToForwardingRuleHttpRuleArrayOutputWithContext(context.Context) ForwardingRuleHttpRuleArrayOutput
}

type ForwardingRuleHttpRuleArray []ForwardingRuleHttpRuleInput

func (ForwardingRuleHttpRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ForwardingRuleHttpRule)(nil)).Elem()
}

func (i ForwardingRuleHttpRuleArray) ToForwardingRuleHttpRuleArrayOutput() ForwardingRuleHttpRuleArrayOutput {
	return i.ToForwardingRuleHttpRuleArrayOutputWithContext(context.Background())
}

func (i ForwardingRuleHttpRuleArray) ToForwardingRuleHttpRuleArrayOutputWithContext(ctx context.Context) ForwardingRuleHttpRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardingRuleHttpRuleArrayOutput)
}

type ForwardingRuleHttpRuleOutput struct{ *pulumi.OutputState }

func (ForwardingRuleHttpRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardingRuleHttpRule)(nil)).Elem()
}

func (o ForwardingRuleHttpRuleOutput) ToForwardingRuleHttpRuleOutput() ForwardingRuleHttpRuleOutput {
	return o
}

func (o ForwardingRuleHttpRuleOutput) ToForwardingRuleHttpRuleOutputWithContext(ctx context.Context) ForwardingRuleHttpRuleOutput {
	return o
}

// [list] - An array of items in the collection.The action is only performed if each and every condition is met; if no conditions are set, the rule will always be performed.
func (o ForwardingRuleHttpRuleOutput) Conditions() ForwardingRuleHttpRuleConditionArrayOutput {
	return o.ApplyT(func(v ForwardingRuleHttpRule) []ForwardingRuleHttpRuleCondition { return v.Conditions }).(ForwardingRuleHttpRuleConditionArrayOutput)
}

// [string] Valid only for STATIC actions.
func (o ForwardingRuleHttpRuleOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardingRuleHttpRule) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

// [bool] Default is false; valid only for REDIRECT actions.
func (o ForwardingRuleHttpRuleOutput) DropQuery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ForwardingRuleHttpRule) *bool { return v.DropQuery }).(pulumi.BoolPtrOutput)
}

// [string] The location for redirecting; mandatory and valid only for REDIRECT actions.
func (o ForwardingRuleHttpRuleOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardingRuleHttpRule) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// [string] The unique name of the Application Load Balancer HTTP rule.
func (o ForwardingRuleHttpRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardingRuleHttpRule) string { return v.Name }).(pulumi.StringOutput)
}

// [string] The response message of the request; mandatory for STATIC action.
func (o ForwardingRuleHttpRuleOutput) ResponseMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardingRuleHttpRule) *string { return v.ResponseMessage }).(pulumi.StringPtrOutput)
}

// [int] Valid only for REDIRECT and STATIC actions. For REDIRECT actions, default is 301 and possible values are 301, 302, 303, 307, and 308. For STATIC actions, default is 503 and valid range is 200 to 599.
func (o ForwardingRuleHttpRuleOutput) StatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ForwardingRuleHttpRule) *int { return v.StatusCode }).(pulumi.IntPtrOutput)
}

// [string] The UUID of the target group; mandatory for FORWARD action.
func (o ForwardingRuleHttpRuleOutput) TargetGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardingRuleHttpRule) *string { return v.TargetGroup }).(pulumi.StringPtrOutput)
}

// [string] Type of the Http Rule.
func (o ForwardingRuleHttpRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardingRuleHttpRule) string { return v.Type }).(pulumi.StringOutput)
}

type ForwardingRuleHttpRuleArrayOutput struct{ *pulumi.OutputState }

func (ForwardingRuleHttpRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ForwardingRuleHttpRule)(nil)).Elem()
}

func (o ForwardingRuleHttpRuleArrayOutput) ToForwardingRuleHttpRuleArrayOutput() ForwardingRuleHttpRuleArrayOutput {
	return o
}

func (o ForwardingRuleHttpRuleArrayOutput) ToForwardingRuleHttpRuleArrayOutputWithContext(ctx context.Context) ForwardingRuleHttpRuleArrayOutput {
	return o
}

func (o ForwardingRuleHttpRuleArrayOutput) Index(i pulumi.IntInput) ForwardingRuleHttpRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ForwardingRuleHttpRule {
		return vs[0].([]ForwardingRuleHttpRule)[vs[1].(int)]
	}).(ForwardingRuleHttpRuleOutput)
}

type ForwardingRuleHttpRuleCondition struct {
	// [string] Matching rule for the HTTP rule condition attribute; mandatory for HEADER, PATH, QUERY, METHOD, HOST, and COOKIE types; must be null when type is SOURCE_IP.
	Condition *string `pulumi:"condition"`
	// [string] Must be null when type is PATH, METHOD, HOST, or SOURCE_IP. Key can only be set when type is COOKIES, HEADER, or QUERY.
	Key *string `pulumi:"key"`
	// [bool] Specifies whether the condition is negated or not; the default is False.
	Negate *bool `pulumi:"negate"`
	// [string] Type of the Http Rule condition.
	Type string `pulumi:"type"`
	// [string] Mandatory for conditions CONTAINS, EQUALS, MATCHES, STARTS_WITH, ENDS_WITH; must be null when condition is EXISTS; should be a valid CIDR if provided and if type is SOURCE_IP.
	Value *string `pulumi:"value"`
}

// ForwardingRuleHttpRuleConditionInput is an input type that accepts ForwardingRuleHttpRuleConditionArgs and ForwardingRuleHttpRuleConditionOutput values.
// You can construct a concrete instance of `ForwardingRuleHttpRuleConditionInput` via:
//
//	ForwardingRuleHttpRuleConditionArgs{...}
type ForwardingRuleHttpRuleConditionInput interface {
	pulumi.Input

	ToForwardingRuleHttpRuleConditionOutput() ForwardingRuleHttpRuleConditionOutput
	ToForwardingRuleHttpRuleConditionOutputWithContext(context.Context) ForwardingRuleHttpRuleConditionOutput
}

type ForwardingRuleHttpRuleConditionArgs struct {
	// [string] Matching rule for the HTTP rule condition attribute; mandatory for HEADER, PATH, QUERY, METHOD, HOST, and COOKIE types; must be null when type is SOURCE_IP.
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// [string] Must be null when type is PATH, METHOD, HOST, or SOURCE_IP. Key can only be set when type is COOKIES, HEADER, or QUERY.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// [bool] Specifies whether the condition is negated or not; the default is False.
	Negate pulumi.BoolPtrInput `pulumi:"negate"`
	// [string] Type of the Http Rule condition.
	Type pulumi.StringInput `pulumi:"type"`
	// [string] Mandatory for conditions CONTAINS, EQUALS, MATCHES, STARTS_WITH, ENDS_WITH; must be null when condition is EXISTS; should be a valid CIDR if provided and if type is SOURCE_IP.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ForwardingRuleHttpRuleConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardingRuleHttpRuleCondition)(nil)).Elem()
}

func (i ForwardingRuleHttpRuleConditionArgs) ToForwardingRuleHttpRuleConditionOutput() ForwardingRuleHttpRuleConditionOutput {
	return i.ToForwardingRuleHttpRuleConditionOutputWithContext(context.Background())
}

func (i ForwardingRuleHttpRuleConditionArgs) ToForwardingRuleHttpRuleConditionOutputWithContext(ctx context.Context) ForwardingRuleHttpRuleConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardingRuleHttpRuleConditionOutput)
}

// ForwardingRuleHttpRuleConditionArrayInput is an input type that accepts ForwardingRuleHttpRuleConditionArray and ForwardingRuleHttpRuleConditionArrayOutput values.
// You can construct a concrete instance of `ForwardingRuleHttpRuleConditionArrayInput` via:
//
//	ForwardingRuleHttpRuleConditionArray{ ForwardingRuleHttpRuleConditionArgs{...} }
type ForwardingRuleHttpRuleConditionArrayInput interface {
	pulumi.Input

	ToForwardingRuleHttpRuleConditionArrayOutput() ForwardingRuleHttpRuleConditionArrayOutput
	ToForwardingRuleHttpRuleConditionArrayOutputWithContext(context.Context) ForwardingRuleHttpRuleConditionArrayOutput
}

type ForwardingRuleHttpRuleConditionArray []ForwardingRuleHttpRuleConditionInput

func (ForwardingRuleHttpRuleConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ForwardingRuleHttpRuleCondition)(nil)).Elem()
}

func (i ForwardingRuleHttpRuleConditionArray) ToForwardingRuleHttpRuleConditionArrayOutput() ForwardingRuleHttpRuleConditionArrayOutput {
	return i.ToForwardingRuleHttpRuleConditionArrayOutputWithContext(context.Background())
}

func (i ForwardingRuleHttpRuleConditionArray) ToForwardingRuleHttpRuleConditionArrayOutputWithContext(ctx context.Context) ForwardingRuleHttpRuleConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardingRuleHttpRuleConditionArrayOutput)
}

type ForwardingRuleHttpRuleConditionOutput struct{ *pulumi.OutputState }

func (ForwardingRuleHttpRuleConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardingRuleHttpRuleCondition)(nil)).Elem()
}

func (o ForwardingRuleHttpRuleConditionOutput) ToForwardingRuleHttpRuleConditionOutput() ForwardingRuleHttpRuleConditionOutput {
	return o
}

func (o ForwardingRuleHttpRuleConditionOutput) ToForwardingRuleHttpRuleConditionOutputWithContext(ctx context.Context) ForwardingRuleHttpRuleConditionOutput {
	return o
}

// [string] Matching rule for the HTTP rule condition attribute; mandatory for HEADER, PATH, QUERY, METHOD, HOST, and COOKIE types; must be null when type is SOURCE_IP.
func (o ForwardingRuleHttpRuleConditionOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardingRuleHttpRuleCondition) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// [string] Must be null when type is PATH, METHOD, HOST, or SOURCE_IP. Key can only be set when type is COOKIES, HEADER, or QUERY.
func (o ForwardingRuleHttpRuleConditionOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardingRuleHttpRuleCondition) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// [bool] Specifies whether the condition is negated or not; the default is False.
func (o ForwardingRuleHttpRuleConditionOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ForwardingRuleHttpRuleCondition) *bool { return v.Negate }).(pulumi.BoolPtrOutput)
}

// [string] Type of the Http Rule condition.
func (o ForwardingRuleHttpRuleConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardingRuleHttpRuleCondition) string { return v.Type }).(pulumi.StringOutput)
}

// [string] Mandatory for conditions CONTAINS, EQUALS, MATCHES, STARTS_WITH, ENDS_WITH; must be null when condition is EXISTS; should be a valid CIDR if provided and if type is SOURCE_IP.
func (o ForwardingRuleHttpRuleConditionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardingRuleHttpRuleCondition) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ForwardingRuleHttpRuleConditionArrayOutput struct{ *pulumi.OutputState }

func (ForwardingRuleHttpRuleConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ForwardingRuleHttpRuleCondition)(nil)).Elem()
}

func (o ForwardingRuleHttpRuleConditionArrayOutput) ToForwardingRuleHttpRuleConditionArrayOutput() ForwardingRuleHttpRuleConditionArrayOutput {
	return o
}

func (o ForwardingRuleHttpRuleConditionArrayOutput) ToForwardingRuleHttpRuleConditionArrayOutputWithContext(ctx context.Context) ForwardingRuleHttpRuleConditionArrayOutput {
	return o
}

func (o ForwardingRuleHttpRuleConditionArrayOutput) Index(i pulumi.IntInput) ForwardingRuleHttpRuleConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ForwardingRuleHttpRuleCondition {
		return vs[0].([]ForwardingRuleHttpRuleCondition)[vs[1].(int)]
	}).(ForwardingRuleHttpRuleConditionOutput)
}

type GetBalancerFlowlog struct {
	// Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, forces re-creation.
	Action string `pulumi:"action"`
	// Specifies the IONOS Object Storage bucket where the flow log data will be stored. The bucket must exist. Immutable, forces re-creation.
	Bucket string `pulumi:"bucket"`
	// Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, forces re-creation.
	Direction string `pulumi:"direction"`
	// ID of the application load balancer you want to search for.
	Id string `pulumi:"id"`
	// Name of an existing application load balancer that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partialMatch` parameter is not set to true.
	Name string `pulumi:"name"`
}

// GetBalancerFlowlogInput is an input type that accepts GetBalancerFlowlogArgs and GetBalancerFlowlogOutput values.
// You can construct a concrete instance of `GetBalancerFlowlogInput` via:
//
//	GetBalancerFlowlogArgs{...}
type GetBalancerFlowlogInput interface {
	pulumi.Input

	ToGetBalancerFlowlogOutput() GetBalancerFlowlogOutput
	ToGetBalancerFlowlogOutputWithContext(context.Context) GetBalancerFlowlogOutput
}

type GetBalancerFlowlogArgs struct {
	// Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, forces re-creation.
	Action pulumi.StringInput `pulumi:"action"`
	// Specifies the IONOS Object Storage bucket where the flow log data will be stored. The bucket must exist. Immutable, forces re-creation.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, forces re-creation.
	Direction pulumi.StringInput `pulumi:"direction"`
	// ID of the application load balancer you want to search for.
	Id pulumi.StringInput `pulumi:"id"`
	// Name of an existing application load balancer that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partialMatch` parameter is not set to true.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetBalancerFlowlogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBalancerFlowlog)(nil)).Elem()
}

func (i GetBalancerFlowlogArgs) ToGetBalancerFlowlogOutput() GetBalancerFlowlogOutput {
	return i.ToGetBalancerFlowlogOutputWithContext(context.Background())
}

func (i GetBalancerFlowlogArgs) ToGetBalancerFlowlogOutputWithContext(ctx context.Context) GetBalancerFlowlogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBalancerFlowlogOutput)
}

// GetBalancerFlowlogArrayInput is an input type that accepts GetBalancerFlowlogArray and GetBalancerFlowlogArrayOutput values.
// You can construct a concrete instance of `GetBalancerFlowlogArrayInput` via:
//
//	GetBalancerFlowlogArray{ GetBalancerFlowlogArgs{...} }
type GetBalancerFlowlogArrayInput interface {
	pulumi.Input

	ToGetBalancerFlowlogArrayOutput() GetBalancerFlowlogArrayOutput
	ToGetBalancerFlowlogArrayOutputWithContext(context.Context) GetBalancerFlowlogArrayOutput
}

type GetBalancerFlowlogArray []GetBalancerFlowlogInput

func (GetBalancerFlowlogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBalancerFlowlog)(nil)).Elem()
}

func (i GetBalancerFlowlogArray) ToGetBalancerFlowlogArrayOutput() GetBalancerFlowlogArrayOutput {
	return i.ToGetBalancerFlowlogArrayOutputWithContext(context.Background())
}

func (i GetBalancerFlowlogArray) ToGetBalancerFlowlogArrayOutputWithContext(ctx context.Context) GetBalancerFlowlogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBalancerFlowlogArrayOutput)
}

type GetBalancerFlowlogOutput struct{ *pulumi.OutputState }

func (GetBalancerFlowlogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBalancerFlowlog)(nil)).Elem()
}

func (o GetBalancerFlowlogOutput) ToGetBalancerFlowlogOutput() GetBalancerFlowlogOutput {
	return o
}

func (o GetBalancerFlowlogOutput) ToGetBalancerFlowlogOutputWithContext(ctx context.Context) GetBalancerFlowlogOutput {
	return o
}

// Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, forces re-creation.
func (o GetBalancerFlowlogOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetBalancerFlowlog) string { return v.Action }).(pulumi.StringOutput)
}

// Specifies the IONOS Object Storage bucket where the flow log data will be stored. The bucket must exist. Immutable, forces re-creation.
func (o GetBalancerFlowlogOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v GetBalancerFlowlog) string { return v.Bucket }).(pulumi.StringOutput)
}

// Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, forces re-creation.
func (o GetBalancerFlowlogOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v GetBalancerFlowlog) string { return v.Direction }).(pulumi.StringOutput)
}

// ID of the application load balancer you want to search for.
func (o GetBalancerFlowlogOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBalancerFlowlog) string { return v.Id }).(pulumi.StringOutput)
}

// Name of an existing application load balancer that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partialMatch` parameter is not set to true.
func (o GetBalancerFlowlogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetBalancerFlowlog) string { return v.Name }).(pulumi.StringOutput)
}

type GetBalancerFlowlogArrayOutput struct{ *pulumi.OutputState }

func (GetBalancerFlowlogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBalancerFlowlog)(nil)).Elem()
}

func (o GetBalancerFlowlogArrayOutput) ToGetBalancerFlowlogArrayOutput() GetBalancerFlowlogArrayOutput {
	return o
}

func (o GetBalancerFlowlogArrayOutput) ToGetBalancerFlowlogArrayOutputWithContext(ctx context.Context) GetBalancerFlowlogArrayOutput {
	return o
}

func (o GetBalancerFlowlogArrayOutput) Index(i pulumi.IntInput) GetBalancerFlowlogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBalancerFlowlog {
		return vs[0].([]GetBalancerFlowlog)[vs[1].(int)]
	}).(GetBalancerFlowlogOutput)
}

type GetForwardingRuleHttpRule struct {
	// An array of items in the collection.The action is only performed if each and every condition is met; if no conditions are set, the rule will always be performed.
	Conditions []GetForwardingRuleHttpRuleCondition `pulumi:"conditions"`
	// Valid only for STATIC actions.
	ContentType string `pulumi:"contentType"`
	// Default is false; valid only for REDIRECT actions.
	DropQuery bool `pulumi:"dropQuery"`
	// The location for redirecting; mandatory and valid only for REDIRECT actions.
	Location string `pulumi:"location"`
	// Name of an existing application load balancer that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partialMatch` parameter is not set to true.
	Name string `pulumi:"name"`
	// The response message of the request; mandatory for STATIC action.
	ResponseMessage string `pulumi:"responseMessage"`
	// Valid only for REDIRECT and STATIC actions. For REDIRECT actions, default is 301 and possible values are 301, 302, 303, 307, and 308. For STATIC actions, default is 503 and valid range is 200 to 599.
	StatusCode int `pulumi:"statusCode"`
	// The UUID of the target group; mandatory for FORWARD action.
	TargetGroup string `pulumi:"targetGroup"`
	// Type of the Http Rule condition.
	Type string `pulumi:"type"`
}

// GetForwardingRuleHttpRuleInput is an input type that accepts GetForwardingRuleHttpRuleArgs and GetForwardingRuleHttpRuleOutput values.
// You can construct a concrete instance of `GetForwardingRuleHttpRuleInput` via:
//
//	GetForwardingRuleHttpRuleArgs{...}
type GetForwardingRuleHttpRuleInput interface {
	pulumi.Input

	ToGetForwardingRuleHttpRuleOutput() GetForwardingRuleHttpRuleOutput
	ToGetForwardingRuleHttpRuleOutputWithContext(context.Context) GetForwardingRuleHttpRuleOutput
}

type GetForwardingRuleHttpRuleArgs struct {
	// An array of items in the collection.The action is only performed if each and every condition is met; if no conditions are set, the rule will always be performed.
	Conditions GetForwardingRuleHttpRuleConditionArrayInput `pulumi:"conditions"`
	// Valid only for STATIC actions.
	ContentType pulumi.StringInput `pulumi:"contentType"`
	// Default is false; valid only for REDIRECT actions.
	DropQuery pulumi.BoolInput `pulumi:"dropQuery"`
	// The location for redirecting; mandatory and valid only for REDIRECT actions.
	Location pulumi.StringInput `pulumi:"location"`
	// Name of an existing application load balancer that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partialMatch` parameter is not set to true.
	Name pulumi.StringInput `pulumi:"name"`
	// The response message of the request; mandatory for STATIC action.
	ResponseMessage pulumi.StringInput `pulumi:"responseMessage"`
	// Valid only for REDIRECT and STATIC actions. For REDIRECT actions, default is 301 and possible values are 301, 302, 303, 307, and 308. For STATIC actions, default is 503 and valid range is 200 to 599.
	StatusCode pulumi.IntInput `pulumi:"statusCode"`
	// The UUID of the target group; mandatory for FORWARD action.
	TargetGroup pulumi.StringInput `pulumi:"targetGroup"`
	// Type of the Http Rule condition.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetForwardingRuleHttpRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetForwardingRuleHttpRule)(nil)).Elem()
}

func (i GetForwardingRuleHttpRuleArgs) ToGetForwardingRuleHttpRuleOutput() GetForwardingRuleHttpRuleOutput {
	return i.ToGetForwardingRuleHttpRuleOutputWithContext(context.Background())
}

func (i GetForwardingRuleHttpRuleArgs) ToGetForwardingRuleHttpRuleOutputWithContext(ctx context.Context) GetForwardingRuleHttpRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetForwardingRuleHttpRuleOutput)
}

// GetForwardingRuleHttpRuleArrayInput is an input type that accepts GetForwardingRuleHttpRuleArray and GetForwardingRuleHttpRuleArrayOutput values.
// You can construct a concrete instance of `GetForwardingRuleHttpRuleArrayInput` via:
//
//	GetForwardingRuleHttpRuleArray{ GetForwardingRuleHttpRuleArgs{...} }
type GetForwardingRuleHttpRuleArrayInput interface {
	pulumi.Input

	ToGetForwardingRuleHttpRuleArrayOutput() GetForwardingRuleHttpRuleArrayOutput
	ToGetForwardingRuleHttpRuleArrayOutputWithContext(context.Context) GetForwardingRuleHttpRuleArrayOutput
}

type GetForwardingRuleHttpRuleArray []GetForwardingRuleHttpRuleInput

func (GetForwardingRuleHttpRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetForwardingRuleHttpRule)(nil)).Elem()
}

func (i GetForwardingRuleHttpRuleArray) ToGetForwardingRuleHttpRuleArrayOutput() GetForwardingRuleHttpRuleArrayOutput {
	return i.ToGetForwardingRuleHttpRuleArrayOutputWithContext(context.Background())
}

func (i GetForwardingRuleHttpRuleArray) ToGetForwardingRuleHttpRuleArrayOutputWithContext(ctx context.Context) GetForwardingRuleHttpRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetForwardingRuleHttpRuleArrayOutput)
}

type GetForwardingRuleHttpRuleOutput struct{ *pulumi.OutputState }

func (GetForwardingRuleHttpRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetForwardingRuleHttpRule)(nil)).Elem()
}

func (o GetForwardingRuleHttpRuleOutput) ToGetForwardingRuleHttpRuleOutput() GetForwardingRuleHttpRuleOutput {
	return o
}

func (o GetForwardingRuleHttpRuleOutput) ToGetForwardingRuleHttpRuleOutputWithContext(ctx context.Context) GetForwardingRuleHttpRuleOutput {
	return o
}

// An array of items in the collection.The action is only performed if each and every condition is met; if no conditions are set, the rule will always be performed.
func (o GetForwardingRuleHttpRuleOutput) Conditions() GetForwardingRuleHttpRuleConditionArrayOutput {
	return o.ApplyT(func(v GetForwardingRuleHttpRule) []GetForwardingRuleHttpRuleCondition { return v.Conditions }).(GetForwardingRuleHttpRuleConditionArrayOutput)
}

// Valid only for STATIC actions.
func (o GetForwardingRuleHttpRuleOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v GetForwardingRuleHttpRule) string { return v.ContentType }).(pulumi.StringOutput)
}

// Default is false; valid only for REDIRECT actions.
func (o GetForwardingRuleHttpRuleOutput) DropQuery() pulumi.BoolOutput {
	return o.ApplyT(func(v GetForwardingRuleHttpRule) bool { return v.DropQuery }).(pulumi.BoolOutput)
}

// The location for redirecting; mandatory and valid only for REDIRECT actions.
func (o GetForwardingRuleHttpRuleOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetForwardingRuleHttpRule) string { return v.Location }).(pulumi.StringOutput)
}

// Name of an existing application load balancer that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partialMatch` parameter is not set to true.
func (o GetForwardingRuleHttpRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetForwardingRuleHttpRule) string { return v.Name }).(pulumi.StringOutput)
}

// The response message of the request; mandatory for STATIC action.
func (o GetForwardingRuleHttpRuleOutput) ResponseMessage() pulumi.StringOutput {
	return o.ApplyT(func(v GetForwardingRuleHttpRule) string { return v.ResponseMessage }).(pulumi.StringOutput)
}

// Valid only for REDIRECT and STATIC actions. For REDIRECT actions, default is 301 and possible values are 301, 302, 303, 307, and 308. For STATIC actions, default is 503 and valid range is 200 to 599.
func (o GetForwardingRuleHttpRuleOutput) StatusCode() pulumi.IntOutput {
	return o.ApplyT(func(v GetForwardingRuleHttpRule) int { return v.StatusCode }).(pulumi.IntOutput)
}

// The UUID of the target group; mandatory for FORWARD action.
func (o GetForwardingRuleHttpRuleOutput) TargetGroup() pulumi.StringOutput {
	return o.ApplyT(func(v GetForwardingRuleHttpRule) string { return v.TargetGroup }).(pulumi.StringOutput)
}

// Type of the Http Rule condition.
func (o GetForwardingRuleHttpRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetForwardingRuleHttpRule) string { return v.Type }).(pulumi.StringOutput)
}

type GetForwardingRuleHttpRuleArrayOutput struct{ *pulumi.OutputState }

func (GetForwardingRuleHttpRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetForwardingRuleHttpRule)(nil)).Elem()
}

func (o GetForwardingRuleHttpRuleArrayOutput) ToGetForwardingRuleHttpRuleArrayOutput() GetForwardingRuleHttpRuleArrayOutput {
	return o
}

func (o GetForwardingRuleHttpRuleArrayOutput) ToGetForwardingRuleHttpRuleArrayOutputWithContext(ctx context.Context) GetForwardingRuleHttpRuleArrayOutput {
	return o
}

func (o GetForwardingRuleHttpRuleArrayOutput) Index(i pulumi.IntInput) GetForwardingRuleHttpRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetForwardingRuleHttpRule {
		return vs[0].([]GetForwardingRuleHttpRule)[vs[1].(int)]
	}).(GetForwardingRuleHttpRuleOutput)
}

type GetForwardingRuleHttpRuleCondition struct {
	// Matching rule for the HTTP rule condition attribute; mandatory for HEADER, PATH, QUERY, METHOD, HOST, and COOKIE types; must be null when type is SOURCE_IP.
	Condition string `pulumi:"condition"`
	// Must be null when type is PATH, METHOD, HOST, or SOURCE_IP. Key can only be set when type is COOKIES, HEADER, or QUERY.
	Key string `pulumi:"key"`
	// Specifies whether the condition is negated or not; the default is False.
	Negate bool `pulumi:"negate"`
	// Type of the Http Rule condition.
	Type string `pulumi:"type"`
	// Mandatory for conditions CONTAINS, EQUALS, MATCHES, STARTS_WITH, ENDS_WITH; must be null when condition is EXISTS; should be a valid CIDR if provided and if type is SOURCE_IP.
	Value string `pulumi:"value"`
}

// GetForwardingRuleHttpRuleConditionInput is an input type that accepts GetForwardingRuleHttpRuleConditionArgs and GetForwardingRuleHttpRuleConditionOutput values.
// You can construct a concrete instance of `GetForwardingRuleHttpRuleConditionInput` via:
//
//	GetForwardingRuleHttpRuleConditionArgs{...}
type GetForwardingRuleHttpRuleConditionInput interface {
	pulumi.Input

	ToGetForwardingRuleHttpRuleConditionOutput() GetForwardingRuleHttpRuleConditionOutput
	ToGetForwardingRuleHttpRuleConditionOutputWithContext(context.Context) GetForwardingRuleHttpRuleConditionOutput
}

type GetForwardingRuleHttpRuleConditionArgs struct {
	// Matching rule for the HTTP rule condition attribute; mandatory for HEADER, PATH, QUERY, METHOD, HOST, and COOKIE types; must be null when type is SOURCE_IP.
	Condition pulumi.StringInput `pulumi:"condition"`
	// Must be null when type is PATH, METHOD, HOST, or SOURCE_IP. Key can only be set when type is COOKIES, HEADER, or QUERY.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies whether the condition is negated or not; the default is False.
	Negate pulumi.BoolInput `pulumi:"negate"`
	// Type of the Http Rule condition.
	Type pulumi.StringInput `pulumi:"type"`
	// Mandatory for conditions CONTAINS, EQUALS, MATCHES, STARTS_WITH, ENDS_WITH; must be null when condition is EXISTS; should be a valid CIDR if provided and if type is SOURCE_IP.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetForwardingRuleHttpRuleConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetForwardingRuleHttpRuleCondition)(nil)).Elem()
}

func (i GetForwardingRuleHttpRuleConditionArgs) ToGetForwardingRuleHttpRuleConditionOutput() GetForwardingRuleHttpRuleConditionOutput {
	return i.ToGetForwardingRuleHttpRuleConditionOutputWithContext(context.Background())
}

func (i GetForwardingRuleHttpRuleConditionArgs) ToGetForwardingRuleHttpRuleConditionOutputWithContext(ctx context.Context) GetForwardingRuleHttpRuleConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetForwardingRuleHttpRuleConditionOutput)
}

// GetForwardingRuleHttpRuleConditionArrayInput is an input type that accepts GetForwardingRuleHttpRuleConditionArray and GetForwardingRuleHttpRuleConditionArrayOutput values.
// You can construct a concrete instance of `GetForwardingRuleHttpRuleConditionArrayInput` via:
//
//	GetForwardingRuleHttpRuleConditionArray{ GetForwardingRuleHttpRuleConditionArgs{...} }
type GetForwardingRuleHttpRuleConditionArrayInput interface {
	pulumi.Input

	ToGetForwardingRuleHttpRuleConditionArrayOutput() GetForwardingRuleHttpRuleConditionArrayOutput
	ToGetForwardingRuleHttpRuleConditionArrayOutputWithContext(context.Context) GetForwardingRuleHttpRuleConditionArrayOutput
}

type GetForwardingRuleHttpRuleConditionArray []GetForwardingRuleHttpRuleConditionInput

func (GetForwardingRuleHttpRuleConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetForwardingRuleHttpRuleCondition)(nil)).Elem()
}

func (i GetForwardingRuleHttpRuleConditionArray) ToGetForwardingRuleHttpRuleConditionArrayOutput() GetForwardingRuleHttpRuleConditionArrayOutput {
	return i.ToGetForwardingRuleHttpRuleConditionArrayOutputWithContext(context.Background())
}

func (i GetForwardingRuleHttpRuleConditionArray) ToGetForwardingRuleHttpRuleConditionArrayOutputWithContext(ctx context.Context) GetForwardingRuleHttpRuleConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetForwardingRuleHttpRuleConditionArrayOutput)
}

type GetForwardingRuleHttpRuleConditionOutput struct{ *pulumi.OutputState }

func (GetForwardingRuleHttpRuleConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetForwardingRuleHttpRuleCondition)(nil)).Elem()
}

func (o GetForwardingRuleHttpRuleConditionOutput) ToGetForwardingRuleHttpRuleConditionOutput() GetForwardingRuleHttpRuleConditionOutput {
	return o
}

func (o GetForwardingRuleHttpRuleConditionOutput) ToGetForwardingRuleHttpRuleConditionOutputWithContext(ctx context.Context) GetForwardingRuleHttpRuleConditionOutput {
	return o
}

// Matching rule for the HTTP rule condition attribute; mandatory for HEADER, PATH, QUERY, METHOD, HOST, and COOKIE types; must be null when type is SOURCE_IP.
func (o GetForwardingRuleHttpRuleConditionOutput) Condition() pulumi.StringOutput {
	return o.ApplyT(func(v GetForwardingRuleHttpRuleCondition) string { return v.Condition }).(pulumi.StringOutput)
}

// Must be null when type is PATH, METHOD, HOST, or SOURCE_IP. Key can only be set when type is COOKIES, HEADER, or QUERY.
func (o GetForwardingRuleHttpRuleConditionOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetForwardingRuleHttpRuleCondition) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies whether the condition is negated or not; the default is False.
func (o GetForwardingRuleHttpRuleConditionOutput) Negate() pulumi.BoolOutput {
	return o.ApplyT(func(v GetForwardingRuleHttpRuleCondition) bool { return v.Negate }).(pulumi.BoolOutput)
}

// Type of the Http Rule condition.
func (o GetForwardingRuleHttpRuleConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetForwardingRuleHttpRuleCondition) string { return v.Type }).(pulumi.StringOutput)
}

// Mandatory for conditions CONTAINS, EQUALS, MATCHES, STARTS_WITH, ENDS_WITH; must be null when condition is EXISTS; should be a valid CIDR if provided and if type is SOURCE_IP.
func (o GetForwardingRuleHttpRuleConditionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetForwardingRuleHttpRuleCondition) string { return v.Value }).(pulumi.StringOutput)
}

type GetForwardingRuleHttpRuleConditionArrayOutput struct{ *pulumi.OutputState }

func (GetForwardingRuleHttpRuleConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetForwardingRuleHttpRuleCondition)(nil)).Elem()
}

func (o GetForwardingRuleHttpRuleConditionArrayOutput) ToGetForwardingRuleHttpRuleConditionArrayOutput() GetForwardingRuleHttpRuleConditionArrayOutput {
	return o
}

func (o GetForwardingRuleHttpRuleConditionArrayOutput) ToGetForwardingRuleHttpRuleConditionArrayOutputWithContext(ctx context.Context) GetForwardingRuleHttpRuleConditionArrayOutput {
	return o
}

func (o GetForwardingRuleHttpRuleConditionArrayOutput) Index(i pulumi.IntInput) GetForwardingRuleHttpRuleConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetForwardingRuleHttpRuleCondition {
		return vs[0].([]GetForwardingRuleHttpRuleCondition)[vs[1].(int)]
	}).(GetForwardingRuleHttpRuleConditionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BalancerFlowlogInput)(nil)).Elem(), BalancerFlowlogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BalancerFlowlogPtrInput)(nil)).Elem(), BalancerFlowlogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForwardingRuleHttpRuleInput)(nil)).Elem(), ForwardingRuleHttpRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForwardingRuleHttpRuleArrayInput)(nil)).Elem(), ForwardingRuleHttpRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForwardingRuleHttpRuleConditionInput)(nil)).Elem(), ForwardingRuleHttpRuleConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForwardingRuleHttpRuleConditionArrayInput)(nil)).Elem(), ForwardingRuleHttpRuleConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBalancerFlowlogInput)(nil)).Elem(), GetBalancerFlowlogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBalancerFlowlogArrayInput)(nil)).Elem(), GetBalancerFlowlogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetForwardingRuleHttpRuleInput)(nil)).Elem(), GetForwardingRuleHttpRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetForwardingRuleHttpRuleArrayInput)(nil)).Elem(), GetForwardingRuleHttpRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetForwardingRuleHttpRuleConditionInput)(nil)).Elem(), GetForwardingRuleHttpRuleConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetForwardingRuleHttpRuleConditionArrayInput)(nil)).Elem(), GetForwardingRuleHttpRuleConditionArray{})
	pulumi.RegisterOutputType(BalancerFlowlogOutput{})
	pulumi.RegisterOutputType(BalancerFlowlogPtrOutput{})
	pulumi.RegisterOutputType(ForwardingRuleHttpRuleOutput{})
	pulumi.RegisterOutputType(ForwardingRuleHttpRuleArrayOutput{})
	pulumi.RegisterOutputType(ForwardingRuleHttpRuleConditionOutput{})
	pulumi.RegisterOutputType(ForwardingRuleHttpRuleConditionArrayOutput{})
	pulumi.RegisterOutputType(GetBalancerFlowlogOutput{})
	pulumi.RegisterOutputType(GetBalancerFlowlogArrayOutput{})
	pulumi.RegisterOutputType(GetForwardingRuleHttpRuleOutput{})
	pulumi.RegisterOutputType(GetForwardingRuleHttpRuleArrayOutput{})
	pulumi.RegisterOutputType(GetForwardingRuleHttpRuleConditionOutput{})
	pulumi.RegisterOutputType(GetForwardingRuleHttpRuleConditionArrayOutput{})
}
