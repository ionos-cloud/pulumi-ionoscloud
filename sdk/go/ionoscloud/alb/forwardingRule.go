// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ForwardingRule struct {
	pulumi.CustomResourceState

	ApplicationLoadbalancerId pulumi.StringOutput `pulumi:"applicationLoadbalancerId"`
	// The maximum time in milliseconds to wait for the client to acknowledge or send data; default is 50,000 (50 seconds).
	ClientTimeout pulumi.IntOutput    `pulumi:"clientTimeout"`
	DatacenterId  pulumi.StringOutput `pulumi:"datacenterId"`
	// Array of items in that collection
	HttpRules ForwardingRuleHttpRuleArrayOutput `pulumi:"httpRules"`
	// Listening (inbound) IP.
	ListenerIp pulumi.StringOutput `pulumi:"listenerIp"`
	// Listening (inbound) port number; valid range is 1 to 65535.
	ListenerPort pulumi.IntOutput `pulumi:"listenerPort"`
	// The name of the Application Load Balancer forwarding rule.
	Name pulumi.StringOutput `pulumi:"name"`
	// Balancing protocol.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Array of items in the collection.
	ServerCertificates pulumi.StringArrayOutput `pulumi:"serverCertificates"`
}

// NewForwardingRule registers a new resource with the given unique name, arguments, and options.
func NewForwardingRule(ctx *pulumi.Context,
	name string, args *ForwardingRuleArgs, opts ...pulumi.ResourceOption) (*ForwardingRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationLoadbalancerId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationLoadbalancerId'")
	}
	if args.DatacenterId == nil {
		return nil, errors.New("invalid value for required argument 'DatacenterId'")
	}
	if args.ListenerIp == nil {
		return nil, errors.New("invalid value for required argument 'ListenerIp'")
	}
	if args.ListenerPort == nil {
		return nil, errors.New("invalid value for required argument 'ListenerPort'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ForwardingRule
	err := ctx.RegisterResource("ionoscloud:alb/forwardingRule:ForwardingRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetForwardingRule gets an existing ForwardingRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetForwardingRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ForwardingRuleState, opts ...pulumi.ResourceOption) (*ForwardingRule, error) {
	var resource ForwardingRule
	err := ctx.ReadResource("ionoscloud:alb/forwardingRule:ForwardingRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ForwardingRule resources.
type forwardingRuleState struct {
	ApplicationLoadbalancerId *string `pulumi:"applicationLoadbalancerId"`
	// The maximum time in milliseconds to wait for the client to acknowledge or send data; default is 50,000 (50 seconds).
	ClientTimeout *int    `pulumi:"clientTimeout"`
	DatacenterId  *string `pulumi:"datacenterId"`
	// Array of items in that collection
	HttpRules []ForwardingRuleHttpRule `pulumi:"httpRules"`
	// Listening (inbound) IP.
	ListenerIp *string `pulumi:"listenerIp"`
	// Listening (inbound) port number; valid range is 1 to 65535.
	ListenerPort *int `pulumi:"listenerPort"`
	// The name of the Application Load Balancer forwarding rule.
	Name *string `pulumi:"name"`
	// Balancing protocol.
	Protocol *string `pulumi:"protocol"`
	// Array of items in the collection.
	ServerCertificates []string `pulumi:"serverCertificates"`
}

type ForwardingRuleState struct {
	ApplicationLoadbalancerId pulumi.StringPtrInput
	// The maximum time in milliseconds to wait for the client to acknowledge or send data; default is 50,000 (50 seconds).
	ClientTimeout pulumi.IntPtrInput
	DatacenterId  pulumi.StringPtrInput
	// Array of items in that collection
	HttpRules ForwardingRuleHttpRuleArrayInput
	// Listening (inbound) IP.
	ListenerIp pulumi.StringPtrInput
	// Listening (inbound) port number; valid range is 1 to 65535.
	ListenerPort pulumi.IntPtrInput
	// The name of the Application Load Balancer forwarding rule.
	Name pulumi.StringPtrInput
	// Balancing protocol.
	Protocol pulumi.StringPtrInput
	// Array of items in the collection.
	ServerCertificates pulumi.StringArrayInput
}

func (ForwardingRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*forwardingRuleState)(nil)).Elem()
}

type forwardingRuleArgs struct {
	ApplicationLoadbalancerId string `pulumi:"applicationLoadbalancerId"`
	// The maximum time in milliseconds to wait for the client to acknowledge or send data; default is 50,000 (50 seconds).
	ClientTimeout *int   `pulumi:"clientTimeout"`
	DatacenterId  string `pulumi:"datacenterId"`
	// Array of items in that collection
	HttpRules []ForwardingRuleHttpRule `pulumi:"httpRules"`
	// Listening (inbound) IP.
	ListenerIp string `pulumi:"listenerIp"`
	// Listening (inbound) port number; valid range is 1 to 65535.
	ListenerPort int `pulumi:"listenerPort"`
	// The name of the Application Load Balancer forwarding rule.
	Name *string `pulumi:"name"`
	// Balancing protocol.
	Protocol string `pulumi:"protocol"`
	// Array of items in the collection.
	ServerCertificates []string `pulumi:"serverCertificates"`
}

// The set of arguments for constructing a ForwardingRule resource.
type ForwardingRuleArgs struct {
	ApplicationLoadbalancerId pulumi.StringInput
	// The maximum time in milliseconds to wait for the client to acknowledge or send data; default is 50,000 (50 seconds).
	ClientTimeout pulumi.IntPtrInput
	DatacenterId  pulumi.StringInput
	// Array of items in that collection
	HttpRules ForwardingRuleHttpRuleArrayInput
	// Listening (inbound) IP.
	ListenerIp pulumi.StringInput
	// Listening (inbound) port number; valid range is 1 to 65535.
	ListenerPort pulumi.IntInput
	// The name of the Application Load Balancer forwarding rule.
	Name pulumi.StringPtrInput
	// Balancing protocol.
	Protocol pulumi.StringInput
	// Array of items in the collection.
	ServerCertificates pulumi.StringArrayInput
}

func (ForwardingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*forwardingRuleArgs)(nil)).Elem()
}

type ForwardingRuleInput interface {
	pulumi.Input

	ToForwardingRuleOutput() ForwardingRuleOutput
	ToForwardingRuleOutputWithContext(ctx context.Context) ForwardingRuleOutput
}

func (*ForwardingRule) ElementType() reflect.Type {
	return reflect.TypeOf((**ForwardingRule)(nil)).Elem()
}

func (i *ForwardingRule) ToForwardingRuleOutput() ForwardingRuleOutput {
	return i.ToForwardingRuleOutputWithContext(context.Background())
}

func (i *ForwardingRule) ToForwardingRuleOutputWithContext(ctx context.Context) ForwardingRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardingRuleOutput)
}

// ForwardingRuleArrayInput is an input type that accepts ForwardingRuleArray and ForwardingRuleArrayOutput values.
// You can construct a concrete instance of `ForwardingRuleArrayInput` via:
//
//	ForwardingRuleArray{ ForwardingRuleArgs{...} }
type ForwardingRuleArrayInput interface {
	pulumi.Input

	ToForwardingRuleArrayOutput() ForwardingRuleArrayOutput
	ToForwardingRuleArrayOutputWithContext(context.Context) ForwardingRuleArrayOutput
}

type ForwardingRuleArray []ForwardingRuleInput

func (ForwardingRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ForwardingRule)(nil)).Elem()
}

func (i ForwardingRuleArray) ToForwardingRuleArrayOutput() ForwardingRuleArrayOutput {
	return i.ToForwardingRuleArrayOutputWithContext(context.Background())
}

func (i ForwardingRuleArray) ToForwardingRuleArrayOutputWithContext(ctx context.Context) ForwardingRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardingRuleArrayOutput)
}

// ForwardingRuleMapInput is an input type that accepts ForwardingRuleMap and ForwardingRuleMapOutput values.
// You can construct a concrete instance of `ForwardingRuleMapInput` via:
//
//	ForwardingRuleMap{ "key": ForwardingRuleArgs{...} }
type ForwardingRuleMapInput interface {
	pulumi.Input

	ToForwardingRuleMapOutput() ForwardingRuleMapOutput
	ToForwardingRuleMapOutputWithContext(context.Context) ForwardingRuleMapOutput
}

type ForwardingRuleMap map[string]ForwardingRuleInput

func (ForwardingRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ForwardingRule)(nil)).Elem()
}

func (i ForwardingRuleMap) ToForwardingRuleMapOutput() ForwardingRuleMapOutput {
	return i.ToForwardingRuleMapOutputWithContext(context.Background())
}

func (i ForwardingRuleMap) ToForwardingRuleMapOutputWithContext(ctx context.Context) ForwardingRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardingRuleMapOutput)
}

type ForwardingRuleOutput struct{ *pulumi.OutputState }

func (ForwardingRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForwardingRule)(nil)).Elem()
}

func (o ForwardingRuleOutput) ToForwardingRuleOutput() ForwardingRuleOutput {
	return o
}

func (o ForwardingRuleOutput) ToForwardingRuleOutputWithContext(ctx context.Context) ForwardingRuleOutput {
	return o
}

func (o ForwardingRuleOutput) ApplicationLoadbalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ForwardingRule) pulumi.StringOutput { return v.ApplicationLoadbalancerId }).(pulumi.StringOutput)
}

// The maximum time in milliseconds to wait for the client to acknowledge or send data; default is 50,000 (50 seconds).
func (o ForwardingRuleOutput) ClientTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *ForwardingRule) pulumi.IntOutput { return v.ClientTimeout }).(pulumi.IntOutput)
}

func (o ForwardingRuleOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ForwardingRule) pulumi.StringOutput { return v.DatacenterId }).(pulumi.StringOutput)
}

// Array of items in that collection
func (o ForwardingRuleOutput) HttpRules() ForwardingRuleHttpRuleArrayOutput {
	return o.ApplyT(func(v *ForwardingRule) ForwardingRuleHttpRuleArrayOutput { return v.HttpRules }).(ForwardingRuleHttpRuleArrayOutput)
}

// Listening (inbound) IP.
func (o ForwardingRuleOutput) ListenerIp() pulumi.StringOutput {
	return o.ApplyT(func(v *ForwardingRule) pulumi.StringOutput { return v.ListenerIp }).(pulumi.StringOutput)
}

// Listening (inbound) port number; valid range is 1 to 65535.
func (o ForwardingRuleOutput) ListenerPort() pulumi.IntOutput {
	return o.ApplyT(func(v *ForwardingRule) pulumi.IntOutput { return v.ListenerPort }).(pulumi.IntOutput)
}

// The name of the Application Load Balancer forwarding rule.
func (o ForwardingRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ForwardingRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Balancing protocol.
func (o ForwardingRuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *ForwardingRule) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Array of items in the collection.
func (o ForwardingRuleOutput) ServerCertificates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ForwardingRule) pulumi.StringArrayOutput { return v.ServerCertificates }).(pulumi.StringArrayOutput)
}

type ForwardingRuleArrayOutput struct{ *pulumi.OutputState }

func (ForwardingRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ForwardingRule)(nil)).Elem()
}

func (o ForwardingRuleArrayOutput) ToForwardingRuleArrayOutput() ForwardingRuleArrayOutput {
	return o
}

func (o ForwardingRuleArrayOutput) ToForwardingRuleArrayOutputWithContext(ctx context.Context) ForwardingRuleArrayOutput {
	return o
}

func (o ForwardingRuleArrayOutput) Index(i pulumi.IntInput) ForwardingRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ForwardingRule {
		return vs[0].([]*ForwardingRule)[vs[1].(int)]
	}).(ForwardingRuleOutput)
}

type ForwardingRuleMapOutput struct{ *pulumi.OutputState }

func (ForwardingRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ForwardingRule)(nil)).Elem()
}

func (o ForwardingRuleMapOutput) ToForwardingRuleMapOutput() ForwardingRuleMapOutput {
	return o
}

func (o ForwardingRuleMapOutput) ToForwardingRuleMapOutputWithContext(ctx context.Context) ForwardingRuleMapOutput {
	return o
}

func (o ForwardingRuleMapOutput) MapIndex(k pulumi.StringInput) ForwardingRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ForwardingRule {
		return vs[0].(map[string]*ForwardingRule)[vs[1].(string)]
	}).(ForwardingRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ForwardingRuleInput)(nil)).Elem(), &ForwardingRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForwardingRuleArrayInput)(nil)).Elem(), ForwardingRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForwardingRuleMapInput)(nil)).Elem(), ForwardingRuleMap{})
	pulumi.RegisterOutputType(ForwardingRuleOutput{})
	pulumi.RegisterOutputType(ForwardingRuleArrayOutput{})
	pulumi.RegisterOutputType(ForwardingRuleMapOutput{})
}
