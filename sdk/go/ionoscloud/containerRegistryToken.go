// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an **Container Registry Token** on IonosCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleContainerRegistry, err := ionoscloud.NewContainerRegistry(ctx, "exampleContainerRegistry", &ionoscloud.ContainerRegistryArgs{
//				GarbageCollectionSchedule: &ionoscloud.ContainerRegistryGarbageCollectionScheduleArgs{
//					Days: pulumi.StringArray{
//						pulumi.String("Monday"),
//						pulumi.String("Tuesday"),
//					},
//					Time: pulumi.String("05:19:00+00:00"),
//				},
//				Location: pulumi.String("de/fra"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ionoscloud.NewContainerRegistryToken(ctx, "exampleContainerRegistryToken", &ionoscloud.ContainerRegistryTokenArgs{
//				ExpiryDate: pulumi.String("2023-01-13 16:27:42Z"),
//				Scopes: ionoscloud.ContainerRegistryTokenScopeArray{
//					&ionoscloud.ContainerRegistryTokenScopeArgs{
//						Actions: pulumi.StringArray{
//							pulumi.String("push"),
//						},
//						Name: pulumi.String("Scope1"),
//						Type: pulumi.String("repository"),
//					},
//				},
//				Status:             pulumi.String("enabled"),
//				RegistryId:         exampleContainerRegistry.ID(),
//				SavePasswordToFile: pulumi.String("pass.txt"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Resource Container Registry Token can be imported using the `container registry id` and `resource id`, e.g.
//
// ```sh
// $ pulumi import ionoscloud:index/containerRegistryToken:ContainerRegistryToken mycrtoken {container_registry uuid}/{container_registry_token uuid}
// ```
type ContainerRegistryToken struct {
	pulumi.CustomResourceState

	Credentials ContainerRegistryTokenCredentialArrayOutput `pulumi:"credentials"`
	ExpiryDate  pulumi.StringPtrOutput                      `pulumi:"expiryDate"`
	// [string] The name of the container registry token. Immutable, update forces re-creation of the resource.
	// * `expiry-date`           - (Optional)[string] The value must be supplied as ISO 8601 timestamp
	Name       pulumi.StringOutput `pulumi:"name"`
	RegistryId pulumi.StringOutput `pulumi:"registryId"`
	// [string] Saves token password to file. Only works on create. Takes as argument a file name, or a file path
	//
	// > **⚠ WARNING** `savePasswordToFile` must be used with caution.
	// It will save the password(token) returned on create to a file. This is the only way to get the token.
	SavePasswordToFile pulumi.StringPtrOutput `pulumi:"savePasswordToFile"`
	// [map]
	Scopes ContainerRegistryTokenScopeArrayOutput `pulumi:"scopes"`
	// [string] Must have on of the values: `enabled`, `disabled`
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewContainerRegistryToken registers a new resource with the given unique name, arguments, and options.
func NewContainerRegistryToken(ctx *pulumi.Context,
	name string, args *ContainerRegistryTokenArgs, opts ...pulumi.ResourceOption) (*ContainerRegistryToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RegistryId == nil {
		return nil, errors.New("invalid value for required argument 'RegistryId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ContainerRegistryToken
	err := ctx.RegisterResource("ionoscloud:index/containerRegistryToken:ContainerRegistryToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainerRegistryToken gets an existing ContainerRegistryToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerRegistryToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerRegistryTokenState, opts ...pulumi.ResourceOption) (*ContainerRegistryToken, error) {
	var resource ContainerRegistryToken
	err := ctx.ReadResource("ionoscloud:index/containerRegistryToken:ContainerRegistryToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContainerRegistryToken resources.
type containerRegistryTokenState struct {
	Credentials []ContainerRegistryTokenCredential `pulumi:"credentials"`
	ExpiryDate  *string                            `pulumi:"expiryDate"`
	// [string] The name of the container registry token. Immutable, update forces re-creation of the resource.
	// * `expiry-date`           - (Optional)[string] The value must be supplied as ISO 8601 timestamp
	Name       *string `pulumi:"name"`
	RegistryId *string `pulumi:"registryId"`
	// [string] Saves token password to file. Only works on create. Takes as argument a file name, or a file path
	//
	// > **⚠ WARNING** `savePasswordToFile` must be used with caution.
	// It will save the password(token) returned on create to a file. This is the only way to get the token.
	SavePasswordToFile *string `pulumi:"savePasswordToFile"`
	// [map]
	Scopes []ContainerRegistryTokenScope `pulumi:"scopes"`
	// [string] Must have on of the values: `enabled`, `disabled`
	Status *string `pulumi:"status"`
}

type ContainerRegistryTokenState struct {
	Credentials ContainerRegistryTokenCredentialArrayInput
	ExpiryDate  pulumi.StringPtrInput
	// [string] The name of the container registry token. Immutable, update forces re-creation of the resource.
	// * `expiry-date`           - (Optional)[string] The value must be supplied as ISO 8601 timestamp
	Name       pulumi.StringPtrInput
	RegistryId pulumi.StringPtrInput
	// [string] Saves token password to file. Only works on create. Takes as argument a file name, or a file path
	//
	// > **⚠ WARNING** `savePasswordToFile` must be used with caution.
	// It will save the password(token) returned on create to a file. This is the only way to get the token.
	SavePasswordToFile pulumi.StringPtrInput
	// [map]
	Scopes ContainerRegistryTokenScopeArrayInput
	// [string] Must have on of the values: `enabled`, `disabled`
	Status pulumi.StringPtrInput
}

func (ContainerRegistryTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerRegistryTokenState)(nil)).Elem()
}

type containerRegistryTokenArgs struct {
	ExpiryDate *string `pulumi:"expiryDate"`
	// [string] The name of the container registry token. Immutable, update forces re-creation of the resource.
	// * `expiry-date`           - (Optional)[string] The value must be supplied as ISO 8601 timestamp
	Name       *string `pulumi:"name"`
	RegistryId string  `pulumi:"registryId"`
	// [string] Saves token password to file. Only works on create. Takes as argument a file name, or a file path
	//
	// > **⚠ WARNING** `savePasswordToFile` must be used with caution.
	// It will save the password(token) returned on create to a file. This is the only way to get the token.
	SavePasswordToFile *string `pulumi:"savePasswordToFile"`
	// [map]
	Scopes []ContainerRegistryTokenScope `pulumi:"scopes"`
	// [string] Must have on of the values: `enabled`, `disabled`
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a ContainerRegistryToken resource.
type ContainerRegistryTokenArgs struct {
	ExpiryDate pulumi.StringPtrInput
	// [string] The name of the container registry token. Immutable, update forces re-creation of the resource.
	// * `expiry-date`           - (Optional)[string] The value must be supplied as ISO 8601 timestamp
	Name       pulumi.StringPtrInput
	RegistryId pulumi.StringInput
	// [string] Saves token password to file. Only works on create. Takes as argument a file name, or a file path
	//
	// > **⚠ WARNING** `savePasswordToFile` must be used with caution.
	// It will save the password(token) returned on create to a file. This is the only way to get the token.
	SavePasswordToFile pulumi.StringPtrInput
	// [map]
	Scopes ContainerRegistryTokenScopeArrayInput
	// [string] Must have on of the values: `enabled`, `disabled`
	Status pulumi.StringPtrInput
}

func (ContainerRegistryTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerRegistryTokenArgs)(nil)).Elem()
}

type ContainerRegistryTokenInput interface {
	pulumi.Input

	ToContainerRegistryTokenOutput() ContainerRegistryTokenOutput
	ToContainerRegistryTokenOutputWithContext(ctx context.Context) ContainerRegistryTokenOutput
}

func (*ContainerRegistryToken) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRegistryToken)(nil)).Elem()
}

func (i *ContainerRegistryToken) ToContainerRegistryTokenOutput() ContainerRegistryTokenOutput {
	return i.ToContainerRegistryTokenOutputWithContext(context.Background())
}

func (i *ContainerRegistryToken) ToContainerRegistryTokenOutputWithContext(ctx context.Context) ContainerRegistryTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRegistryTokenOutput)
}

// ContainerRegistryTokenArrayInput is an input type that accepts ContainerRegistryTokenArray and ContainerRegistryTokenArrayOutput values.
// You can construct a concrete instance of `ContainerRegistryTokenArrayInput` via:
//
//	ContainerRegistryTokenArray{ ContainerRegistryTokenArgs{...} }
type ContainerRegistryTokenArrayInput interface {
	pulumi.Input

	ToContainerRegistryTokenArrayOutput() ContainerRegistryTokenArrayOutput
	ToContainerRegistryTokenArrayOutputWithContext(context.Context) ContainerRegistryTokenArrayOutput
}

type ContainerRegistryTokenArray []ContainerRegistryTokenInput

func (ContainerRegistryTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerRegistryToken)(nil)).Elem()
}

func (i ContainerRegistryTokenArray) ToContainerRegistryTokenArrayOutput() ContainerRegistryTokenArrayOutput {
	return i.ToContainerRegistryTokenArrayOutputWithContext(context.Background())
}

func (i ContainerRegistryTokenArray) ToContainerRegistryTokenArrayOutputWithContext(ctx context.Context) ContainerRegistryTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRegistryTokenArrayOutput)
}

// ContainerRegistryTokenMapInput is an input type that accepts ContainerRegistryTokenMap and ContainerRegistryTokenMapOutput values.
// You can construct a concrete instance of `ContainerRegistryTokenMapInput` via:
//
//	ContainerRegistryTokenMap{ "key": ContainerRegistryTokenArgs{...} }
type ContainerRegistryTokenMapInput interface {
	pulumi.Input

	ToContainerRegistryTokenMapOutput() ContainerRegistryTokenMapOutput
	ToContainerRegistryTokenMapOutputWithContext(context.Context) ContainerRegistryTokenMapOutput
}

type ContainerRegistryTokenMap map[string]ContainerRegistryTokenInput

func (ContainerRegistryTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerRegistryToken)(nil)).Elem()
}

func (i ContainerRegistryTokenMap) ToContainerRegistryTokenMapOutput() ContainerRegistryTokenMapOutput {
	return i.ToContainerRegistryTokenMapOutputWithContext(context.Background())
}

func (i ContainerRegistryTokenMap) ToContainerRegistryTokenMapOutputWithContext(ctx context.Context) ContainerRegistryTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRegistryTokenMapOutput)
}

type ContainerRegistryTokenOutput struct{ *pulumi.OutputState }

func (ContainerRegistryTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRegistryToken)(nil)).Elem()
}

func (o ContainerRegistryTokenOutput) ToContainerRegistryTokenOutput() ContainerRegistryTokenOutput {
	return o
}

func (o ContainerRegistryTokenOutput) ToContainerRegistryTokenOutputWithContext(ctx context.Context) ContainerRegistryTokenOutput {
	return o
}

func (o ContainerRegistryTokenOutput) Credentials() ContainerRegistryTokenCredentialArrayOutput {
	return o.ApplyT(func(v *ContainerRegistryToken) ContainerRegistryTokenCredentialArrayOutput { return v.Credentials }).(ContainerRegistryTokenCredentialArrayOutput)
}

func (o ContainerRegistryTokenOutput) ExpiryDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRegistryToken) pulumi.StringPtrOutput { return v.ExpiryDate }).(pulumi.StringPtrOutput)
}

// [string] The name of the container registry token. Immutable, update forces re-creation of the resource.
// * `expiry-date`           - (Optional)[string] The value must be supplied as ISO 8601 timestamp
func (o ContainerRegistryTokenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerRegistryToken) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ContainerRegistryTokenOutput) RegistryId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerRegistryToken) pulumi.StringOutput { return v.RegistryId }).(pulumi.StringOutput)
}

// [string] Saves token password to file. Only works on create. Takes as argument a file name, or a file path
//
// > **⚠ WARNING** `savePasswordToFile` must be used with caution.
// It will save the password(token) returned on create to a file. This is the only way to get the token.
func (o ContainerRegistryTokenOutput) SavePasswordToFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRegistryToken) pulumi.StringPtrOutput { return v.SavePasswordToFile }).(pulumi.StringPtrOutput)
}

// [map]
func (o ContainerRegistryTokenOutput) Scopes() ContainerRegistryTokenScopeArrayOutput {
	return o.ApplyT(func(v *ContainerRegistryToken) ContainerRegistryTokenScopeArrayOutput { return v.Scopes }).(ContainerRegistryTokenScopeArrayOutput)
}

// [string] Must have on of the values: `enabled`, `disabled`
func (o ContainerRegistryTokenOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerRegistryToken) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type ContainerRegistryTokenArrayOutput struct{ *pulumi.OutputState }

func (ContainerRegistryTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerRegistryToken)(nil)).Elem()
}

func (o ContainerRegistryTokenArrayOutput) ToContainerRegistryTokenArrayOutput() ContainerRegistryTokenArrayOutput {
	return o
}

func (o ContainerRegistryTokenArrayOutput) ToContainerRegistryTokenArrayOutputWithContext(ctx context.Context) ContainerRegistryTokenArrayOutput {
	return o
}

func (o ContainerRegistryTokenArrayOutput) Index(i pulumi.IntInput) ContainerRegistryTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContainerRegistryToken {
		return vs[0].([]*ContainerRegistryToken)[vs[1].(int)]
	}).(ContainerRegistryTokenOutput)
}

type ContainerRegistryTokenMapOutput struct{ *pulumi.OutputState }

func (ContainerRegistryTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerRegistryToken)(nil)).Elem()
}

func (o ContainerRegistryTokenMapOutput) ToContainerRegistryTokenMapOutput() ContainerRegistryTokenMapOutput {
	return o
}

func (o ContainerRegistryTokenMapOutput) ToContainerRegistryTokenMapOutputWithContext(ctx context.Context) ContainerRegistryTokenMapOutput {
	return o
}

func (o ContainerRegistryTokenMapOutput) MapIndex(k pulumi.StringInput) ContainerRegistryTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContainerRegistryToken {
		return vs[0].(map[string]*ContainerRegistryToken)[vs[1].(string)]
	}).(ContainerRegistryTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRegistryTokenInput)(nil)).Elem(), &ContainerRegistryToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRegistryTokenArrayInput)(nil)).Elem(), ContainerRegistryTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRegistryTokenMapInput)(nil)).Elem(), ContainerRegistryTokenMap{})
	pulumi.RegisterOutputType(ContainerRegistryTokenOutput{})
	pulumi.RegisterOutputType(ContainerRegistryTokenArrayOutput{})
	pulumi.RegisterOutputType(ContainerRegistryTokenMapOutput{})
}
