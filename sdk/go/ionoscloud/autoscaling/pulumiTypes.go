// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autoscaling

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type GroupPolicy struct {
	// [string] The Metric that should trigger the scaling actions. Metric values are checked at fixed intervals. Possible values: `INSTANCE_CPU_UTILIZATION_AVERAGE`, `INSTANCE_NETWORK_IN_BYTES`, `INSTANCE_NETWORK_IN_PACKETS`, `INSTANCE_NETWORK_OUT_BYTES`, `INSTANCE_NETWORK_OUT_PACKETS`
	Metric string `pulumi:"metric"`
	// [string] Defines the time range, for which the samples will be aggregated. Default is 120s. *Note that when you set it to values like 5m the API will automatically transform it in PT5M, so the plan will show you a diff in state that should be ignored.*
	Range *string `pulumi:"range"`
	// [list] Specifies the action to take when the `scaleInThreshold` is exceeded. Hereby, scaling in is always about removing VMs that are currently associated with this autoscaling group. Default termination policy is OLDEST_SERVER_FIRST.
	ScaleInAction GroupPolicyScaleInAction `pulumi:"scaleInAction"`
	// [int] A lower threshold on the value of `metric`. Will be used with `less than` (<) operator. Exceeding this will start a Scale-In Action as specified by the `scaleInAction` property. The value must have a higher minimum delta to the `scaleOutThreshold` depending on the `metric` to avoid competitive actions at the same time.
	ScaleInThreshold int `pulumi:"scaleInThreshold"`
	// [list] Specifies the action to take when the `scaleOutThreshold` is exceeded. Hereby, scaling out is always about adding new VMs to this autoscaling group.
	ScaleOutAction GroupPolicyScaleOutAction `pulumi:"scaleOutAction"`
	// [int] The upper threshold for the value of the `metric`. Used with the `greater than` (>) operator. A scale-out action is triggered when this value is exceeded, specified by the `scaleOutAction` property. The value must have a lower minimum delta to the `scaleInThreshold`, depending on the metric, to avoid competing for actions simultaneously. If `properties.policy.unit=TOTAL`, a value >= 40 must be chosen.
	ScaleOutThreshold int `pulumi:"scaleOutThreshold"`
	// [string] Units of the applied Metric. Possible values are: `PER_HOUR`, `PER_MINUTE`, `PER_SECOND`, `TOTAL`.
	Unit string `pulumi:"unit"`
}

// GroupPolicyInput is an input type that accepts GroupPolicyArgs and GroupPolicyOutput values.
// You can construct a concrete instance of `GroupPolicyInput` via:
//
//	GroupPolicyArgs{...}
type GroupPolicyInput interface {
	pulumi.Input

	ToGroupPolicyOutput() GroupPolicyOutput
	ToGroupPolicyOutputWithContext(context.Context) GroupPolicyOutput
}

type GroupPolicyArgs struct {
	// [string] The Metric that should trigger the scaling actions. Metric values are checked at fixed intervals. Possible values: `INSTANCE_CPU_UTILIZATION_AVERAGE`, `INSTANCE_NETWORK_IN_BYTES`, `INSTANCE_NETWORK_IN_PACKETS`, `INSTANCE_NETWORK_OUT_BYTES`, `INSTANCE_NETWORK_OUT_PACKETS`
	Metric pulumi.StringInput `pulumi:"metric"`
	// [string] Defines the time range, for which the samples will be aggregated. Default is 120s. *Note that when you set it to values like 5m the API will automatically transform it in PT5M, so the plan will show you a diff in state that should be ignored.*
	Range pulumi.StringPtrInput `pulumi:"range"`
	// [list] Specifies the action to take when the `scaleInThreshold` is exceeded. Hereby, scaling in is always about removing VMs that are currently associated with this autoscaling group. Default termination policy is OLDEST_SERVER_FIRST.
	ScaleInAction GroupPolicyScaleInActionInput `pulumi:"scaleInAction"`
	// [int] A lower threshold on the value of `metric`. Will be used with `less than` (<) operator. Exceeding this will start a Scale-In Action as specified by the `scaleInAction` property. The value must have a higher minimum delta to the `scaleOutThreshold` depending on the `metric` to avoid competitive actions at the same time.
	ScaleInThreshold pulumi.IntInput `pulumi:"scaleInThreshold"`
	// [list] Specifies the action to take when the `scaleOutThreshold` is exceeded. Hereby, scaling out is always about adding new VMs to this autoscaling group.
	ScaleOutAction GroupPolicyScaleOutActionInput `pulumi:"scaleOutAction"`
	// [int] The upper threshold for the value of the `metric`. Used with the `greater than` (>) operator. A scale-out action is triggered when this value is exceeded, specified by the `scaleOutAction` property. The value must have a lower minimum delta to the `scaleInThreshold`, depending on the metric, to avoid competing for actions simultaneously. If `properties.policy.unit=TOTAL`, a value >= 40 must be chosen.
	ScaleOutThreshold pulumi.IntInput `pulumi:"scaleOutThreshold"`
	// [string] Units of the applied Metric. Possible values are: `PER_HOUR`, `PER_MINUTE`, `PER_SECOND`, `TOTAL`.
	Unit pulumi.StringInput `pulumi:"unit"`
}

func (GroupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPolicy)(nil)).Elem()
}

func (i GroupPolicyArgs) ToGroupPolicyOutput() GroupPolicyOutput {
	return i.ToGroupPolicyOutputWithContext(context.Background())
}

func (i GroupPolicyArgs) ToGroupPolicyOutputWithContext(ctx context.Context) GroupPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyOutput)
}

func (i GroupPolicyArgs) ToGroupPolicyPtrOutput() GroupPolicyPtrOutput {
	return i.ToGroupPolicyPtrOutputWithContext(context.Background())
}

func (i GroupPolicyArgs) ToGroupPolicyPtrOutputWithContext(ctx context.Context) GroupPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyOutput).ToGroupPolicyPtrOutputWithContext(ctx)
}

// GroupPolicyPtrInput is an input type that accepts GroupPolicyArgs, GroupPolicyPtr and GroupPolicyPtrOutput values.
// You can construct a concrete instance of `GroupPolicyPtrInput` via:
//
//	        GroupPolicyArgs{...}
//
//	or:
//
//	        nil
type GroupPolicyPtrInput interface {
	pulumi.Input

	ToGroupPolicyPtrOutput() GroupPolicyPtrOutput
	ToGroupPolicyPtrOutputWithContext(context.Context) GroupPolicyPtrOutput
}

type groupPolicyPtrType GroupPolicyArgs

func GroupPolicyPtr(v *GroupPolicyArgs) GroupPolicyPtrInput {
	return (*groupPolicyPtrType)(v)
}

func (*groupPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPolicy)(nil)).Elem()
}

func (i *groupPolicyPtrType) ToGroupPolicyPtrOutput() GroupPolicyPtrOutput {
	return i.ToGroupPolicyPtrOutputWithContext(context.Background())
}

func (i *groupPolicyPtrType) ToGroupPolicyPtrOutputWithContext(ctx context.Context) GroupPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyPtrOutput)
}

type GroupPolicyOutput struct{ *pulumi.OutputState }

func (GroupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPolicy)(nil)).Elem()
}

func (o GroupPolicyOutput) ToGroupPolicyOutput() GroupPolicyOutput {
	return o
}

func (o GroupPolicyOutput) ToGroupPolicyOutputWithContext(ctx context.Context) GroupPolicyOutput {
	return o
}

func (o GroupPolicyOutput) ToGroupPolicyPtrOutput() GroupPolicyPtrOutput {
	return o.ToGroupPolicyPtrOutputWithContext(context.Background())
}

func (o GroupPolicyOutput) ToGroupPolicyPtrOutputWithContext(ctx context.Context) GroupPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupPolicy) *GroupPolicy {
		return &v
	}).(GroupPolicyPtrOutput)
}

// [string] The Metric that should trigger the scaling actions. Metric values are checked at fixed intervals. Possible values: `INSTANCE_CPU_UTILIZATION_AVERAGE`, `INSTANCE_NETWORK_IN_BYTES`, `INSTANCE_NETWORK_IN_PACKETS`, `INSTANCE_NETWORK_OUT_BYTES`, `INSTANCE_NETWORK_OUT_PACKETS`
func (o GroupPolicyOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v GroupPolicy) string { return v.Metric }).(pulumi.StringOutput)
}

// [string] Defines the time range, for which the samples will be aggregated. Default is 120s. *Note that when you set it to values like 5m the API will automatically transform it in PT5M, so the plan will show you a diff in state that should be ignored.*
func (o GroupPolicyOutput) Range() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupPolicy) *string { return v.Range }).(pulumi.StringPtrOutput)
}

// [list] Specifies the action to take when the `scaleInThreshold` is exceeded. Hereby, scaling in is always about removing VMs that are currently associated with this autoscaling group. Default termination policy is OLDEST_SERVER_FIRST.
func (o GroupPolicyOutput) ScaleInAction() GroupPolicyScaleInActionOutput {
	return o.ApplyT(func(v GroupPolicy) GroupPolicyScaleInAction { return v.ScaleInAction }).(GroupPolicyScaleInActionOutput)
}

// [int] A lower threshold on the value of `metric`. Will be used with `less than` (<) operator. Exceeding this will start a Scale-In Action as specified by the `scaleInAction` property. The value must have a higher minimum delta to the `scaleOutThreshold` depending on the `metric` to avoid competitive actions at the same time.
func (o GroupPolicyOutput) ScaleInThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GroupPolicy) int { return v.ScaleInThreshold }).(pulumi.IntOutput)
}

// [list] Specifies the action to take when the `scaleOutThreshold` is exceeded. Hereby, scaling out is always about adding new VMs to this autoscaling group.
func (o GroupPolicyOutput) ScaleOutAction() GroupPolicyScaleOutActionOutput {
	return o.ApplyT(func(v GroupPolicy) GroupPolicyScaleOutAction { return v.ScaleOutAction }).(GroupPolicyScaleOutActionOutput)
}

// [int] The upper threshold for the value of the `metric`. Used with the `greater than` (>) operator. A scale-out action is triggered when this value is exceeded, specified by the `scaleOutAction` property. The value must have a lower minimum delta to the `scaleInThreshold`, depending on the metric, to avoid competing for actions simultaneously. If `properties.policy.unit=TOTAL`, a value >= 40 must be chosen.
func (o GroupPolicyOutput) ScaleOutThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GroupPolicy) int { return v.ScaleOutThreshold }).(pulumi.IntOutput)
}

// [string] Units of the applied Metric. Possible values are: `PER_HOUR`, `PER_MINUTE`, `PER_SECOND`, `TOTAL`.
func (o GroupPolicyOutput) Unit() pulumi.StringOutput {
	return o.ApplyT(func(v GroupPolicy) string { return v.Unit }).(pulumi.StringOutput)
}

type GroupPolicyPtrOutput struct{ *pulumi.OutputState }

func (GroupPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPolicy)(nil)).Elem()
}

func (o GroupPolicyPtrOutput) ToGroupPolicyPtrOutput() GroupPolicyPtrOutput {
	return o
}

func (o GroupPolicyPtrOutput) ToGroupPolicyPtrOutputWithContext(ctx context.Context) GroupPolicyPtrOutput {
	return o
}

func (o GroupPolicyPtrOutput) Elem() GroupPolicyOutput {
	return o.ApplyT(func(v *GroupPolicy) GroupPolicy {
		if v != nil {
			return *v
		}
		var ret GroupPolicy
		return ret
	}).(GroupPolicyOutput)
}

// [string] The Metric that should trigger the scaling actions. Metric values are checked at fixed intervals. Possible values: `INSTANCE_CPU_UTILIZATION_AVERAGE`, `INSTANCE_NETWORK_IN_BYTES`, `INSTANCE_NETWORK_IN_PACKETS`, `INSTANCE_NETWORK_OUT_BYTES`, `INSTANCE_NETWORK_OUT_PACKETS`
func (o GroupPolicyPtrOutput) Metric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.Metric
	}).(pulumi.StringPtrOutput)
}

// [string] Defines the time range, for which the samples will be aggregated. Default is 120s. *Note that when you set it to values like 5m the API will automatically transform it in PT5M, so the plan will show you a diff in state that should be ignored.*
func (o GroupPolicyPtrOutput) Range() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Range
	}).(pulumi.StringPtrOutput)
}

// [list] Specifies the action to take when the `scaleInThreshold` is exceeded. Hereby, scaling in is always about removing VMs that are currently associated with this autoscaling group. Default termination policy is OLDEST_SERVER_FIRST.
func (o GroupPolicyPtrOutput) ScaleInAction() GroupPolicyScaleInActionPtrOutput {
	return o.ApplyT(func(v *GroupPolicy) *GroupPolicyScaleInAction {
		if v == nil {
			return nil
		}
		return &v.ScaleInAction
	}).(GroupPolicyScaleInActionPtrOutput)
}

// [int] A lower threshold on the value of `metric`. Will be used with `less than` (<) operator. Exceeding this will start a Scale-In Action as specified by the `scaleInAction` property. The value must have a higher minimum delta to the `scaleOutThreshold` depending on the `metric` to avoid competitive actions at the same time.
func (o GroupPolicyPtrOutput) ScaleInThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GroupPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.ScaleInThreshold
	}).(pulumi.IntPtrOutput)
}

// [list] Specifies the action to take when the `scaleOutThreshold` is exceeded. Hereby, scaling out is always about adding new VMs to this autoscaling group.
func (o GroupPolicyPtrOutput) ScaleOutAction() GroupPolicyScaleOutActionPtrOutput {
	return o.ApplyT(func(v *GroupPolicy) *GroupPolicyScaleOutAction {
		if v == nil {
			return nil
		}
		return &v.ScaleOutAction
	}).(GroupPolicyScaleOutActionPtrOutput)
}

// [int] The upper threshold for the value of the `metric`. Used with the `greater than` (>) operator. A scale-out action is triggered when this value is exceeded, specified by the `scaleOutAction` property. The value must have a lower minimum delta to the `scaleInThreshold`, depending on the metric, to avoid competing for actions simultaneously. If `properties.policy.unit=TOTAL`, a value >= 40 must be chosen.
func (o GroupPolicyPtrOutput) ScaleOutThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GroupPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.ScaleOutThreshold
	}).(pulumi.IntPtrOutput)
}

// [string] Units of the applied Metric. Possible values are: `PER_HOUR`, `PER_MINUTE`, `PER_SECOND`, `TOTAL`.
func (o GroupPolicyPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.Unit
	}).(pulumi.StringPtrOutput)
}

type GroupPolicyScaleInAction struct {
	// [int] When `amountType=ABSOLUTE` specifies the absolute number of VMs that are added. The value must be between 1 to 10. `amountType=PERCENTAGE` specifies the percentage value that is applied to the current number of replicas of the VM Auto Scaling Group. The value must be between 1 to 200. At least one VM is always added.
	Amount int `pulumi:"amount"`
	// [string] The type for the given amount. Possible values are: `ABSOLUTE`, `PERCENTAGE`.
	AmountType string `pulumi:"amountType"`
	// [string] Minimum time to pass after this Scaling action has started, until the next Scaling action will be started. Additionally, if a Scaling action is currently in progress, no second Scaling action will be started for the same autoscaling group. Instead, the Metric will be re-evaluated after the current Scaling action is completed (either successfully or with failures). This is validated with a minimum value of 2 minutes and a maximum of 24 hours currently. Default value is 5 minutes if not given. *Note that when you set it to values like 5m the API will automatically transform it in PT5M, so the plan will show you a diff in state that should be ignored.*
	CooldownPeriod *string `pulumi:"cooldownPeriod"`
	// [bool] If set to `true`, when deleting a replica during scale in, any attached volume will also be deleted. When set to `false`, all volumes remain in the datacenter and must be deleted manually. Note that every scale-out creates new volumes. When they are not deleted, they will eventually use all of your contracts resource limits. At this point, scaling out would not be possible anymore.
	DeleteVolumes bool `pulumi:"deleteVolumes"`
	// [string] The type of the termination policy for the autoscaling group so that a specific pattern is followed for Scaling-In replicas. Default termination policy is `OLDEST_SERVER_FIRST`. Possible values are: `OLDEST_SERVER_FIRST`, `NEWEST_SERVER_FIRST`, `RANDOM`
	TerminationPolicyType *string `pulumi:"terminationPolicyType"`
}

// GroupPolicyScaleInActionInput is an input type that accepts GroupPolicyScaleInActionArgs and GroupPolicyScaleInActionOutput values.
// You can construct a concrete instance of `GroupPolicyScaleInActionInput` via:
//
//	GroupPolicyScaleInActionArgs{...}
type GroupPolicyScaleInActionInput interface {
	pulumi.Input

	ToGroupPolicyScaleInActionOutput() GroupPolicyScaleInActionOutput
	ToGroupPolicyScaleInActionOutputWithContext(context.Context) GroupPolicyScaleInActionOutput
}

type GroupPolicyScaleInActionArgs struct {
	// [int] When `amountType=ABSOLUTE` specifies the absolute number of VMs that are added. The value must be between 1 to 10. `amountType=PERCENTAGE` specifies the percentage value that is applied to the current number of replicas of the VM Auto Scaling Group. The value must be between 1 to 200. At least one VM is always added.
	Amount pulumi.IntInput `pulumi:"amount"`
	// [string] The type for the given amount. Possible values are: `ABSOLUTE`, `PERCENTAGE`.
	AmountType pulumi.StringInput `pulumi:"amountType"`
	// [string] Minimum time to pass after this Scaling action has started, until the next Scaling action will be started. Additionally, if a Scaling action is currently in progress, no second Scaling action will be started for the same autoscaling group. Instead, the Metric will be re-evaluated after the current Scaling action is completed (either successfully or with failures). This is validated with a minimum value of 2 minutes and a maximum of 24 hours currently. Default value is 5 minutes if not given. *Note that when you set it to values like 5m the API will automatically transform it in PT5M, so the plan will show you a diff in state that should be ignored.*
	CooldownPeriod pulumi.StringPtrInput `pulumi:"cooldownPeriod"`
	// [bool] If set to `true`, when deleting a replica during scale in, any attached volume will also be deleted. When set to `false`, all volumes remain in the datacenter and must be deleted manually. Note that every scale-out creates new volumes. When they are not deleted, they will eventually use all of your contracts resource limits. At this point, scaling out would not be possible anymore.
	DeleteVolumes pulumi.BoolInput `pulumi:"deleteVolumes"`
	// [string] The type of the termination policy for the autoscaling group so that a specific pattern is followed for Scaling-In replicas. Default termination policy is `OLDEST_SERVER_FIRST`. Possible values are: `OLDEST_SERVER_FIRST`, `NEWEST_SERVER_FIRST`, `RANDOM`
	TerminationPolicyType pulumi.StringPtrInput `pulumi:"terminationPolicyType"`
}

func (GroupPolicyScaleInActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPolicyScaleInAction)(nil)).Elem()
}

func (i GroupPolicyScaleInActionArgs) ToGroupPolicyScaleInActionOutput() GroupPolicyScaleInActionOutput {
	return i.ToGroupPolicyScaleInActionOutputWithContext(context.Background())
}

func (i GroupPolicyScaleInActionArgs) ToGroupPolicyScaleInActionOutputWithContext(ctx context.Context) GroupPolicyScaleInActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyScaleInActionOutput)
}

func (i GroupPolicyScaleInActionArgs) ToGroupPolicyScaleInActionPtrOutput() GroupPolicyScaleInActionPtrOutput {
	return i.ToGroupPolicyScaleInActionPtrOutputWithContext(context.Background())
}

func (i GroupPolicyScaleInActionArgs) ToGroupPolicyScaleInActionPtrOutputWithContext(ctx context.Context) GroupPolicyScaleInActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyScaleInActionOutput).ToGroupPolicyScaleInActionPtrOutputWithContext(ctx)
}

// GroupPolicyScaleInActionPtrInput is an input type that accepts GroupPolicyScaleInActionArgs, GroupPolicyScaleInActionPtr and GroupPolicyScaleInActionPtrOutput values.
// You can construct a concrete instance of `GroupPolicyScaleInActionPtrInput` via:
//
//	        GroupPolicyScaleInActionArgs{...}
//
//	or:
//
//	        nil
type GroupPolicyScaleInActionPtrInput interface {
	pulumi.Input

	ToGroupPolicyScaleInActionPtrOutput() GroupPolicyScaleInActionPtrOutput
	ToGroupPolicyScaleInActionPtrOutputWithContext(context.Context) GroupPolicyScaleInActionPtrOutput
}

type groupPolicyScaleInActionPtrType GroupPolicyScaleInActionArgs

func GroupPolicyScaleInActionPtr(v *GroupPolicyScaleInActionArgs) GroupPolicyScaleInActionPtrInput {
	return (*groupPolicyScaleInActionPtrType)(v)
}

func (*groupPolicyScaleInActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPolicyScaleInAction)(nil)).Elem()
}

func (i *groupPolicyScaleInActionPtrType) ToGroupPolicyScaleInActionPtrOutput() GroupPolicyScaleInActionPtrOutput {
	return i.ToGroupPolicyScaleInActionPtrOutputWithContext(context.Background())
}

func (i *groupPolicyScaleInActionPtrType) ToGroupPolicyScaleInActionPtrOutputWithContext(ctx context.Context) GroupPolicyScaleInActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyScaleInActionPtrOutput)
}

type GroupPolicyScaleInActionOutput struct{ *pulumi.OutputState }

func (GroupPolicyScaleInActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPolicyScaleInAction)(nil)).Elem()
}

func (o GroupPolicyScaleInActionOutput) ToGroupPolicyScaleInActionOutput() GroupPolicyScaleInActionOutput {
	return o
}

func (o GroupPolicyScaleInActionOutput) ToGroupPolicyScaleInActionOutputWithContext(ctx context.Context) GroupPolicyScaleInActionOutput {
	return o
}

func (o GroupPolicyScaleInActionOutput) ToGroupPolicyScaleInActionPtrOutput() GroupPolicyScaleInActionPtrOutput {
	return o.ToGroupPolicyScaleInActionPtrOutputWithContext(context.Background())
}

func (o GroupPolicyScaleInActionOutput) ToGroupPolicyScaleInActionPtrOutputWithContext(ctx context.Context) GroupPolicyScaleInActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupPolicyScaleInAction) *GroupPolicyScaleInAction {
		return &v
	}).(GroupPolicyScaleInActionPtrOutput)
}

// [int] When `amountType=ABSOLUTE` specifies the absolute number of VMs that are added. The value must be between 1 to 10. `amountType=PERCENTAGE` specifies the percentage value that is applied to the current number of replicas of the VM Auto Scaling Group. The value must be between 1 to 200. At least one VM is always added.
func (o GroupPolicyScaleInActionOutput) Amount() pulumi.IntOutput {
	return o.ApplyT(func(v GroupPolicyScaleInAction) int { return v.Amount }).(pulumi.IntOutput)
}

// [string] The type for the given amount. Possible values are: `ABSOLUTE`, `PERCENTAGE`.
func (o GroupPolicyScaleInActionOutput) AmountType() pulumi.StringOutput {
	return o.ApplyT(func(v GroupPolicyScaleInAction) string { return v.AmountType }).(pulumi.StringOutput)
}

// [string] Minimum time to pass after this Scaling action has started, until the next Scaling action will be started. Additionally, if a Scaling action is currently in progress, no second Scaling action will be started for the same autoscaling group. Instead, the Metric will be re-evaluated after the current Scaling action is completed (either successfully or with failures). This is validated with a minimum value of 2 minutes and a maximum of 24 hours currently. Default value is 5 minutes if not given. *Note that when you set it to values like 5m the API will automatically transform it in PT5M, so the plan will show you a diff in state that should be ignored.*
func (o GroupPolicyScaleInActionOutput) CooldownPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupPolicyScaleInAction) *string { return v.CooldownPeriod }).(pulumi.StringPtrOutput)
}

// [bool] If set to `true`, when deleting a replica during scale in, any attached volume will also be deleted. When set to `false`, all volumes remain in the datacenter and must be deleted manually. Note that every scale-out creates new volumes. When they are not deleted, they will eventually use all of your contracts resource limits. At this point, scaling out would not be possible anymore.
func (o GroupPolicyScaleInActionOutput) DeleteVolumes() pulumi.BoolOutput {
	return o.ApplyT(func(v GroupPolicyScaleInAction) bool { return v.DeleteVolumes }).(pulumi.BoolOutput)
}

// [string] The type of the termination policy for the autoscaling group so that a specific pattern is followed for Scaling-In replicas. Default termination policy is `OLDEST_SERVER_FIRST`. Possible values are: `OLDEST_SERVER_FIRST`, `NEWEST_SERVER_FIRST`, `RANDOM`
func (o GroupPolicyScaleInActionOutput) TerminationPolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupPolicyScaleInAction) *string { return v.TerminationPolicyType }).(pulumi.StringPtrOutput)
}

type GroupPolicyScaleInActionPtrOutput struct{ *pulumi.OutputState }

func (GroupPolicyScaleInActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPolicyScaleInAction)(nil)).Elem()
}

func (o GroupPolicyScaleInActionPtrOutput) ToGroupPolicyScaleInActionPtrOutput() GroupPolicyScaleInActionPtrOutput {
	return o
}

func (o GroupPolicyScaleInActionPtrOutput) ToGroupPolicyScaleInActionPtrOutputWithContext(ctx context.Context) GroupPolicyScaleInActionPtrOutput {
	return o
}

func (o GroupPolicyScaleInActionPtrOutput) Elem() GroupPolicyScaleInActionOutput {
	return o.ApplyT(func(v *GroupPolicyScaleInAction) GroupPolicyScaleInAction {
		if v != nil {
			return *v
		}
		var ret GroupPolicyScaleInAction
		return ret
	}).(GroupPolicyScaleInActionOutput)
}

// [int] When `amountType=ABSOLUTE` specifies the absolute number of VMs that are added. The value must be between 1 to 10. `amountType=PERCENTAGE` specifies the percentage value that is applied to the current number of replicas of the VM Auto Scaling Group. The value must be between 1 to 200. At least one VM is always added.
func (o GroupPolicyScaleInActionPtrOutput) Amount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GroupPolicyScaleInAction) *int {
		if v == nil {
			return nil
		}
		return &v.Amount
	}).(pulumi.IntPtrOutput)
}

// [string] The type for the given amount. Possible values are: `ABSOLUTE`, `PERCENTAGE`.
func (o GroupPolicyScaleInActionPtrOutput) AmountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPolicyScaleInAction) *string {
		if v == nil {
			return nil
		}
		return &v.AmountType
	}).(pulumi.StringPtrOutput)
}

// [string] Minimum time to pass after this Scaling action has started, until the next Scaling action will be started. Additionally, if a Scaling action is currently in progress, no second Scaling action will be started for the same autoscaling group. Instead, the Metric will be re-evaluated after the current Scaling action is completed (either successfully or with failures). This is validated with a minimum value of 2 minutes and a maximum of 24 hours currently. Default value is 5 minutes if not given. *Note that when you set it to values like 5m the API will automatically transform it in PT5M, so the plan will show you a diff in state that should be ignored.*
func (o GroupPolicyScaleInActionPtrOutput) CooldownPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPolicyScaleInAction) *string {
		if v == nil {
			return nil
		}
		return v.CooldownPeriod
	}).(pulumi.StringPtrOutput)
}

// [bool] If set to `true`, when deleting a replica during scale in, any attached volume will also be deleted. When set to `false`, all volumes remain in the datacenter and must be deleted manually. Note that every scale-out creates new volumes. When they are not deleted, they will eventually use all of your contracts resource limits. At this point, scaling out would not be possible anymore.
func (o GroupPolicyScaleInActionPtrOutput) DeleteVolumes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupPolicyScaleInAction) *bool {
		if v == nil {
			return nil
		}
		return &v.DeleteVolumes
	}).(pulumi.BoolPtrOutput)
}

// [string] The type of the termination policy for the autoscaling group so that a specific pattern is followed for Scaling-In replicas. Default termination policy is `OLDEST_SERVER_FIRST`. Possible values are: `OLDEST_SERVER_FIRST`, `NEWEST_SERVER_FIRST`, `RANDOM`
func (o GroupPolicyScaleInActionPtrOutput) TerminationPolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPolicyScaleInAction) *string {
		if v == nil {
			return nil
		}
		return v.TerminationPolicyType
	}).(pulumi.StringPtrOutput)
}

type GroupPolicyScaleOutAction struct {
	// [int] When `amountType=ABSOLUTE` specifies the absolute number of VMs that are added. The value must be between 1 to 10. `amountType=PERCENTAGE` specifies the percentage value that is applied to the current number of replicas of the VM Auto Scaling Group. The value must be between 1 to 200. At least one VM is always added.
	Amount int `pulumi:"amount"`
	// [string] The type for the given amount. Possible values are: `ABSOLUTE`, `PERCENTAGE`.
	AmountType string `pulumi:"amountType"`
	// [string] Minimum time to pass after this Scaling action has started, until the next Scaling action will be started. Additionally, if a Scaling action is currently in progress, no second Scaling action will be started for the same autoscaling group. Instead, the Metric will be re-evaluated after the current Scaling action is completed (either successfully or with failures). This is validated with a minimum value of 2 minutes and a maximum of 24 hours currently. Default value is 5 minutes if not given. *Note that when you set it to values like 5m the API will automatically transform it in PT5M, so the plan will show you a diff in state that should be ignored.*
	CooldownPeriod *string `pulumi:"cooldownPeriod"`
}

// GroupPolicyScaleOutActionInput is an input type that accepts GroupPolicyScaleOutActionArgs and GroupPolicyScaleOutActionOutput values.
// You can construct a concrete instance of `GroupPolicyScaleOutActionInput` via:
//
//	GroupPolicyScaleOutActionArgs{...}
type GroupPolicyScaleOutActionInput interface {
	pulumi.Input

	ToGroupPolicyScaleOutActionOutput() GroupPolicyScaleOutActionOutput
	ToGroupPolicyScaleOutActionOutputWithContext(context.Context) GroupPolicyScaleOutActionOutput
}

type GroupPolicyScaleOutActionArgs struct {
	// [int] When `amountType=ABSOLUTE` specifies the absolute number of VMs that are added. The value must be between 1 to 10. `amountType=PERCENTAGE` specifies the percentage value that is applied to the current number of replicas of the VM Auto Scaling Group. The value must be between 1 to 200. At least one VM is always added.
	Amount pulumi.IntInput `pulumi:"amount"`
	// [string] The type for the given amount. Possible values are: `ABSOLUTE`, `PERCENTAGE`.
	AmountType pulumi.StringInput `pulumi:"amountType"`
	// [string] Minimum time to pass after this Scaling action has started, until the next Scaling action will be started. Additionally, if a Scaling action is currently in progress, no second Scaling action will be started for the same autoscaling group. Instead, the Metric will be re-evaluated after the current Scaling action is completed (either successfully or with failures). This is validated with a minimum value of 2 minutes and a maximum of 24 hours currently. Default value is 5 minutes if not given. *Note that when you set it to values like 5m the API will automatically transform it in PT5M, so the plan will show you a diff in state that should be ignored.*
	CooldownPeriod pulumi.StringPtrInput `pulumi:"cooldownPeriod"`
}

func (GroupPolicyScaleOutActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPolicyScaleOutAction)(nil)).Elem()
}

func (i GroupPolicyScaleOutActionArgs) ToGroupPolicyScaleOutActionOutput() GroupPolicyScaleOutActionOutput {
	return i.ToGroupPolicyScaleOutActionOutputWithContext(context.Background())
}

func (i GroupPolicyScaleOutActionArgs) ToGroupPolicyScaleOutActionOutputWithContext(ctx context.Context) GroupPolicyScaleOutActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyScaleOutActionOutput)
}

func (i GroupPolicyScaleOutActionArgs) ToGroupPolicyScaleOutActionPtrOutput() GroupPolicyScaleOutActionPtrOutput {
	return i.ToGroupPolicyScaleOutActionPtrOutputWithContext(context.Background())
}

func (i GroupPolicyScaleOutActionArgs) ToGroupPolicyScaleOutActionPtrOutputWithContext(ctx context.Context) GroupPolicyScaleOutActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyScaleOutActionOutput).ToGroupPolicyScaleOutActionPtrOutputWithContext(ctx)
}

// GroupPolicyScaleOutActionPtrInput is an input type that accepts GroupPolicyScaleOutActionArgs, GroupPolicyScaleOutActionPtr and GroupPolicyScaleOutActionPtrOutput values.
// You can construct a concrete instance of `GroupPolicyScaleOutActionPtrInput` via:
//
//	        GroupPolicyScaleOutActionArgs{...}
//
//	or:
//
//	        nil
type GroupPolicyScaleOutActionPtrInput interface {
	pulumi.Input

	ToGroupPolicyScaleOutActionPtrOutput() GroupPolicyScaleOutActionPtrOutput
	ToGroupPolicyScaleOutActionPtrOutputWithContext(context.Context) GroupPolicyScaleOutActionPtrOutput
}

type groupPolicyScaleOutActionPtrType GroupPolicyScaleOutActionArgs

func GroupPolicyScaleOutActionPtr(v *GroupPolicyScaleOutActionArgs) GroupPolicyScaleOutActionPtrInput {
	return (*groupPolicyScaleOutActionPtrType)(v)
}

func (*groupPolicyScaleOutActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPolicyScaleOutAction)(nil)).Elem()
}

func (i *groupPolicyScaleOutActionPtrType) ToGroupPolicyScaleOutActionPtrOutput() GroupPolicyScaleOutActionPtrOutput {
	return i.ToGroupPolicyScaleOutActionPtrOutputWithContext(context.Background())
}

func (i *groupPolicyScaleOutActionPtrType) ToGroupPolicyScaleOutActionPtrOutputWithContext(ctx context.Context) GroupPolicyScaleOutActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyScaleOutActionPtrOutput)
}

type GroupPolicyScaleOutActionOutput struct{ *pulumi.OutputState }

func (GroupPolicyScaleOutActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPolicyScaleOutAction)(nil)).Elem()
}

func (o GroupPolicyScaleOutActionOutput) ToGroupPolicyScaleOutActionOutput() GroupPolicyScaleOutActionOutput {
	return o
}

func (o GroupPolicyScaleOutActionOutput) ToGroupPolicyScaleOutActionOutputWithContext(ctx context.Context) GroupPolicyScaleOutActionOutput {
	return o
}

func (o GroupPolicyScaleOutActionOutput) ToGroupPolicyScaleOutActionPtrOutput() GroupPolicyScaleOutActionPtrOutput {
	return o.ToGroupPolicyScaleOutActionPtrOutputWithContext(context.Background())
}

func (o GroupPolicyScaleOutActionOutput) ToGroupPolicyScaleOutActionPtrOutputWithContext(ctx context.Context) GroupPolicyScaleOutActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupPolicyScaleOutAction) *GroupPolicyScaleOutAction {
		return &v
	}).(GroupPolicyScaleOutActionPtrOutput)
}

// [int] When `amountType=ABSOLUTE` specifies the absolute number of VMs that are added. The value must be between 1 to 10. `amountType=PERCENTAGE` specifies the percentage value that is applied to the current number of replicas of the VM Auto Scaling Group. The value must be between 1 to 200. At least one VM is always added.
func (o GroupPolicyScaleOutActionOutput) Amount() pulumi.IntOutput {
	return o.ApplyT(func(v GroupPolicyScaleOutAction) int { return v.Amount }).(pulumi.IntOutput)
}

// [string] The type for the given amount. Possible values are: `ABSOLUTE`, `PERCENTAGE`.
func (o GroupPolicyScaleOutActionOutput) AmountType() pulumi.StringOutput {
	return o.ApplyT(func(v GroupPolicyScaleOutAction) string { return v.AmountType }).(pulumi.StringOutput)
}

// [string] Minimum time to pass after this Scaling action has started, until the next Scaling action will be started. Additionally, if a Scaling action is currently in progress, no second Scaling action will be started for the same autoscaling group. Instead, the Metric will be re-evaluated after the current Scaling action is completed (either successfully or with failures). This is validated with a minimum value of 2 minutes and a maximum of 24 hours currently. Default value is 5 minutes if not given. *Note that when you set it to values like 5m the API will automatically transform it in PT5M, so the plan will show you a diff in state that should be ignored.*
func (o GroupPolicyScaleOutActionOutput) CooldownPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupPolicyScaleOutAction) *string { return v.CooldownPeriod }).(pulumi.StringPtrOutput)
}

type GroupPolicyScaleOutActionPtrOutput struct{ *pulumi.OutputState }

func (GroupPolicyScaleOutActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPolicyScaleOutAction)(nil)).Elem()
}

func (o GroupPolicyScaleOutActionPtrOutput) ToGroupPolicyScaleOutActionPtrOutput() GroupPolicyScaleOutActionPtrOutput {
	return o
}

func (o GroupPolicyScaleOutActionPtrOutput) ToGroupPolicyScaleOutActionPtrOutputWithContext(ctx context.Context) GroupPolicyScaleOutActionPtrOutput {
	return o
}

func (o GroupPolicyScaleOutActionPtrOutput) Elem() GroupPolicyScaleOutActionOutput {
	return o.ApplyT(func(v *GroupPolicyScaleOutAction) GroupPolicyScaleOutAction {
		if v != nil {
			return *v
		}
		var ret GroupPolicyScaleOutAction
		return ret
	}).(GroupPolicyScaleOutActionOutput)
}

// [int] When `amountType=ABSOLUTE` specifies the absolute number of VMs that are added. The value must be between 1 to 10. `amountType=PERCENTAGE` specifies the percentage value that is applied to the current number of replicas of the VM Auto Scaling Group. The value must be between 1 to 200. At least one VM is always added.
func (o GroupPolicyScaleOutActionPtrOutput) Amount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GroupPolicyScaleOutAction) *int {
		if v == nil {
			return nil
		}
		return &v.Amount
	}).(pulumi.IntPtrOutput)
}

// [string] The type for the given amount. Possible values are: `ABSOLUTE`, `PERCENTAGE`.
func (o GroupPolicyScaleOutActionPtrOutput) AmountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPolicyScaleOutAction) *string {
		if v == nil {
			return nil
		}
		return &v.AmountType
	}).(pulumi.StringPtrOutput)
}

// [string] Minimum time to pass after this Scaling action has started, until the next Scaling action will be started. Additionally, if a Scaling action is currently in progress, no second Scaling action will be started for the same autoscaling group. Instead, the Metric will be re-evaluated after the current Scaling action is completed (either successfully or with failures). This is validated with a minimum value of 2 minutes and a maximum of 24 hours currently. Default value is 5 minutes if not given. *Note that when you set it to values like 5m the API will automatically transform it in PT5M, so the plan will show you a diff in state that should be ignored.*
func (o GroupPolicyScaleOutActionPtrOutput) CooldownPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPolicyScaleOutAction) *string {
		if v == nil {
			return nil
		}
		return v.CooldownPeriod
	}).(pulumi.StringPtrOutput)
}

type GroupReplicaConfiguration struct {
	// [string] The zone where the VMs are created using this configuration. Possible values are: `AUTO`, `ZONE_1`, `ZONE_2`.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// [int] The total number of cores for the VMs.
	Cores int `pulumi:"cores"`
	// [string] PU family for the VMs created using this configuration. If null, the VM will be created with the default CPU family for the assigned location. Possible values are: `INTEL_SKYLAKE`, `INTEL_XEON`.
	CpuFamily *string `pulumi:"cpuFamily"`
	// Set of NICs associated with this Replica.
	Nics []GroupReplicaConfigurationNic `pulumi:"nics"`
	// [int] The amount of memory for the VMs in MB, e.g. 2048. Size must be specified in multiples of 256 MB with a minimum of 256 MB; however, if you set ramHotPlug to TRUE then you must use a minimum of 1024 MB. If you set the RAM size more than 240GB, then ramHotPlug will be set to FALSE and can not be set to TRUE unless RAM size not set to less than 240GB.
	Ram int `pulumi:"ram"`
	// [list] List of volumes associated with this Replica.
	Volumes []GroupReplicaConfigurationVolume `pulumi:"volumes"`
}

// GroupReplicaConfigurationInput is an input type that accepts GroupReplicaConfigurationArgs and GroupReplicaConfigurationOutput values.
// You can construct a concrete instance of `GroupReplicaConfigurationInput` via:
//
//	GroupReplicaConfigurationArgs{...}
type GroupReplicaConfigurationInput interface {
	pulumi.Input

	ToGroupReplicaConfigurationOutput() GroupReplicaConfigurationOutput
	ToGroupReplicaConfigurationOutputWithContext(context.Context) GroupReplicaConfigurationOutput
}

type GroupReplicaConfigurationArgs struct {
	// [string] The zone where the VMs are created using this configuration. Possible values are: `AUTO`, `ZONE_1`, `ZONE_2`.
	AvailabilityZone pulumi.StringInput `pulumi:"availabilityZone"`
	// [int] The total number of cores for the VMs.
	Cores pulumi.IntInput `pulumi:"cores"`
	// [string] PU family for the VMs created using this configuration. If null, the VM will be created with the default CPU family for the assigned location. Possible values are: `INTEL_SKYLAKE`, `INTEL_XEON`.
	CpuFamily pulumi.StringPtrInput `pulumi:"cpuFamily"`
	// Set of NICs associated with this Replica.
	Nics GroupReplicaConfigurationNicArrayInput `pulumi:"nics"`
	// [int] The amount of memory for the VMs in MB, e.g. 2048. Size must be specified in multiples of 256 MB with a minimum of 256 MB; however, if you set ramHotPlug to TRUE then you must use a minimum of 1024 MB. If you set the RAM size more than 240GB, then ramHotPlug will be set to FALSE and can not be set to TRUE unless RAM size not set to less than 240GB.
	Ram pulumi.IntInput `pulumi:"ram"`
	// [list] List of volumes associated with this Replica.
	Volumes GroupReplicaConfigurationVolumeArrayInput `pulumi:"volumes"`
}

func (GroupReplicaConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupReplicaConfiguration)(nil)).Elem()
}

func (i GroupReplicaConfigurationArgs) ToGroupReplicaConfigurationOutput() GroupReplicaConfigurationOutput {
	return i.ToGroupReplicaConfigurationOutputWithContext(context.Background())
}

func (i GroupReplicaConfigurationArgs) ToGroupReplicaConfigurationOutputWithContext(ctx context.Context) GroupReplicaConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupReplicaConfigurationOutput)
}

func (i GroupReplicaConfigurationArgs) ToGroupReplicaConfigurationPtrOutput() GroupReplicaConfigurationPtrOutput {
	return i.ToGroupReplicaConfigurationPtrOutputWithContext(context.Background())
}

func (i GroupReplicaConfigurationArgs) ToGroupReplicaConfigurationPtrOutputWithContext(ctx context.Context) GroupReplicaConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupReplicaConfigurationOutput).ToGroupReplicaConfigurationPtrOutputWithContext(ctx)
}

// GroupReplicaConfigurationPtrInput is an input type that accepts GroupReplicaConfigurationArgs, GroupReplicaConfigurationPtr and GroupReplicaConfigurationPtrOutput values.
// You can construct a concrete instance of `GroupReplicaConfigurationPtrInput` via:
//
//	        GroupReplicaConfigurationArgs{...}
//
//	or:
//
//	        nil
type GroupReplicaConfigurationPtrInput interface {
	pulumi.Input

	ToGroupReplicaConfigurationPtrOutput() GroupReplicaConfigurationPtrOutput
	ToGroupReplicaConfigurationPtrOutputWithContext(context.Context) GroupReplicaConfigurationPtrOutput
}

type groupReplicaConfigurationPtrType GroupReplicaConfigurationArgs

func GroupReplicaConfigurationPtr(v *GroupReplicaConfigurationArgs) GroupReplicaConfigurationPtrInput {
	return (*groupReplicaConfigurationPtrType)(v)
}

func (*groupReplicaConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupReplicaConfiguration)(nil)).Elem()
}

func (i *groupReplicaConfigurationPtrType) ToGroupReplicaConfigurationPtrOutput() GroupReplicaConfigurationPtrOutput {
	return i.ToGroupReplicaConfigurationPtrOutputWithContext(context.Background())
}

func (i *groupReplicaConfigurationPtrType) ToGroupReplicaConfigurationPtrOutputWithContext(ctx context.Context) GroupReplicaConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupReplicaConfigurationPtrOutput)
}

type GroupReplicaConfigurationOutput struct{ *pulumi.OutputState }

func (GroupReplicaConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupReplicaConfiguration)(nil)).Elem()
}

func (o GroupReplicaConfigurationOutput) ToGroupReplicaConfigurationOutput() GroupReplicaConfigurationOutput {
	return o
}

func (o GroupReplicaConfigurationOutput) ToGroupReplicaConfigurationOutputWithContext(ctx context.Context) GroupReplicaConfigurationOutput {
	return o
}

func (o GroupReplicaConfigurationOutput) ToGroupReplicaConfigurationPtrOutput() GroupReplicaConfigurationPtrOutput {
	return o.ToGroupReplicaConfigurationPtrOutputWithContext(context.Background())
}

func (o GroupReplicaConfigurationOutput) ToGroupReplicaConfigurationPtrOutputWithContext(ctx context.Context) GroupReplicaConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupReplicaConfiguration) *GroupReplicaConfiguration {
		return &v
	}).(GroupReplicaConfigurationPtrOutput)
}

// [string] The zone where the VMs are created using this configuration. Possible values are: `AUTO`, `ZONE_1`, `ZONE_2`.
func (o GroupReplicaConfigurationOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v GroupReplicaConfiguration) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// [int] The total number of cores for the VMs.
func (o GroupReplicaConfigurationOutput) Cores() pulumi.IntOutput {
	return o.ApplyT(func(v GroupReplicaConfiguration) int { return v.Cores }).(pulumi.IntOutput)
}

// [string] PU family for the VMs created using this configuration. If null, the VM will be created with the default CPU family for the assigned location. Possible values are: `INTEL_SKYLAKE`, `INTEL_XEON`.
func (o GroupReplicaConfigurationOutput) CpuFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupReplicaConfiguration) *string { return v.CpuFamily }).(pulumi.StringPtrOutput)
}

// Set of NICs associated with this Replica.
func (o GroupReplicaConfigurationOutput) Nics() GroupReplicaConfigurationNicArrayOutput {
	return o.ApplyT(func(v GroupReplicaConfiguration) []GroupReplicaConfigurationNic { return v.Nics }).(GroupReplicaConfigurationNicArrayOutput)
}

// [int] The amount of memory for the VMs in MB, e.g. 2048. Size must be specified in multiples of 256 MB with a minimum of 256 MB; however, if you set ramHotPlug to TRUE then you must use a minimum of 1024 MB. If you set the RAM size more than 240GB, then ramHotPlug will be set to FALSE and can not be set to TRUE unless RAM size not set to less than 240GB.
func (o GroupReplicaConfigurationOutput) Ram() pulumi.IntOutput {
	return o.ApplyT(func(v GroupReplicaConfiguration) int { return v.Ram }).(pulumi.IntOutput)
}

// [list] List of volumes associated with this Replica.
func (o GroupReplicaConfigurationOutput) Volumes() GroupReplicaConfigurationVolumeArrayOutput {
	return o.ApplyT(func(v GroupReplicaConfiguration) []GroupReplicaConfigurationVolume { return v.Volumes }).(GroupReplicaConfigurationVolumeArrayOutput)
}

type GroupReplicaConfigurationPtrOutput struct{ *pulumi.OutputState }

func (GroupReplicaConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupReplicaConfiguration)(nil)).Elem()
}

func (o GroupReplicaConfigurationPtrOutput) ToGroupReplicaConfigurationPtrOutput() GroupReplicaConfigurationPtrOutput {
	return o
}

func (o GroupReplicaConfigurationPtrOutput) ToGroupReplicaConfigurationPtrOutputWithContext(ctx context.Context) GroupReplicaConfigurationPtrOutput {
	return o
}

func (o GroupReplicaConfigurationPtrOutput) Elem() GroupReplicaConfigurationOutput {
	return o.ApplyT(func(v *GroupReplicaConfiguration) GroupReplicaConfiguration {
		if v != nil {
			return *v
		}
		var ret GroupReplicaConfiguration
		return ret
	}).(GroupReplicaConfigurationOutput)
}

// [string] The zone where the VMs are created using this configuration. Possible values are: `AUTO`, `ZONE_1`, `ZONE_2`.
func (o GroupReplicaConfigurationPtrOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupReplicaConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.AvailabilityZone
	}).(pulumi.StringPtrOutput)
}

// [int] The total number of cores for the VMs.
func (o GroupReplicaConfigurationPtrOutput) Cores() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GroupReplicaConfiguration) *int {
		if v == nil {
			return nil
		}
		return &v.Cores
	}).(pulumi.IntPtrOutput)
}

// [string] PU family for the VMs created using this configuration. If null, the VM will be created with the default CPU family for the assigned location. Possible values are: `INTEL_SKYLAKE`, `INTEL_XEON`.
func (o GroupReplicaConfigurationPtrOutput) CpuFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupReplicaConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CpuFamily
	}).(pulumi.StringPtrOutput)
}

// Set of NICs associated with this Replica.
func (o GroupReplicaConfigurationPtrOutput) Nics() GroupReplicaConfigurationNicArrayOutput {
	return o.ApplyT(func(v *GroupReplicaConfiguration) []GroupReplicaConfigurationNic {
		if v == nil {
			return nil
		}
		return v.Nics
	}).(GroupReplicaConfigurationNicArrayOutput)
}

// [int] The amount of memory for the VMs in MB, e.g. 2048. Size must be specified in multiples of 256 MB with a minimum of 256 MB; however, if you set ramHotPlug to TRUE then you must use a minimum of 1024 MB. If you set the RAM size more than 240GB, then ramHotPlug will be set to FALSE and can not be set to TRUE unless RAM size not set to less than 240GB.
func (o GroupReplicaConfigurationPtrOutput) Ram() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GroupReplicaConfiguration) *int {
		if v == nil {
			return nil
		}
		return &v.Ram
	}).(pulumi.IntPtrOutput)
}

// [list] List of volumes associated with this Replica.
func (o GroupReplicaConfigurationPtrOutput) Volumes() GroupReplicaConfigurationVolumeArrayOutput {
	return o.ApplyT(func(v *GroupReplicaConfiguration) []GroupReplicaConfigurationVolume {
		if v == nil {
			return nil
		}
		return v.Volumes
	}).(GroupReplicaConfigurationVolumeArrayOutput)
}

type GroupReplicaConfigurationNic struct {
	// [bool] Dhcp flag for this replica Nic. This is an optional attribute with default value of `true` if not given in the request payload or given as null.
	Dhcp *bool `pulumi:"dhcp"`
	// [bool] Firewall active flag.
	FirewallActive *bool `pulumi:"firewallActive"`
	// List of all firewall rules for the specified NIC.
	FirewallRules []GroupReplicaConfigurationNicFirewallRule `pulumi:"firewallRules"`
	// [string] The type of firewall rules that will be allowed on the NIC. Valid values: INGRESS EGRESS BIDIRECTIONAL. If not specified, the default INGRESS value is used.
	FirewallType *string `pulumi:"firewallType"`
	// [list] Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.
	FlowLogs []GroupReplicaConfigurationNicFlowLog `pulumi:"flowLogs"`
	// [int] Lan ID for this replica Nic.
	Lan int `pulumi:"lan"`
	// [string] Name for this replica volume.
	Name string `pulumi:"name"`
	// [list] In order to link VM to ALB, target group must be provided
	TargetGroup *GroupReplicaConfigurationNicTargetGroup `pulumi:"targetGroup"`
}

// GroupReplicaConfigurationNicInput is an input type that accepts GroupReplicaConfigurationNicArgs and GroupReplicaConfigurationNicOutput values.
// You can construct a concrete instance of `GroupReplicaConfigurationNicInput` via:
//
//	GroupReplicaConfigurationNicArgs{...}
type GroupReplicaConfigurationNicInput interface {
	pulumi.Input

	ToGroupReplicaConfigurationNicOutput() GroupReplicaConfigurationNicOutput
	ToGroupReplicaConfigurationNicOutputWithContext(context.Context) GroupReplicaConfigurationNicOutput
}

type GroupReplicaConfigurationNicArgs struct {
	// [bool] Dhcp flag for this replica Nic. This is an optional attribute with default value of `true` if not given in the request payload or given as null.
	Dhcp pulumi.BoolPtrInput `pulumi:"dhcp"`
	// [bool] Firewall active flag.
	FirewallActive pulumi.BoolPtrInput `pulumi:"firewallActive"`
	// List of all firewall rules for the specified NIC.
	FirewallRules GroupReplicaConfigurationNicFirewallRuleArrayInput `pulumi:"firewallRules"`
	// [string] The type of firewall rules that will be allowed on the NIC. Valid values: INGRESS EGRESS BIDIRECTIONAL. If not specified, the default INGRESS value is used.
	FirewallType pulumi.StringPtrInput `pulumi:"firewallType"`
	// [list] Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.
	FlowLogs GroupReplicaConfigurationNicFlowLogArrayInput `pulumi:"flowLogs"`
	// [int] Lan ID for this replica Nic.
	Lan pulumi.IntInput `pulumi:"lan"`
	// [string] Name for this replica volume.
	Name pulumi.StringInput `pulumi:"name"`
	// [list] In order to link VM to ALB, target group must be provided
	TargetGroup GroupReplicaConfigurationNicTargetGroupPtrInput `pulumi:"targetGroup"`
}

func (GroupReplicaConfigurationNicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupReplicaConfigurationNic)(nil)).Elem()
}

func (i GroupReplicaConfigurationNicArgs) ToGroupReplicaConfigurationNicOutput() GroupReplicaConfigurationNicOutput {
	return i.ToGroupReplicaConfigurationNicOutputWithContext(context.Background())
}

func (i GroupReplicaConfigurationNicArgs) ToGroupReplicaConfigurationNicOutputWithContext(ctx context.Context) GroupReplicaConfigurationNicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupReplicaConfigurationNicOutput)
}

// GroupReplicaConfigurationNicArrayInput is an input type that accepts GroupReplicaConfigurationNicArray and GroupReplicaConfigurationNicArrayOutput values.
// You can construct a concrete instance of `GroupReplicaConfigurationNicArrayInput` via:
//
//	GroupReplicaConfigurationNicArray{ GroupReplicaConfigurationNicArgs{...} }
type GroupReplicaConfigurationNicArrayInput interface {
	pulumi.Input

	ToGroupReplicaConfigurationNicArrayOutput() GroupReplicaConfigurationNicArrayOutput
	ToGroupReplicaConfigurationNicArrayOutputWithContext(context.Context) GroupReplicaConfigurationNicArrayOutput
}

type GroupReplicaConfigurationNicArray []GroupReplicaConfigurationNicInput

func (GroupReplicaConfigurationNicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupReplicaConfigurationNic)(nil)).Elem()
}

func (i GroupReplicaConfigurationNicArray) ToGroupReplicaConfigurationNicArrayOutput() GroupReplicaConfigurationNicArrayOutput {
	return i.ToGroupReplicaConfigurationNicArrayOutputWithContext(context.Background())
}

func (i GroupReplicaConfigurationNicArray) ToGroupReplicaConfigurationNicArrayOutputWithContext(ctx context.Context) GroupReplicaConfigurationNicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupReplicaConfigurationNicArrayOutput)
}

type GroupReplicaConfigurationNicOutput struct{ *pulumi.OutputState }

func (GroupReplicaConfigurationNicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupReplicaConfigurationNic)(nil)).Elem()
}

func (o GroupReplicaConfigurationNicOutput) ToGroupReplicaConfigurationNicOutput() GroupReplicaConfigurationNicOutput {
	return o
}

func (o GroupReplicaConfigurationNicOutput) ToGroupReplicaConfigurationNicOutputWithContext(ctx context.Context) GroupReplicaConfigurationNicOutput {
	return o
}

// [bool] Dhcp flag for this replica Nic. This is an optional attribute with default value of `true` if not given in the request payload or given as null.
func (o GroupReplicaConfigurationNicOutput) Dhcp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationNic) *bool { return v.Dhcp }).(pulumi.BoolPtrOutput)
}

// [bool] Firewall active flag.
func (o GroupReplicaConfigurationNicOutput) FirewallActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationNic) *bool { return v.FirewallActive }).(pulumi.BoolPtrOutput)
}

// List of all firewall rules for the specified NIC.
func (o GroupReplicaConfigurationNicOutput) FirewallRules() GroupReplicaConfigurationNicFirewallRuleArrayOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationNic) []GroupReplicaConfigurationNicFirewallRule {
		return v.FirewallRules
	}).(GroupReplicaConfigurationNicFirewallRuleArrayOutput)
}

// [string] The type of firewall rules that will be allowed on the NIC. Valid values: INGRESS EGRESS BIDIRECTIONAL. If not specified, the default INGRESS value is used.
func (o GroupReplicaConfigurationNicOutput) FirewallType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationNic) *string { return v.FirewallType }).(pulumi.StringPtrOutput)
}

// [list] Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.
func (o GroupReplicaConfigurationNicOutput) FlowLogs() GroupReplicaConfigurationNicFlowLogArrayOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationNic) []GroupReplicaConfigurationNicFlowLog { return v.FlowLogs }).(GroupReplicaConfigurationNicFlowLogArrayOutput)
}

// [int] Lan ID for this replica Nic.
func (o GroupReplicaConfigurationNicOutput) Lan() pulumi.IntOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationNic) int { return v.Lan }).(pulumi.IntOutput)
}

// [string] Name for this replica volume.
func (o GroupReplicaConfigurationNicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationNic) string { return v.Name }).(pulumi.StringOutput)
}

// [list] In order to link VM to ALB, target group must be provided
func (o GroupReplicaConfigurationNicOutput) TargetGroup() GroupReplicaConfigurationNicTargetGroupPtrOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationNic) *GroupReplicaConfigurationNicTargetGroup { return v.TargetGroup }).(GroupReplicaConfigurationNicTargetGroupPtrOutput)
}

type GroupReplicaConfigurationNicArrayOutput struct{ *pulumi.OutputState }

func (GroupReplicaConfigurationNicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupReplicaConfigurationNic)(nil)).Elem()
}

func (o GroupReplicaConfigurationNicArrayOutput) ToGroupReplicaConfigurationNicArrayOutput() GroupReplicaConfigurationNicArrayOutput {
	return o
}

func (o GroupReplicaConfigurationNicArrayOutput) ToGroupReplicaConfigurationNicArrayOutputWithContext(ctx context.Context) GroupReplicaConfigurationNicArrayOutput {
	return o
}

func (o GroupReplicaConfigurationNicArrayOutput) Index(i pulumi.IntInput) GroupReplicaConfigurationNicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupReplicaConfigurationNic {
		return vs[0].([]GroupReplicaConfigurationNic)[vs[1].(int)]
	}).(GroupReplicaConfigurationNicOutput)
}

type GroupReplicaConfigurationNicFirewallRule struct {
	// [int] Defines the allowed code (from 0 to 254) if protocol ICMP is chosen.
	IcmpCode *int `pulumi:"icmpCode"`
	// [string] Defines the allowed code (from 0 to 254) if protocol ICMP is chosen. Value null allows all codes.
	IcmpType *int `pulumi:"icmpType"`
	// [string] Name for this replica volume.
	Name *string `pulumi:"name"`
	// [int] Defines the end range of the allowed port (from 1 to 65534) if the protocol TCP or UDP is chosen. Leave portRangeStart and portRangeEnd null to allow all ports.
	PortRangeEnd *int `pulumi:"portRangeEnd"`
	// [int] Defines the start range of the allowed port (from 1 to 65534) if protocol TCP or UDP is chosen. Leave portRangeStart and portRangeEnd null to allow all ports.
	PortRangeStart *int `pulumi:"portRangeStart"`
	// [string] The protocol for the rule: TCP, UDP, ICMP, ANY. Property cannot be modified after creation (disallowed in update requests).
	Protocol string `pulumi:"protocol"`
	// [string] Only traffic originating from the respective IPv4 address is allowed. Value null allows all source IPs.
	SourceIp *string `pulumi:"sourceIp"`
	// [string] Only traffic originating from the respective MAC address is allowed. Valid format: aa:bb:cc:dd:ee:ff. Value null allows all source MAC address. Valid format: aa:bb:cc:dd:ee:ff.
	SourceMac *string `pulumi:"sourceMac"`
	// [string] In case the target NIC has multiple IP addresses, only traffic directed to the respective IP address of the NIC is allowed. Value null allows all target IPs.
	TargetIp *string `pulumi:"targetIp"`
	// [string] Storage Type for this replica volume. Possible values: `SSD`, `HDD`, `SSD_STANDARD` or `SSD_PREMIUM`.
	Type *string `pulumi:"type"`
}

// GroupReplicaConfigurationNicFirewallRuleInput is an input type that accepts GroupReplicaConfigurationNicFirewallRuleArgs and GroupReplicaConfigurationNicFirewallRuleOutput values.
// You can construct a concrete instance of `GroupReplicaConfigurationNicFirewallRuleInput` via:
//
//	GroupReplicaConfigurationNicFirewallRuleArgs{...}
type GroupReplicaConfigurationNicFirewallRuleInput interface {
	pulumi.Input

	ToGroupReplicaConfigurationNicFirewallRuleOutput() GroupReplicaConfigurationNicFirewallRuleOutput
	ToGroupReplicaConfigurationNicFirewallRuleOutputWithContext(context.Context) GroupReplicaConfigurationNicFirewallRuleOutput
}

type GroupReplicaConfigurationNicFirewallRuleArgs struct {
	// [int] Defines the allowed code (from 0 to 254) if protocol ICMP is chosen.
	IcmpCode pulumi.IntPtrInput `pulumi:"icmpCode"`
	// [string] Defines the allowed code (from 0 to 254) if protocol ICMP is chosen. Value null allows all codes.
	IcmpType pulumi.IntPtrInput `pulumi:"icmpType"`
	// [string] Name for this replica volume.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [int] Defines the end range of the allowed port (from 1 to 65534) if the protocol TCP or UDP is chosen. Leave portRangeStart and portRangeEnd null to allow all ports.
	PortRangeEnd pulumi.IntPtrInput `pulumi:"portRangeEnd"`
	// [int] Defines the start range of the allowed port (from 1 to 65534) if protocol TCP or UDP is chosen. Leave portRangeStart and portRangeEnd null to allow all ports.
	PortRangeStart pulumi.IntPtrInput `pulumi:"portRangeStart"`
	// [string] The protocol for the rule: TCP, UDP, ICMP, ANY. Property cannot be modified after creation (disallowed in update requests).
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// [string] Only traffic originating from the respective IPv4 address is allowed. Value null allows all source IPs.
	SourceIp pulumi.StringPtrInput `pulumi:"sourceIp"`
	// [string] Only traffic originating from the respective MAC address is allowed. Valid format: aa:bb:cc:dd:ee:ff. Value null allows all source MAC address. Valid format: aa:bb:cc:dd:ee:ff.
	SourceMac pulumi.StringPtrInput `pulumi:"sourceMac"`
	// [string] In case the target NIC has multiple IP addresses, only traffic directed to the respective IP address of the NIC is allowed. Value null allows all target IPs.
	TargetIp pulumi.StringPtrInput `pulumi:"targetIp"`
	// [string] Storage Type for this replica volume. Possible values: `SSD`, `HDD`, `SSD_STANDARD` or `SSD_PREMIUM`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GroupReplicaConfigurationNicFirewallRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupReplicaConfigurationNicFirewallRule)(nil)).Elem()
}

func (i GroupReplicaConfigurationNicFirewallRuleArgs) ToGroupReplicaConfigurationNicFirewallRuleOutput() GroupReplicaConfigurationNicFirewallRuleOutput {
	return i.ToGroupReplicaConfigurationNicFirewallRuleOutputWithContext(context.Background())
}

func (i GroupReplicaConfigurationNicFirewallRuleArgs) ToGroupReplicaConfigurationNicFirewallRuleOutputWithContext(ctx context.Context) GroupReplicaConfigurationNicFirewallRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupReplicaConfigurationNicFirewallRuleOutput)
}

// GroupReplicaConfigurationNicFirewallRuleArrayInput is an input type that accepts GroupReplicaConfigurationNicFirewallRuleArray and GroupReplicaConfigurationNicFirewallRuleArrayOutput values.
// You can construct a concrete instance of `GroupReplicaConfigurationNicFirewallRuleArrayInput` via:
//
//	GroupReplicaConfigurationNicFirewallRuleArray{ GroupReplicaConfigurationNicFirewallRuleArgs{...} }
type GroupReplicaConfigurationNicFirewallRuleArrayInput interface {
	pulumi.Input

	ToGroupReplicaConfigurationNicFirewallRuleArrayOutput() GroupReplicaConfigurationNicFirewallRuleArrayOutput
	ToGroupReplicaConfigurationNicFirewallRuleArrayOutputWithContext(context.Context) GroupReplicaConfigurationNicFirewallRuleArrayOutput
}

type GroupReplicaConfigurationNicFirewallRuleArray []GroupReplicaConfigurationNicFirewallRuleInput

func (GroupReplicaConfigurationNicFirewallRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupReplicaConfigurationNicFirewallRule)(nil)).Elem()
}

func (i GroupReplicaConfigurationNicFirewallRuleArray) ToGroupReplicaConfigurationNicFirewallRuleArrayOutput() GroupReplicaConfigurationNicFirewallRuleArrayOutput {
	return i.ToGroupReplicaConfigurationNicFirewallRuleArrayOutputWithContext(context.Background())
}

func (i GroupReplicaConfigurationNicFirewallRuleArray) ToGroupReplicaConfigurationNicFirewallRuleArrayOutputWithContext(ctx context.Context) GroupReplicaConfigurationNicFirewallRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupReplicaConfigurationNicFirewallRuleArrayOutput)
}

type GroupReplicaConfigurationNicFirewallRuleOutput struct{ *pulumi.OutputState }

func (GroupReplicaConfigurationNicFirewallRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupReplicaConfigurationNicFirewallRule)(nil)).Elem()
}

func (o GroupReplicaConfigurationNicFirewallRuleOutput) ToGroupReplicaConfigurationNicFirewallRuleOutput() GroupReplicaConfigurationNicFirewallRuleOutput {
	return o
}

func (o GroupReplicaConfigurationNicFirewallRuleOutput) ToGroupReplicaConfigurationNicFirewallRuleOutputWithContext(ctx context.Context) GroupReplicaConfigurationNicFirewallRuleOutput {
	return o
}

// [int] Defines the allowed code (from 0 to 254) if protocol ICMP is chosen.
func (o GroupReplicaConfigurationNicFirewallRuleOutput) IcmpCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationNicFirewallRule) *int { return v.IcmpCode }).(pulumi.IntPtrOutput)
}

// [string] Defines the allowed code (from 0 to 254) if protocol ICMP is chosen. Value null allows all codes.
func (o GroupReplicaConfigurationNicFirewallRuleOutput) IcmpType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationNicFirewallRule) *int { return v.IcmpType }).(pulumi.IntPtrOutput)
}

// [string] Name for this replica volume.
func (o GroupReplicaConfigurationNicFirewallRuleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationNicFirewallRule) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [int] Defines the end range of the allowed port (from 1 to 65534) if the protocol TCP or UDP is chosen. Leave portRangeStart and portRangeEnd null to allow all ports.
func (o GroupReplicaConfigurationNicFirewallRuleOutput) PortRangeEnd() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationNicFirewallRule) *int { return v.PortRangeEnd }).(pulumi.IntPtrOutput)
}

// [int] Defines the start range of the allowed port (from 1 to 65534) if protocol TCP or UDP is chosen. Leave portRangeStart and portRangeEnd null to allow all ports.
func (o GroupReplicaConfigurationNicFirewallRuleOutput) PortRangeStart() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationNicFirewallRule) *int { return v.PortRangeStart }).(pulumi.IntPtrOutput)
}

// [string] The protocol for the rule: TCP, UDP, ICMP, ANY. Property cannot be modified after creation (disallowed in update requests).
func (o GroupReplicaConfigurationNicFirewallRuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationNicFirewallRule) string { return v.Protocol }).(pulumi.StringOutput)
}

// [string] Only traffic originating from the respective IPv4 address is allowed. Value null allows all source IPs.
func (o GroupReplicaConfigurationNicFirewallRuleOutput) SourceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationNicFirewallRule) *string { return v.SourceIp }).(pulumi.StringPtrOutput)
}

// [string] Only traffic originating from the respective MAC address is allowed. Valid format: aa:bb:cc:dd:ee:ff. Value null allows all source MAC address. Valid format: aa:bb:cc:dd:ee:ff.
func (o GroupReplicaConfigurationNicFirewallRuleOutput) SourceMac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationNicFirewallRule) *string { return v.SourceMac }).(pulumi.StringPtrOutput)
}

// [string] In case the target NIC has multiple IP addresses, only traffic directed to the respective IP address of the NIC is allowed. Value null allows all target IPs.
func (o GroupReplicaConfigurationNicFirewallRuleOutput) TargetIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationNicFirewallRule) *string { return v.TargetIp }).(pulumi.StringPtrOutput)
}

// [string] Storage Type for this replica volume. Possible values: `SSD`, `HDD`, `SSD_STANDARD` or `SSD_PREMIUM`.
func (o GroupReplicaConfigurationNicFirewallRuleOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationNicFirewallRule) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GroupReplicaConfigurationNicFirewallRuleArrayOutput struct{ *pulumi.OutputState }

func (GroupReplicaConfigurationNicFirewallRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupReplicaConfigurationNicFirewallRule)(nil)).Elem()
}

func (o GroupReplicaConfigurationNicFirewallRuleArrayOutput) ToGroupReplicaConfigurationNicFirewallRuleArrayOutput() GroupReplicaConfigurationNicFirewallRuleArrayOutput {
	return o
}

func (o GroupReplicaConfigurationNicFirewallRuleArrayOutput) ToGroupReplicaConfigurationNicFirewallRuleArrayOutputWithContext(ctx context.Context) GroupReplicaConfigurationNicFirewallRuleArrayOutput {
	return o
}

func (o GroupReplicaConfigurationNicFirewallRuleArrayOutput) Index(i pulumi.IntInput) GroupReplicaConfigurationNicFirewallRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupReplicaConfigurationNicFirewallRule {
		return vs[0].([]GroupReplicaConfigurationNicFirewallRule)[vs[1].(int)]
	}).(GroupReplicaConfigurationNicFirewallRuleOutput)
}

type GroupReplicaConfigurationNicFlowLog struct {
	// [string] Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, forces re-creation.
	Action string `pulumi:"action"`
	// [string] Specifies the IONOS Object Storage bucket where the flow log data will be stored. The bucket must exist. Immutable, forces re-creation.
	Bucket string `pulumi:"bucket"`
	// [string] Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, forces re-creation.
	Direction string `pulumi:"direction"`
	// The resource's unique identifier.
	Id *string `pulumi:"id"`
	// [string] Name for this replica volume.
	Name string `pulumi:"name"`
}

// GroupReplicaConfigurationNicFlowLogInput is an input type that accepts GroupReplicaConfigurationNicFlowLogArgs and GroupReplicaConfigurationNicFlowLogOutput values.
// You can construct a concrete instance of `GroupReplicaConfigurationNicFlowLogInput` via:
//
//	GroupReplicaConfigurationNicFlowLogArgs{...}
type GroupReplicaConfigurationNicFlowLogInput interface {
	pulumi.Input

	ToGroupReplicaConfigurationNicFlowLogOutput() GroupReplicaConfigurationNicFlowLogOutput
	ToGroupReplicaConfigurationNicFlowLogOutputWithContext(context.Context) GroupReplicaConfigurationNicFlowLogOutput
}

type GroupReplicaConfigurationNicFlowLogArgs struct {
	// [string] Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, forces re-creation.
	Action pulumi.StringInput `pulumi:"action"`
	// [string] Specifies the IONOS Object Storage bucket where the flow log data will be stored. The bucket must exist. Immutable, forces re-creation.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// [string] Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, forces re-creation.
	Direction pulumi.StringInput `pulumi:"direction"`
	// The resource's unique identifier.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// [string] Name for this replica volume.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GroupReplicaConfigurationNicFlowLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupReplicaConfigurationNicFlowLog)(nil)).Elem()
}

func (i GroupReplicaConfigurationNicFlowLogArgs) ToGroupReplicaConfigurationNicFlowLogOutput() GroupReplicaConfigurationNicFlowLogOutput {
	return i.ToGroupReplicaConfigurationNicFlowLogOutputWithContext(context.Background())
}

func (i GroupReplicaConfigurationNicFlowLogArgs) ToGroupReplicaConfigurationNicFlowLogOutputWithContext(ctx context.Context) GroupReplicaConfigurationNicFlowLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupReplicaConfigurationNicFlowLogOutput)
}

// GroupReplicaConfigurationNicFlowLogArrayInput is an input type that accepts GroupReplicaConfigurationNicFlowLogArray and GroupReplicaConfigurationNicFlowLogArrayOutput values.
// You can construct a concrete instance of `GroupReplicaConfigurationNicFlowLogArrayInput` via:
//
//	GroupReplicaConfigurationNicFlowLogArray{ GroupReplicaConfigurationNicFlowLogArgs{...} }
type GroupReplicaConfigurationNicFlowLogArrayInput interface {
	pulumi.Input

	ToGroupReplicaConfigurationNicFlowLogArrayOutput() GroupReplicaConfigurationNicFlowLogArrayOutput
	ToGroupReplicaConfigurationNicFlowLogArrayOutputWithContext(context.Context) GroupReplicaConfigurationNicFlowLogArrayOutput
}

type GroupReplicaConfigurationNicFlowLogArray []GroupReplicaConfigurationNicFlowLogInput

func (GroupReplicaConfigurationNicFlowLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupReplicaConfigurationNicFlowLog)(nil)).Elem()
}

func (i GroupReplicaConfigurationNicFlowLogArray) ToGroupReplicaConfigurationNicFlowLogArrayOutput() GroupReplicaConfigurationNicFlowLogArrayOutput {
	return i.ToGroupReplicaConfigurationNicFlowLogArrayOutputWithContext(context.Background())
}

func (i GroupReplicaConfigurationNicFlowLogArray) ToGroupReplicaConfigurationNicFlowLogArrayOutputWithContext(ctx context.Context) GroupReplicaConfigurationNicFlowLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupReplicaConfigurationNicFlowLogArrayOutput)
}

type GroupReplicaConfigurationNicFlowLogOutput struct{ *pulumi.OutputState }

func (GroupReplicaConfigurationNicFlowLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupReplicaConfigurationNicFlowLog)(nil)).Elem()
}

func (o GroupReplicaConfigurationNicFlowLogOutput) ToGroupReplicaConfigurationNicFlowLogOutput() GroupReplicaConfigurationNicFlowLogOutput {
	return o
}

func (o GroupReplicaConfigurationNicFlowLogOutput) ToGroupReplicaConfigurationNicFlowLogOutputWithContext(ctx context.Context) GroupReplicaConfigurationNicFlowLogOutput {
	return o
}

// [string] Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, forces re-creation.
func (o GroupReplicaConfigurationNicFlowLogOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationNicFlowLog) string { return v.Action }).(pulumi.StringOutput)
}

// [string] Specifies the IONOS Object Storage bucket where the flow log data will be stored. The bucket must exist. Immutable, forces re-creation.
func (o GroupReplicaConfigurationNicFlowLogOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationNicFlowLog) string { return v.Bucket }).(pulumi.StringOutput)
}

// [string] Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, forces re-creation.
func (o GroupReplicaConfigurationNicFlowLogOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationNicFlowLog) string { return v.Direction }).(pulumi.StringOutput)
}

// The resource's unique identifier.
func (o GroupReplicaConfigurationNicFlowLogOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationNicFlowLog) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// [string] Name for this replica volume.
func (o GroupReplicaConfigurationNicFlowLogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationNicFlowLog) string { return v.Name }).(pulumi.StringOutput)
}

type GroupReplicaConfigurationNicFlowLogArrayOutput struct{ *pulumi.OutputState }

func (GroupReplicaConfigurationNicFlowLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupReplicaConfigurationNicFlowLog)(nil)).Elem()
}

func (o GroupReplicaConfigurationNicFlowLogArrayOutput) ToGroupReplicaConfigurationNicFlowLogArrayOutput() GroupReplicaConfigurationNicFlowLogArrayOutput {
	return o
}

func (o GroupReplicaConfigurationNicFlowLogArrayOutput) ToGroupReplicaConfigurationNicFlowLogArrayOutputWithContext(ctx context.Context) GroupReplicaConfigurationNicFlowLogArrayOutput {
	return o
}

func (o GroupReplicaConfigurationNicFlowLogArrayOutput) Index(i pulumi.IntInput) GroupReplicaConfigurationNicFlowLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupReplicaConfigurationNicFlowLog {
		return vs[0].([]GroupReplicaConfigurationNicFlowLog)[vs[1].(int)]
	}).(GroupReplicaConfigurationNicFlowLogOutput)
}

type GroupReplicaConfigurationNicTargetGroup struct {
	// [int] The port of the target group.
	Port int `pulumi:"port"`
	// [string] The ID of the target group.
	TargetGroupId string `pulumi:"targetGroupId"`
	// [int] The weight of the target group.
	Weight int `pulumi:"weight"`
}

// GroupReplicaConfigurationNicTargetGroupInput is an input type that accepts GroupReplicaConfigurationNicTargetGroupArgs and GroupReplicaConfigurationNicTargetGroupOutput values.
// You can construct a concrete instance of `GroupReplicaConfigurationNicTargetGroupInput` via:
//
//	GroupReplicaConfigurationNicTargetGroupArgs{...}
type GroupReplicaConfigurationNicTargetGroupInput interface {
	pulumi.Input

	ToGroupReplicaConfigurationNicTargetGroupOutput() GroupReplicaConfigurationNicTargetGroupOutput
	ToGroupReplicaConfigurationNicTargetGroupOutputWithContext(context.Context) GroupReplicaConfigurationNicTargetGroupOutput
}

type GroupReplicaConfigurationNicTargetGroupArgs struct {
	// [int] The port of the target group.
	Port pulumi.IntInput `pulumi:"port"`
	// [string] The ID of the target group.
	TargetGroupId pulumi.StringInput `pulumi:"targetGroupId"`
	// [int] The weight of the target group.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (GroupReplicaConfigurationNicTargetGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupReplicaConfigurationNicTargetGroup)(nil)).Elem()
}

func (i GroupReplicaConfigurationNicTargetGroupArgs) ToGroupReplicaConfigurationNicTargetGroupOutput() GroupReplicaConfigurationNicTargetGroupOutput {
	return i.ToGroupReplicaConfigurationNicTargetGroupOutputWithContext(context.Background())
}

func (i GroupReplicaConfigurationNicTargetGroupArgs) ToGroupReplicaConfigurationNicTargetGroupOutputWithContext(ctx context.Context) GroupReplicaConfigurationNicTargetGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupReplicaConfigurationNicTargetGroupOutput)
}

func (i GroupReplicaConfigurationNicTargetGroupArgs) ToGroupReplicaConfigurationNicTargetGroupPtrOutput() GroupReplicaConfigurationNicTargetGroupPtrOutput {
	return i.ToGroupReplicaConfigurationNicTargetGroupPtrOutputWithContext(context.Background())
}

func (i GroupReplicaConfigurationNicTargetGroupArgs) ToGroupReplicaConfigurationNicTargetGroupPtrOutputWithContext(ctx context.Context) GroupReplicaConfigurationNicTargetGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupReplicaConfigurationNicTargetGroupOutput).ToGroupReplicaConfigurationNicTargetGroupPtrOutputWithContext(ctx)
}

// GroupReplicaConfigurationNicTargetGroupPtrInput is an input type that accepts GroupReplicaConfigurationNicTargetGroupArgs, GroupReplicaConfigurationNicTargetGroupPtr and GroupReplicaConfigurationNicTargetGroupPtrOutput values.
// You can construct a concrete instance of `GroupReplicaConfigurationNicTargetGroupPtrInput` via:
//
//	        GroupReplicaConfigurationNicTargetGroupArgs{...}
//
//	or:
//
//	        nil
type GroupReplicaConfigurationNicTargetGroupPtrInput interface {
	pulumi.Input

	ToGroupReplicaConfigurationNicTargetGroupPtrOutput() GroupReplicaConfigurationNicTargetGroupPtrOutput
	ToGroupReplicaConfigurationNicTargetGroupPtrOutputWithContext(context.Context) GroupReplicaConfigurationNicTargetGroupPtrOutput
}

type groupReplicaConfigurationNicTargetGroupPtrType GroupReplicaConfigurationNicTargetGroupArgs

func GroupReplicaConfigurationNicTargetGroupPtr(v *GroupReplicaConfigurationNicTargetGroupArgs) GroupReplicaConfigurationNicTargetGroupPtrInput {
	return (*groupReplicaConfigurationNicTargetGroupPtrType)(v)
}

func (*groupReplicaConfigurationNicTargetGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupReplicaConfigurationNicTargetGroup)(nil)).Elem()
}

func (i *groupReplicaConfigurationNicTargetGroupPtrType) ToGroupReplicaConfigurationNicTargetGroupPtrOutput() GroupReplicaConfigurationNicTargetGroupPtrOutput {
	return i.ToGroupReplicaConfigurationNicTargetGroupPtrOutputWithContext(context.Background())
}

func (i *groupReplicaConfigurationNicTargetGroupPtrType) ToGroupReplicaConfigurationNicTargetGroupPtrOutputWithContext(ctx context.Context) GroupReplicaConfigurationNicTargetGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupReplicaConfigurationNicTargetGroupPtrOutput)
}

type GroupReplicaConfigurationNicTargetGroupOutput struct{ *pulumi.OutputState }

func (GroupReplicaConfigurationNicTargetGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupReplicaConfigurationNicTargetGroup)(nil)).Elem()
}

func (o GroupReplicaConfigurationNicTargetGroupOutput) ToGroupReplicaConfigurationNicTargetGroupOutput() GroupReplicaConfigurationNicTargetGroupOutput {
	return o
}

func (o GroupReplicaConfigurationNicTargetGroupOutput) ToGroupReplicaConfigurationNicTargetGroupOutputWithContext(ctx context.Context) GroupReplicaConfigurationNicTargetGroupOutput {
	return o
}

func (o GroupReplicaConfigurationNicTargetGroupOutput) ToGroupReplicaConfigurationNicTargetGroupPtrOutput() GroupReplicaConfigurationNicTargetGroupPtrOutput {
	return o.ToGroupReplicaConfigurationNicTargetGroupPtrOutputWithContext(context.Background())
}

func (o GroupReplicaConfigurationNicTargetGroupOutput) ToGroupReplicaConfigurationNicTargetGroupPtrOutputWithContext(ctx context.Context) GroupReplicaConfigurationNicTargetGroupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupReplicaConfigurationNicTargetGroup) *GroupReplicaConfigurationNicTargetGroup {
		return &v
	}).(GroupReplicaConfigurationNicTargetGroupPtrOutput)
}

// [int] The port of the target group.
func (o GroupReplicaConfigurationNicTargetGroupOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationNicTargetGroup) int { return v.Port }).(pulumi.IntOutput)
}

// [string] The ID of the target group.
func (o GroupReplicaConfigurationNicTargetGroupOutput) TargetGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationNicTargetGroup) string { return v.TargetGroupId }).(pulumi.StringOutput)
}

// [int] The weight of the target group.
func (o GroupReplicaConfigurationNicTargetGroupOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationNicTargetGroup) int { return v.Weight }).(pulumi.IntOutput)
}

type GroupReplicaConfigurationNicTargetGroupPtrOutput struct{ *pulumi.OutputState }

func (GroupReplicaConfigurationNicTargetGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupReplicaConfigurationNicTargetGroup)(nil)).Elem()
}

func (o GroupReplicaConfigurationNicTargetGroupPtrOutput) ToGroupReplicaConfigurationNicTargetGroupPtrOutput() GroupReplicaConfigurationNicTargetGroupPtrOutput {
	return o
}

func (o GroupReplicaConfigurationNicTargetGroupPtrOutput) ToGroupReplicaConfigurationNicTargetGroupPtrOutputWithContext(ctx context.Context) GroupReplicaConfigurationNicTargetGroupPtrOutput {
	return o
}

func (o GroupReplicaConfigurationNicTargetGroupPtrOutput) Elem() GroupReplicaConfigurationNicTargetGroupOutput {
	return o.ApplyT(func(v *GroupReplicaConfigurationNicTargetGroup) GroupReplicaConfigurationNicTargetGroup {
		if v != nil {
			return *v
		}
		var ret GroupReplicaConfigurationNicTargetGroup
		return ret
	}).(GroupReplicaConfigurationNicTargetGroupOutput)
}

// [int] The port of the target group.
func (o GroupReplicaConfigurationNicTargetGroupPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GroupReplicaConfigurationNicTargetGroup) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// [string] The ID of the target group.
func (o GroupReplicaConfigurationNicTargetGroupPtrOutput) TargetGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupReplicaConfigurationNicTargetGroup) *string {
		if v == nil {
			return nil
		}
		return &v.TargetGroupId
	}).(pulumi.StringPtrOutput)
}

// [int] The weight of the target group.
func (o GroupReplicaConfigurationNicTargetGroupPtrOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GroupReplicaConfigurationNicTargetGroup) *int {
		if v == nil {
			return nil
		}
		return &v.Weight
	}).(pulumi.IntPtrOutput)
}

type GroupReplicaConfigurationVolume struct {
	// [string] The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either `public image` or `imageAlias` in conjunction with this property.
	BackupUnitId *string `pulumi:"backupUnitId"`
	// [string] Determines whether the volume will be used as a boot volume. Set to NONE, the volume will not be used as boot volume. Set to PRIMARY, the volume will be used as boot volume and set to AUTO will delegate the decision to the provisioning engine to decide whether to use the volume as boot volume.
	// Notice that exactly one volume can be set to PRIMARY or all of them set to AUTO.
	BootOrder string `pulumi:"bootOrder"`
	// [string] The bus type of the volume. Default setting is `VIRTIO`. The bus type `IDE` is also supported.
	Bus *string `pulumi:"bus"`
	// [string] The image installed on the volume. Only the UUID of the image is presently supported.
	Image *string `pulumi:"image"`
	// [string] The image installed on the volume. Must be an `imageAlias` as specified via the images API. Note that one of `image` or `imageAlias` must be set, but not both.
	ImageAlias *string `pulumi:"imageAlias"`
	// [string] Image password for this replica volume.
	ImagePassword *string `pulumi:"imagePassword"`
	// [string] Name for this replica volume.
	Name string `pulumi:"name"`
	// [int] Name for this replica volume.
	Size int `pulumi:"size"`
	// List of ssh keys, supports values or paths to files. Cannot be changed at update.
	SshKeys []string `pulumi:"sshKeys"`
	// [string] Storage Type for this replica volume. Possible values: `SSD`, `HDD`, `SSD_STANDARD` or `SSD_PREMIUM`.
	Type string `pulumi:"type"`
	// [string] User-data (Cloud Init) for this replica volume. Make sure you provide a Cloud Init compatible image in conjunction with this parameter.
	UserData *string `pulumi:"userData"`
}

// GroupReplicaConfigurationVolumeInput is an input type that accepts GroupReplicaConfigurationVolumeArgs and GroupReplicaConfigurationVolumeOutput values.
// You can construct a concrete instance of `GroupReplicaConfigurationVolumeInput` via:
//
//	GroupReplicaConfigurationVolumeArgs{...}
type GroupReplicaConfigurationVolumeInput interface {
	pulumi.Input

	ToGroupReplicaConfigurationVolumeOutput() GroupReplicaConfigurationVolumeOutput
	ToGroupReplicaConfigurationVolumeOutputWithContext(context.Context) GroupReplicaConfigurationVolumeOutput
}

type GroupReplicaConfigurationVolumeArgs struct {
	// [string] The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either `public image` or `imageAlias` in conjunction with this property.
	BackupUnitId pulumi.StringPtrInput `pulumi:"backupUnitId"`
	// [string] Determines whether the volume will be used as a boot volume. Set to NONE, the volume will not be used as boot volume. Set to PRIMARY, the volume will be used as boot volume and set to AUTO will delegate the decision to the provisioning engine to decide whether to use the volume as boot volume.
	// Notice that exactly one volume can be set to PRIMARY or all of them set to AUTO.
	BootOrder pulumi.StringInput `pulumi:"bootOrder"`
	// [string] The bus type of the volume. Default setting is `VIRTIO`. The bus type `IDE` is also supported.
	Bus pulumi.StringPtrInput `pulumi:"bus"`
	// [string] The image installed on the volume. Only the UUID of the image is presently supported.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// [string] The image installed on the volume. Must be an `imageAlias` as specified via the images API. Note that one of `image` or `imageAlias` must be set, but not both.
	ImageAlias pulumi.StringPtrInput `pulumi:"imageAlias"`
	// [string] Image password for this replica volume.
	ImagePassword pulumi.StringPtrInput `pulumi:"imagePassword"`
	// [string] Name for this replica volume.
	Name pulumi.StringInput `pulumi:"name"`
	// [int] Name for this replica volume.
	Size pulumi.IntInput `pulumi:"size"`
	// List of ssh keys, supports values or paths to files. Cannot be changed at update.
	SshKeys pulumi.StringArrayInput `pulumi:"sshKeys"`
	// [string] Storage Type for this replica volume. Possible values: `SSD`, `HDD`, `SSD_STANDARD` or `SSD_PREMIUM`.
	Type pulumi.StringInput `pulumi:"type"`
	// [string] User-data (Cloud Init) for this replica volume. Make sure you provide a Cloud Init compatible image in conjunction with this parameter.
	UserData pulumi.StringPtrInput `pulumi:"userData"`
}

func (GroupReplicaConfigurationVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupReplicaConfigurationVolume)(nil)).Elem()
}

func (i GroupReplicaConfigurationVolumeArgs) ToGroupReplicaConfigurationVolumeOutput() GroupReplicaConfigurationVolumeOutput {
	return i.ToGroupReplicaConfigurationVolumeOutputWithContext(context.Background())
}

func (i GroupReplicaConfigurationVolumeArgs) ToGroupReplicaConfigurationVolumeOutputWithContext(ctx context.Context) GroupReplicaConfigurationVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupReplicaConfigurationVolumeOutput)
}

// GroupReplicaConfigurationVolumeArrayInput is an input type that accepts GroupReplicaConfigurationVolumeArray and GroupReplicaConfigurationVolumeArrayOutput values.
// You can construct a concrete instance of `GroupReplicaConfigurationVolumeArrayInput` via:
//
//	GroupReplicaConfigurationVolumeArray{ GroupReplicaConfigurationVolumeArgs{...} }
type GroupReplicaConfigurationVolumeArrayInput interface {
	pulumi.Input

	ToGroupReplicaConfigurationVolumeArrayOutput() GroupReplicaConfigurationVolumeArrayOutput
	ToGroupReplicaConfigurationVolumeArrayOutputWithContext(context.Context) GroupReplicaConfigurationVolumeArrayOutput
}

type GroupReplicaConfigurationVolumeArray []GroupReplicaConfigurationVolumeInput

func (GroupReplicaConfigurationVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupReplicaConfigurationVolume)(nil)).Elem()
}

func (i GroupReplicaConfigurationVolumeArray) ToGroupReplicaConfigurationVolumeArrayOutput() GroupReplicaConfigurationVolumeArrayOutput {
	return i.ToGroupReplicaConfigurationVolumeArrayOutputWithContext(context.Background())
}

func (i GroupReplicaConfigurationVolumeArray) ToGroupReplicaConfigurationVolumeArrayOutputWithContext(ctx context.Context) GroupReplicaConfigurationVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupReplicaConfigurationVolumeArrayOutput)
}

type GroupReplicaConfigurationVolumeOutput struct{ *pulumi.OutputState }

func (GroupReplicaConfigurationVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupReplicaConfigurationVolume)(nil)).Elem()
}

func (o GroupReplicaConfigurationVolumeOutput) ToGroupReplicaConfigurationVolumeOutput() GroupReplicaConfigurationVolumeOutput {
	return o
}

func (o GroupReplicaConfigurationVolumeOutput) ToGroupReplicaConfigurationVolumeOutputWithContext(ctx context.Context) GroupReplicaConfigurationVolumeOutput {
	return o
}

// [string] The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either `public image` or `imageAlias` in conjunction with this property.
func (o GroupReplicaConfigurationVolumeOutput) BackupUnitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationVolume) *string { return v.BackupUnitId }).(pulumi.StringPtrOutput)
}

// [string] Determines whether the volume will be used as a boot volume. Set to NONE, the volume will not be used as boot volume. Set to PRIMARY, the volume will be used as boot volume and set to AUTO will delegate the decision to the provisioning engine to decide whether to use the volume as boot volume.
// Notice that exactly one volume can be set to PRIMARY or all of them set to AUTO.
func (o GroupReplicaConfigurationVolumeOutput) BootOrder() pulumi.StringOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationVolume) string { return v.BootOrder }).(pulumi.StringOutput)
}

// [string] The bus type of the volume. Default setting is `VIRTIO`. The bus type `IDE` is also supported.
func (o GroupReplicaConfigurationVolumeOutput) Bus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationVolume) *string { return v.Bus }).(pulumi.StringPtrOutput)
}

// [string] The image installed on the volume. Only the UUID of the image is presently supported.
func (o GroupReplicaConfigurationVolumeOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationVolume) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// [string] The image installed on the volume. Must be an `imageAlias` as specified via the images API. Note that one of `image` or `imageAlias` must be set, but not both.
func (o GroupReplicaConfigurationVolumeOutput) ImageAlias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationVolume) *string { return v.ImageAlias }).(pulumi.StringPtrOutput)
}

// [string] Image password for this replica volume.
func (o GroupReplicaConfigurationVolumeOutput) ImagePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationVolume) *string { return v.ImagePassword }).(pulumi.StringPtrOutput)
}

// [string] Name for this replica volume.
func (o GroupReplicaConfigurationVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationVolume) string { return v.Name }).(pulumi.StringOutput)
}

// [int] Name for this replica volume.
func (o GroupReplicaConfigurationVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationVolume) int { return v.Size }).(pulumi.IntOutput)
}

// List of ssh keys, supports values or paths to files. Cannot be changed at update.
func (o GroupReplicaConfigurationVolumeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationVolume) []string { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// [string] Storage Type for this replica volume. Possible values: `SSD`, `HDD`, `SSD_STANDARD` or `SSD_PREMIUM`.
func (o GroupReplicaConfigurationVolumeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationVolume) string { return v.Type }).(pulumi.StringOutput)
}

// [string] User-data (Cloud Init) for this replica volume. Make sure you provide a Cloud Init compatible image in conjunction with this parameter.
func (o GroupReplicaConfigurationVolumeOutput) UserData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupReplicaConfigurationVolume) *string { return v.UserData }).(pulumi.StringPtrOutput)
}

type GroupReplicaConfigurationVolumeArrayOutput struct{ *pulumi.OutputState }

func (GroupReplicaConfigurationVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupReplicaConfigurationVolume)(nil)).Elem()
}

func (o GroupReplicaConfigurationVolumeArrayOutput) ToGroupReplicaConfigurationVolumeArrayOutput() GroupReplicaConfigurationVolumeArrayOutput {
	return o
}

func (o GroupReplicaConfigurationVolumeArrayOutput) ToGroupReplicaConfigurationVolumeArrayOutputWithContext(ctx context.Context) GroupReplicaConfigurationVolumeArrayOutput {
	return o
}

func (o GroupReplicaConfigurationVolumeArrayOutput) Index(i pulumi.IntInput) GroupReplicaConfigurationVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupReplicaConfigurationVolume {
		return vs[0].([]GroupReplicaConfigurationVolume)[vs[1].(int)]
	}).(GroupReplicaConfigurationVolumeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyInput)(nil)).Elem(), GroupPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyPtrInput)(nil)).Elem(), GroupPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyScaleInActionInput)(nil)).Elem(), GroupPolicyScaleInActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyScaleInActionPtrInput)(nil)).Elem(), GroupPolicyScaleInActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyScaleOutActionInput)(nil)).Elem(), GroupPolicyScaleOutActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyScaleOutActionPtrInput)(nil)).Elem(), GroupPolicyScaleOutActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupReplicaConfigurationInput)(nil)).Elem(), GroupReplicaConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupReplicaConfigurationPtrInput)(nil)).Elem(), GroupReplicaConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupReplicaConfigurationNicInput)(nil)).Elem(), GroupReplicaConfigurationNicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupReplicaConfigurationNicArrayInput)(nil)).Elem(), GroupReplicaConfigurationNicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupReplicaConfigurationNicFirewallRuleInput)(nil)).Elem(), GroupReplicaConfigurationNicFirewallRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupReplicaConfigurationNicFirewallRuleArrayInput)(nil)).Elem(), GroupReplicaConfigurationNicFirewallRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupReplicaConfigurationNicFlowLogInput)(nil)).Elem(), GroupReplicaConfigurationNicFlowLogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupReplicaConfigurationNicFlowLogArrayInput)(nil)).Elem(), GroupReplicaConfigurationNicFlowLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupReplicaConfigurationNicTargetGroupInput)(nil)).Elem(), GroupReplicaConfigurationNicTargetGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupReplicaConfigurationNicTargetGroupPtrInput)(nil)).Elem(), GroupReplicaConfigurationNicTargetGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupReplicaConfigurationVolumeInput)(nil)).Elem(), GroupReplicaConfigurationVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupReplicaConfigurationVolumeArrayInput)(nil)).Elem(), GroupReplicaConfigurationVolumeArray{})
	pulumi.RegisterOutputType(GroupPolicyOutput{})
	pulumi.RegisterOutputType(GroupPolicyPtrOutput{})
	pulumi.RegisterOutputType(GroupPolicyScaleInActionOutput{})
	pulumi.RegisterOutputType(GroupPolicyScaleInActionPtrOutput{})
	pulumi.RegisterOutputType(GroupPolicyScaleOutActionOutput{})
	pulumi.RegisterOutputType(GroupPolicyScaleOutActionPtrOutput{})
	pulumi.RegisterOutputType(GroupReplicaConfigurationOutput{})
	pulumi.RegisterOutputType(GroupReplicaConfigurationPtrOutput{})
	pulumi.RegisterOutputType(GroupReplicaConfigurationNicOutput{})
	pulumi.RegisterOutputType(GroupReplicaConfigurationNicArrayOutput{})
	pulumi.RegisterOutputType(GroupReplicaConfigurationNicFirewallRuleOutput{})
	pulumi.RegisterOutputType(GroupReplicaConfigurationNicFirewallRuleArrayOutput{})
	pulumi.RegisterOutputType(GroupReplicaConfigurationNicFlowLogOutput{})
	pulumi.RegisterOutputType(GroupReplicaConfigurationNicFlowLogArrayOutput{})
	pulumi.RegisterOutputType(GroupReplicaConfigurationNicTargetGroupOutput{})
	pulumi.RegisterOutputType(GroupReplicaConfigurationNicTargetGroupPtrOutput{})
	pulumi.RegisterOutputType(GroupReplicaConfigurationVolumeOutput{})
	pulumi.RegisterOutputType(GroupReplicaConfigurationVolumeArrayOutput{})
}
