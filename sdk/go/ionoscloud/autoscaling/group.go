// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autoscaling

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Autoscaling Group on IonosCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/autoscaling"
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/pulumi/pulumi-random/sdk/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			datacenterExample, err := compute.NewDatacenter(ctx, "datacenter_example", &compute.DatacenterArgs{
//				Name:     pulumi.String("datacenter_example"),
//				Location: pulumi.String("de/fra"),
//			})
//			if err != nil {
//				return err
//			}
//			lanExample1, err := compute.NewLan(ctx, "lan_example_1", &compute.LanArgs{
//				DatacenterId: datacenterExample.ID(),
//				Public:       pulumi.Bool(false),
//				Name:         pulumi.String("lan_example_1"),
//			})
//			if err != nil {
//				return err
//			}
//			lanExample2, err := compute.NewLan(ctx, "lan_example_2", &compute.LanArgs{
//				DatacenterId: datacenterExample.ID(),
//				Public:       pulumi.Bool(false),
//				Name:         pulumi.String("lan_example_2"),
//			})
//			if err != nil {
//				return err
//			}
//			autoscalingTargetGroup, err := compute.NewTargetGroup(ctx, "autoscaling_target_group", &compute.TargetGroupArgs{
//				Name:      pulumi.String("Target Group Example"),
//				Algorithm: pulumi.String("ROUND_ROBIN"),
//				Protocol:  pulumi.String("HTTP"),
//			})
//			if err != nil {
//				return err
//			}
//			serverImagePassword, err := random.NewPassword(ctx, "server_image_password", &random.PasswordArgs{
//				Length:  16,
//				Special: false,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = autoscaling.NewGroup(ctx, "autoscaling_group_example", &autoscaling.GroupArgs{
//				DatacenterId:    datacenterExample.ID(),
//				MaxReplicaCount: pulumi.Int(2),
//				MinReplicaCount: pulumi.Int(1),
//				Name:            pulumi.String("autoscaling_group_example"),
//				Policy: &autoscaling.GroupPolicyArgs{
//					Metric: pulumi.String("INSTANCE_CPU_UTILIZATION_AVERAGE"),
//					Range:  pulumi.String("PT24H"),
//					ScaleInAction: &autoscaling.GroupPolicyScaleInActionArgs{
//						Amount:                pulumi.Int(1),
//						AmountType:            pulumi.String("ABSOLUTE"),
//						TerminationPolicyType: pulumi.String("OLDEST_SERVER_FIRST"),
//						CooldownPeriod:        pulumi.String("PT5M"),
//						DeleteVolumes:         pulumi.Bool(true),
//					},
//					ScaleInThreshold: pulumi.Int(33),
//					ScaleOutAction: &autoscaling.GroupPolicyScaleOutActionArgs{
//						Amount:         pulumi.Int(1),
//						AmountType:     pulumi.String("ABSOLUTE"),
//						CooldownPeriod: pulumi.String("PT5M"),
//					},
//					ScaleOutThreshold: pulumi.Int(77),
//					Unit:              pulumi.String("PER_HOUR"),
//				},
//				ReplicaConfiguration: &autoscaling.GroupReplicaConfigurationArgs{
//					AvailabilityZone: pulumi.String("AUTO"),
//					Cores:            pulumi.Int(2),
//					CpuFamily:        pulumi.String("INTEL_SKYLAKE"),
//					Ram:              pulumi.Int(2048),
//					Nics: autoscaling.GroupReplicaConfigurationNicArray{
//						&autoscaling.GroupReplicaConfigurationNicArgs{
//							Lan:  lanExample1.ID(),
//							Name: pulumi.String("nic_example_1"),
//							Dhcp: pulumi.Bool(true),
//						},
//						&autoscaling.GroupReplicaConfigurationNicArgs{
//							Lan:            lanExample2.ID(),
//							Name:           pulumi.String("nic_example_2"),
//							Dhcp:           pulumi.Bool(true),
//							FirewallActive: pulumi.Bool(true),
//							FirewallType:   pulumi.String("INGRESS"),
//							FirewallRules: autoscaling.GroupReplicaConfigurationNicFirewallRuleArray{
//								&autoscaling.GroupReplicaConfigurationNicFirewallRuleArgs{
//									Name:           pulumi.String("rule_1"),
//									Protocol:       pulumi.String("TCP"),
//									PortRangeStart: pulumi.Int(1),
//									PortRangeEnd:   pulumi.Int(1000),
//									Type:           pulumi.String("INGRESS"),
//								},
//							},
//							FlowLogs: autoscaling.GroupReplicaConfigurationNicFlowLogArray{
//								&autoscaling.GroupReplicaConfigurationNicFlowLogArgs{
//									Name:      pulumi.String("flow_log_1"),
//									Bucket:    pulumi.String("test-de-bucket"),
//									Action:    pulumi.String("ALL"),
//									Direction: pulumi.String("BIDIRECTIONAL"),
//								},
//							},
//							TargetGroup: &autoscaling.GroupReplicaConfigurationNicTargetGroupArgs{
//								TargetGroupId: autoscalingTargetGroup.ID(),
//								Port:          pulumi.Int(80),
//								Weight:        pulumi.Int(50),
//							},
//						},
//					},
//					Volumes: autoscaling.GroupReplicaConfigurationVolumeArray{
//						&autoscaling.GroupReplicaConfigurationVolumeArgs{
//							ImageAlias:    pulumi.String("ubuntu:latest"),
//							Name:          pulumi.String("volume_example"),
//							Size:          pulumi.Int(10),
//							Type:          pulumi.String("HDD"),
//							UserData:      pulumi.String("ZWNobyAiSGVsbG8sIFdvcmxkIgo="),
//							ImagePassword: serverImagePassword.Result,
//							BootOrder:     pulumi.String("AUTO"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Group struct {
	pulumi.CustomResourceState

	// [string] Unique identifier for the resource
	DatacenterId pulumi.StringOutput `pulumi:"datacenterId"`
	// Location of the data center.
	Location pulumi.StringOutput `pulumi:"location"`
	// [int] The maximum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for both automatic and manual changes.
	MaxReplicaCount pulumi.IntOutput `pulumi:"maxReplicaCount"`
	// [int] The minimum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for both automatic and manual changes.
	MinReplicaCount pulumi.IntOutput `pulumi:"minReplicaCount"`
	// [string] User-defined name for the Autoscaling Group.
	Name pulumi.StringOutput `pulumi:"name"`
	// [List] Specifies the behavior of this Autoscaling Group. A policy consists of Triggers and Actions, whereby an Action is some kind of automated behavior, and a Trigger is defined by the circumstances under which the Action is triggered. Currently, two separate Actions, namely Scaling In and Out are supported, triggered through Thresholds defined on a given Metric.
	Policy GroupPolicyOutput `pulumi:"policy"`
	// [List]
	ReplicaConfiguration GroupReplicaConfigurationOutput `pulumi:"replicaConfiguration"`
}

// NewGroup registers a new resource with the given unique name, arguments, and options.
func NewGroup(ctx *pulumi.Context,
	name string, args *GroupArgs, opts ...pulumi.ResourceOption) (*Group, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatacenterId == nil {
		return nil, errors.New("invalid value for required argument 'DatacenterId'")
	}
	if args.MaxReplicaCount == nil {
		return nil, errors.New("invalid value for required argument 'MaxReplicaCount'")
	}
	if args.MinReplicaCount == nil {
		return nil, errors.New("invalid value for required argument 'MinReplicaCount'")
	}
	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	if args.ReplicaConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'ReplicaConfiguration'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Group
	err := ctx.RegisterResource("ionoscloud:autoscaling/group:Group", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroup gets an existing Group resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupState, opts ...pulumi.ResourceOption) (*Group, error) {
	var resource Group
	err := ctx.ReadResource("ionoscloud:autoscaling/group:Group", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Group resources.
type groupState struct {
	// [string] Unique identifier for the resource
	DatacenterId *string `pulumi:"datacenterId"`
	// Location of the data center.
	Location *string `pulumi:"location"`
	// [int] The maximum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for both automatic and manual changes.
	MaxReplicaCount *int `pulumi:"maxReplicaCount"`
	// [int] The minimum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for both automatic and manual changes.
	MinReplicaCount *int `pulumi:"minReplicaCount"`
	// [string] User-defined name for the Autoscaling Group.
	Name *string `pulumi:"name"`
	// [List] Specifies the behavior of this Autoscaling Group. A policy consists of Triggers and Actions, whereby an Action is some kind of automated behavior, and a Trigger is defined by the circumstances under which the Action is triggered. Currently, two separate Actions, namely Scaling In and Out are supported, triggered through Thresholds defined on a given Metric.
	Policy *GroupPolicy `pulumi:"policy"`
	// [List]
	ReplicaConfiguration *GroupReplicaConfiguration `pulumi:"replicaConfiguration"`
}

type GroupState struct {
	// [string] Unique identifier for the resource
	DatacenterId pulumi.StringPtrInput
	// Location of the data center.
	Location pulumi.StringPtrInput
	// [int] The maximum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for both automatic and manual changes.
	MaxReplicaCount pulumi.IntPtrInput
	// [int] The minimum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for both automatic and manual changes.
	MinReplicaCount pulumi.IntPtrInput
	// [string] User-defined name for the Autoscaling Group.
	Name pulumi.StringPtrInput
	// [List] Specifies the behavior of this Autoscaling Group. A policy consists of Triggers and Actions, whereby an Action is some kind of automated behavior, and a Trigger is defined by the circumstances under which the Action is triggered. Currently, two separate Actions, namely Scaling In and Out are supported, triggered through Thresholds defined on a given Metric.
	Policy GroupPolicyPtrInput
	// [List]
	ReplicaConfiguration GroupReplicaConfigurationPtrInput
}

func (GroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupState)(nil)).Elem()
}

type groupArgs struct {
	// [string] Unique identifier for the resource
	DatacenterId string `pulumi:"datacenterId"`
	// [int] The maximum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for both automatic and manual changes.
	MaxReplicaCount int `pulumi:"maxReplicaCount"`
	// [int] The minimum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for both automatic and manual changes.
	MinReplicaCount int `pulumi:"minReplicaCount"`
	// [string] User-defined name for the Autoscaling Group.
	Name *string `pulumi:"name"`
	// [List] Specifies the behavior of this Autoscaling Group. A policy consists of Triggers and Actions, whereby an Action is some kind of automated behavior, and a Trigger is defined by the circumstances under which the Action is triggered. Currently, two separate Actions, namely Scaling In and Out are supported, triggered through Thresholds defined on a given Metric.
	Policy GroupPolicy `pulumi:"policy"`
	// [List]
	ReplicaConfiguration GroupReplicaConfiguration `pulumi:"replicaConfiguration"`
}

// The set of arguments for constructing a Group resource.
type GroupArgs struct {
	// [string] Unique identifier for the resource
	DatacenterId pulumi.StringInput
	// [int] The maximum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for both automatic and manual changes.
	MaxReplicaCount pulumi.IntInput
	// [int] The minimum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for both automatic and manual changes.
	MinReplicaCount pulumi.IntInput
	// [string] User-defined name for the Autoscaling Group.
	Name pulumi.StringPtrInput
	// [List] Specifies the behavior of this Autoscaling Group. A policy consists of Triggers and Actions, whereby an Action is some kind of automated behavior, and a Trigger is defined by the circumstances under which the Action is triggered. Currently, two separate Actions, namely Scaling In and Out are supported, triggered through Thresholds defined on a given Metric.
	Policy GroupPolicyInput
	// [List]
	ReplicaConfiguration GroupReplicaConfigurationInput
}

func (GroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupArgs)(nil)).Elem()
}

type GroupInput interface {
	pulumi.Input

	ToGroupOutput() GroupOutput
	ToGroupOutputWithContext(ctx context.Context) GroupOutput
}

func (*Group) ElementType() reflect.Type {
	return reflect.TypeOf((**Group)(nil)).Elem()
}

func (i *Group) ToGroupOutput() GroupOutput {
	return i.ToGroupOutputWithContext(context.Background())
}

func (i *Group) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupOutput)
}

// GroupArrayInput is an input type that accepts GroupArray and GroupArrayOutput values.
// You can construct a concrete instance of `GroupArrayInput` via:
//
//	GroupArray{ GroupArgs{...} }
type GroupArrayInput interface {
	pulumi.Input

	ToGroupArrayOutput() GroupArrayOutput
	ToGroupArrayOutputWithContext(context.Context) GroupArrayOutput
}

type GroupArray []GroupInput

func (GroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Group)(nil)).Elem()
}

func (i GroupArray) ToGroupArrayOutput() GroupArrayOutput {
	return i.ToGroupArrayOutputWithContext(context.Background())
}

func (i GroupArray) ToGroupArrayOutputWithContext(ctx context.Context) GroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupArrayOutput)
}

// GroupMapInput is an input type that accepts GroupMap and GroupMapOutput values.
// You can construct a concrete instance of `GroupMapInput` via:
//
//	GroupMap{ "key": GroupArgs{...} }
type GroupMapInput interface {
	pulumi.Input

	ToGroupMapOutput() GroupMapOutput
	ToGroupMapOutputWithContext(context.Context) GroupMapOutput
}

type GroupMap map[string]GroupInput

func (GroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Group)(nil)).Elem()
}

func (i GroupMap) ToGroupMapOutput() GroupMapOutput {
	return i.ToGroupMapOutputWithContext(context.Background())
}

func (i GroupMap) ToGroupMapOutputWithContext(ctx context.Context) GroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMapOutput)
}

type GroupOutput struct{ *pulumi.OutputState }

func (GroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Group)(nil)).Elem()
}

func (o GroupOutput) ToGroupOutput() GroupOutput {
	return o
}

func (o GroupOutput) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return o
}

// [string] Unique identifier for the resource
func (o GroupOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.DatacenterId }).(pulumi.StringOutput)
}

// Location of the data center.
func (o GroupOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// [int] The maximum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for both automatic and manual changes.
func (o GroupOutput) MaxReplicaCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Group) pulumi.IntOutput { return v.MaxReplicaCount }).(pulumi.IntOutput)
}

// [int] The minimum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for both automatic and manual changes.
func (o GroupOutput) MinReplicaCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Group) pulumi.IntOutput { return v.MinReplicaCount }).(pulumi.IntOutput)
}

// [string] User-defined name for the Autoscaling Group.
func (o GroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// [List] Specifies the behavior of this Autoscaling Group. A policy consists of Triggers and Actions, whereby an Action is some kind of automated behavior, and a Trigger is defined by the circumstances under which the Action is triggered. Currently, two separate Actions, namely Scaling In and Out are supported, triggered through Thresholds defined on a given Metric.
func (o GroupOutput) Policy() GroupPolicyOutput {
	return o.ApplyT(func(v *Group) GroupPolicyOutput { return v.Policy }).(GroupPolicyOutput)
}

// [List]
func (o GroupOutput) ReplicaConfiguration() GroupReplicaConfigurationOutput {
	return o.ApplyT(func(v *Group) GroupReplicaConfigurationOutput { return v.ReplicaConfiguration }).(GroupReplicaConfigurationOutput)
}

type GroupArrayOutput struct{ *pulumi.OutputState }

func (GroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Group)(nil)).Elem()
}

func (o GroupArrayOutput) ToGroupArrayOutput() GroupArrayOutput {
	return o
}

func (o GroupArrayOutput) ToGroupArrayOutputWithContext(ctx context.Context) GroupArrayOutput {
	return o
}

func (o GroupArrayOutput) Index(i pulumi.IntInput) GroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Group {
		return vs[0].([]*Group)[vs[1].(int)]
	}).(GroupOutput)
}

type GroupMapOutput struct{ *pulumi.OutputState }

func (GroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Group)(nil)).Elem()
}

func (o GroupMapOutput) ToGroupMapOutput() GroupMapOutput {
	return o
}

func (o GroupMapOutput) ToGroupMapOutputWithContext(ctx context.Context) GroupMapOutput {
	return o
}

func (o GroupMapOutput) MapIndex(k pulumi.StringInput) GroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Group {
		return vs[0].(map[string]*Group)[vs[1].(string)]
	}).(GroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupInput)(nil)).Elem(), &Group{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupArrayInput)(nil)).Elem(), GroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMapInput)(nil)).Elem(), GroupMap{})
	pulumi.RegisterOutputType(GroupOutput{})
	pulumi.RegisterOutputType(GroupArrayOutput{})
	pulumi.RegisterOutputType(GroupMapOutput{})
}
