// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **Target Group** data source can be used to search for and return an existing Application Load Balancer Target Group.
// You can provide a string for the name parameter which will be compared with provisioned Application Load Balancer Target Groups.
// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
// When this happens, please refine your search and make sure that your resources have unique names.
//
// ## Example Usage
//
// ### By Name
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ionoscloud.LookupTargetGroup(ctx, &ionoscloud.LookupTargetGroupArgs{
//				Name: pulumi.StringRef("Target Group Example"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### By Name with Partial Match
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ionoscloud.LookupTargetGroup(ctx, &ionoscloud.LookupTargetGroupArgs{
//				Name:         pulumi.StringRef("Example"),
//				PartialMatch: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupTargetGroup(ctx *pulumi.Context, args *LookupTargetGroupArgs, opts ...pulumi.InvokeOption) (*LookupTargetGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTargetGroupResult
	err := ctx.Invoke("ionoscloud:index/getTargetGroup:getTargetGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTargetGroup.
type LookupTargetGroupArgs struct {
	// ID of the target group you want to search for.
	Id *string `pulumi:"id"`
	// Name of an existing target group that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partialMatch` parameter is not set to true.
	Name *string `pulumi:"name"`
	// Whether partial matching is allowed or not when using name argument. Default value is false.
	//
	// Either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
	PartialMatch *bool `pulumi:"partialMatch"`
}

// A collection of values returned by getTargetGroup.
type LookupTargetGroupResult struct {
	// Balancing algorithm.
	Algorithm string `pulumi:"algorithm"`
	// Health check attributes for Target Group.
	HealthChecks []GetTargetGroupHealthCheck `pulumi:"healthChecks"`
	// Http health check attributes for Target Group
	HttpHealthChecks []GetTargetGroupHttpHealthCheck `pulumi:"httpHealthChecks"`
	// The Id of that Target group
	Id *string `pulumi:"id"`
	// The name of that Target Group.
	Name         *string `pulumi:"name"`
	PartialMatch *bool   `pulumi:"partialMatch"`
	// Balancing protocol.
	Protocol string `pulumi:"protocol"`
	// The forwarding protocol version. Value is ignored when protocol is not 'HTTP'.
	ProtocolVersion string `pulumi:"protocolVersion"`
	// Array of items in the collection
	Targets []GetTargetGroupTarget `pulumi:"targets"`
}

func LookupTargetGroupOutput(ctx *pulumi.Context, args LookupTargetGroupOutputArgs, opts ...pulumi.InvokeOption) LookupTargetGroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTargetGroupResultOutput, error) {
			args := v.(LookupTargetGroupArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupTargetGroupResult
			secret, err := ctx.InvokePackageRaw("ionoscloud:index/getTargetGroup:getTargetGroup", args, &rv, "", opts...)
			if err != nil {
				return LookupTargetGroupResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupTargetGroupResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupTargetGroupResultOutput), nil
			}
			return output, nil
		}).(LookupTargetGroupResultOutput)
}

// A collection of arguments for invoking getTargetGroup.
type LookupTargetGroupOutputArgs struct {
	// ID of the target group you want to search for.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of an existing target group that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partialMatch` parameter is not set to true.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Whether partial matching is allowed or not when using name argument. Default value is false.
	//
	// Either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
	PartialMatch pulumi.BoolPtrInput `pulumi:"partialMatch"`
}

func (LookupTargetGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTargetGroupArgs)(nil)).Elem()
}

// A collection of values returned by getTargetGroup.
type LookupTargetGroupResultOutput struct{ *pulumi.OutputState }

func (LookupTargetGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTargetGroupResult)(nil)).Elem()
}

func (o LookupTargetGroupResultOutput) ToLookupTargetGroupResultOutput() LookupTargetGroupResultOutput {
	return o
}

func (o LookupTargetGroupResultOutput) ToLookupTargetGroupResultOutputWithContext(ctx context.Context) LookupTargetGroupResultOutput {
	return o
}

// Balancing algorithm.
func (o LookupTargetGroupResultOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTargetGroupResult) string { return v.Algorithm }).(pulumi.StringOutput)
}

// Health check attributes for Target Group.
func (o LookupTargetGroupResultOutput) HealthChecks() GetTargetGroupHealthCheckArrayOutput {
	return o.ApplyT(func(v LookupTargetGroupResult) []GetTargetGroupHealthCheck { return v.HealthChecks }).(GetTargetGroupHealthCheckArrayOutput)
}

// Http health check attributes for Target Group
func (o LookupTargetGroupResultOutput) HttpHealthChecks() GetTargetGroupHttpHealthCheckArrayOutput {
	return o.ApplyT(func(v LookupTargetGroupResult) []GetTargetGroupHttpHealthCheck { return v.HttpHealthChecks }).(GetTargetGroupHttpHealthCheckArrayOutput)
}

// The Id of that Target group
func (o LookupTargetGroupResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTargetGroupResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of that Target Group.
func (o LookupTargetGroupResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTargetGroupResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupTargetGroupResultOutput) PartialMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupTargetGroupResult) *bool { return v.PartialMatch }).(pulumi.BoolPtrOutput)
}

// Balancing protocol.
func (o LookupTargetGroupResultOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTargetGroupResult) string { return v.Protocol }).(pulumi.StringOutput)
}

// The forwarding protocol version. Value is ignored when protocol is not 'HTTP'.
func (o LookupTargetGroupResultOutput) ProtocolVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTargetGroupResult) string { return v.ProtocolVersion }).(pulumi.StringOutput)
}

// Array of items in the collection
func (o LookupTargetGroupResultOutput) Targets() GetTargetGroupTargetArrayOutput {
	return o.ApplyT(func(v LookupTargetGroupResult) []GetTargetGroupTarget { return v.Targets }).(GetTargetGroupTargetArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTargetGroupResultOutput{})
}
