// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages the selection of a boot device for IonosCloud Servers.
//
// ## Example Usage
//
// The boot device of a `compute.Server`, `VcpuServer` or `CubeServer` can be selected with this resource.
// Deleting this resource will revert the boot device back to the default volume, which is the first inline volume created together with the server.
// This resource also allows switching between a `volume` and a `getImage` CDROM. Note that CDROM images are detached after they are no longer set as boot devices.
//
// ### Select an external volume
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleServer, err := compute.NewServer(ctx, "exampleServer", &compute.ServerArgs{
//				AvailabilityZone: pulumi.String("ZONE_2"),
//				ImageName:        pulumi.String("ubuntu:latest"),
//				Cores:            pulumi.Int(2),
//				Ram:              pulumi.Int(2048),
//				ImagePassword:    pulumi.Any(random_password.Server_image_password.Result),
//				DatacenterId:     pulumi.Any(ionoscloud_datacenter.Example.Id),
//				Volume: &compute.ServerVolumeArgs{
//					Name:             pulumi.String("Inline Updated"),
//					Size:             pulumi.Int(20),
//					DiskType:         pulumi.String("SSD Standard"),
//					Bus:              pulumi.String("VIRTIO"),
//					AvailabilityZone: pulumi.String("AUTO"),
//				},
//				Nic: &compute.ServerNicArgs{
//					Lan:            pulumi.Any(ionoscloud_lan.Example.Id),
//					Name:           pulumi.String("Nic Example"),
//					Dhcp:           pulumi.Bool(true),
//					FirewallActive: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleVolume, err := compute.NewVolume(ctx, "exampleVolume", &compute.VolumeArgs{
//				ServerId:         exampleServer.ID(),
//				DatacenterId:     pulumi.Any(ionoscloud_datacenter.Example.Id),
//				Size:             pulumi.Int(10),
//				DiskType:         pulumi.String("HDD"),
//				AvailabilityZone: pulumi.String("AUTO"),
//				ImageName:        pulumi.String("debian:latest"),
//				ImagePassword:    pulumi.Any(random_password.Server_image_password.Result),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ionoscloud.NewServerBootDeviceSelection(ctx, "exampleServerBootDeviceSelection", &ionoscloud.ServerBootDeviceSelectionArgs{
//				DatacenterId: pulumi.Any(ionoscloud_datacenter.Example.Id),
//				ServerId:     exampleServer.ID(),
//				BootDeviceId: exampleVolume.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Select an inline volume again
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleServer, err := compute.NewServer(ctx, "exampleServer", &compute.ServerArgs{
//				AvailabilityZone: pulumi.String("ZONE_2"),
//				ImageName:        pulumi.String("ubuntu:latest"),
//				Cores:            pulumi.Int(2),
//				Ram:              pulumi.Int(2048),
//				ImagePassword:    pulumi.Any(random_password.Server_image_password.Result),
//				DatacenterId:     pulumi.Any(ionoscloud_datacenter.Example.Id),
//				Volume: &compute.ServerVolumeArgs{
//					Name:             pulumi.String("Inline Updated"),
//					Size:             pulumi.Int(20),
//					DiskType:         pulumi.String("SSD Standard"),
//					Bus:              pulumi.String("VIRTIO"),
//					AvailabilityZone: pulumi.String("AUTO"),
//				},
//				Nic: &compute.ServerNicArgs{
//					Lan:            pulumi.Any(ionoscloud_lan.Example.Id),
//					Name:           pulumi.String("Nic Example"),
//					Dhcp:           pulumi.Bool(true),
//					FirewallActive: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ionoscloud.NewServerBootDeviceSelection(ctx, "exampleServerBootDeviceSelection", &ionoscloud.ServerBootDeviceSelectionArgs{
//				DatacenterId: pulumi.Any(ionoscloud_datacenter.Example.Id),
//				ServerId:     exampleServer.ID(),
//				BootDeviceId: exampleServer.InlineVolumeIds.ApplyT(func(inlineVolumeIds []string) (string, error) {
//					return inlineVolumeIds[0], nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewVolume(ctx, "exampleVolume", &compute.VolumeArgs{
//				ServerId:         exampleServer.ID(),
//				DatacenterId:     pulumi.Any(ionoscloud_datacenter.Example.Id),
//				Size:             pulumi.Int(10),
//				DiskType:         pulumi.String("HDD"),
//				AvailabilityZone: pulumi.String("AUTO"),
//				ImageName:        pulumi.String("debian:latest"),
//				ImagePassword:    pulumi.Any(random_password.Server_image_password.Result),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Select a CDROM image
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleServer, err := compute.NewServer(ctx, "exampleServer", &compute.ServerArgs{
//				AvailabilityZone: pulumi.String("ZONE_2"),
//				ImageName:        pulumi.String("ubuntu:latest"),
//				Cores:            pulumi.Int(2),
//				Ram:              pulumi.Int(2048),
//				ImagePassword:    pulumi.Any(random_password.Server_image_password.Result),
//				DatacenterId:     pulumi.Any(ionoscloud_datacenter.Example.Id),
//				Volume: &compute.ServerVolumeArgs{
//					Name:             pulumi.String("Inline Updated"),
//					Size:             pulumi.Int(20),
//					DiskType:         pulumi.String("SSD Standard"),
//					Bus:              pulumi.String("VIRTIO"),
//					AvailabilityZone: pulumi.String("AUTO"),
//				},
//				Nic: &compute.ServerNicArgs{
//					Lan:            pulumi.Any(ionoscloud_lan.Example.Id),
//					Name:           pulumi.String("Nic Example"),
//					Dhcp:           pulumi.Bool(true),
//					FirewallActive: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleImage, err := ionoscloud.GetImage(ctx, &ionoscloud.GetImageArgs{
//				Name:     pulumi.StringRef("ubuntu-20.04"),
//				Location: pulumi.StringRef("de/txl"),
//				Type:     pulumi.StringRef("CDROM"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = ionoscloud.NewServerBootDeviceSelection(ctx, "exampleServerBootDeviceSelection", &ionoscloud.ServerBootDeviceSelectionArgs{
//				DatacenterId: pulumi.Any(ionoscloud_datacenter.Example.Id),
//				ServerId: exampleServer.InlineVolumeIds.ApplyT(func(inlineVolumeIds []string) (string, error) {
//					return inlineVolumeIds[0], nil
//				}).(pulumi.StringOutput),
//				BootDeviceId: pulumi.String(exampleImage.Id),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewVolume(ctx, "exampleVolume", &compute.VolumeArgs{
//				ServerId:         exampleServer.ID(),
//				DatacenterId:     pulumi.Any(ionoscloud_datacenter.Example.Id),
//				Size:             pulumi.Int(10),
//				DiskType:         pulumi.String("HDD"),
//				AvailabilityZone: pulumi.String("AUTO"),
//				ImageName:        pulumi.String("debian:latest"),
//				ImagePassword:    pulumi.Any(random_password.Server_image_password.Result),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Perform a network boot
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleServer, err := compute.NewServer(ctx, "exampleServer", &compute.ServerArgs{
//				AvailabilityZone: pulumi.String("ZONE_2"),
//				ImageName:        pulumi.String("ubuntu:latest"),
//				Cores:            pulumi.Int(2),
//				Ram:              pulumi.Int(2048),
//				ImagePassword:    pulumi.Any(random_password.Server_image_password.Result),
//				DatacenterId:     pulumi.Any(ionoscloud_datacenter.Example.Id),
//				Volume: &compute.ServerVolumeArgs{
//					Name:             pulumi.String("Inline volume"),
//					Size:             pulumi.Int(20),
//					DiskType:         pulumi.String("SSD Standard"),
//					Bus:              pulumi.String("VIRTIO"),
//					AvailabilityZone: pulumi.String("AUTO"),
//				},
//				Nic: &compute.ServerNicArgs{
//					Lan:            pulumi.Any(ionoscloud_lan.Example.Id),
//					Name:           pulumi.String("Nic Example"),
//					Dhcp:           pulumi.Bool(true),
//					FirewallActive: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ionoscloud.NewServerBootDeviceSelection(ctx, "exampleServerBootDeviceSelection", &ionoscloud.ServerBootDeviceSelectionArgs{
//				DatacenterId: pulumi.Any(ionoscloud_datacenter.Example.Id),
//				ServerId: exampleServer.InlineVolumeIds.ApplyT(func(inlineVolumeIds []string) (string, error) {
//					return inlineVolumeIds[0], nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewVolume(ctx, "exampleVolume", &compute.VolumeArgs{
//				ServerId:         exampleServer.ID(),
//				DatacenterId:     pulumi.Any(ionoscloud_datacenter.Example.Id),
//				Size:             pulumi.Int(10),
//				DiskType:         pulumi.String("HDD"),
//				AvailabilityZone: pulumi.String("AUTO"),
//				ImageName:        pulumi.String("debian:latest"),
//				ImagePassword:    pulumi.Any(random_password.Server_image_password.Result),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ionoscloud.GetImage(ctx, &ionoscloud.GetImageArgs{
//				Name:     pulumi.StringRef("ubuntu-20.04"),
//				Location: pulumi.StringRef("de/txl"),
//				Type:     pulumi.StringRef("CDROM"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ServerBootDeviceSelection struct {
	pulumi.CustomResourceState

	// [string] The ID of a bootable device such as a volume or an image data source. If this field is omitted from the configuration, the VM will be restarted with no primary boot device, and it will enter the PXE shell for network booting.
	// ***Note***: If the network booting process started by the PXE shell fails, the VM will still boot into the image of the attached storage as a fallback. This behavior imitates the "Boot from Network" option from [DCD](https://dcd.ionos.com/).
	BootDeviceId pulumi.StringPtrOutput `pulumi:"bootDeviceId"`
	// [string] The ID of a Virtual Data Center.
	DatacenterId pulumi.StringOutput `pulumi:"datacenterId"`
	// ID of the first attached volume of the Server, which will be the default boot volume.
	DefaultBootVolumeId pulumi.StringOutput `pulumi:"defaultBootVolumeId"`
	// [string] The ID of a server.
	ServerId pulumi.StringOutput `pulumi:"serverId"`
}

// NewServerBootDeviceSelection registers a new resource with the given unique name, arguments, and options.
func NewServerBootDeviceSelection(ctx *pulumi.Context,
	name string, args *ServerBootDeviceSelectionArgs, opts ...pulumi.ResourceOption) (*ServerBootDeviceSelection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatacenterId == nil {
		return nil, errors.New("invalid value for required argument 'DatacenterId'")
	}
	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerBootDeviceSelection
	err := ctx.RegisterResource("ionoscloud:index/serverBootDeviceSelection:ServerBootDeviceSelection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerBootDeviceSelection gets an existing ServerBootDeviceSelection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerBootDeviceSelection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerBootDeviceSelectionState, opts ...pulumi.ResourceOption) (*ServerBootDeviceSelection, error) {
	var resource ServerBootDeviceSelection
	err := ctx.ReadResource("ionoscloud:index/serverBootDeviceSelection:ServerBootDeviceSelection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerBootDeviceSelection resources.
type serverBootDeviceSelectionState struct {
	// [string] The ID of a bootable device such as a volume or an image data source. If this field is omitted from the configuration, the VM will be restarted with no primary boot device, and it will enter the PXE shell for network booting.
	// ***Note***: If the network booting process started by the PXE shell fails, the VM will still boot into the image of the attached storage as a fallback. This behavior imitates the "Boot from Network" option from [DCD](https://dcd.ionos.com/).
	BootDeviceId *string `pulumi:"bootDeviceId"`
	// [string] The ID of a Virtual Data Center.
	DatacenterId *string `pulumi:"datacenterId"`
	// ID of the first attached volume of the Server, which will be the default boot volume.
	DefaultBootVolumeId *string `pulumi:"defaultBootVolumeId"`
	// [string] The ID of a server.
	ServerId *string `pulumi:"serverId"`
}

type ServerBootDeviceSelectionState struct {
	// [string] The ID of a bootable device such as a volume or an image data source. If this field is omitted from the configuration, the VM will be restarted with no primary boot device, and it will enter the PXE shell for network booting.
	// ***Note***: If the network booting process started by the PXE shell fails, the VM will still boot into the image of the attached storage as a fallback. This behavior imitates the "Boot from Network" option from [DCD](https://dcd.ionos.com/).
	BootDeviceId pulumi.StringPtrInput
	// [string] The ID of a Virtual Data Center.
	DatacenterId pulumi.StringPtrInput
	// ID of the first attached volume of the Server, which will be the default boot volume.
	DefaultBootVolumeId pulumi.StringPtrInput
	// [string] The ID of a server.
	ServerId pulumi.StringPtrInput
}

func (ServerBootDeviceSelectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverBootDeviceSelectionState)(nil)).Elem()
}

type serverBootDeviceSelectionArgs struct {
	// [string] The ID of a bootable device such as a volume or an image data source. If this field is omitted from the configuration, the VM will be restarted with no primary boot device, and it will enter the PXE shell for network booting.
	// ***Note***: If the network booting process started by the PXE shell fails, the VM will still boot into the image of the attached storage as a fallback. This behavior imitates the "Boot from Network" option from [DCD](https://dcd.ionos.com/).
	BootDeviceId *string `pulumi:"bootDeviceId"`
	// [string] The ID of a Virtual Data Center.
	DatacenterId string `pulumi:"datacenterId"`
	// [string] The ID of a server.
	ServerId string `pulumi:"serverId"`
}

// The set of arguments for constructing a ServerBootDeviceSelection resource.
type ServerBootDeviceSelectionArgs struct {
	// [string] The ID of a bootable device such as a volume or an image data source. If this field is omitted from the configuration, the VM will be restarted with no primary boot device, and it will enter the PXE shell for network booting.
	// ***Note***: If the network booting process started by the PXE shell fails, the VM will still boot into the image of the attached storage as a fallback. This behavior imitates the "Boot from Network" option from [DCD](https://dcd.ionos.com/).
	BootDeviceId pulumi.StringPtrInput
	// [string] The ID of a Virtual Data Center.
	DatacenterId pulumi.StringInput
	// [string] The ID of a server.
	ServerId pulumi.StringInput
}

func (ServerBootDeviceSelectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverBootDeviceSelectionArgs)(nil)).Elem()
}

type ServerBootDeviceSelectionInput interface {
	pulumi.Input

	ToServerBootDeviceSelectionOutput() ServerBootDeviceSelectionOutput
	ToServerBootDeviceSelectionOutputWithContext(ctx context.Context) ServerBootDeviceSelectionOutput
}

func (*ServerBootDeviceSelection) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerBootDeviceSelection)(nil)).Elem()
}

func (i *ServerBootDeviceSelection) ToServerBootDeviceSelectionOutput() ServerBootDeviceSelectionOutput {
	return i.ToServerBootDeviceSelectionOutputWithContext(context.Background())
}

func (i *ServerBootDeviceSelection) ToServerBootDeviceSelectionOutputWithContext(ctx context.Context) ServerBootDeviceSelectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerBootDeviceSelectionOutput)
}

// ServerBootDeviceSelectionArrayInput is an input type that accepts ServerBootDeviceSelectionArray and ServerBootDeviceSelectionArrayOutput values.
// You can construct a concrete instance of `ServerBootDeviceSelectionArrayInput` via:
//
//	ServerBootDeviceSelectionArray{ ServerBootDeviceSelectionArgs{...} }
type ServerBootDeviceSelectionArrayInput interface {
	pulumi.Input

	ToServerBootDeviceSelectionArrayOutput() ServerBootDeviceSelectionArrayOutput
	ToServerBootDeviceSelectionArrayOutputWithContext(context.Context) ServerBootDeviceSelectionArrayOutput
}

type ServerBootDeviceSelectionArray []ServerBootDeviceSelectionInput

func (ServerBootDeviceSelectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerBootDeviceSelection)(nil)).Elem()
}

func (i ServerBootDeviceSelectionArray) ToServerBootDeviceSelectionArrayOutput() ServerBootDeviceSelectionArrayOutput {
	return i.ToServerBootDeviceSelectionArrayOutputWithContext(context.Background())
}

func (i ServerBootDeviceSelectionArray) ToServerBootDeviceSelectionArrayOutputWithContext(ctx context.Context) ServerBootDeviceSelectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerBootDeviceSelectionArrayOutput)
}

// ServerBootDeviceSelectionMapInput is an input type that accepts ServerBootDeviceSelectionMap and ServerBootDeviceSelectionMapOutput values.
// You can construct a concrete instance of `ServerBootDeviceSelectionMapInput` via:
//
//	ServerBootDeviceSelectionMap{ "key": ServerBootDeviceSelectionArgs{...} }
type ServerBootDeviceSelectionMapInput interface {
	pulumi.Input

	ToServerBootDeviceSelectionMapOutput() ServerBootDeviceSelectionMapOutput
	ToServerBootDeviceSelectionMapOutputWithContext(context.Context) ServerBootDeviceSelectionMapOutput
}

type ServerBootDeviceSelectionMap map[string]ServerBootDeviceSelectionInput

func (ServerBootDeviceSelectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerBootDeviceSelection)(nil)).Elem()
}

func (i ServerBootDeviceSelectionMap) ToServerBootDeviceSelectionMapOutput() ServerBootDeviceSelectionMapOutput {
	return i.ToServerBootDeviceSelectionMapOutputWithContext(context.Background())
}

func (i ServerBootDeviceSelectionMap) ToServerBootDeviceSelectionMapOutputWithContext(ctx context.Context) ServerBootDeviceSelectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerBootDeviceSelectionMapOutput)
}

type ServerBootDeviceSelectionOutput struct{ *pulumi.OutputState }

func (ServerBootDeviceSelectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerBootDeviceSelection)(nil)).Elem()
}

func (o ServerBootDeviceSelectionOutput) ToServerBootDeviceSelectionOutput() ServerBootDeviceSelectionOutput {
	return o
}

func (o ServerBootDeviceSelectionOutput) ToServerBootDeviceSelectionOutputWithContext(ctx context.Context) ServerBootDeviceSelectionOutput {
	return o
}

// [string] The ID of a bootable device such as a volume or an image data source. If this field is omitted from the configuration, the VM will be restarted with no primary boot device, and it will enter the PXE shell for network booting.
// ***Note***: If the network booting process started by the PXE shell fails, the VM will still boot into the image of the attached storage as a fallback. This behavior imitates the "Boot from Network" option from [DCD](https://dcd.ionos.com/).
func (o ServerBootDeviceSelectionOutput) BootDeviceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerBootDeviceSelection) pulumi.StringPtrOutput { return v.BootDeviceId }).(pulumi.StringPtrOutput)
}

// [string] The ID of a Virtual Data Center.
func (o ServerBootDeviceSelectionOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerBootDeviceSelection) pulumi.StringOutput { return v.DatacenterId }).(pulumi.StringOutput)
}

// ID of the first attached volume of the Server, which will be the default boot volume.
func (o ServerBootDeviceSelectionOutput) DefaultBootVolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerBootDeviceSelection) pulumi.StringOutput { return v.DefaultBootVolumeId }).(pulumi.StringOutput)
}

// [string] The ID of a server.
func (o ServerBootDeviceSelectionOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerBootDeviceSelection) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

type ServerBootDeviceSelectionArrayOutput struct{ *pulumi.OutputState }

func (ServerBootDeviceSelectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerBootDeviceSelection)(nil)).Elem()
}

func (o ServerBootDeviceSelectionArrayOutput) ToServerBootDeviceSelectionArrayOutput() ServerBootDeviceSelectionArrayOutput {
	return o
}

func (o ServerBootDeviceSelectionArrayOutput) ToServerBootDeviceSelectionArrayOutputWithContext(ctx context.Context) ServerBootDeviceSelectionArrayOutput {
	return o
}

func (o ServerBootDeviceSelectionArrayOutput) Index(i pulumi.IntInput) ServerBootDeviceSelectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerBootDeviceSelection {
		return vs[0].([]*ServerBootDeviceSelection)[vs[1].(int)]
	}).(ServerBootDeviceSelectionOutput)
}

type ServerBootDeviceSelectionMapOutput struct{ *pulumi.OutputState }

func (ServerBootDeviceSelectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerBootDeviceSelection)(nil)).Elem()
}

func (o ServerBootDeviceSelectionMapOutput) ToServerBootDeviceSelectionMapOutput() ServerBootDeviceSelectionMapOutput {
	return o
}

func (o ServerBootDeviceSelectionMapOutput) ToServerBootDeviceSelectionMapOutputWithContext(ctx context.Context) ServerBootDeviceSelectionMapOutput {
	return o
}

func (o ServerBootDeviceSelectionMapOutput) MapIndex(k pulumi.StringInput) ServerBootDeviceSelectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerBootDeviceSelection {
		return vs[0].(map[string]*ServerBootDeviceSelection)[vs[1].(string)]
	}).(ServerBootDeviceSelectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerBootDeviceSelectionInput)(nil)).Elem(), &ServerBootDeviceSelection{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerBootDeviceSelectionArrayInput)(nil)).Elem(), ServerBootDeviceSelectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerBootDeviceSelectionMapInput)(nil)).Elem(), ServerBootDeviceSelectionMap{})
	pulumi.RegisterOutputType(ServerBootDeviceSelectionOutput{})
	pulumi.RegisterOutputType(ServerBootDeviceSelectionArrayOutput{})
	pulumi.RegisterOutputType(ServerBootDeviceSelectionMapOutput{})
}
