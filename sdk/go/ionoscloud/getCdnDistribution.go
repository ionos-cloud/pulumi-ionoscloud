// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Distribution data source can be used to search for and return an existing Distributions.
// You can provide a string for the domain parameter which will be compared with provisioned Distributions.
// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
// When this happens, please refine your search and make sure that your resources have unique domains.
//
// ## Example Usage
//
// ### By Domain
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ionoscloud.GetCdnDistribution(ctx, &ionoscloud.GetCdnDistributionArgs{
//				Domain: pulumi.StringRef("example.com"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### By Domain with Partial Match
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ionoscloud.GetCdnDistribution(ctx, &ionoscloud.GetCdnDistributionArgs{
//				Domain:       pulumi.StringRef("example"),
//				PartialMatch: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetCdnDistribution(ctx *pulumi.Context, args *GetCdnDistributionArgs, opts ...pulumi.InvokeOption) (*GetCdnDistributionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetCdnDistributionResult
	err := ctx.Invoke("ionoscloud:index/getCdnDistribution:getCdnDistribution", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCdnDistribution.
type GetCdnDistributionArgs struct {
	// Domain of an existing distribution that you want to search for. Search by domain is case-insensitive. The whole resource domain is required if `partialMatch` parameter is not set to true.
	Domain *string `pulumi:"domain"`
	// ID of the distribution you want to search for.
	Id *string `pulumi:"id"`
	// Whether partial matching is allowed or not when using domain argument. Default value is false.
	//
	// Either `domain` or `id` must be provided. If none, or both of `domain` and `id` are provided, the datasource will return an error.
	PartialMatch *bool `pulumi:"partialMatch"`
}

// A collection of values returned by getCdnDistribution.
type GetCdnDistributionResult struct {
	// The ID of the certificate to use for the distribution. You can create certificates with the certificate resource.
	CertificateId string `pulumi:"certificateId"`
	// The domain of the distribution.
	Domain       *string `pulumi:"domain"`
	Id           *string `pulumi:"id"`
	PartialMatch *bool   `pulumi:"partialMatch"`
	// IP of the distribution, it has to be included on the domain DNS Zone as A record.
	PublicEndpointV4 string `pulumi:"publicEndpointV4"`
	// IP of the distribution, it has to be included on the domain DNS Zone as AAAA record.
	PublicEndpointV6 string `pulumi:"publicEndpointV6"`
	// Unique resource identifier.
	ResourceUrn string `pulumi:"resourceUrn"`
	// The routing rules for the distribution.
	RoutingRules []GetCdnDistributionRoutingRule `pulumi:"routingRules"`
}

func GetCdnDistributionOutput(ctx *pulumi.Context, args GetCdnDistributionOutputArgs, opts ...pulumi.InvokeOption) GetCdnDistributionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetCdnDistributionResult, error) {
			args := v.(GetCdnDistributionArgs)
			r, err := GetCdnDistribution(ctx, &args, opts...)
			var s GetCdnDistributionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetCdnDistributionResultOutput)
}

// A collection of arguments for invoking getCdnDistribution.
type GetCdnDistributionOutputArgs struct {
	// Domain of an existing distribution that you want to search for. Search by domain is case-insensitive. The whole resource domain is required if `partialMatch` parameter is not set to true.
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// ID of the distribution you want to search for.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Whether partial matching is allowed or not when using domain argument. Default value is false.
	//
	// Either `domain` or `id` must be provided. If none, or both of `domain` and `id` are provided, the datasource will return an error.
	PartialMatch pulumi.BoolPtrInput `pulumi:"partialMatch"`
}

func (GetCdnDistributionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCdnDistributionArgs)(nil)).Elem()
}

// A collection of values returned by getCdnDistribution.
type GetCdnDistributionResultOutput struct{ *pulumi.OutputState }

func (GetCdnDistributionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCdnDistributionResult)(nil)).Elem()
}

func (o GetCdnDistributionResultOutput) ToGetCdnDistributionResultOutput() GetCdnDistributionResultOutput {
	return o
}

func (o GetCdnDistributionResultOutput) ToGetCdnDistributionResultOutputWithContext(ctx context.Context) GetCdnDistributionResultOutput {
	return o
}

// The ID of the certificate to use for the distribution. You can create certificates with the certificate resource.
func (o GetCdnDistributionResultOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCdnDistributionResult) string { return v.CertificateId }).(pulumi.StringOutput)
}

// The domain of the distribution.
func (o GetCdnDistributionResultOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCdnDistributionResult) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

func (o GetCdnDistributionResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCdnDistributionResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o GetCdnDistributionResultOutput) PartialMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetCdnDistributionResult) *bool { return v.PartialMatch }).(pulumi.BoolPtrOutput)
}

// IP of the distribution, it has to be included on the domain DNS Zone as A record.
func (o GetCdnDistributionResultOutput) PublicEndpointV4() pulumi.StringOutput {
	return o.ApplyT(func(v GetCdnDistributionResult) string { return v.PublicEndpointV4 }).(pulumi.StringOutput)
}

// IP of the distribution, it has to be included on the domain DNS Zone as AAAA record.
func (o GetCdnDistributionResultOutput) PublicEndpointV6() pulumi.StringOutput {
	return o.ApplyT(func(v GetCdnDistributionResult) string { return v.PublicEndpointV6 }).(pulumi.StringOutput)
}

// Unique resource identifier.
func (o GetCdnDistributionResultOutput) ResourceUrn() pulumi.StringOutput {
	return o.ApplyT(func(v GetCdnDistributionResult) string { return v.ResourceUrn }).(pulumi.StringOutput)
}

// The routing rules for the distribution.
func (o GetCdnDistributionResultOutput) RoutingRules() GetCdnDistributionRoutingRuleArrayOutput {
	return o.ApplyT(func(v GetCdnDistributionResult) []GetCdnDistributionRoutingRule { return v.RoutingRules }).(GetCdnDistributionRoutingRuleArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCdnDistributionResultOutput{})
}
