// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **Nic data source** can be used to search for and return existing nics.
// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
// When this happens, please refine your search string so that it is specific enough to return only one result.
//
// ## Example Usage
func GetNic(ctx *pulumi.Context, args *GetNicArgs, opts ...pulumi.InvokeOption) (*GetNicResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetNicResult
	err := ctx.Invoke("ionoscloud:index/getNic:getNic", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNic.
type GetNicArgs struct {
	// [string] The ID of a Virtual Data Center.
	DatacenterId string `pulumi:"datacenterId"`
	// Indicates if the NIC should get an IP address using DHCP (true) or not (false).
	Dhcp   *bool `pulumi:"dhcp"`
	Dhcpv6 *bool `pulumi:"dhcpv6"`
	// If this resource is set to true and is nested under a server resource firewall, with open SSH port, resource must be nested under the NIC.
	FirewallActive *bool `pulumi:"firewallActive"`
	// The type of firewall rules that will be allowed on the NIC. If it is not specified it will take the default value INGRESS
	FirewallType *string `pulumi:"firewallType"`
	// ID of the nic you want to search for.
	//
	// `datacenterId` and either `name` or `id` must be provided.
	// If none, are provided, the datasource will return an error.
	Id *string `pulumi:"id"`
	// Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
	Ips           []string `pulumi:"ips"`
	Ipv6CidrBlock *string  `pulumi:"ipv6CidrBlock"`
	Ipv6Ips       []string `pulumi:"ipv6Ips"`
	// The LAN ID the NIC will sit on.
	Lan *int `pulumi:"lan"`
	// [string] The name of the LAN.
	Name *string `pulumi:"name"`
	// [string] The ID of a server.
	ServerId string `pulumi:"serverId"`
}

// A collection of values returned by getNic.
type GetNicResult struct {
	// The ID of a Virtual Data Center.
	DatacenterId string `pulumi:"datacenterId"`
	// The Logical Unit Number (LUN) of the storage volume. Null if this NIC was created from CloudAPI and no DCD changes were done on the Datacenter.
	DeviceNumber int `pulumi:"deviceNumber"`
	// Indicates if the NIC should get an IP address using DHCP (true) or not (false).
	Dhcp   *bool `pulumi:"dhcp"`
	Dhcpv6 *bool `pulumi:"dhcpv6"`
	// If this resource is set to true and is nested under a server resource firewall, with open SSH port, resource must be nested under the NIC.
	FirewallActive *bool `pulumi:"firewallActive"`
	// The type of firewall rules that will be allowed on the NIC. If it is not specified it will take the default value INGRESS
	FirewallType string `pulumi:"firewallType"`
	// Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.
	Flowlogs []GetNicFlowlog `pulumi:"flowlogs"`
	// The id of the NIC.
	Id *string `pulumi:"id"`
	// Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
	Ips           []string `pulumi:"ips"`
	Ipv6CidrBlock string   `pulumi:"ipv6CidrBlock"`
	Ipv6Ips       []string `pulumi:"ipv6Ips"`
	// The LAN ID the NIC will sit on.
	Lan *int `pulumi:"lan"`
	// The MAC address of the NIC.
	Mac string `pulumi:"mac"`
	// Specifies the name of the flow log.
	Name *string `pulumi:"name"`
	// The PCI slot number of the Nic.
	PciSlot int `pulumi:"pciSlot"`
	// The ID of a server.
	ServerId string `pulumi:"serverId"`
}

func GetNicOutput(ctx *pulumi.Context, args GetNicOutputArgs, opts ...pulumi.InvokeOption) GetNicResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetNicResultOutput, error) {
			args := v.(GetNicArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetNicResult
			secret, err := ctx.InvokePackageRaw("ionoscloud:index/getNic:getNic", args, &rv, "", opts...)
			if err != nil {
				return GetNicResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetNicResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetNicResultOutput), nil
			}
			return output, nil
		}).(GetNicResultOutput)
}

// A collection of arguments for invoking getNic.
type GetNicOutputArgs struct {
	// [string] The ID of a Virtual Data Center.
	DatacenterId pulumi.StringInput `pulumi:"datacenterId"`
	// Indicates if the NIC should get an IP address using DHCP (true) or not (false).
	Dhcp   pulumi.BoolPtrInput `pulumi:"dhcp"`
	Dhcpv6 pulumi.BoolPtrInput `pulumi:"dhcpv6"`
	// If this resource is set to true and is nested under a server resource firewall, with open SSH port, resource must be nested under the NIC.
	FirewallActive pulumi.BoolPtrInput `pulumi:"firewallActive"`
	// The type of firewall rules that will be allowed on the NIC. If it is not specified it will take the default value INGRESS
	FirewallType pulumi.StringPtrInput `pulumi:"firewallType"`
	// ID of the nic you want to search for.
	//
	// `datacenterId` and either `name` or `id` must be provided.
	// If none, are provided, the datasource will return an error.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
	Ips           pulumi.StringArrayInput `pulumi:"ips"`
	Ipv6CidrBlock pulumi.StringPtrInput   `pulumi:"ipv6CidrBlock"`
	Ipv6Ips       pulumi.StringArrayInput `pulumi:"ipv6Ips"`
	// The LAN ID the NIC will sit on.
	Lan pulumi.IntPtrInput `pulumi:"lan"`
	// [string] The name of the LAN.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [string] The ID of a server.
	ServerId pulumi.StringInput `pulumi:"serverId"`
}

func (GetNicOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNicArgs)(nil)).Elem()
}

// A collection of values returned by getNic.
type GetNicResultOutput struct{ *pulumi.OutputState }

func (GetNicResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNicResult)(nil)).Elem()
}

func (o GetNicResultOutput) ToGetNicResultOutput() GetNicResultOutput {
	return o
}

func (o GetNicResultOutput) ToGetNicResultOutputWithContext(ctx context.Context) GetNicResultOutput {
	return o
}

// The ID of a Virtual Data Center.
func (o GetNicResultOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNicResult) string { return v.DatacenterId }).(pulumi.StringOutput)
}

// The Logical Unit Number (LUN) of the storage volume. Null if this NIC was created from CloudAPI and no DCD changes were done on the Datacenter.
func (o GetNicResultOutput) DeviceNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetNicResult) int { return v.DeviceNumber }).(pulumi.IntOutput)
}

// Indicates if the NIC should get an IP address using DHCP (true) or not (false).
func (o GetNicResultOutput) Dhcp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetNicResult) *bool { return v.Dhcp }).(pulumi.BoolPtrOutput)
}

func (o GetNicResultOutput) Dhcpv6() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetNicResult) *bool { return v.Dhcpv6 }).(pulumi.BoolPtrOutput)
}

// If this resource is set to true and is nested under a server resource firewall, with open SSH port, resource must be nested under the NIC.
func (o GetNicResultOutput) FirewallActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetNicResult) *bool { return v.FirewallActive }).(pulumi.BoolPtrOutput)
}

// The type of firewall rules that will be allowed on the NIC. If it is not specified it will take the default value INGRESS
func (o GetNicResultOutput) FirewallType() pulumi.StringOutput {
	return o.ApplyT(func(v GetNicResult) string { return v.FirewallType }).(pulumi.StringOutput)
}

// Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.
func (o GetNicResultOutput) Flowlogs() GetNicFlowlogArrayOutput {
	return o.ApplyT(func(v GetNicResult) []GetNicFlowlog { return v.Flowlogs }).(GetNicFlowlogArrayOutput)
}

// The id of the NIC.
func (o GetNicResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNicResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
func (o GetNicResultOutput) Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNicResult) []string { return v.Ips }).(pulumi.StringArrayOutput)
}

func (o GetNicResultOutput) Ipv6CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v GetNicResult) string { return v.Ipv6CidrBlock }).(pulumi.StringOutput)
}

func (o GetNicResultOutput) Ipv6Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNicResult) []string { return v.Ipv6Ips }).(pulumi.StringArrayOutput)
}

// The LAN ID the NIC will sit on.
func (o GetNicResultOutput) Lan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetNicResult) *int { return v.Lan }).(pulumi.IntPtrOutput)
}

// The MAC address of the NIC.
func (o GetNicResultOutput) Mac() pulumi.StringOutput {
	return o.ApplyT(func(v GetNicResult) string { return v.Mac }).(pulumi.StringOutput)
}

// Specifies the name of the flow log.
func (o GetNicResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNicResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The PCI slot number of the Nic.
func (o GetNicResultOutput) PciSlot() pulumi.IntOutput {
	return o.ApplyT(func(v GetNicResult) int { return v.PciSlot }).(pulumi.IntOutput)
}

// The ID of a server.
func (o GetNicResultOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNicResult) string { return v.ServerId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNicResultOutput{})
}
