// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitoring

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type PipelineTimeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create *string `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete *string `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read *string `pulumi:"read"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update *string `pulumi:"update"`
}

// PipelineTimeoutsInput is an input type that accepts PipelineTimeoutsArgs and PipelineTimeoutsOutput values.
// You can construct a concrete instance of `PipelineTimeoutsInput` via:
//
//	PipelineTimeoutsArgs{...}
type PipelineTimeoutsInput interface {
	pulumi.Input

	ToPipelineTimeoutsOutput() PipelineTimeoutsOutput
	ToPipelineTimeoutsOutputWithContext(context.Context) PipelineTimeoutsOutput
}

type PipelineTimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create pulumi.StringPtrInput `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete pulumi.StringPtrInput `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read pulumi.StringPtrInput `pulumi:"read"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update pulumi.StringPtrInput `pulumi:"update"`
}

func (PipelineTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineTimeouts)(nil)).Elem()
}

func (i PipelineTimeoutsArgs) ToPipelineTimeoutsOutput() PipelineTimeoutsOutput {
	return i.ToPipelineTimeoutsOutputWithContext(context.Background())
}

func (i PipelineTimeoutsArgs) ToPipelineTimeoutsOutputWithContext(ctx context.Context) PipelineTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineTimeoutsOutput)
}

func (i PipelineTimeoutsArgs) ToPipelineTimeoutsPtrOutput() PipelineTimeoutsPtrOutput {
	return i.ToPipelineTimeoutsPtrOutputWithContext(context.Background())
}

func (i PipelineTimeoutsArgs) ToPipelineTimeoutsPtrOutputWithContext(ctx context.Context) PipelineTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineTimeoutsOutput).ToPipelineTimeoutsPtrOutputWithContext(ctx)
}

// PipelineTimeoutsPtrInput is an input type that accepts PipelineTimeoutsArgs, PipelineTimeoutsPtr and PipelineTimeoutsPtrOutput values.
// You can construct a concrete instance of `PipelineTimeoutsPtrInput` via:
//
//	        PipelineTimeoutsArgs{...}
//
//	or:
//
//	        nil
type PipelineTimeoutsPtrInput interface {
	pulumi.Input

	ToPipelineTimeoutsPtrOutput() PipelineTimeoutsPtrOutput
	ToPipelineTimeoutsPtrOutputWithContext(context.Context) PipelineTimeoutsPtrOutput
}

type pipelineTimeoutsPtrType PipelineTimeoutsArgs

func PipelineTimeoutsPtr(v *PipelineTimeoutsArgs) PipelineTimeoutsPtrInput {
	return (*pipelineTimeoutsPtrType)(v)
}

func (*pipelineTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineTimeouts)(nil)).Elem()
}

func (i *pipelineTimeoutsPtrType) ToPipelineTimeoutsPtrOutput() PipelineTimeoutsPtrOutput {
	return i.ToPipelineTimeoutsPtrOutputWithContext(context.Background())
}

func (i *pipelineTimeoutsPtrType) ToPipelineTimeoutsPtrOutputWithContext(ctx context.Context) PipelineTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineTimeoutsPtrOutput)
}

type PipelineTimeoutsOutput struct{ *pulumi.OutputState }

func (PipelineTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineTimeouts)(nil)).Elem()
}

func (o PipelineTimeoutsOutput) ToPipelineTimeoutsOutput() PipelineTimeoutsOutput {
	return o
}

func (o PipelineTimeoutsOutput) ToPipelineTimeoutsOutputWithContext(ctx context.Context) PipelineTimeoutsOutput {
	return o
}

func (o PipelineTimeoutsOutput) ToPipelineTimeoutsPtrOutput() PipelineTimeoutsPtrOutput {
	return o.ToPipelineTimeoutsPtrOutputWithContext(context.Background())
}

func (o PipelineTimeoutsOutput) ToPipelineTimeoutsPtrOutputWithContext(ctx context.Context) PipelineTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineTimeouts) *PipelineTimeouts {
		return &v
	}).(PipelineTimeoutsPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o PipelineTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o PipelineTimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineTimeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o PipelineTimeoutsOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineTimeouts) *string { return v.Read }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o PipelineTimeoutsOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineTimeouts) *string { return v.Update }).(pulumi.StringPtrOutput)
}

type PipelineTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (PipelineTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineTimeouts)(nil)).Elem()
}

func (o PipelineTimeoutsPtrOutput) ToPipelineTimeoutsPtrOutput() PipelineTimeoutsPtrOutput {
	return o
}

func (o PipelineTimeoutsPtrOutput) ToPipelineTimeoutsPtrOutputWithContext(ctx context.Context) PipelineTimeoutsPtrOutput {
	return o
}

func (o PipelineTimeoutsPtrOutput) Elem() PipelineTimeoutsOutput {
	return o.ApplyT(func(v *PipelineTimeouts) PipelineTimeouts {
		if v != nil {
			return *v
		}
		var ret PipelineTimeouts
		return ret
	}).(PipelineTimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o PipelineTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o PipelineTimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o PipelineTimeoutsPtrOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Read
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o PipelineTimeoutsPtrOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Update
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineTimeoutsInput)(nil)).Elem(), PipelineTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineTimeoutsPtrInput)(nil)).Elem(), PipelineTimeoutsArgs{})
	pulumi.RegisterOutputType(PipelineTimeoutsOutput{})
	pulumi.RegisterOutputType(PipelineTimeoutsPtrOutput{})
}
