// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitoring

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **Monitoring pipeline** datasource can be used to search for and return an existing Monitoring pipeline.
// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
//
// > ⚠️  Only tokens are accepted for authorization in the **monitoring_pipeline** data source. Please ensure you are using tokens as other methods will not be valid.
//
// ## Example Usage
//
// ### By ID
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/monitoring"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := monitoring.LookupPipeline(ctx, &monitoring.LookupPipelineArgs{
//				Location: pulumi.StringRef("de/txl"),
//				Id:       pulumi.StringRef("pipeline_id"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### By name
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/monitoring"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := monitoring.LookupPipeline(ctx, &monitoring.LookupPipelineArgs{
//				Location: pulumi.StringRef("de/txl"),
//				Name:     pulumi.StringRef("pipeline_name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupPipeline(ctx *pulumi.Context, args *LookupPipelineArgs, opts ...pulumi.InvokeOption) (*LookupPipelineResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPipelineResult
	err := ctx.Invoke("ionoscloud:monitoring/getPipeline:getPipeline", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPipeline.
type LookupPipelineArgs struct {
	// [string] The ID of the Monitoring pipeline you want to search for.
	Id *string `pulumi:"id"`
	// [string] The location of the Monitoring pipeline. Default is `de/fra`. It can be one of `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `fr/par`. If this is not set and if no value is provided for the `IONOS_API_URL` env var, the default `location` will be: `de/fra`.
	Location *string `pulumi:"location"`
	// [string] The name of the Monitoring pipeline you want to search for.
	//
	// Either `id` or `name` must be provided. If none, or both are provided, the datasource will return an error.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getPipeline.
type LookupPipelineResult struct {
	GrafanaEndpoint string `pulumi:"grafanaEndpoint"`
	// The HTTP endpoint of the Monitoring instance.
	HttpEndpoint string `pulumi:"httpEndpoint"`
	// The UUID of the Monitoring pipeline.
	Id       string  `pulumi:"id"`
	Location *string `pulumi:"location"`
	// The name of the Monitoring pipeline.
	Name string `pulumi:"name"`
}

func LookupPipelineOutput(ctx *pulumi.Context, args LookupPipelineOutputArgs, opts ...pulumi.InvokeOption) LookupPipelineResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPipelineResultOutput, error) {
			args := v.(LookupPipelineArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ionoscloud:monitoring/getPipeline:getPipeline", args, LookupPipelineResultOutput{}, options).(LookupPipelineResultOutput), nil
		}).(LookupPipelineResultOutput)
}

// A collection of arguments for invoking getPipeline.
type LookupPipelineOutputArgs struct {
	// [string] The ID of the Monitoring pipeline you want to search for.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// [string] The location of the Monitoring pipeline. Default is `de/fra`. It can be one of `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `fr/par`. If this is not set and if no value is provided for the `IONOS_API_URL` env var, the default `location` will be: `de/fra`.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// [string] The name of the Monitoring pipeline you want to search for.
	//
	// Either `id` or `name` must be provided. If none, or both are provided, the datasource will return an error.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupPipelineOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPipelineArgs)(nil)).Elem()
}

// A collection of values returned by getPipeline.
type LookupPipelineResultOutput struct{ *pulumi.OutputState }

func (LookupPipelineResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPipelineResult)(nil)).Elem()
}

func (o LookupPipelineResultOutput) ToLookupPipelineResultOutput() LookupPipelineResultOutput {
	return o
}

func (o LookupPipelineResultOutput) ToLookupPipelineResultOutputWithContext(ctx context.Context) LookupPipelineResultOutput {
	return o
}

func (o LookupPipelineResultOutput) GrafanaEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPipelineResult) string { return v.GrafanaEndpoint }).(pulumi.StringOutput)
}

// The HTTP endpoint of the Monitoring instance.
func (o LookupPipelineResultOutput) HttpEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPipelineResult) string { return v.HttpEndpoint }).(pulumi.StringOutput)
}

// The UUID of the Monitoring pipeline.
func (o LookupPipelineResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPipelineResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupPipelineResultOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPipelineResult) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the Monitoring pipeline.
func (o LookupPipelineResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPipelineResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPipelineResultOutput{})
}
