// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **Container Registry Token data source** can be used to search for and return an existing Container Registry Token.
// You can provide a string for the name parameter which will be compared with provisioned Container Registry Token.
// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
// When this happens, please refine your search and make sure that your resources have unique names.
//
// ## Example Usage
//
// ### By Name
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ionoscloud.LookupContainerRegistryToken(ctx, &ionoscloud.LookupContainerRegistryTokenArgs{
//				RegistryId: ionoscloud_container_registry.Example.Id,
//				Name:       pulumi.StringRef("container-registry-token-example"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### By Name with Partial Match
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ionoscloud.LookupContainerRegistryToken(ctx, &ionoscloud.LookupContainerRegistryTokenArgs{
//				RegistryId:   ionoscloud_container_registry.Example.Id,
//				Name:         pulumi.StringRef("-example"),
//				PartialMatch: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupContainerRegistryToken(ctx *pulumi.Context, args *LookupContainerRegistryTokenArgs, opts ...pulumi.InvokeOption) (*LookupContainerRegistryTokenResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupContainerRegistryTokenResult
	err := ctx.Invoke("ionoscloud:index/getContainerRegistryToken:getContainerRegistryToken", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getContainerRegistryToken.
type LookupContainerRegistryTokenArgs struct {
	// ID of the container registry token you want to search for.
	Id *string `pulumi:"id"`
	// Name of an existing container registry token that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partialMatch` parameter is not set to true.
	Name *string `pulumi:"name"`
	// Whether partial matching is allowed or not when using name argument. Default value is false.
	//
	// `registryId` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
	PartialMatch *bool `pulumi:"partialMatch"`
	// Registry's UUID.
	RegistryId string `pulumi:"registryId"`
}

// A collection of values returned by getContainerRegistryToken.
type LookupContainerRegistryTokenResult struct {
	Credentials []GetContainerRegistryTokenCredential `pulumi:"credentials"`
	ExpiryDate  string                                `pulumi:"expiryDate"`
	// Id of the container registry token.
	Id           *string                          `pulumi:"id"`
	Name         *string                          `pulumi:"name"`
	PartialMatch *bool                            `pulumi:"partialMatch"`
	RegistryId   string                           `pulumi:"registryId"`
	Scopes       []GetContainerRegistryTokenScope `pulumi:"scopes"`
	Status       string                           `pulumi:"status"`
}

func LookupContainerRegistryTokenOutput(ctx *pulumi.Context, args LookupContainerRegistryTokenOutputArgs, opts ...pulumi.InvokeOption) LookupContainerRegistryTokenResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupContainerRegistryTokenResultOutput, error) {
			args := v.(LookupContainerRegistryTokenArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupContainerRegistryTokenResult
			secret, err := ctx.InvokePackageRaw("ionoscloud:index/getContainerRegistryToken:getContainerRegistryToken", args, &rv, "", opts...)
			if err != nil {
				return LookupContainerRegistryTokenResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupContainerRegistryTokenResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupContainerRegistryTokenResultOutput), nil
			}
			return output, nil
		}).(LookupContainerRegistryTokenResultOutput)
}

// A collection of arguments for invoking getContainerRegistryToken.
type LookupContainerRegistryTokenOutputArgs struct {
	// ID of the container registry token you want to search for.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of an existing container registry token that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partialMatch` parameter is not set to true.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Whether partial matching is allowed or not when using name argument. Default value is false.
	//
	// `registryId` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
	PartialMatch pulumi.BoolPtrInput `pulumi:"partialMatch"`
	// Registry's UUID.
	RegistryId pulumi.StringInput `pulumi:"registryId"`
}

func (LookupContainerRegistryTokenOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupContainerRegistryTokenArgs)(nil)).Elem()
}

// A collection of values returned by getContainerRegistryToken.
type LookupContainerRegistryTokenResultOutput struct{ *pulumi.OutputState }

func (LookupContainerRegistryTokenResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupContainerRegistryTokenResult)(nil)).Elem()
}

func (o LookupContainerRegistryTokenResultOutput) ToLookupContainerRegistryTokenResultOutput() LookupContainerRegistryTokenResultOutput {
	return o
}

func (o LookupContainerRegistryTokenResultOutput) ToLookupContainerRegistryTokenResultOutputWithContext(ctx context.Context) LookupContainerRegistryTokenResultOutput {
	return o
}

func (o LookupContainerRegistryTokenResultOutput) Credentials() GetContainerRegistryTokenCredentialArrayOutput {
	return o.ApplyT(func(v LookupContainerRegistryTokenResult) []GetContainerRegistryTokenCredential { return v.Credentials }).(GetContainerRegistryTokenCredentialArrayOutput)
}

func (o LookupContainerRegistryTokenResultOutput) ExpiryDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRegistryTokenResult) string { return v.ExpiryDate }).(pulumi.StringOutput)
}

// Id of the container registry token.
func (o LookupContainerRegistryTokenResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupContainerRegistryTokenResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupContainerRegistryTokenResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupContainerRegistryTokenResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupContainerRegistryTokenResultOutput) PartialMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupContainerRegistryTokenResult) *bool { return v.PartialMatch }).(pulumi.BoolPtrOutput)
}

func (o LookupContainerRegistryTokenResultOutput) RegistryId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRegistryTokenResult) string { return v.RegistryId }).(pulumi.StringOutput)
}

func (o LookupContainerRegistryTokenResultOutput) Scopes() GetContainerRegistryTokenScopeArrayOutput {
	return o.ApplyT(func(v LookupContainerRegistryTokenResult) []GetContainerRegistryTokenScope { return v.Scopes }).(GetContainerRegistryTokenScopeArrayOutput)
}

func (o LookupContainerRegistryTokenResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRegistryTokenResult) string { return v.Status }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupContainerRegistryTokenResultOutput{})
}
