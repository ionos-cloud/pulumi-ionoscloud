// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package creg

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **Container Registry Token data source** can be used to search for and return an existing Container Registry Token.
// You can provide a string for the name parameter which will be compared with provisioned Container Registry Token.
// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
// When this happens, please refine your search and make sure that your resources have unique names.
//
// ## Example Usage
//
// ### By Name
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/creg"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := creg.LookupRegistryToken(ctx, &creg.LookupRegistryTokenArgs{
//				RegistryId: exampleIonoscloudContainerRegistry.Id,
//				Name:       pulumi.StringRef("container-registry-token-example"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### By Name with Partial Match
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/creg"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := creg.LookupRegistryToken(ctx, &creg.LookupRegistryTokenArgs{
//				RegistryId:   exampleIonoscloudContainerRegistry.Id,
//				Name:         pulumi.StringRef("-example"),
//				PartialMatch: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupRegistryToken(ctx *pulumi.Context, args *LookupRegistryTokenArgs, opts ...pulumi.InvokeOption) (*LookupRegistryTokenResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRegistryTokenResult
	err := ctx.Invoke("ionoscloud:creg/getRegistryToken:getRegistryToken", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRegistryToken.
type LookupRegistryTokenArgs struct {
	// ID of the container registry token you want to search for.
	Id *string `pulumi:"id"`
	// Name of an existing container registry token that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partialMatch` parameter is not set to true.
	Name *string `pulumi:"name"`
	// Whether partial matching is allowed or not when using name argument. Default value is false.
	//
	// `registryId` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
	PartialMatch *bool `pulumi:"partialMatch"`
	// Registry's UUID.
	RegistryId string `pulumi:"registryId"`
}

// A collection of values returned by getRegistryToken.
type LookupRegistryTokenResult struct {
	Credentials []GetRegistryTokenCredential `pulumi:"credentials"`
	ExpiryDate  string                       `pulumi:"expiryDate"`
	// Id of the container registry token.
	Id           *string                 `pulumi:"id"`
	Name         *string                 `pulumi:"name"`
	PartialMatch *bool                   `pulumi:"partialMatch"`
	RegistryId   string                  `pulumi:"registryId"`
	Scopes       []GetRegistryTokenScope `pulumi:"scopes"`
	Status       string                  `pulumi:"status"`
}

func LookupRegistryTokenOutput(ctx *pulumi.Context, args LookupRegistryTokenOutputArgs, opts ...pulumi.InvokeOption) LookupRegistryTokenResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupRegistryTokenResultOutput, error) {
			args := v.(LookupRegistryTokenArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ionoscloud:creg/getRegistryToken:getRegistryToken", args, LookupRegistryTokenResultOutput{}, options).(LookupRegistryTokenResultOutput), nil
		}).(LookupRegistryTokenResultOutput)
}

// A collection of arguments for invoking getRegistryToken.
type LookupRegistryTokenOutputArgs struct {
	// ID of the container registry token you want to search for.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of an existing container registry token that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partialMatch` parameter is not set to true.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Whether partial matching is allowed or not when using name argument. Default value is false.
	//
	// `registryId` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
	PartialMatch pulumi.BoolPtrInput `pulumi:"partialMatch"`
	// Registry's UUID.
	RegistryId pulumi.StringInput `pulumi:"registryId"`
}

func (LookupRegistryTokenOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegistryTokenArgs)(nil)).Elem()
}

// A collection of values returned by getRegistryToken.
type LookupRegistryTokenResultOutput struct{ *pulumi.OutputState }

func (LookupRegistryTokenResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegistryTokenResult)(nil)).Elem()
}

func (o LookupRegistryTokenResultOutput) ToLookupRegistryTokenResultOutput() LookupRegistryTokenResultOutput {
	return o
}

func (o LookupRegistryTokenResultOutput) ToLookupRegistryTokenResultOutputWithContext(ctx context.Context) LookupRegistryTokenResultOutput {
	return o
}

func (o LookupRegistryTokenResultOutput) Credentials() GetRegistryTokenCredentialArrayOutput {
	return o.ApplyT(func(v LookupRegistryTokenResult) []GetRegistryTokenCredential { return v.Credentials }).(GetRegistryTokenCredentialArrayOutput)
}

func (o LookupRegistryTokenResultOutput) ExpiryDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryTokenResult) string { return v.ExpiryDate }).(pulumi.StringOutput)
}

// Id of the container registry token.
func (o LookupRegistryTokenResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRegistryTokenResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupRegistryTokenResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRegistryTokenResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupRegistryTokenResultOutput) PartialMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupRegistryTokenResult) *bool { return v.PartialMatch }).(pulumi.BoolPtrOutput)
}

func (o LookupRegistryTokenResultOutput) RegistryId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryTokenResult) string { return v.RegistryId }).(pulumi.StringOutput)
}

func (o LookupRegistryTokenResultOutput) Scopes() GetRegistryTokenScopeArrayOutput {
	return o.ApplyT(func(v LookupRegistryTokenResult) []GetRegistryTokenScope { return v.Scopes }).(GetRegistryTokenScopeArrayOutput)
}

func (o LookupRegistryTokenResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryTokenResult) string { return v.Status }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRegistryTokenResultOutput{})
}
