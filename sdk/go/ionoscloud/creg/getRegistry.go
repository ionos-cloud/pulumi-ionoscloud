// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package creg

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **Container Registry data source** can be used to search for and return an existing Container Registry.
// You can provide a string for the name parameter which will be compared with provisioned Container Registry.
// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
// When this happens, please refine your search and make sure that your resources have unique names.
//
// ## Example Usage
//
// ### By Id
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/creg"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := creg.LookupRegistry(ctx, &creg.LookupRegistryArgs{
//				Id: pulumi.StringRef("registry_id"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### By Name
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/creg"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := creg.LookupRegistry(ctx, &creg.LookupRegistryArgs{
//				Name: pulumi.StringRef("container-registry-example"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### By Name with Partial Match
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/creg"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := creg.LookupRegistry(ctx, &creg.LookupRegistryArgs{
//				Name:         pulumi.StringRef("-example"),
//				PartialMatch: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupRegistry(ctx *pulumi.Context, args *LookupRegistryArgs, opts ...pulumi.InvokeOption) (*LookupRegistryResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRegistryResult
	err := ctx.Invoke("ionoscloud:creg/getRegistry:getRegistry", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRegistry.
type LookupRegistryArgs struct {
	// ID of the container registry you want to search for.
	Id       *string `pulumi:"id"`
	Location *string `pulumi:"location"`
	// Name of an existing container registry that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partialMatch` parameter is not set to true.
	Name *string `pulumi:"name"`
	// Whether partial matching is allowed or not when using name argument. Default value is false.
	//
	// Either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
	PartialMatch *bool `pulumi:"partialMatch"`
}

// A collection of values returned by getRegistry.
type LookupRegistryResult struct {
	// The subnet CIDRs that are allowed to connect to the registry.  Specify "a.b.c.d/32" for an individual IP address. __Note__: If this list is empty or not set, there are no restrictions.
	ApiSubnetAllowLists        []string                               `pulumi:"apiSubnetAllowLists"`
	Features                   []GetRegistryFeature                   `pulumi:"features"`
	GarbageCollectionSchedules []GetRegistryGarbageCollectionSchedule `pulumi:"garbageCollectionSchedules"`
	Hostname                   string                                 `pulumi:"hostname"`
	// Id of the container registry.
	Id                 string                         `pulumi:"id"`
	Location           *string                        `pulumi:"location"`
	MaintenanceWindows []GetRegistryMaintenanceWindow `pulumi:"maintenanceWindows"`
	// The name of the container registry.
	Name          string                    `pulumi:"name"`
	PartialMatch  *bool                     `pulumi:"partialMatch"`
	StorageUsages []GetRegistryStorageUsage `pulumi:"storageUsages"`
}

func LookupRegistryOutput(ctx *pulumi.Context, args LookupRegistryOutputArgs, opts ...pulumi.InvokeOption) LookupRegistryResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupRegistryResultOutput, error) {
			args := v.(LookupRegistryArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ionoscloud:creg/getRegistry:getRegistry", args, LookupRegistryResultOutput{}, options).(LookupRegistryResultOutput), nil
		}).(LookupRegistryResultOutput)
}

// A collection of arguments for invoking getRegistry.
type LookupRegistryOutputArgs struct {
	// ID of the container registry you want to search for.
	Id       pulumi.StringPtrInput `pulumi:"id"`
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Name of an existing container registry that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partialMatch` parameter is not set to true.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Whether partial matching is allowed or not when using name argument. Default value is false.
	//
	// Either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
	PartialMatch pulumi.BoolPtrInput `pulumi:"partialMatch"`
}

func (LookupRegistryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegistryArgs)(nil)).Elem()
}

// A collection of values returned by getRegistry.
type LookupRegistryResultOutput struct{ *pulumi.OutputState }

func (LookupRegistryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegistryResult)(nil)).Elem()
}

func (o LookupRegistryResultOutput) ToLookupRegistryResultOutput() LookupRegistryResultOutput {
	return o
}

func (o LookupRegistryResultOutput) ToLookupRegistryResultOutputWithContext(ctx context.Context) LookupRegistryResultOutput {
	return o
}

// The subnet CIDRs that are allowed to connect to the registry.  Specify "a.b.c.d/32" for an individual IP address. __Note__: If this list is empty or not set, there are no restrictions.
func (o LookupRegistryResultOutput) ApiSubnetAllowLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRegistryResult) []string { return v.ApiSubnetAllowLists }).(pulumi.StringArrayOutput)
}

func (o LookupRegistryResultOutput) Features() GetRegistryFeatureArrayOutput {
	return o.ApplyT(func(v LookupRegistryResult) []GetRegistryFeature { return v.Features }).(GetRegistryFeatureArrayOutput)
}

func (o LookupRegistryResultOutput) GarbageCollectionSchedules() GetRegistryGarbageCollectionScheduleArrayOutput {
	return o.ApplyT(func(v LookupRegistryResult) []GetRegistryGarbageCollectionSchedule {
		return v.GarbageCollectionSchedules
	}).(GetRegistryGarbageCollectionScheduleArrayOutput)
}

func (o LookupRegistryResultOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryResult) string { return v.Hostname }).(pulumi.StringOutput)
}

// Id of the container registry.
func (o LookupRegistryResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRegistryResultOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRegistryResult) *string { return v.Location }).(pulumi.StringPtrOutput)
}

func (o LookupRegistryResultOutput) MaintenanceWindows() GetRegistryMaintenanceWindowArrayOutput {
	return o.ApplyT(func(v LookupRegistryResult) []GetRegistryMaintenanceWindow { return v.MaintenanceWindows }).(GetRegistryMaintenanceWindowArrayOutput)
}

// The name of the container registry.
func (o LookupRegistryResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupRegistryResultOutput) PartialMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupRegistryResult) *bool { return v.PartialMatch }).(pulumi.BoolPtrOutput)
}

func (o LookupRegistryResultOutput) StorageUsages() GetRegistryStorageUsageArrayOutput {
	return o.ApplyT(func(v LookupRegistryResult) []GetRegistryStorageUsage { return v.StorageUsages }).(GetRegistryStorageUsageArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRegistryResultOutput{})
}
