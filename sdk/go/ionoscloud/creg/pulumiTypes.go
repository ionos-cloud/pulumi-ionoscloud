// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package creg

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type RegistryFeatures struct {
	// [bool] Enables or disables the Vulnerability Scanning feature for the Container Registry. To disable this feature, set the attribute to false when creating the CR resource.
	//
	// > **⚠ WARNING** `Container Registry Vulnerability Scanning` is a paid feature which is enabled by default, and cannot be turned off after activation. To disable this feature for a Container Registry, ensure `vulnerabilityScanning` is set to false on resource creation.
	VulnerabilityScanning *bool `pulumi:"vulnerabilityScanning"`
}

// RegistryFeaturesInput is an input type that accepts RegistryFeaturesArgs and RegistryFeaturesOutput values.
// You can construct a concrete instance of `RegistryFeaturesInput` via:
//
//	RegistryFeaturesArgs{...}
type RegistryFeaturesInput interface {
	pulumi.Input

	ToRegistryFeaturesOutput() RegistryFeaturesOutput
	ToRegistryFeaturesOutputWithContext(context.Context) RegistryFeaturesOutput
}

type RegistryFeaturesArgs struct {
	// [bool] Enables or disables the Vulnerability Scanning feature for the Container Registry. To disable this feature, set the attribute to false when creating the CR resource.
	//
	// > **⚠ WARNING** `Container Registry Vulnerability Scanning` is a paid feature which is enabled by default, and cannot be turned off after activation. To disable this feature for a Container Registry, ensure `vulnerabilityScanning` is set to false on resource creation.
	VulnerabilityScanning pulumi.BoolPtrInput `pulumi:"vulnerabilityScanning"`
}

func (RegistryFeaturesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryFeatures)(nil)).Elem()
}

func (i RegistryFeaturesArgs) ToRegistryFeaturesOutput() RegistryFeaturesOutput {
	return i.ToRegistryFeaturesOutputWithContext(context.Background())
}

func (i RegistryFeaturesArgs) ToRegistryFeaturesOutputWithContext(ctx context.Context) RegistryFeaturesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryFeaturesOutput)
}

func (i RegistryFeaturesArgs) ToRegistryFeaturesPtrOutput() RegistryFeaturesPtrOutput {
	return i.ToRegistryFeaturesPtrOutputWithContext(context.Background())
}

func (i RegistryFeaturesArgs) ToRegistryFeaturesPtrOutputWithContext(ctx context.Context) RegistryFeaturesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryFeaturesOutput).ToRegistryFeaturesPtrOutputWithContext(ctx)
}

// RegistryFeaturesPtrInput is an input type that accepts RegistryFeaturesArgs, RegistryFeaturesPtr and RegistryFeaturesPtrOutput values.
// You can construct a concrete instance of `RegistryFeaturesPtrInput` via:
//
//	        RegistryFeaturesArgs{...}
//
//	or:
//
//	        nil
type RegistryFeaturesPtrInput interface {
	pulumi.Input

	ToRegistryFeaturesPtrOutput() RegistryFeaturesPtrOutput
	ToRegistryFeaturesPtrOutputWithContext(context.Context) RegistryFeaturesPtrOutput
}

type registryFeaturesPtrType RegistryFeaturesArgs

func RegistryFeaturesPtr(v *RegistryFeaturesArgs) RegistryFeaturesPtrInput {
	return (*registryFeaturesPtrType)(v)
}

func (*registryFeaturesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryFeatures)(nil)).Elem()
}

func (i *registryFeaturesPtrType) ToRegistryFeaturesPtrOutput() RegistryFeaturesPtrOutput {
	return i.ToRegistryFeaturesPtrOutputWithContext(context.Background())
}

func (i *registryFeaturesPtrType) ToRegistryFeaturesPtrOutputWithContext(ctx context.Context) RegistryFeaturesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryFeaturesPtrOutput)
}

type RegistryFeaturesOutput struct{ *pulumi.OutputState }

func (RegistryFeaturesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryFeatures)(nil)).Elem()
}

func (o RegistryFeaturesOutput) ToRegistryFeaturesOutput() RegistryFeaturesOutput {
	return o
}

func (o RegistryFeaturesOutput) ToRegistryFeaturesOutputWithContext(ctx context.Context) RegistryFeaturesOutput {
	return o
}

func (o RegistryFeaturesOutput) ToRegistryFeaturesPtrOutput() RegistryFeaturesPtrOutput {
	return o.ToRegistryFeaturesPtrOutputWithContext(context.Background())
}

func (o RegistryFeaturesOutput) ToRegistryFeaturesPtrOutputWithContext(ctx context.Context) RegistryFeaturesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistryFeatures) *RegistryFeatures {
		return &v
	}).(RegistryFeaturesPtrOutput)
}

// [bool] Enables or disables the Vulnerability Scanning feature for the Container Registry. To disable this feature, set the attribute to false when creating the CR resource.
//
// > **⚠ WARNING** `Container Registry Vulnerability Scanning` is a paid feature which is enabled by default, and cannot be turned off after activation. To disable this feature for a Container Registry, ensure `vulnerabilityScanning` is set to false on resource creation.
func (o RegistryFeaturesOutput) VulnerabilityScanning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegistryFeatures) *bool { return v.VulnerabilityScanning }).(pulumi.BoolPtrOutput)
}

type RegistryFeaturesPtrOutput struct{ *pulumi.OutputState }

func (RegistryFeaturesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryFeatures)(nil)).Elem()
}

func (o RegistryFeaturesPtrOutput) ToRegistryFeaturesPtrOutput() RegistryFeaturesPtrOutput {
	return o
}

func (o RegistryFeaturesPtrOutput) ToRegistryFeaturesPtrOutputWithContext(ctx context.Context) RegistryFeaturesPtrOutput {
	return o
}

func (o RegistryFeaturesPtrOutput) Elem() RegistryFeaturesOutput {
	return o.ApplyT(func(v *RegistryFeatures) RegistryFeatures {
		if v != nil {
			return *v
		}
		var ret RegistryFeatures
		return ret
	}).(RegistryFeaturesOutput)
}

// [bool] Enables or disables the Vulnerability Scanning feature for the Container Registry. To disable this feature, set the attribute to false when creating the CR resource.
//
// > **⚠ WARNING** `Container Registry Vulnerability Scanning` is a paid feature which is enabled by default, and cannot be turned off after activation. To disable this feature for a Container Registry, ensure `vulnerabilityScanning` is set to false on resource creation.
func (o RegistryFeaturesPtrOutput) VulnerabilityScanning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegistryFeatures) *bool {
		if v == nil {
			return nil
		}
		return v.VulnerabilityScanning
	}).(pulumi.BoolPtrOutput)
}

type RegistryGarbageCollectionSchedule struct {
	// [list] Elements of list must have one of the values: `Saturday`, `Sunday`, `Monday`, `Tuesday`,  `Wednesday`,  `Thursday`,  `Friday`
	Days []string `pulumi:"days"`
	// [string]
	Time string `pulumi:"time"`
}

// RegistryGarbageCollectionScheduleInput is an input type that accepts RegistryGarbageCollectionScheduleArgs and RegistryGarbageCollectionScheduleOutput values.
// You can construct a concrete instance of `RegistryGarbageCollectionScheduleInput` via:
//
//	RegistryGarbageCollectionScheduleArgs{...}
type RegistryGarbageCollectionScheduleInput interface {
	pulumi.Input

	ToRegistryGarbageCollectionScheduleOutput() RegistryGarbageCollectionScheduleOutput
	ToRegistryGarbageCollectionScheduleOutputWithContext(context.Context) RegistryGarbageCollectionScheduleOutput
}

type RegistryGarbageCollectionScheduleArgs struct {
	// [list] Elements of list must have one of the values: `Saturday`, `Sunday`, `Monday`, `Tuesday`,  `Wednesday`,  `Thursday`,  `Friday`
	Days pulumi.StringArrayInput `pulumi:"days"`
	// [string]
	Time pulumi.StringInput `pulumi:"time"`
}

func (RegistryGarbageCollectionScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryGarbageCollectionSchedule)(nil)).Elem()
}

func (i RegistryGarbageCollectionScheduleArgs) ToRegistryGarbageCollectionScheduleOutput() RegistryGarbageCollectionScheduleOutput {
	return i.ToRegistryGarbageCollectionScheduleOutputWithContext(context.Background())
}

func (i RegistryGarbageCollectionScheduleArgs) ToRegistryGarbageCollectionScheduleOutputWithContext(ctx context.Context) RegistryGarbageCollectionScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryGarbageCollectionScheduleOutput)
}

func (i RegistryGarbageCollectionScheduleArgs) ToRegistryGarbageCollectionSchedulePtrOutput() RegistryGarbageCollectionSchedulePtrOutput {
	return i.ToRegistryGarbageCollectionSchedulePtrOutputWithContext(context.Background())
}

func (i RegistryGarbageCollectionScheduleArgs) ToRegistryGarbageCollectionSchedulePtrOutputWithContext(ctx context.Context) RegistryGarbageCollectionSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryGarbageCollectionScheduleOutput).ToRegistryGarbageCollectionSchedulePtrOutputWithContext(ctx)
}

// RegistryGarbageCollectionSchedulePtrInput is an input type that accepts RegistryGarbageCollectionScheduleArgs, RegistryGarbageCollectionSchedulePtr and RegistryGarbageCollectionSchedulePtrOutput values.
// You can construct a concrete instance of `RegistryGarbageCollectionSchedulePtrInput` via:
//
//	        RegistryGarbageCollectionScheduleArgs{...}
//
//	or:
//
//	        nil
type RegistryGarbageCollectionSchedulePtrInput interface {
	pulumi.Input

	ToRegistryGarbageCollectionSchedulePtrOutput() RegistryGarbageCollectionSchedulePtrOutput
	ToRegistryGarbageCollectionSchedulePtrOutputWithContext(context.Context) RegistryGarbageCollectionSchedulePtrOutput
}

type registryGarbageCollectionSchedulePtrType RegistryGarbageCollectionScheduleArgs

func RegistryGarbageCollectionSchedulePtr(v *RegistryGarbageCollectionScheduleArgs) RegistryGarbageCollectionSchedulePtrInput {
	return (*registryGarbageCollectionSchedulePtrType)(v)
}

func (*registryGarbageCollectionSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryGarbageCollectionSchedule)(nil)).Elem()
}

func (i *registryGarbageCollectionSchedulePtrType) ToRegistryGarbageCollectionSchedulePtrOutput() RegistryGarbageCollectionSchedulePtrOutput {
	return i.ToRegistryGarbageCollectionSchedulePtrOutputWithContext(context.Background())
}

func (i *registryGarbageCollectionSchedulePtrType) ToRegistryGarbageCollectionSchedulePtrOutputWithContext(ctx context.Context) RegistryGarbageCollectionSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryGarbageCollectionSchedulePtrOutput)
}

type RegistryGarbageCollectionScheduleOutput struct{ *pulumi.OutputState }

func (RegistryGarbageCollectionScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryGarbageCollectionSchedule)(nil)).Elem()
}

func (o RegistryGarbageCollectionScheduleOutput) ToRegistryGarbageCollectionScheduleOutput() RegistryGarbageCollectionScheduleOutput {
	return o
}

func (o RegistryGarbageCollectionScheduleOutput) ToRegistryGarbageCollectionScheduleOutputWithContext(ctx context.Context) RegistryGarbageCollectionScheduleOutput {
	return o
}

func (o RegistryGarbageCollectionScheduleOutput) ToRegistryGarbageCollectionSchedulePtrOutput() RegistryGarbageCollectionSchedulePtrOutput {
	return o.ToRegistryGarbageCollectionSchedulePtrOutputWithContext(context.Background())
}

func (o RegistryGarbageCollectionScheduleOutput) ToRegistryGarbageCollectionSchedulePtrOutputWithContext(ctx context.Context) RegistryGarbageCollectionSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistryGarbageCollectionSchedule) *RegistryGarbageCollectionSchedule {
		return &v
	}).(RegistryGarbageCollectionSchedulePtrOutput)
}

// [list] Elements of list must have one of the values: `Saturday`, `Sunday`, `Monday`, `Tuesday`,  `Wednesday`,  `Thursday`,  `Friday`
func (o RegistryGarbageCollectionScheduleOutput) Days() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegistryGarbageCollectionSchedule) []string { return v.Days }).(pulumi.StringArrayOutput)
}

// [string]
func (o RegistryGarbageCollectionScheduleOutput) Time() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryGarbageCollectionSchedule) string { return v.Time }).(pulumi.StringOutput)
}

type RegistryGarbageCollectionSchedulePtrOutput struct{ *pulumi.OutputState }

func (RegistryGarbageCollectionSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryGarbageCollectionSchedule)(nil)).Elem()
}

func (o RegistryGarbageCollectionSchedulePtrOutput) ToRegistryGarbageCollectionSchedulePtrOutput() RegistryGarbageCollectionSchedulePtrOutput {
	return o
}

func (o RegistryGarbageCollectionSchedulePtrOutput) ToRegistryGarbageCollectionSchedulePtrOutputWithContext(ctx context.Context) RegistryGarbageCollectionSchedulePtrOutput {
	return o
}

func (o RegistryGarbageCollectionSchedulePtrOutput) Elem() RegistryGarbageCollectionScheduleOutput {
	return o.ApplyT(func(v *RegistryGarbageCollectionSchedule) RegistryGarbageCollectionSchedule {
		if v != nil {
			return *v
		}
		var ret RegistryGarbageCollectionSchedule
		return ret
	}).(RegistryGarbageCollectionScheduleOutput)
}

// [list] Elements of list must have one of the values: `Saturday`, `Sunday`, `Monday`, `Tuesday`,  `Wednesday`,  `Thursday`,  `Friday`
func (o RegistryGarbageCollectionSchedulePtrOutput) Days() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegistryGarbageCollectionSchedule) []string {
		if v == nil {
			return nil
		}
		return v.Days
	}).(pulumi.StringArrayOutput)
}

// [string]
func (o RegistryGarbageCollectionSchedulePtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryGarbageCollectionSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.Time
	}).(pulumi.StringPtrOutput)
}

type RegistryStorageUsage struct {
	Bytes     *int    `pulumi:"bytes"`
	UpdatedAt *string `pulumi:"updatedAt"`
}

// RegistryStorageUsageInput is an input type that accepts RegistryStorageUsageArgs and RegistryStorageUsageOutput values.
// You can construct a concrete instance of `RegistryStorageUsageInput` via:
//
//	RegistryStorageUsageArgs{...}
type RegistryStorageUsageInput interface {
	pulumi.Input

	ToRegistryStorageUsageOutput() RegistryStorageUsageOutput
	ToRegistryStorageUsageOutputWithContext(context.Context) RegistryStorageUsageOutput
}

type RegistryStorageUsageArgs struct {
	Bytes     pulumi.IntPtrInput    `pulumi:"bytes"`
	UpdatedAt pulumi.StringPtrInput `pulumi:"updatedAt"`
}

func (RegistryStorageUsageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryStorageUsage)(nil)).Elem()
}

func (i RegistryStorageUsageArgs) ToRegistryStorageUsageOutput() RegistryStorageUsageOutput {
	return i.ToRegistryStorageUsageOutputWithContext(context.Background())
}

func (i RegistryStorageUsageArgs) ToRegistryStorageUsageOutputWithContext(ctx context.Context) RegistryStorageUsageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryStorageUsageOutput)
}

// RegistryStorageUsageArrayInput is an input type that accepts RegistryStorageUsageArray and RegistryStorageUsageArrayOutput values.
// You can construct a concrete instance of `RegistryStorageUsageArrayInput` via:
//
//	RegistryStorageUsageArray{ RegistryStorageUsageArgs{...} }
type RegistryStorageUsageArrayInput interface {
	pulumi.Input

	ToRegistryStorageUsageArrayOutput() RegistryStorageUsageArrayOutput
	ToRegistryStorageUsageArrayOutputWithContext(context.Context) RegistryStorageUsageArrayOutput
}

type RegistryStorageUsageArray []RegistryStorageUsageInput

func (RegistryStorageUsageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryStorageUsage)(nil)).Elem()
}

func (i RegistryStorageUsageArray) ToRegistryStorageUsageArrayOutput() RegistryStorageUsageArrayOutput {
	return i.ToRegistryStorageUsageArrayOutputWithContext(context.Background())
}

func (i RegistryStorageUsageArray) ToRegistryStorageUsageArrayOutputWithContext(ctx context.Context) RegistryStorageUsageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryStorageUsageArrayOutput)
}

type RegistryStorageUsageOutput struct{ *pulumi.OutputState }

func (RegistryStorageUsageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryStorageUsage)(nil)).Elem()
}

func (o RegistryStorageUsageOutput) ToRegistryStorageUsageOutput() RegistryStorageUsageOutput {
	return o
}

func (o RegistryStorageUsageOutput) ToRegistryStorageUsageOutputWithContext(ctx context.Context) RegistryStorageUsageOutput {
	return o
}

func (o RegistryStorageUsageOutput) Bytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegistryStorageUsage) *int { return v.Bytes }).(pulumi.IntPtrOutput)
}

func (o RegistryStorageUsageOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryStorageUsage) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

type RegistryStorageUsageArrayOutput struct{ *pulumi.OutputState }

func (RegistryStorageUsageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryStorageUsage)(nil)).Elem()
}

func (o RegistryStorageUsageArrayOutput) ToRegistryStorageUsageArrayOutput() RegistryStorageUsageArrayOutput {
	return o
}

func (o RegistryStorageUsageArrayOutput) ToRegistryStorageUsageArrayOutputWithContext(ctx context.Context) RegistryStorageUsageArrayOutput {
	return o
}

func (o RegistryStorageUsageArrayOutput) Index(i pulumi.IntInput) RegistryStorageUsageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryStorageUsage {
		return vs[0].([]RegistryStorageUsage)[vs[1].(int)]
	}).(RegistryStorageUsageOutput)
}

type RegistryTokenCredential struct {
	Password string `pulumi:"password"`
	Username string `pulumi:"username"`
}

// RegistryTokenCredentialInput is an input type that accepts RegistryTokenCredentialArgs and RegistryTokenCredentialOutput values.
// You can construct a concrete instance of `RegistryTokenCredentialInput` via:
//
//	RegistryTokenCredentialArgs{...}
type RegistryTokenCredentialInput interface {
	pulumi.Input

	ToRegistryTokenCredentialOutput() RegistryTokenCredentialOutput
	ToRegistryTokenCredentialOutputWithContext(context.Context) RegistryTokenCredentialOutput
}

type RegistryTokenCredentialArgs struct {
	Password pulumi.StringInput `pulumi:"password"`
	Username pulumi.StringInput `pulumi:"username"`
}

func (RegistryTokenCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryTokenCredential)(nil)).Elem()
}

func (i RegistryTokenCredentialArgs) ToRegistryTokenCredentialOutput() RegistryTokenCredentialOutput {
	return i.ToRegistryTokenCredentialOutputWithContext(context.Background())
}

func (i RegistryTokenCredentialArgs) ToRegistryTokenCredentialOutputWithContext(ctx context.Context) RegistryTokenCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryTokenCredentialOutput)
}

// RegistryTokenCredentialArrayInput is an input type that accepts RegistryTokenCredentialArray and RegistryTokenCredentialArrayOutput values.
// You can construct a concrete instance of `RegistryTokenCredentialArrayInput` via:
//
//	RegistryTokenCredentialArray{ RegistryTokenCredentialArgs{...} }
type RegistryTokenCredentialArrayInput interface {
	pulumi.Input

	ToRegistryTokenCredentialArrayOutput() RegistryTokenCredentialArrayOutput
	ToRegistryTokenCredentialArrayOutputWithContext(context.Context) RegistryTokenCredentialArrayOutput
}

type RegistryTokenCredentialArray []RegistryTokenCredentialInput

func (RegistryTokenCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryTokenCredential)(nil)).Elem()
}

func (i RegistryTokenCredentialArray) ToRegistryTokenCredentialArrayOutput() RegistryTokenCredentialArrayOutput {
	return i.ToRegistryTokenCredentialArrayOutputWithContext(context.Background())
}

func (i RegistryTokenCredentialArray) ToRegistryTokenCredentialArrayOutputWithContext(ctx context.Context) RegistryTokenCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryTokenCredentialArrayOutput)
}

type RegistryTokenCredentialOutput struct{ *pulumi.OutputState }

func (RegistryTokenCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryTokenCredential)(nil)).Elem()
}

func (o RegistryTokenCredentialOutput) ToRegistryTokenCredentialOutput() RegistryTokenCredentialOutput {
	return o
}

func (o RegistryTokenCredentialOutput) ToRegistryTokenCredentialOutputWithContext(ctx context.Context) RegistryTokenCredentialOutput {
	return o
}

func (o RegistryTokenCredentialOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryTokenCredential) string { return v.Password }).(pulumi.StringOutput)
}

func (o RegistryTokenCredentialOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryTokenCredential) string { return v.Username }).(pulumi.StringOutput)
}

type RegistryTokenCredentialArrayOutput struct{ *pulumi.OutputState }

func (RegistryTokenCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryTokenCredential)(nil)).Elem()
}

func (o RegistryTokenCredentialArrayOutput) ToRegistryTokenCredentialArrayOutput() RegistryTokenCredentialArrayOutput {
	return o
}

func (o RegistryTokenCredentialArrayOutput) ToRegistryTokenCredentialArrayOutputWithContext(ctx context.Context) RegistryTokenCredentialArrayOutput {
	return o
}

func (o RegistryTokenCredentialArrayOutput) Index(i pulumi.IntInput) RegistryTokenCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryTokenCredential {
		return vs[0].([]RegistryTokenCredential)[vs[1].(int)]
	}).(RegistryTokenCredentialOutput)
}

type RegistryTokenScope struct {
	// [string] Example: ["pull", "push", "delete"]
	Actions []string `pulumi:"actions"`
	// [string]
	Name string `pulumi:"name"`
	// [string]
	Type string `pulumi:"type"`
}

// RegistryTokenScopeInput is an input type that accepts RegistryTokenScopeArgs and RegistryTokenScopeOutput values.
// You can construct a concrete instance of `RegistryTokenScopeInput` via:
//
//	RegistryTokenScopeArgs{...}
type RegistryTokenScopeInput interface {
	pulumi.Input

	ToRegistryTokenScopeOutput() RegistryTokenScopeOutput
	ToRegistryTokenScopeOutputWithContext(context.Context) RegistryTokenScopeOutput
}

type RegistryTokenScopeArgs struct {
	// [string] Example: ["pull", "push", "delete"]
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// [string]
	Name pulumi.StringInput `pulumi:"name"`
	// [string]
	Type pulumi.StringInput `pulumi:"type"`
}

func (RegistryTokenScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryTokenScope)(nil)).Elem()
}

func (i RegistryTokenScopeArgs) ToRegistryTokenScopeOutput() RegistryTokenScopeOutput {
	return i.ToRegistryTokenScopeOutputWithContext(context.Background())
}

func (i RegistryTokenScopeArgs) ToRegistryTokenScopeOutputWithContext(ctx context.Context) RegistryTokenScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryTokenScopeOutput)
}

// RegistryTokenScopeArrayInput is an input type that accepts RegistryTokenScopeArray and RegistryTokenScopeArrayOutput values.
// You can construct a concrete instance of `RegistryTokenScopeArrayInput` via:
//
//	RegistryTokenScopeArray{ RegistryTokenScopeArgs{...} }
type RegistryTokenScopeArrayInput interface {
	pulumi.Input

	ToRegistryTokenScopeArrayOutput() RegistryTokenScopeArrayOutput
	ToRegistryTokenScopeArrayOutputWithContext(context.Context) RegistryTokenScopeArrayOutput
}

type RegistryTokenScopeArray []RegistryTokenScopeInput

func (RegistryTokenScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryTokenScope)(nil)).Elem()
}

func (i RegistryTokenScopeArray) ToRegistryTokenScopeArrayOutput() RegistryTokenScopeArrayOutput {
	return i.ToRegistryTokenScopeArrayOutputWithContext(context.Background())
}

func (i RegistryTokenScopeArray) ToRegistryTokenScopeArrayOutputWithContext(ctx context.Context) RegistryTokenScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryTokenScopeArrayOutput)
}

type RegistryTokenScopeOutput struct{ *pulumi.OutputState }

func (RegistryTokenScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryTokenScope)(nil)).Elem()
}

func (o RegistryTokenScopeOutput) ToRegistryTokenScopeOutput() RegistryTokenScopeOutput {
	return o
}

func (o RegistryTokenScopeOutput) ToRegistryTokenScopeOutputWithContext(ctx context.Context) RegistryTokenScopeOutput {
	return o
}

// [string] Example: ["pull", "push", "delete"]
func (o RegistryTokenScopeOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegistryTokenScope) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// [string]
func (o RegistryTokenScopeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryTokenScope) string { return v.Name }).(pulumi.StringOutput)
}

// [string]
func (o RegistryTokenScopeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryTokenScope) string { return v.Type }).(pulumi.StringOutput)
}

type RegistryTokenScopeArrayOutput struct{ *pulumi.OutputState }

func (RegistryTokenScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryTokenScope)(nil)).Elem()
}

func (o RegistryTokenScopeArrayOutput) ToRegistryTokenScopeArrayOutput() RegistryTokenScopeArrayOutput {
	return o
}

func (o RegistryTokenScopeArrayOutput) ToRegistryTokenScopeArrayOutputWithContext(ctx context.Context) RegistryTokenScopeArrayOutput {
	return o
}

func (o RegistryTokenScopeArrayOutput) Index(i pulumi.IntInput) RegistryTokenScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryTokenScope {
		return vs[0].([]RegistryTokenScope)[vs[1].(int)]
	}).(RegistryTokenScopeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryFeaturesInput)(nil)).Elem(), RegistryFeaturesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryFeaturesPtrInput)(nil)).Elem(), RegistryFeaturesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryGarbageCollectionScheduleInput)(nil)).Elem(), RegistryGarbageCollectionScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryGarbageCollectionSchedulePtrInput)(nil)).Elem(), RegistryGarbageCollectionScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryStorageUsageInput)(nil)).Elem(), RegistryStorageUsageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryStorageUsageArrayInput)(nil)).Elem(), RegistryStorageUsageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryTokenCredentialInput)(nil)).Elem(), RegistryTokenCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryTokenCredentialArrayInput)(nil)).Elem(), RegistryTokenCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryTokenScopeInput)(nil)).Elem(), RegistryTokenScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryTokenScopeArrayInput)(nil)).Elem(), RegistryTokenScopeArray{})
	pulumi.RegisterOutputType(RegistryFeaturesOutput{})
	pulumi.RegisterOutputType(RegistryFeaturesPtrOutput{})
	pulumi.RegisterOutputType(RegistryGarbageCollectionScheduleOutput{})
	pulumi.RegisterOutputType(RegistryGarbageCollectionSchedulePtrOutput{})
	pulumi.RegisterOutputType(RegistryStorageUsageOutput{})
	pulumi.RegisterOutputType(RegistryStorageUsageArrayOutput{})
	pulumi.RegisterOutputType(RegistryTokenCredentialOutput{})
	pulumi.RegisterOutputType(RegistryTokenCredentialArrayOutput{})
	pulumi.RegisterOutputType(RegistryTokenScopeOutput{})
	pulumi.RegisterOutputType(RegistryTokenScopeArrayOutput{})
}
