// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package creg

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type RegistryFeatures struct {
	// Enables vulnerability scanning for images in the container registry. Note: this feature can incur additional charges
	VulnerabilityScanning *bool `pulumi:"vulnerabilityScanning"`
}

// RegistryFeaturesInput is an input type that accepts RegistryFeaturesArgs and RegistryFeaturesOutput values.
// You can construct a concrete instance of `RegistryFeaturesInput` via:
//
//	RegistryFeaturesArgs{...}
type RegistryFeaturesInput interface {
	pulumi.Input

	ToRegistryFeaturesOutput() RegistryFeaturesOutput
	ToRegistryFeaturesOutputWithContext(context.Context) RegistryFeaturesOutput
}

type RegistryFeaturesArgs struct {
	// Enables vulnerability scanning for images in the container registry. Note: this feature can incur additional charges
	VulnerabilityScanning pulumi.BoolPtrInput `pulumi:"vulnerabilityScanning"`
}

func (RegistryFeaturesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryFeatures)(nil)).Elem()
}

func (i RegistryFeaturesArgs) ToRegistryFeaturesOutput() RegistryFeaturesOutput {
	return i.ToRegistryFeaturesOutputWithContext(context.Background())
}

func (i RegistryFeaturesArgs) ToRegistryFeaturesOutputWithContext(ctx context.Context) RegistryFeaturesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryFeaturesOutput)
}

func (i RegistryFeaturesArgs) ToRegistryFeaturesPtrOutput() RegistryFeaturesPtrOutput {
	return i.ToRegistryFeaturesPtrOutputWithContext(context.Background())
}

func (i RegistryFeaturesArgs) ToRegistryFeaturesPtrOutputWithContext(ctx context.Context) RegistryFeaturesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryFeaturesOutput).ToRegistryFeaturesPtrOutputWithContext(ctx)
}

// RegistryFeaturesPtrInput is an input type that accepts RegistryFeaturesArgs, RegistryFeaturesPtr and RegistryFeaturesPtrOutput values.
// You can construct a concrete instance of `RegistryFeaturesPtrInput` via:
//
//	        RegistryFeaturesArgs{...}
//
//	or:
//
//	        nil
type RegistryFeaturesPtrInput interface {
	pulumi.Input

	ToRegistryFeaturesPtrOutput() RegistryFeaturesPtrOutput
	ToRegistryFeaturesPtrOutputWithContext(context.Context) RegistryFeaturesPtrOutput
}

type registryFeaturesPtrType RegistryFeaturesArgs

func RegistryFeaturesPtr(v *RegistryFeaturesArgs) RegistryFeaturesPtrInput {
	return (*registryFeaturesPtrType)(v)
}

func (*registryFeaturesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryFeatures)(nil)).Elem()
}

func (i *registryFeaturesPtrType) ToRegistryFeaturesPtrOutput() RegistryFeaturesPtrOutput {
	return i.ToRegistryFeaturesPtrOutputWithContext(context.Background())
}

func (i *registryFeaturesPtrType) ToRegistryFeaturesPtrOutputWithContext(ctx context.Context) RegistryFeaturesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryFeaturesPtrOutput)
}

type RegistryFeaturesOutput struct{ *pulumi.OutputState }

func (RegistryFeaturesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryFeatures)(nil)).Elem()
}

func (o RegistryFeaturesOutput) ToRegistryFeaturesOutput() RegistryFeaturesOutput {
	return o
}

func (o RegistryFeaturesOutput) ToRegistryFeaturesOutputWithContext(ctx context.Context) RegistryFeaturesOutput {
	return o
}

func (o RegistryFeaturesOutput) ToRegistryFeaturesPtrOutput() RegistryFeaturesPtrOutput {
	return o.ToRegistryFeaturesPtrOutputWithContext(context.Background())
}

func (o RegistryFeaturesOutput) ToRegistryFeaturesPtrOutputWithContext(ctx context.Context) RegistryFeaturesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistryFeatures) *RegistryFeatures {
		return &v
	}).(RegistryFeaturesPtrOutput)
}

// Enables vulnerability scanning for images in the container registry. Note: this feature can incur additional charges
func (o RegistryFeaturesOutput) VulnerabilityScanning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegistryFeatures) *bool { return v.VulnerabilityScanning }).(pulumi.BoolPtrOutput)
}

type RegistryFeaturesPtrOutput struct{ *pulumi.OutputState }

func (RegistryFeaturesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryFeatures)(nil)).Elem()
}

func (o RegistryFeaturesPtrOutput) ToRegistryFeaturesPtrOutput() RegistryFeaturesPtrOutput {
	return o
}

func (o RegistryFeaturesPtrOutput) ToRegistryFeaturesPtrOutputWithContext(ctx context.Context) RegistryFeaturesPtrOutput {
	return o
}

func (o RegistryFeaturesPtrOutput) Elem() RegistryFeaturesOutput {
	return o.ApplyT(func(v *RegistryFeatures) RegistryFeatures {
		if v != nil {
			return *v
		}
		var ret RegistryFeatures
		return ret
	}).(RegistryFeaturesOutput)
}

// Enables vulnerability scanning for images in the container registry. Note: this feature can incur additional charges
func (o RegistryFeaturesPtrOutput) VulnerabilityScanning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegistryFeatures) *bool {
		if v == nil {
			return nil
		}
		return v.VulnerabilityScanning
	}).(pulumi.BoolPtrOutput)
}

type RegistryGarbageCollectionSchedule struct {
	Days []string `pulumi:"days"`
	// UTC time of day e.g. 01:00:00 - as defined by partial-time - RFC3339
	Time string `pulumi:"time"`
}

// RegistryGarbageCollectionScheduleInput is an input type that accepts RegistryGarbageCollectionScheduleArgs and RegistryGarbageCollectionScheduleOutput values.
// You can construct a concrete instance of `RegistryGarbageCollectionScheduleInput` via:
//
//	RegistryGarbageCollectionScheduleArgs{...}
type RegistryGarbageCollectionScheduleInput interface {
	pulumi.Input

	ToRegistryGarbageCollectionScheduleOutput() RegistryGarbageCollectionScheduleOutput
	ToRegistryGarbageCollectionScheduleOutputWithContext(context.Context) RegistryGarbageCollectionScheduleOutput
}

type RegistryGarbageCollectionScheduleArgs struct {
	Days pulumi.StringArrayInput `pulumi:"days"`
	// UTC time of day e.g. 01:00:00 - as defined by partial-time - RFC3339
	Time pulumi.StringInput `pulumi:"time"`
}

func (RegistryGarbageCollectionScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryGarbageCollectionSchedule)(nil)).Elem()
}

func (i RegistryGarbageCollectionScheduleArgs) ToRegistryGarbageCollectionScheduleOutput() RegistryGarbageCollectionScheduleOutput {
	return i.ToRegistryGarbageCollectionScheduleOutputWithContext(context.Background())
}

func (i RegistryGarbageCollectionScheduleArgs) ToRegistryGarbageCollectionScheduleOutputWithContext(ctx context.Context) RegistryGarbageCollectionScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryGarbageCollectionScheduleOutput)
}

func (i RegistryGarbageCollectionScheduleArgs) ToRegistryGarbageCollectionSchedulePtrOutput() RegistryGarbageCollectionSchedulePtrOutput {
	return i.ToRegistryGarbageCollectionSchedulePtrOutputWithContext(context.Background())
}

func (i RegistryGarbageCollectionScheduleArgs) ToRegistryGarbageCollectionSchedulePtrOutputWithContext(ctx context.Context) RegistryGarbageCollectionSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryGarbageCollectionScheduleOutput).ToRegistryGarbageCollectionSchedulePtrOutputWithContext(ctx)
}

// RegistryGarbageCollectionSchedulePtrInput is an input type that accepts RegistryGarbageCollectionScheduleArgs, RegistryGarbageCollectionSchedulePtr and RegistryGarbageCollectionSchedulePtrOutput values.
// You can construct a concrete instance of `RegistryGarbageCollectionSchedulePtrInput` via:
//
//	        RegistryGarbageCollectionScheduleArgs{...}
//
//	or:
//
//	        nil
type RegistryGarbageCollectionSchedulePtrInput interface {
	pulumi.Input

	ToRegistryGarbageCollectionSchedulePtrOutput() RegistryGarbageCollectionSchedulePtrOutput
	ToRegistryGarbageCollectionSchedulePtrOutputWithContext(context.Context) RegistryGarbageCollectionSchedulePtrOutput
}

type registryGarbageCollectionSchedulePtrType RegistryGarbageCollectionScheduleArgs

func RegistryGarbageCollectionSchedulePtr(v *RegistryGarbageCollectionScheduleArgs) RegistryGarbageCollectionSchedulePtrInput {
	return (*registryGarbageCollectionSchedulePtrType)(v)
}

func (*registryGarbageCollectionSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryGarbageCollectionSchedule)(nil)).Elem()
}

func (i *registryGarbageCollectionSchedulePtrType) ToRegistryGarbageCollectionSchedulePtrOutput() RegistryGarbageCollectionSchedulePtrOutput {
	return i.ToRegistryGarbageCollectionSchedulePtrOutputWithContext(context.Background())
}

func (i *registryGarbageCollectionSchedulePtrType) ToRegistryGarbageCollectionSchedulePtrOutputWithContext(ctx context.Context) RegistryGarbageCollectionSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryGarbageCollectionSchedulePtrOutput)
}

type RegistryGarbageCollectionScheduleOutput struct{ *pulumi.OutputState }

func (RegistryGarbageCollectionScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryGarbageCollectionSchedule)(nil)).Elem()
}

func (o RegistryGarbageCollectionScheduleOutput) ToRegistryGarbageCollectionScheduleOutput() RegistryGarbageCollectionScheduleOutput {
	return o
}

func (o RegistryGarbageCollectionScheduleOutput) ToRegistryGarbageCollectionScheduleOutputWithContext(ctx context.Context) RegistryGarbageCollectionScheduleOutput {
	return o
}

func (o RegistryGarbageCollectionScheduleOutput) ToRegistryGarbageCollectionSchedulePtrOutput() RegistryGarbageCollectionSchedulePtrOutput {
	return o.ToRegistryGarbageCollectionSchedulePtrOutputWithContext(context.Background())
}

func (o RegistryGarbageCollectionScheduleOutput) ToRegistryGarbageCollectionSchedulePtrOutputWithContext(ctx context.Context) RegistryGarbageCollectionSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistryGarbageCollectionSchedule) *RegistryGarbageCollectionSchedule {
		return &v
	}).(RegistryGarbageCollectionSchedulePtrOutput)
}

func (o RegistryGarbageCollectionScheduleOutput) Days() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegistryGarbageCollectionSchedule) []string { return v.Days }).(pulumi.StringArrayOutput)
}

// UTC time of day e.g. 01:00:00 - as defined by partial-time - RFC3339
func (o RegistryGarbageCollectionScheduleOutput) Time() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryGarbageCollectionSchedule) string { return v.Time }).(pulumi.StringOutput)
}

type RegistryGarbageCollectionSchedulePtrOutput struct{ *pulumi.OutputState }

func (RegistryGarbageCollectionSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryGarbageCollectionSchedule)(nil)).Elem()
}

func (o RegistryGarbageCollectionSchedulePtrOutput) ToRegistryGarbageCollectionSchedulePtrOutput() RegistryGarbageCollectionSchedulePtrOutput {
	return o
}

func (o RegistryGarbageCollectionSchedulePtrOutput) ToRegistryGarbageCollectionSchedulePtrOutputWithContext(ctx context.Context) RegistryGarbageCollectionSchedulePtrOutput {
	return o
}

func (o RegistryGarbageCollectionSchedulePtrOutput) Elem() RegistryGarbageCollectionScheduleOutput {
	return o.ApplyT(func(v *RegistryGarbageCollectionSchedule) RegistryGarbageCollectionSchedule {
		if v != nil {
			return *v
		}
		var ret RegistryGarbageCollectionSchedule
		return ret
	}).(RegistryGarbageCollectionScheduleOutput)
}

func (o RegistryGarbageCollectionSchedulePtrOutput) Days() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegistryGarbageCollectionSchedule) []string {
		if v == nil {
			return nil
		}
		return v.Days
	}).(pulumi.StringArrayOutput)
}

// UTC time of day e.g. 01:00:00 - as defined by partial-time - RFC3339
func (o RegistryGarbageCollectionSchedulePtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryGarbageCollectionSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.Time
	}).(pulumi.StringPtrOutput)
}

type RegistryStorageUsage struct {
	Bytes     *int    `pulumi:"bytes"`
	UpdatedAt *string `pulumi:"updatedAt"`
}

// RegistryStorageUsageInput is an input type that accepts RegistryStorageUsageArgs and RegistryStorageUsageOutput values.
// You can construct a concrete instance of `RegistryStorageUsageInput` via:
//
//	RegistryStorageUsageArgs{...}
type RegistryStorageUsageInput interface {
	pulumi.Input

	ToRegistryStorageUsageOutput() RegistryStorageUsageOutput
	ToRegistryStorageUsageOutputWithContext(context.Context) RegistryStorageUsageOutput
}

type RegistryStorageUsageArgs struct {
	Bytes     pulumi.IntPtrInput    `pulumi:"bytes"`
	UpdatedAt pulumi.StringPtrInput `pulumi:"updatedAt"`
}

func (RegistryStorageUsageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryStorageUsage)(nil)).Elem()
}

func (i RegistryStorageUsageArgs) ToRegistryStorageUsageOutput() RegistryStorageUsageOutput {
	return i.ToRegistryStorageUsageOutputWithContext(context.Background())
}

func (i RegistryStorageUsageArgs) ToRegistryStorageUsageOutputWithContext(ctx context.Context) RegistryStorageUsageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryStorageUsageOutput)
}

// RegistryStorageUsageArrayInput is an input type that accepts RegistryStorageUsageArray and RegistryStorageUsageArrayOutput values.
// You can construct a concrete instance of `RegistryStorageUsageArrayInput` via:
//
//	RegistryStorageUsageArray{ RegistryStorageUsageArgs{...} }
type RegistryStorageUsageArrayInput interface {
	pulumi.Input

	ToRegistryStorageUsageArrayOutput() RegistryStorageUsageArrayOutput
	ToRegistryStorageUsageArrayOutputWithContext(context.Context) RegistryStorageUsageArrayOutput
}

type RegistryStorageUsageArray []RegistryStorageUsageInput

func (RegistryStorageUsageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryStorageUsage)(nil)).Elem()
}

func (i RegistryStorageUsageArray) ToRegistryStorageUsageArrayOutput() RegistryStorageUsageArrayOutput {
	return i.ToRegistryStorageUsageArrayOutputWithContext(context.Background())
}

func (i RegistryStorageUsageArray) ToRegistryStorageUsageArrayOutputWithContext(ctx context.Context) RegistryStorageUsageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryStorageUsageArrayOutput)
}

type RegistryStorageUsageOutput struct{ *pulumi.OutputState }

func (RegistryStorageUsageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryStorageUsage)(nil)).Elem()
}

func (o RegistryStorageUsageOutput) ToRegistryStorageUsageOutput() RegistryStorageUsageOutput {
	return o
}

func (o RegistryStorageUsageOutput) ToRegistryStorageUsageOutputWithContext(ctx context.Context) RegistryStorageUsageOutput {
	return o
}

func (o RegistryStorageUsageOutput) Bytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RegistryStorageUsage) *int { return v.Bytes }).(pulumi.IntPtrOutput)
}

func (o RegistryStorageUsageOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryStorageUsage) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

type RegistryStorageUsageArrayOutput struct{ *pulumi.OutputState }

func (RegistryStorageUsageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryStorageUsage)(nil)).Elem()
}

func (o RegistryStorageUsageArrayOutput) ToRegistryStorageUsageArrayOutput() RegistryStorageUsageArrayOutput {
	return o
}

func (o RegistryStorageUsageArrayOutput) ToRegistryStorageUsageArrayOutputWithContext(ctx context.Context) RegistryStorageUsageArrayOutput {
	return o
}

func (o RegistryStorageUsageArrayOutput) Index(i pulumi.IntInput) RegistryStorageUsageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryStorageUsage {
		return vs[0].([]RegistryStorageUsage)[vs[1].(int)]
	}).(RegistryStorageUsageOutput)
}

type RegistryTokenCredential struct {
	Password string `pulumi:"password"`
	Username string `pulumi:"username"`
}

// RegistryTokenCredentialInput is an input type that accepts RegistryTokenCredentialArgs and RegistryTokenCredentialOutput values.
// You can construct a concrete instance of `RegistryTokenCredentialInput` via:
//
//	RegistryTokenCredentialArgs{...}
type RegistryTokenCredentialInput interface {
	pulumi.Input

	ToRegistryTokenCredentialOutput() RegistryTokenCredentialOutput
	ToRegistryTokenCredentialOutputWithContext(context.Context) RegistryTokenCredentialOutput
}

type RegistryTokenCredentialArgs struct {
	Password pulumi.StringInput `pulumi:"password"`
	Username pulumi.StringInput `pulumi:"username"`
}

func (RegistryTokenCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryTokenCredential)(nil)).Elem()
}

func (i RegistryTokenCredentialArgs) ToRegistryTokenCredentialOutput() RegistryTokenCredentialOutput {
	return i.ToRegistryTokenCredentialOutputWithContext(context.Background())
}

func (i RegistryTokenCredentialArgs) ToRegistryTokenCredentialOutputWithContext(ctx context.Context) RegistryTokenCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryTokenCredentialOutput)
}

// RegistryTokenCredentialArrayInput is an input type that accepts RegistryTokenCredentialArray and RegistryTokenCredentialArrayOutput values.
// You can construct a concrete instance of `RegistryTokenCredentialArrayInput` via:
//
//	RegistryTokenCredentialArray{ RegistryTokenCredentialArgs{...} }
type RegistryTokenCredentialArrayInput interface {
	pulumi.Input

	ToRegistryTokenCredentialArrayOutput() RegistryTokenCredentialArrayOutput
	ToRegistryTokenCredentialArrayOutputWithContext(context.Context) RegistryTokenCredentialArrayOutput
}

type RegistryTokenCredentialArray []RegistryTokenCredentialInput

func (RegistryTokenCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryTokenCredential)(nil)).Elem()
}

func (i RegistryTokenCredentialArray) ToRegistryTokenCredentialArrayOutput() RegistryTokenCredentialArrayOutput {
	return i.ToRegistryTokenCredentialArrayOutputWithContext(context.Background())
}

func (i RegistryTokenCredentialArray) ToRegistryTokenCredentialArrayOutputWithContext(ctx context.Context) RegistryTokenCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryTokenCredentialArrayOutput)
}

type RegistryTokenCredentialOutput struct{ *pulumi.OutputState }

func (RegistryTokenCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryTokenCredential)(nil)).Elem()
}

func (o RegistryTokenCredentialOutput) ToRegistryTokenCredentialOutput() RegistryTokenCredentialOutput {
	return o
}

func (o RegistryTokenCredentialOutput) ToRegistryTokenCredentialOutputWithContext(ctx context.Context) RegistryTokenCredentialOutput {
	return o
}

func (o RegistryTokenCredentialOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryTokenCredential) string { return v.Password }).(pulumi.StringOutput)
}

func (o RegistryTokenCredentialOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryTokenCredential) string { return v.Username }).(pulumi.StringOutput)
}

type RegistryTokenCredentialArrayOutput struct{ *pulumi.OutputState }

func (RegistryTokenCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryTokenCredential)(nil)).Elem()
}

func (o RegistryTokenCredentialArrayOutput) ToRegistryTokenCredentialArrayOutput() RegistryTokenCredentialArrayOutput {
	return o
}

func (o RegistryTokenCredentialArrayOutput) ToRegistryTokenCredentialArrayOutputWithContext(ctx context.Context) RegistryTokenCredentialArrayOutput {
	return o
}

func (o RegistryTokenCredentialArrayOutput) Index(i pulumi.IntInput) RegistryTokenCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryTokenCredential {
		return vs[0].([]RegistryTokenCredential)[vs[1].(int)]
	}).(RegistryTokenCredentialOutput)
}

type RegistryTokenScope struct {
	// Example: ["pull", "push", "delete"]
	Actions []string `pulumi:"actions"`
	Name    string   `pulumi:"name"`
	Type    string   `pulumi:"type"`
}

// RegistryTokenScopeInput is an input type that accepts RegistryTokenScopeArgs and RegistryTokenScopeOutput values.
// You can construct a concrete instance of `RegistryTokenScopeInput` via:
//
//	RegistryTokenScopeArgs{...}
type RegistryTokenScopeInput interface {
	pulumi.Input

	ToRegistryTokenScopeOutput() RegistryTokenScopeOutput
	ToRegistryTokenScopeOutputWithContext(context.Context) RegistryTokenScopeOutput
}

type RegistryTokenScopeArgs struct {
	// Example: ["pull", "push", "delete"]
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	Name    pulumi.StringInput      `pulumi:"name"`
	Type    pulumi.StringInput      `pulumi:"type"`
}

func (RegistryTokenScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryTokenScope)(nil)).Elem()
}

func (i RegistryTokenScopeArgs) ToRegistryTokenScopeOutput() RegistryTokenScopeOutput {
	return i.ToRegistryTokenScopeOutputWithContext(context.Background())
}

func (i RegistryTokenScopeArgs) ToRegistryTokenScopeOutputWithContext(ctx context.Context) RegistryTokenScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryTokenScopeOutput)
}

// RegistryTokenScopeArrayInput is an input type that accepts RegistryTokenScopeArray and RegistryTokenScopeArrayOutput values.
// You can construct a concrete instance of `RegistryTokenScopeArrayInput` via:
//
//	RegistryTokenScopeArray{ RegistryTokenScopeArgs{...} }
type RegistryTokenScopeArrayInput interface {
	pulumi.Input

	ToRegistryTokenScopeArrayOutput() RegistryTokenScopeArrayOutput
	ToRegistryTokenScopeArrayOutputWithContext(context.Context) RegistryTokenScopeArrayOutput
}

type RegistryTokenScopeArray []RegistryTokenScopeInput

func (RegistryTokenScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryTokenScope)(nil)).Elem()
}

func (i RegistryTokenScopeArray) ToRegistryTokenScopeArrayOutput() RegistryTokenScopeArrayOutput {
	return i.ToRegistryTokenScopeArrayOutputWithContext(context.Background())
}

func (i RegistryTokenScopeArray) ToRegistryTokenScopeArrayOutputWithContext(ctx context.Context) RegistryTokenScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryTokenScopeArrayOutput)
}

type RegistryTokenScopeOutput struct{ *pulumi.OutputState }

func (RegistryTokenScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryTokenScope)(nil)).Elem()
}

func (o RegistryTokenScopeOutput) ToRegistryTokenScopeOutput() RegistryTokenScopeOutput {
	return o
}

func (o RegistryTokenScopeOutput) ToRegistryTokenScopeOutputWithContext(ctx context.Context) RegistryTokenScopeOutput {
	return o
}

// Example: ["pull", "push", "delete"]
func (o RegistryTokenScopeOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegistryTokenScope) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

func (o RegistryTokenScopeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryTokenScope) string { return v.Name }).(pulumi.StringOutput)
}

func (o RegistryTokenScopeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryTokenScope) string { return v.Type }).(pulumi.StringOutput)
}

type RegistryTokenScopeArrayOutput struct{ *pulumi.OutputState }

func (RegistryTokenScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryTokenScope)(nil)).Elem()
}

func (o RegistryTokenScopeArrayOutput) ToRegistryTokenScopeArrayOutput() RegistryTokenScopeArrayOutput {
	return o
}

func (o RegistryTokenScopeArrayOutput) ToRegistryTokenScopeArrayOutputWithContext(ctx context.Context) RegistryTokenScopeArrayOutput {
	return o
}

func (o RegistryTokenScopeArrayOutput) Index(i pulumi.IntInput) RegistryTokenScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryTokenScope {
		return vs[0].([]RegistryTokenScope)[vs[1].(int)]
	}).(RegistryTokenScopeOutput)
}

type GetRegistryFeature struct {
	VulnerabilityScanning bool `pulumi:"vulnerabilityScanning"`
}

// GetRegistryFeatureInput is an input type that accepts GetRegistryFeatureArgs and GetRegistryFeatureOutput values.
// You can construct a concrete instance of `GetRegistryFeatureInput` via:
//
//	GetRegistryFeatureArgs{...}
type GetRegistryFeatureInput interface {
	pulumi.Input

	ToGetRegistryFeatureOutput() GetRegistryFeatureOutput
	ToGetRegistryFeatureOutputWithContext(context.Context) GetRegistryFeatureOutput
}

type GetRegistryFeatureArgs struct {
	VulnerabilityScanning pulumi.BoolInput `pulumi:"vulnerabilityScanning"`
}

func (GetRegistryFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistryFeature)(nil)).Elem()
}

func (i GetRegistryFeatureArgs) ToGetRegistryFeatureOutput() GetRegistryFeatureOutput {
	return i.ToGetRegistryFeatureOutputWithContext(context.Background())
}

func (i GetRegistryFeatureArgs) ToGetRegistryFeatureOutputWithContext(ctx context.Context) GetRegistryFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegistryFeatureOutput)
}

// GetRegistryFeatureArrayInput is an input type that accepts GetRegistryFeatureArray and GetRegistryFeatureArrayOutput values.
// You can construct a concrete instance of `GetRegistryFeatureArrayInput` via:
//
//	GetRegistryFeatureArray{ GetRegistryFeatureArgs{...} }
type GetRegistryFeatureArrayInput interface {
	pulumi.Input

	ToGetRegistryFeatureArrayOutput() GetRegistryFeatureArrayOutput
	ToGetRegistryFeatureArrayOutputWithContext(context.Context) GetRegistryFeatureArrayOutput
}

type GetRegistryFeatureArray []GetRegistryFeatureInput

func (GetRegistryFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegistryFeature)(nil)).Elem()
}

func (i GetRegistryFeatureArray) ToGetRegistryFeatureArrayOutput() GetRegistryFeatureArrayOutput {
	return i.ToGetRegistryFeatureArrayOutputWithContext(context.Background())
}

func (i GetRegistryFeatureArray) ToGetRegistryFeatureArrayOutputWithContext(ctx context.Context) GetRegistryFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegistryFeatureArrayOutput)
}

type GetRegistryFeatureOutput struct{ *pulumi.OutputState }

func (GetRegistryFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistryFeature)(nil)).Elem()
}

func (o GetRegistryFeatureOutput) ToGetRegistryFeatureOutput() GetRegistryFeatureOutput {
	return o
}

func (o GetRegistryFeatureOutput) ToGetRegistryFeatureOutputWithContext(ctx context.Context) GetRegistryFeatureOutput {
	return o
}

func (o GetRegistryFeatureOutput) VulnerabilityScanning() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRegistryFeature) bool { return v.VulnerabilityScanning }).(pulumi.BoolOutput)
}

type GetRegistryFeatureArrayOutput struct{ *pulumi.OutputState }

func (GetRegistryFeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegistryFeature)(nil)).Elem()
}

func (o GetRegistryFeatureArrayOutput) ToGetRegistryFeatureArrayOutput() GetRegistryFeatureArrayOutput {
	return o
}

func (o GetRegistryFeatureArrayOutput) ToGetRegistryFeatureArrayOutputWithContext(ctx context.Context) GetRegistryFeatureArrayOutput {
	return o
}

func (o GetRegistryFeatureArrayOutput) Index(i pulumi.IntInput) GetRegistryFeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRegistryFeature {
		return vs[0].([]GetRegistryFeature)[vs[1].(int)]
	}).(GetRegistryFeatureOutput)
}

type GetRegistryGarbageCollectionSchedule struct {
	Days []string `pulumi:"days"`
	Time string   `pulumi:"time"`
}

// GetRegistryGarbageCollectionScheduleInput is an input type that accepts GetRegistryGarbageCollectionScheduleArgs and GetRegistryGarbageCollectionScheduleOutput values.
// You can construct a concrete instance of `GetRegistryGarbageCollectionScheduleInput` via:
//
//	GetRegistryGarbageCollectionScheduleArgs{...}
type GetRegistryGarbageCollectionScheduleInput interface {
	pulumi.Input

	ToGetRegistryGarbageCollectionScheduleOutput() GetRegistryGarbageCollectionScheduleOutput
	ToGetRegistryGarbageCollectionScheduleOutputWithContext(context.Context) GetRegistryGarbageCollectionScheduleOutput
}

type GetRegistryGarbageCollectionScheduleArgs struct {
	Days pulumi.StringArrayInput `pulumi:"days"`
	Time pulumi.StringInput      `pulumi:"time"`
}

func (GetRegistryGarbageCollectionScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistryGarbageCollectionSchedule)(nil)).Elem()
}

func (i GetRegistryGarbageCollectionScheduleArgs) ToGetRegistryGarbageCollectionScheduleOutput() GetRegistryGarbageCollectionScheduleOutput {
	return i.ToGetRegistryGarbageCollectionScheduleOutputWithContext(context.Background())
}

func (i GetRegistryGarbageCollectionScheduleArgs) ToGetRegistryGarbageCollectionScheduleOutputWithContext(ctx context.Context) GetRegistryGarbageCollectionScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegistryGarbageCollectionScheduleOutput)
}

// GetRegistryGarbageCollectionScheduleArrayInput is an input type that accepts GetRegistryGarbageCollectionScheduleArray and GetRegistryGarbageCollectionScheduleArrayOutput values.
// You can construct a concrete instance of `GetRegistryGarbageCollectionScheduleArrayInput` via:
//
//	GetRegistryGarbageCollectionScheduleArray{ GetRegistryGarbageCollectionScheduleArgs{...} }
type GetRegistryGarbageCollectionScheduleArrayInput interface {
	pulumi.Input

	ToGetRegistryGarbageCollectionScheduleArrayOutput() GetRegistryGarbageCollectionScheduleArrayOutput
	ToGetRegistryGarbageCollectionScheduleArrayOutputWithContext(context.Context) GetRegistryGarbageCollectionScheduleArrayOutput
}

type GetRegistryGarbageCollectionScheduleArray []GetRegistryGarbageCollectionScheduleInput

func (GetRegistryGarbageCollectionScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegistryGarbageCollectionSchedule)(nil)).Elem()
}

func (i GetRegistryGarbageCollectionScheduleArray) ToGetRegistryGarbageCollectionScheduleArrayOutput() GetRegistryGarbageCollectionScheduleArrayOutput {
	return i.ToGetRegistryGarbageCollectionScheduleArrayOutputWithContext(context.Background())
}

func (i GetRegistryGarbageCollectionScheduleArray) ToGetRegistryGarbageCollectionScheduleArrayOutputWithContext(ctx context.Context) GetRegistryGarbageCollectionScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegistryGarbageCollectionScheduleArrayOutput)
}

type GetRegistryGarbageCollectionScheduleOutput struct{ *pulumi.OutputState }

func (GetRegistryGarbageCollectionScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistryGarbageCollectionSchedule)(nil)).Elem()
}

func (o GetRegistryGarbageCollectionScheduleOutput) ToGetRegistryGarbageCollectionScheduleOutput() GetRegistryGarbageCollectionScheduleOutput {
	return o
}

func (o GetRegistryGarbageCollectionScheduleOutput) ToGetRegistryGarbageCollectionScheduleOutputWithContext(ctx context.Context) GetRegistryGarbageCollectionScheduleOutput {
	return o
}

func (o GetRegistryGarbageCollectionScheduleOutput) Days() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRegistryGarbageCollectionSchedule) []string { return v.Days }).(pulumi.StringArrayOutput)
}

func (o GetRegistryGarbageCollectionScheduleOutput) Time() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegistryGarbageCollectionSchedule) string { return v.Time }).(pulumi.StringOutput)
}

type GetRegistryGarbageCollectionScheduleArrayOutput struct{ *pulumi.OutputState }

func (GetRegistryGarbageCollectionScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegistryGarbageCollectionSchedule)(nil)).Elem()
}

func (o GetRegistryGarbageCollectionScheduleArrayOutput) ToGetRegistryGarbageCollectionScheduleArrayOutput() GetRegistryGarbageCollectionScheduleArrayOutput {
	return o
}

func (o GetRegistryGarbageCollectionScheduleArrayOutput) ToGetRegistryGarbageCollectionScheduleArrayOutputWithContext(ctx context.Context) GetRegistryGarbageCollectionScheduleArrayOutput {
	return o
}

func (o GetRegistryGarbageCollectionScheduleArrayOutput) Index(i pulumi.IntInput) GetRegistryGarbageCollectionScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRegistryGarbageCollectionSchedule {
		return vs[0].([]GetRegistryGarbageCollectionSchedule)[vs[1].(int)]
	}).(GetRegistryGarbageCollectionScheduleOutput)
}

type GetRegistryMaintenanceWindow struct {
	Days []string `pulumi:"days"`
	Time string   `pulumi:"time"`
}

// GetRegistryMaintenanceWindowInput is an input type that accepts GetRegistryMaintenanceWindowArgs and GetRegistryMaintenanceWindowOutput values.
// You can construct a concrete instance of `GetRegistryMaintenanceWindowInput` via:
//
//	GetRegistryMaintenanceWindowArgs{...}
type GetRegistryMaintenanceWindowInput interface {
	pulumi.Input

	ToGetRegistryMaintenanceWindowOutput() GetRegistryMaintenanceWindowOutput
	ToGetRegistryMaintenanceWindowOutputWithContext(context.Context) GetRegistryMaintenanceWindowOutput
}

type GetRegistryMaintenanceWindowArgs struct {
	Days pulumi.StringArrayInput `pulumi:"days"`
	Time pulumi.StringInput      `pulumi:"time"`
}

func (GetRegistryMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistryMaintenanceWindow)(nil)).Elem()
}

func (i GetRegistryMaintenanceWindowArgs) ToGetRegistryMaintenanceWindowOutput() GetRegistryMaintenanceWindowOutput {
	return i.ToGetRegistryMaintenanceWindowOutputWithContext(context.Background())
}

func (i GetRegistryMaintenanceWindowArgs) ToGetRegistryMaintenanceWindowOutputWithContext(ctx context.Context) GetRegistryMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegistryMaintenanceWindowOutput)
}

// GetRegistryMaintenanceWindowArrayInput is an input type that accepts GetRegistryMaintenanceWindowArray and GetRegistryMaintenanceWindowArrayOutput values.
// You can construct a concrete instance of `GetRegistryMaintenanceWindowArrayInput` via:
//
//	GetRegistryMaintenanceWindowArray{ GetRegistryMaintenanceWindowArgs{...} }
type GetRegistryMaintenanceWindowArrayInput interface {
	pulumi.Input

	ToGetRegistryMaintenanceWindowArrayOutput() GetRegistryMaintenanceWindowArrayOutput
	ToGetRegistryMaintenanceWindowArrayOutputWithContext(context.Context) GetRegistryMaintenanceWindowArrayOutput
}

type GetRegistryMaintenanceWindowArray []GetRegistryMaintenanceWindowInput

func (GetRegistryMaintenanceWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegistryMaintenanceWindow)(nil)).Elem()
}

func (i GetRegistryMaintenanceWindowArray) ToGetRegistryMaintenanceWindowArrayOutput() GetRegistryMaintenanceWindowArrayOutput {
	return i.ToGetRegistryMaintenanceWindowArrayOutputWithContext(context.Background())
}

func (i GetRegistryMaintenanceWindowArray) ToGetRegistryMaintenanceWindowArrayOutputWithContext(ctx context.Context) GetRegistryMaintenanceWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegistryMaintenanceWindowArrayOutput)
}

type GetRegistryMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (GetRegistryMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistryMaintenanceWindow)(nil)).Elem()
}

func (o GetRegistryMaintenanceWindowOutput) ToGetRegistryMaintenanceWindowOutput() GetRegistryMaintenanceWindowOutput {
	return o
}

func (o GetRegistryMaintenanceWindowOutput) ToGetRegistryMaintenanceWindowOutputWithContext(ctx context.Context) GetRegistryMaintenanceWindowOutput {
	return o
}

func (o GetRegistryMaintenanceWindowOutput) Days() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRegistryMaintenanceWindow) []string { return v.Days }).(pulumi.StringArrayOutput)
}

func (o GetRegistryMaintenanceWindowOutput) Time() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegistryMaintenanceWindow) string { return v.Time }).(pulumi.StringOutput)
}

type GetRegistryMaintenanceWindowArrayOutput struct{ *pulumi.OutputState }

func (GetRegistryMaintenanceWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegistryMaintenanceWindow)(nil)).Elem()
}

func (o GetRegistryMaintenanceWindowArrayOutput) ToGetRegistryMaintenanceWindowArrayOutput() GetRegistryMaintenanceWindowArrayOutput {
	return o
}

func (o GetRegistryMaintenanceWindowArrayOutput) ToGetRegistryMaintenanceWindowArrayOutputWithContext(ctx context.Context) GetRegistryMaintenanceWindowArrayOutput {
	return o
}

func (o GetRegistryMaintenanceWindowArrayOutput) Index(i pulumi.IntInput) GetRegistryMaintenanceWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRegistryMaintenanceWindow {
		return vs[0].([]GetRegistryMaintenanceWindow)[vs[1].(int)]
	}).(GetRegistryMaintenanceWindowOutput)
}

type GetRegistryStorageUsage struct {
	Bytes     int    `pulumi:"bytes"`
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetRegistryStorageUsageInput is an input type that accepts GetRegistryStorageUsageArgs and GetRegistryStorageUsageOutput values.
// You can construct a concrete instance of `GetRegistryStorageUsageInput` via:
//
//	GetRegistryStorageUsageArgs{...}
type GetRegistryStorageUsageInput interface {
	pulumi.Input

	ToGetRegistryStorageUsageOutput() GetRegistryStorageUsageOutput
	ToGetRegistryStorageUsageOutputWithContext(context.Context) GetRegistryStorageUsageOutput
}

type GetRegistryStorageUsageArgs struct {
	Bytes     pulumi.IntInput    `pulumi:"bytes"`
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetRegistryStorageUsageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistryStorageUsage)(nil)).Elem()
}

func (i GetRegistryStorageUsageArgs) ToGetRegistryStorageUsageOutput() GetRegistryStorageUsageOutput {
	return i.ToGetRegistryStorageUsageOutputWithContext(context.Background())
}

func (i GetRegistryStorageUsageArgs) ToGetRegistryStorageUsageOutputWithContext(ctx context.Context) GetRegistryStorageUsageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegistryStorageUsageOutput)
}

// GetRegistryStorageUsageArrayInput is an input type that accepts GetRegistryStorageUsageArray and GetRegistryStorageUsageArrayOutput values.
// You can construct a concrete instance of `GetRegistryStorageUsageArrayInput` via:
//
//	GetRegistryStorageUsageArray{ GetRegistryStorageUsageArgs{...} }
type GetRegistryStorageUsageArrayInput interface {
	pulumi.Input

	ToGetRegistryStorageUsageArrayOutput() GetRegistryStorageUsageArrayOutput
	ToGetRegistryStorageUsageArrayOutputWithContext(context.Context) GetRegistryStorageUsageArrayOutput
}

type GetRegistryStorageUsageArray []GetRegistryStorageUsageInput

func (GetRegistryStorageUsageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegistryStorageUsage)(nil)).Elem()
}

func (i GetRegistryStorageUsageArray) ToGetRegistryStorageUsageArrayOutput() GetRegistryStorageUsageArrayOutput {
	return i.ToGetRegistryStorageUsageArrayOutputWithContext(context.Background())
}

func (i GetRegistryStorageUsageArray) ToGetRegistryStorageUsageArrayOutputWithContext(ctx context.Context) GetRegistryStorageUsageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegistryStorageUsageArrayOutput)
}

type GetRegistryStorageUsageOutput struct{ *pulumi.OutputState }

func (GetRegistryStorageUsageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistryStorageUsage)(nil)).Elem()
}

func (o GetRegistryStorageUsageOutput) ToGetRegistryStorageUsageOutput() GetRegistryStorageUsageOutput {
	return o
}

func (o GetRegistryStorageUsageOutput) ToGetRegistryStorageUsageOutputWithContext(ctx context.Context) GetRegistryStorageUsageOutput {
	return o
}

func (o GetRegistryStorageUsageOutput) Bytes() pulumi.IntOutput {
	return o.ApplyT(func(v GetRegistryStorageUsage) int { return v.Bytes }).(pulumi.IntOutput)
}

func (o GetRegistryStorageUsageOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegistryStorageUsage) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetRegistryStorageUsageArrayOutput struct{ *pulumi.OutputState }

func (GetRegistryStorageUsageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegistryStorageUsage)(nil)).Elem()
}

func (o GetRegistryStorageUsageArrayOutput) ToGetRegistryStorageUsageArrayOutput() GetRegistryStorageUsageArrayOutput {
	return o
}

func (o GetRegistryStorageUsageArrayOutput) ToGetRegistryStorageUsageArrayOutputWithContext(ctx context.Context) GetRegistryStorageUsageArrayOutput {
	return o
}

func (o GetRegistryStorageUsageArrayOutput) Index(i pulumi.IntInput) GetRegistryStorageUsageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRegistryStorageUsage {
		return vs[0].([]GetRegistryStorageUsage)[vs[1].(int)]
	}).(GetRegistryStorageUsageOutput)
}

type GetRegistryTokenCredential struct {
	Username string `pulumi:"username"`
}

// GetRegistryTokenCredentialInput is an input type that accepts GetRegistryTokenCredentialArgs and GetRegistryTokenCredentialOutput values.
// You can construct a concrete instance of `GetRegistryTokenCredentialInput` via:
//
//	GetRegistryTokenCredentialArgs{...}
type GetRegistryTokenCredentialInput interface {
	pulumi.Input

	ToGetRegistryTokenCredentialOutput() GetRegistryTokenCredentialOutput
	ToGetRegistryTokenCredentialOutputWithContext(context.Context) GetRegistryTokenCredentialOutput
}

type GetRegistryTokenCredentialArgs struct {
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetRegistryTokenCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistryTokenCredential)(nil)).Elem()
}

func (i GetRegistryTokenCredentialArgs) ToGetRegistryTokenCredentialOutput() GetRegistryTokenCredentialOutput {
	return i.ToGetRegistryTokenCredentialOutputWithContext(context.Background())
}

func (i GetRegistryTokenCredentialArgs) ToGetRegistryTokenCredentialOutputWithContext(ctx context.Context) GetRegistryTokenCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegistryTokenCredentialOutput)
}

// GetRegistryTokenCredentialArrayInput is an input type that accepts GetRegistryTokenCredentialArray and GetRegistryTokenCredentialArrayOutput values.
// You can construct a concrete instance of `GetRegistryTokenCredentialArrayInput` via:
//
//	GetRegistryTokenCredentialArray{ GetRegistryTokenCredentialArgs{...} }
type GetRegistryTokenCredentialArrayInput interface {
	pulumi.Input

	ToGetRegistryTokenCredentialArrayOutput() GetRegistryTokenCredentialArrayOutput
	ToGetRegistryTokenCredentialArrayOutputWithContext(context.Context) GetRegistryTokenCredentialArrayOutput
}

type GetRegistryTokenCredentialArray []GetRegistryTokenCredentialInput

func (GetRegistryTokenCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegistryTokenCredential)(nil)).Elem()
}

func (i GetRegistryTokenCredentialArray) ToGetRegistryTokenCredentialArrayOutput() GetRegistryTokenCredentialArrayOutput {
	return i.ToGetRegistryTokenCredentialArrayOutputWithContext(context.Background())
}

func (i GetRegistryTokenCredentialArray) ToGetRegistryTokenCredentialArrayOutputWithContext(ctx context.Context) GetRegistryTokenCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegistryTokenCredentialArrayOutput)
}

type GetRegistryTokenCredentialOutput struct{ *pulumi.OutputState }

func (GetRegistryTokenCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistryTokenCredential)(nil)).Elem()
}

func (o GetRegistryTokenCredentialOutput) ToGetRegistryTokenCredentialOutput() GetRegistryTokenCredentialOutput {
	return o
}

func (o GetRegistryTokenCredentialOutput) ToGetRegistryTokenCredentialOutputWithContext(ctx context.Context) GetRegistryTokenCredentialOutput {
	return o
}

func (o GetRegistryTokenCredentialOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegistryTokenCredential) string { return v.Username }).(pulumi.StringOutput)
}

type GetRegistryTokenCredentialArrayOutput struct{ *pulumi.OutputState }

func (GetRegistryTokenCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegistryTokenCredential)(nil)).Elem()
}

func (o GetRegistryTokenCredentialArrayOutput) ToGetRegistryTokenCredentialArrayOutput() GetRegistryTokenCredentialArrayOutput {
	return o
}

func (o GetRegistryTokenCredentialArrayOutput) ToGetRegistryTokenCredentialArrayOutputWithContext(ctx context.Context) GetRegistryTokenCredentialArrayOutput {
	return o
}

func (o GetRegistryTokenCredentialArrayOutput) Index(i pulumi.IntInput) GetRegistryTokenCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRegistryTokenCredential {
		return vs[0].([]GetRegistryTokenCredential)[vs[1].(int)]
	}).(GetRegistryTokenCredentialOutput)
}

type GetRegistryTokenScope struct {
	Actions []string `pulumi:"actions"`
	Name    string   `pulumi:"name"`
	Type    string   `pulumi:"type"`
}

// GetRegistryTokenScopeInput is an input type that accepts GetRegistryTokenScopeArgs and GetRegistryTokenScopeOutput values.
// You can construct a concrete instance of `GetRegistryTokenScopeInput` via:
//
//	GetRegistryTokenScopeArgs{...}
type GetRegistryTokenScopeInput interface {
	pulumi.Input

	ToGetRegistryTokenScopeOutput() GetRegistryTokenScopeOutput
	ToGetRegistryTokenScopeOutputWithContext(context.Context) GetRegistryTokenScopeOutput
}

type GetRegistryTokenScopeArgs struct {
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	Name    pulumi.StringInput      `pulumi:"name"`
	Type    pulumi.StringInput      `pulumi:"type"`
}

func (GetRegistryTokenScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistryTokenScope)(nil)).Elem()
}

func (i GetRegistryTokenScopeArgs) ToGetRegistryTokenScopeOutput() GetRegistryTokenScopeOutput {
	return i.ToGetRegistryTokenScopeOutputWithContext(context.Background())
}

func (i GetRegistryTokenScopeArgs) ToGetRegistryTokenScopeOutputWithContext(ctx context.Context) GetRegistryTokenScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegistryTokenScopeOutput)
}

// GetRegistryTokenScopeArrayInput is an input type that accepts GetRegistryTokenScopeArray and GetRegistryTokenScopeArrayOutput values.
// You can construct a concrete instance of `GetRegistryTokenScopeArrayInput` via:
//
//	GetRegistryTokenScopeArray{ GetRegistryTokenScopeArgs{...} }
type GetRegistryTokenScopeArrayInput interface {
	pulumi.Input

	ToGetRegistryTokenScopeArrayOutput() GetRegistryTokenScopeArrayOutput
	ToGetRegistryTokenScopeArrayOutputWithContext(context.Context) GetRegistryTokenScopeArrayOutput
}

type GetRegistryTokenScopeArray []GetRegistryTokenScopeInput

func (GetRegistryTokenScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegistryTokenScope)(nil)).Elem()
}

func (i GetRegistryTokenScopeArray) ToGetRegistryTokenScopeArrayOutput() GetRegistryTokenScopeArrayOutput {
	return i.ToGetRegistryTokenScopeArrayOutputWithContext(context.Background())
}

func (i GetRegistryTokenScopeArray) ToGetRegistryTokenScopeArrayOutputWithContext(ctx context.Context) GetRegistryTokenScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegistryTokenScopeArrayOutput)
}

type GetRegistryTokenScopeOutput struct{ *pulumi.OutputState }

func (GetRegistryTokenScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistryTokenScope)(nil)).Elem()
}

func (o GetRegistryTokenScopeOutput) ToGetRegistryTokenScopeOutput() GetRegistryTokenScopeOutput {
	return o
}

func (o GetRegistryTokenScopeOutput) ToGetRegistryTokenScopeOutputWithContext(ctx context.Context) GetRegistryTokenScopeOutput {
	return o
}

func (o GetRegistryTokenScopeOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRegistryTokenScope) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

func (o GetRegistryTokenScopeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegistryTokenScope) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetRegistryTokenScopeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegistryTokenScope) string { return v.Type }).(pulumi.StringOutput)
}

type GetRegistryTokenScopeArrayOutput struct{ *pulumi.OutputState }

func (GetRegistryTokenScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegistryTokenScope)(nil)).Elem()
}

func (o GetRegistryTokenScopeArrayOutput) ToGetRegistryTokenScopeArrayOutput() GetRegistryTokenScopeArrayOutput {
	return o
}

func (o GetRegistryTokenScopeArrayOutput) ToGetRegistryTokenScopeArrayOutputWithContext(ctx context.Context) GetRegistryTokenScopeArrayOutput {
	return o
}

func (o GetRegistryTokenScopeArrayOutput) Index(i pulumi.IntInput) GetRegistryTokenScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRegistryTokenScope {
		return vs[0].([]GetRegistryTokenScope)[vs[1].(int)]
	}).(GetRegistryTokenScopeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryFeaturesInput)(nil)).Elem(), RegistryFeaturesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryFeaturesPtrInput)(nil)).Elem(), RegistryFeaturesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryGarbageCollectionScheduleInput)(nil)).Elem(), RegistryGarbageCollectionScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryGarbageCollectionSchedulePtrInput)(nil)).Elem(), RegistryGarbageCollectionScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryStorageUsageInput)(nil)).Elem(), RegistryStorageUsageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryStorageUsageArrayInput)(nil)).Elem(), RegistryStorageUsageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryTokenCredentialInput)(nil)).Elem(), RegistryTokenCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryTokenCredentialArrayInput)(nil)).Elem(), RegistryTokenCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryTokenScopeInput)(nil)).Elem(), RegistryTokenScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryTokenScopeArrayInput)(nil)).Elem(), RegistryTokenScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegistryFeatureInput)(nil)).Elem(), GetRegistryFeatureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegistryFeatureArrayInput)(nil)).Elem(), GetRegistryFeatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegistryGarbageCollectionScheduleInput)(nil)).Elem(), GetRegistryGarbageCollectionScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegistryGarbageCollectionScheduleArrayInput)(nil)).Elem(), GetRegistryGarbageCollectionScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegistryMaintenanceWindowInput)(nil)).Elem(), GetRegistryMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegistryMaintenanceWindowArrayInput)(nil)).Elem(), GetRegistryMaintenanceWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegistryStorageUsageInput)(nil)).Elem(), GetRegistryStorageUsageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegistryStorageUsageArrayInput)(nil)).Elem(), GetRegistryStorageUsageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegistryTokenCredentialInput)(nil)).Elem(), GetRegistryTokenCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegistryTokenCredentialArrayInput)(nil)).Elem(), GetRegistryTokenCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegistryTokenScopeInput)(nil)).Elem(), GetRegistryTokenScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegistryTokenScopeArrayInput)(nil)).Elem(), GetRegistryTokenScopeArray{})
	pulumi.RegisterOutputType(RegistryFeaturesOutput{})
	pulumi.RegisterOutputType(RegistryFeaturesPtrOutput{})
	pulumi.RegisterOutputType(RegistryGarbageCollectionScheduleOutput{})
	pulumi.RegisterOutputType(RegistryGarbageCollectionSchedulePtrOutput{})
	pulumi.RegisterOutputType(RegistryStorageUsageOutput{})
	pulumi.RegisterOutputType(RegistryStorageUsageArrayOutput{})
	pulumi.RegisterOutputType(RegistryTokenCredentialOutput{})
	pulumi.RegisterOutputType(RegistryTokenCredentialArrayOutput{})
	pulumi.RegisterOutputType(RegistryTokenScopeOutput{})
	pulumi.RegisterOutputType(RegistryTokenScopeArrayOutput{})
	pulumi.RegisterOutputType(GetRegistryFeatureOutput{})
	pulumi.RegisterOutputType(GetRegistryFeatureArrayOutput{})
	pulumi.RegisterOutputType(GetRegistryGarbageCollectionScheduleOutput{})
	pulumi.RegisterOutputType(GetRegistryGarbageCollectionScheduleArrayOutput{})
	pulumi.RegisterOutputType(GetRegistryMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(GetRegistryMaintenanceWindowArrayOutput{})
	pulumi.RegisterOutputType(GetRegistryStorageUsageOutput{})
	pulumi.RegisterOutputType(GetRegistryStorageUsageArrayOutput{})
	pulumi.RegisterOutputType(GetRegistryTokenCredentialOutput{})
	pulumi.RegisterOutputType(GetRegistryTokenCredentialArrayOutput{})
	pulumi.RegisterOutputType(GetRegistryTokenScopeOutput{})
	pulumi.RegisterOutputType(GetRegistryTokenScopeArrayOutput{})
}
