// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package creg

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an **Container Registry** on IonosCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/creg"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := creg.NewRegistry(ctx, "example", &creg.RegistryArgs{
//				ApiSubnetAllowLists: pulumi.StringArray{
//					pulumi.String("1.2.3.4/32"),
//				},
//				GarbageCollectionSchedule: &creg.RegistryGarbageCollectionScheduleArgs{
//					Days: pulumi.StringArray{
//						pulumi.String("Monday"),
//						pulumi.String("Tuesday"),
//					},
//					Time: pulumi.String("05:19:00+00:00"),
//				},
//				Location: pulumi.String("de/fra"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Resource Container Registry can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import ionoscloud:creg/registry:Registry mycr {container_registry uuid}
// ```
type Registry struct {
	pulumi.CustomResourceState

	// [list] The subnet CIDRs that are allowed to connect to the registry.  Specify "a.b.c.d/32" for an individual IP address. __Note__: If this list is empty or not set, there are no restrictions.
	ApiSubnetAllowLists pulumi.StringArrayOutput `pulumi:"apiSubnetAllowLists"`
	// [Map]
	Features RegistryFeaturesOutput `pulumi:"features"`
	// [Map]
	GarbageCollectionSchedule RegistryGarbageCollectionScheduleOutput `pulumi:"garbageCollectionSchedule"`
	Hostname                  pulumi.StringOutput                     `pulumi:"hostname"`
	// [string] Immutable, update forces re-creation of the resource.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the container registry. Immutable, update forces re-creation of the resource.
	Name          pulumi.StringOutput             `pulumi:"name"`
	StorageUsages RegistryStorageUsageArrayOutput `pulumi:"storageUsages"`
}

// NewRegistry registers a new resource with the given unique name, arguments, and options.
func NewRegistry(ctx *pulumi.Context,
	name string, args *RegistryArgs, opts ...pulumi.ResourceOption) (*Registry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Registry
	err := ctx.RegisterResource("ionoscloud:creg/registry:Registry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegistry gets an existing Registry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegistry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegistryState, opts ...pulumi.ResourceOption) (*Registry, error) {
	var resource Registry
	err := ctx.ReadResource("ionoscloud:creg/registry:Registry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Registry resources.
type registryState struct {
	// [list] The subnet CIDRs that are allowed to connect to the registry.  Specify "a.b.c.d/32" for an individual IP address. __Note__: If this list is empty or not set, there are no restrictions.
	ApiSubnetAllowLists []string `pulumi:"apiSubnetAllowLists"`
	// [Map]
	Features *RegistryFeatures `pulumi:"features"`
	// [Map]
	GarbageCollectionSchedule *RegistryGarbageCollectionSchedule `pulumi:"garbageCollectionSchedule"`
	Hostname                  *string                            `pulumi:"hostname"`
	// [string] Immutable, update forces re-creation of the resource.
	Location *string `pulumi:"location"`
	// The name of the container registry. Immutable, update forces re-creation of the resource.
	Name          *string                `pulumi:"name"`
	StorageUsages []RegistryStorageUsage `pulumi:"storageUsages"`
}

type RegistryState struct {
	// [list] The subnet CIDRs that are allowed to connect to the registry.  Specify "a.b.c.d/32" for an individual IP address. __Note__: If this list is empty or not set, there are no restrictions.
	ApiSubnetAllowLists pulumi.StringArrayInput
	// [Map]
	Features RegistryFeaturesPtrInput
	// [Map]
	GarbageCollectionSchedule RegistryGarbageCollectionSchedulePtrInput
	Hostname                  pulumi.StringPtrInput
	// [string] Immutable, update forces re-creation of the resource.
	Location pulumi.StringPtrInput
	// The name of the container registry. Immutable, update forces re-creation of the resource.
	Name          pulumi.StringPtrInput
	StorageUsages RegistryStorageUsageArrayInput
}

func (RegistryState) ElementType() reflect.Type {
	return reflect.TypeOf((*registryState)(nil)).Elem()
}

type registryArgs struct {
	// [list] The subnet CIDRs that are allowed to connect to the registry.  Specify "a.b.c.d/32" for an individual IP address. __Note__: If this list is empty or not set, there are no restrictions.
	ApiSubnetAllowLists []string `pulumi:"apiSubnetAllowLists"`
	// [Map]
	Features *RegistryFeatures `pulumi:"features"`
	// [Map]
	GarbageCollectionSchedule *RegistryGarbageCollectionSchedule `pulumi:"garbageCollectionSchedule"`
	// [string] Immutable, update forces re-creation of the resource.
	Location string `pulumi:"location"`
	// The name of the container registry. Immutable, update forces re-creation of the resource.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Registry resource.
type RegistryArgs struct {
	// [list] The subnet CIDRs that are allowed to connect to the registry.  Specify "a.b.c.d/32" for an individual IP address. __Note__: If this list is empty or not set, there are no restrictions.
	ApiSubnetAllowLists pulumi.StringArrayInput
	// [Map]
	Features RegistryFeaturesPtrInput
	// [Map]
	GarbageCollectionSchedule RegistryGarbageCollectionSchedulePtrInput
	// [string] Immutable, update forces re-creation of the resource.
	Location pulumi.StringInput
	// The name of the container registry. Immutable, update forces re-creation of the resource.
	Name pulumi.StringPtrInput
}

func (RegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registryArgs)(nil)).Elem()
}

type RegistryInput interface {
	pulumi.Input

	ToRegistryOutput() RegistryOutput
	ToRegistryOutputWithContext(ctx context.Context) RegistryOutput
}

func (*Registry) ElementType() reflect.Type {
	return reflect.TypeOf((**Registry)(nil)).Elem()
}

func (i *Registry) ToRegistryOutput() RegistryOutput {
	return i.ToRegistryOutputWithContext(context.Background())
}

func (i *Registry) ToRegistryOutputWithContext(ctx context.Context) RegistryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryOutput)
}

// RegistryArrayInput is an input type that accepts RegistryArray and RegistryArrayOutput values.
// You can construct a concrete instance of `RegistryArrayInput` via:
//
//	RegistryArray{ RegistryArgs{...} }
type RegistryArrayInput interface {
	pulumi.Input

	ToRegistryArrayOutput() RegistryArrayOutput
	ToRegistryArrayOutputWithContext(context.Context) RegistryArrayOutput
}

type RegistryArray []RegistryInput

func (RegistryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Registry)(nil)).Elem()
}

func (i RegistryArray) ToRegistryArrayOutput() RegistryArrayOutput {
	return i.ToRegistryArrayOutputWithContext(context.Background())
}

func (i RegistryArray) ToRegistryArrayOutputWithContext(ctx context.Context) RegistryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryArrayOutput)
}

// RegistryMapInput is an input type that accepts RegistryMap and RegistryMapOutput values.
// You can construct a concrete instance of `RegistryMapInput` via:
//
//	RegistryMap{ "key": RegistryArgs{...} }
type RegistryMapInput interface {
	pulumi.Input

	ToRegistryMapOutput() RegistryMapOutput
	ToRegistryMapOutputWithContext(context.Context) RegistryMapOutput
}

type RegistryMap map[string]RegistryInput

func (RegistryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Registry)(nil)).Elem()
}

func (i RegistryMap) ToRegistryMapOutput() RegistryMapOutput {
	return i.ToRegistryMapOutputWithContext(context.Background())
}

func (i RegistryMap) ToRegistryMapOutputWithContext(ctx context.Context) RegistryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryMapOutput)
}

type RegistryOutput struct{ *pulumi.OutputState }

func (RegistryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Registry)(nil)).Elem()
}

func (o RegistryOutput) ToRegistryOutput() RegistryOutput {
	return o
}

func (o RegistryOutput) ToRegistryOutputWithContext(ctx context.Context) RegistryOutput {
	return o
}

// [list] The subnet CIDRs that are allowed to connect to the registry.  Specify "a.b.c.d/32" for an individual IP address. __Note__: If this list is empty or not set, there are no restrictions.
func (o RegistryOutput) ApiSubnetAllowLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Registry) pulumi.StringArrayOutput { return v.ApiSubnetAllowLists }).(pulumi.StringArrayOutput)
}

// [Map]
func (o RegistryOutput) Features() RegistryFeaturesOutput {
	return o.ApplyT(func(v *Registry) RegistryFeaturesOutput { return v.Features }).(RegistryFeaturesOutput)
}

// [Map]
func (o RegistryOutput) GarbageCollectionSchedule() RegistryGarbageCollectionScheduleOutput {
	return o.ApplyT(func(v *Registry) RegistryGarbageCollectionScheduleOutput { return v.GarbageCollectionSchedule }).(RegistryGarbageCollectionScheduleOutput)
}

func (o RegistryOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *Registry) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// [string] Immutable, update forces re-creation of the resource.
func (o RegistryOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Registry) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the container registry. Immutable, update forces re-creation of the resource.
func (o RegistryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Registry) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RegistryOutput) StorageUsages() RegistryStorageUsageArrayOutput {
	return o.ApplyT(func(v *Registry) RegistryStorageUsageArrayOutput { return v.StorageUsages }).(RegistryStorageUsageArrayOutput)
}

type RegistryArrayOutput struct{ *pulumi.OutputState }

func (RegistryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Registry)(nil)).Elem()
}

func (o RegistryArrayOutput) ToRegistryArrayOutput() RegistryArrayOutput {
	return o
}

func (o RegistryArrayOutput) ToRegistryArrayOutputWithContext(ctx context.Context) RegistryArrayOutput {
	return o
}

func (o RegistryArrayOutput) Index(i pulumi.IntInput) RegistryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Registry {
		return vs[0].([]*Registry)[vs[1].(int)]
	}).(RegistryOutput)
}

type RegistryMapOutput struct{ *pulumi.OutputState }

func (RegistryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Registry)(nil)).Elem()
}

func (o RegistryMapOutput) ToRegistryMapOutput() RegistryMapOutput {
	return o
}

func (o RegistryMapOutput) ToRegistryMapOutputWithContext(ctx context.Context) RegistryMapOutput {
	return o
}

func (o RegistryMapOutput) MapIndex(k pulumi.StringInput) RegistryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Registry {
		return vs[0].(map[string]*Registry)[vs[1].(string)]
	}).(RegistryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryInput)(nil)).Elem(), &Registry{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryArrayInput)(nil)).Elem(), RegistryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryMapInput)(nil)).Elem(), RegistryMap{})
	pulumi.RegisterOutputType(RegistryOutput{})
	pulumi.RegisterOutputType(RegistryArrayOutput{})
	pulumi.RegisterOutputType(RegistryMapOutput{})
}
