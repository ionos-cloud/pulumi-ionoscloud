// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **Network Load Balancer data source** can be used to search for and return existing network load balancers.
// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
// When this happens, please refine your search string so that it is specific enough to return only one result.
//
// ## Example Usage
//
// ### By Name
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ionoscloud.LookupNetworkloadbalancer(ctx, &ionoscloud.LookupNetworkloadbalancerArgs{
//				DatacenterId: ionoscloud_datacenter.Example.Id,
//				Name:         pulumi.StringRef("Network Load Balancer Name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupNetworkloadbalancer(ctx *pulumi.Context, args *LookupNetworkloadbalancerArgs, opts ...pulumi.InvokeOption) (*LookupNetworkloadbalancerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNetworkloadbalancerResult
	err := ctx.Invoke("ionoscloud:index/getNetworkloadbalancer:getNetworkloadbalancer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNetworkloadbalancer.
type LookupNetworkloadbalancerArgs struct {
	// Datacenter's UUID.
	DatacenterId string `pulumi:"datacenterId"`
	// ID of the network load balancer you want to search for.
	//
	// `datacenterId` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
	Id *string `pulumi:"id"`
	// Name of an existing network load balancer that you want to search for.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getNetworkloadbalancer.
type LookupNetworkloadbalancerResult struct {
	// Turn logging on and off for this product. Default value is 'false'.
	CentralLogging bool   `pulumi:"centralLogging"`
	DatacenterId   string `pulumi:"datacenterId"`
	// Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.
	Flowlogs []GetNetworkloadbalancerFlowlog `pulumi:"flowlogs"`
	// Id of that Network Load Balancer
	Id *string `pulumi:"id"`
	// Collection of IP addresses of the Network Load Balancer. (inbound and outbound) IP of the listenerLan must be a customer reserved IP for the public load balancer and private IP for the private load balancer.
	Ips []string `pulumi:"ips"`
	// Collection of private IP addresses with subnet mask of the Network Load Balancer. IPs must contain valid subnet mask. If user will not provide any IP then the system will generate one IP with /24 subnet.
	LbPrivateIps []string `pulumi:"lbPrivateIps"`
	// Id of the listening LAN. (inbound)
	ListenerLan   int    `pulumi:"listenerLan"`
	LoggingFormat string `pulumi:"loggingFormat"`
	// Specifies the name of the flow log.
	Name *string `pulumi:"name"`
	// Id of the balanced private target LAN. (outbound)
	TargetLan int `pulumi:"targetLan"`
}

func LookupNetworkloadbalancerOutput(ctx *pulumi.Context, args LookupNetworkloadbalancerOutputArgs, opts ...pulumi.InvokeOption) LookupNetworkloadbalancerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNetworkloadbalancerResultOutput, error) {
			args := v.(LookupNetworkloadbalancerArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupNetworkloadbalancerResult
			secret, err := ctx.InvokePackageRaw("ionoscloud:index/getNetworkloadbalancer:getNetworkloadbalancer", args, &rv, "", opts...)
			if err != nil {
				return LookupNetworkloadbalancerResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupNetworkloadbalancerResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupNetworkloadbalancerResultOutput), nil
			}
			return output, nil
		}).(LookupNetworkloadbalancerResultOutput)
}

// A collection of arguments for invoking getNetworkloadbalancer.
type LookupNetworkloadbalancerOutputArgs struct {
	// Datacenter's UUID.
	DatacenterId pulumi.StringInput `pulumi:"datacenterId"`
	// ID of the network load balancer you want to search for.
	//
	// `datacenterId` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of an existing network load balancer that you want to search for.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupNetworkloadbalancerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkloadbalancerArgs)(nil)).Elem()
}

// A collection of values returned by getNetworkloadbalancer.
type LookupNetworkloadbalancerResultOutput struct{ *pulumi.OutputState }

func (LookupNetworkloadbalancerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkloadbalancerResult)(nil)).Elem()
}

func (o LookupNetworkloadbalancerResultOutput) ToLookupNetworkloadbalancerResultOutput() LookupNetworkloadbalancerResultOutput {
	return o
}

func (o LookupNetworkloadbalancerResultOutput) ToLookupNetworkloadbalancerResultOutputWithContext(ctx context.Context) LookupNetworkloadbalancerResultOutput {
	return o
}

// Turn logging on and off for this product. Default value is 'false'.
func (o LookupNetworkloadbalancerResultOutput) CentralLogging() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNetworkloadbalancerResult) bool { return v.CentralLogging }).(pulumi.BoolOutput)
}

func (o LookupNetworkloadbalancerResultOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkloadbalancerResult) string { return v.DatacenterId }).(pulumi.StringOutput)
}

// Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.
func (o LookupNetworkloadbalancerResultOutput) Flowlogs() GetNetworkloadbalancerFlowlogArrayOutput {
	return o.ApplyT(func(v LookupNetworkloadbalancerResult) []GetNetworkloadbalancerFlowlog { return v.Flowlogs }).(GetNetworkloadbalancerFlowlogArrayOutput)
}

// Id of that Network Load Balancer
func (o LookupNetworkloadbalancerResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNetworkloadbalancerResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Collection of IP addresses of the Network Load Balancer. (inbound and outbound) IP of the listenerLan must be a customer reserved IP for the public load balancer and private IP for the private load balancer.
func (o LookupNetworkloadbalancerResultOutput) Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNetworkloadbalancerResult) []string { return v.Ips }).(pulumi.StringArrayOutput)
}

// Collection of private IP addresses with subnet mask of the Network Load Balancer. IPs must contain valid subnet mask. If user will not provide any IP then the system will generate one IP with /24 subnet.
func (o LookupNetworkloadbalancerResultOutput) LbPrivateIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNetworkloadbalancerResult) []string { return v.LbPrivateIps }).(pulumi.StringArrayOutput)
}

// Id of the listening LAN. (inbound)
func (o LookupNetworkloadbalancerResultOutput) ListenerLan() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNetworkloadbalancerResult) int { return v.ListenerLan }).(pulumi.IntOutput)
}

func (o LookupNetworkloadbalancerResultOutput) LoggingFormat() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkloadbalancerResult) string { return v.LoggingFormat }).(pulumi.StringOutput)
}

// Specifies the name of the flow log.
func (o LookupNetworkloadbalancerResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNetworkloadbalancerResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Id of the balanced private target LAN. (outbound)
func (o LookupNetworkloadbalancerResultOutput) TargetLan() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNetworkloadbalancerResult) int { return v.TargetLan }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNetworkloadbalancerResultOutput{})
}
