// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **NAT Gateway Rule data source** can be used to search for and return existing NAT Gateway Rules.
// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
// When this happens, please refine your search string so that it is specific enough to return only one result.
//
// ## Example Usage
func LookupNatgatewayRule(ctx *pulumi.Context, args *LookupNatgatewayRuleArgs, opts ...pulumi.InvokeOption) (*LookupNatgatewayRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNatgatewayRuleResult
	err := ctx.Invoke("ionoscloud:index/getNatgatewayRule:getNatgatewayRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNatgatewayRule.
type LookupNatgatewayRuleArgs struct {
	// Datacenter's UUID.
	DatacenterId string `pulumi:"datacenterId"`
	// ID of the NAT gateway rule you want to search for.
	//
	// Both `datacenterId` and `natgatewayId` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
	Id *string `pulumi:"id"`
	// Name of an existing NAT gateway rule that you want to search for.
	Name *string `pulumi:"name"`
	// Nat Gateway's UUID.
	NatgatewayId string `pulumi:"natgatewayId"`
}

// A collection of values returned by getNatgatewayRule.
type LookupNatgatewayRuleResult struct {
	DatacenterId string `pulumi:"datacenterId"`
	// Id of the NAT gateway rule
	Id *string `pulumi:"id"`
	// Name of the NAT gateway rule
	Name         *string `pulumi:"name"`
	NatgatewayId string  `pulumi:"natgatewayId"`
	// Protocol of the NAT gateway rule. Defaults to ALL. If protocol is 'ICMP' then targetPortRange start and end cannot be set.
	Protocol string `pulumi:"protocol"`
	// Public IP address of the NAT gateway rule. Specifies the address used for masking outgoing packets source address field. Should be one of the customer reserved IP address already configured on the NAT gateway resource
	PublicIp string `pulumi:"publicIp"`
	// Source subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on the packets source IP address.
	SourceSubnet string `pulumi:"sourceSubnet"`
	// Target port range of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on destination port. If none is provided, rule will match any port
	TargetPortRanges []GetNatgatewayRuleTargetPortRange `pulumi:"targetPortRanges"`
	// Target or destination subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on the packets destination IP address. If none is provided, rule will match any address.
	TargetSubnet string `pulumi:"targetSubnet"`
	// ype of the NAT gateway rule.
	Type string `pulumi:"type"`
}

func LookupNatgatewayRuleOutput(ctx *pulumi.Context, args LookupNatgatewayRuleOutputArgs, opts ...pulumi.InvokeOption) LookupNatgatewayRuleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNatgatewayRuleResult, error) {
			args := v.(LookupNatgatewayRuleArgs)
			r, err := LookupNatgatewayRule(ctx, &args, opts...)
			var s LookupNatgatewayRuleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNatgatewayRuleResultOutput)
}

// A collection of arguments for invoking getNatgatewayRule.
type LookupNatgatewayRuleOutputArgs struct {
	// Datacenter's UUID.
	DatacenterId pulumi.StringInput `pulumi:"datacenterId"`
	// ID of the NAT gateway rule you want to search for.
	//
	// Both `datacenterId` and `natgatewayId` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of an existing NAT gateway rule that you want to search for.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Nat Gateway's UUID.
	NatgatewayId pulumi.StringInput `pulumi:"natgatewayId"`
}

func (LookupNatgatewayRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNatgatewayRuleArgs)(nil)).Elem()
}

// A collection of values returned by getNatgatewayRule.
type LookupNatgatewayRuleResultOutput struct{ *pulumi.OutputState }

func (LookupNatgatewayRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNatgatewayRuleResult)(nil)).Elem()
}

func (o LookupNatgatewayRuleResultOutput) ToLookupNatgatewayRuleResultOutput() LookupNatgatewayRuleResultOutput {
	return o
}

func (o LookupNatgatewayRuleResultOutput) ToLookupNatgatewayRuleResultOutputWithContext(ctx context.Context) LookupNatgatewayRuleResultOutput {
	return o
}

func (o LookupNatgatewayRuleResultOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNatgatewayRuleResult) string { return v.DatacenterId }).(pulumi.StringOutput)
}

// Id of the NAT gateway rule
func (o LookupNatgatewayRuleResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNatgatewayRuleResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name of the NAT gateway rule
func (o LookupNatgatewayRuleResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNatgatewayRuleResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupNatgatewayRuleResultOutput) NatgatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNatgatewayRuleResult) string { return v.NatgatewayId }).(pulumi.StringOutput)
}

// Protocol of the NAT gateway rule. Defaults to ALL. If protocol is 'ICMP' then targetPortRange start and end cannot be set.
func (o LookupNatgatewayRuleResultOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNatgatewayRuleResult) string { return v.Protocol }).(pulumi.StringOutput)
}

// Public IP address of the NAT gateway rule. Specifies the address used for masking outgoing packets source address field. Should be one of the customer reserved IP address already configured on the NAT gateway resource
func (o LookupNatgatewayRuleResultOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNatgatewayRuleResult) string { return v.PublicIp }).(pulumi.StringOutput)
}

// Source subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on the packets source IP address.
func (o LookupNatgatewayRuleResultOutput) SourceSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNatgatewayRuleResult) string { return v.SourceSubnet }).(pulumi.StringOutput)
}

// Target port range of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on destination port. If none is provided, rule will match any port
func (o LookupNatgatewayRuleResultOutput) TargetPortRanges() GetNatgatewayRuleTargetPortRangeArrayOutput {
	return o.ApplyT(func(v LookupNatgatewayRuleResult) []GetNatgatewayRuleTargetPortRange { return v.TargetPortRanges }).(GetNatgatewayRuleTargetPortRangeArrayOutput)
}

// Target or destination subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on the packets destination IP address. If none is provided, rule will match any address.
func (o LookupNatgatewayRuleResultOutput) TargetSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNatgatewayRuleResult) string { return v.TargetSubnet }).(pulumi.StringOutput)
}

// ype of the NAT gateway rule.
func (o LookupNatgatewayRuleResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNatgatewayRuleResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNatgatewayRuleResultOutput{})
}
