// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cdn

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Distribution struct {
	pulumi.CustomResourceState

	// The ID of the certificate to use for the distribution.
	CertificateId pulumi.StringPtrOutput `pulumi:"certificateId"`
	// The domain of the distribution.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// IP of the distribution, it has to be included on the domain DNS Zone as A record.
	PublicEndpointV4 pulumi.StringOutput `pulumi:"publicEndpointV4"`
	// IP of the distribution, it has to be included on the domain DNS Zone as AAAA record.
	PublicEndpointV6 pulumi.StringOutput `pulumi:"publicEndpointV6"`
	// Unique name of the resource.
	ResourceUrn pulumi.StringOutput `pulumi:"resourceUrn"`
	// The routing rules for the distribution.
	RoutingRules DistributionRoutingRuleArrayOutput `pulumi:"routingRules"`
}

// NewDistribution registers a new resource with the given unique name, arguments, and options.
func NewDistribution(ctx *pulumi.Context,
	name string, args *DistributionArgs, opts ...pulumi.ResourceOption) (*Distribution, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.RoutingRules == nil {
		return nil, errors.New("invalid value for required argument 'RoutingRules'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Distribution
	err := ctx.RegisterResource("ionoscloud:cdn/distribution:Distribution", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDistribution gets an existing Distribution resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDistribution(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DistributionState, opts ...pulumi.ResourceOption) (*Distribution, error) {
	var resource Distribution
	err := ctx.ReadResource("ionoscloud:cdn/distribution:Distribution", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Distribution resources.
type distributionState struct {
	// The ID of the certificate to use for the distribution.
	CertificateId *string `pulumi:"certificateId"`
	// The domain of the distribution.
	Domain *string `pulumi:"domain"`
	// IP of the distribution, it has to be included on the domain DNS Zone as A record.
	PublicEndpointV4 *string `pulumi:"publicEndpointV4"`
	// IP of the distribution, it has to be included on the domain DNS Zone as AAAA record.
	PublicEndpointV6 *string `pulumi:"publicEndpointV6"`
	// Unique name of the resource.
	ResourceUrn *string `pulumi:"resourceUrn"`
	// The routing rules for the distribution.
	RoutingRules []DistributionRoutingRule `pulumi:"routingRules"`
}

type DistributionState struct {
	// The ID of the certificate to use for the distribution.
	CertificateId pulumi.StringPtrInput
	// The domain of the distribution.
	Domain pulumi.StringPtrInput
	// IP of the distribution, it has to be included on the domain DNS Zone as A record.
	PublicEndpointV4 pulumi.StringPtrInput
	// IP of the distribution, it has to be included on the domain DNS Zone as AAAA record.
	PublicEndpointV6 pulumi.StringPtrInput
	// Unique name of the resource.
	ResourceUrn pulumi.StringPtrInput
	// The routing rules for the distribution.
	RoutingRules DistributionRoutingRuleArrayInput
}

func (DistributionState) ElementType() reflect.Type {
	return reflect.TypeOf((*distributionState)(nil)).Elem()
}

type distributionArgs struct {
	// The ID of the certificate to use for the distribution.
	CertificateId *string `pulumi:"certificateId"`
	// The domain of the distribution.
	Domain string `pulumi:"domain"`
	// The routing rules for the distribution.
	RoutingRules []DistributionRoutingRule `pulumi:"routingRules"`
}

// The set of arguments for constructing a Distribution resource.
type DistributionArgs struct {
	// The ID of the certificate to use for the distribution.
	CertificateId pulumi.StringPtrInput
	// The domain of the distribution.
	Domain pulumi.StringInput
	// The routing rules for the distribution.
	RoutingRules DistributionRoutingRuleArrayInput
}

func (DistributionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*distributionArgs)(nil)).Elem()
}

type DistributionInput interface {
	pulumi.Input

	ToDistributionOutput() DistributionOutput
	ToDistributionOutputWithContext(ctx context.Context) DistributionOutput
}

func (*Distribution) ElementType() reflect.Type {
	return reflect.TypeOf((**Distribution)(nil)).Elem()
}

func (i *Distribution) ToDistributionOutput() DistributionOutput {
	return i.ToDistributionOutputWithContext(context.Background())
}

func (i *Distribution) ToDistributionOutputWithContext(ctx context.Context) DistributionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionOutput)
}

// DistributionArrayInput is an input type that accepts DistributionArray and DistributionArrayOutput values.
// You can construct a concrete instance of `DistributionArrayInput` via:
//
//	DistributionArray{ DistributionArgs{...} }
type DistributionArrayInput interface {
	pulumi.Input

	ToDistributionArrayOutput() DistributionArrayOutput
	ToDistributionArrayOutputWithContext(context.Context) DistributionArrayOutput
}

type DistributionArray []DistributionInput

func (DistributionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Distribution)(nil)).Elem()
}

func (i DistributionArray) ToDistributionArrayOutput() DistributionArrayOutput {
	return i.ToDistributionArrayOutputWithContext(context.Background())
}

func (i DistributionArray) ToDistributionArrayOutputWithContext(ctx context.Context) DistributionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionArrayOutput)
}

// DistributionMapInput is an input type that accepts DistributionMap and DistributionMapOutput values.
// You can construct a concrete instance of `DistributionMapInput` via:
//
//	DistributionMap{ "key": DistributionArgs{...} }
type DistributionMapInput interface {
	pulumi.Input

	ToDistributionMapOutput() DistributionMapOutput
	ToDistributionMapOutputWithContext(context.Context) DistributionMapOutput
}

type DistributionMap map[string]DistributionInput

func (DistributionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Distribution)(nil)).Elem()
}

func (i DistributionMap) ToDistributionMapOutput() DistributionMapOutput {
	return i.ToDistributionMapOutputWithContext(context.Background())
}

func (i DistributionMap) ToDistributionMapOutputWithContext(ctx context.Context) DistributionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionMapOutput)
}

type DistributionOutput struct{ *pulumi.OutputState }

func (DistributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Distribution)(nil)).Elem()
}

func (o DistributionOutput) ToDistributionOutput() DistributionOutput {
	return o
}

func (o DistributionOutput) ToDistributionOutputWithContext(ctx context.Context) DistributionOutput {
	return o
}

// The ID of the certificate to use for the distribution.
func (o DistributionOutput) CertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Distribution) pulumi.StringPtrOutput { return v.CertificateId }).(pulumi.StringPtrOutput)
}

// The domain of the distribution.
func (o DistributionOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *Distribution) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// IP of the distribution, it has to be included on the domain DNS Zone as A record.
func (o DistributionOutput) PublicEndpointV4() pulumi.StringOutput {
	return o.ApplyT(func(v *Distribution) pulumi.StringOutput { return v.PublicEndpointV4 }).(pulumi.StringOutput)
}

// IP of the distribution, it has to be included on the domain DNS Zone as AAAA record.
func (o DistributionOutput) PublicEndpointV6() pulumi.StringOutput {
	return o.ApplyT(func(v *Distribution) pulumi.StringOutput { return v.PublicEndpointV6 }).(pulumi.StringOutput)
}

// Unique name of the resource.
func (o DistributionOutput) ResourceUrn() pulumi.StringOutput {
	return o.ApplyT(func(v *Distribution) pulumi.StringOutput { return v.ResourceUrn }).(pulumi.StringOutput)
}

// The routing rules for the distribution.
func (o DistributionOutput) RoutingRules() DistributionRoutingRuleArrayOutput {
	return o.ApplyT(func(v *Distribution) DistributionRoutingRuleArrayOutput { return v.RoutingRules }).(DistributionRoutingRuleArrayOutput)
}

type DistributionArrayOutput struct{ *pulumi.OutputState }

func (DistributionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Distribution)(nil)).Elem()
}

func (o DistributionArrayOutput) ToDistributionArrayOutput() DistributionArrayOutput {
	return o
}

func (o DistributionArrayOutput) ToDistributionArrayOutputWithContext(ctx context.Context) DistributionArrayOutput {
	return o
}

func (o DistributionArrayOutput) Index(i pulumi.IntInput) DistributionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Distribution {
		return vs[0].([]*Distribution)[vs[1].(int)]
	}).(DistributionOutput)
}

type DistributionMapOutput struct{ *pulumi.OutputState }

func (DistributionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Distribution)(nil)).Elem()
}

func (o DistributionMapOutput) ToDistributionMapOutput() DistributionMapOutput {
	return o
}

func (o DistributionMapOutput) ToDistributionMapOutputWithContext(ctx context.Context) DistributionMapOutput {
	return o
}

func (o DistributionMapOutput) MapIndex(k pulumi.StringInput) DistributionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Distribution {
		return vs[0].(map[string]*Distribution)[vs[1].(string)]
	}).(DistributionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionInput)(nil)).Elem(), &Distribution{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionArrayInput)(nil)).Elem(), DistributionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionMapInput)(nil)).Elem(), DistributionMap{})
	pulumi.RegisterOutputType(DistributionOutput{})
	pulumi.RegisterOutputType(DistributionArrayOutput{})
	pulumi.RegisterOutputType(DistributionMapOutput{})
}
