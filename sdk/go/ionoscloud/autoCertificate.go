// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AutoCertificate struct {
	pulumi.CustomResourceState

	// The common name (DNS) of the certificate to issue. The common name needs to be part of a zone in IONOS Cloud DNS
	CommonName pulumi.StringOutput `pulumi:"commonName"`
	// The key algorithm used to generate the certificate
	KeyAlgorithm pulumi.StringOutput `pulumi:"keyAlgorithm"`
	// The ID of the last certificate that was issued
	LastIssuedCertificateId pulumi.StringOutput `pulumi:"lastIssuedCertificateId"`
	// The location of the auto-certificate
	Location pulumi.StringOutput `pulumi:"location"`
	// A certificate name used for management purposes
	Name pulumi.StringOutput `pulumi:"name"`
	// The certificate provider used to issue the certificates
	ProviderId pulumi.StringOutput `pulumi:"providerId"`
	// Optional additional names to be added to the issued certificate. The additional names needs to be part of a zone in
	// IONOS Cloud DNS
	SubjectAlternativeNames pulumi.StringArrayOutput `pulumi:"subjectAlternativeNames"`
}

// NewAutoCertificate registers a new resource with the given unique name, arguments, and options.
func NewAutoCertificate(ctx *pulumi.Context,
	name string, args *AutoCertificateArgs, opts ...pulumi.ResourceOption) (*AutoCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CommonName == nil {
		return nil, errors.New("invalid value for required argument 'CommonName'")
	}
	if args.KeyAlgorithm == nil {
		return nil, errors.New("invalid value for required argument 'KeyAlgorithm'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ProviderId == nil {
		return nil, errors.New("invalid value for required argument 'ProviderId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AutoCertificate
	err := ctx.RegisterResource("ionoscloud:index/autoCertificate:AutoCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAutoCertificate gets an existing AutoCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAutoCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AutoCertificateState, opts ...pulumi.ResourceOption) (*AutoCertificate, error) {
	var resource AutoCertificate
	err := ctx.ReadResource("ionoscloud:index/autoCertificate:AutoCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AutoCertificate resources.
type autoCertificateState struct {
	// The common name (DNS) of the certificate to issue. The common name needs to be part of a zone in IONOS Cloud DNS
	CommonName *string `pulumi:"commonName"`
	// The key algorithm used to generate the certificate
	KeyAlgorithm *string `pulumi:"keyAlgorithm"`
	// The ID of the last certificate that was issued
	LastIssuedCertificateId *string `pulumi:"lastIssuedCertificateId"`
	// The location of the auto-certificate
	Location *string `pulumi:"location"`
	// A certificate name used for management purposes
	Name *string `pulumi:"name"`
	// The certificate provider used to issue the certificates
	ProviderId *string `pulumi:"providerId"`
	// Optional additional names to be added to the issued certificate. The additional names needs to be part of a zone in
	// IONOS Cloud DNS
	SubjectAlternativeNames []string `pulumi:"subjectAlternativeNames"`
}

type AutoCertificateState struct {
	// The common name (DNS) of the certificate to issue. The common name needs to be part of a zone in IONOS Cloud DNS
	CommonName pulumi.StringPtrInput
	// The key algorithm used to generate the certificate
	KeyAlgorithm pulumi.StringPtrInput
	// The ID of the last certificate that was issued
	LastIssuedCertificateId pulumi.StringPtrInput
	// The location of the auto-certificate
	Location pulumi.StringPtrInput
	// A certificate name used for management purposes
	Name pulumi.StringPtrInput
	// The certificate provider used to issue the certificates
	ProviderId pulumi.StringPtrInput
	// Optional additional names to be added to the issued certificate. The additional names needs to be part of a zone in
	// IONOS Cloud DNS
	SubjectAlternativeNames pulumi.StringArrayInput
}

func (AutoCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*autoCertificateState)(nil)).Elem()
}

type autoCertificateArgs struct {
	// The common name (DNS) of the certificate to issue. The common name needs to be part of a zone in IONOS Cloud DNS
	CommonName string `pulumi:"commonName"`
	// The key algorithm used to generate the certificate
	KeyAlgorithm string `pulumi:"keyAlgorithm"`
	// The location of the auto-certificate
	Location string `pulumi:"location"`
	// A certificate name used for management purposes
	Name *string `pulumi:"name"`
	// The certificate provider used to issue the certificates
	ProviderId string `pulumi:"providerId"`
	// Optional additional names to be added to the issued certificate. The additional names needs to be part of a zone in
	// IONOS Cloud DNS
	SubjectAlternativeNames []string `pulumi:"subjectAlternativeNames"`
}

// The set of arguments for constructing a AutoCertificate resource.
type AutoCertificateArgs struct {
	// The common name (DNS) of the certificate to issue. The common name needs to be part of a zone in IONOS Cloud DNS
	CommonName pulumi.StringInput
	// The key algorithm used to generate the certificate
	KeyAlgorithm pulumi.StringInput
	// The location of the auto-certificate
	Location pulumi.StringInput
	// A certificate name used for management purposes
	Name pulumi.StringPtrInput
	// The certificate provider used to issue the certificates
	ProviderId pulumi.StringInput
	// Optional additional names to be added to the issued certificate. The additional names needs to be part of a zone in
	// IONOS Cloud DNS
	SubjectAlternativeNames pulumi.StringArrayInput
}

func (AutoCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*autoCertificateArgs)(nil)).Elem()
}

type AutoCertificateInput interface {
	pulumi.Input

	ToAutoCertificateOutput() AutoCertificateOutput
	ToAutoCertificateOutputWithContext(ctx context.Context) AutoCertificateOutput
}

func (*AutoCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoCertificate)(nil)).Elem()
}

func (i *AutoCertificate) ToAutoCertificateOutput() AutoCertificateOutput {
	return i.ToAutoCertificateOutputWithContext(context.Background())
}

func (i *AutoCertificate) ToAutoCertificateOutputWithContext(ctx context.Context) AutoCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoCertificateOutput)
}

// AutoCertificateArrayInput is an input type that accepts AutoCertificateArray and AutoCertificateArrayOutput values.
// You can construct a concrete instance of `AutoCertificateArrayInput` via:
//
//	AutoCertificateArray{ AutoCertificateArgs{...} }
type AutoCertificateArrayInput interface {
	pulumi.Input

	ToAutoCertificateArrayOutput() AutoCertificateArrayOutput
	ToAutoCertificateArrayOutputWithContext(context.Context) AutoCertificateArrayOutput
}

type AutoCertificateArray []AutoCertificateInput

func (AutoCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AutoCertificate)(nil)).Elem()
}

func (i AutoCertificateArray) ToAutoCertificateArrayOutput() AutoCertificateArrayOutput {
	return i.ToAutoCertificateArrayOutputWithContext(context.Background())
}

func (i AutoCertificateArray) ToAutoCertificateArrayOutputWithContext(ctx context.Context) AutoCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoCertificateArrayOutput)
}

// AutoCertificateMapInput is an input type that accepts AutoCertificateMap and AutoCertificateMapOutput values.
// You can construct a concrete instance of `AutoCertificateMapInput` via:
//
//	AutoCertificateMap{ "key": AutoCertificateArgs{...} }
type AutoCertificateMapInput interface {
	pulumi.Input

	ToAutoCertificateMapOutput() AutoCertificateMapOutput
	ToAutoCertificateMapOutputWithContext(context.Context) AutoCertificateMapOutput
}

type AutoCertificateMap map[string]AutoCertificateInput

func (AutoCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AutoCertificate)(nil)).Elem()
}

func (i AutoCertificateMap) ToAutoCertificateMapOutput() AutoCertificateMapOutput {
	return i.ToAutoCertificateMapOutputWithContext(context.Background())
}

func (i AutoCertificateMap) ToAutoCertificateMapOutputWithContext(ctx context.Context) AutoCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoCertificateMapOutput)
}

type AutoCertificateOutput struct{ *pulumi.OutputState }

func (AutoCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoCertificate)(nil)).Elem()
}

func (o AutoCertificateOutput) ToAutoCertificateOutput() AutoCertificateOutput {
	return o
}

func (o AutoCertificateOutput) ToAutoCertificateOutputWithContext(ctx context.Context) AutoCertificateOutput {
	return o
}

// The common name (DNS) of the certificate to issue. The common name needs to be part of a zone in IONOS Cloud DNS
func (o AutoCertificateOutput) CommonName() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoCertificate) pulumi.StringOutput { return v.CommonName }).(pulumi.StringOutput)
}

// The key algorithm used to generate the certificate
func (o AutoCertificateOutput) KeyAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoCertificate) pulumi.StringOutput { return v.KeyAlgorithm }).(pulumi.StringOutput)
}

// The ID of the last certificate that was issued
func (o AutoCertificateOutput) LastIssuedCertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoCertificate) pulumi.StringOutput { return v.LastIssuedCertificateId }).(pulumi.StringOutput)
}

// The location of the auto-certificate
func (o AutoCertificateOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoCertificate) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// A certificate name used for management purposes
func (o AutoCertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoCertificate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The certificate provider used to issue the certificates
func (o AutoCertificateOutput) ProviderId() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoCertificate) pulumi.StringOutput { return v.ProviderId }).(pulumi.StringOutput)
}

// Optional additional names to be added to the issued certificate. The additional names needs to be part of a zone in
// IONOS Cloud DNS
func (o AutoCertificateOutput) SubjectAlternativeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AutoCertificate) pulumi.StringArrayOutput { return v.SubjectAlternativeNames }).(pulumi.StringArrayOutput)
}

type AutoCertificateArrayOutput struct{ *pulumi.OutputState }

func (AutoCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AutoCertificate)(nil)).Elem()
}

func (o AutoCertificateArrayOutput) ToAutoCertificateArrayOutput() AutoCertificateArrayOutput {
	return o
}

func (o AutoCertificateArrayOutput) ToAutoCertificateArrayOutputWithContext(ctx context.Context) AutoCertificateArrayOutput {
	return o
}

func (o AutoCertificateArrayOutput) Index(i pulumi.IntInput) AutoCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AutoCertificate {
		return vs[0].([]*AutoCertificate)[vs[1].(int)]
	}).(AutoCertificateOutput)
}

type AutoCertificateMapOutput struct{ *pulumi.OutputState }

func (AutoCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AutoCertificate)(nil)).Elem()
}

func (o AutoCertificateMapOutput) ToAutoCertificateMapOutput() AutoCertificateMapOutput {
	return o
}

func (o AutoCertificateMapOutput) ToAutoCertificateMapOutputWithContext(ctx context.Context) AutoCertificateMapOutput {
	return o
}

func (o AutoCertificateMapOutput) MapIndex(k pulumi.StringInput) AutoCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AutoCertificate {
		return vs[0].(map[string]*AutoCertificate)[vs[1].(string)]
	}).(AutoCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AutoCertificateInput)(nil)).Elem(), &AutoCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoCertificateArrayInput)(nil)).Elem(), AutoCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoCertificateMapInput)(nil)).Elem(), AutoCertificateMap{})
	pulumi.RegisterOutputType(AutoCertificateOutput{})
	pulumi.RegisterOutputType(AutoCertificateArrayOutput{})
	pulumi.RegisterOutputType(AutoCertificateMapOutput{})
}
