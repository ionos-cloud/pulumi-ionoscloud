// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **DNS Zone** can be used to search for and return an existing DNS Zone.
// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
// When this happens, please refine your search and make sure that your resources have unique names.
//
// > ⚠️  Only tokens are accepted for authorization in the **ionoscloud_dns_zone** data source. Please ensure you are using tokens as other methods will not be valid.
//
// ## Example Usage
//
// ### By name
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ionoscloud.GetDnsZone(ctx, &ionoscloud.GetDnsZoneArgs{
//				Name: pulumi.StringRef("example.com"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### By name with partial match
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ionoscloud.GetDnsZone(ctx, &ionoscloud.GetDnsZoneArgs{
//				Name:         pulumi.StringRef("example"),
//				PartialMatch: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDnsZone(ctx *pulumi.Context, args *GetDnsZoneArgs, opts ...pulumi.InvokeOption) (*GetDnsZoneResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDnsZoneResult
	err := ctx.Invoke("ionoscloud:index/getDnsZone:getDnsZone", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDnsZone.
type GetDnsZoneArgs struct {
	// [string] The ID of the DNS Zone you want to search for.
	Id *string `pulumi:"id"`
	// [string] The name of the DNS Zone you want to search for.
	Name *string `pulumi:"name"`
	// [bool] Whether partial matching is allowed or not when using name argument. Default value is false.
	//
	// Either `id` or `name` must be provided. If none, or both are provided, the datasource will return an error.
	PartialMatch *bool `pulumi:"partialMatch"`
}

// A collection of values returned by getDnsZone.
type GetDnsZoneResult struct {
	// The description of the DNS Zone.
	Description string `pulumi:"description"`
	// Indicates if the DNS Zone is activated or not.
	Enabled bool `pulumi:"enabled"`
	// The UUID of the DNS Zone.
	Id *string `pulumi:"id"`
	// The name of the DNS Zone.
	Name *string `pulumi:"name"`
	// A list of available name servers.
	Nameservers  []string `pulumi:"nameservers"`
	PartialMatch *bool    `pulumi:"partialMatch"`
}

func GetDnsZoneOutput(ctx *pulumi.Context, args GetDnsZoneOutputArgs, opts ...pulumi.InvokeOption) GetDnsZoneResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetDnsZoneResultOutput, error) {
			args := v.(GetDnsZoneArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ionoscloud:index/getDnsZone:getDnsZone", args, GetDnsZoneResultOutput{}, options).(GetDnsZoneResultOutput), nil
		}).(GetDnsZoneResultOutput)
}

// A collection of arguments for invoking getDnsZone.
type GetDnsZoneOutputArgs struct {
	// [string] The ID of the DNS Zone you want to search for.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// [string] The name of the DNS Zone you want to search for.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [bool] Whether partial matching is allowed or not when using name argument. Default value is false.
	//
	// Either `id` or `name` must be provided. If none, or both are provided, the datasource will return an error.
	PartialMatch pulumi.BoolPtrInput `pulumi:"partialMatch"`
}

func (GetDnsZoneOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDnsZoneArgs)(nil)).Elem()
}

// A collection of values returned by getDnsZone.
type GetDnsZoneResultOutput struct{ *pulumi.OutputState }

func (GetDnsZoneResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDnsZoneResult)(nil)).Elem()
}

func (o GetDnsZoneResultOutput) ToGetDnsZoneResultOutput() GetDnsZoneResultOutput {
	return o
}

func (o GetDnsZoneResultOutput) ToGetDnsZoneResultOutputWithContext(ctx context.Context) GetDnsZoneResultOutput {
	return o
}

// The description of the DNS Zone.
func (o GetDnsZoneResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetDnsZoneResult) string { return v.Description }).(pulumi.StringOutput)
}

// Indicates if the DNS Zone is activated or not.
func (o GetDnsZoneResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDnsZoneResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The UUID of the DNS Zone.
func (o GetDnsZoneResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDnsZoneResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the DNS Zone.
func (o GetDnsZoneResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDnsZoneResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A list of available name servers.
func (o GetDnsZoneResultOutput) Nameservers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDnsZoneResult) []string { return v.Nameservers }).(pulumi.StringArrayOutput)
}

func (o GetDnsZoneResultOutput) PartialMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetDnsZoneResult) *bool { return v.PartialMatch }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDnsZoneResultOutput{})
}
