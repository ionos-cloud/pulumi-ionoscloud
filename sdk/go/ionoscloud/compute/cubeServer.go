// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a **Cube Server** on IonosCloud.
//
// ## Example Usage
//
// This resource will create an operational server. After this section completes, the provisioner can be called.
//
// ### CUBE Server
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/pulumi/pulumi-random/sdk/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := compute.GetTemplate(ctx, &compute.GetTemplateArgs{
//				Name: pulumi.StringRef("Basic Cube XS"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleDatacenter, err := compute.NewDatacenter(ctx, "example", &compute.DatacenterArgs{
//				Name:     pulumi.String("Datacenter Example"),
//				Location: pulumi.String("de/txl"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleLan, err := compute.NewLan(ctx, "example", &compute.LanArgs{
//				DatacenterId: exampleDatacenter.ID(),
//				Public:       pulumi.Bool(true),
//				Name:         pulumi.String("Lan Example"),
//			})
//			if err != nil {
//				return err
//			}
//			serverImagePassword, err := random.NewPassword(ctx, "server_image_password", &random.PasswordArgs{
//				Length:  16,
//				Special: false,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewCubeServer(ctx, "example", &compute.CubeServerArgs{
//				Name:             pulumi.String("Server Example"),
//				AvailabilityZone: pulumi.String("ZONE_2"),
//				ImageName:        pulumi.String("ubuntu:latest"),
//				TemplateUuid:     pulumi.String(example.Id),
//				ImagePassword:    serverImagePassword.Result,
//				DatacenterId:     exampleDatacenter.ID(),
//				Volume: &compute.CubeServerVolumeArgs{
//					Name:        pulumi.String("Volume Example"),
//					LicenceType: pulumi.String("LINUX"),
//					DiskType:    pulumi.String("DAS"),
//				},
//				Nic: &compute.CubeServerNicArgs{
//					Lan:            exampleLan.ID(),
//					Name:           pulumi.String("Nic Example"),
//					Dhcp:           pulumi.Bool(true),
//					FirewallActive: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### With IPv6 Enabled
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/pulumi/pulumi-random/sdk/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := compute.GetTemplate(ctx, &compute.GetTemplateArgs{
//				Name: pulumi.StringRef("Basic Cube XS"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleDatacenter, err := compute.NewDatacenter(ctx, "example", &compute.DatacenterArgs{
//				Name:     pulumi.String("Datacenter Example"),
//				Location: pulumi.String("de/txl"),
//			})
//			if err != nil {
//				return err
//			}
//			webserverIpblock, err := compute.NewIPBlock(ctx, "webserver_ipblock", &compute.IPBlockArgs{
//				Location: pulumi.String("de/txl"),
//				Size:     pulumi.Int(4),
//				Name:     pulumi.String("webserver_ipblock"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleLan, err := compute.NewLan(ctx, "example", &compute.LanArgs{
//				DatacenterId:  exampleDatacenter.ID(),
//				Public:        pulumi.Bool(true),
//				Name:          pulumi.String("Lan Example"),
//				Ipv6CidrBlock: pulumi.String("ipv6_cidr_block_from_dc"),
//			})
//			if err != nil {
//				return err
//			}
//			serverImagePassword, err := random.NewPassword(ctx, "server_image_password", &random.PasswordArgs{
//				Length:  16,
//				Special: false,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewCubeServer(ctx, "example", &compute.CubeServerArgs{
//				Name:             pulumi.String("Server Example"),
//				AvailabilityZone: pulumi.String("AUTO"),
//				ImageName:        pulumi.String("ubuntu:latest"),
//				TemplateUuid:     pulumi.String(example.Id),
//				ImagePassword:    serverImagePassword.Result,
//				DatacenterId:     exampleDatacenter.ID(),
//				Volume: &compute.CubeServerVolumeArgs{
//					Name:        pulumi.String("Volume Example"),
//					LicenceType: pulumi.String("LINUX"),
//					DiskType:    pulumi.String("DAS"),
//				},
//				Nic: &compute.CubeServerNicArgs{
//					Lan:  exampleLan.ID(),
//					Name: pulumi.String("Nic Example"),
//					Dhcp: pulumi.Bool(true),
//					Ips: pulumi.StringArray{
//						webserverIpblock.Ips.ApplyT(func(ips []string) (string, error) {
//							return ips[0], nil
//						}).(pulumi.StringOutput),
//						webserverIpblock.Ips.ApplyT(func(ips []string) (string, error) {
//							return ips[1], nil
//						}).(pulumi.StringOutput),
//					},
//					Dhcpv6:        pulumi.Bool(false),
//					Ipv6CidrBlock: pulumi.String("ipv6_cidr_block_from_lan"),
//					Ipv6Ips: pulumi.StringArray{
//						pulumi.String("ipv6_ip1"),
//						pulumi.String("ipv6_ip2"),
//						pulumi.String("ipv6_ip3"),
//					},
//					FirewallActive: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Notes
//
// Please note that for any secondary volume, you need to set the **licence_type** property to **UNKNOWN**
//
// ## Import
//
// Resource Server can be imported using the `resource id` and the `datacenter id`, e.g.
//
// ```sh
// $ pulumi import ionoscloud:compute/cubeServer:CubeServer myserver datacenter uuid/server uuid
// ```
type CubeServer struct {
	pulumi.CustomResourceState

	// [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the server.
	//
	// ⚠️ **_Warning: `allowReplace` - lets you update immutable fields, but it first destroys and then re-creates the server in order to do it. This field should be used with care, understanding the risks._**
	//
	// > **⚠ WARNING**
	// >
	// > Image_name under volume level is deprecated, please use imageName under server level
	//
	// > **⚠ WARNING**
	// >
	// > For creating a **CUBE** server, you can not set `volume.size` argument.
	AllowReplace pulumi.BoolPtrOutput `pulumi:"allowReplace"`
	// [string] The availability zone in which the server should exist. This property is immutable.
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// ***DEPRECATED*** Please refer to compute.BootDeviceSelection (Optional)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the compute.getImage data source.
	//
	// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
	BootCdrom pulumi.StringOutput `pulumi:"bootCdrom"`
	// [string] The image or snapshot UUID / name. May also be an image alias. It is required if `licenceType` is not provided.
	BootImage pulumi.StringOutput `pulumi:"bootImage"`
	// The associated boot volume.
	BootVolume pulumi.StringOutput `pulumi:"bootVolume"`
	// [string] The ID of a Virtual Data Center.
	DatacenterId pulumi.StringOutput `pulumi:"datacenterId"`
	// The associated firewall rule.
	FirewallruleId pulumi.StringOutput `pulumi:"firewallruleId"`
	// (Computed) The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licenceType` is not provided. Attribute is immutable.
	ImageName pulumi.StringOutput `pulumi:"imageName"`
	// [string] Required if `sshKeyPath` is not provided.
	ImagePassword pulumi.StringOutput `pulumi:"imagePassword"`
	// A list that contains the IDs for the volumes defined inside the cube server resource.
	InlineVolumeIds pulumi.StringArrayOutput `pulumi:"inlineVolumeIds"`
	// [string] The name of the server.
	Name pulumi.StringOutput `pulumi:"name"`
	// See the Nic section.
	Nic CubeServerNicOutput `pulumi:"nic"`
	// The associated IP address.
	PrimaryIp pulumi.StringOutput `pulumi:"primaryIp"`
	// The associated NIC.
	PrimaryNic pulumi.StringOutput `pulumi:"primaryNic"`
	// The list of Security Group IDs for the resource.
	SecurityGroupsIds pulumi.StringArrayOutput `pulumi:"securityGroupsIds"`
	// [list] List of paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Required for IonosCloud Linux images. Required if `imagePassword` is not provided.
	SshKeyPaths pulumi.StringArrayOutput `pulumi:"sshKeyPaths"`
	// [string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
	TemplateUuid pulumi.StringOutput `pulumi:"templateUuid"`
	// [string] Sets the power state of the cube server. E.g: `RUNNING` or `SUSPENDED`.
	VmState pulumi.StringOutput `pulumi:"vmState"`
	// See the Volume section.
	Volume CubeServerVolumeOutput `pulumi:"volume"`
}

// NewCubeServer registers a new resource with the given unique name, arguments, and options.
func NewCubeServer(ctx *pulumi.Context,
	name string, args *CubeServerArgs, opts ...pulumi.ResourceOption) (*CubeServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatacenterId == nil {
		return nil, errors.New("invalid value for required argument 'DatacenterId'")
	}
	if args.Nic == nil {
		return nil, errors.New("invalid value for required argument 'Nic'")
	}
	if args.TemplateUuid == nil {
		return nil, errors.New("invalid value for required argument 'TemplateUuid'")
	}
	if args.Volume == nil {
		return nil, errors.New("invalid value for required argument 'Volume'")
	}
	if args.ImagePassword != nil {
		args.ImagePassword = pulumi.ToSecret(args.ImagePassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"imagePassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CubeServer
	err := ctx.RegisterResource("ionoscloud:compute/cubeServer:CubeServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCubeServer gets an existing CubeServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCubeServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CubeServerState, opts ...pulumi.ResourceOption) (*CubeServer, error) {
	var resource CubeServer
	err := ctx.ReadResource("ionoscloud:compute/cubeServer:CubeServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CubeServer resources.
type cubeServerState struct {
	// [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the server.
	//
	// ⚠️ **_Warning: `allowReplace` - lets you update immutable fields, but it first destroys and then re-creates the server in order to do it. This field should be used with care, understanding the risks._**
	//
	// > **⚠ WARNING**
	// >
	// > Image_name under volume level is deprecated, please use imageName under server level
	//
	// > **⚠ WARNING**
	// >
	// > For creating a **CUBE** server, you can not set `volume.size` argument.
	AllowReplace *bool `pulumi:"allowReplace"`
	// [string] The availability zone in which the server should exist. This property is immutable.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// ***DEPRECATED*** Please refer to compute.BootDeviceSelection (Optional)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the compute.getImage data source.
	//
	// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
	BootCdrom *string `pulumi:"bootCdrom"`
	// [string] The image or snapshot UUID / name. May also be an image alias. It is required if `licenceType` is not provided.
	BootImage *string `pulumi:"bootImage"`
	// The associated boot volume.
	BootVolume *string `pulumi:"bootVolume"`
	// [string] The ID of a Virtual Data Center.
	DatacenterId *string `pulumi:"datacenterId"`
	// The associated firewall rule.
	FirewallruleId *string `pulumi:"firewallruleId"`
	// (Computed) The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
	Hostname *string `pulumi:"hostname"`
	// [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licenceType` is not provided. Attribute is immutable.
	ImageName *string `pulumi:"imageName"`
	// [string] Required if `sshKeyPath` is not provided.
	ImagePassword *string `pulumi:"imagePassword"`
	// A list that contains the IDs for the volumes defined inside the cube server resource.
	InlineVolumeIds []string `pulumi:"inlineVolumeIds"`
	// [string] The name of the server.
	Name *string `pulumi:"name"`
	// See the Nic section.
	Nic *CubeServerNic `pulumi:"nic"`
	// The associated IP address.
	PrimaryIp *string `pulumi:"primaryIp"`
	// The associated NIC.
	PrimaryNic *string `pulumi:"primaryNic"`
	// The list of Security Group IDs for the resource.
	SecurityGroupsIds []string `pulumi:"securityGroupsIds"`
	// [list] List of paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Required for IonosCloud Linux images. Required if `imagePassword` is not provided.
	SshKeyPaths []string `pulumi:"sshKeyPaths"`
	// [string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
	TemplateUuid *string `pulumi:"templateUuid"`
	// [string] Sets the power state of the cube server. E.g: `RUNNING` or `SUSPENDED`.
	VmState *string `pulumi:"vmState"`
	// See the Volume section.
	Volume *CubeServerVolume `pulumi:"volume"`
}

type CubeServerState struct {
	// [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the server.
	//
	// ⚠️ **_Warning: `allowReplace` - lets you update immutable fields, but it first destroys and then re-creates the server in order to do it. This field should be used with care, understanding the risks._**
	//
	// > **⚠ WARNING**
	// >
	// > Image_name under volume level is deprecated, please use imageName under server level
	//
	// > **⚠ WARNING**
	// >
	// > For creating a **CUBE** server, you can not set `volume.size` argument.
	AllowReplace pulumi.BoolPtrInput
	// [string] The availability zone in which the server should exist. This property is immutable.
	AvailabilityZone pulumi.StringPtrInput
	// ***DEPRECATED*** Please refer to compute.BootDeviceSelection (Optional)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the compute.getImage data source.
	//
	// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
	BootCdrom pulumi.StringPtrInput
	// [string] The image or snapshot UUID / name. May also be an image alias. It is required if `licenceType` is not provided.
	BootImage pulumi.StringPtrInput
	// The associated boot volume.
	BootVolume pulumi.StringPtrInput
	// [string] The ID of a Virtual Data Center.
	DatacenterId pulumi.StringPtrInput
	// The associated firewall rule.
	FirewallruleId pulumi.StringPtrInput
	// (Computed) The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
	Hostname pulumi.StringPtrInput
	// [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licenceType` is not provided. Attribute is immutable.
	ImageName pulumi.StringPtrInput
	// [string] Required if `sshKeyPath` is not provided.
	ImagePassword pulumi.StringPtrInput
	// A list that contains the IDs for the volumes defined inside the cube server resource.
	InlineVolumeIds pulumi.StringArrayInput
	// [string] The name of the server.
	Name pulumi.StringPtrInput
	// See the Nic section.
	Nic CubeServerNicPtrInput
	// The associated IP address.
	PrimaryIp pulumi.StringPtrInput
	// The associated NIC.
	PrimaryNic pulumi.StringPtrInput
	// The list of Security Group IDs for the resource.
	SecurityGroupsIds pulumi.StringArrayInput
	// [list] List of paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Required for IonosCloud Linux images. Required if `imagePassword` is not provided.
	SshKeyPaths pulumi.StringArrayInput
	// [string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
	TemplateUuid pulumi.StringPtrInput
	// [string] Sets the power state of the cube server. E.g: `RUNNING` or `SUSPENDED`.
	VmState pulumi.StringPtrInput
	// See the Volume section.
	Volume CubeServerVolumePtrInput
}

func (CubeServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*cubeServerState)(nil)).Elem()
}

type cubeServerArgs struct {
	// [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the server.
	//
	// ⚠️ **_Warning: `allowReplace` - lets you update immutable fields, but it first destroys and then re-creates the server in order to do it. This field should be used with care, understanding the risks._**
	//
	// > **⚠ WARNING**
	// >
	// > Image_name under volume level is deprecated, please use imageName under server level
	//
	// > **⚠ WARNING**
	// >
	// > For creating a **CUBE** server, you can not set `volume.size` argument.
	AllowReplace *bool `pulumi:"allowReplace"`
	// [string] The availability zone in which the server should exist. This property is immutable.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// ***DEPRECATED*** Please refer to compute.BootDeviceSelection (Optional)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the compute.getImage data source.
	//
	// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
	BootCdrom *string `pulumi:"bootCdrom"`
	// [string] The image or snapshot UUID / name. May also be an image alias. It is required if `licenceType` is not provided.
	BootImage *string `pulumi:"bootImage"`
	// [string] The ID of a Virtual Data Center.
	DatacenterId string `pulumi:"datacenterId"`
	// (Computed) The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
	Hostname *string `pulumi:"hostname"`
	// [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licenceType` is not provided. Attribute is immutable.
	ImageName *string `pulumi:"imageName"`
	// [string] Required if `sshKeyPath` is not provided.
	ImagePassword *string `pulumi:"imagePassword"`
	// [string] The name of the server.
	Name *string `pulumi:"name"`
	// See the Nic section.
	Nic CubeServerNic `pulumi:"nic"`
	// The list of Security Group IDs for the resource.
	SecurityGroupsIds []string `pulumi:"securityGroupsIds"`
	// [list] List of paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Required for IonosCloud Linux images. Required if `imagePassword` is not provided.
	SshKeyPaths []string `pulumi:"sshKeyPaths"`
	// [string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
	TemplateUuid string `pulumi:"templateUuid"`
	// [string] Sets the power state of the cube server. E.g: `RUNNING` or `SUSPENDED`.
	VmState *string `pulumi:"vmState"`
	// See the Volume section.
	Volume CubeServerVolume `pulumi:"volume"`
}

// The set of arguments for constructing a CubeServer resource.
type CubeServerArgs struct {
	// [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the server.
	//
	// ⚠️ **_Warning: `allowReplace` - lets you update immutable fields, but it first destroys and then re-creates the server in order to do it. This field should be used with care, understanding the risks._**
	//
	// > **⚠ WARNING**
	// >
	// > Image_name under volume level is deprecated, please use imageName under server level
	//
	// > **⚠ WARNING**
	// >
	// > For creating a **CUBE** server, you can not set `volume.size` argument.
	AllowReplace pulumi.BoolPtrInput
	// [string] The availability zone in which the server should exist. This property is immutable.
	AvailabilityZone pulumi.StringPtrInput
	// ***DEPRECATED*** Please refer to compute.BootDeviceSelection (Optional)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the compute.getImage data source.
	//
	// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
	BootCdrom pulumi.StringPtrInput
	// [string] The image or snapshot UUID / name. May also be an image alias. It is required if `licenceType` is not provided.
	BootImage pulumi.StringPtrInput
	// [string] The ID of a Virtual Data Center.
	DatacenterId pulumi.StringInput
	// (Computed) The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
	Hostname pulumi.StringPtrInput
	// [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licenceType` is not provided. Attribute is immutable.
	ImageName pulumi.StringPtrInput
	// [string] Required if `sshKeyPath` is not provided.
	ImagePassword pulumi.StringPtrInput
	// [string] The name of the server.
	Name pulumi.StringPtrInput
	// See the Nic section.
	Nic CubeServerNicInput
	// The list of Security Group IDs for the resource.
	SecurityGroupsIds pulumi.StringArrayInput
	// [list] List of paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Required for IonosCloud Linux images. Required if `imagePassword` is not provided.
	SshKeyPaths pulumi.StringArrayInput
	// [string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
	TemplateUuid pulumi.StringInput
	// [string] Sets the power state of the cube server. E.g: `RUNNING` or `SUSPENDED`.
	VmState pulumi.StringPtrInput
	// See the Volume section.
	Volume CubeServerVolumeInput
}

func (CubeServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cubeServerArgs)(nil)).Elem()
}

type CubeServerInput interface {
	pulumi.Input

	ToCubeServerOutput() CubeServerOutput
	ToCubeServerOutputWithContext(ctx context.Context) CubeServerOutput
}

func (*CubeServer) ElementType() reflect.Type {
	return reflect.TypeOf((**CubeServer)(nil)).Elem()
}

func (i *CubeServer) ToCubeServerOutput() CubeServerOutput {
	return i.ToCubeServerOutputWithContext(context.Background())
}

func (i *CubeServer) ToCubeServerOutputWithContext(ctx context.Context) CubeServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CubeServerOutput)
}

// CubeServerArrayInput is an input type that accepts CubeServerArray and CubeServerArrayOutput values.
// You can construct a concrete instance of `CubeServerArrayInput` via:
//
//	CubeServerArray{ CubeServerArgs{...} }
type CubeServerArrayInput interface {
	pulumi.Input

	ToCubeServerArrayOutput() CubeServerArrayOutput
	ToCubeServerArrayOutputWithContext(context.Context) CubeServerArrayOutput
}

type CubeServerArray []CubeServerInput

func (CubeServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CubeServer)(nil)).Elem()
}

func (i CubeServerArray) ToCubeServerArrayOutput() CubeServerArrayOutput {
	return i.ToCubeServerArrayOutputWithContext(context.Background())
}

func (i CubeServerArray) ToCubeServerArrayOutputWithContext(ctx context.Context) CubeServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CubeServerArrayOutput)
}

// CubeServerMapInput is an input type that accepts CubeServerMap and CubeServerMapOutput values.
// You can construct a concrete instance of `CubeServerMapInput` via:
//
//	CubeServerMap{ "key": CubeServerArgs{...} }
type CubeServerMapInput interface {
	pulumi.Input

	ToCubeServerMapOutput() CubeServerMapOutput
	ToCubeServerMapOutputWithContext(context.Context) CubeServerMapOutput
}

type CubeServerMap map[string]CubeServerInput

func (CubeServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CubeServer)(nil)).Elem()
}

func (i CubeServerMap) ToCubeServerMapOutput() CubeServerMapOutput {
	return i.ToCubeServerMapOutputWithContext(context.Background())
}

func (i CubeServerMap) ToCubeServerMapOutputWithContext(ctx context.Context) CubeServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CubeServerMapOutput)
}

type CubeServerOutput struct{ *pulumi.OutputState }

func (CubeServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CubeServer)(nil)).Elem()
}

func (o CubeServerOutput) ToCubeServerOutput() CubeServerOutput {
	return o
}

func (o CubeServerOutput) ToCubeServerOutputWithContext(ctx context.Context) CubeServerOutput {
	return o
}

// [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the server.
//
// ⚠️ **_Warning: `allowReplace` - lets you update immutable fields, but it first destroys and then re-creates the server in order to do it. This field should be used with care, understanding the risks._**
//
// > **⚠ WARNING**
// >
// > Image_name under volume level is deprecated, please use imageName under server level
//
// > **⚠ WARNING**
// >
// > For creating a **CUBE** server, you can not set `volume.size` argument.
func (o CubeServerOutput) AllowReplace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.BoolPtrOutput { return v.AllowReplace }).(pulumi.BoolPtrOutput)
}

// [string] The availability zone in which the server should exist. This property is immutable.
func (o CubeServerOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// ***DEPRECATED*** Please refer to compute.BootDeviceSelection (Optional)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the compute.getImage data source.
//
// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
func (o CubeServerOutput) BootCdrom() pulumi.StringOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringOutput { return v.BootCdrom }).(pulumi.StringOutput)
}

// [string] The image or snapshot UUID / name. May also be an image alias. It is required if `licenceType` is not provided.
func (o CubeServerOutput) BootImage() pulumi.StringOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringOutput { return v.BootImage }).(pulumi.StringOutput)
}

// The associated boot volume.
func (o CubeServerOutput) BootVolume() pulumi.StringOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringOutput { return v.BootVolume }).(pulumi.StringOutput)
}

// [string] The ID of a Virtual Data Center.
func (o CubeServerOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringOutput { return v.DatacenterId }).(pulumi.StringOutput)
}

// The associated firewall rule.
func (o CubeServerOutput) FirewallruleId() pulumi.StringOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringOutput { return v.FirewallruleId }).(pulumi.StringOutput)
}

// (Computed) The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
func (o CubeServerOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licenceType` is not provided. Attribute is immutable.
func (o CubeServerOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringOutput { return v.ImageName }).(pulumi.StringOutput)
}

// [string] Required if `sshKeyPath` is not provided.
func (o CubeServerOutput) ImagePassword() pulumi.StringOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringOutput { return v.ImagePassword }).(pulumi.StringOutput)
}

// A list that contains the IDs for the volumes defined inside the cube server resource.
func (o CubeServerOutput) InlineVolumeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringArrayOutput { return v.InlineVolumeIds }).(pulumi.StringArrayOutput)
}

// [string] The name of the server.
func (o CubeServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// See the Nic section.
func (o CubeServerOutput) Nic() CubeServerNicOutput {
	return o.ApplyT(func(v *CubeServer) CubeServerNicOutput { return v.Nic }).(CubeServerNicOutput)
}

// The associated IP address.
func (o CubeServerOutput) PrimaryIp() pulumi.StringOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringOutput { return v.PrimaryIp }).(pulumi.StringOutput)
}

// The associated NIC.
func (o CubeServerOutput) PrimaryNic() pulumi.StringOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringOutput { return v.PrimaryNic }).(pulumi.StringOutput)
}

// The list of Security Group IDs for the resource.
func (o CubeServerOutput) SecurityGroupsIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringArrayOutput { return v.SecurityGroupsIds }).(pulumi.StringArrayOutput)
}

// [list] List of paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Required for IonosCloud Linux images. Required if `imagePassword` is not provided.
func (o CubeServerOutput) SshKeyPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringArrayOutput { return v.SshKeyPaths }).(pulumi.StringArrayOutput)
}

// [string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
func (o CubeServerOutput) TemplateUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringOutput { return v.TemplateUuid }).(pulumi.StringOutput)
}

// [string] Sets the power state of the cube server. E.g: `RUNNING` or `SUSPENDED`.
func (o CubeServerOutput) VmState() pulumi.StringOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringOutput { return v.VmState }).(pulumi.StringOutput)
}

// See the Volume section.
func (o CubeServerOutput) Volume() CubeServerVolumeOutput {
	return o.ApplyT(func(v *CubeServer) CubeServerVolumeOutput { return v.Volume }).(CubeServerVolumeOutput)
}

type CubeServerArrayOutput struct{ *pulumi.OutputState }

func (CubeServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CubeServer)(nil)).Elem()
}

func (o CubeServerArrayOutput) ToCubeServerArrayOutput() CubeServerArrayOutput {
	return o
}

func (o CubeServerArrayOutput) ToCubeServerArrayOutputWithContext(ctx context.Context) CubeServerArrayOutput {
	return o
}

func (o CubeServerArrayOutput) Index(i pulumi.IntInput) CubeServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CubeServer {
		return vs[0].([]*CubeServer)[vs[1].(int)]
	}).(CubeServerOutput)
}

type CubeServerMapOutput struct{ *pulumi.OutputState }

func (CubeServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CubeServer)(nil)).Elem()
}

func (o CubeServerMapOutput) ToCubeServerMapOutput() CubeServerMapOutput {
	return o
}

func (o CubeServerMapOutput) ToCubeServerMapOutputWithContext(ctx context.Context) CubeServerMapOutput {
	return o
}

func (o CubeServerMapOutput) MapIndex(k pulumi.StringInput) CubeServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CubeServer {
		return vs[0].(map[string]*CubeServer)[vs[1].(string)]
	}).(CubeServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CubeServerInput)(nil)).Elem(), &CubeServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*CubeServerArrayInput)(nil)).Elem(), CubeServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CubeServerMapInput)(nil)).Elem(), CubeServerMap{})
	pulumi.RegisterOutputType(CubeServerOutput{})
	pulumi.RegisterOutputType(CubeServerArrayOutput{})
	pulumi.RegisterOutputType(CubeServerMapOutput{})
}
