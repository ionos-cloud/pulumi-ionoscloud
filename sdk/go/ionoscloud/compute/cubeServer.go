// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CubeServer struct {
	pulumi.CustomResourceState

	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
	BootCdrom      pulumi.StringOutput `pulumi:"bootCdrom"`
	BootImage      pulumi.StringOutput `pulumi:"bootImage"`
	BootVolume     pulumi.StringOutput `pulumi:"bootVolume"`
	DatacenterId   pulumi.StringOutput `pulumi:"datacenterId"`
	FirewallruleId pulumi.StringOutput `pulumi:"firewallruleId"`
	ImageName      pulumi.StringOutput `pulumi:"imageName"`
	ImagePassword  pulumi.StringOutput `pulumi:"imagePassword"`
	// A list that contains the IDs for the volumes defined inside the cube server resource.
	InlineVolumeIds pulumi.StringArrayOutput `pulumi:"inlineVolumeIds"`
	Name            pulumi.StringOutput      `pulumi:"name"`
	Nic             CubeServerNicOutput      `pulumi:"nic"`
	PrimaryIp       pulumi.StringOutput      `pulumi:"primaryIp"`
	PrimaryNic      pulumi.StringOutput      `pulumi:"primaryNic"`
	SshKeyPaths     pulumi.StringArrayOutput `pulumi:"sshKeyPaths"`
	TemplateUuid    pulumi.StringOutput      `pulumi:"templateUuid"`
	// Sets the power state of the cube server. Possible values: `RUNNING` or `SUSPENDED`.
	VmState pulumi.StringOutput    `pulumi:"vmState"`
	Volume  CubeServerVolumeOutput `pulumi:"volume"`
}

// NewCubeServer registers a new resource with the given unique name, arguments, and options.
func NewCubeServer(ctx *pulumi.Context,
	name string, args *CubeServerArgs, opts ...pulumi.ResourceOption) (*CubeServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatacenterId == nil {
		return nil, errors.New("invalid value for required argument 'DatacenterId'")
	}
	if args.Nic == nil {
		return nil, errors.New("invalid value for required argument 'Nic'")
	}
	if args.TemplateUuid == nil {
		return nil, errors.New("invalid value for required argument 'TemplateUuid'")
	}
	if args.Volume == nil {
		return nil, errors.New("invalid value for required argument 'Volume'")
	}
	if args.ImagePassword != nil {
		args.ImagePassword = pulumi.ToSecret(args.ImagePassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"imagePassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CubeServer
	err := ctx.RegisterResource("ionoscloud:compute/cubeServer:CubeServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCubeServer gets an existing CubeServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCubeServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CubeServerState, opts ...pulumi.ResourceOption) (*CubeServer, error) {
	var resource CubeServer
	err := ctx.ReadResource("ionoscloud:compute/cubeServer:CubeServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CubeServer resources.
type cubeServerState struct {
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
	BootCdrom      *string `pulumi:"bootCdrom"`
	BootImage      *string `pulumi:"bootImage"`
	BootVolume     *string `pulumi:"bootVolume"`
	DatacenterId   *string `pulumi:"datacenterId"`
	FirewallruleId *string `pulumi:"firewallruleId"`
	ImageName      *string `pulumi:"imageName"`
	ImagePassword  *string `pulumi:"imagePassword"`
	// A list that contains the IDs for the volumes defined inside the cube server resource.
	InlineVolumeIds []string       `pulumi:"inlineVolumeIds"`
	Name            *string        `pulumi:"name"`
	Nic             *CubeServerNic `pulumi:"nic"`
	PrimaryIp       *string        `pulumi:"primaryIp"`
	PrimaryNic      *string        `pulumi:"primaryNic"`
	SshKeyPaths     []string       `pulumi:"sshKeyPaths"`
	TemplateUuid    *string        `pulumi:"templateUuid"`
	// Sets the power state of the cube server. Possible values: `RUNNING` or `SUSPENDED`.
	VmState *string           `pulumi:"vmState"`
	Volume  *CubeServerVolume `pulumi:"volume"`
}

type CubeServerState struct {
	AvailabilityZone pulumi.StringPtrInput
	// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
	BootCdrom      pulumi.StringPtrInput
	BootImage      pulumi.StringPtrInput
	BootVolume     pulumi.StringPtrInput
	DatacenterId   pulumi.StringPtrInput
	FirewallruleId pulumi.StringPtrInput
	ImageName      pulumi.StringPtrInput
	ImagePassword  pulumi.StringPtrInput
	// A list that contains the IDs for the volumes defined inside the cube server resource.
	InlineVolumeIds pulumi.StringArrayInput
	Name            pulumi.StringPtrInput
	Nic             CubeServerNicPtrInput
	PrimaryIp       pulumi.StringPtrInput
	PrimaryNic      pulumi.StringPtrInput
	SshKeyPaths     pulumi.StringArrayInput
	TemplateUuid    pulumi.StringPtrInput
	// Sets the power state of the cube server. Possible values: `RUNNING` or `SUSPENDED`.
	VmState pulumi.StringPtrInput
	Volume  CubeServerVolumePtrInput
}

func (CubeServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*cubeServerState)(nil)).Elem()
}

type cubeServerArgs struct {
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
	BootCdrom     *string       `pulumi:"bootCdrom"`
	BootImage     *string       `pulumi:"bootImage"`
	DatacenterId  string        `pulumi:"datacenterId"`
	ImageName     *string       `pulumi:"imageName"`
	ImagePassword *string       `pulumi:"imagePassword"`
	Name          *string       `pulumi:"name"`
	Nic           CubeServerNic `pulumi:"nic"`
	SshKeyPaths   []string      `pulumi:"sshKeyPaths"`
	TemplateUuid  string        `pulumi:"templateUuid"`
	// Sets the power state of the cube server. Possible values: `RUNNING` or `SUSPENDED`.
	VmState *string          `pulumi:"vmState"`
	Volume  CubeServerVolume `pulumi:"volume"`
}

// The set of arguments for constructing a CubeServer resource.
type CubeServerArgs struct {
	AvailabilityZone pulumi.StringPtrInput
	// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
	BootCdrom     pulumi.StringPtrInput
	BootImage     pulumi.StringPtrInput
	DatacenterId  pulumi.StringInput
	ImageName     pulumi.StringPtrInput
	ImagePassword pulumi.StringPtrInput
	Name          pulumi.StringPtrInput
	Nic           CubeServerNicInput
	SshKeyPaths   pulumi.StringArrayInput
	TemplateUuid  pulumi.StringInput
	// Sets the power state of the cube server. Possible values: `RUNNING` or `SUSPENDED`.
	VmState pulumi.StringPtrInput
	Volume  CubeServerVolumeInput
}

func (CubeServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cubeServerArgs)(nil)).Elem()
}

type CubeServerInput interface {
	pulumi.Input

	ToCubeServerOutput() CubeServerOutput
	ToCubeServerOutputWithContext(ctx context.Context) CubeServerOutput
}

func (*CubeServer) ElementType() reflect.Type {
	return reflect.TypeOf((**CubeServer)(nil)).Elem()
}

func (i *CubeServer) ToCubeServerOutput() CubeServerOutput {
	return i.ToCubeServerOutputWithContext(context.Background())
}

func (i *CubeServer) ToCubeServerOutputWithContext(ctx context.Context) CubeServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CubeServerOutput)
}

// CubeServerArrayInput is an input type that accepts CubeServerArray and CubeServerArrayOutput values.
// You can construct a concrete instance of `CubeServerArrayInput` via:
//
//	CubeServerArray{ CubeServerArgs{...} }
type CubeServerArrayInput interface {
	pulumi.Input

	ToCubeServerArrayOutput() CubeServerArrayOutput
	ToCubeServerArrayOutputWithContext(context.Context) CubeServerArrayOutput
}

type CubeServerArray []CubeServerInput

func (CubeServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CubeServer)(nil)).Elem()
}

func (i CubeServerArray) ToCubeServerArrayOutput() CubeServerArrayOutput {
	return i.ToCubeServerArrayOutputWithContext(context.Background())
}

func (i CubeServerArray) ToCubeServerArrayOutputWithContext(ctx context.Context) CubeServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CubeServerArrayOutput)
}

// CubeServerMapInput is an input type that accepts CubeServerMap and CubeServerMapOutput values.
// You can construct a concrete instance of `CubeServerMapInput` via:
//
//	CubeServerMap{ "key": CubeServerArgs{...} }
type CubeServerMapInput interface {
	pulumi.Input

	ToCubeServerMapOutput() CubeServerMapOutput
	ToCubeServerMapOutputWithContext(context.Context) CubeServerMapOutput
}

type CubeServerMap map[string]CubeServerInput

func (CubeServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CubeServer)(nil)).Elem()
}

func (i CubeServerMap) ToCubeServerMapOutput() CubeServerMapOutput {
	return i.ToCubeServerMapOutputWithContext(context.Background())
}

func (i CubeServerMap) ToCubeServerMapOutputWithContext(ctx context.Context) CubeServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CubeServerMapOutput)
}

type CubeServerOutput struct{ *pulumi.OutputState }

func (CubeServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CubeServer)(nil)).Elem()
}

func (o CubeServerOutput) ToCubeServerOutput() CubeServerOutput {
	return o
}

func (o CubeServerOutput) ToCubeServerOutputWithContext(ctx context.Context) CubeServerOutput {
	return o
}

func (o CubeServerOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
func (o CubeServerOutput) BootCdrom() pulumi.StringOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringOutput { return v.BootCdrom }).(pulumi.StringOutput)
}

func (o CubeServerOutput) BootImage() pulumi.StringOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringOutput { return v.BootImage }).(pulumi.StringOutput)
}

func (o CubeServerOutput) BootVolume() pulumi.StringOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringOutput { return v.BootVolume }).(pulumi.StringOutput)
}

func (o CubeServerOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringOutput { return v.DatacenterId }).(pulumi.StringOutput)
}

func (o CubeServerOutput) FirewallruleId() pulumi.StringOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringOutput { return v.FirewallruleId }).(pulumi.StringOutput)
}

func (o CubeServerOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringOutput { return v.ImageName }).(pulumi.StringOutput)
}

func (o CubeServerOutput) ImagePassword() pulumi.StringOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringOutput { return v.ImagePassword }).(pulumi.StringOutput)
}

// A list that contains the IDs for the volumes defined inside the cube server resource.
func (o CubeServerOutput) InlineVolumeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringArrayOutput { return v.InlineVolumeIds }).(pulumi.StringArrayOutput)
}

func (o CubeServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CubeServerOutput) Nic() CubeServerNicOutput {
	return o.ApplyT(func(v *CubeServer) CubeServerNicOutput { return v.Nic }).(CubeServerNicOutput)
}

func (o CubeServerOutput) PrimaryIp() pulumi.StringOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringOutput { return v.PrimaryIp }).(pulumi.StringOutput)
}

func (o CubeServerOutput) PrimaryNic() pulumi.StringOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringOutput { return v.PrimaryNic }).(pulumi.StringOutput)
}

func (o CubeServerOutput) SshKeyPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringArrayOutput { return v.SshKeyPaths }).(pulumi.StringArrayOutput)
}

func (o CubeServerOutput) TemplateUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringOutput { return v.TemplateUuid }).(pulumi.StringOutput)
}

// Sets the power state of the cube server. Possible values: `RUNNING` or `SUSPENDED`.
func (o CubeServerOutput) VmState() pulumi.StringOutput {
	return o.ApplyT(func(v *CubeServer) pulumi.StringOutput { return v.VmState }).(pulumi.StringOutput)
}

func (o CubeServerOutput) Volume() CubeServerVolumeOutput {
	return o.ApplyT(func(v *CubeServer) CubeServerVolumeOutput { return v.Volume }).(CubeServerVolumeOutput)
}

type CubeServerArrayOutput struct{ *pulumi.OutputState }

func (CubeServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CubeServer)(nil)).Elem()
}

func (o CubeServerArrayOutput) ToCubeServerArrayOutput() CubeServerArrayOutput {
	return o
}

func (o CubeServerArrayOutput) ToCubeServerArrayOutputWithContext(ctx context.Context) CubeServerArrayOutput {
	return o
}

func (o CubeServerArrayOutput) Index(i pulumi.IntInput) CubeServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CubeServer {
		return vs[0].([]*CubeServer)[vs[1].(int)]
	}).(CubeServerOutput)
}

type CubeServerMapOutput struct{ *pulumi.OutputState }

func (CubeServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CubeServer)(nil)).Elem()
}

func (o CubeServerMapOutput) ToCubeServerMapOutput() CubeServerMapOutput {
	return o
}

func (o CubeServerMapOutput) ToCubeServerMapOutputWithContext(ctx context.Context) CubeServerMapOutput {
	return o
}

func (o CubeServerMapOutput) MapIndex(k pulumi.StringInput) CubeServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CubeServer {
		return vs[0].(map[string]*CubeServer)[vs[1].(string)]
	}).(CubeServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CubeServerInput)(nil)).Elem(), &CubeServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*CubeServerArrayInput)(nil)).Elem(), CubeServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CubeServerMapInput)(nil)).Elem(), CubeServerMap{})
	pulumi.RegisterOutputType(CubeServerOutput{})
	pulumi.RegisterOutputType(CubeServerArrayOutput{})
	pulumi.RegisterOutputType(CubeServerMapOutput{})
}
