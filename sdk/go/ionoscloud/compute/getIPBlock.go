// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **IP Block data source** can be used to search for and return an existing Ip Block.
// You can provide a string for the id, the name or the location parameters which will be compared with the provisioned Ip Blocks.
// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
// When this happens, please refine your search string so that it is specific enough to return only one result.
//
// ## Example Usage
//
// ### By ID
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.LookupIPBlock(ctx, &compute.LookupIPBlockArgs{
//				Id: pulumi.StringRef("ipblock_id"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### By Name
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.LookupIPBlock(ctx, &compute.LookupIPBlockArgs{
//				Name: pulumi.StringRef("IP Block Name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### By Location
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := compute.LookupIPBlock(ctx, &compute.LookupIPBlockArgs{
//				Location: pulumi.StringRef("us/las"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### By Name & Location
func LookupIPBlock(ctx *pulumi.Context, args *LookupIPBlockArgs, opts ...pulumi.InvokeOption) (*LookupIPBlockResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIPBlockResult
	err := ctx.Invoke("ionoscloud:compute/getIPBlock:getIPBlock", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIPBlock.
type LookupIPBlockArgs struct {
	// ID of an existing Ip Block that you want to search for.
	Id *string `pulumi:"id"`
	// The regional location for this IP Block: us/las, us/ewr, de/fra, de/fkb.
	Location *string `pulumi:"location"`
	// Name of an existing Ip Block that you want to search for.
	Name *string `pulumi:"name"`
	// The number of IP addresses to reserve for this block.
	Size *int `pulumi:"size"`
}

// A collection of values returned by getIPBlock.
type LookupIPBlockResult struct {
	// The id of Ip Block
	Id string `pulumi:"id"`
	// Read-Only attribute. Lists consumption detail of an individual ip
	IpConsumers []GetIPBlockIpConsumer `pulumi:"ipConsumers"`
	// The list of IP addresses associated with this block.
	Ips []string `pulumi:"ips"`
	// The regional location for this IP Block: us/las, us/ewr, de/fra, de/fkb.
	Location string `pulumi:"location"`
	// The name of Ip Block
	Name string `pulumi:"name"`
	// The number of IP addresses to reserve for this block.
	Size int `pulumi:"size"`
}

func LookupIPBlockOutput(ctx *pulumi.Context, args LookupIPBlockOutputArgs, opts ...pulumi.InvokeOption) LookupIPBlockResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupIPBlockResultOutput, error) {
			args := v.(LookupIPBlockArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ionoscloud:compute/getIPBlock:getIPBlock", args, LookupIPBlockResultOutput{}, options).(LookupIPBlockResultOutput), nil
		}).(LookupIPBlockResultOutput)
}

// A collection of arguments for invoking getIPBlock.
type LookupIPBlockOutputArgs struct {
	// ID of an existing Ip Block that you want to search for.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The regional location for this IP Block: us/las, us/ewr, de/fra, de/fkb.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Name of an existing Ip Block that you want to search for.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The number of IP addresses to reserve for this block.
	Size pulumi.IntPtrInput `pulumi:"size"`
}

func (LookupIPBlockOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIPBlockArgs)(nil)).Elem()
}

// A collection of values returned by getIPBlock.
type LookupIPBlockResultOutput struct{ *pulumi.OutputState }

func (LookupIPBlockResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIPBlockResult)(nil)).Elem()
}

func (o LookupIPBlockResultOutput) ToLookupIPBlockResultOutput() LookupIPBlockResultOutput {
	return o
}

func (o LookupIPBlockResultOutput) ToLookupIPBlockResultOutputWithContext(ctx context.Context) LookupIPBlockResultOutput {
	return o
}

// The id of Ip Block
func (o LookupIPBlockResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIPBlockResult) string { return v.Id }).(pulumi.StringOutput)
}

// Read-Only attribute. Lists consumption detail of an individual ip
func (o LookupIPBlockResultOutput) IpConsumers() GetIPBlockIpConsumerArrayOutput {
	return o.ApplyT(func(v LookupIPBlockResult) []GetIPBlockIpConsumer { return v.IpConsumers }).(GetIPBlockIpConsumerArrayOutput)
}

// The list of IP addresses associated with this block.
func (o LookupIPBlockResultOutput) Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupIPBlockResult) []string { return v.Ips }).(pulumi.StringArrayOutput)
}

// The regional location for this IP Block: us/las, us/ewr, de/fra, de/fkb.
func (o LookupIPBlockResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIPBlockResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name of Ip Block
func (o LookupIPBlockResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIPBlockResult) string { return v.Name }).(pulumi.StringOutput)
}

// The number of IP addresses to reserve for this block.
func (o LookupIPBlockResultOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v LookupIPBlockResult) int { return v.Size }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIPBlockResultOutput{})
}
