// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Datacenter struct {
	pulumi.CustomResourceState

	CpuArchitectures DatacenterCpuArchitectureArrayOutput `pulumi:"cpuArchitectures"`
	// A description for the datacenter, e.g. staging, production
	Description pulumi.StringOutput      `pulumi:"description"`
	Features    pulumi.StringArrayOutput `pulumi:"features"`
	// Auto-assigned /56 IPv6 CIDR block, if IPv6 is enabled for the datacenter. Read-only
	Ipv6CidrBlock     pulumi.StringOutput  `pulumi:"ipv6CidrBlock"`
	Location          pulumi.StringOutput  `pulumi:"location"`
	Name              pulumi.StringOutput  `pulumi:"name"`
	SecAuthProtection pulumi.BoolPtrOutput `pulumi:"secAuthProtection"`
	Version           pulumi.IntOutput     `pulumi:"version"`
}

// NewDatacenter registers a new resource with the given unique name, arguments, and options.
func NewDatacenter(ctx *pulumi.Context,
	name string, args *DatacenterArgs, opts ...pulumi.ResourceOption) (*Datacenter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Datacenter
	err := ctx.RegisterResource("ionoscloud:compute/datacenter:Datacenter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatacenter gets an existing Datacenter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatacenter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatacenterState, opts ...pulumi.ResourceOption) (*Datacenter, error) {
	var resource Datacenter
	err := ctx.ReadResource("ionoscloud:compute/datacenter:Datacenter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Datacenter resources.
type datacenterState struct {
	CpuArchitectures []DatacenterCpuArchitecture `pulumi:"cpuArchitectures"`
	// A description for the datacenter, e.g. staging, production
	Description *string  `pulumi:"description"`
	Features    []string `pulumi:"features"`
	// Auto-assigned /56 IPv6 CIDR block, if IPv6 is enabled for the datacenter. Read-only
	Ipv6CidrBlock     *string `pulumi:"ipv6CidrBlock"`
	Location          *string `pulumi:"location"`
	Name              *string `pulumi:"name"`
	SecAuthProtection *bool   `pulumi:"secAuthProtection"`
	Version           *int    `pulumi:"version"`
}

type DatacenterState struct {
	CpuArchitectures DatacenterCpuArchitectureArrayInput
	// A description for the datacenter, e.g. staging, production
	Description pulumi.StringPtrInput
	Features    pulumi.StringArrayInput
	// Auto-assigned /56 IPv6 CIDR block, if IPv6 is enabled for the datacenter. Read-only
	Ipv6CidrBlock     pulumi.StringPtrInput
	Location          pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	SecAuthProtection pulumi.BoolPtrInput
	Version           pulumi.IntPtrInput
}

func (DatacenterState) ElementType() reflect.Type {
	return reflect.TypeOf((*datacenterState)(nil)).Elem()
}

type datacenterArgs struct {
	// A description for the datacenter, e.g. staging, production
	Description       *string `pulumi:"description"`
	Location          string  `pulumi:"location"`
	Name              *string `pulumi:"name"`
	SecAuthProtection *bool   `pulumi:"secAuthProtection"`
}

// The set of arguments for constructing a Datacenter resource.
type DatacenterArgs struct {
	// A description for the datacenter, e.g. staging, production
	Description       pulumi.StringPtrInput
	Location          pulumi.StringInput
	Name              pulumi.StringPtrInput
	SecAuthProtection pulumi.BoolPtrInput
}

func (DatacenterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datacenterArgs)(nil)).Elem()
}

type DatacenterInput interface {
	pulumi.Input

	ToDatacenterOutput() DatacenterOutput
	ToDatacenterOutputWithContext(ctx context.Context) DatacenterOutput
}

func (*Datacenter) ElementType() reflect.Type {
	return reflect.TypeOf((**Datacenter)(nil)).Elem()
}

func (i *Datacenter) ToDatacenterOutput() DatacenterOutput {
	return i.ToDatacenterOutputWithContext(context.Background())
}

func (i *Datacenter) ToDatacenterOutputWithContext(ctx context.Context) DatacenterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacenterOutput)
}

// DatacenterArrayInput is an input type that accepts DatacenterArray and DatacenterArrayOutput values.
// You can construct a concrete instance of `DatacenterArrayInput` via:
//
//	DatacenterArray{ DatacenterArgs{...} }
type DatacenterArrayInput interface {
	pulumi.Input

	ToDatacenterArrayOutput() DatacenterArrayOutput
	ToDatacenterArrayOutputWithContext(context.Context) DatacenterArrayOutput
}

type DatacenterArray []DatacenterInput

func (DatacenterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Datacenter)(nil)).Elem()
}

func (i DatacenterArray) ToDatacenterArrayOutput() DatacenterArrayOutput {
	return i.ToDatacenterArrayOutputWithContext(context.Background())
}

func (i DatacenterArray) ToDatacenterArrayOutputWithContext(ctx context.Context) DatacenterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacenterArrayOutput)
}

// DatacenterMapInput is an input type that accepts DatacenterMap and DatacenterMapOutput values.
// You can construct a concrete instance of `DatacenterMapInput` via:
//
//	DatacenterMap{ "key": DatacenterArgs{...} }
type DatacenterMapInput interface {
	pulumi.Input

	ToDatacenterMapOutput() DatacenterMapOutput
	ToDatacenterMapOutputWithContext(context.Context) DatacenterMapOutput
}

type DatacenterMap map[string]DatacenterInput

func (DatacenterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Datacenter)(nil)).Elem()
}

func (i DatacenterMap) ToDatacenterMapOutput() DatacenterMapOutput {
	return i.ToDatacenterMapOutputWithContext(context.Background())
}

func (i DatacenterMap) ToDatacenterMapOutputWithContext(ctx context.Context) DatacenterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacenterMapOutput)
}

type DatacenterOutput struct{ *pulumi.OutputState }

func (DatacenterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Datacenter)(nil)).Elem()
}

func (o DatacenterOutput) ToDatacenterOutput() DatacenterOutput {
	return o
}

func (o DatacenterOutput) ToDatacenterOutputWithContext(ctx context.Context) DatacenterOutput {
	return o
}

func (o DatacenterOutput) CpuArchitectures() DatacenterCpuArchitectureArrayOutput {
	return o.ApplyT(func(v *Datacenter) DatacenterCpuArchitectureArrayOutput { return v.CpuArchitectures }).(DatacenterCpuArchitectureArrayOutput)
}

// A description for the datacenter, e.g. staging, production
func (o DatacenterOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Datacenter) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o DatacenterOutput) Features() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Datacenter) pulumi.StringArrayOutput { return v.Features }).(pulumi.StringArrayOutput)
}

// Auto-assigned /56 IPv6 CIDR block, if IPv6 is enabled for the datacenter. Read-only
func (o DatacenterOutput) Ipv6CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *Datacenter) pulumi.StringOutput { return v.Ipv6CidrBlock }).(pulumi.StringOutput)
}

func (o DatacenterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Datacenter) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o DatacenterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Datacenter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DatacenterOutput) SecAuthProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Datacenter) pulumi.BoolPtrOutput { return v.SecAuthProtection }).(pulumi.BoolPtrOutput)
}

func (o DatacenterOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *Datacenter) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type DatacenterArrayOutput struct{ *pulumi.OutputState }

func (DatacenterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Datacenter)(nil)).Elem()
}

func (o DatacenterArrayOutput) ToDatacenterArrayOutput() DatacenterArrayOutput {
	return o
}

func (o DatacenterArrayOutput) ToDatacenterArrayOutputWithContext(ctx context.Context) DatacenterArrayOutput {
	return o
}

func (o DatacenterArrayOutput) Index(i pulumi.IntInput) DatacenterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Datacenter {
		return vs[0].([]*Datacenter)[vs[1].(int)]
	}).(DatacenterOutput)
}

type DatacenterMapOutput struct{ *pulumi.OutputState }

func (DatacenterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Datacenter)(nil)).Elem()
}

func (o DatacenterMapOutput) ToDatacenterMapOutput() DatacenterMapOutput {
	return o
}

func (o DatacenterMapOutput) ToDatacenterMapOutputWithContext(ctx context.Context) DatacenterMapOutput {
	return o
}

func (o DatacenterMapOutput) MapIndex(k pulumi.StringInput) DatacenterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Datacenter {
		return vs[0].(map[string]*Datacenter)[vs[1].(string)]
	}).(DatacenterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatacenterInput)(nil)).Elem(), &Datacenter{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatacenterArrayInput)(nil)).Elem(), DatacenterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatacenterMapInput)(nil)).Elem(), DatacenterMap{})
	pulumi.RegisterOutputType(DatacenterOutput{})
	pulumi.RegisterOutputType(DatacenterArrayOutput{})
	pulumi.RegisterOutputType(DatacenterMapOutput{})
}
