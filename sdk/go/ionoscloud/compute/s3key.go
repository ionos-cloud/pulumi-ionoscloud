// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an **IONOS Object Storage Key** on IonosCloud.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleUser, err := compute.NewUser(ctx, "exampleUser", &compute.UserArgs{
//				FirstName:     pulumi.String("example"),
//				LastName:      pulumi.String("example"),
//				Email:         pulumi.String("unique@email.com"),
//				Password:      pulumi.String("abc123-321CBA"),
//				Administrator: pulumi.Bool(false),
//				ForceSecAuth:  pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewS3Key(ctx, "exampleS3Key", &compute.S3KeyArgs{
//				UserId: exampleUser.ID(),
//				Active: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// An IONOS Object Storage Unit resource can be imported using its user id as well as its `resource id`, e.g.
//
// ```sh
// $ pulumi import ionoscloud:compute/s3Key:S3Key demo {userId}/{s3KeyId}
// ```
//
// This can be helpful when you want to import IONOS Object Storage Keys which you have already created manually or using other means, outside of terraform.
type S3Key struct {
	pulumi.CustomResourceState

	// [boolean] Whether the IONOS Object Storage is active / enabled or not - Please keep in mind this is only required on create. Default value in true
	Active pulumi.BoolPtrOutput `pulumi:"active"`
	// The IONOS Object Storage Secret key.
	SecretKey pulumi.StringOutput `pulumi:"secretKey"`
	// [string] The UUID of the user owning the IONOS Object Storage Key.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewS3Key registers a new resource with the given unique name, arguments, and options.
func NewS3Key(ctx *pulumi.Context,
	name string, args *S3KeyArgs, opts ...pulumi.ResourceOption) (*S3Key, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("ionoscloud:index/s3Key:S3Key"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource S3Key
	err := ctx.RegisterResource("ionoscloud:compute/s3Key:S3Key", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetS3Key gets an existing S3Key resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetS3Key(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *S3KeyState, opts ...pulumi.ResourceOption) (*S3Key, error) {
	var resource S3Key
	err := ctx.ReadResource("ionoscloud:compute/s3Key:S3Key", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering S3Key resources.
type s3keyState struct {
	// [boolean] Whether the IONOS Object Storage is active / enabled or not - Please keep in mind this is only required on create. Default value in true
	Active *bool `pulumi:"active"`
	// The IONOS Object Storage Secret key.
	SecretKey *string `pulumi:"secretKey"`
	// [string] The UUID of the user owning the IONOS Object Storage Key.
	UserId *string `pulumi:"userId"`
}

type S3KeyState struct {
	// [boolean] Whether the IONOS Object Storage is active / enabled or not - Please keep in mind this is only required on create. Default value in true
	Active pulumi.BoolPtrInput
	// The IONOS Object Storage Secret key.
	SecretKey pulumi.StringPtrInput
	// [string] The UUID of the user owning the IONOS Object Storage Key.
	UserId pulumi.StringPtrInput
}

func (S3KeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*s3keyState)(nil)).Elem()
}

type s3keyArgs struct {
	// [boolean] Whether the IONOS Object Storage is active / enabled or not - Please keep in mind this is only required on create. Default value in true
	Active *bool `pulumi:"active"`
	// [string] The UUID of the user owning the IONOS Object Storage Key.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a S3Key resource.
type S3KeyArgs struct {
	// [boolean] Whether the IONOS Object Storage is active / enabled or not - Please keep in mind this is only required on create. Default value in true
	Active pulumi.BoolPtrInput
	// [string] The UUID of the user owning the IONOS Object Storage Key.
	UserId pulumi.StringInput
}

func (S3KeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*s3keyArgs)(nil)).Elem()
}

type S3KeyInput interface {
	pulumi.Input

	ToS3KeyOutput() S3KeyOutput
	ToS3KeyOutputWithContext(ctx context.Context) S3KeyOutput
}

func (*S3Key) ElementType() reflect.Type {
	return reflect.TypeOf((**S3Key)(nil)).Elem()
}

func (i *S3Key) ToS3KeyOutput() S3KeyOutput {
	return i.ToS3KeyOutputWithContext(context.Background())
}

func (i *S3Key) ToS3KeyOutputWithContext(ctx context.Context) S3KeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3KeyOutput)
}

// S3KeyArrayInput is an input type that accepts S3KeyArray and S3KeyArrayOutput values.
// You can construct a concrete instance of `S3KeyArrayInput` via:
//
//	S3KeyArray{ S3KeyArgs{...} }
type S3KeyArrayInput interface {
	pulumi.Input

	ToS3KeyArrayOutput() S3KeyArrayOutput
	ToS3KeyArrayOutputWithContext(context.Context) S3KeyArrayOutput
}

type S3KeyArray []S3KeyInput

func (S3KeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*S3Key)(nil)).Elem()
}

func (i S3KeyArray) ToS3KeyArrayOutput() S3KeyArrayOutput {
	return i.ToS3KeyArrayOutputWithContext(context.Background())
}

func (i S3KeyArray) ToS3KeyArrayOutputWithContext(ctx context.Context) S3KeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3KeyArrayOutput)
}

// S3KeyMapInput is an input type that accepts S3KeyMap and S3KeyMapOutput values.
// You can construct a concrete instance of `S3KeyMapInput` via:
//
//	S3KeyMap{ "key": S3KeyArgs{...} }
type S3KeyMapInput interface {
	pulumi.Input

	ToS3KeyMapOutput() S3KeyMapOutput
	ToS3KeyMapOutputWithContext(context.Context) S3KeyMapOutput
}

type S3KeyMap map[string]S3KeyInput

func (S3KeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*S3Key)(nil)).Elem()
}

func (i S3KeyMap) ToS3KeyMapOutput() S3KeyMapOutput {
	return i.ToS3KeyMapOutputWithContext(context.Background())
}

func (i S3KeyMap) ToS3KeyMapOutputWithContext(ctx context.Context) S3KeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3KeyMapOutput)
}

type S3KeyOutput struct{ *pulumi.OutputState }

func (S3KeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**S3Key)(nil)).Elem()
}

func (o S3KeyOutput) ToS3KeyOutput() S3KeyOutput {
	return o
}

func (o S3KeyOutput) ToS3KeyOutputWithContext(ctx context.Context) S3KeyOutput {
	return o
}

// [boolean] Whether the IONOS Object Storage is active / enabled or not - Please keep in mind this is only required on create. Default value in true
func (o S3KeyOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *S3Key) pulumi.BoolPtrOutput { return v.Active }).(pulumi.BoolPtrOutput)
}

// The IONOS Object Storage Secret key.
func (o S3KeyOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Key) pulumi.StringOutput { return v.SecretKey }).(pulumi.StringOutput)
}

// [string] The UUID of the user owning the IONOS Object Storage Key.
func (o S3KeyOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Key) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type S3KeyArrayOutput struct{ *pulumi.OutputState }

func (S3KeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*S3Key)(nil)).Elem()
}

func (o S3KeyArrayOutput) ToS3KeyArrayOutput() S3KeyArrayOutput {
	return o
}

func (o S3KeyArrayOutput) ToS3KeyArrayOutputWithContext(ctx context.Context) S3KeyArrayOutput {
	return o
}

func (o S3KeyArrayOutput) Index(i pulumi.IntInput) S3KeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *S3Key {
		return vs[0].([]*S3Key)[vs[1].(int)]
	}).(S3KeyOutput)
}

type S3KeyMapOutput struct{ *pulumi.OutputState }

func (S3KeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*S3Key)(nil)).Elem()
}

func (o S3KeyMapOutput) ToS3KeyMapOutput() S3KeyMapOutput {
	return o
}

func (o S3KeyMapOutput) ToS3KeyMapOutputWithContext(ctx context.Context) S3KeyMapOutput {
	return o
}

func (o S3KeyMapOutput) MapIndex(k pulumi.StringInput) S3KeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *S3Key {
		return vs[0].(map[string]*S3Key)[vs[1].(string)]
	}).(S3KeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*S3KeyInput)(nil)).Elem(), &S3Key{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3KeyArrayInput)(nil)).Elem(), S3KeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3KeyMapInput)(nil)).Elem(), S3KeyMap{})
	pulumi.RegisterOutputType(S3KeyOutput{})
	pulumi.RegisterOutputType(S3KeyArrayOutput{})
	pulumi.RegisterOutputType(S3KeyMapOutput{})
}
