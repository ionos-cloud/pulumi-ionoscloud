// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CrossconnectConnectableDatacenter struct {
	// The UUID of the connectable datacenter
	Id *string `pulumi:"id"`
	// The location of the cross-connected datacenter
	Location *string `pulumi:"location"`
	// The name of the connectable datacenter
	Name *string `pulumi:"name"`
}

// CrossconnectConnectableDatacenterInput is an input type that accepts CrossconnectConnectableDatacenterArgs and CrossconnectConnectableDatacenterOutput values.
// You can construct a concrete instance of `CrossconnectConnectableDatacenterInput` via:
//
//	CrossconnectConnectableDatacenterArgs{...}
type CrossconnectConnectableDatacenterInput interface {
	pulumi.Input

	ToCrossconnectConnectableDatacenterOutput() CrossconnectConnectableDatacenterOutput
	ToCrossconnectConnectableDatacenterOutputWithContext(context.Context) CrossconnectConnectableDatacenterOutput
}

type CrossconnectConnectableDatacenterArgs struct {
	// The UUID of the connectable datacenter
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The location of the cross-connected datacenter
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The name of the connectable datacenter
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CrossconnectConnectableDatacenterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrossconnectConnectableDatacenter)(nil)).Elem()
}

func (i CrossconnectConnectableDatacenterArgs) ToCrossconnectConnectableDatacenterOutput() CrossconnectConnectableDatacenterOutput {
	return i.ToCrossconnectConnectableDatacenterOutputWithContext(context.Background())
}

func (i CrossconnectConnectableDatacenterArgs) ToCrossconnectConnectableDatacenterOutputWithContext(ctx context.Context) CrossconnectConnectableDatacenterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossconnectConnectableDatacenterOutput)
}

// CrossconnectConnectableDatacenterArrayInput is an input type that accepts CrossconnectConnectableDatacenterArray and CrossconnectConnectableDatacenterArrayOutput values.
// You can construct a concrete instance of `CrossconnectConnectableDatacenterArrayInput` via:
//
//	CrossconnectConnectableDatacenterArray{ CrossconnectConnectableDatacenterArgs{...} }
type CrossconnectConnectableDatacenterArrayInput interface {
	pulumi.Input

	ToCrossconnectConnectableDatacenterArrayOutput() CrossconnectConnectableDatacenterArrayOutput
	ToCrossconnectConnectableDatacenterArrayOutputWithContext(context.Context) CrossconnectConnectableDatacenterArrayOutput
}

type CrossconnectConnectableDatacenterArray []CrossconnectConnectableDatacenterInput

func (CrossconnectConnectableDatacenterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrossconnectConnectableDatacenter)(nil)).Elem()
}

func (i CrossconnectConnectableDatacenterArray) ToCrossconnectConnectableDatacenterArrayOutput() CrossconnectConnectableDatacenterArrayOutput {
	return i.ToCrossconnectConnectableDatacenterArrayOutputWithContext(context.Background())
}

func (i CrossconnectConnectableDatacenterArray) ToCrossconnectConnectableDatacenterArrayOutputWithContext(ctx context.Context) CrossconnectConnectableDatacenterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossconnectConnectableDatacenterArrayOutput)
}

type CrossconnectConnectableDatacenterOutput struct{ *pulumi.OutputState }

func (CrossconnectConnectableDatacenterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrossconnectConnectableDatacenter)(nil)).Elem()
}

func (o CrossconnectConnectableDatacenterOutput) ToCrossconnectConnectableDatacenterOutput() CrossconnectConnectableDatacenterOutput {
	return o
}

func (o CrossconnectConnectableDatacenterOutput) ToCrossconnectConnectableDatacenterOutputWithContext(ctx context.Context) CrossconnectConnectableDatacenterOutput {
	return o
}

// The UUID of the connectable datacenter
func (o CrossconnectConnectableDatacenterOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrossconnectConnectableDatacenter) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The location of the cross-connected datacenter
func (o CrossconnectConnectableDatacenterOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrossconnectConnectableDatacenter) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the connectable datacenter
func (o CrossconnectConnectableDatacenterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrossconnectConnectableDatacenter) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CrossconnectConnectableDatacenterArrayOutput struct{ *pulumi.OutputState }

func (CrossconnectConnectableDatacenterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrossconnectConnectableDatacenter)(nil)).Elem()
}

func (o CrossconnectConnectableDatacenterArrayOutput) ToCrossconnectConnectableDatacenterArrayOutput() CrossconnectConnectableDatacenterArrayOutput {
	return o
}

func (o CrossconnectConnectableDatacenterArrayOutput) ToCrossconnectConnectableDatacenterArrayOutputWithContext(ctx context.Context) CrossconnectConnectableDatacenterArrayOutput {
	return o
}

func (o CrossconnectConnectableDatacenterArrayOutput) Index(i pulumi.IntInput) CrossconnectConnectableDatacenterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CrossconnectConnectableDatacenter {
		return vs[0].([]CrossconnectConnectableDatacenter)[vs[1].(int)]
	}).(CrossconnectConnectableDatacenterOutput)
}

type CrossconnectPeer struct {
	// The id of the cross-connected datacenter
	DatacenterId *string `pulumi:"datacenterId"`
	// The name of the cross-connected datacenter
	DatacenterName *string `pulumi:"datacenterName"`
	// The id of the cross-connected LAN
	LanId *string `pulumi:"lanId"`
	// The name of the cross-connected LAN
	LanName *string `pulumi:"lanName"`
	// The location of the cross-connected datacenter
	Location *string `pulumi:"location"`
}

// CrossconnectPeerInput is an input type that accepts CrossconnectPeerArgs and CrossconnectPeerOutput values.
// You can construct a concrete instance of `CrossconnectPeerInput` via:
//
//	CrossconnectPeerArgs{...}
type CrossconnectPeerInput interface {
	pulumi.Input

	ToCrossconnectPeerOutput() CrossconnectPeerOutput
	ToCrossconnectPeerOutputWithContext(context.Context) CrossconnectPeerOutput
}

type CrossconnectPeerArgs struct {
	// The id of the cross-connected datacenter
	DatacenterId pulumi.StringPtrInput `pulumi:"datacenterId"`
	// The name of the cross-connected datacenter
	DatacenterName pulumi.StringPtrInput `pulumi:"datacenterName"`
	// The id of the cross-connected LAN
	LanId pulumi.StringPtrInput `pulumi:"lanId"`
	// The name of the cross-connected LAN
	LanName pulumi.StringPtrInput `pulumi:"lanName"`
	// The location of the cross-connected datacenter
	Location pulumi.StringPtrInput `pulumi:"location"`
}

func (CrossconnectPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrossconnectPeer)(nil)).Elem()
}

func (i CrossconnectPeerArgs) ToCrossconnectPeerOutput() CrossconnectPeerOutput {
	return i.ToCrossconnectPeerOutputWithContext(context.Background())
}

func (i CrossconnectPeerArgs) ToCrossconnectPeerOutputWithContext(ctx context.Context) CrossconnectPeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossconnectPeerOutput)
}

// CrossconnectPeerArrayInput is an input type that accepts CrossconnectPeerArray and CrossconnectPeerArrayOutput values.
// You can construct a concrete instance of `CrossconnectPeerArrayInput` via:
//
//	CrossconnectPeerArray{ CrossconnectPeerArgs{...} }
type CrossconnectPeerArrayInput interface {
	pulumi.Input

	ToCrossconnectPeerArrayOutput() CrossconnectPeerArrayOutput
	ToCrossconnectPeerArrayOutputWithContext(context.Context) CrossconnectPeerArrayOutput
}

type CrossconnectPeerArray []CrossconnectPeerInput

func (CrossconnectPeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrossconnectPeer)(nil)).Elem()
}

func (i CrossconnectPeerArray) ToCrossconnectPeerArrayOutput() CrossconnectPeerArrayOutput {
	return i.ToCrossconnectPeerArrayOutputWithContext(context.Background())
}

func (i CrossconnectPeerArray) ToCrossconnectPeerArrayOutputWithContext(ctx context.Context) CrossconnectPeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossconnectPeerArrayOutput)
}

type CrossconnectPeerOutput struct{ *pulumi.OutputState }

func (CrossconnectPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrossconnectPeer)(nil)).Elem()
}

func (o CrossconnectPeerOutput) ToCrossconnectPeerOutput() CrossconnectPeerOutput {
	return o
}

func (o CrossconnectPeerOutput) ToCrossconnectPeerOutputWithContext(ctx context.Context) CrossconnectPeerOutput {
	return o
}

// The id of the cross-connected datacenter
func (o CrossconnectPeerOutput) DatacenterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrossconnectPeer) *string { return v.DatacenterId }).(pulumi.StringPtrOutput)
}

// The name of the cross-connected datacenter
func (o CrossconnectPeerOutput) DatacenterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrossconnectPeer) *string { return v.DatacenterName }).(pulumi.StringPtrOutput)
}

// The id of the cross-connected LAN
func (o CrossconnectPeerOutput) LanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrossconnectPeer) *string { return v.LanId }).(pulumi.StringPtrOutput)
}

// The name of the cross-connected LAN
func (o CrossconnectPeerOutput) LanName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrossconnectPeer) *string { return v.LanName }).(pulumi.StringPtrOutput)
}

// The location of the cross-connected datacenter
func (o CrossconnectPeerOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrossconnectPeer) *string { return v.Location }).(pulumi.StringPtrOutput)
}

type CrossconnectPeerArrayOutput struct{ *pulumi.OutputState }

func (CrossconnectPeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrossconnectPeer)(nil)).Elem()
}

func (o CrossconnectPeerArrayOutput) ToCrossconnectPeerArrayOutput() CrossconnectPeerArrayOutput {
	return o
}

func (o CrossconnectPeerArrayOutput) ToCrossconnectPeerArrayOutputWithContext(ctx context.Context) CrossconnectPeerArrayOutput {
	return o
}

func (o CrossconnectPeerArrayOutput) Index(i pulumi.IntInput) CrossconnectPeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CrossconnectPeer {
		return vs[0].([]CrossconnectPeer)[vs[1].(int)]
	}).(CrossconnectPeerOutput)
}

type CubeServerNic struct {
	DeviceNumber *int  `pulumi:"deviceNumber"`
	Dhcp         *bool `pulumi:"dhcp"`
	// Indicates whether this NIC receives an IPv6 address through DHCP.
	Dhcpv6         *bool                  `pulumi:"dhcpv6"`
	Firewall       *CubeServerNicFirewall `pulumi:"firewall"`
	FirewallActive *bool                  `pulumi:"firewallActive"`
	FirewallType   *string                `pulumi:"firewallType"`
	Ips            []string               `pulumi:"ips"`
	// IPv6 CIDR block assigned to the NIC.
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	// Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6 CIDR block assigned to the nic.
	Ipv6Ips []string `pulumi:"ipv6Ips"`
	Lan     int      `pulumi:"lan"`
	Mac     *string  `pulumi:"mac"`
	// [string] The name of the server.
	Name    *string `pulumi:"name"`
	PciSlot *int    `pulumi:"pciSlot"`
}

// CubeServerNicInput is an input type that accepts CubeServerNicArgs and CubeServerNicOutput values.
// You can construct a concrete instance of `CubeServerNicInput` via:
//
//	CubeServerNicArgs{...}
type CubeServerNicInput interface {
	pulumi.Input

	ToCubeServerNicOutput() CubeServerNicOutput
	ToCubeServerNicOutputWithContext(context.Context) CubeServerNicOutput
}

type CubeServerNicArgs struct {
	DeviceNumber pulumi.IntPtrInput  `pulumi:"deviceNumber"`
	Dhcp         pulumi.BoolPtrInput `pulumi:"dhcp"`
	// Indicates whether this NIC receives an IPv6 address through DHCP.
	Dhcpv6         pulumi.BoolPtrInput           `pulumi:"dhcpv6"`
	Firewall       CubeServerNicFirewallPtrInput `pulumi:"firewall"`
	FirewallActive pulumi.BoolPtrInput           `pulumi:"firewallActive"`
	FirewallType   pulumi.StringPtrInput         `pulumi:"firewallType"`
	Ips            pulumi.StringArrayInput       `pulumi:"ips"`
	// IPv6 CIDR block assigned to the NIC.
	Ipv6CidrBlock pulumi.StringPtrInput `pulumi:"ipv6CidrBlock"`
	// Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6 CIDR block assigned to the nic.
	Ipv6Ips pulumi.StringArrayInput `pulumi:"ipv6Ips"`
	Lan     pulumi.IntInput         `pulumi:"lan"`
	Mac     pulumi.StringPtrInput   `pulumi:"mac"`
	// [string] The name of the server.
	Name    pulumi.StringPtrInput `pulumi:"name"`
	PciSlot pulumi.IntPtrInput    `pulumi:"pciSlot"`
}

func (CubeServerNicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CubeServerNic)(nil)).Elem()
}

func (i CubeServerNicArgs) ToCubeServerNicOutput() CubeServerNicOutput {
	return i.ToCubeServerNicOutputWithContext(context.Background())
}

func (i CubeServerNicArgs) ToCubeServerNicOutputWithContext(ctx context.Context) CubeServerNicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CubeServerNicOutput)
}

func (i CubeServerNicArgs) ToCubeServerNicPtrOutput() CubeServerNicPtrOutput {
	return i.ToCubeServerNicPtrOutputWithContext(context.Background())
}

func (i CubeServerNicArgs) ToCubeServerNicPtrOutputWithContext(ctx context.Context) CubeServerNicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CubeServerNicOutput).ToCubeServerNicPtrOutputWithContext(ctx)
}

// CubeServerNicPtrInput is an input type that accepts CubeServerNicArgs, CubeServerNicPtr and CubeServerNicPtrOutput values.
// You can construct a concrete instance of `CubeServerNicPtrInput` via:
//
//	        CubeServerNicArgs{...}
//
//	or:
//
//	        nil
type CubeServerNicPtrInput interface {
	pulumi.Input

	ToCubeServerNicPtrOutput() CubeServerNicPtrOutput
	ToCubeServerNicPtrOutputWithContext(context.Context) CubeServerNicPtrOutput
}

type cubeServerNicPtrType CubeServerNicArgs

func CubeServerNicPtr(v *CubeServerNicArgs) CubeServerNicPtrInput {
	return (*cubeServerNicPtrType)(v)
}

func (*cubeServerNicPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CubeServerNic)(nil)).Elem()
}

func (i *cubeServerNicPtrType) ToCubeServerNicPtrOutput() CubeServerNicPtrOutput {
	return i.ToCubeServerNicPtrOutputWithContext(context.Background())
}

func (i *cubeServerNicPtrType) ToCubeServerNicPtrOutputWithContext(ctx context.Context) CubeServerNicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CubeServerNicPtrOutput)
}

type CubeServerNicOutput struct{ *pulumi.OutputState }

func (CubeServerNicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CubeServerNic)(nil)).Elem()
}

func (o CubeServerNicOutput) ToCubeServerNicOutput() CubeServerNicOutput {
	return o
}

func (o CubeServerNicOutput) ToCubeServerNicOutputWithContext(ctx context.Context) CubeServerNicOutput {
	return o
}

func (o CubeServerNicOutput) ToCubeServerNicPtrOutput() CubeServerNicPtrOutput {
	return o.ToCubeServerNicPtrOutputWithContext(context.Background())
}

func (o CubeServerNicOutput) ToCubeServerNicPtrOutputWithContext(ctx context.Context) CubeServerNicPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CubeServerNic) *CubeServerNic {
		return &v
	}).(CubeServerNicPtrOutput)
}

func (o CubeServerNicOutput) DeviceNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CubeServerNic) *int { return v.DeviceNumber }).(pulumi.IntPtrOutput)
}

func (o CubeServerNicOutput) Dhcp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CubeServerNic) *bool { return v.Dhcp }).(pulumi.BoolPtrOutput)
}

// Indicates whether this NIC receives an IPv6 address through DHCP.
func (o CubeServerNicOutput) Dhcpv6() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CubeServerNic) *bool { return v.Dhcpv6 }).(pulumi.BoolPtrOutput)
}

func (o CubeServerNicOutput) Firewall() CubeServerNicFirewallPtrOutput {
	return o.ApplyT(func(v CubeServerNic) *CubeServerNicFirewall { return v.Firewall }).(CubeServerNicFirewallPtrOutput)
}

func (o CubeServerNicOutput) FirewallActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CubeServerNic) *bool { return v.FirewallActive }).(pulumi.BoolPtrOutput)
}

func (o CubeServerNicOutput) FirewallType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CubeServerNic) *string { return v.FirewallType }).(pulumi.StringPtrOutput)
}

func (o CubeServerNicOutput) Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CubeServerNic) []string { return v.Ips }).(pulumi.StringArrayOutput)
}

// IPv6 CIDR block assigned to the NIC.
func (o CubeServerNicOutput) Ipv6CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CubeServerNic) *string { return v.Ipv6CidrBlock }).(pulumi.StringPtrOutput)
}

// Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6 CIDR block assigned to the nic.
func (o CubeServerNicOutput) Ipv6Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CubeServerNic) []string { return v.Ipv6Ips }).(pulumi.StringArrayOutput)
}

func (o CubeServerNicOutput) Lan() pulumi.IntOutput {
	return o.ApplyT(func(v CubeServerNic) int { return v.Lan }).(pulumi.IntOutput)
}

func (o CubeServerNicOutput) Mac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CubeServerNic) *string { return v.Mac }).(pulumi.StringPtrOutput)
}

// [string] The name of the server.
func (o CubeServerNicOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CubeServerNic) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o CubeServerNicOutput) PciSlot() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CubeServerNic) *int { return v.PciSlot }).(pulumi.IntPtrOutput)
}

type CubeServerNicPtrOutput struct{ *pulumi.OutputState }

func (CubeServerNicPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CubeServerNic)(nil)).Elem()
}

func (o CubeServerNicPtrOutput) ToCubeServerNicPtrOutput() CubeServerNicPtrOutput {
	return o
}

func (o CubeServerNicPtrOutput) ToCubeServerNicPtrOutputWithContext(ctx context.Context) CubeServerNicPtrOutput {
	return o
}

func (o CubeServerNicPtrOutput) Elem() CubeServerNicOutput {
	return o.ApplyT(func(v *CubeServerNic) CubeServerNic {
		if v != nil {
			return *v
		}
		var ret CubeServerNic
		return ret
	}).(CubeServerNicOutput)
}

func (o CubeServerNicPtrOutput) DeviceNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CubeServerNic) *int {
		if v == nil {
			return nil
		}
		return v.DeviceNumber
	}).(pulumi.IntPtrOutput)
}

func (o CubeServerNicPtrOutput) Dhcp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CubeServerNic) *bool {
		if v == nil {
			return nil
		}
		return v.Dhcp
	}).(pulumi.BoolPtrOutput)
}

// Indicates whether this NIC receives an IPv6 address through DHCP.
func (o CubeServerNicPtrOutput) Dhcpv6() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CubeServerNic) *bool {
		if v == nil {
			return nil
		}
		return v.Dhcpv6
	}).(pulumi.BoolPtrOutput)
}

func (o CubeServerNicPtrOutput) Firewall() CubeServerNicFirewallPtrOutput {
	return o.ApplyT(func(v *CubeServerNic) *CubeServerNicFirewall {
		if v == nil {
			return nil
		}
		return v.Firewall
	}).(CubeServerNicFirewallPtrOutput)
}

func (o CubeServerNicPtrOutput) FirewallActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CubeServerNic) *bool {
		if v == nil {
			return nil
		}
		return v.FirewallActive
	}).(pulumi.BoolPtrOutput)
}

func (o CubeServerNicPtrOutput) FirewallType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CubeServerNic) *string {
		if v == nil {
			return nil
		}
		return v.FirewallType
	}).(pulumi.StringPtrOutput)
}

func (o CubeServerNicPtrOutput) Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CubeServerNic) []string {
		if v == nil {
			return nil
		}
		return v.Ips
	}).(pulumi.StringArrayOutput)
}

// IPv6 CIDR block assigned to the NIC.
func (o CubeServerNicPtrOutput) Ipv6CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CubeServerNic) *string {
		if v == nil {
			return nil
		}
		return v.Ipv6CidrBlock
	}).(pulumi.StringPtrOutput)
}

// Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6 CIDR block assigned to the nic.
func (o CubeServerNicPtrOutput) Ipv6Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CubeServerNic) []string {
		if v == nil {
			return nil
		}
		return v.Ipv6Ips
	}).(pulumi.StringArrayOutput)
}

func (o CubeServerNicPtrOutput) Lan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CubeServerNic) *int {
		if v == nil {
			return nil
		}
		return &v.Lan
	}).(pulumi.IntPtrOutput)
}

func (o CubeServerNicPtrOutput) Mac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CubeServerNic) *string {
		if v == nil {
			return nil
		}
		return v.Mac
	}).(pulumi.StringPtrOutput)
}

// [string] The name of the server.
func (o CubeServerNicPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CubeServerNic) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o CubeServerNicPtrOutput) PciSlot() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CubeServerNic) *int {
		if v == nil {
			return nil
		}
		return v.PciSlot
	}).(pulumi.IntPtrOutput)
}

type CubeServerNicFirewall struct {
	IcmpCode *string `pulumi:"icmpCode"`
	IcmpType *string `pulumi:"icmpType"`
	// [string] The name of the server.
	Name           *string `pulumi:"name"`
	PortRangeEnd   *int    `pulumi:"portRangeEnd"`
	PortRangeStart *int    `pulumi:"portRangeStart"`
	Protocol       string  `pulumi:"protocol"`
	SourceIp       *string `pulumi:"sourceIp"`
	SourceMac      *string `pulumi:"sourceMac"`
	TargetIp       *string `pulumi:"targetIp"`
	Type           *string `pulumi:"type"`
}

// CubeServerNicFirewallInput is an input type that accepts CubeServerNicFirewallArgs and CubeServerNicFirewallOutput values.
// You can construct a concrete instance of `CubeServerNicFirewallInput` via:
//
//	CubeServerNicFirewallArgs{...}
type CubeServerNicFirewallInput interface {
	pulumi.Input

	ToCubeServerNicFirewallOutput() CubeServerNicFirewallOutput
	ToCubeServerNicFirewallOutputWithContext(context.Context) CubeServerNicFirewallOutput
}

type CubeServerNicFirewallArgs struct {
	IcmpCode pulumi.StringPtrInput `pulumi:"icmpCode"`
	IcmpType pulumi.StringPtrInput `pulumi:"icmpType"`
	// [string] The name of the server.
	Name           pulumi.StringPtrInput `pulumi:"name"`
	PortRangeEnd   pulumi.IntPtrInput    `pulumi:"portRangeEnd"`
	PortRangeStart pulumi.IntPtrInput    `pulumi:"portRangeStart"`
	Protocol       pulumi.StringInput    `pulumi:"protocol"`
	SourceIp       pulumi.StringPtrInput `pulumi:"sourceIp"`
	SourceMac      pulumi.StringPtrInput `pulumi:"sourceMac"`
	TargetIp       pulumi.StringPtrInput `pulumi:"targetIp"`
	Type           pulumi.StringPtrInput `pulumi:"type"`
}

func (CubeServerNicFirewallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CubeServerNicFirewall)(nil)).Elem()
}

func (i CubeServerNicFirewallArgs) ToCubeServerNicFirewallOutput() CubeServerNicFirewallOutput {
	return i.ToCubeServerNicFirewallOutputWithContext(context.Background())
}

func (i CubeServerNicFirewallArgs) ToCubeServerNicFirewallOutputWithContext(ctx context.Context) CubeServerNicFirewallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CubeServerNicFirewallOutput)
}

func (i CubeServerNicFirewallArgs) ToCubeServerNicFirewallPtrOutput() CubeServerNicFirewallPtrOutput {
	return i.ToCubeServerNicFirewallPtrOutputWithContext(context.Background())
}

func (i CubeServerNicFirewallArgs) ToCubeServerNicFirewallPtrOutputWithContext(ctx context.Context) CubeServerNicFirewallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CubeServerNicFirewallOutput).ToCubeServerNicFirewallPtrOutputWithContext(ctx)
}

// CubeServerNicFirewallPtrInput is an input type that accepts CubeServerNicFirewallArgs, CubeServerNicFirewallPtr and CubeServerNicFirewallPtrOutput values.
// You can construct a concrete instance of `CubeServerNicFirewallPtrInput` via:
//
//	        CubeServerNicFirewallArgs{...}
//
//	or:
//
//	        nil
type CubeServerNicFirewallPtrInput interface {
	pulumi.Input

	ToCubeServerNicFirewallPtrOutput() CubeServerNicFirewallPtrOutput
	ToCubeServerNicFirewallPtrOutputWithContext(context.Context) CubeServerNicFirewallPtrOutput
}

type cubeServerNicFirewallPtrType CubeServerNicFirewallArgs

func CubeServerNicFirewallPtr(v *CubeServerNicFirewallArgs) CubeServerNicFirewallPtrInput {
	return (*cubeServerNicFirewallPtrType)(v)
}

func (*cubeServerNicFirewallPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CubeServerNicFirewall)(nil)).Elem()
}

func (i *cubeServerNicFirewallPtrType) ToCubeServerNicFirewallPtrOutput() CubeServerNicFirewallPtrOutput {
	return i.ToCubeServerNicFirewallPtrOutputWithContext(context.Background())
}

func (i *cubeServerNicFirewallPtrType) ToCubeServerNicFirewallPtrOutputWithContext(ctx context.Context) CubeServerNicFirewallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CubeServerNicFirewallPtrOutput)
}

type CubeServerNicFirewallOutput struct{ *pulumi.OutputState }

func (CubeServerNicFirewallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CubeServerNicFirewall)(nil)).Elem()
}

func (o CubeServerNicFirewallOutput) ToCubeServerNicFirewallOutput() CubeServerNicFirewallOutput {
	return o
}

func (o CubeServerNicFirewallOutput) ToCubeServerNicFirewallOutputWithContext(ctx context.Context) CubeServerNicFirewallOutput {
	return o
}

func (o CubeServerNicFirewallOutput) ToCubeServerNicFirewallPtrOutput() CubeServerNicFirewallPtrOutput {
	return o.ToCubeServerNicFirewallPtrOutputWithContext(context.Background())
}

func (o CubeServerNicFirewallOutput) ToCubeServerNicFirewallPtrOutputWithContext(ctx context.Context) CubeServerNicFirewallPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CubeServerNicFirewall) *CubeServerNicFirewall {
		return &v
	}).(CubeServerNicFirewallPtrOutput)
}

func (o CubeServerNicFirewallOutput) IcmpCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CubeServerNicFirewall) *string { return v.IcmpCode }).(pulumi.StringPtrOutput)
}

func (o CubeServerNicFirewallOutput) IcmpType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CubeServerNicFirewall) *string { return v.IcmpType }).(pulumi.StringPtrOutput)
}

// [string] The name of the server.
func (o CubeServerNicFirewallOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CubeServerNicFirewall) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o CubeServerNicFirewallOutput) PortRangeEnd() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CubeServerNicFirewall) *int { return v.PortRangeEnd }).(pulumi.IntPtrOutput)
}

func (o CubeServerNicFirewallOutput) PortRangeStart() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CubeServerNicFirewall) *int { return v.PortRangeStart }).(pulumi.IntPtrOutput)
}

func (o CubeServerNicFirewallOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v CubeServerNicFirewall) string { return v.Protocol }).(pulumi.StringOutput)
}

func (o CubeServerNicFirewallOutput) SourceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CubeServerNicFirewall) *string { return v.SourceIp }).(pulumi.StringPtrOutput)
}

func (o CubeServerNicFirewallOutput) SourceMac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CubeServerNicFirewall) *string { return v.SourceMac }).(pulumi.StringPtrOutput)
}

func (o CubeServerNicFirewallOutput) TargetIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CubeServerNicFirewall) *string { return v.TargetIp }).(pulumi.StringPtrOutput)
}

func (o CubeServerNicFirewallOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CubeServerNicFirewall) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type CubeServerNicFirewallPtrOutput struct{ *pulumi.OutputState }

func (CubeServerNicFirewallPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CubeServerNicFirewall)(nil)).Elem()
}

func (o CubeServerNicFirewallPtrOutput) ToCubeServerNicFirewallPtrOutput() CubeServerNicFirewallPtrOutput {
	return o
}

func (o CubeServerNicFirewallPtrOutput) ToCubeServerNicFirewallPtrOutputWithContext(ctx context.Context) CubeServerNicFirewallPtrOutput {
	return o
}

func (o CubeServerNicFirewallPtrOutput) Elem() CubeServerNicFirewallOutput {
	return o.ApplyT(func(v *CubeServerNicFirewall) CubeServerNicFirewall {
		if v != nil {
			return *v
		}
		var ret CubeServerNicFirewall
		return ret
	}).(CubeServerNicFirewallOutput)
}

func (o CubeServerNicFirewallPtrOutput) IcmpCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CubeServerNicFirewall) *string {
		if v == nil {
			return nil
		}
		return v.IcmpCode
	}).(pulumi.StringPtrOutput)
}

func (o CubeServerNicFirewallPtrOutput) IcmpType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CubeServerNicFirewall) *string {
		if v == nil {
			return nil
		}
		return v.IcmpType
	}).(pulumi.StringPtrOutput)
}

// [string] The name of the server.
func (o CubeServerNicFirewallPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CubeServerNicFirewall) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o CubeServerNicFirewallPtrOutput) PortRangeEnd() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CubeServerNicFirewall) *int {
		if v == nil {
			return nil
		}
		return v.PortRangeEnd
	}).(pulumi.IntPtrOutput)
}

func (o CubeServerNicFirewallPtrOutput) PortRangeStart() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CubeServerNicFirewall) *int {
		if v == nil {
			return nil
		}
		return v.PortRangeStart
	}).(pulumi.IntPtrOutput)
}

func (o CubeServerNicFirewallPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CubeServerNicFirewall) *string {
		if v == nil {
			return nil
		}
		return &v.Protocol
	}).(pulumi.StringPtrOutput)
}

func (o CubeServerNicFirewallPtrOutput) SourceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CubeServerNicFirewall) *string {
		if v == nil {
			return nil
		}
		return v.SourceIp
	}).(pulumi.StringPtrOutput)
}

func (o CubeServerNicFirewallPtrOutput) SourceMac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CubeServerNicFirewall) *string {
		if v == nil {
			return nil
		}
		return v.SourceMac
	}).(pulumi.StringPtrOutput)
}

func (o CubeServerNicFirewallPtrOutput) TargetIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CubeServerNicFirewall) *string {
		if v == nil {
			return nil
		}
		return v.TargetIp
	}).(pulumi.StringPtrOutput)
}

func (o CubeServerNicFirewallPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CubeServerNicFirewall) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type CubeServerVolume struct {
	// [string] The availability zone in which the server should exist. This property is immutable.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
	BackupUnitId *string `pulumi:"backupUnitId"`
	// The UUID of the attached server.
	BootServer          *string `pulumi:"bootServer"`
	Bus                 *string `pulumi:"bus"`
	CpuHotPlug          *bool   `pulumi:"cpuHotPlug"`
	DeviceNumber        *int    `pulumi:"deviceNumber"`
	DiscVirtioHotPlug   *bool   `pulumi:"discVirtioHotPlug"`
	DiscVirtioHotUnplug *bool   `pulumi:"discVirtioHotUnplug"`
	DiskType            string  `pulumi:"diskType"`
	// [string] Required if `sshKeyPath` is not provided.
	//
	// > **⚠ WARNING**
	// >
	// > Image_name under volume level is deprecated, please use imageName under server level
	//
	// > **⚠ WARNING**
	// >
	// > For creating a **CUBE** server, you can not set `volume.size` argument.
	//
	// Deprecated: Please use imagePassword under server level
	ImagePassword *string `pulumi:"imagePassword"`
	// [string] Sets the OS type of the server.
	LicenceType *string `pulumi:"licenceType"`
	// [string] The name of the server.
	Name         *string `pulumi:"name"`
	NicHotPlug   *bool   `pulumi:"nicHotPlug"`
	NicHotUnplug *bool   `pulumi:"nicHotUnplug"`
	PciSlot      *int    `pulumi:"pciSlot"`
	RamHotPlug   *bool   `pulumi:"ramHotPlug"`
	// [list] List of paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Required for IonosCloud Linux images. Required if `imagePassword` is not provided.
	//
	// Deprecated: Please use sshKeyPath under server level
	SshKeyPaths []string `pulumi:"sshKeyPaths"`
	// The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' that has cloud-init compatibility in conjunction with this property.
	UserData *string `pulumi:"userData"`
}

// CubeServerVolumeInput is an input type that accepts CubeServerVolumeArgs and CubeServerVolumeOutput values.
// You can construct a concrete instance of `CubeServerVolumeInput` via:
//
//	CubeServerVolumeArgs{...}
type CubeServerVolumeInput interface {
	pulumi.Input

	ToCubeServerVolumeOutput() CubeServerVolumeOutput
	ToCubeServerVolumeOutputWithContext(context.Context) CubeServerVolumeOutput
}

type CubeServerVolumeArgs struct {
	// [string] The availability zone in which the server should exist. This property is immutable.
	AvailabilityZone pulumi.StringPtrInput `pulumi:"availabilityZone"`
	// The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
	BackupUnitId pulumi.StringPtrInput `pulumi:"backupUnitId"`
	// The UUID of the attached server.
	BootServer          pulumi.StringPtrInput `pulumi:"bootServer"`
	Bus                 pulumi.StringPtrInput `pulumi:"bus"`
	CpuHotPlug          pulumi.BoolPtrInput   `pulumi:"cpuHotPlug"`
	DeviceNumber        pulumi.IntPtrInput    `pulumi:"deviceNumber"`
	DiscVirtioHotPlug   pulumi.BoolPtrInput   `pulumi:"discVirtioHotPlug"`
	DiscVirtioHotUnplug pulumi.BoolPtrInput   `pulumi:"discVirtioHotUnplug"`
	DiskType            pulumi.StringInput    `pulumi:"diskType"`
	// [string] Required if `sshKeyPath` is not provided.
	//
	// > **⚠ WARNING**
	// >
	// > Image_name under volume level is deprecated, please use imageName under server level
	//
	// > **⚠ WARNING**
	// >
	// > For creating a **CUBE** server, you can not set `volume.size` argument.
	//
	// Deprecated: Please use imagePassword under server level
	ImagePassword pulumi.StringPtrInput `pulumi:"imagePassword"`
	// [string] Sets the OS type of the server.
	LicenceType pulumi.StringPtrInput `pulumi:"licenceType"`
	// [string] The name of the server.
	Name         pulumi.StringPtrInput `pulumi:"name"`
	NicHotPlug   pulumi.BoolPtrInput   `pulumi:"nicHotPlug"`
	NicHotUnplug pulumi.BoolPtrInput   `pulumi:"nicHotUnplug"`
	PciSlot      pulumi.IntPtrInput    `pulumi:"pciSlot"`
	RamHotPlug   pulumi.BoolPtrInput   `pulumi:"ramHotPlug"`
	// [list] List of paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Required for IonosCloud Linux images. Required if `imagePassword` is not provided.
	//
	// Deprecated: Please use sshKeyPath under server level
	SshKeyPaths pulumi.StringArrayInput `pulumi:"sshKeyPaths"`
	// The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' that has cloud-init compatibility in conjunction with this property.
	UserData pulumi.StringPtrInput `pulumi:"userData"`
}

func (CubeServerVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CubeServerVolume)(nil)).Elem()
}

func (i CubeServerVolumeArgs) ToCubeServerVolumeOutput() CubeServerVolumeOutput {
	return i.ToCubeServerVolumeOutputWithContext(context.Background())
}

func (i CubeServerVolumeArgs) ToCubeServerVolumeOutputWithContext(ctx context.Context) CubeServerVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CubeServerVolumeOutput)
}

func (i CubeServerVolumeArgs) ToCubeServerVolumePtrOutput() CubeServerVolumePtrOutput {
	return i.ToCubeServerVolumePtrOutputWithContext(context.Background())
}

func (i CubeServerVolumeArgs) ToCubeServerVolumePtrOutputWithContext(ctx context.Context) CubeServerVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CubeServerVolumeOutput).ToCubeServerVolumePtrOutputWithContext(ctx)
}

// CubeServerVolumePtrInput is an input type that accepts CubeServerVolumeArgs, CubeServerVolumePtr and CubeServerVolumePtrOutput values.
// You can construct a concrete instance of `CubeServerVolumePtrInput` via:
//
//	        CubeServerVolumeArgs{...}
//
//	or:
//
//	        nil
type CubeServerVolumePtrInput interface {
	pulumi.Input

	ToCubeServerVolumePtrOutput() CubeServerVolumePtrOutput
	ToCubeServerVolumePtrOutputWithContext(context.Context) CubeServerVolumePtrOutput
}

type cubeServerVolumePtrType CubeServerVolumeArgs

func CubeServerVolumePtr(v *CubeServerVolumeArgs) CubeServerVolumePtrInput {
	return (*cubeServerVolumePtrType)(v)
}

func (*cubeServerVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CubeServerVolume)(nil)).Elem()
}

func (i *cubeServerVolumePtrType) ToCubeServerVolumePtrOutput() CubeServerVolumePtrOutput {
	return i.ToCubeServerVolumePtrOutputWithContext(context.Background())
}

func (i *cubeServerVolumePtrType) ToCubeServerVolumePtrOutputWithContext(ctx context.Context) CubeServerVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CubeServerVolumePtrOutput)
}

type CubeServerVolumeOutput struct{ *pulumi.OutputState }

func (CubeServerVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CubeServerVolume)(nil)).Elem()
}

func (o CubeServerVolumeOutput) ToCubeServerVolumeOutput() CubeServerVolumeOutput {
	return o
}

func (o CubeServerVolumeOutput) ToCubeServerVolumeOutputWithContext(ctx context.Context) CubeServerVolumeOutput {
	return o
}

func (o CubeServerVolumeOutput) ToCubeServerVolumePtrOutput() CubeServerVolumePtrOutput {
	return o.ToCubeServerVolumePtrOutputWithContext(context.Background())
}

func (o CubeServerVolumeOutput) ToCubeServerVolumePtrOutputWithContext(ctx context.Context) CubeServerVolumePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CubeServerVolume) *CubeServerVolume {
		return &v
	}).(CubeServerVolumePtrOutput)
}

// [string] The availability zone in which the server should exist. This property is immutable.
func (o CubeServerVolumeOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CubeServerVolume) *string { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

// The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
func (o CubeServerVolumeOutput) BackupUnitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CubeServerVolume) *string { return v.BackupUnitId }).(pulumi.StringPtrOutput)
}

// The UUID of the attached server.
func (o CubeServerVolumeOutput) BootServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CubeServerVolume) *string { return v.BootServer }).(pulumi.StringPtrOutput)
}

func (o CubeServerVolumeOutput) Bus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CubeServerVolume) *string { return v.Bus }).(pulumi.StringPtrOutput)
}

func (o CubeServerVolumeOutput) CpuHotPlug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CubeServerVolume) *bool { return v.CpuHotPlug }).(pulumi.BoolPtrOutput)
}

func (o CubeServerVolumeOutput) DeviceNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CubeServerVolume) *int { return v.DeviceNumber }).(pulumi.IntPtrOutput)
}

func (o CubeServerVolumeOutput) DiscVirtioHotPlug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CubeServerVolume) *bool { return v.DiscVirtioHotPlug }).(pulumi.BoolPtrOutput)
}

func (o CubeServerVolumeOutput) DiscVirtioHotUnplug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CubeServerVolume) *bool { return v.DiscVirtioHotUnplug }).(pulumi.BoolPtrOutput)
}

func (o CubeServerVolumeOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v CubeServerVolume) string { return v.DiskType }).(pulumi.StringOutput)
}

// [string] Required if `sshKeyPath` is not provided.
//
// > **⚠ WARNING**
// >
// > Image_name under volume level is deprecated, please use imageName under server level
//
// > **⚠ WARNING**
// >
// > For creating a **CUBE** server, you can not set `volume.size` argument.
//
// Deprecated: Please use imagePassword under server level
func (o CubeServerVolumeOutput) ImagePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CubeServerVolume) *string { return v.ImagePassword }).(pulumi.StringPtrOutput)
}

// [string] Sets the OS type of the server.
func (o CubeServerVolumeOutput) LicenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CubeServerVolume) *string { return v.LicenceType }).(pulumi.StringPtrOutput)
}

// [string] The name of the server.
func (o CubeServerVolumeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CubeServerVolume) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o CubeServerVolumeOutput) NicHotPlug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CubeServerVolume) *bool { return v.NicHotPlug }).(pulumi.BoolPtrOutput)
}

func (o CubeServerVolumeOutput) NicHotUnplug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CubeServerVolume) *bool { return v.NicHotUnplug }).(pulumi.BoolPtrOutput)
}

func (o CubeServerVolumeOutput) PciSlot() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CubeServerVolume) *int { return v.PciSlot }).(pulumi.IntPtrOutput)
}

func (o CubeServerVolumeOutput) RamHotPlug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CubeServerVolume) *bool { return v.RamHotPlug }).(pulumi.BoolPtrOutput)
}

// [list] List of paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Required for IonosCloud Linux images. Required if `imagePassword` is not provided.
//
// Deprecated: Please use sshKeyPath under server level
func (o CubeServerVolumeOutput) SshKeyPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CubeServerVolume) []string { return v.SshKeyPaths }).(pulumi.StringArrayOutput)
}

// The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' that has cloud-init compatibility in conjunction with this property.
func (o CubeServerVolumeOutput) UserData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CubeServerVolume) *string { return v.UserData }).(pulumi.StringPtrOutput)
}

type CubeServerVolumePtrOutput struct{ *pulumi.OutputState }

func (CubeServerVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CubeServerVolume)(nil)).Elem()
}

func (o CubeServerVolumePtrOutput) ToCubeServerVolumePtrOutput() CubeServerVolumePtrOutput {
	return o
}

func (o CubeServerVolumePtrOutput) ToCubeServerVolumePtrOutputWithContext(ctx context.Context) CubeServerVolumePtrOutput {
	return o
}

func (o CubeServerVolumePtrOutput) Elem() CubeServerVolumeOutput {
	return o.ApplyT(func(v *CubeServerVolume) CubeServerVolume {
		if v != nil {
			return *v
		}
		var ret CubeServerVolume
		return ret
	}).(CubeServerVolumeOutput)
}

// [string] The availability zone in which the server should exist. This property is immutable.
func (o CubeServerVolumePtrOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CubeServerVolume) *string {
		if v == nil {
			return nil
		}
		return v.AvailabilityZone
	}).(pulumi.StringPtrOutput)
}

// The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
func (o CubeServerVolumePtrOutput) BackupUnitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CubeServerVolume) *string {
		if v == nil {
			return nil
		}
		return v.BackupUnitId
	}).(pulumi.StringPtrOutput)
}

// The UUID of the attached server.
func (o CubeServerVolumePtrOutput) BootServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CubeServerVolume) *string {
		if v == nil {
			return nil
		}
		return v.BootServer
	}).(pulumi.StringPtrOutput)
}

func (o CubeServerVolumePtrOutput) Bus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CubeServerVolume) *string {
		if v == nil {
			return nil
		}
		return v.Bus
	}).(pulumi.StringPtrOutput)
}

func (o CubeServerVolumePtrOutput) CpuHotPlug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CubeServerVolume) *bool {
		if v == nil {
			return nil
		}
		return v.CpuHotPlug
	}).(pulumi.BoolPtrOutput)
}

func (o CubeServerVolumePtrOutput) DeviceNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CubeServerVolume) *int {
		if v == nil {
			return nil
		}
		return v.DeviceNumber
	}).(pulumi.IntPtrOutput)
}

func (o CubeServerVolumePtrOutput) DiscVirtioHotPlug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CubeServerVolume) *bool {
		if v == nil {
			return nil
		}
		return v.DiscVirtioHotPlug
	}).(pulumi.BoolPtrOutput)
}

func (o CubeServerVolumePtrOutput) DiscVirtioHotUnplug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CubeServerVolume) *bool {
		if v == nil {
			return nil
		}
		return v.DiscVirtioHotUnplug
	}).(pulumi.BoolPtrOutput)
}

func (o CubeServerVolumePtrOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CubeServerVolume) *string {
		if v == nil {
			return nil
		}
		return &v.DiskType
	}).(pulumi.StringPtrOutput)
}

// [string] Required if `sshKeyPath` is not provided.
//
// > **⚠ WARNING**
// >
// > Image_name under volume level is deprecated, please use imageName under server level
//
// > **⚠ WARNING**
// >
// > For creating a **CUBE** server, you can not set `volume.size` argument.
//
// Deprecated: Please use imagePassword under server level
func (o CubeServerVolumePtrOutput) ImagePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CubeServerVolume) *string {
		if v == nil {
			return nil
		}
		return v.ImagePassword
	}).(pulumi.StringPtrOutput)
}

// [string] Sets the OS type of the server.
func (o CubeServerVolumePtrOutput) LicenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CubeServerVolume) *string {
		if v == nil {
			return nil
		}
		return v.LicenceType
	}).(pulumi.StringPtrOutput)
}

// [string] The name of the server.
func (o CubeServerVolumePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CubeServerVolume) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o CubeServerVolumePtrOutput) NicHotPlug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CubeServerVolume) *bool {
		if v == nil {
			return nil
		}
		return v.NicHotPlug
	}).(pulumi.BoolPtrOutput)
}

func (o CubeServerVolumePtrOutput) NicHotUnplug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CubeServerVolume) *bool {
		if v == nil {
			return nil
		}
		return v.NicHotUnplug
	}).(pulumi.BoolPtrOutput)
}

func (o CubeServerVolumePtrOutput) PciSlot() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CubeServerVolume) *int {
		if v == nil {
			return nil
		}
		return v.PciSlot
	}).(pulumi.IntPtrOutput)
}

func (o CubeServerVolumePtrOutput) RamHotPlug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CubeServerVolume) *bool {
		if v == nil {
			return nil
		}
		return v.RamHotPlug
	}).(pulumi.BoolPtrOutput)
}

// [list] List of paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Required for IonosCloud Linux images. Required if `imagePassword` is not provided.
//
// Deprecated: Please use sshKeyPath under server level
func (o CubeServerVolumePtrOutput) SshKeyPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CubeServerVolume) []string {
		if v == nil {
			return nil
		}
		return v.SshKeyPaths
	}).(pulumi.StringArrayOutput)
}

// The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' that has cloud-init compatibility in conjunction with this property.
func (o CubeServerVolumePtrOutput) UserData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CubeServerVolume) *string {
		if v == nil {
			return nil
		}
		return v.UserData
	}).(pulumi.StringPtrOutput)
}

type DatacenterCpuArchitecture struct {
	// A valid CPU family name
	CpuFamily *string `pulumi:"cpuFamily"`
	// The maximum number of cores available
	MaxCores *int `pulumi:"maxCores"`
	// The maximum number of RAM in MB
	MaxRam *int `pulumi:"maxRam"`
	// A valid CPU vendor name
	Vendor *string `pulumi:"vendor"`
}

// DatacenterCpuArchitectureInput is an input type that accepts DatacenterCpuArchitectureArgs and DatacenterCpuArchitectureOutput values.
// You can construct a concrete instance of `DatacenterCpuArchitectureInput` via:
//
//	DatacenterCpuArchitectureArgs{...}
type DatacenterCpuArchitectureInput interface {
	pulumi.Input

	ToDatacenterCpuArchitectureOutput() DatacenterCpuArchitectureOutput
	ToDatacenterCpuArchitectureOutputWithContext(context.Context) DatacenterCpuArchitectureOutput
}

type DatacenterCpuArchitectureArgs struct {
	// A valid CPU family name
	CpuFamily pulumi.StringPtrInput `pulumi:"cpuFamily"`
	// The maximum number of cores available
	MaxCores pulumi.IntPtrInput `pulumi:"maxCores"`
	// The maximum number of RAM in MB
	MaxRam pulumi.IntPtrInput `pulumi:"maxRam"`
	// A valid CPU vendor name
	Vendor pulumi.StringPtrInput `pulumi:"vendor"`
}

func (DatacenterCpuArchitectureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatacenterCpuArchitecture)(nil)).Elem()
}

func (i DatacenterCpuArchitectureArgs) ToDatacenterCpuArchitectureOutput() DatacenterCpuArchitectureOutput {
	return i.ToDatacenterCpuArchitectureOutputWithContext(context.Background())
}

func (i DatacenterCpuArchitectureArgs) ToDatacenterCpuArchitectureOutputWithContext(ctx context.Context) DatacenterCpuArchitectureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacenterCpuArchitectureOutput)
}

// DatacenterCpuArchitectureArrayInput is an input type that accepts DatacenterCpuArchitectureArray and DatacenterCpuArchitectureArrayOutput values.
// You can construct a concrete instance of `DatacenterCpuArchitectureArrayInput` via:
//
//	DatacenterCpuArchitectureArray{ DatacenterCpuArchitectureArgs{...} }
type DatacenterCpuArchitectureArrayInput interface {
	pulumi.Input

	ToDatacenterCpuArchitectureArrayOutput() DatacenterCpuArchitectureArrayOutput
	ToDatacenterCpuArchitectureArrayOutputWithContext(context.Context) DatacenterCpuArchitectureArrayOutput
}

type DatacenterCpuArchitectureArray []DatacenterCpuArchitectureInput

func (DatacenterCpuArchitectureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatacenterCpuArchitecture)(nil)).Elem()
}

func (i DatacenterCpuArchitectureArray) ToDatacenterCpuArchitectureArrayOutput() DatacenterCpuArchitectureArrayOutput {
	return i.ToDatacenterCpuArchitectureArrayOutputWithContext(context.Background())
}

func (i DatacenterCpuArchitectureArray) ToDatacenterCpuArchitectureArrayOutputWithContext(ctx context.Context) DatacenterCpuArchitectureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacenterCpuArchitectureArrayOutput)
}

type DatacenterCpuArchitectureOutput struct{ *pulumi.OutputState }

func (DatacenterCpuArchitectureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatacenterCpuArchitecture)(nil)).Elem()
}

func (o DatacenterCpuArchitectureOutput) ToDatacenterCpuArchitectureOutput() DatacenterCpuArchitectureOutput {
	return o
}

func (o DatacenterCpuArchitectureOutput) ToDatacenterCpuArchitectureOutputWithContext(ctx context.Context) DatacenterCpuArchitectureOutput {
	return o
}

// A valid CPU family name
func (o DatacenterCpuArchitectureOutput) CpuFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatacenterCpuArchitecture) *string { return v.CpuFamily }).(pulumi.StringPtrOutput)
}

// The maximum number of cores available
func (o DatacenterCpuArchitectureOutput) MaxCores() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatacenterCpuArchitecture) *int { return v.MaxCores }).(pulumi.IntPtrOutput)
}

// The maximum number of RAM in MB
func (o DatacenterCpuArchitectureOutput) MaxRam() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatacenterCpuArchitecture) *int { return v.MaxRam }).(pulumi.IntPtrOutput)
}

// A valid CPU vendor name
func (o DatacenterCpuArchitectureOutput) Vendor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatacenterCpuArchitecture) *string { return v.Vendor }).(pulumi.StringPtrOutput)
}

type DatacenterCpuArchitectureArrayOutput struct{ *pulumi.OutputState }

func (DatacenterCpuArchitectureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatacenterCpuArchitecture)(nil)).Elem()
}

func (o DatacenterCpuArchitectureArrayOutput) ToDatacenterCpuArchitectureArrayOutput() DatacenterCpuArchitectureArrayOutput {
	return o
}

func (o DatacenterCpuArchitectureArrayOutput) ToDatacenterCpuArchitectureArrayOutputWithContext(ctx context.Context) DatacenterCpuArchitectureArrayOutput {
	return o
}

func (o DatacenterCpuArchitectureArrayOutput) Index(i pulumi.IntInput) DatacenterCpuArchitectureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatacenterCpuArchitecture {
		return vs[0].([]DatacenterCpuArchitecture)[vs[1].(int)]
	}).(DatacenterCpuArchitectureOutput)
}

type GroupUser struct {
	Administrator *bool   `pulumi:"administrator"`
	Email         *string `pulumi:"email"`
	FirstName     *string `pulumi:"firstName"`
	ForceSecAuth  *bool   `pulumi:"forceSecAuth"`
	Id            *string `pulumi:"id"`
	LastName      *string `pulumi:"lastName"`
	Password      *string `pulumi:"password"`
}

// GroupUserInput is an input type that accepts GroupUserArgs and GroupUserOutput values.
// You can construct a concrete instance of `GroupUserInput` via:
//
//	GroupUserArgs{...}
type GroupUserInput interface {
	pulumi.Input

	ToGroupUserOutput() GroupUserOutput
	ToGroupUserOutputWithContext(context.Context) GroupUserOutput
}

type GroupUserArgs struct {
	Administrator pulumi.BoolPtrInput   `pulumi:"administrator"`
	Email         pulumi.StringPtrInput `pulumi:"email"`
	FirstName     pulumi.StringPtrInput `pulumi:"firstName"`
	ForceSecAuth  pulumi.BoolPtrInput   `pulumi:"forceSecAuth"`
	Id            pulumi.StringPtrInput `pulumi:"id"`
	LastName      pulumi.StringPtrInput `pulumi:"lastName"`
	Password      pulumi.StringPtrInput `pulumi:"password"`
}

func (GroupUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupUser)(nil)).Elem()
}

func (i GroupUserArgs) ToGroupUserOutput() GroupUserOutput {
	return i.ToGroupUserOutputWithContext(context.Background())
}

func (i GroupUserArgs) ToGroupUserOutputWithContext(ctx context.Context) GroupUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupUserOutput)
}

// GroupUserArrayInput is an input type that accepts GroupUserArray and GroupUserArrayOutput values.
// You can construct a concrete instance of `GroupUserArrayInput` via:
//
//	GroupUserArray{ GroupUserArgs{...} }
type GroupUserArrayInput interface {
	pulumi.Input

	ToGroupUserArrayOutput() GroupUserArrayOutput
	ToGroupUserArrayOutputWithContext(context.Context) GroupUserArrayOutput
}

type GroupUserArray []GroupUserInput

func (GroupUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupUser)(nil)).Elem()
}

func (i GroupUserArray) ToGroupUserArrayOutput() GroupUserArrayOutput {
	return i.ToGroupUserArrayOutputWithContext(context.Background())
}

func (i GroupUserArray) ToGroupUserArrayOutputWithContext(ctx context.Context) GroupUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupUserArrayOutput)
}

type GroupUserOutput struct{ *pulumi.OutputState }

func (GroupUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupUser)(nil)).Elem()
}

func (o GroupUserOutput) ToGroupUserOutput() GroupUserOutput {
	return o
}

func (o GroupUserOutput) ToGroupUserOutputWithContext(ctx context.Context) GroupUserOutput {
	return o
}

func (o GroupUserOutput) Administrator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GroupUser) *bool { return v.Administrator }).(pulumi.BoolPtrOutput)
}

func (o GroupUserOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupUser) *string { return v.Email }).(pulumi.StringPtrOutput)
}

func (o GroupUserOutput) FirstName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupUser) *string { return v.FirstName }).(pulumi.StringPtrOutput)
}

func (o GroupUserOutput) ForceSecAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GroupUser) *bool { return v.ForceSecAuth }).(pulumi.BoolPtrOutput)
}

func (o GroupUserOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupUser) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o GroupUserOutput) LastName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupUser) *string { return v.LastName }).(pulumi.StringPtrOutput)
}

func (o GroupUserOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupUser) *string { return v.Password }).(pulumi.StringPtrOutput)
}

type GroupUserArrayOutput struct{ *pulumi.OutputState }

func (GroupUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupUser)(nil)).Elem()
}

func (o GroupUserArrayOutput) ToGroupUserArrayOutput() GroupUserArrayOutput {
	return o
}

func (o GroupUserArrayOutput) ToGroupUserArrayOutputWithContext(ctx context.Context) GroupUserArrayOutput {
	return o
}

func (o GroupUserArrayOutput) Index(i pulumi.IntInput) GroupUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupUser {
		return vs[0].([]GroupUser)[vs[1].(int)]
	}).(GroupUserOutput)
}

type IPBlockIpConsumer struct {
	DatacenterId    *string `pulumi:"datacenterId"`
	DatacenterName  *string `pulumi:"datacenterName"`
	Ip              *string `pulumi:"ip"`
	K8sClusterUuid  *string `pulumi:"k8sClusterUuid"`
	K8sNodepoolUuid *string `pulumi:"k8sNodepoolUuid"`
	Mac             *string `pulumi:"mac"`
	NicId           *string `pulumi:"nicId"`
	ServerId        *string `pulumi:"serverId"`
	ServerName      *string `pulumi:"serverName"`
}

// IPBlockIpConsumerInput is an input type that accepts IPBlockIpConsumerArgs and IPBlockIpConsumerOutput values.
// You can construct a concrete instance of `IPBlockIpConsumerInput` via:
//
//	IPBlockIpConsumerArgs{...}
type IPBlockIpConsumerInput interface {
	pulumi.Input

	ToIPBlockIpConsumerOutput() IPBlockIpConsumerOutput
	ToIPBlockIpConsumerOutputWithContext(context.Context) IPBlockIpConsumerOutput
}

type IPBlockIpConsumerArgs struct {
	DatacenterId    pulumi.StringPtrInput `pulumi:"datacenterId"`
	DatacenterName  pulumi.StringPtrInput `pulumi:"datacenterName"`
	Ip              pulumi.StringPtrInput `pulumi:"ip"`
	K8sClusterUuid  pulumi.StringPtrInput `pulumi:"k8sClusterUuid"`
	K8sNodepoolUuid pulumi.StringPtrInput `pulumi:"k8sNodepoolUuid"`
	Mac             pulumi.StringPtrInput `pulumi:"mac"`
	NicId           pulumi.StringPtrInput `pulumi:"nicId"`
	ServerId        pulumi.StringPtrInput `pulumi:"serverId"`
	ServerName      pulumi.StringPtrInput `pulumi:"serverName"`
}

func (IPBlockIpConsumerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPBlockIpConsumer)(nil)).Elem()
}

func (i IPBlockIpConsumerArgs) ToIPBlockIpConsumerOutput() IPBlockIpConsumerOutput {
	return i.ToIPBlockIpConsumerOutputWithContext(context.Background())
}

func (i IPBlockIpConsumerArgs) ToIPBlockIpConsumerOutputWithContext(ctx context.Context) IPBlockIpConsumerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPBlockIpConsumerOutput)
}

// IPBlockIpConsumerArrayInput is an input type that accepts IPBlockIpConsumerArray and IPBlockIpConsumerArrayOutput values.
// You can construct a concrete instance of `IPBlockIpConsumerArrayInput` via:
//
//	IPBlockIpConsumerArray{ IPBlockIpConsumerArgs{...} }
type IPBlockIpConsumerArrayInput interface {
	pulumi.Input

	ToIPBlockIpConsumerArrayOutput() IPBlockIpConsumerArrayOutput
	ToIPBlockIpConsumerArrayOutputWithContext(context.Context) IPBlockIpConsumerArrayOutput
}

type IPBlockIpConsumerArray []IPBlockIpConsumerInput

func (IPBlockIpConsumerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPBlockIpConsumer)(nil)).Elem()
}

func (i IPBlockIpConsumerArray) ToIPBlockIpConsumerArrayOutput() IPBlockIpConsumerArrayOutput {
	return i.ToIPBlockIpConsumerArrayOutputWithContext(context.Background())
}

func (i IPBlockIpConsumerArray) ToIPBlockIpConsumerArrayOutputWithContext(ctx context.Context) IPBlockIpConsumerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPBlockIpConsumerArrayOutput)
}

type IPBlockIpConsumerOutput struct{ *pulumi.OutputState }

func (IPBlockIpConsumerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPBlockIpConsumer)(nil)).Elem()
}

func (o IPBlockIpConsumerOutput) ToIPBlockIpConsumerOutput() IPBlockIpConsumerOutput {
	return o
}

func (o IPBlockIpConsumerOutput) ToIPBlockIpConsumerOutputWithContext(ctx context.Context) IPBlockIpConsumerOutput {
	return o
}

func (o IPBlockIpConsumerOutput) DatacenterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPBlockIpConsumer) *string { return v.DatacenterId }).(pulumi.StringPtrOutput)
}

func (o IPBlockIpConsumerOutput) DatacenterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPBlockIpConsumer) *string { return v.DatacenterName }).(pulumi.StringPtrOutput)
}

func (o IPBlockIpConsumerOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPBlockIpConsumer) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

func (o IPBlockIpConsumerOutput) K8sClusterUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPBlockIpConsumer) *string { return v.K8sClusterUuid }).(pulumi.StringPtrOutput)
}

func (o IPBlockIpConsumerOutput) K8sNodepoolUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPBlockIpConsumer) *string { return v.K8sNodepoolUuid }).(pulumi.StringPtrOutput)
}

func (o IPBlockIpConsumerOutput) Mac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPBlockIpConsumer) *string { return v.Mac }).(pulumi.StringPtrOutput)
}

func (o IPBlockIpConsumerOutput) NicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPBlockIpConsumer) *string { return v.NicId }).(pulumi.StringPtrOutput)
}

func (o IPBlockIpConsumerOutput) ServerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPBlockIpConsumer) *string { return v.ServerId }).(pulumi.StringPtrOutput)
}

func (o IPBlockIpConsumerOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPBlockIpConsumer) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

type IPBlockIpConsumerArrayOutput struct{ *pulumi.OutputState }

func (IPBlockIpConsumerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPBlockIpConsumer)(nil)).Elem()
}

func (o IPBlockIpConsumerArrayOutput) ToIPBlockIpConsumerArrayOutput() IPBlockIpConsumerArrayOutput {
	return o
}

func (o IPBlockIpConsumerArrayOutput) ToIPBlockIpConsumerArrayOutputWithContext(ctx context.Context) IPBlockIpConsumerArrayOutput {
	return o
}

func (o IPBlockIpConsumerArrayOutput) Index(i pulumi.IntInput) IPBlockIpConsumerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IPBlockIpConsumer {
		return vs[0].([]IPBlockIpConsumer)[vs[1].(int)]
	}).(IPBlockIpConsumerOutput)
}

type LanIpFailover struct {
	Ip      *string `pulumi:"ip"`
	NicUuid *string `pulumi:"nicUuid"`
}

// LanIpFailoverInput is an input type that accepts LanIpFailoverArgs and LanIpFailoverOutput values.
// You can construct a concrete instance of `LanIpFailoverInput` via:
//
//	LanIpFailoverArgs{...}
type LanIpFailoverInput interface {
	pulumi.Input

	ToLanIpFailoverOutput() LanIpFailoverOutput
	ToLanIpFailoverOutputWithContext(context.Context) LanIpFailoverOutput
}

type LanIpFailoverArgs struct {
	Ip      pulumi.StringPtrInput `pulumi:"ip"`
	NicUuid pulumi.StringPtrInput `pulumi:"nicUuid"`
}

func (LanIpFailoverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LanIpFailover)(nil)).Elem()
}

func (i LanIpFailoverArgs) ToLanIpFailoverOutput() LanIpFailoverOutput {
	return i.ToLanIpFailoverOutputWithContext(context.Background())
}

func (i LanIpFailoverArgs) ToLanIpFailoverOutputWithContext(ctx context.Context) LanIpFailoverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LanIpFailoverOutput)
}

// LanIpFailoverArrayInput is an input type that accepts LanIpFailoverArray and LanIpFailoverArrayOutput values.
// You can construct a concrete instance of `LanIpFailoverArrayInput` via:
//
//	LanIpFailoverArray{ LanIpFailoverArgs{...} }
type LanIpFailoverArrayInput interface {
	pulumi.Input

	ToLanIpFailoverArrayOutput() LanIpFailoverArrayOutput
	ToLanIpFailoverArrayOutputWithContext(context.Context) LanIpFailoverArrayOutput
}

type LanIpFailoverArray []LanIpFailoverInput

func (LanIpFailoverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LanIpFailover)(nil)).Elem()
}

func (i LanIpFailoverArray) ToLanIpFailoverArrayOutput() LanIpFailoverArrayOutput {
	return i.ToLanIpFailoverArrayOutputWithContext(context.Background())
}

func (i LanIpFailoverArray) ToLanIpFailoverArrayOutputWithContext(ctx context.Context) LanIpFailoverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LanIpFailoverArrayOutput)
}

type LanIpFailoverOutput struct{ *pulumi.OutputState }

func (LanIpFailoverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LanIpFailover)(nil)).Elem()
}

func (o LanIpFailoverOutput) ToLanIpFailoverOutput() LanIpFailoverOutput {
	return o
}

func (o LanIpFailoverOutput) ToLanIpFailoverOutputWithContext(ctx context.Context) LanIpFailoverOutput {
	return o
}

func (o LanIpFailoverOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LanIpFailover) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

func (o LanIpFailoverOutput) NicUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LanIpFailover) *string { return v.NicUuid }).(pulumi.StringPtrOutput)
}

type LanIpFailoverArrayOutput struct{ *pulumi.OutputState }

func (LanIpFailoverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LanIpFailover)(nil)).Elem()
}

func (o LanIpFailoverArrayOutput) ToLanIpFailoverArrayOutput() LanIpFailoverArrayOutput {
	return o
}

func (o LanIpFailoverArrayOutput) ToLanIpFailoverArrayOutputWithContext(ctx context.Context) LanIpFailoverArrayOutput {
	return o
}

func (o LanIpFailoverArrayOutput) Index(i pulumi.IntInput) LanIpFailoverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LanIpFailover {
		return vs[0].([]LanIpFailover)[vs[1].(int)]
	}).(LanIpFailoverOutput)
}

type NicFlowlog struct {
	// Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, update forces re-creation.
	Action string `pulumi:"action"`
	// Specifies the IONOS Object Storage bucket where the flow log data will be stored. The bucket must exist. Immutable, update forces re-creation.
	Bucket string `pulumi:"bucket"`
	// Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, update forces re-creation.
	Direction string `pulumi:"direction"`
	// The ID of the NIC.
	Id *string `pulumi:"id"`
	// Specifies the name of the flow log.
	//
	// ⚠️ **Note:**: Removing the `flowlog` forces re-creation of the NIC resource.
	Name string `pulumi:"name"`
}

// NicFlowlogInput is an input type that accepts NicFlowlogArgs and NicFlowlogOutput values.
// You can construct a concrete instance of `NicFlowlogInput` via:
//
//	NicFlowlogArgs{...}
type NicFlowlogInput interface {
	pulumi.Input

	ToNicFlowlogOutput() NicFlowlogOutput
	ToNicFlowlogOutputWithContext(context.Context) NicFlowlogOutput
}

type NicFlowlogArgs struct {
	// Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, update forces re-creation.
	Action pulumi.StringInput `pulumi:"action"`
	// Specifies the IONOS Object Storage bucket where the flow log data will be stored. The bucket must exist. Immutable, update forces re-creation.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, update forces re-creation.
	Direction pulumi.StringInput `pulumi:"direction"`
	// The ID of the NIC.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the name of the flow log.
	//
	// ⚠️ **Note:**: Removing the `flowlog` forces re-creation of the NIC resource.
	Name pulumi.StringInput `pulumi:"name"`
}

func (NicFlowlogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NicFlowlog)(nil)).Elem()
}

func (i NicFlowlogArgs) ToNicFlowlogOutput() NicFlowlogOutput {
	return i.ToNicFlowlogOutputWithContext(context.Background())
}

func (i NicFlowlogArgs) ToNicFlowlogOutputWithContext(ctx context.Context) NicFlowlogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NicFlowlogOutput)
}

func (i NicFlowlogArgs) ToNicFlowlogPtrOutput() NicFlowlogPtrOutput {
	return i.ToNicFlowlogPtrOutputWithContext(context.Background())
}

func (i NicFlowlogArgs) ToNicFlowlogPtrOutputWithContext(ctx context.Context) NicFlowlogPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NicFlowlogOutput).ToNicFlowlogPtrOutputWithContext(ctx)
}

// NicFlowlogPtrInput is an input type that accepts NicFlowlogArgs, NicFlowlogPtr and NicFlowlogPtrOutput values.
// You can construct a concrete instance of `NicFlowlogPtrInput` via:
//
//	        NicFlowlogArgs{...}
//
//	or:
//
//	        nil
type NicFlowlogPtrInput interface {
	pulumi.Input

	ToNicFlowlogPtrOutput() NicFlowlogPtrOutput
	ToNicFlowlogPtrOutputWithContext(context.Context) NicFlowlogPtrOutput
}

type nicFlowlogPtrType NicFlowlogArgs

func NicFlowlogPtr(v *NicFlowlogArgs) NicFlowlogPtrInput {
	return (*nicFlowlogPtrType)(v)
}

func (*nicFlowlogPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NicFlowlog)(nil)).Elem()
}

func (i *nicFlowlogPtrType) ToNicFlowlogPtrOutput() NicFlowlogPtrOutput {
	return i.ToNicFlowlogPtrOutputWithContext(context.Background())
}

func (i *nicFlowlogPtrType) ToNicFlowlogPtrOutputWithContext(ctx context.Context) NicFlowlogPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NicFlowlogPtrOutput)
}

type NicFlowlogOutput struct{ *pulumi.OutputState }

func (NicFlowlogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NicFlowlog)(nil)).Elem()
}

func (o NicFlowlogOutput) ToNicFlowlogOutput() NicFlowlogOutput {
	return o
}

func (o NicFlowlogOutput) ToNicFlowlogOutputWithContext(ctx context.Context) NicFlowlogOutput {
	return o
}

func (o NicFlowlogOutput) ToNicFlowlogPtrOutput() NicFlowlogPtrOutput {
	return o.ToNicFlowlogPtrOutputWithContext(context.Background())
}

func (o NicFlowlogOutput) ToNicFlowlogPtrOutputWithContext(ctx context.Context) NicFlowlogPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NicFlowlog) *NicFlowlog {
		return &v
	}).(NicFlowlogPtrOutput)
}

// Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, update forces re-creation.
func (o NicFlowlogOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v NicFlowlog) string { return v.Action }).(pulumi.StringOutput)
}

// Specifies the IONOS Object Storage bucket where the flow log data will be stored. The bucket must exist. Immutable, update forces re-creation.
func (o NicFlowlogOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v NicFlowlog) string { return v.Bucket }).(pulumi.StringOutput)
}

// Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, update forces re-creation.
func (o NicFlowlogOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v NicFlowlog) string { return v.Direction }).(pulumi.StringOutput)
}

// The ID of the NIC.
func (o NicFlowlogOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NicFlowlog) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the name of the flow log.
//
// ⚠️ **Note:**: Removing the `flowlog` forces re-creation of the NIC resource.
func (o NicFlowlogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NicFlowlog) string { return v.Name }).(pulumi.StringOutput)
}

type NicFlowlogPtrOutput struct{ *pulumi.OutputState }

func (NicFlowlogPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NicFlowlog)(nil)).Elem()
}

func (o NicFlowlogPtrOutput) ToNicFlowlogPtrOutput() NicFlowlogPtrOutput {
	return o
}

func (o NicFlowlogPtrOutput) ToNicFlowlogPtrOutputWithContext(ctx context.Context) NicFlowlogPtrOutput {
	return o
}

func (o NicFlowlogPtrOutput) Elem() NicFlowlogOutput {
	return o.ApplyT(func(v *NicFlowlog) NicFlowlog {
		if v != nil {
			return *v
		}
		var ret NicFlowlog
		return ret
	}).(NicFlowlogOutput)
}

// Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, update forces re-creation.
func (o NicFlowlogPtrOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NicFlowlog) *string {
		if v == nil {
			return nil
		}
		return &v.Action
	}).(pulumi.StringPtrOutput)
}

// Specifies the IONOS Object Storage bucket where the flow log data will be stored. The bucket must exist. Immutable, update forces re-creation.
func (o NicFlowlogPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NicFlowlog) *string {
		if v == nil {
			return nil
		}
		return &v.Bucket
	}).(pulumi.StringPtrOutput)
}

// Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, update forces re-creation.
func (o NicFlowlogPtrOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NicFlowlog) *string {
		if v == nil {
			return nil
		}
		return &v.Direction
	}).(pulumi.StringPtrOutput)
}

// The ID of the NIC.
func (o NicFlowlogPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NicFlowlog) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Specifies the name of the flow log.
//
// ⚠️ **Note:**: Removing the `flowlog` forces re-creation of the NIC resource.
func (o NicFlowlogPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NicFlowlog) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

type ServerLabel struct {
	// [string] The key of the label.
	Key string `pulumi:"key"`
	// [string] The value of the label.
	Value string `pulumi:"value"`
}

// ServerLabelInput is an input type that accepts ServerLabelArgs and ServerLabelOutput values.
// You can construct a concrete instance of `ServerLabelInput` via:
//
//	ServerLabelArgs{...}
type ServerLabelInput interface {
	pulumi.Input

	ToServerLabelOutput() ServerLabelOutput
	ToServerLabelOutputWithContext(context.Context) ServerLabelOutput
}

type ServerLabelArgs struct {
	// [string] The key of the label.
	Key pulumi.StringInput `pulumi:"key"`
	// [string] The value of the label.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ServerLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerLabel)(nil)).Elem()
}

func (i ServerLabelArgs) ToServerLabelOutput() ServerLabelOutput {
	return i.ToServerLabelOutputWithContext(context.Background())
}

func (i ServerLabelArgs) ToServerLabelOutputWithContext(ctx context.Context) ServerLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerLabelOutput)
}

// ServerLabelArrayInput is an input type that accepts ServerLabelArray and ServerLabelArrayOutput values.
// You can construct a concrete instance of `ServerLabelArrayInput` via:
//
//	ServerLabelArray{ ServerLabelArgs{...} }
type ServerLabelArrayInput interface {
	pulumi.Input

	ToServerLabelArrayOutput() ServerLabelArrayOutput
	ToServerLabelArrayOutputWithContext(context.Context) ServerLabelArrayOutput
}

type ServerLabelArray []ServerLabelInput

func (ServerLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerLabel)(nil)).Elem()
}

func (i ServerLabelArray) ToServerLabelArrayOutput() ServerLabelArrayOutput {
	return i.ToServerLabelArrayOutputWithContext(context.Background())
}

func (i ServerLabelArray) ToServerLabelArrayOutputWithContext(ctx context.Context) ServerLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerLabelArrayOutput)
}

type ServerLabelOutput struct{ *pulumi.OutputState }

func (ServerLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerLabel)(nil)).Elem()
}

func (o ServerLabelOutput) ToServerLabelOutput() ServerLabelOutput {
	return o
}

func (o ServerLabelOutput) ToServerLabelOutputWithContext(ctx context.Context) ServerLabelOutput {
	return o
}

// [string] The key of the label.
func (o ServerLabelOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ServerLabel) string { return v.Key }).(pulumi.StringOutput)
}

// [string] The value of the label.
func (o ServerLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ServerLabel) string { return v.Value }).(pulumi.StringOutput)
}

type ServerLabelArrayOutput struct{ *pulumi.OutputState }

func (ServerLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerLabel)(nil)).Elem()
}

func (o ServerLabelArrayOutput) ToServerLabelArrayOutput() ServerLabelArrayOutput {
	return o
}

func (o ServerLabelArrayOutput) ToServerLabelArrayOutputWithContext(ctx context.Context) ServerLabelArrayOutput {
	return o
}

func (o ServerLabelArrayOutput) Index(i pulumi.IntInput) ServerLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerLabel {
		return vs[0].([]ServerLabel)[vs[1].(int)]
	}).(ServerLabelOutput)
}

type ServerNic struct {
	DeviceNumber *int  `pulumi:"deviceNumber"`
	Dhcp         *bool `pulumi:"dhcp"`
	// Indicates whether this NIC receives an IPv6 address through DHCP.
	Dhcpv6         *bool   `pulumi:"dhcpv6"`
	FirewallActive *bool   `pulumi:"firewallActive"`
	FirewallType   *string `pulumi:"firewallType"`
	// Allows to define firewall rules inline in the server. See the Firewall section.
	Firewalls []ServerNicFirewall `pulumi:"firewalls"`
	Id        *string             `pulumi:"id"`
	// Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
	Ips []string `pulumi:"ips"`
	// IPv6 CIDR block assigned to the NIC.
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	// Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6 CIDR block assigned to the nic.
	Ipv6Ips []string `pulumi:"ipv6Ips"`
	Lan     int      `pulumi:"lan"`
	Mac     *string  `pulumi:"mac"`
	// [string] The name of the server.
	Name    *string `pulumi:"name"`
	PciSlot *int    `pulumi:"pciSlot"`
}

// ServerNicInput is an input type that accepts ServerNicArgs and ServerNicOutput values.
// You can construct a concrete instance of `ServerNicInput` via:
//
//	ServerNicArgs{...}
type ServerNicInput interface {
	pulumi.Input

	ToServerNicOutput() ServerNicOutput
	ToServerNicOutputWithContext(context.Context) ServerNicOutput
}

type ServerNicArgs struct {
	DeviceNumber pulumi.IntPtrInput  `pulumi:"deviceNumber"`
	Dhcp         pulumi.BoolPtrInput `pulumi:"dhcp"`
	// Indicates whether this NIC receives an IPv6 address through DHCP.
	Dhcpv6         pulumi.BoolPtrInput   `pulumi:"dhcpv6"`
	FirewallActive pulumi.BoolPtrInput   `pulumi:"firewallActive"`
	FirewallType   pulumi.StringPtrInput `pulumi:"firewallType"`
	// Allows to define firewall rules inline in the server. See the Firewall section.
	Firewalls ServerNicFirewallArrayInput `pulumi:"firewalls"`
	Id        pulumi.StringPtrInput       `pulumi:"id"`
	// Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
	Ips pulumi.StringArrayInput `pulumi:"ips"`
	// IPv6 CIDR block assigned to the NIC.
	Ipv6CidrBlock pulumi.StringPtrInput `pulumi:"ipv6CidrBlock"`
	// Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6 CIDR block assigned to the nic.
	Ipv6Ips pulumi.StringArrayInput `pulumi:"ipv6Ips"`
	Lan     pulumi.IntInput         `pulumi:"lan"`
	Mac     pulumi.StringPtrInput   `pulumi:"mac"`
	// [string] The name of the server.
	Name    pulumi.StringPtrInput `pulumi:"name"`
	PciSlot pulumi.IntPtrInput    `pulumi:"pciSlot"`
}

func (ServerNicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerNic)(nil)).Elem()
}

func (i ServerNicArgs) ToServerNicOutput() ServerNicOutput {
	return i.ToServerNicOutputWithContext(context.Background())
}

func (i ServerNicArgs) ToServerNicOutputWithContext(ctx context.Context) ServerNicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerNicOutput)
}

func (i ServerNicArgs) ToServerNicPtrOutput() ServerNicPtrOutput {
	return i.ToServerNicPtrOutputWithContext(context.Background())
}

func (i ServerNicArgs) ToServerNicPtrOutputWithContext(ctx context.Context) ServerNicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerNicOutput).ToServerNicPtrOutputWithContext(ctx)
}

// ServerNicPtrInput is an input type that accepts ServerNicArgs, ServerNicPtr and ServerNicPtrOutput values.
// You can construct a concrete instance of `ServerNicPtrInput` via:
//
//	        ServerNicArgs{...}
//
//	or:
//
//	        nil
type ServerNicPtrInput interface {
	pulumi.Input

	ToServerNicPtrOutput() ServerNicPtrOutput
	ToServerNicPtrOutputWithContext(context.Context) ServerNicPtrOutput
}

type serverNicPtrType ServerNicArgs

func ServerNicPtr(v *ServerNicArgs) ServerNicPtrInput {
	return (*serverNicPtrType)(v)
}

func (*serverNicPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerNic)(nil)).Elem()
}

func (i *serverNicPtrType) ToServerNicPtrOutput() ServerNicPtrOutput {
	return i.ToServerNicPtrOutputWithContext(context.Background())
}

func (i *serverNicPtrType) ToServerNicPtrOutputWithContext(ctx context.Context) ServerNicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerNicPtrOutput)
}

type ServerNicOutput struct{ *pulumi.OutputState }

func (ServerNicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerNic)(nil)).Elem()
}

func (o ServerNicOutput) ToServerNicOutput() ServerNicOutput {
	return o
}

func (o ServerNicOutput) ToServerNicOutputWithContext(ctx context.Context) ServerNicOutput {
	return o
}

func (o ServerNicOutput) ToServerNicPtrOutput() ServerNicPtrOutput {
	return o.ToServerNicPtrOutputWithContext(context.Background())
}

func (o ServerNicOutput) ToServerNicPtrOutputWithContext(ctx context.Context) ServerNicPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerNic) *ServerNic {
		return &v
	}).(ServerNicPtrOutput)
}

func (o ServerNicOutput) DeviceNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerNic) *int { return v.DeviceNumber }).(pulumi.IntPtrOutput)
}

func (o ServerNicOutput) Dhcp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServerNic) *bool { return v.Dhcp }).(pulumi.BoolPtrOutput)
}

// Indicates whether this NIC receives an IPv6 address through DHCP.
func (o ServerNicOutput) Dhcpv6() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServerNic) *bool { return v.Dhcpv6 }).(pulumi.BoolPtrOutput)
}

func (o ServerNicOutput) FirewallActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServerNic) *bool { return v.FirewallActive }).(pulumi.BoolPtrOutput)
}

func (o ServerNicOutput) FirewallType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerNic) *string { return v.FirewallType }).(pulumi.StringPtrOutput)
}

// Allows to define firewall rules inline in the server. See the Firewall section.
func (o ServerNicOutput) Firewalls() ServerNicFirewallArrayOutput {
	return o.ApplyT(func(v ServerNic) []ServerNicFirewall { return v.Firewalls }).(ServerNicFirewallArrayOutput)
}

func (o ServerNicOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerNic) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
func (o ServerNicOutput) Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServerNic) []string { return v.Ips }).(pulumi.StringArrayOutput)
}

// IPv6 CIDR block assigned to the NIC.
func (o ServerNicOutput) Ipv6CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerNic) *string { return v.Ipv6CidrBlock }).(pulumi.StringPtrOutput)
}

// Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6 CIDR block assigned to the nic.
func (o ServerNicOutput) Ipv6Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServerNic) []string { return v.Ipv6Ips }).(pulumi.StringArrayOutput)
}

func (o ServerNicOutput) Lan() pulumi.IntOutput {
	return o.ApplyT(func(v ServerNic) int { return v.Lan }).(pulumi.IntOutput)
}

func (o ServerNicOutput) Mac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerNic) *string { return v.Mac }).(pulumi.StringPtrOutput)
}

// [string] The name of the server.
func (o ServerNicOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerNic) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ServerNicOutput) PciSlot() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerNic) *int { return v.PciSlot }).(pulumi.IntPtrOutput)
}

type ServerNicPtrOutput struct{ *pulumi.OutputState }

func (ServerNicPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerNic)(nil)).Elem()
}

func (o ServerNicPtrOutput) ToServerNicPtrOutput() ServerNicPtrOutput {
	return o
}

func (o ServerNicPtrOutput) ToServerNicPtrOutputWithContext(ctx context.Context) ServerNicPtrOutput {
	return o
}

func (o ServerNicPtrOutput) Elem() ServerNicOutput {
	return o.ApplyT(func(v *ServerNic) ServerNic {
		if v != nil {
			return *v
		}
		var ret ServerNic
		return ret
	}).(ServerNicOutput)
}

func (o ServerNicPtrOutput) DeviceNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerNic) *int {
		if v == nil {
			return nil
		}
		return v.DeviceNumber
	}).(pulumi.IntPtrOutput)
}

func (o ServerNicPtrOutput) Dhcp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerNic) *bool {
		if v == nil {
			return nil
		}
		return v.Dhcp
	}).(pulumi.BoolPtrOutput)
}

// Indicates whether this NIC receives an IPv6 address through DHCP.
func (o ServerNicPtrOutput) Dhcpv6() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerNic) *bool {
		if v == nil {
			return nil
		}
		return v.Dhcpv6
	}).(pulumi.BoolPtrOutput)
}

func (o ServerNicPtrOutput) FirewallActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerNic) *bool {
		if v == nil {
			return nil
		}
		return v.FirewallActive
	}).(pulumi.BoolPtrOutput)
}

func (o ServerNicPtrOutput) FirewallType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerNic) *string {
		if v == nil {
			return nil
		}
		return v.FirewallType
	}).(pulumi.StringPtrOutput)
}

// Allows to define firewall rules inline in the server. See the Firewall section.
func (o ServerNicPtrOutput) Firewalls() ServerNicFirewallArrayOutput {
	return o.ApplyT(func(v *ServerNic) []ServerNicFirewall {
		if v == nil {
			return nil
		}
		return v.Firewalls
	}).(ServerNicFirewallArrayOutput)
}

func (o ServerNicPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerNic) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
func (o ServerNicPtrOutput) Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerNic) []string {
		if v == nil {
			return nil
		}
		return v.Ips
	}).(pulumi.StringArrayOutput)
}

// IPv6 CIDR block assigned to the NIC.
func (o ServerNicPtrOutput) Ipv6CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerNic) *string {
		if v == nil {
			return nil
		}
		return v.Ipv6CidrBlock
	}).(pulumi.StringPtrOutput)
}

// Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6 CIDR block assigned to the nic.
func (o ServerNicPtrOutput) Ipv6Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerNic) []string {
		if v == nil {
			return nil
		}
		return v.Ipv6Ips
	}).(pulumi.StringArrayOutput)
}

func (o ServerNicPtrOutput) Lan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerNic) *int {
		if v == nil {
			return nil
		}
		return &v.Lan
	}).(pulumi.IntPtrOutput)
}

func (o ServerNicPtrOutput) Mac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerNic) *string {
		if v == nil {
			return nil
		}
		return v.Mac
	}).(pulumi.StringPtrOutput)
}

// [string] The name of the server.
func (o ServerNicPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerNic) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ServerNicPtrOutput) PciSlot() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerNic) *int {
		if v == nil {
			return nil
		}
		return v.PciSlot
	}).(pulumi.IntPtrOutput)
}

type ServerNicFirewall struct {
	IcmpCode *string `pulumi:"icmpCode"`
	IcmpType *string `pulumi:"icmpType"`
	Id       *string `pulumi:"id"`
	// [string] The name of the server.
	Name           *string `pulumi:"name"`
	PortRangeEnd   *int    `pulumi:"portRangeEnd"`
	PortRangeStart *int    `pulumi:"portRangeStart"`
	Protocol       string  `pulumi:"protocol"`
	SourceIp       *string `pulumi:"sourceIp"`
	SourceMac      *string `pulumi:"sourceMac"`
	TargetIp       *string `pulumi:"targetIp"`
	// (Computed)[string] Server usages: [ENTERPRISE](https://docs.ionos.com/cloud/compute-engine/virtual-servers/virtual-servers) or [CUBE](https://docs.ionos.com/cloud/compute-engine/virtual-servers/cloud-cubes). This property is immutable.
	Type *string `pulumi:"type"`
}

// ServerNicFirewallInput is an input type that accepts ServerNicFirewallArgs and ServerNicFirewallOutput values.
// You can construct a concrete instance of `ServerNicFirewallInput` via:
//
//	ServerNicFirewallArgs{...}
type ServerNicFirewallInput interface {
	pulumi.Input

	ToServerNicFirewallOutput() ServerNicFirewallOutput
	ToServerNicFirewallOutputWithContext(context.Context) ServerNicFirewallOutput
}

type ServerNicFirewallArgs struct {
	IcmpCode pulumi.StringPtrInput `pulumi:"icmpCode"`
	IcmpType pulumi.StringPtrInput `pulumi:"icmpType"`
	Id       pulumi.StringPtrInput `pulumi:"id"`
	// [string] The name of the server.
	Name           pulumi.StringPtrInput `pulumi:"name"`
	PortRangeEnd   pulumi.IntPtrInput    `pulumi:"portRangeEnd"`
	PortRangeStart pulumi.IntPtrInput    `pulumi:"portRangeStart"`
	Protocol       pulumi.StringInput    `pulumi:"protocol"`
	SourceIp       pulumi.StringPtrInput `pulumi:"sourceIp"`
	SourceMac      pulumi.StringPtrInput `pulumi:"sourceMac"`
	TargetIp       pulumi.StringPtrInput `pulumi:"targetIp"`
	// (Computed)[string] Server usages: [ENTERPRISE](https://docs.ionos.com/cloud/compute-engine/virtual-servers/virtual-servers) or [CUBE](https://docs.ionos.com/cloud/compute-engine/virtual-servers/cloud-cubes). This property is immutable.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ServerNicFirewallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerNicFirewall)(nil)).Elem()
}

func (i ServerNicFirewallArgs) ToServerNicFirewallOutput() ServerNicFirewallOutput {
	return i.ToServerNicFirewallOutputWithContext(context.Background())
}

func (i ServerNicFirewallArgs) ToServerNicFirewallOutputWithContext(ctx context.Context) ServerNicFirewallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerNicFirewallOutput)
}

// ServerNicFirewallArrayInput is an input type that accepts ServerNicFirewallArray and ServerNicFirewallArrayOutput values.
// You can construct a concrete instance of `ServerNicFirewallArrayInput` via:
//
//	ServerNicFirewallArray{ ServerNicFirewallArgs{...} }
type ServerNicFirewallArrayInput interface {
	pulumi.Input

	ToServerNicFirewallArrayOutput() ServerNicFirewallArrayOutput
	ToServerNicFirewallArrayOutputWithContext(context.Context) ServerNicFirewallArrayOutput
}

type ServerNicFirewallArray []ServerNicFirewallInput

func (ServerNicFirewallArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerNicFirewall)(nil)).Elem()
}

func (i ServerNicFirewallArray) ToServerNicFirewallArrayOutput() ServerNicFirewallArrayOutput {
	return i.ToServerNicFirewallArrayOutputWithContext(context.Background())
}

func (i ServerNicFirewallArray) ToServerNicFirewallArrayOutputWithContext(ctx context.Context) ServerNicFirewallArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerNicFirewallArrayOutput)
}

type ServerNicFirewallOutput struct{ *pulumi.OutputState }

func (ServerNicFirewallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerNicFirewall)(nil)).Elem()
}

func (o ServerNicFirewallOutput) ToServerNicFirewallOutput() ServerNicFirewallOutput {
	return o
}

func (o ServerNicFirewallOutput) ToServerNicFirewallOutputWithContext(ctx context.Context) ServerNicFirewallOutput {
	return o
}

func (o ServerNicFirewallOutput) IcmpCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerNicFirewall) *string { return v.IcmpCode }).(pulumi.StringPtrOutput)
}

func (o ServerNicFirewallOutput) IcmpType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerNicFirewall) *string { return v.IcmpType }).(pulumi.StringPtrOutput)
}

func (o ServerNicFirewallOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerNicFirewall) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// [string] The name of the server.
func (o ServerNicFirewallOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerNicFirewall) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ServerNicFirewallOutput) PortRangeEnd() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerNicFirewall) *int { return v.PortRangeEnd }).(pulumi.IntPtrOutput)
}

func (o ServerNicFirewallOutput) PortRangeStart() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerNicFirewall) *int { return v.PortRangeStart }).(pulumi.IntPtrOutput)
}

func (o ServerNicFirewallOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v ServerNicFirewall) string { return v.Protocol }).(pulumi.StringOutput)
}

func (o ServerNicFirewallOutput) SourceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerNicFirewall) *string { return v.SourceIp }).(pulumi.StringPtrOutput)
}

func (o ServerNicFirewallOutput) SourceMac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerNicFirewall) *string { return v.SourceMac }).(pulumi.StringPtrOutput)
}

func (o ServerNicFirewallOutput) TargetIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerNicFirewall) *string { return v.TargetIp }).(pulumi.StringPtrOutput)
}

// (Computed)[string] Server usages: [ENTERPRISE](https://docs.ionos.com/cloud/compute-engine/virtual-servers/virtual-servers) or [CUBE](https://docs.ionos.com/cloud/compute-engine/virtual-servers/cloud-cubes). This property is immutable.
func (o ServerNicFirewallOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerNicFirewall) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ServerNicFirewallArrayOutput struct{ *pulumi.OutputState }

func (ServerNicFirewallArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerNicFirewall)(nil)).Elem()
}

func (o ServerNicFirewallArrayOutput) ToServerNicFirewallArrayOutput() ServerNicFirewallArrayOutput {
	return o
}

func (o ServerNicFirewallArrayOutput) ToServerNicFirewallArrayOutputWithContext(ctx context.Context) ServerNicFirewallArrayOutput {
	return o
}

func (o ServerNicFirewallArrayOutput) Index(i pulumi.IntInput) ServerNicFirewallOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerNicFirewall {
		return vs[0].([]ServerNicFirewall)[vs[1].(int)]
	}).(ServerNicFirewallOutput)
}

type ServerVolume struct {
	// [string] The availability zone in which the server should exist. E.g: `AUTO`, `ZONE_1`, `ZONE_2`. This property is immutable.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
	BackupUnitId *string `pulumi:"backupUnitId"`
	// The UUID of the attached server.
	BootServer          *string `pulumi:"bootServer"`
	Bus                 *string `pulumi:"bus"`
	CpuHotPlug          *bool   `pulumi:"cpuHotPlug"`
	DeviceNumber        *int    `pulumi:"deviceNumber"`
	DiscVirtioHotPlug   *bool   `pulumi:"discVirtioHotPlug"`
	DiscVirtioHotUnplug *bool   `pulumi:"discVirtioHotUnplug"`
	DiskType            string  `pulumi:"diskType"`
	// [string] Required if `sshKeyPath` is not provided.
	//
	// Deprecated: Please use imagePassword under server level
	ImagePassword *string `pulumi:"imagePassword"`
	// [string] Sets the OS type of the server.
	LicenceType *string `pulumi:"licenceType"`
	// [string] The name of the server.
	Name         *string `pulumi:"name"`
	NicHotPlug   *bool   `pulumi:"nicHotPlug"`
	NicHotUnplug *bool   `pulumi:"nicHotUnplug"`
	PciSlot      *int    `pulumi:"pciSlot"`
	RamHotPlug   *bool   `pulumi:"ramHotPlug"`
	// The size of the volume in GB.
	Size *int `pulumi:"size"`
	// [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images.  Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `imagePassword` is not provided. Does not support `~` expansion to homedir in the given path. This property is immutable.
	//
	// Deprecated: Please use sshKeyPath under server level
	SshKeyPaths []string `pulumi:"sshKeyPaths"`
	// [list] Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is used for the volume creation. Does not support `~` expansion to homedir in the given path.
	//
	// Deprecated: Please use sshKeys under server level
	SshKeys []string `pulumi:"sshKeys"`
	// The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' that has cloud-init compatibility in conjunction with this property.
	UserData *string `pulumi:"userData"`
}

// ServerVolumeInput is an input type that accepts ServerVolumeArgs and ServerVolumeOutput values.
// You can construct a concrete instance of `ServerVolumeInput` via:
//
//	ServerVolumeArgs{...}
type ServerVolumeInput interface {
	pulumi.Input

	ToServerVolumeOutput() ServerVolumeOutput
	ToServerVolumeOutputWithContext(context.Context) ServerVolumeOutput
}

type ServerVolumeArgs struct {
	// [string] The availability zone in which the server should exist. E.g: `AUTO`, `ZONE_1`, `ZONE_2`. This property is immutable.
	AvailabilityZone pulumi.StringPtrInput `pulumi:"availabilityZone"`
	// The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
	BackupUnitId pulumi.StringPtrInput `pulumi:"backupUnitId"`
	// The UUID of the attached server.
	BootServer          pulumi.StringPtrInput `pulumi:"bootServer"`
	Bus                 pulumi.StringPtrInput `pulumi:"bus"`
	CpuHotPlug          pulumi.BoolPtrInput   `pulumi:"cpuHotPlug"`
	DeviceNumber        pulumi.IntPtrInput    `pulumi:"deviceNumber"`
	DiscVirtioHotPlug   pulumi.BoolPtrInput   `pulumi:"discVirtioHotPlug"`
	DiscVirtioHotUnplug pulumi.BoolPtrInput   `pulumi:"discVirtioHotUnplug"`
	DiskType            pulumi.StringInput    `pulumi:"diskType"`
	// [string] Required if `sshKeyPath` is not provided.
	//
	// Deprecated: Please use imagePassword under server level
	ImagePassword pulumi.StringPtrInput `pulumi:"imagePassword"`
	// [string] Sets the OS type of the server.
	LicenceType pulumi.StringPtrInput `pulumi:"licenceType"`
	// [string] The name of the server.
	Name         pulumi.StringPtrInput `pulumi:"name"`
	NicHotPlug   pulumi.BoolPtrInput   `pulumi:"nicHotPlug"`
	NicHotUnplug pulumi.BoolPtrInput   `pulumi:"nicHotUnplug"`
	PciSlot      pulumi.IntPtrInput    `pulumi:"pciSlot"`
	RamHotPlug   pulumi.BoolPtrInput   `pulumi:"ramHotPlug"`
	// The size of the volume in GB.
	Size pulumi.IntPtrInput `pulumi:"size"`
	// [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images.  Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `imagePassword` is not provided. Does not support `~` expansion to homedir in the given path. This property is immutable.
	//
	// Deprecated: Please use sshKeyPath under server level
	SshKeyPaths pulumi.StringArrayInput `pulumi:"sshKeyPaths"`
	// [list] Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is used for the volume creation. Does not support `~` expansion to homedir in the given path.
	//
	// Deprecated: Please use sshKeys under server level
	SshKeys pulumi.StringArrayInput `pulumi:"sshKeys"`
	// The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' that has cloud-init compatibility in conjunction with this property.
	UserData pulumi.StringPtrInput `pulumi:"userData"`
}

func (ServerVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerVolume)(nil)).Elem()
}

func (i ServerVolumeArgs) ToServerVolumeOutput() ServerVolumeOutput {
	return i.ToServerVolumeOutputWithContext(context.Background())
}

func (i ServerVolumeArgs) ToServerVolumeOutputWithContext(ctx context.Context) ServerVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerVolumeOutput)
}

func (i ServerVolumeArgs) ToServerVolumePtrOutput() ServerVolumePtrOutput {
	return i.ToServerVolumePtrOutputWithContext(context.Background())
}

func (i ServerVolumeArgs) ToServerVolumePtrOutputWithContext(ctx context.Context) ServerVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerVolumeOutput).ToServerVolumePtrOutputWithContext(ctx)
}

// ServerVolumePtrInput is an input type that accepts ServerVolumeArgs, ServerVolumePtr and ServerVolumePtrOutput values.
// You can construct a concrete instance of `ServerVolumePtrInput` via:
//
//	        ServerVolumeArgs{...}
//
//	or:
//
//	        nil
type ServerVolumePtrInput interface {
	pulumi.Input

	ToServerVolumePtrOutput() ServerVolumePtrOutput
	ToServerVolumePtrOutputWithContext(context.Context) ServerVolumePtrOutput
}

type serverVolumePtrType ServerVolumeArgs

func ServerVolumePtr(v *ServerVolumeArgs) ServerVolumePtrInput {
	return (*serverVolumePtrType)(v)
}

func (*serverVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerVolume)(nil)).Elem()
}

func (i *serverVolumePtrType) ToServerVolumePtrOutput() ServerVolumePtrOutput {
	return i.ToServerVolumePtrOutputWithContext(context.Background())
}

func (i *serverVolumePtrType) ToServerVolumePtrOutputWithContext(ctx context.Context) ServerVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerVolumePtrOutput)
}

type ServerVolumeOutput struct{ *pulumi.OutputState }

func (ServerVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerVolume)(nil)).Elem()
}

func (o ServerVolumeOutput) ToServerVolumeOutput() ServerVolumeOutput {
	return o
}

func (o ServerVolumeOutput) ToServerVolumeOutputWithContext(ctx context.Context) ServerVolumeOutput {
	return o
}

func (o ServerVolumeOutput) ToServerVolumePtrOutput() ServerVolumePtrOutput {
	return o.ToServerVolumePtrOutputWithContext(context.Background())
}

func (o ServerVolumeOutput) ToServerVolumePtrOutputWithContext(ctx context.Context) ServerVolumePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerVolume) *ServerVolume {
		return &v
	}).(ServerVolumePtrOutput)
}

// [string] The availability zone in which the server should exist. E.g: `AUTO`, `ZONE_1`, `ZONE_2`. This property is immutable.
func (o ServerVolumeOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerVolume) *string { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

// The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
func (o ServerVolumeOutput) BackupUnitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerVolume) *string { return v.BackupUnitId }).(pulumi.StringPtrOutput)
}

// The UUID of the attached server.
func (o ServerVolumeOutput) BootServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerVolume) *string { return v.BootServer }).(pulumi.StringPtrOutput)
}

func (o ServerVolumeOutput) Bus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerVolume) *string { return v.Bus }).(pulumi.StringPtrOutput)
}

func (o ServerVolumeOutput) CpuHotPlug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServerVolume) *bool { return v.CpuHotPlug }).(pulumi.BoolPtrOutput)
}

func (o ServerVolumeOutput) DeviceNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerVolume) *int { return v.DeviceNumber }).(pulumi.IntPtrOutput)
}

func (o ServerVolumeOutput) DiscVirtioHotPlug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServerVolume) *bool { return v.DiscVirtioHotPlug }).(pulumi.BoolPtrOutput)
}

func (o ServerVolumeOutput) DiscVirtioHotUnplug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServerVolume) *bool { return v.DiscVirtioHotUnplug }).(pulumi.BoolPtrOutput)
}

func (o ServerVolumeOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v ServerVolume) string { return v.DiskType }).(pulumi.StringOutput)
}

// [string] Required if `sshKeyPath` is not provided.
//
// Deprecated: Please use imagePassword under server level
func (o ServerVolumeOutput) ImagePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerVolume) *string { return v.ImagePassword }).(pulumi.StringPtrOutput)
}

// [string] Sets the OS type of the server.
func (o ServerVolumeOutput) LicenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerVolume) *string { return v.LicenceType }).(pulumi.StringPtrOutput)
}

// [string] The name of the server.
func (o ServerVolumeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerVolume) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ServerVolumeOutput) NicHotPlug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServerVolume) *bool { return v.NicHotPlug }).(pulumi.BoolPtrOutput)
}

func (o ServerVolumeOutput) NicHotUnplug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServerVolume) *bool { return v.NicHotUnplug }).(pulumi.BoolPtrOutput)
}

func (o ServerVolumeOutput) PciSlot() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerVolume) *int { return v.PciSlot }).(pulumi.IntPtrOutput)
}

func (o ServerVolumeOutput) RamHotPlug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServerVolume) *bool { return v.RamHotPlug }).(pulumi.BoolPtrOutput)
}

// The size of the volume in GB.
func (o ServerVolumeOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerVolume) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images.  Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `imagePassword` is not provided. Does not support `~` expansion to homedir in the given path. This property is immutable.
//
// Deprecated: Please use sshKeyPath under server level
func (o ServerVolumeOutput) SshKeyPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServerVolume) []string { return v.SshKeyPaths }).(pulumi.StringArrayOutput)
}

// [list] Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is used for the volume creation. Does not support `~` expansion to homedir in the given path.
//
// Deprecated: Please use sshKeys under server level
func (o ServerVolumeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServerVolume) []string { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' that has cloud-init compatibility in conjunction with this property.
func (o ServerVolumeOutput) UserData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerVolume) *string { return v.UserData }).(pulumi.StringPtrOutput)
}

type ServerVolumePtrOutput struct{ *pulumi.OutputState }

func (ServerVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerVolume)(nil)).Elem()
}

func (o ServerVolumePtrOutput) ToServerVolumePtrOutput() ServerVolumePtrOutput {
	return o
}

func (o ServerVolumePtrOutput) ToServerVolumePtrOutputWithContext(ctx context.Context) ServerVolumePtrOutput {
	return o
}

func (o ServerVolumePtrOutput) Elem() ServerVolumeOutput {
	return o.ApplyT(func(v *ServerVolume) ServerVolume {
		if v != nil {
			return *v
		}
		var ret ServerVolume
		return ret
	}).(ServerVolumeOutput)
}

// [string] The availability zone in which the server should exist. E.g: `AUTO`, `ZONE_1`, `ZONE_2`. This property is immutable.
func (o ServerVolumePtrOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerVolume) *string {
		if v == nil {
			return nil
		}
		return v.AvailabilityZone
	}).(pulumi.StringPtrOutput)
}

// The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
func (o ServerVolumePtrOutput) BackupUnitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerVolume) *string {
		if v == nil {
			return nil
		}
		return v.BackupUnitId
	}).(pulumi.StringPtrOutput)
}

// The UUID of the attached server.
func (o ServerVolumePtrOutput) BootServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerVolume) *string {
		if v == nil {
			return nil
		}
		return v.BootServer
	}).(pulumi.StringPtrOutput)
}

func (o ServerVolumePtrOutput) Bus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerVolume) *string {
		if v == nil {
			return nil
		}
		return v.Bus
	}).(pulumi.StringPtrOutput)
}

func (o ServerVolumePtrOutput) CpuHotPlug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerVolume) *bool {
		if v == nil {
			return nil
		}
		return v.CpuHotPlug
	}).(pulumi.BoolPtrOutput)
}

func (o ServerVolumePtrOutput) DeviceNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerVolume) *int {
		if v == nil {
			return nil
		}
		return v.DeviceNumber
	}).(pulumi.IntPtrOutput)
}

func (o ServerVolumePtrOutput) DiscVirtioHotPlug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerVolume) *bool {
		if v == nil {
			return nil
		}
		return v.DiscVirtioHotPlug
	}).(pulumi.BoolPtrOutput)
}

func (o ServerVolumePtrOutput) DiscVirtioHotUnplug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerVolume) *bool {
		if v == nil {
			return nil
		}
		return v.DiscVirtioHotUnplug
	}).(pulumi.BoolPtrOutput)
}

func (o ServerVolumePtrOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerVolume) *string {
		if v == nil {
			return nil
		}
		return &v.DiskType
	}).(pulumi.StringPtrOutput)
}

// [string] Required if `sshKeyPath` is not provided.
//
// Deprecated: Please use imagePassword under server level
func (o ServerVolumePtrOutput) ImagePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerVolume) *string {
		if v == nil {
			return nil
		}
		return v.ImagePassword
	}).(pulumi.StringPtrOutput)
}

// [string] Sets the OS type of the server.
func (o ServerVolumePtrOutput) LicenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerVolume) *string {
		if v == nil {
			return nil
		}
		return v.LicenceType
	}).(pulumi.StringPtrOutput)
}

// [string] The name of the server.
func (o ServerVolumePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerVolume) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ServerVolumePtrOutput) NicHotPlug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerVolume) *bool {
		if v == nil {
			return nil
		}
		return v.NicHotPlug
	}).(pulumi.BoolPtrOutput)
}

func (o ServerVolumePtrOutput) NicHotUnplug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerVolume) *bool {
		if v == nil {
			return nil
		}
		return v.NicHotUnplug
	}).(pulumi.BoolPtrOutput)
}

func (o ServerVolumePtrOutput) PciSlot() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerVolume) *int {
		if v == nil {
			return nil
		}
		return v.PciSlot
	}).(pulumi.IntPtrOutput)
}

func (o ServerVolumePtrOutput) RamHotPlug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerVolume) *bool {
		if v == nil {
			return nil
		}
		return v.RamHotPlug
	}).(pulumi.BoolPtrOutput)
}

// The size of the volume in GB.
func (o ServerVolumePtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerVolume) *int {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.IntPtrOutput)
}

// [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images.  Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `imagePassword` is not provided. Does not support `~` expansion to homedir in the given path. This property is immutable.
//
// Deprecated: Please use sshKeyPath under server level
func (o ServerVolumePtrOutput) SshKeyPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerVolume) []string {
		if v == nil {
			return nil
		}
		return v.SshKeyPaths
	}).(pulumi.StringArrayOutput)
}

// [list] Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is used for the volume creation. Does not support `~` expansion to homedir in the given path.
//
// Deprecated: Please use sshKeys under server level
func (o ServerVolumePtrOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerVolume) []string {
		if v == nil {
			return nil
		}
		return v.SshKeys
	}).(pulumi.StringArrayOutput)
}

// The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' that has cloud-init compatibility in conjunction with this property.
func (o ServerVolumePtrOutput) UserData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerVolume) *string {
		if v == nil {
			return nil
		}
		return v.UserData
	}).(pulumi.StringPtrOutput)
}

type VCPUServerLabel struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// VCPUServerLabelInput is an input type that accepts VCPUServerLabelArgs and VCPUServerLabelOutput values.
// You can construct a concrete instance of `VCPUServerLabelInput` via:
//
//	VCPUServerLabelArgs{...}
type VCPUServerLabelInput interface {
	pulumi.Input

	ToVCPUServerLabelOutput() VCPUServerLabelOutput
	ToVCPUServerLabelOutputWithContext(context.Context) VCPUServerLabelOutput
}

type VCPUServerLabelArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (VCPUServerLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VCPUServerLabel)(nil)).Elem()
}

func (i VCPUServerLabelArgs) ToVCPUServerLabelOutput() VCPUServerLabelOutput {
	return i.ToVCPUServerLabelOutputWithContext(context.Background())
}

func (i VCPUServerLabelArgs) ToVCPUServerLabelOutputWithContext(ctx context.Context) VCPUServerLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VCPUServerLabelOutput)
}

// VCPUServerLabelArrayInput is an input type that accepts VCPUServerLabelArray and VCPUServerLabelArrayOutput values.
// You can construct a concrete instance of `VCPUServerLabelArrayInput` via:
//
//	VCPUServerLabelArray{ VCPUServerLabelArgs{...} }
type VCPUServerLabelArrayInput interface {
	pulumi.Input

	ToVCPUServerLabelArrayOutput() VCPUServerLabelArrayOutput
	ToVCPUServerLabelArrayOutputWithContext(context.Context) VCPUServerLabelArrayOutput
}

type VCPUServerLabelArray []VCPUServerLabelInput

func (VCPUServerLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VCPUServerLabel)(nil)).Elem()
}

func (i VCPUServerLabelArray) ToVCPUServerLabelArrayOutput() VCPUServerLabelArrayOutput {
	return i.ToVCPUServerLabelArrayOutputWithContext(context.Background())
}

func (i VCPUServerLabelArray) ToVCPUServerLabelArrayOutputWithContext(ctx context.Context) VCPUServerLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VCPUServerLabelArrayOutput)
}

type VCPUServerLabelOutput struct{ *pulumi.OutputState }

func (VCPUServerLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VCPUServerLabel)(nil)).Elem()
}

func (o VCPUServerLabelOutput) ToVCPUServerLabelOutput() VCPUServerLabelOutput {
	return o
}

func (o VCPUServerLabelOutput) ToVCPUServerLabelOutputWithContext(ctx context.Context) VCPUServerLabelOutput {
	return o
}

func (o VCPUServerLabelOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v VCPUServerLabel) string { return v.Key }).(pulumi.StringOutput)
}

func (o VCPUServerLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v VCPUServerLabel) string { return v.Value }).(pulumi.StringOutput)
}

type VCPUServerLabelArrayOutput struct{ *pulumi.OutputState }

func (VCPUServerLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VCPUServerLabel)(nil)).Elem()
}

func (o VCPUServerLabelArrayOutput) ToVCPUServerLabelArrayOutput() VCPUServerLabelArrayOutput {
	return o
}

func (o VCPUServerLabelArrayOutput) ToVCPUServerLabelArrayOutputWithContext(ctx context.Context) VCPUServerLabelArrayOutput {
	return o
}

func (o VCPUServerLabelArrayOutput) Index(i pulumi.IntInput) VCPUServerLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VCPUServerLabel {
		return vs[0].([]VCPUServerLabel)[vs[1].(int)]
	}).(VCPUServerLabelOutput)
}

type VCPUServerNic struct {
	DeviceNumber   *int    `pulumi:"deviceNumber"`
	Dhcp           *bool   `pulumi:"dhcp"`
	Dhcpv6         *bool   `pulumi:"dhcpv6"`
	FirewallActive *bool   `pulumi:"firewallActive"`
	FirewallType   *string `pulumi:"firewallType"`
	// Allows to define firewall rules inline in the server. See the Firewall section.
	Firewalls []VCPUServerNicFirewall `pulumi:"firewalls"`
	Id        *string                 `pulumi:"id"`
	// Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
	Ips           []string `pulumi:"ips"`
	Ipv6CidrBlock *string  `pulumi:"ipv6CidrBlock"`
	Ipv6Ips       []string `pulumi:"ipv6Ips"`
	Lan           int      `pulumi:"lan"`
	Mac           *string  `pulumi:"mac"`
	// [string] The name of the server.
	Name    *string `pulumi:"name"`
	PciSlot *int    `pulumi:"pciSlot"`
}

// VCPUServerNicInput is an input type that accepts VCPUServerNicArgs and VCPUServerNicOutput values.
// You can construct a concrete instance of `VCPUServerNicInput` via:
//
//	VCPUServerNicArgs{...}
type VCPUServerNicInput interface {
	pulumi.Input

	ToVCPUServerNicOutput() VCPUServerNicOutput
	ToVCPUServerNicOutputWithContext(context.Context) VCPUServerNicOutput
}

type VCPUServerNicArgs struct {
	DeviceNumber   pulumi.IntPtrInput    `pulumi:"deviceNumber"`
	Dhcp           pulumi.BoolPtrInput   `pulumi:"dhcp"`
	Dhcpv6         pulumi.BoolPtrInput   `pulumi:"dhcpv6"`
	FirewallActive pulumi.BoolPtrInput   `pulumi:"firewallActive"`
	FirewallType   pulumi.StringPtrInput `pulumi:"firewallType"`
	// Allows to define firewall rules inline in the server. See the Firewall section.
	Firewalls VCPUServerNicFirewallArrayInput `pulumi:"firewalls"`
	Id        pulumi.StringPtrInput           `pulumi:"id"`
	// Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
	Ips           pulumi.StringArrayInput `pulumi:"ips"`
	Ipv6CidrBlock pulumi.StringPtrInput   `pulumi:"ipv6CidrBlock"`
	Ipv6Ips       pulumi.StringArrayInput `pulumi:"ipv6Ips"`
	Lan           pulumi.IntInput         `pulumi:"lan"`
	Mac           pulumi.StringPtrInput   `pulumi:"mac"`
	// [string] The name of the server.
	Name    pulumi.StringPtrInput `pulumi:"name"`
	PciSlot pulumi.IntPtrInput    `pulumi:"pciSlot"`
}

func (VCPUServerNicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VCPUServerNic)(nil)).Elem()
}

func (i VCPUServerNicArgs) ToVCPUServerNicOutput() VCPUServerNicOutput {
	return i.ToVCPUServerNicOutputWithContext(context.Background())
}

func (i VCPUServerNicArgs) ToVCPUServerNicOutputWithContext(ctx context.Context) VCPUServerNicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VCPUServerNicOutput)
}

func (i VCPUServerNicArgs) ToVCPUServerNicPtrOutput() VCPUServerNicPtrOutput {
	return i.ToVCPUServerNicPtrOutputWithContext(context.Background())
}

func (i VCPUServerNicArgs) ToVCPUServerNicPtrOutputWithContext(ctx context.Context) VCPUServerNicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VCPUServerNicOutput).ToVCPUServerNicPtrOutputWithContext(ctx)
}

// VCPUServerNicPtrInput is an input type that accepts VCPUServerNicArgs, VCPUServerNicPtr and VCPUServerNicPtrOutput values.
// You can construct a concrete instance of `VCPUServerNicPtrInput` via:
//
//	        VCPUServerNicArgs{...}
//
//	or:
//
//	        nil
type VCPUServerNicPtrInput interface {
	pulumi.Input

	ToVCPUServerNicPtrOutput() VCPUServerNicPtrOutput
	ToVCPUServerNicPtrOutputWithContext(context.Context) VCPUServerNicPtrOutput
}

type vcpuserverNicPtrType VCPUServerNicArgs

func VCPUServerNicPtr(v *VCPUServerNicArgs) VCPUServerNicPtrInput {
	return (*vcpuserverNicPtrType)(v)
}

func (*vcpuserverNicPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VCPUServerNic)(nil)).Elem()
}

func (i *vcpuserverNicPtrType) ToVCPUServerNicPtrOutput() VCPUServerNicPtrOutput {
	return i.ToVCPUServerNicPtrOutputWithContext(context.Background())
}

func (i *vcpuserverNicPtrType) ToVCPUServerNicPtrOutputWithContext(ctx context.Context) VCPUServerNicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VCPUServerNicPtrOutput)
}

type VCPUServerNicOutput struct{ *pulumi.OutputState }

func (VCPUServerNicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VCPUServerNic)(nil)).Elem()
}

func (o VCPUServerNicOutput) ToVCPUServerNicOutput() VCPUServerNicOutput {
	return o
}

func (o VCPUServerNicOutput) ToVCPUServerNicOutputWithContext(ctx context.Context) VCPUServerNicOutput {
	return o
}

func (o VCPUServerNicOutput) ToVCPUServerNicPtrOutput() VCPUServerNicPtrOutput {
	return o.ToVCPUServerNicPtrOutputWithContext(context.Background())
}

func (o VCPUServerNicOutput) ToVCPUServerNicPtrOutputWithContext(ctx context.Context) VCPUServerNicPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VCPUServerNic) *VCPUServerNic {
		return &v
	}).(VCPUServerNicPtrOutput)
}

func (o VCPUServerNicOutput) DeviceNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VCPUServerNic) *int { return v.DeviceNumber }).(pulumi.IntPtrOutput)
}

func (o VCPUServerNicOutput) Dhcp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VCPUServerNic) *bool { return v.Dhcp }).(pulumi.BoolPtrOutput)
}

func (o VCPUServerNicOutput) Dhcpv6() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VCPUServerNic) *bool { return v.Dhcpv6 }).(pulumi.BoolPtrOutput)
}

func (o VCPUServerNicOutput) FirewallActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VCPUServerNic) *bool { return v.FirewallActive }).(pulumi.BoolPtrOutput)
}

func (o VCPUServerNicOutput) FirewallType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VCPUServerNic) *string { return v.FirewallType }).(pulumi.StringPtrOutput)
}

// Allows to define firewall rules inline in the server. See the Firewall section.
func (o VCPUServerNicOutput) Firewalls() VCPUServerNicFirewallArrayOutput {
	return o.ApplyT(func(v VCPUServerNic) []VCPUServerNicFirewall { return v.Firewalls }).(VCPUServerNicFirewallArrayOutput)
}

func (o VCPUServerNicOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VCPUServerNic) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
func (o VCPUServerNicOutput) Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VCPUServerNic) []string { return v.Ips }).(pulumi.StringArrayOutput)
}

func (o VCPUServerNicOutput) Ipv6CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VCPUServerNic) *string { return v.Ipv6CidrBlock }).(pulumi.StringPtrOutput)
}

func (o VCPUServerNicOutput) Ipv6Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VCPUServerNic) []string { return v.Ipv6Ips }).(pulumi.StringArrayOutput)
}

func (o VCPUServerNicOutput) Lan() pulumi.IntOutput {
	return o.ApplyT(func(v VCPUServerNic) int { return v.Lan }).(pulumi.IntOutput)
}

func (o VCPUServerNicOutput) Mac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VCPUServerNic) *string { return v.Mac }).(pulumi.StringPtrOutput)
}

// [string] The name of the server.
func (o VCPUServerNicOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VCPUServerNic) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o VCPUServerNicOutput) PciSlot() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VCPUServerNic) *int { return v.PciSlot }).(pulumi.IntPtrOutput)
}

type VCPUServerNicPtrOutput struct{ *pulumi.OutputState }

func (VCPUServerNicPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VCPUServerNic)(nil)).Elem()
}

func (o VCPUServerNicPtrOutput) ToVCPUServerNicPtrOutput() VCPUServerNicPtrOutput {
	return o
}

func (o VCPUServerNicPtrOutput) ToVCPUServerNicPtrOutputWithContext(ctx context.Context) VCPUServerNicPtrOutput {
	return o
}

func (o VCPUServerNicPtrOutput) Elem() VCPUServerNicOutput {
	return o.ApplyT(func(v *VCPUServerNic) VCPUServerNic {
		if v != nil {
			return *v
		}
		var ret VCPUServerNic
		return ret
	}).(VCPUServerNicOutput)
}

func (o VCPUServerNicPtrOutput) DeviceNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VCPUServerNic) *int {
		if v == nil {
			return nil
		}
		return v.DeviceNumber
	}).(pulumi.IntPtrOutput)
}

func (o VCPUServerNicPtrOutput) Dhcp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VCPUServerNic) *bool {
		if v == nil {
			return nil
		}
		return v.Dhcp
	}).(pulumi.BoolPtrOutput)
}

func (o VCPUServerNicPtrOutput) Dhcpv6() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VCPUServerNic) *bool {
		if v == nil {
			return nil
		}
		return v.Dhcpv6
	}).(pulumi.BoolPtrOutput)
}

func (o VCPUServerNicPtrOutput) FirewallActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VCPUServerNic) *bool {
		if v == nil {
			return nil
		}
		return v.FirewallActive
	}).(pulumi.BoolPtrOutput)
}

func (o VCPUServerNicPtrOutput) FirewallType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VCPUServerNic) *string {
		if v == nil {
			return nil
		}
		return v.FirewallType
	}).(pulumi.StringPtrOutput)
}

// Allows to define firewall rules inline in the server. See the Firewall section.
func (o VCPUServerNicPtrOutput) Firewalls() VCPUServerNicFirewallArrayOutput {
	return o.ApplyT(func(v *VCPUServerNic) []VCPUServerNicFirewall {
		if v == nil {
			return nil
		}
		return v.Firewalls
	}).(VCPUServerNicFirewallArrayOutput)
}

func (o VCPUServerNicPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VCPUServerNic) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
func (o VCPUServerNicPtrOutput) Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VCPUServerNic) []string {
		if v == nil {
			return nil
		}
		return v.Ips
	}).(pulumi.StringArrayOutput)
}

func (o VCPUServerNicPtrOutput) Ipv6CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VCPUServerNic) *string {
		if v == nil {
			return nil
		}
		return v.Ipv6CidrBlock
	}).(pulumi.StringPtrOutput)
}

func (o VCPUServerNicPtrOutput) Ipv6Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VCPUServerNic) []string {
		if v == nil {
			return nil
		}
		return v.Ipv6Ips
	}).(pulumi.StringArrayOutput)
}

func (o VCPUServerNicPtrOutput) Lan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VCPUServerNic) *int {
		if v == nil {
			return nil
		}
		return &v.Lan
	}).(pulumi.IntPtrOutput)
}

func (o VCPUServerNicPtrOutput) Mac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VCPUServerNic) *string {
		if v == nil {
			return nil
		}
		return v.Mac
	}).(pulumi.StringPtrOutput)
}

// [string] The name of the server.
func (o VCPUServerNicPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VCPUServerNic) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o VCPUServerNicPtrOutput) PciSlot() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VCPUServerNic) *int {
		if v == nil {
			return nil
		}
		return v.PciSlot
	}).(pulumi.IntPtrOutput)
}

type VCPUServerNicFirewall struct {
	IcmpCode *string `pulumi:"icmpCode"`
	IcmpType *string `pulumi:"icmpType"`
	Id       *string `pulumi:"id"`
	// [string] The name of the server.
	Name           *string `pulumi:"name"`
	PortRangeEnd   *int    `pulumi:"portRangeEnd"`
	PortRangeStart *int    `pulumi:"portRangeStart"`
	Protocol       string  `pulumi:"protocol"`
	SourceIp       *string `pulumi:"sourceIp"`
	SourceMac      *string `pulumi:"sourceMac"`
	TargetIp       *string `pulumi:"targetIp"`
	Type           *string `pulumi:"type"`
}

// VCPUServerNicFirewallInput is an input type that accepts VCPUServerNicFirewallArgs and VCPUServerNicFirewallOutput values.
// You can construct a concrete instance of `VCPUServerNicFirewallInput` via:
//
//	VCPUServerNicFirewallArgs{...}
type VCPUServerNicFirewallInput interface {
	pulumi.Input

	ToVCPUServerNicFirewallOutput() VCPUServerNicFirewallOutput
	ToVCPUServerNicFirewallOutputWithContext(context.Context) VCPUServerNicFirewallOutput
}

type VCPUServerNicFirewallArgs struct {
	IcmpCode pulumi.StringPtrInput `pulumi:"icmpCode"`
	IcmpType pulumi.StringPtrInput `pulumi:"icmpType"`
	Id       pulumi.StringPtrInput `pulumi:"id"`
	// [string] The name of the server.
	Name           pulumi.StringPtrInput `pulumi:"name"`
	PortRangeEnd   pulumi.IntPtrInput    `pulumi:"portRangeEnd"`
	PortRangeStart pulumi.IntPtrInput    `pulumi:"portRangeStart"`
	Protocol       pulumi.StringInput    `pulumi:"protocol"`
	SourceIp       pulumi.StringPtrInput `pulumi:"sourceIp"`
	SourceMac      pulumi.StringPtrInput `pulumi:"sourceMac"`
	TargetIp       pulumi.StringPtrInput `pulumi:"targetIp"`
	Type           pulumi.StringPtrInput `pulumi:"type"`
}

func (VCPUServerNicFirewallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VCPUServerNicFirewall)(nil)).Elem()
}

func (i VCPUServerNicFirewallArgs) ToVCPUServerNicFirewallOutput() VCPUServerNicFirewallOutput {
	return i.ToVCPUServerNicFirewallOutputWithContext(context.Background())
}

func (i VCPUServerNicFirewallArgs) ToVCPUServerNicFirewallOutputWithContext(ctx context.Context) VCPUServerNicFirewallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VCPUServerNicFirewallOutput)
}

// VCPUServerNicFirewallArrayInput is an input type that accepts VCPUServerNicFirewallArray and VCPUServerNicFirewallArrayOutput values.
// You can construct a concrete instance of `VCPUServerNicFirewallArrayInput` via:
//
//	VCPUServerNicFirewallArray{ VCPUServerNicFirewallArgs{...} }
type VCPUServerNicFirewallArrayInput interface {
	pulumi.Input

	ToVCPUServerNicFirewallArrayOutput() VCPUServerNicFirewallArrayOutput
	ToVCPUServerNicFirewallArrayOutputWithContext(context.Context) VCPUServerNicFirewallArrayOutput
}

type VCPUServerNicFirewallArray []VCPUServerNicFirewallInput

func (VCPUServerNicFirewallArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VCPUServerNicFirewall)(nil)).Elem()
}

func (i VCPUServerNicFirewallArray) ToVCPUServerNicFirewallArrayOutput() VCPUServerNicFirewallArrayOutput {
	return i.ToVCPUServerNicFirewallArrayOutputWithContext(context.Background())
}

func (i VCPUServerNicFirewallArray) ToVCPUServerNicFirewallArrayOutputWithContext(ctx context.Context) VCPUServerNicFirewallArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VCPUServerNicFirewallArrayOutput)
}

type VCPUServerNicFirewallOutput struct{ *pulumi.OutputState }

func (VCPUServerNicFirewallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VCPUServerNicFirewall)(nil)).Elem()
}

func (o VCPUServerNicFirewallOutput) ToVCPUServerNicFirewallOutput() VCPUServerNicFirewallOutput {
	return o
}

func (o VCPUServerNicFirewallOutput) ToVCPUServerNicFirewallOutputWithContext(ctx context.Context) VCPUServerNicFirewallOutput {
	return o
}

func (o VCPUServerNicFirewallOutput) IcmpCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VCPUServerNicFirewall) *string { return v.IcmpCode }).(pulumi.StringPtrOutput)
}

func (o VCPUServerNicFirewallOutput) IcmpType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VCPUServerNicFirewall) *string { return v.IcmpType }).(pulumi.StringPtrOutput)
}

func (o VCPUServerNicFirewallOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VCPUServerNicFirewall) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// [string] The name of the server.
func (o VCPUServerNicFirewallOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VCPUServerNicFirewall) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o VCPUServerNicFirewallOutput) PortRangeEnd() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VCPUServerNicFirewall) *int { return v.PortRangeEnd }).(pulumi.IntPtrOutput)
}

func (o VCPUServerNicFirewallOutput) PortRangeStart() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VCPUServerNicFirewall) *int { return v.PortRangeStart }).(pulumi.IntPtrOutput)
}

func (o VCPUServerNicFirewallOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v VCPUServerNicFirewall) string { return v.Protocol }).(pulumi.StringOutput)
}

func (o VCPUServerNicFirewallOutput) SourceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VCPUServerNicFirewall) *string { return v.SourceIp }).(pulumi.StringPtrOutput)
}

func (o VCPUServerNicFirewallOutput) SourceMac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VCPUServerNicFirewall) *string { return v.SourceMac }).(pulumi.StringPtrOutput)
}

func (o VCPUServerNicFirewallOutput) TargetIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VCPUServerNicFirewall) *string { return v.TargetIp }).(pulumi.StringPtrOutput)
}

func (o VCPUServerNicFirewallOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VCPUServerNicFirewall) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type VCPUServerNicFirewallArrayOutput struct{ *pulumi.OutputState }

func (VCPUServerNicFirewallArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VCPUServerNicFirewall)(nil)).Elem()
}

func (o VCPUServerNicFirewallArrayOutput) ToVCPUServerNicFirewallArrayOutput() VCPUServerNicFirewallArrayOutput {
	return o
}

func (o VCPUServerNicFirewallArrayOutput) ToVCPUServerNicFirewallArrayOutputWithContext(ctx context.Context) VCPUServerNicFirewallArrayOutput {
	return o
}

func (o VCPUServerNicFirewallArrayOutput) Index(i pulumi.IntInput) VCPUServerNicFirewallOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VCPUServerNicFirewall {
		return vs[0].([]VCPUServerNicFirewall)[vs[1].(int)]
	}).(VCPUServerNicFirewallOutput)
}

type VCPUServerVolume struct {
	// [string] The availability zone in which the server should exist. E.g: `AUTO`, `ZONE_1`, `ZONE_2`. This property is immutable.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
	BackupUnitId *string `pulumi:"backupUnitId"`
	// The UUID of the attached server.
	BootServer          *string `pulumi:"bootServer"`
	Bus                 *string `pulumi:"bus"`
	CpuHotPlug          *bool   `pulumi:"cpuHotPlug"`
	DeviceNumber        *int    `pulumi:"deviceNumber"`
	DiscVirtioHotPlug   *bool   `pulumi:"discVirtioHotPlug"`
	DiscVirtioHotUnplug *bool   `pulumi:"discVirtioHotUnplug"`
	DiskType            string  `pulumi:"diskType"`
	// [string] Sets the OS type of the server.
	LicenceType *string `pulumi:"licenceType"`
	// [string] The name of the server.
	Name         *string `pulumi:"name"`
	NicHotPlug   *bool   `pulumi:"nicHotPlug"`
	NicHotUnplug *bool   `pulumi:"nicHotUnplug"`
	PciSlot      *int    `pulumi:"pciSlot"`
	RamHotPlug   *bool   `pulumi:"ramHotPlug"`
	// The size of the volume in GB.
	Size *int `pulumi:"size"`
	// The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' that has cloud-init compatibility in conjunction with this property.
	UserData *string `pulumi:"userData"`
}

// VCPUServerVolumeInput is an input type that accepts VCPUServerVolumeArgs and VCPUServerVolumeOutput values.
// You can construct a concrete instance of `VCPUServerVolumeInput` via:
//
//	VCPUServerVolumeArgs{...}
type VCPUServerVolumeInput interface {
	pulumi.Input

	ToVCPUServerVolumeOutput() VCPUServerVolumeOutput
	ToVCPUServerVolumeOutputWithContext(context.Context) VCPUServerVolumeOutput
}

type VCPUServerVolumeArgs struct {
	// [string] The availability zone in which the server should exist. E.g: `AUTO`, `ZONE_1`, `ZONE_2`. This property is immutable.
	AvailabilityZone pulumi.StringPtrInput `pulumi:"availabilityZone"`
	// The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
	BackupUnitId pulumi.StringPtrInput `pulumi:"backupUnitId"`
	// The UUID of the attached server.
	BootServer          pulumi.StringPtrInput `pulumi:"bootServer"`
	Bus                 pulumi.StringPtrInput `pulumi:"bus"`
	CpuHotPlug          pulumi.BoolPtrInput   `pulumi:"cpuHotPlug"`
	DeviceNumber        pulumi.IntPtrInput    `pulumi:"deviceNumber"`
	DiscVirtioHotPlug   pulumi.BoolPtrInput   `pulumi:"discVirtioHotPlug"`
	DiscVirtioHotUnplug pulumi.BoolPtrInput   `pulumi:"discVirtioHotUnplug"`
	DiskType            pulumi.StringInput    `pulumi:"diskType"`
	// [string] Sets the OS type of the server.
	LicenceType pulumi.StringPtrInput `pulumi:"licenceType"`
	// [string] The name of the server.
	Name         pulumi.StringPtrInput `pulumi:"name"`
	NicHotPlug   pulumi.BoolPtrInput   `pulumi:"nicHotPlug"`
	NicHotUnplug pulumi.BoolPtrInput   `pulumi:"nicHotUnplug"`
	PciSlot      pulumi.IntPtrInput    `pulumi:"pciSlot"`
	RamHotPlug   pulumi.BoolPtrInput   `pulumi:"ramHotPlug"`
	// The size of the volume in GB.
	Size pulumi.IntPtrInput `pulumi:"size"`
	// The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' that has cloud-init compatibility in conjunction with this property.
	UserData pulumi.StringPtrInput `pulumi:"userData"`
}

func (VCPUServerVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VCPUServerVolume)(nil)).Elem()
}

func (i VCPUServerVolumeArgs) ToVCPUServerVolumeOutput() VCPUServerVolumeOutput {
	return i.ToVCPUServerVolumeOutputWithContext(context.Background())
}

func (i VCPUServerVolumeArgs) ToVCPUServerVolumeOutputWithContext(ctx context.Context) VCPUServerVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VCPUServerVolumeOutput)
}

func (i VCPUServerVolumeArgs) ToVCPUServerVolumePtrOutput() VCPUServerVolumePtrOutput {
	return i.ToVCPUServerVolumePtrOutputWithContext(context.Background())
}

func (i VCPUServerVolumeArgs) ToVCPUServerVolumePtrOutputWithContext(ctx context.Context) VCPUServerVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VCPUServerVolumeOutput).ToVCPUServerVolumePtrOutputWithContext(ctx)
}

// VCPUServerVolumePtrInput is an input type that accepts VCPUServerVolumeArgs, VCPUServerVolumePtr and VCPUServerVolumePtrOutput values.
// You can construct a concrete instance of `VCPUServerVolumePtrInput` via:
//
//	        VCPUServerVolumeArgs{...}
//
//	or:
//
//	        nil
type VCPUServerVolumePtrInput interface {
	pulumi.Input

	ToVCPUServerVolumePtrOutput() VCPUServerVolumePtrOutput
	ToVCPUServerVolumePtrOutputWithContext(context.Context) VCPUServerVolumePtrOutput
}

type vcpuserverVolumePtrType VCPUServerVolumeArgs

func VCPUServerVolumePtr(v *VCPUServerVolumeArgs) VCPUServerVolumePtrInput {
	return (*vcpuserverVolumePtrType)(v)
}

func (*vcpuserverVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VCPUServerVolume)(nil)).Elem()
}

func (i *vcpuserverVolumePtrType) ToVCPUServerVolumePtrOutput() VCPUServerVolumePtrOutput {
	return i.ToVCPUServerVolumePtrOutputWithContext(context.Background())
}

func (i *vcpuserverVolumePtrType) ToVCPUServerVolumePtrOutputWithContext(ctx context.Context) VCPUServerVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VCPUServerVolumePtrOutput)
}

type VCPUServerVolumeOutput struct{ *pulumi.OutputState }

func (VCPUServerVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VCPUServerVolume)(nil)).Elem()
}

func (o VCPUServerVolumeOutput) ToVCPUServerVolumeOutput() VCPUServerVolumeOutput {
	return o
}

func (o VCPUServerVolumeOutput) ToVCPUServerVolumeOutputWithContext(ctx context.Context) VCPUServerVolumeOutput {
	return o
}

func (o VCPUServerVolumeOutput) ToVCPUServerVolumePtrOutput() VCPUServerVolumePtrOutput {
	return o.ToVCPUServerVolumePtrOutputWithContext(context.Background())
}

func (o VCPUServerVolumeOutput) ToVCPUServerVolumePtrOutputWithContext(ctx context.Context) VCPUServerVolumePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VCPUServerVolume) *VCPUServerVolume {
		return &v
	}).(VCPUServerVolumePtrOutput)
}

// [string] The availability zone in which the server should exist. E.g: `AUTO`, `ZONE_1`, `ZONE_2`. This property is immutable.
func (o VCPUServerVolumeOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VCPUServerVolume) *string { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

// The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
func (o VCPUServerVolumeOutput) BackupUnitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VCPUServerVolume) *string { return v.BackupUnitId }).(pulumi.StringPtrOutput)
}

// The UUID of the attached server.
func (o VCPUServerVolumeOutput) BootServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VCPUServerVolume) *string { return v.BootServer }).(pulumi.StringPtrOutput)
}

func (o VCPUServerVolumeOutput) Bus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VCPUServerVolume) *string { return v.Bus }).(pulumi.StringPtrOutput)
}

func (o VCPUServerVolumeOutput) CpuHotPlug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VCPUServerVolume) *bool { return v.CpuHotPlug }).(pulumi.BoolPtrOutput)
}

func (o VCPUServerVolumeOutput) DeviceNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VCPUServerVolume) *int { return v.DeviceNumber }).(pulumi.IntPtrOutput)
}

func (o VCPUServerVolumeOutput) DiscVirtioHotPlug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VCPUServerVolume) *bool { return v.DiscVirtioHotPlug }).(pulumi.BoolPtrOutput)
}

func (o VCPUServerVolumeOutput) DiscVirtioHotUnplug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VCPUServerVolume) *bool { return v.DiscVirtioHotUnplug }).(pulumi.BoolPtrOutput)
}

func (o VCPUServerVolumeOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v VCPUServerVolume) string { return v.DiskType }).(pulumi.StringOutput)
}

// [string] Sets the OS type of the server.
func (o VCPUServerVolumeOutput) LicenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VCPUServerVolume) *string { return v.LicenceType }).(pulumi.StringPtrOutput)
}

// [string] The name of the server.
func (o VCPUServerVolumeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VCPUServerVolume) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o VCPUServerVolumeOutput) NicHotPlug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VCPUServerVolume) *bool { return v.NicHotPlug }).(pulumi.BoolPtrOutput)
}

func (o VCPUServerVolumeOutput) NicHotUnplug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VCPUServerVolume) *bool { return v.NicHotUnplug }).(pulumi.BoolPtrOutput)
}

func (o VCPUServerVolumeOutput) PciSlot() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VCPUServerVolume) *int { return v.PciSlot }).(pulumi.IntPtrOutput)
}

func (o VCPUServerVolumeOutput) RamHotPlug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VCPUServerVolume) *bool { return v.RamHotPlug }).(pulumi.BoolPtrOutput)
}

// The size of the volume in GB.
func (o VCPUServerVolumeOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VCPUServerVolume) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' that has cloud-init compatibility in conjunction with this property.
func (o VCPUServerVolumeOutput) UserData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VCPUServerVolume) *string { return v.UserData }).(pulumi.StringPtrOutput)
}

type VCPUServerVolumePtrOutput struct{ *pulumi.OutputState }

func (VCPUServerVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VCPUServerVolume)(nil)).Elem()
}

func (o VCPUServerVolumePtrOutput) ToVCPUServerVolumePtrOutput() VCPUServerVolumePtrOutput {
	return o
}

func (o VCPUServerVolumePtrOutput) ToVCPUServerVolumePtrOutputWithContext(ctx context.Context) VCPUServerVolumePtrOutput {
	return o
}

func (o VCPUServerVolumePtrOutput) Elem() VCPUServerVolumeOutput {
	return o.ApplyT(func(v *VCPUServerVolume) VCPUServerVolume {
		if v != nil {
			return *v
		}
		var ret VCPUServerVolume
		return ret
	}).(VCPUServerVolumeOutput)
}

// [string] The availability zone in which the server should exist. E.g: `AUTO`, `ZONE_1`, `ZONE_2`. This property is immutable.
func (o VCPUServerVolumePtrOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VCPUServerVolume) *string {
		if v == nil {
			return nil
		}
		return v.AvailabilityZone
	}).(pulumi.StringPtrOutput)
}

// The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
func (o VCPUServerVolumePtrOutput) BackupUnitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VCPUServerVolume) *string {
		if v == nil {
			return nil
		}
		return v.BackupUnitId
	}).(pulumi.StringPtrOutput)
}

// The UUID of the attached server.
func (o VCPUServerVolumePtrOutput) BootServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VCPUServerVolume) *string {
		if v == nil {
			return nil
		}
		return v.BootServer
	}).(pulumi.StringPtrOutput)
}

func (o VCPUServerVolumePtrOutput) Bus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VCPUServerVolume) *string {
		if v == nil {
			return nil
		}
		return v.Bus
	}).(pulumi.StringPtrOutput)
}

func (o VCPUServerVolumePtrOutput) CpuHotPlug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VCPUServerVolume) *bool {
		if v == nil {
			return nil
		}
		return v.CpuHotPlug
	}).(pulumi.BoolPtrOutput)
}

func (o VCPUServerVolumePtrOutput) DeviceNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VCPUServerVolume) *int {
		if v == nil {
			return nil
		}
		return v.DeviceNumber
	}).(pulumi.IntPtrOutput)
}

func (o VCPUServerVolumePtrOutput) DiscVirtioHotPlug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VCPUServerVolume) *bool {
		if v == nil {
			return nil
		}
		return v.DiscVirtioHotPlug
	}).(pulumi.BoolPtrOutput)
}

func (o VCPUServerVolumePtrOutput) DiscVirtioHotUnplug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VCPUServerVolume) *bool {
		if v == nil {
			return nil
		}
		return v.DiscVirtioHotUnplug
	}).(pulumi.BoolPtrOutput)
}

func (o VCPUServerVolumePtrOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VCPUServerVolume) *string {
		if v == nil {
			return nil
		}
		return &v.DiskType
	}).(pulumi.StringPtrOutput)
}

// [string] Sets the OS type of the server.
func (o VCPUServerVolumePtrOutput) LicenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VCPUServerVolume) *string {
		if v == nil {
			return nil
		}
		return v.LicenceType
	}).(pulumi.StringPtrOutput)
}

// [string] The name of the server.
func (o VCPUServerVolumePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VCPUServerVolume) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o VCPUServerVolumePtrOutput) NicHotPlug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VCPUServerVolume) *bool {
		if v == nil {
			return nil
		}
		return v.NicHotPlug
	}).(pulumi.BoolPtrOutput)
}

func (o VCPUServerVolumePtrOutput) NicHotUnplug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VCPUServerVolume) *bool {
		if v == nil {
			return nil
		}
		return v.NicHotUnplug
	}).(pulumi.BoolPtrOutput)
}

func (o VCPUServerVolumePtrOutput) PciSlot() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VCPUServerVolume) *int {
		if v == nil {
			return nil
		}
		return v.PciSlot
	}).(pulumi.IntPtrOutput)
}

func (o VCPUServerVolumePtrOutput) RamHotPlug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VCPUServerVolume) *bool {
		if v == nil {
			return nil
		}
		return v.RamHotPlug
	}).(pulumi.BoolPtrOutput)
}

// The size of the volume in GB.
func (o VCPUServerVolumePtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VCPUServerVolume) *int {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.IntPtrOutput)
}

// The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' that has cloud-init compatibility in conjunction with this property.
func (o VCPUServerVolumePtrOutput) UserData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VCPUServerVolume) *string {
		if v == nil {
			return nil
		}
		return v.UserData
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CrossconnectConnectableDatacenterInput)(nil)).Elem(), CrossconnectConnectableDatacenterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrossconnectConnectableDatacenterArrayInput)(nil)).Elem(), CrossconnectConnectableDatacenterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrossconnectPeerInput)(nil)).Elem(), CrossconnectPeerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrossconnectPeerArrayInput)(nil)).Elem(), CrossconnectPeerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CubeServerNicInput)(nil)).Elem(), CubeServerNicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CubeServerNicPtrInput)(nil)).Elem(), CubeServerNicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CubeServerNicFirewallInput)(nil)).Elem(), CubeServerNicFirewallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CubeServerNicFirewallPtrInput)(nil)).Elem(), CubeServerNicFirewallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CubeServerVolumeInput)(nil)).Elem(), CubeServerVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CubeServerVolumePtrInput)(nil)).Elem(), CubeServerVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatacenterCpuArchitectureInput)(nil)).Elem(), DatacenterCpuArchitectureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatacenterCpuArchitectureArrayInput)(nil)).Elem(), DatacenterCpuArchitectureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupUserInput)(nil)).Elem(), GroupUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupUserArrayInput)(nil)).Elem(), GroupUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPBlockIpConsumerInput)(nil)).Elem(), IPBlockIpConsumerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPBlockIpConsumerArrayInput)(nil)).Elem(), IPBlockIpConsumerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LanIpFailoverInput)(nil)).Elem(), LanIpFailoverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LanIpFailoverArrayInput)(nil)).Elem(), LanIpFailoverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NicFlowlogInput)(nil)).Elem(), NicFlowlogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NicFlowlogPtrInput)(nil)).Elem(), NicFlowlogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerLabelInput)(nil)).Elem(), ServerLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerLabelArrayInput)(nil)).Elem(), ServerLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerNicInput)(nil)).Elem(), ServerNicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerNicPtrInput)(nil)).Elem(), ServerNicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerNicFirewallInput)(nil)).Elem(), ServerNicFirewallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerNicFirewallArrayInput)(nil)).Elem(), ServerNicFirewallArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerVolumeInput)(nil)).Elem(), ServerVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerVolumePtrInput)(nil)).Elem(), ServerVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VCPUServerLabelInput)(nil)).Elem(), VCPUServerLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VCPUServerLabelArrayInput)(nil)).Elem(), VCPUServerLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VCPUServerNicInput)(nil)).Elem(), VCPUServerNicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VCPUServerNicPtrInput)(nil)).Elem(), VCPUServerNicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VCPUServerNicFirewallInput)(nil)).Elem(), VCPUServerNicFirewallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VCPUServerNicFirewallArrayInput)(nil)).Elem(), VCPUServerNicFirewallArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VCPUServerVolumeInput)(nil)).Elem(), VCPUServerVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VCPUServerVolumePtrInput)(nil)).Elem(), VCPUServerVolumeArgs{})
	pulumi.RegisterOutputType(CrossconnectConnectableDatacenterOutput{})
	pulumi.RegisterOutputType(CrossconnectConnectableDatacenterArrayOutput{})
	pulumi.RegisterOutputType(CrossconnectPeerOutput{})
	pulumi.RegisterOutputType(CrossconnectPeerArrayOutput{})
	pulumi.RegisterOutputType(CubeServerNicOutput{})
	pulumi.RegisterOutputType(CubeServerNicPtrOutput{})
	pulumi.RegisterOutputType(CubeServerNicFirewallOutput{})
	pulumi.RegisterOutputType(CubeServerNicFirewallPtrOutput{})
	pulumi.RegisterOutputType(CubeServerVolumeOutput{})
	pulumi.RegisterOutputType(CubeServerVolumePtrOutput{})
	pulumi.RegisterOutputType(DatacenterCpuArchitectureOutput{})
	pulumi.RegisterOutputType(DatacenterCpuArchitectureArrayOutput{})
	pulumi.RegisterOutputType(GroupUserOutput{})
	pulumi.RegisterOutputType(GroupUserArrayOutput{})
	pulumi.RegisterOutputType(IPBlockIpConsumerOutput{})
	pulumi.RegisterOutputType(IPBlockIpConsumerArrayOutput{})
	pulumi.RegisterOutputType(LanIpFailoverOutput{})
	pulumi.RegisterOutputType(LanIpFailoverArrayOutput{})
	pulumi.RegisterOutputType(NicFlowlogOutput{})
	pulumi.RegisterOutputType(NicFlowlogPtrOutput{})
	pulumi.RegisterOutputType(ServerLabelOutput{})
	pulumi.RegisterOutputType(ServerLabelArrayOutput{})
	pulumi.RegisterOutputType(ServerNicOutput{})
	pulumi.RegisterOutputType(ServerNicPtrOutput{})
	pulumi.RegisterOutputType(ServerNicFirewallOutput{})
	pulumi.RegisterOutputType(ServerNicFirewallArrayOutput{})
	pulumi.RegisterOutputType(ServerVolumeOutput{})
	pulumi.RegisterOutputType(ServerVolumePtrOutput{})
	pulumi.RegisterOutputType(VCPUServerLabelOutput{})
	pulumi.RegisterOutputType(VCPUServerLabelArrayOutput{})
	pulumi.RegisterOutputType(VCPUServerNicOutput{})
	pulumi.RegisterOutputType(VCPUServerNicPtrOutput{})
	pulumi.RegisterOutputType(VCPUServerNicFirewallOutput{})
	pulumi.RegisterOutputType(VCPUServerNicFirewallArrayOutput{})
	pulumi.RegisterOutputType(VCPUServerVolumeOutput{})
	pulumi.RegisterOutputType(VCPUServerVolumePtrOutput{})
}
