// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "ionoscloud:compute/backupUnit:BackupUnit":
		r = &BackupUnit{}
	case "ionoscloud:compute/balancer:Balancer":
		r = &Balancer{}
	case "ionoscloud:compute/bootDeviceSelection:BootDeviceSelection":
		r = &BootDeviceSelection{}
	case "ionoscloud:compute/crossconnect:Crossconnect":
		r = &Crossconnect{}
	case "ionoscloud:compute/cubeServer:CubeServer":
		r = &CubeServer{}
	case "ionoscloud:compute/datacenter:Datacenter":
		r = &Datacenter{}
	case "ionoscloud:compute/firewall:Firewall":
		r = &Firewall{}
	case "ionoscloud:compute/group:Group":
		r = &Group{}
	case "ionoscloud:compute/iPBlock:IPBlock":
		r = &IPBlock{}
	case "ionoscloud:compute/iPFailover:IPFailover":
		r = &IPFailover{}
	case "ionoscloud:compute/lan:Lan":
		r = &Lan{}
	case "ionoscloud:compute/natGateway:NatGateway":
		r = &NatGateway{}
	case "ionoscloud:compute/natGatewayRule:NatGatewayRule":
		r = &NatGatewayRule{}
	case "ionoscloud:compute/nic:Nic":
		r = &Nic{}
	case "ionoscloud:compute/s3Key:S3Key":
		r = &S3Key{}
	case "ionoscloud:compute/server:Server":
		r = &Server{}
	case "ionoscloud:compute/share:Share":
		r = &Share{}
	case "ionoscloud:compute/snapshot:Snapshot":
		r = &Snapshot{}
	case "ionoscloud:compute/targetGroup:TargetGroup":
		r = &TargetGroup{}
	case "ionoscloud:compute/user:User":
		r = &User{}
	case "ionoscloud:compute/vCPUServer:VCPUServer":
		r = &VCPUServer{}
	case "ionoscloud:compute/volume:Volume":
		r = &Volume{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"ionoscloud",
		"compute/backupUnit",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ionoscloud",
		"compute/balancer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ionoscloud",
		"compute/bootDeviceSelection",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ionoscloud",
		"compute/crossconnect",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ionoscloud",
		"compute/cubeServer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ionoscloud",
		"compute/datacenter",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ionoscloud",
		"compute/firewall",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ionoscloud",
		"compute/group",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ionoscloud",
		"compute/iPBlock",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ionoscloud",
		"compute/iPFailover",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ionoscloud",
		"compute/lan",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ionoscloud",
		"compute/natGateway",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ionoscloud",
		"compute/natGatewayRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ionoscloud",
		"compute/nic",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ionoscloud",
		"compute/s3Key",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ionoscloud",
		"compute/server",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ionoscloud",
		"compute/share",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ionoscloud",
		"compute/snapshot",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ionoscloud",
		"compute/targetGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ionoscloud",
		"compute/user",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ionoscloud",
		"compute/vCPUServer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ionoscloud",
		"compute/volume",
		&module{version},
	)
}
