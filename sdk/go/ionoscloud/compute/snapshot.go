// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Snapshot struct {
	pulumi.CustomResourceState

	CpuHotPlug   pulumi.BoolOutput   `pulumi:"cpuHotPlug"`
	CpuHotUnplug pulumi.BoolOutput   `pulumi:"cpuHotUnplug"`
	DatacenterId pulumi.StringOutput `pulumi:"datacenterId"`
	// Human readable description
	Description         pulumi.StringOutput `pulumi:"description"`
	DiscScsiHotPlug     pulumi.BoolOutput   `pulumi:"discScsiHotPlug"`
	DiscScsiHotUnplug   pulumi.BoolOutput   `pulumi:"discScsiHotUnplug"`
	DiscVirtioHotPlug   pulumi.BoolOutput   `pulumi:"discVirtioHotPlug"`
	DiscVirtioHotUnplug pulumi.BoolOutput   `pulumi:"discVirtioHotUnplug"`
	// OS type of this Snapshot
	LicenceType pulumi.StringOutput `pulumi:"licenceType"`
	// Location of that image/snapshot
	Location pulumi.StringOutput `pulumi:"location"`
	// A name of that resource
	Name         pulumi.StringOutput `pulumi:"name"`
	NicHotPlug   pulumi.BoolOutput   `pulumi:"nicHotPlug"`
	NicHotUnplug pulumi.BoolOutput   `pulumi:"nicHotUnplug"`
	RamHotPlug   pulumi.BoolOutput   `pulumi:"ramHotPlug"`
	RamHotUnplug pulumi.BoolOutput   `pulumi:"ramHotUnplug"`
	// Boolean value representing if the snapshot requires extra protection e.g. two factor protection
	SecAuthProtection pulumi.BoolOutput `pulumi:"secAuthProtection"`
	// The size of the image in GB
	Size     pulumi.IntOutput    `pulumi:"size"`
	VolumeId pulumi.StringOutput `pulumi:"volumeId"`
}

// NewSnapshot registers a new resource with the given unique name, arguments, and options.
func NewSnapshot(ctx *pulumi.Context,
	name string, args *SnapshotArgs, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatacenterId == nil {
		return nil, errors.New("invalid value for required argument 'DatacenterId'")
	}
	if args.VolumeId == nil {
		return nil, errors.New("invalid value for required argument 'VolumeId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Snapshot
	err := ctx.RegisterResource("ionoscloud:compute/snapshot:Snapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshot gets an existing Snapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotState, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	var resource Snapshot
	err := ctx.ReadResource("ionoscloud:compute/snapshot:Snapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Snapshot resources.
type snapshotState struct {
	CpuHotPlug   *bool   `pulumi:"cpuHotPlug"`
	CpuHotUnplug *bool   `pulumi:"cpuHotUnplug"`
	DatacenterId *string `pulumi:"datacenterId"`
	// Human readable description
	Description         *string `pulumi:"description"`
	DiscScsiHotPlug     *bool   `pulumi:"discScsiHotPlug"`
	DiscScsiHotUnplug   *bool   `pulumi:"discScsiHotUnplug"`
	DiscVirtioHotPlug   *bool   `pulumi:"discVirtioHotPlug"`
	DiscVirtioHotUnplug *bool   `pulumi:"discVirtioHotUnplug"`
	// OS type of this Snapshot
	LicenceType *string `pulumi:"licenceType"`
	// Location of that image/snapshot
	Location *string `pulumi:"location"`
	// A name of that resource
	Name         *string `pulumi:"name"`
	NicHotPlug   *bool   `pulumi:"nicHotPlug"`
	NicHotUnplug *bool   `pulumi:"nicHotUnplug"`
	RamHotPlug   *bool   `pulumi:"ramHotPlug"`
	RamHotUnplug *bool   `pulumi:"ramHotUnplug"`
	// Boolean value representing if the snapshot requires extra protection e.g. two factor protection
	SecAuthProtection *bool `pulumi:"secAuthProtection"`
	// The size of the image in GB
	Size     *int    `pulumi:"size"`
	VolumeId *string `pulumi:"volumeId"`
}

type SnapshotState struct {
	CpuHotPlug   pulumi.BoolPtrInput
	CpuHotUnplug pulumi.BoolPtrInput
	DatacenterId pulumi.StringPtrInput
	// Human readable description
	Description         pulumi.StringPtrInput
	DiscScsiHotPlug     pulumi.BoolPtrInput
	DiscScsiHotUnplug   pulumi.BoolPtrInput
	DiscVirtioHotPlug   pulumi.BoolPtrInput
	DiscVirtioHotUnplug pulumi.BoolPtrInput
	// OS type of this Snapshot
	LicenceType pulumi.StringPtrInput
	// Location of that image/snapshot
	Location pulumi.StringPtrInput
	// A name of that resource
	Name         pulumi.StringPtrInput
	NicHotPlug   pulumi.BoolPtrInput
	NicHotUnplug pulumi.BoolPtrInput
	RamHotPlug   pulumi.BoolPtrInput
	RamHotUnplug pulumi.BoolPtrInput
	// Boolean value representing if the snapshot requires extra protection e.g. two factor protection
	SecAuthProtection pulumi.BoolPtrInput
	// The size of the image in GB
	Size     pulumi.IntPtrInput
	VolumeId pulumi.StringPtrInput
}

func (SnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotState)(nil)).Elem()
}

type snapshotArgs struct {
	CpuHotPlug   *bool  `pulumi:"cpuHotPlug"`
	DatacenterId string `pulumi:"datacenterId"`
	// Human readable description
	Description         *string `pulumi:"description"`
	DiscVirtioHotPlug   *bool   `pulumi:"discVirtioHotPlug"`
	DiscVirtioHotUnplug *bool   `pulumi:"discVirtioHotUnplug"`
	// OS type of this Snapshot
	LicenceType *string `pulumi:"licenceType"`
	// A name of that resource
	Name         *string `pulumi:"name"`
	NicHotPlug   *bool   `pulumi:"nicHotPlug"`
	NicHotUnplug *bool   `pulumi:"nicHotUnplug"`
	RamHotPlug   *bool   `pulumi:"ramHotPlug"`
	// Boolean value representing if the snapshot requires extra protection e.g. two factor protection
	SecAuthProtection *bool  `pulumi:"secAuthProtection"`
	VolumeId          string `pulumi:"volumeId"`
}

// The set of arguments for constructing a Snapshot resource.
type SnapshotArgs struct {
	CpuHotPlug   pulumi.BoolPtrInput
	DatacenterId pulumi.StringInput
	// Human readable description
	Description         pulumi.StringPtrInput
	DiscVirtioHotPlug   pulumi.BoolPtrInput
	DiscVirtioHotUnplug pulumi.BoolPtrInput
	// OS type of this Snapshot
	LicenceType pulumi.StringPtrInput
	// A name of that resource
	Name         pulumi.StringPtrInput
	NicHotPlug   pulumi.BoolPtrInput
	NicHotUnplug pulumi.BoolPtrInput
	RamHotPlug   pulumi.BoolPtrInput
	// Boolean value representing if the snapshot requires extra protection e.g. two factor protection
	SecAuthProtection pulumi.BoolPtrInput
	VolumeId          pulumi.StringInput
}

func (SnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotArgs)(nil)).Elem()
}

type SnapshotInput interface {
	pulumi.Input

	ToSnapshotOutput() SnapshotOutput
	ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput
}

func (*Snapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**Snapshot)(nil)).Elem()
}

func (i *Snapshot) ToSnapshotOutput() SnapshotOutput {
	return i.ToSnapshotOutputWithContext(context.Background())
}

func (i *Snapshot) ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotOutput)
}

// SnapshotArrayInput is an input type that accepts SnapshotArray and SnapshotArrayOutput values.
// You can construct a concrete instance of `SnapshotArrayInput` via:
//
//	SnapshotArray{ SnapshotArgs{...} }
type SnapshotArrayInput interface {
	pulumi.Input

	ToSnapshotArrayOutput() SnapshotArrayOutput
	ToSnapshotArrayOutputWithContext(context.Context) SnapshotArrayOutput
}

type SnapshotArray []SnapshotInput

func (SnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Snapshot)(nil)).Elem()
}

func (i SnapshotArray) ToSnapshotArrayOutput() SnapshotArrayOutput {
	return i.ToSnapshotArrayOutputWithContext(context.Background())
}

func (i SnapshotArray) ToSnapshotArrayOutputWithContext(ctx context.Context) SnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotArrayOutput)
}

// SnapshotMapInput is an input type that accepts SnapshotMap and SnapshotMapOutput values.
// You can construct a concrete instance of `SnapshotMapInput` via:
//
//	SnapshotMap{ "key": SnapshotArgs{...} }
type SnapshotMapInput interface {
	pulumi.Input

	ToSnapshotMapOutput() SnapshotMapOutput
	ToSnapshotMapOutputWithContext(context.Context) SnapshotMapOutput
}

type SnapshotMap map[string]SnapshotInput

func (SnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Snapshot)(nil)).Elem()
}

func (i SnapshotMap) ToSnapshotMapOutput() SnapshotMapOutput {
	return i.ToSnapshotMapOutputWithContext(context.Background())
}

func (i SnapshotMap) ToSnapshotMapOutputWithContext(ctx context.Context) SnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotMapOutput)
}

type SnapshotOutput struct{ *pulumi.OutputState }

func (SnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Snapshot)(nil)).Elem()
}

func (o SnapshotOutput) ToSnapshotOutput() SnapshotOutput {
	return o
}

func (o SnapshotOutput) ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput {
	return o
}

func (o SnapshotOutput) CpuHotPlug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.BoolOutput { return v.CpuHotPlug }).(pulumi.BoolOutput)
}

func (o SnapshotOutput) CpuHotUnplug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.BoolOutput { return v.CpuHotUnplug }).(pulumi.BoolOutput)
}

func (o SnapshotOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.DatacenterId }).(pulumi.StringOutput)
}

// Human readable description
func (o SnapshotOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o SnapshotOutput) DiscScsiHotPlug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.BoolOutput { return v.DiscScsiHotPlug }).(pulumi.BoolOutput)
}

func (o SnapshotOutput) DiscScsiHotUnplug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.BoolOutput { return v.DiscScsiHotUnplug }).(pulumi.BoolOutput)
}

func (o SnapshotOutput) DiscVirtioHotPlug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.BoolOutput { return v.DiscVirtioHotPlug }).(pulumi.BoolOutput)
}

func (o SnapshotOutput) DiscVirtioHotUnplug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.BoolOutput { return v.DiscVirtioHotUnplug }).(pulumi.BoolOutput)
}

// OS type of this Snapshot
func (o SnapshotOutput) LicenceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.LicenceType }).(pulumi.StringOutput)
}

// Location of that image/snapshot
func (o SnapshotOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// A name of that resource
func (o SnapshotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SnapshotOutput) NicHotPlug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.BoolOutput { return v.NicHotPlug }).(pulumi.BoolOutput)
}

func (o SnapshotOutput) NicHotUnplug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.BoolOutput { return v.NicHotUnplug }).(pulumi.BoolOutput)
}

func (o SnapshotOutput) RamHotPlug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.BoolOutput { return v.RamHotPlug }).(pulumi.BoolOutput)
}

func (o SnapshotOutput) RamHotUnplug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.BoolOutput { return v.RamHotUnplug }).(pulumi.BoolOutput)
}

// Boolean value representing if the snapshot requires extra protection e.g. two factor protection
func (o SnapshotOutput) SecAuthProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.BoolOutput { return v.SecAuthProtection }).(pulumi.BoolOutput)
}

// The size of the image in GB
func (o SnapshotOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

func (o SnapshotOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.VolumeId }).(pulumi.StringOutput)
}

type SnapshotArrayOutput struct{ *pulumi.OutputState }

func (SnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Snapshot)(nil)).Elem()
}

func (o SnapshotArrayOutput) ToSnapshotArrayOutput() SnapshotArrayOutput {
	return o
}

func (o SnapshotArrayOutput) ToSnapshotArrayOutputWithContext(ctx context.Context) SnapshotArrayOutput {
	return o
}

func (o SnapshotArrayOutput) Index(i pulumi.IntInput) SnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Snapshot {
		return vs[0].([]*Snapshot)[vs[1].(int)]
	}).(SnapshotOutput)
}

type SnapshotMapOutput struct{ *pulumi.OutputState }

func (SnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Snapshot)(nil)).Elem()
}

func (o SnapshotMapOutput) ToSnapshotMapOutput() SnapshotMapOutput {
	return o
}

func (o SnapshotMapOutput) ToSnapshotMapOutputWithContext(ctx context.Context) SnapshotMapOutput {
	return o
}

func (o SnapshotMapOutput) MapIndex(k pulumi.StringInput) SnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Snapshot {
		return vs[0].(map[string]*Snapshot)[vs[1].(string)]
	}).(SnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotInput)(nil)).Elem(), &Snapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotArrayInput)(nil)).Elem(), SnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotMapInput)(nil)).Elem(), SnapshotMap{})
	pulumi.RegisterOutputType(SnapshotOutput{})
	pulumi.RegisterOutputType(SnapshotArrayOutput{})
	pulumi.RegisterOutputType(SnapshotMapOutput{})
}
