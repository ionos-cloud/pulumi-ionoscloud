// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages **Snapshots** on IonosCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/pulumi/pulumi-random/sdk/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := compute.GetImage(ctx, &compute.GetImageArgs{
//				Type:       pulumi.StringRef("HDD"),
//				ImageAlias: pulumi.StringRef("ubuntu:latest"),
//				Location:   pulumi.StringRef("us/las"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleDatacenter, err := compute.NewDatacenter(ctx, "example", &compute.DatacenterArgs{
//				Name:              pulumi.String("Datacenter Example"),
//				Location:          pulumi.String("us/las"),
//				Description:       pulumi.String("Datacenter Description"),
//				SecAuthProtection: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewLan(ctx, "example", &compute.LanArgs{
//				DatacenterId: exampleDatacenter.ID(),
//				Public:       pulumi.Bool(true),
//				Name:         pulumi.String("Lan Example"),
//			})
//			if err != nil {
//				return err
//			}
//			serverImagePassword, err := random.NewPassword(ctx, "server_image_password", &random.PasswordArgs{
//				Length:  16,
//				Special: false,
//			})
//			if err != nil {
//				return err
//			}
//			exampleServer, err := compute.NewServer(ctx, "example", &compute.ServerArgs{
//				Name:             pulumi.String("Server Example"),
//				DatacenterId:     exampleDatacenter.ID(),
//				Cores:            pulumi.Int(1),
//				Ram:              pulumi.Int(1024),
//				AvailabilityZone: pulumi.String("ZONE_1"),
//				CpuFamily:        pulumi.String("INTEL_XEON"),
//				ImageName:        pulumi.String(example.Id),
//				ImagePassword:    serverImagePassword.Result,
//				Type:             pulumi.String("ENTERPRISE"),
//				Volume: &compute.ServerVolumeArgs{
//					Name:             pulumi.String("system"),
//					Size:             pulumi.Int(5),
//					DiskType:         pulumi.String("SSD Standard"),
//					UserData:         pulumi.String("foo"),
//					Bus:              pulumi.String("VIRTIO"),
//					AvailabilityZone: pulumi.String("ZONE_1"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewSnapshot(ctx, "test_snapshot", &compute.SnapshotArgs{
//				DatacenterId: exampleDatacenter.ID(),
//				VolumeId:     exampleServer.BootVolume,
//				Name:         pulumi.String("Snapshot Example"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Resource Snapshot can be imported using the `snapshot id`, e.g.
//
// ```sh
// $ pulumi import ionoscloud:compute/snapshot:Snapshot mysnapshot {snapshot uuid}
// ```
type Snapshot struct {
	pulumi.CustomResourceState

	// (Computed)[string] Is capable of CPU hot plug (no reboot required). Can only be updated.
	CpuHotPlug pulumi.BoolOutput `pulumi:"cpuHotPlug"`
	// Is capable of CPU hot unplug (no reboot required)
	CpuHotUnplug pulumi.BoolOutput `pulumi:"cpuHotUnplug"`
	// [string] The ID of the Virtual Data Center.
	DatacenterId pulumi.StringOutput `pulumi:"datacenterId"`
	// (Computed)[string] Human readable description
	Description pulumi.StringOutput `pulumi:"description"`
	// Is capable of SCSI drive hot plug (no reboot required)
	DiscScsiHotPlug pulumi.BoolOutput `pulumi:"discScsiHotPlug"`
	// Is capable of SCSI drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.
	DiscScsiHotUnplug pulumi.BoolOutput `pulumi:"discScsiHotUnplug"`
	// (Computed)[string] Is capable of Virt-IO drive hot plug (no reboot required). Can only be updated.
	DiscVirtioHotPlug pulumi.BoolOutput `pulumi:"discVirtioHotPlug"`
	// (Computed)[string] Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines. Can only be updated.
	DiscVirtioHotUnplug pulumi.BoolOutput `pulumi:"discVirtioHotUnplug"`
	// (Computed)[string] OS type of this Snapshot
	LicenceType pulumi.StringOutput `pulumi:"licenceType"`
	// Location of that image/snapshot
	Location pulumi.StringOutput `pulumi:"location"`
	// [string] The name of the snapshot.
	Name pulumi.StringOutput `pulumi:"name"`
	// (Computed)[string] Is capable of nic hot plug (no reboot required). Can only be updated.
	NicHotPlug pulumi.BoolOutput `pulumi:"nicHotPlug"`
	// (Computed)[string] Is capable of nic hot unplug (no reboot required). Can only be updated.
	NicHotUnplug pulumi.BoolOutput `pulumi:"nicHotUnplug"`
	// (Computed)[string] Is capable of memory hot plug (no reboot required). Can only be updated.
	RamHotPlug pulumi.BoolOutput `pulumi:"ramHotPlug"`
	// Is capable of memory hot unplug (no reboot required)
	RamHotUnplug pulumi.BoolOutput `pulumi:"ramHotUnplug"`
	// Boolean value representing if the snapshot requires extra protection e.g. two factor protection
	SecAuthProtection pulumi.BoolOutput `pulumi:"secAuthProtection"`
	// The size of the image in GB
	Size pulumi.IntOutput `pulumi:"size"`
	// [string] The ID of the specific volume to take the snapshot from.
	VolumeId pulumi.StringOutput `pulumi:"volumeId"`
}

// NewSnapshot registers a new resource with the given unique name, arguments, and options.
func NewSnapshot(ctx *pulumi.Context,
	name string, args *SnapshotArgs, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatacenterId == nil {
		return nil, errors.New("invalid value for required argument 'DatacenterId'")
	}
	if args.VolumeId == nil {
		return nil, errors.New("invalid value for required argument 'VolumeId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Snapshot
	err := ctx.RegisterResource("ionoscloud:compute/snapshot:Snapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshot gets an existing Snapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotState, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	var resource Snapshot
	err := ctx.ReadResource("ionoscloud:compute/snapshot:Snapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Snapshot resources.
type snapshotState struct {
	// (Computed)[string] Is capable of CPU hot plug (no reboot required). Can only be updated.
	CpuHotPlug *bool `pulumi:"cpuHotPlug"`
	// Is capable of CPU hot unplug (no reboot required)
	CpuHotUnplug *bool `pulumi:"cpuHotUnplug"`
	// [string] The ID of the Virtual Data Center.
	DatacenterId *string `pulumi:"datacenterId"`
	// (Computed)[string] Human readable description
	Description *string `pulumi:"description"`
	// Is capable of SCSI drive hot plug (no reboot required)
	DiscScsiHotPlug *bool `pulumi:"discScsiHotPlug"`
	// Is capable of SCSI drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.
	DiscScsiHotUnplug *bool `pulumi:"discScsiHotUnplug"`
	// (Computed)[string] Is capable of Virt-IO drive hot plug (no reboot required). Can only be updated.
	DiscVirtioHotPlug *bool `pulumi:"discVirtioHotPlug"`
	// (Computed)[string] Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines. Can only be updated.
	DiscVirtioHotUnplug *bool `pulumi:"discVirtioHotUnplug"`
	// (Computed)[string] OS type of this Snapshot
	LicenceType *string `pulumi:"licenceType"`
	// Location of that image/snapshot
	Location *string `pulumi:"location"`
	// [string] The name of the snapshot.
	Name *string `pulumi:"name"`
	// (Computed)[string] Is capable of nic hot plug (no reboot required). Can only be updated.
	NicHotPlug *bool `pulumi:"nicHotPlug"`
	// (Computed)[string] Is capable of nic hot unplug (no reboot required). Can only be updated.
	NicHotUnplug *bool `pulumi:"nicHotUnplug"`
	// (Computed)[string] Is capable of memory hot plug (no reboot required). Can only be updated.
	RamHotPlug *bool `pulumi:"ramHotPlug"`
	// Is capable of memory hot unplug (no reboot required)
	RamHotUnplug *bool `pulumi:"ramHotUnplug"`
	// Boolean value representing if the snapshot requires extra protection e.g. two factor protection
	SecAuthProtection *bool `pulumi:"secAuthProtection"`
	// The size of the image in GB
	Size *int `pulumi:"size"`
	// [string] The ID of the specific volume to take the snapshot from.
	VolumeId *string `pulumi:"volumeId"`
}

type SnapshotState struct {
	// (Computed)[string] Is capable of CPU hot plug (no reboot required). Can only be updated.
	CpuHotPlug pulumi.BoolPtrInput
	// Is capable of CPU hot unplug (no reboot required)
	CpuHotUnplug pulumi.BoolPtrInput
	// [string] The ID of the Virtual Data Center.
	DatacenterId pulumi.StringPtrInput
	// (Computed)[string] Human readable description
	Description pulumi.StringPtrInput
	// Is capable of SCSI drive hot plug (no reboot required)
	DiscScsiHotPlug pulumi.BoolPtrInput
	// Is capable of SCSI drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.
	DiscScsiHotUnplug pulumi.BoolPtrInput
	// (Computed)[string] Is capable of Virt-IO drive hot plug (no reboot required). Can only be updated.
	DiscVirtioHotPlug pulumi.BoolPtrInput
	// (Computed)[string] Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines. Can only be updated.
	DiscVirtioHotUnplug pulumi.BoolPtrInput
	// (Computed)[string] OS type of this Snapshot
	LicenceType pulumi.StringPtrInput
	// Location of that image/snapshot
	Location pulumi.StringPtrInput
	// [string] The name of the snapshot.
	Name pulumi.StringPtrInput
	// (Computed)[string] Is capable of nic hot plug (no reboot required). Can only be updated.
	NicHotPlug pulumi.BoolPtrInput
	// (Computed)[string] Is capable of nic hot unplug (no reboot required). Can only be updated.
	NicHotUnplug pulumi.BoolPtrInput
	// (Computed)[string] Is capable of memory hot plug (no reboot required). Can only be updated.
	RamHotPlug pulumi.BoolPtrInput
	// Is capable of memory hot unplug (no reboot required)
	RamHotUnplug pulumi.BoolPtrInput
	// Boolean value representing if the snapshot requires extra protection e.g. two factor protection
	SecAuthProtection pulumi.BoolPtrInput
	// The size of the image in GB
	Size pulumi.IntPtrInput
	// [string] The ID of the specific volume to take the snapshot from.
	VolumeId pulumi.StringPtrInput
}

func (SnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotState)(nil)).Elem()
}

type snapshotArgs struct {
	// (Computed)[string] Is capable of CPU hot plug (no reboot required). Can only be updated.
	CpuHotPlug *bool `pulumi:"cpuHotPlug"`
	// [string] The ID of the Virtual Data Center.
	DatacenterId string `pulumi:"datacenterId"`
	// (Computed)[string] Human readable description
	Description *string `pulumi:"description"`
	// (Computed)[string] Is capable of Virt-IO drive hot plug (no reboot required). Can only be updated.
	DiscVirtioHotPlug *bool `pulumi:"discVirtioHotPlug"`
	// (Computed)[string] Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines. Can only be updated.
	DiscVirtioHotUnplug *bool `pulumi:"discVirtioHotUnplug"`
	// (Computed)[string] OS type of this Snapshot
	LicenceType *string `pulumi:"licenceType"`
	// [string] The name of the snapshot.
	Name *string `pulumi:"name"`
	// (Computed)[string] Is capable of nic hot plug (no reboot required). Can only be updated.
	NicHotPlug *bool `pulumi:"nicHotPlug"`
	// (Computed)[string] Is capable of nic hot unplug (no reboot required). Can only be updated.
	NicHotUnplug *bool `pulumi:"nicHotUnplug"`
	// (Computed)[string] Is capable of memory hot plug (no reboot required). Can only be updated.
	RamHotPlug *bool `pulumi:"ramHotPlug"`
	// Boolean value representing if the snapshot requires extra protection e.g. two factor protection
	SecAuthProtection *bool `pulumi:"secAuthProtection"`
	// [string] The ID of the specific volume to take the snapshot from.
	VolumeId string `pulumi:"volumeId"`
}

// The set of arguments for constructing a Snapshot resource.
type SnapshotArgs struct {
	// (Computed)[string] Is capable of CPU hot plug (no reboot required). Can only be updated.
	CpuHotPlug pulumi.BoolPtrInput
	// [string] The ID of the Virtual Data Center.
	DatacenterId pulumi.StringInput
	// (Computed)[string] Human readable description
	Description pulumi.StringPtrInput
	// (Computed)[string] Is capable of Virt-IO drive hot plug (no reboot required). Can only be updated.
	DiscVirtioHotPlug pulumi.BoolPtrInput
	// (Computed)[string] Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines. Can only be updated.
	DiscVirtioHotUnplug pulumi.BoolPtrInput
	// (Computed)[string] OS type of this Snapshot
	LicenceType pulumi.StringPtrInput
	// [string] The name of the snapshot.
	Name pulumi.StringPtrInput
	// (Computed)[string] Is capable of nic hot plug (no reboot required). Can only be updated.
	NicHotPlug pulumi.BoolPtrInput
	// (Computed)[string] Is capable of nic hot unplug (no reboot required). Can only be updated.
	NicHotUnplug pulumi.BoolPtrInput
	// (Computed)[string] Is capable of memory hot plug (no reboot required). Can only be updated.
	RamHotPlug pulumi.BoolPtrInput
	// Boolean value representing if the snapshot requires extra protection e.g. two factor protection
	SecAuthProtection pulumi.BoolPtrInput
	// [string] The ID of the specific volume to take the snapshot from.
	VolumeId pulumi.StringInput
}

func (SnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotArgs)(nil)).Elem()
}

type SnapshotInput interface {
	pulumi.Input

	ToSnapshotOutput() SnapshotOutput
	ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput
}

func (*Snapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**Snapshot)(nil)).Elem()
}

func (i *Snapshot) ToSnapshotOutput() SnapshotOutput {
	return i.ToSnapshotOutputWithContext(context.Background())
}

func (i *Snapshot) ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotOutput)
}

// SnapshotArrayInput is an input type that accepts SnapshotArray and SnapshotArrayOutput values.
// You can construct a concrete instance of `SnapshotArrayInput` via:
//
//	SnapshotArray{ SnapshotArgs{...} }
type SnapshotArrayInput interface {
	pulumi.Input

	ToSnapshotArrayOutput() SnapshotArrayOutput
	ToSnapshotArrayOutputWithContext(context.Context) SnapshotArrayOutput
}

type SnapshotArray []SnapshotInput

func (SnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Snapshot)(nil)).Elem()
}

func (i SnapshotArray) ToSnapshotArrayOutput() SnapshotArrayOutput {
	return i.ToSnapshotArrayOutputWithContext(context.Background())
}

func (i SnapshotArray) ToSnapshotArrayOutputWithContext(ctx context.Context) SnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotArrayOutput)
}

// SnapshotMapInput is an input type that accepts SnapshotMap and SnapshotMapOutput values.
// You can construct a concrete instance of `SnapshotMapInput` via:
//
//	SnapshotMap{ "key": SnapshotArgs{...} }
type SnapshotMapInput interface {
	pulumi.Input

	ToSnapshotMapOutput() SnapshotMapOutput
	ToSnapshotMapOutputWithContext(context.Context) SnapshotMapOutput
}

type SnapshotMap map[string]SnapshotInput

func (SnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Snapshot)(nil)).Elem()
}

func (i SnapshotMap) ToSnapshotMapOutput() SnapshotMapOutput {
	return i.ToSnapshotMapOutputWithContext(context.Background())
}

func (i SnapshotMap) ToSnapshotMapOutputWithContext(ctx context.Context) SnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotMapOutput)
}

type SnapshotOutput struct{ *pulumi.OutputState }

func (SnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Snapshot)(nil)).Elem()
}

func (o SnapshotOutput) ToSnapshotOutput() SnapshotOutput {
	return o
}

func (o SnapshotOutput) ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput {
	return o
}

// (Computed)[string] Is capable of CPU hot plug (no reboot required). Can only be updated.
func (o SnapshotOutput) CpuHotPlug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.BoolOutput { return v.CpuHotPlug }).(pulumi.BoolOutput)
}

// Is capable of CPU hot unplug (no reboot required)
func (o SnapshotOutput) CpuHotUnplug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.BoolOutput { return v.CpuHotUnplug }).(pulumi.BoolOutput)
}

// [string] The ID of the Virtual Data Center.
func (o SnapshotOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.DatacenterId }).(pulumi.StringOutput)
}

// (Computed)[string] Human readable description
func (o SnapshotOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Is capable of SCSI drive hot plug (no reboot required)
func (o SnapshotOutput) DiscScsiHotPlug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.BoolOutput { return v.DiscScsiHotPlug }).(pulumi.BoolOutput)
}

// Is capable of SCSI drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.
func (o SnapshotOutput) DiscScsiHotUnplug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.BoolOutput { return v.DiscScsiHotUnplug }).(pulumi.BoolOutput)
}

// (Computed)[string] Is capable of Virt-IO drive hot plug (no reboot required). Can only be updated.
func (o SnapshotOutput) DiscVirtioHotPlug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.BoolOutput { return v.DiscVirtioHotPlug }).(pulumi.BoolOutput)
}

// (Computed)[string] Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines. Can only be updated.
func (o SnapshotOutput) DiscVirtioHotUnplug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.BoolOutput { return v.DiscVirtioHotUnplug }).(pulumi.BoolOutput)
}

// (Computed)[string] OS type of this Snapshot
func (o SnapshotOutput) LicenceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.LicenceType }).(pulumi.StringOutput)
}

// Location of that image/snapshot
func (o SnapshotOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// [string] The name of the snapshot.
func (o SnapshotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// (Computed)[string] Is capable of nic hot plug (no reboot required). Can only be updated.
func (o SnapshotOutput) NicHotPlug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.BoolOutput { return v.NicHotPlug }).(pulumi.BoolOutput)
}

// (Computed)[string] Is capable of nic hot unplug (no reboot required). Can only be updated.
func (o SnapshotOutput) NicHotUnplug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.BoolOutput { return v.NicHotUnplug }).(pulumi.BoolOutput)
}

// (Computed)[string] Is capable of memory hot plug (no reboot required). Can only be updated.
func (o SnapshotOutput) RamHotPlug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.BoolOutput { return v.RamHotPlug }).(pulumi.BoolOutput)
}

// Is capable of memory hot unplug (no reboot required)
func (o SnapshotOutput) RamHotUnplug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.BoolOutput { return v.RamHotUnplug }).(pulumi.BoolOutput)
}

// Boolean value representing if the snapshot requires extra protection e.g. two factor protection
func (o SnapshotOutput) SecAuthProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.BoolOutput { return v.SecAuthProtection }).(pulumi.BoolOutput)
}

// The size of the image in GB
func (o SnapshotOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// [string] The ID of the specific volume to take the snapshot from.
func (o SnapshotOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.VolumeId }).(pulumi.StringOutput)
}

type SnapshotArrayOutput struct{ *pulumi.OutputState }

func (SnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Snapshot)(nil)).Elem()
}

func (o SnapshotArrayOutput) ToSnapshotArrayOutput() SnapshotArrayOutput {
	return o
}

func (o SnapshotArrayOutput) ToSnapshotArrayOutputWithContext(ctx context.Context) SnapshotArrayOutput {
	return o
}

func (o SnapshotArrayOutput) Index(i pulumi.IntInput) SnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Snapshot {
		return vs[0].([]*Snapshot)[vs[1].(int)]
	}).(SnapshotOutput)
}

type SnapshotMapOutput struct{ *pulumi.OutputState }

func (SnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Snapshot)(nil)).Elem()
}

func (o SnapshotMapOutput) ToSnapshotMapOutput() SnapshotMapOutput {
	return o
}

func (o SnapshotMapOutput) ToSnapshotMapOutputWithContext(ctx context.Context) SnapshotMapOutput {
	return o
}

func (o SnapshotMapOutput) MapIndex(k pulumi.StringInput) SnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Snapshot {
		return vs[0].(map[string]*Snapshot)[vs[1].(string)]
	}).(SnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotInput)(nil)).Elem(), &Snapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotArrayInput)(nil)).Elem(), SnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotMapInput)(nil)).Elem(), SnapshotMap{})
	pulumi.RegisterOutputType(SnapshotOutput{})
	pulumi.RegisterOutputType(SnapshotArrayOutput{})
	pulumi.RegisterOutputType(SnapshotMapOutput{})
}
