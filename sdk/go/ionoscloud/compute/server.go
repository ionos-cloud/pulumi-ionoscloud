// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Resource Server can be imported using the `resource id` and the `datacenter id`, e.g.. Passing only resource id and datacenter id means that the first nic found linked to the server will be attached to it.
//
// ```sh
// $ pulumi import ionoscloud:compute/server:Server myserver datacenter uuid/server uuid
// ```
//
// Optionally, you can pass `primary_nic` and `firewallrule_id` so terraform will know to import also the first nic and firewall rule (if it exists on the server):
//
// ```sh
// $ pulumi import ionoscloud:compute/server:Server myserver datacenter uuid/server uuid/primary nic id/firewall rule id
// ```
type Server struct {
	pulumi.CustomResourceState

	// [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the server.
	//
	// ⚠️ **_Warning: `allowReplace` - lets you update immutable fields, but it first destroys and then re-creates the server in order to do it. This field should be used with care, understanding the risks._**
	//
	// > **⚠ WARNING**
	// >
	// > Image_name under volume level is deprecated, please use imageName under server level
	// sshKeyPath and sshKeys fields are immutable.
	//
	// > **⚠ WARNING**
	// >
	// > If you want to create a **CUBE** server, you have to provide the `templateUuid`. In this case you can not set `cores`, `ram` and `volume.size` arguments, these being mutually exclusive with `templateUuid`.
	// >
	// > In all the other cases (**ENTERPRISE** servers) you have to provide values for `cores`, `ram` and `volume size`.
	AllowReplace pulumi.BoolPtrOutput `pulumi:"allowReplace"`
	// [string] The availability zone in which the server should exist. E.g: `AUTO`, `ZONE_1`, `ZONE_2`. This property is immutable.
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// ***DEPRECATED*** Please refer to compute.BootDeviceSelection (Optional)(Computed)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the compute.getImage data source.
	//
	// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
	BootCdrom pulumi.StringOutput `pulumi:"bootCdrom"`
	// [string] The image or snapshot UUID / name. May also be an image alias. It is required if `licenceType` is not provided.
	BootImage pulumi.StringOutput `pulumi:"bootImage"`
	// The associated boot volume.
	BootVolume pulumi.StringOutput `pulumi:"bootVolume"`
	// (Computed)[integer] Number of server CPU cores.
	Cores pulumi.IntOutput `pulumi:"cores"`
	// [string] CPU architecture on which server gets provisioned; not all CPU architectures are available in all datacenter regions; available CPU architectures can be retrieved from the datacenter resource. E.g.: "INTEL_SKYLAKE" or "INTEL_XEON".
	CpuFamily pulumi.StringOutput `pulumi:"cpuFamily"`
	// [string] The ID of a Virtual Data Center.
	DatacenterId pulumi.StringOutput `pulumi:"datacenterId"`
	// The associated firewall rule.
	FirewallruleId pulumi.StringOutput `pulumi:"firewallruleId"`
	// The associated firewall rules.
	FirewallruleIds pulumi.StringArrayOutput `pulumi:"firewallruleIds"`
	// (Computed)[string] The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licenceType` is not provided. Attribute is immutable.
	ImageName pulumi.StringOutput `pulumi:"imageName"`
	// [string] Required if `sshKeyPath` is not provided.
	ImagePassword pulumi.StringOutput `pulumi:"imagePassword"`
	// A list with the IDs for the volumes that are defined inside the server resource.
	InlineVolumeIds pulumi.StringArrayOutput `pulumi:"inlineVolumeIds"`
	// [set] A label can be seen as an object with only two required fields: `key` and `value`, both of the `string` type. Please check the example presented above to see how a `label` can be used in the plan. A server can have multiple labels.
	Labels ServerLabelArrayOutput `pulumi:"labels"`
	// [string] The name of the server.
	Name pulumi.StringOutput `pulumi:"name"`
	// See the Nic section.
	Nic ServerNicPtrOutput `pulumi:"nic"`
	// The associated IP address.
	PrimaryIp pulumi.StringOutput `pulumi:"primaryIp"`
	// The associated NIC.
	PrimaryNic pulumi.StringOutput `pulumi:"primaryNic"`
	// (Computed)[integer] The amount of memory for the server in MB.
	Ram pulumi.IntOutput `pulumi:"ram"`
	// The list of Security Group IDs for the
	SecurityGroupsIds pulumi.StringArrayOutput `pulumi:"securityGroupsIds"`
	// [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images.  Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `imagePassword` is not provided. Does not support `~` expansion to homedir in the given path. This property is immutable.
	//
	// Deprecated: Will be renamed to sshKeys in the future, to allow users to set both the ssh key path or directly the ssh key
	SshKeyPaths pulumi.StringArrayOutput `pulumi:"sshKeyPaths"`
	// [list] Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is used for the volume creation. Does not support `~` expansion to homedir in the given path.
	SshKeys pulumi.StringArrayOutput `pulumi:"sshKeys"`
	// [string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
	TemplateUuid pulumi.StringPtrOutput `pulumi:"templateUuid"`
	// (Computed)[string] Server usages: [ENTERPRISE](https://docs.ionos.com/cloud/compute-engine/virtual-servers/virtual-servers) or [CUBE](https://docs.ionos.com/cloud/compute-engine/virtual-servers/cloud-cubes). This property is immutable.
	Type pulumi.StringOutput `pulumi:"type"`
	// [string] Sets the power state of the server. E.g: `RUNNING`, `SHUTOFF` or `SUSPENDED`. SUSPENDED state is only valid for cube. SHUTOFF state is only valid for enterprise.
	VmState pulumi.StringOutput `pulumi:"vmState"`
	// See the Volume section.
	Volume ServerVolumeOutput `pulumi:"volume"`
}

// NewServer registers a new resource with the given unique name, arguments, and options.
func NewServer(ctx *pulumi.Context,
	name string, args *ServerArgs, opts ...pulumi.ResourceOption) (*Server, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatacenterId == nil {
		return nil, errors.New("invalid value for required argument 'DatacenterId'")
	}
	if args.Volume == nil {
		return nil, errors.New("invalid value for required argument 'Volume'")
	}
	if args.ImagePassword != nil {
		args.ImagePassword = pulumi.ToSecret(args.ImagePassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"imagePassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Server
	err := ctx.RegisterResource("ionoscloud:compute/server:Server", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServer gets an existing Server resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerState, opts ...pulumi.ResourceOption) (*Server, error) {
	var resource Server
	err := ctx.ReadResource("ionoscloud:compute/server:Server", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Server resources.
type serverState struct {
	// [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the server.
	//
	// ⚠️ **_Warning: `allowReplace` - lets you update immutable fields, but it first destroys and then re-creates the server in order to do it. This field should be used with care, understanding the risks._**
	//
	// > **⚠ WARNING**
	// >
	// > Image_name under volume level is deprecated, please use imageName under server level
	// sshKeyPath and sshKeys fields are immutable.
	//
	// > **⚠ WARNING**
	// >
	// > If you want to create a **CUBE** server, you have to provide the `templateUuid`. In this case you can not set `cores`, `ram` and `volume.size` arguments, these being mutually exclusive with `templateUuid`.
	// >
	// > In all the other cases (**ENTERPRISE** servers) you have to provide values for `cores`, `ram` and `volume size`.
	AllowReplace *bool `pulumi:"allowReplace"`
	// [string] The availability zone in which the server should exist. E.g: `AUTO`, `ZONE_1`, `ZONE_2`. This property is immutable.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// ***DEPRECATED*** Please refer to compute.BootDeviceSelection (Optional)(Computed)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the compute.getImage data source.
	//
	// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
	BootCdrom *string `pulumi:"bootCdrom"`
	// [string] The image or snapshot UUID / name. May also be an image alias. It is required if `licenceType` is not provided.
	BootImage *string `pulumi:"bootImage"`
	// The associated boot volume.
	BootVolume *string `pulumi:"bootVolume"`
	// (Computed)[integer] Number of server CPU cores.
	Cores *int `pulumi:"cores"`
	// [string] CPU architecture on which server gets provisioned; not all CPU architectures are available in all datacenter regions; available CPU architectures can be retrieved from the datacenter resource. E.g.: "INTEL_SKYLAKE" or "INTEL_XEON".
	CpuFamily *string `pulumi:"cpuFamily"`
	// [string] The ID of a Virtual Data Center.
	DatacenterId *string `pulumi:"datacenterId"`
	// The associated firewall rule.
	FirewallruleId *string `pulumi:"firewallruleId"`
	// The associated firewall rules.
	FirewallruleIds []string `pulumi:"firewallruleIds"`
	// (Computed)[string] The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
	Hostname *string `pulumi:"hostname"`
	// [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licenceType` is not provided. Attribute is immutable.
	ImageName *string `pulumi:"imageName"`
	// [string] Required if `sshKeyPath` is not provided.
	ImagePassword *string `pulumi:"imagePassword"`
	// A list with the IDs for the volumes that are defined inside the server resource.
	InlineVolumeIds []string `pulumi:"inlineVolumeIds"`
	// [set] A label can be seen as an object with only two required fields: `key` and `value`, both of the `string` type. Please check the example presented above to see how a `label` can be used in the plan. A server can have multiple labels.
	Labels []ServerLabel `pulumi:"labels"`
	// [string] The name of the server.
	Name *string `pulumi:"name"`
	// See the Nic section.
	Nic *ServerNic `pulumi:"nic"`
	// The associated IP address.
	PrimaryIp *string `pulumi:"primaryIp"`
	// The associated NIC.
	PrimaryNic *string `pulumi:"primaryNic"`
	// (Computed)[integer] The amount of memory for the server in MB.
	Ram *int `pulumi:"ram"`
	// The list of Security Group IDs for the
	SecurityGroupsIds []string `pulumi:"securityGroupsIds"`
	// [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images.  Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `imagePassword` is not provided. Does not support `~` expansion to homedir in the given path. This property is immutable.
	//
	// Deprecated: Will be renamed to sshKeys in the future, to allow users to set both the ssh key path or directly the ssh key
	SshKeyPaths []string `pulumi:"sshKeyPaths"`
	// [list] Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is used for the volume creation. Does not support `~` expansion to homedir in the given path.
	SshKeys []string `pulumi:"sshKeys"`
	// [string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
	TemplateUuid *string `pulumi:"templateUuid"`
	// (Computed)[string] Server usages: [ENTERPRISE](https://docs.ionos.com/cloud/compute-engine/virtual-servers/virtual-servers) or [CUBE](https://docs.ionos.com/cloud/compute-engine/virtual-servers/cloud-cubes). This property is immutable.
	Type *string `pulumi:"type"`
	// [string] Sets the power state of the server. E.g: `RUNNING`, `SHUTOFF` or `SUSPENDED`. SUSPENDED state is only valid for cube. SHUTOFF state is only valid for enterprise.
	VmState *string `pulumi:"vmState"`
	// See the Volume section.
	Volume *ServerVolume `pulumi:"volume"`
}

type ServerState struct {
	// [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the server.
	//
	// ⚠️ **_Warning: `allowReplace` - lets you update immutable fields, but it first destroys and then re-creates the server in order to do it. This field should be used with care, understanding the risks._**
	//
	// > **⚠ WARNING**
	// >
	// > Image_name under volume level is deprecated, please use imageName under server level
	// sshKeyPath and sshKeys fields are immutable.
	//
	// > **⚠ WARNING**
	// >
	// > If you want to create a **CUBE** server, you have to provide the `templateUuid`. In this case you can not set `cores`, `ram` and `volume.size` arguments, these being mutually exclusive with `templateUuid`.
	// >
	// > In all the other cases (**ENTERPRISE** servers) you have to provide values for `cores`, `ram` and `volume size`.
	AllowReplace pulumi.BoolPtrInput
	// [string] The availability zone in which the server should exist. E.g: `AUTO`, `ZONE_1`, `ZONE_2`. This property is immutable.
	AvailabilityZone pulumi.StringPtrInput
	// ***DEPRECATED*** Please refer to compute.BootDeviceSelection (Optional)(Computed)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the compute.getImage data source.
	//
	// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
	BootCdrom pulumi.StringPtrInput
	// [string] The image or snapshot UUID / name. May also be an image alias. It is required if `licenceType` is not provided.
	BootImage pulumi.StringPtrInput
	// The associated boot volume.
	BootVolume pulumi.StringPtrInput
	// (Computed)[integer] Number of server CPU cores.
	Cores pulumi.IntPtrInput
	// [string] CPU architecture on which server gets provisioned; not all CPU architectures are available in all datacenter regions; available CPU architectures can be retrieved from the datacenter resource. E.g.: "INTEL_SKYLAKE" or "INTEL_XEON".
	CpuFamily pulumi.StringPtrInput
	// [string] The ID of a Virtual Data Center.
	DatacenterId pulumi.StringPtrInput
	// The associated firewall rule.
	FirewallruleId pulumi.StringPtrInput
	// The associated firewall rules.
	FirewallruleIds pulumi.StringArrayInput
	// (Computed)[string] The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
	Hostname pulumi.StringPtrInput
	// [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licenceType` is not provided. Attribute is immutable.
	ImageName pulumi.StringPtrInput
	// [string] Required if `sshKeyPath` is not provided.
	ImagePassword pulumi.StringPtrInput
	// A list with the IDs for the volumes that are defined inside the server resource.
	InlineVolumeIds pulumi.StringArrayInput
	// [set] A label can be seen as an object with only two required fields: `key` and `value`, both of the `string` type. Please check the example presented above to see how a `label` can be used in the plan. A server can have multiple labels.
	Labels ServerLabelArrayInput
	// [string] The name of the server.
	Name pulumi.StringPtrInput
	// See the Nic section.
	Nic ServerNicPtrInput
	// The associated IP address.
	PrimaryIp pulumi.StringPtrInput
	// The associated NIC.
	PrimaryNic pulumi.StringPtrInput
	// (Computed)[integer] The amount of memory for the server in MB.
	Ram pulumi.IntPtrInput
	// The list of Security Group IDs for the
	SecurityGroupsIds pulumi.StringArrayInput
	// [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images.  Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `imagePassword` is not provided. Does not support `~` expansion to homedir in the given path. This property is immutable.
	//
	// Deprecated: Will be renamed to sshKeys in the future, to allow users to set both the ssh key path or directly the ssh key
	SshKeyPaths pulumi.StringArrayInput
	// [list] Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is used for the volume creation. Does not support `~` expansion to homedir in the given path.
	SshKeys pulumi.StringArrayInput
	// [string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
	TemplateUuid pulumi.StringPtrInput
	// (Computed)[string] Server usages: [ENTERPRISE](https://docs.ionos.com/cloud/compute-engine/virtual-servers/virtual-servers) or [CUBE](https://docs.ionos.com/cloud/compute-engine/virtual-servers/cloud-cubes). This property is immutable.
	Type pulumi.StringPtrInput
	// [string] Sets the power state of the server. E.g: `RUNNING`, `SHUTOFF` or `SUSPENDED`. SUSPENDED state is only valid for cube. SHUTOFF state is only valid for enterprise.
	VmState pulumi.StringPtrInput
	// See the Volume section.
	Volume ServerVolumePtrInput
}

func (ServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverState)(nil)).Elem()
}

type serverArgs struct {
	// [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the server.
	//
	// ⚠️ **_Warning: `allowReplace` - lets you update immutable fields, but it first destroys and then re-creates the server in order to do it. This field should be used with care, understanding the risks._**
	//
	// > **⚠ WARNING**
	// >
	// > Image_name under volume level is deprecated, please use imageName under server level
	// sshKeyPath and sshKeys fields are immutable.
	//
	// > **⚠ WARNING**
	// >
	// > If you want to create a **CUBE** server, you have to provide the `templateUuid`. In this case you can not set `cores`, `ram` and `volume.size` arguments, these being mutually exclusive with `templateUuid`.
	// >
	// > In all the other cases (**ENTERPRISE** servers) you have to provide values for `cores`, `ram` and `volume size`.
	AllowReplace *bool `pulumi:"allowReplace"`
	// [string] The availability zone in which the server should exist. E.g: `AUTO`, `ZONE_1`, `ZONE_2`. This property is immutable.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// ***DEPRECATED*** Please refer to compute.BootDeviceSelection (Optional)(Computed)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the compute.getImage data source.
	//
	// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
	BootCdrom *string `pulumi:"bootCdrom"`
	// [string] The image or snapshot UUID / name. May also be an image alias. It is required if `licenceType` is not provided.
	BootImage *string `pulumi:"bootImage"`
	// (Computed)[integer] Number of server CPU cores.
	Cores *int `pulumi:"cores"`
	// [string] CPU architecture on which server gets provisioned; not all CPU architectures are available in all datacenter regions; available CPU architectures can be retrieved from the datacenter resource. E.g.: "INTEL_SKYLAKE" or "INTEL_XEON".
	CpuFamily *string `pulumi:"cpuFamily"`
	// [string] The ID of a Virtual Data Center.
	DatacenterId string `pulumi:"datacenterId"`
	// The associated firewall rules.
	FirewallruleIds []string `pulumi:"firewallruleIds"`
	// (Computed)[string] The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
	Hostname *string `pulumi:"hostname"`
	// [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licenceType` is not provided. Attribute is immutable.
	ImageName *string `pulumi:"imageName"`
	// [string] Required if `sshKeyPath` is not provided.
	ImagePassword *string `pulumi:"imagePassword"`
	// [set] A label can be seen as an object with only two required fields: `key` and `value`, both of the `string` type. Please check the example presented above to see how a `label` can be used in the plan. A server can have multiple labels.
	Labels []ServerLabel `pulumi:"labels"`
	// [string] The name of the server.
	Name *string `pulumi:"name"`
	// See the Nic section.
	Nic *ServerNic `pulumi:"nic"`
	// (Computed)[integer] The amount of memory for the server in MB.
	Ram *int `pulumi:"ram"`
	// The list of Security Group IDs for the
	SecurityGroupsIds []string `pulumi:"securityGroupsIds"`
	// [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images.  Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `imagePassword` is not provided. Does not support `~` expansion to homedir in the given path. This property is immutable.
	//
	// Deprecated: Will be renamed to sshKeys in the future, to allow users to set both the ssh key path or directly the ssh key
	SshKeyPaths []string `pulumi:"sshKeyPaths"`
	// [list] Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is used for the volume creation. Does not support `~` expansion to homedir in the given path.
	SshKeys []string `pulumi:"sshKeys"`
	// [string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
	TemplateUuid *string `pulumi:"templateUuid"`
	// (Computed)[string] Server usages: [ENTERPRISE](https://docs.ionos.com/cloud/compute-engine/virtual-servers/virtual-servers) or [CUBE](https://docs.ionos.com/cloud/compute-engine/virtual-servers/cloud-cubes). This property is immutable.
	Type *string `pulumi:"type"`
	// [string] Sets the power state of the server. E.g: `RUNNING`, `SHUTOFF` or `SUSPENDED`. SUSPENDED state is only valid for cube. SHUTOFF state is only valid for enterprise.
	VmState *string `pulumi:"vmState"`
	// See the Volume section.
	Volume ServerVolume `pulumi:"volume"`
}

// The set of arguments for constructing a Server resource.
type ServerArgs struct {
	// [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the server.
	//
	// ⚠️ **_Warning: `allowReplace` - lets you update immutable fields, but it first destroys and then re-creates the server in order to do it. This field should be used with care, understanding the risks._**
	//
	// > **⚠ WARNING**
	// >
	// > Image_name under volume level is deprecated, please use imageName under server level
	// sshKeyPath and sshKeys fields are immutable.
	//
	// > **⚠ WARNING**
	// >
	// > If you want to create a **CUBE** server, you have to provide the `templateUuid`. In this case you can not set `cores`, `ram` and `volume.size` arguments, these being mutually exclusive with `templateUuid`.
	// >
	// > In all the other cases (**ENTERPRISE** servers) you have to provide values for `cores`, `ram` and `volume size`.
	AllowReplace pulumi.BoolPtrInput
	// [string] The availability zone in which the server should exist. E.g: `AUTO`, `ZONE_1`, `ZONE_2`. This property is immutable.
	AvailabilityZone pulumi.StringPtrInput
	// ***DEPRECATED*** Please refer to compute.BootDeviceSelection (Optional)(Computed)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the compute.getImage data source.
	//
	// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
	BootCdrom pulumi.StringPtrInput
	// [string] The image or snapshot UUID / name. May also be an image alias. It is required if `licenceType` is not provided.
	BootImage pulumi.StringPtrInput
	// (Computed)[integer] Number of server CPU cores.
	Cores pulumi.IntPtrInput
	// [string] CPU architecture on which server gets provisioned; not all CPU architectures are available in all datacenter regions; available CPU architectures can be retrieved from the datacenter resource. E.g.: "INTEL_SKYLAKE" or "INTEL_XEON".
	CpuFamily pulumi.StringPtrInput
	// [string] The ID of a Virtual Data Center.
	DatacenterId pulumi.StringInput
	// The associated firewall rules.
	FirewallruleIds pulumi.StringArrayInput
	// (Computed)[string] The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
	Hostname pulumi.StringPtrInput
	// [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licenceType` is not provided. Attribute is immutable.
	ImageName pulumi.StringPtrInput
	// [string] Required if `sshKeyPath` is not provided.
	ImagePassword pulumi.StringPtrInput
	// [set] A label can be seen as an object with only two required fields: `key` and `value`, both of the `string` type. Please check the example presented above to see how a `label` can be used in the plan. A server can have multiple labels.
	Labels ServerLabelArrayInput
	// [string] The name of the server.
	Name pulumi.StringPtrInput
	// See the Nic section.
	Nic ServerNicPtrInput
	// (Computed)[integer] The amount of memory for the server in MB.
	Ram pulumi.IntPtrInput
	// The list of Security Group IDs for the
	SecurityGroupsIds pulumi.StringArrayInput
	// [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images.  Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `imagePassword` is not provided. Does not support `~` expansion to homedir in the given path. This property is immutable.
	//
	// Deprecated: Will be renamed to sshKeys in the future, to allow users to set both the ssh key path or directly the ssh key
	SshKeyPaths pulumi.StringArrayInput
	// [list] Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is used for the volume creation. Does not support `~` expansion to homedir in the given path.
	SshKeys pulumi.StringArrayInput
	// [string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
	TemplateUuid pulumi.StringPtrInput
	// (Computed)[string] Server usages: [ENTERPRISE](https://docs.ionos.com/cloud/compute-engine/virtual-servers/virtual-servers) or [CUBE](https://docs.ionos.com/cloud/compute-engine/virtual-servers/cloud-cubes). This property is immutable.
	Type pulumi.StringPtrInput
	// [string] Sets the power state of the server. E.g: `RUNNING`, `SHUTOFF` or `SUSPENDED`. SUSPENDED state is only valid for cube. SHUTOFF state is only valid for enterprise.
	VmState pulumi.StringPtrInput
	// See the Volume section.
	Volume ServerVolumeInput
}

func (ServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverArgs)(nil)).Elem()
}

type ServerInput interface {
	pulumi.Input

	ToServerOutput() ServerOutput
	ToServerOutputWithContext(ctx context.Context) ServerOutput
}

func (*Server) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil)).Elem()
}

func (i *Server) ToServerOutput() ServerOutput {
	return i.ToServerOutputWithContext(context.Background())
}

func (i *Server) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerOutput)
}

// ServerArrayInput is an input type that accepts ServerArray and ServerArrayOutput values.
// You can construct a concrete instance of `ServerArrayInput` via:
//
//	ServerArray{ ServerArgs{...} }
type ServerArrayInput interface {
	pulumi.Input

	ToServerArrayOutput() ServerArrayOutput
	ToServerArrayOutputWithContext(context.Context) ServerArrayOutput
}

type ServerArray []ServerInput

func (ServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Server)(nil)).Elem()
}

func (i ServerArray) ToServerArrayOutput() ServerArrayOutput {
	return i.ToServerArrayOutputWithContext(context.Background())
}

func (i ServerArray) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerArrayOutput)
}

// ServerMapInput is an input type that accepts ServerMap and ServerMapOutput values.
// You can construct a concrete instance of `ServerMapInput` via:
//
//	ServerMap{ "key": ServerArgs{...} }
type ServerMapInput interface {
	pulumi.Input

	ToServerMapOutput() ServerMapOutput
	ToServerMapOutputWithContext(context.Context) ServerMapOutput
}

type ServerMap map[string]ServerInput

func (ServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Server)(nil)).Elem()
}

func (i ServerMap) ToServerMapOutput() ServerMapOutput {
	return i.ToServerMapOutputWithContext(context.Background())
}

func (i ServerMap) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerMapOutput)
}

type ServerOutput struct{ *pulumi.OutputState }

func (ServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil)).Elem()
}

func (o ServerOutput) ToServerOutput() ServerOutput {
	return o
}

func (o ServerOutput) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return o
}

// [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the server.
//
// ⚠️ **_Warning: `allowReplace` - lets you update immutable fields, but it first destroys and then re-creates the server in order to do it. This field should be used with care, understanding the risks._**
//
// > **⚠ WARNING**
// >
// > Image_name under volume level is deprecated, please use imageName under server level
// sshKeyPath and sshKeys fields are immutable.
//
// > **⚠ WARNING**
// >
// > If you want to create a **CUBE** server, you have to provide the `templateUuid`. In this case you can not set `cores`, `ram` and `volume.size` arguments, these being mutually exclusive with `templateUuid`.
// >
// > In all the other cases (**ENTERPRISE** servers) you have to provide values for `cores`, `ram` and `volume size`.
func (o ServerOutput) AllowReplace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.BoolPtrOutput { return v.AllowReplace }).(pulumi.BoolPtrOutput)
}

// [string] The availability zone in which the server should exist. E.g: `AUTO`, `ZONE_1`, `ZONE_2`. This property is immutable.
func (o ServerOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// ***DEPRECATED*** Please refer to compute.BootDeviceSelection (Optional)(Computed)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the compute.getImage data source.
//
// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
func (o ServerOutput) BootCdrom() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.BootCdrom }).(pulumi.StringOutput)
}

// [string] The image or snapshot UUID / name. May also be an image alias. It is required if `licenceType` is not provided.
func (o ServerOutput) BootImage() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.BootImage }).(pulumi.StringOutput)
}

// The associated boot volume.
func (o ServerOutput) BootVolume() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.BootVolume }).(pulumi.StringOutput)
}

// (Computed)[integer] Number of server CPU cores.
func (o ServerOutput) Cores() pulumi.IntOutput {
	return o.ApplyT(func(v *Server) pulumi.IntOutput { return v.Cores }).(pulumi.IntOutput)
}

// [string] CPU architecture on which server gets provisioned; not all CPU architectures are available in all datacenter regions; available CPU architectures can be retrieved from the datacenter resource. E.g.: "INTEL_SKYLAKE" or "INTEL_XEON".
func (o ServerOutput) CpuFamily() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.CpuFamily }).(pulumi.StringOutput)
}

// [string] The ID of a Virtual Data Center.
func (o ServerOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.DatacenterId }).(pulumi.StringOutput)
}

// The associated firewall rule.
func (o ServerOutput) FirewallruleId() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.FirewallruleId }).(pulumi.StringOutput)
}

// The associated firewall rules.
func (o ServerOutput) FirewallruleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Server) pulumi.StringArrayOutput { return v.FirewallruleIds }).(pulumi.StringArrayOutput)
}

// (Computed)[string] The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
func (o ServerOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licenceType` is not provided. Attribute is immutable.
func (o ServerOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.ImageName }).(pulumi.StringOutput)
}

// [string] Required if `sshKeyPath` is not provided.
func (o ServerOutput) ImagePassword() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.ImagePassword }).(pulumi.StringOutput)
}

// A list with the IDs for the volumes that are defined inside the server resource.
func (o ServerOutput) InlineVolumeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Server) pulumi.StringArrayOutput { return v.InlineVolumeIds }).(pulumi.StringArrayOutput)
}

// [set] A label can be seen as an object with only two required fields: `key` and `value`, both of the `string` type. Please check the example presented above to see how a `label` can be used in the plan. A server can have multiple labels.
func (o ServerOutput) Labels() ServerLabelArrayOutput {
	return o.ApplyT(func(v *Server) ServerLabelArrayOutput { return v.Labels }).(ServerLabelArrayOutput)
}

// [string] The name of the server.
func (o ServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// See the Nic section.
func (o ServerOutput) Nic() ServerNicPtrOutput {
	return o.ApplyT(func(v *Server) ServerNicPtrOutput { return v.Nic }).(ServerNicPtrOutput)
}

// The associated IP address.
func (o ServerOutput) PrimaryIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.PrimaryIp }).(pulumi.StringOutput)
}

// The associated NIC.
func (o ServerOutput) PrimaryNic() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.PrimaryNic }).(pulumi.StringOutput)
}

// (Computed)[integer] The amount of memory for the server in MB.
func (o ServerOutput) Ram() pulumi.IntOutput {
	return o.ApplyT(func(v *Server) pulumi.IntOutput { return v.Ram }).(pulumi.IntOutput)
}

// The list of Security Group IDs for the
func (o ServerOutput) SecurityGroupsIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Server) pulumi.StringArrayOutput { return v.SecurityGroupsIds }).(pulumi.StringArrayOutput)
}

// [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images.  Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `imagePassword` is not provided. Does not support `~` expansion to homedir in the given path. This property is immutable.
//
// Deprecated: Will be renamed to sshKeys in the future, to allow users to set both the ssh key path or directly the ssh key
func (o ServerOutput) SshKeyPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Server) pulumi.StringArrayOutput { return v.SshKeyPaths }).(pulumi.StringArrayOutput)
}

// [list] Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is used for the volume creation. Does not support `~` expansion to homedir in the given path.
func (o ServerOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Server) pulumi.StringArrayOutput { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// [string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
func (o ServerOutput) TemplateUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.TemplateUuid }).(pulumi.StringPtrOutput)
}

// (Computed)[string] Server usages: [ENTERPRISE](https://docs.ionos.com/cloud/compute-engine/virtual-servers/virtual-servers) or [CUBE](https://docs.ionos.com/cloud/compute-engine/virtual-servers/cloud-cubes). This property is immutable.
func (o ServerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// [string] Sets the power state of the server. E.g: `RUNNING`, `SHUTOFF` or `SUSPENDED`. SUSPENDED state is only valid for cube. SHUTOFF state is only valid for enterprise.
func (o ServerOutput) VmState() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.VmState }).(pulumi.StringOutput)
}

// See the Volume section.
func (o ServerOutput) Volume() ServerVolumeOutput {
	return o.ApplyT(func(v *Server) ServerVolumeOutput { return v.Volume }).(ServerVolumeOutput)
}

type ServerArrayOutput struct{ *pulumi.OutputState }

func (ServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Server)(nil)).Elem()
}

func (o ServerArrayOutput) ToServerArrayOutput() ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) Index(i pulumi.IntInput) ServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Server {
		return vs[0].([]*Server)[vs[1].(int)]
	}).(ServerOutput)
}

type ServerMapOutput struct{ *pulumi.OutputState }

func (ServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Server)(nil)).Elem()
}

func (o ServerMapOutput) ToServerMapOutput() ServerMapOutput {
	return o
}

func (o ServerMapOutput) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return o
}

func (o ServerMapOutput) MapIndex(k pulumi.StringInput) ServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Server {
		return vs[0].(map[string]*Server)[vs[1].(string)]
	}).(ServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerInput)(nil)).Elem(), &Server{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerArrayInput)(nil)).Elem(), ServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerMapInput)(nil)).Elem(), ServerMap{})
	pulumi.RegisterOutputType(ServerOutput{})
	pulumi.RegisterOutputType(ServerArrayOutput{})
	pulumi.RegisterOutputType(ServerMapOutput{})
}
