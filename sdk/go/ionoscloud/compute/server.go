// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Server struct {
	pulumi.CustomResourceState

	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// The associated boot drive, if any. Must be the UUID of a bootable CDROM image that you can retrieve using the image data
	// source
	//
	// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
	BootCdrom       pulumi.StringOutput      `pulumi:"bootCdrom"`
	BootImage       pulumi.StringOutput      `pulumi:"bootImage"`
	BootVolume      pulumi.StringOutput      `pulumi:"bootVolume"`
	Cores           pulumi.IntOutput         `pulumi:"cores"`
	CpuFamily       pulumi.StringOutput      `pulumi:"cpuFamily"`
	DatacenterId    pulumi.StringOutput      `pulumi:"datacenterId"`
	FirewallruleId  pulumi.StringOutput      `pulumi:"firewallruleId"`
	FirewallruleIds pulumi.StringArrayOutput `pulumi:"firewallruleIds"`
	ImageName       pulumi.StringOutput      `pulumi:"imageName"`
	ImagePassword   pulumi.StringOutput      `pulumi:"imagePassword"`
	// A list that contains the IDs for the volumes defined inside the server resource.
	InlineVolumeIds pulumi.StringArrayOutput `pulumi:"inlineVolumeIds"`
	Labels          ServerLabelArrayOutput   `pulumi:"labels"`
	Name            pulumi.StringOutput      `pulumi:"name"`
	Nic             ServerNicPtrOutput       `pulumi:"nic"`
	PrimaryIp       pulumi.StringOutput      `pulumi:"primaryIp"`
	// Id of the primary network interface
	PrimaryNic pulumi.StringOutput `pulumi:"primaryNic"`
	Ram        pulumi.IntOutput    `pulumi:"ram"`
	// Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud
	// provided Linux images. Does not support `~` expansion to homedir in the given path. Public SSH keys are set on the image
	// as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be
	// set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is
	// used for the volume creation. This property is immutable.
	//
	// Deprecated: Will be renamed to sshKeys in the future, to allow users to set both the ssh key path or directly the ssh key
	SshKeyPaths pulumi.StringArrayOutput `pulumi:"sshKeyPaths"`
	// Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the
	// corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH
	// keys are only supported if a public Linux image is used for the volume creation.
	SshKeys      pulumi.StringArrayOutput `pulumi:"sshKeys"`
	TemplateUuid pulumi.StringPtrOutput   `pulumi:"templateUuid"`
	// server usages: ENTERPRISE or CUBE
	Type pulumi.StringOutput `pulumi:"type"`
	// Sets the power state of the server. Possible values: `RUNNING`, `SHUTOFF` or `SUSPENDED`. SUSPENDED state is only valid
	// for cube. SHUTOFF state is only valid for enterprise
	VmState pulumi.StringOutput `pulumi:"vmState"`
	Volume  ServerVolumeOutput  `pulumi:"volume"`
}

// NewServer registers a new resource with the given unique name, arguments, and options.
func NewServer(ctx *pulumi.Context,
	name string, args *ServerArgs, opts ...pulumi.ResourceOption) (*Server, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatacenterId == nil {
		return nil, errors.New("invalid value for required argument 'DatacenterId'")
	}
	if args.Volume == nil {
		return nil, errors.New("invalid value for required argument 'Volume'")
	}
	if args.ImagePassword != nil {
		args.ImagePassword = pulumi.ToSecret(args.ImagePassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"imagePassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Server
	err := ctx.RegisterResource("ionoscloud:compute/server:Server", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServer gets an existing Server resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerState, opts ...pulumi.ResourceOption) (*Server, error) {
	var resource Server
	err := ctx.ReadResource("ionoscloud:compute/server:Server", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Server resources.
type serverState struct {
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The associated boot drive, if any. Must be the UUID of a bootable CDROM image that you can retrieve using the image data
	// source
	//
	// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
	BootCdrom       *string  `pulumi:"bootCdrom"`
	BootImage       *string  `pulumi:"bootImage"`
	BootVolume      *string  `pulumi:"bootVolume"`
	Cores           *int     `pulumi:"cores"`
	CpuFamily       *string  `pulumi:"cpuFamily"`
	DatacenterId    *string  `pulumi:"datacenterId"`
	FirewallruleId  *string  `pulumi:"firewallruleId"`
	FirewallruleIds []string `pulumi:"firewallruleIds"`
	ImageName       *string  `pulumi:"imageName"`
	ImagePassword   *string  `pulumi:"imagePassword"`
	// A list that contains the IDs for the volumes defined inside the server resource.
	InlineVolumeIds []string      `pulumi:"inlineVolumeIds"`
	Labels          []ServerLabel `pulumi:"labels"`
	Name            *string       `pulumi:"name"`
	Nic             *ServerNic    `pulumi:"nic"`
	PrimaryIp       *string       `pulumi:"primaryIp"`
	// Id of the primary network interface
	PrimaryNic *string `pulumi:"primaryNic"`
	Ram        *int    `pulumi:"ram"`
	// Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud
	// provided Linux images. Does not support `~` expansion to homedir in the given path. Public SSH keys are set on the image
	// as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be
	// set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is
	// used for the volume creation. This property is immutable.
	//
	// Deprecated: Will be renamed to sshKeys in the future, to allow users to set both the ssh key path or directly the ssh key
	SshKeyPaths []string `pulumi:"sshKeyPaths"`
	// Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the
	// corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH
	// keys are only supported if a public Linux image is used for the volume creation.
	SshKeys      []string `pulumi:"sshKeys"`
	TemplateUuid *string  `pulumi:"templateUuid"`
	// server usages: ENTERPRISE or CUBE
	Type *string `pulumi:"type"`
	// Sets the power state of the server. Possible values: `RUNNING`, `SHUTOFF` or `SUSPENDED`. SUSPENDED state is only valid
	// for cube. SHUTOFF state is only valid for enterprise
	VmState *string       `pulumi:"vmState"`
	Volume  *ServerVolume `pulumi:"volume"`
}

type ServerState struct {
	AvailabilityZone pulumi.StringPtrInput
	// The associated boot drive, if any. Must be the UUID of a bootable CDROM image that you can retrieve using the image data
	// source
	//
	// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
	BootCdrom       pulumi.StringPtrInput
	BootImage       pulumi.StringPtrInput
	BootVolume      pulumi.StringPtrInput
	Cores           pulumi.IntPtrInput
	CpuFamily       pulumi.StringPtrInput
	DatacenterId    pulumi.StringPtrInput
	FirewallruleId  pulumi.StringPtrInput
	FirewallruleIds pulumi.StringArrayInput
	ImageName       pulumi.StringPtrInput
	ImagePassword   pulumi.StringPtrInput
	// A list that contains the IDs for the volumes defined inside the server resource.
	InlineVolumeIds pulumi.StringArrayInput
	Labels          ServerLabelArrayInput
	Name            pulumi.StringPtrInput
	Nic             ServerNicPtrInput
	PrimaryIp       pulumi.StringPtrInput
	// Id of the primary network interface
	PrimaryNic pulumi.StringPtrInput
	Ram        pulumi.IntPtrInput
	// Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud
	// provided Linux images. Does not support `~` expansion to homedir in the given path. Public SSH keys are set on the image
	// as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be
	// set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is
	// used for the volume creation. This property is immutable.
	//
	// Deprecated: Will be renamed to sshKeys in the future, to allow users to set both the ssh key path or directly the ssh key
	SshKeyPaths pulumi.StringArrayInput
	// Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the
	// corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH
	// keys are only supported if a public Linux image is used for the volume creation.
	SshKeys      pulumi.StringArrayInput
	TemplateUuid pulumi.StringPtrInput
	// server usages: ENTERPRISE or CUBE
	Type pulumi.StringPtrInput
	// Sets the power state of the server. Possible values: `RUNNING`, `SHUTOFF` or `SUSPENDED`. SUSPENDED state is only valid
	// for cube. SHUTOFF state is only valid for enterprise
	VmState pulumi.StringPtrInput
	Volume  ServerVolumePtrInput
}

func (ServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverState)(nil)).Elem()
}

type serverArgs struct {
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The associated boot drive, if any. Must be the UUID of a bootable CDROM image that you can retrieve using the image data
	// source
	//
	// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
	BootCdrom       *string       `pulumi:"bootCdrom"`
	BootImage       *string       `pulumi:"bootImage"`
	Cores           *int          `pulumi:"cores"`
	CpuFamily       *string       `pulumi:"cpuFamily"`
	DatacenterId    string        `pulumi:"datacenterId"`
	FirewallruleIds []string      `pulumi:"firewallruleIds"`
	ImageName       *string       `pulumi:"imageName"`
	ImagePassword   *string       `pulumi:"imagePassword"`
	Labels          []ServerLabel `pulumi:"labels"`
	Name            *string       `pulumi:"name"`
	Nic             *ServerNic    `pulumi:"nic"`
	Ram             *int          `pulumi:"ram"`
	// Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud
	// provided Linux images. Does not support `~` expansion to homedir in the given path. Public SSH keys are set on the image
	// as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be
	// set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is
	// used for the volume creation. This property is immutable.
	//
	// Deprecated: Will be renamed to sshKeys in the future, to allow users to set both the ssh key path or directly the ssh key
	SshKeyPaths []string `pulumi:"sshKeyPaths"`
	// Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the
	// corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH
	// keys are only supported if a public Linux image is used for the volume creation.
	SshKeys      []string `pulumi:"sshKeys"`
	TemplateUuid *string  `pulumi:"templateUuid"`
	// server usages: ENTERPRISE or CUBE
	Type *string `pulumi:"type"`
	// Sets the power state of the server. Possible values: `RUNNING`, `SHUTOFF` or `SUSPENDED`. SUSPENDED state is only valid
	// for cube. SHUTOFF state is only valid for enterprise
	VmState *string      `pulumi:"vmState"`
	Volume  ServerVolume `pulumi:"volume"`
}

// The set of arguments for constructing a Server resource.
type ServerArgs struct {
	AvailabilityZone pulumi.StringPtrInput
	// The associated boot drive, if any. Must be the UUID of a bootable CDROM image that you can retrieve using the image data
	// source
	//
	// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
	BootCdrom       pulumi.StringPtrInput
	BootImage       pulumi.StringPtrInput
	Cores           pulumi.IntPtrInput
	CpuFamily       pulumi.StringPtrInput
	DatacenterId    pulumi.StringInput
	FirewallruleIds pulumi.StringArrayInput
	ImageName       pulumi.StringPtrInput
	ImagePassword   pulumi.StringPtrInput
	Labels          ServerLabelArrayInput
	Name            pulumi.StringPtrInput
	Nic             ServerNicPtrInput
	Ram             pulumi.IntPtrInput
	// Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud
	// provided Linux images. Does not support `~` expansion to homedir in the given path. Public SSH keys are set on the image
	// as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be
	// set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is
	// used for the volume creation. This property is immutable.
	//
	// Deprecated: Will be renamed to sshKeys in the future, to allow users to set both the ssh key path or directly the ssh key
	SshKeyPaths pulumi.StringArrayInput
	// Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the
	// corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH
	// keys are only supported if a public Linux image is used for the volume creation.
	SshKeys      pulumi.StringArrayInput
	TemplateUuid pulumi.StringPtrInput
	// server usages: ENTERPRISE or CUBE
	Type pulumi.StringPtrInput
	// Sets the power state of the server. Possible values: `RUNNING`, `SHUTOFF` or `SUSPENDED`. SUSPENDED state is only valid
	// for cube. SHUTOFF state is only valid for enterprise
	VmState pulumi.StringPtrInput
	Volume  ServerVolumeInput
}

func (ServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverArgs)(nil)).Elem()
}

type ServerInput interface {
	pulumi.Input

	ToServerOutput() ServerOutput
	ToServerOutputWithContext(ctx context.Context) ServerOutput
}

func (*Server) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil)).Elem()
}

func (i *Server) ToServerOutput() ServerOutput {
	return i.ToServerOutputWithContext(context.Background())
}

func (i *Server) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerOutput)
}

// ServerArrayInput is an input type that accepts ServerArray and ServerArrayOutput values.
// You can construct a concrete instance of `ServerArrayInput` via:
//
//	ServerArray{ ServerArgs{...} }
type ServerArrayInput interface {
	pulumi.Input

	ToServerArrayOutput() ServerArrayOutput
	ToServerArrayOutputWithContext(context.Context) ServerArrayOutput
}

type ServerArray []ServerInput

func (ServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Server)(nil)).Elem()
}

func (i ServerArray) ToServerArrayOutput() ServerArrayOutput {
	return i.ToServerArrayOutputWithContext(context.Background())
}

func (i ServerArray) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerArrayOutput)
}

// ServerMapInput is an input type that accepts ServerMap and ServerMapOutput values.
// You can construct a concrete instance of `ServerMapInput` via:
//
//	ServerMap{ "key": ServerArgs{...} }
type ServerMapInput interface {
	pulumi.Input

	ToServerMapOutput() ServerMapOutput
	ToServerMapOutputWithContext(context.Context) ServerMapOutput
}

type ServerMap map[string]ServerInput

func (ServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Server)(nil)).Elem()
}

func (i ServerMap) ToServerMapOutput() ServerMapOutput {
	return i.ToServerMapOutputWithContext(context.Background())
}

func (i ServerMap) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerMapOutput)
}

type ServerOutput struct{ *pulumi.OutputState }

func (ServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil)).Elem()
}

func (o ServerOutput) ToServerOutput() ServerOutput {
	return o
}

func (o ServerOutput) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return o
}

func (o ServerOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// The associated boot drive, if any. Must be the UUID of a bootable CDROM image that you can retrieve using the image data
// source
//
// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
func (o ServerOutput) BootCdrom() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.BootCdrom }).(pulumi.StringOutput)
}

func (o ServerOutput) BootImage() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.BootImage }).(pulumi.StringOutput)
}

func (o ServerOutput) BootVolume() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.BootVolume }).(pulumi.StringOutput)
}

func (o ServerOutput) Cores() pulumi.IntOutput {
	return o.ApplyT(func(v *Server) pulumi.IntOutput { return v.Cores }).(pulumi.IntOutput)
}

func (o ServerOutput) CpuFamily() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.CpuFamily }).(pulumi.StringOutput)
}

func (o ServerOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.DatacenterId }).(pulumi.StringOutput)
}

func (o ServerOutput) FirewallruleId() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.FirewallruleId }).(pulumi.StringOutput)
}

func (o ServerOutput) FirewallruleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Server) pulumi.StringArrayOutput { return v.FirewallruleIds }).(pulumi.StringArrayOutput)
}

func (o ServerOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.ImageName }).(pulumi.StringOutput)
}

func (o ServerOutput) ImagePassword() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.ImagePassword }).(pulumi.StringOutput)
}

// A list that contains the IDs for the volumes defined inside the server resource.
func (o ServerOutput) InlineVolumeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Server) pulumi.StringArrayOutput { return v.InlineVolumeIds }).(pulumi.StringArrayOutput)
}

func (o ServerOutput) Labels() ServerLabelArrayOutput {
	return o.ApplyT(func(v *Server) ServerLabelArrayOutput { return v.Labels }).(ServerLabelArrayOutput)
}

func (o ServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ServerOutput) Nic() ServerNicPtrOutput {
	return o.ApplyT(func(v *Server) ServerNicPtrOutput { return v.Nic }).(ServerNicPtrOutput)
}

func (o ServerOutput) PrimaryIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.PrimaryIp }).(pulumi.StringOutput)
}

// Id of the primary network interface
func (o ServerOutput) PrimaryNic() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.PrimaryNic }).(pulumi.StringOutput)
}

func (o ServerOutput) Ram() pulumi.IntOutput {
	return o.ApplyT(func(v *Server) pulumi.IntOutput { return v.Ram }).(pulumi.IntOutput)
}

// Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud
// provided Linux images. Does not support `~` expansion to homedir in the given path. Public SSH keys are set on the image
// as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be
// set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is
// used for the volume creation. This property is immutable.
//
// Deprecated: Will be renamed to sshKeys in the future, to allow users to set both the ssh key path or directly the ssh key
func (o ServerOutput) SshKeyPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Server) pulumi.StringArrayOutput { return v.SshKeyPaths }).(pulumi.StringArrayOutput)
}

// Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the
// corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH
// keys are only supported if a public Linux image is used for the volume creation.
func (o ServerOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Server) pulumi.StringArrayOutput { return v.SshKeys }).(pulumi.StringArrayOutput)
}

func (o ServerOutput) TemplateUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.TemplateUuid }).(pulumi.StringPtrOutput)
}

// server usages: ENTERPRISE or CUBE
func (o ServerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Sets the power state of the server. Possible values: `RUNNING`, `SHUTOFF` or `SUSPENDED`. SUSPENDED state is only valid
// for cube. SHUTOFF state is only valid for enterprise
func (o ServerOutput) VmState() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.VmState }).(pulumi.StringOutput)
}

func (o ServerOutput) Volume() ServerVolumeOutput {
	return o.ApplyT(func(v *Server) ServerVolumeOutput { return v.Volume }).(ServerVolumeOutput)
}

type ServerArrayOutput struct{ *pulumi.OutputState }

func (ServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Server)(nil)).Elem()
}

func (o ServerArrayOutput) ToServerArrayOutput() ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) Index(i pulumi.IntInput) ServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Server {
		return vs[0].([]*Server)[vs[1].(int)]
	}).(ServerOutput)
}

type ServerMapOutput struct{ *pulumi.OutputState }

func (ServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Server)(nil)).Elem()
}

func (o ServerMapOutput) ToServerMapOutput() ServerMapOutput {
	return o
}

func (o ServerMapOutput) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return o
}

func (o ServerMapOutput) MapIndex(k pulumi.StringInput) ServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Server {
		return vs[0].(map[string]*Server)[vs[1].(string)]
	}).(ServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerInput)(nil)).Elem(), &Server{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerArrayInput)(nil)).Elem(), ServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerMapInput)(nil)).Elem(), ServerMap{})
	pulumi.RegisterOutputType(ServerOutput{})
	pulumi.RegisterOutputType(ServerArrayOutput{})
	pulumi.RegisterOutputType(ServerMapOutput{})
}
