// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupUser(ctx *pulumi.Context, args *LookupUserArgs, opts ...pulumi.InvokeOption) (*LookupUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserResult
	err := ctx.Invoke("ionoscloud:compute/getUser:getUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUser.
type LookupUserArgs struct {
	Email *string `pulumi:"email"`
	Id    *string `pulumi:"id"`
}

// A collection of values returned by getUser.
type LookupUserResult struct {
	Active            bool           `pulumi:"active"`
	Administrator     bool           `pulumi:"administrator"`
	Email             *string        `pulumi:"email"`
	FirstName         string         `pulumi:"firstName"`
	ForceSecAuth      bool           `pulumi:"forceSecAuth"`
	Groups            []GetUserGroup `pulumi:"groups"`
	Id                *string        `pulumi:"id"`
	LastName          string         `pulumi:"lastName"`
	S3CanonicalUserId string         `pulumi:"s3CanonicalUserId"`
	SecAuthActive     bool           `pulumi:"secAuthActive"`
}

func LookupUserOutput(ctx *pulumi.Context, args LookupUserOutputArgs, opts ...pulumi.InvokeOption) LookupUserResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupUserResultOutput, error) {
			args := v.(LookupUserArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ionoscloud:compute/getUser:getUser", args, LookupUserResultOutput{}, options).(LookupUserResultOutput), nil
		}).(LookupUserResultOutput)
}

// A collection of arguments for invoking getUser.
type LookupUserOutputArgs struct {
	Email pulumi.StringPtrInput `pulumi:"email"`
	Id    pulumi.StringPtrInput `pulumi:"id"`
}

func (LookupUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserArgs)(nil)).Elem()
}

// A collection of values returned by getUser.
type LookupUserResultOutput struct{ *pulumi.OutputState }

func (LookupUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserResult)(nil)).Elem()
}

func (o LookupUserResultOutput) ToLookupUserResultOutput() LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) ToLookupUserResultOutputWithContext(ctx context.Context) LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupUserResult) bool { return v.Active }).(pulumi.BoolOutput)
}

func (o LookupUserResultOutput) Administrator() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupUserResult) bool { return v.Administrator }).(pulumi.BoolOutput)
}

func (o LookupUserResultOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserResult) *string { return v.Email }).(pulumi.StringPtrOutput)
}

func (o LookupUserResultOutput) FirstName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.FirstName }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) ForceSecAuth() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupUserResult) bool { return v.ForceSecAuth }).(pulumi.BoolOutput)
}

func (o LookupUserResultOutput) Groups() GetUserGroupArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []GetUserGroup { return v.Groups }).(GetUserGroupArrayOutput)
}

func (o LookupUserResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupUserResultOutput) LastName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.LastName }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) S3CanonicalUserId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.S3CanonicalUserId }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) SecAuthActive() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupUserResult) bool { return v.SecAuthActive }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserResultOutput{})
}
