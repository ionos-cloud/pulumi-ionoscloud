// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a **Volume** on IonosCloud.
//
// ## Example Usage
//
// A primary volume will be created with the server. If there is a need for additional volumes, this resource handles it.
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleImage, err := ionoscloud.GetImage(ctx, &ionoscloud.GetImageArgs{
//				Type:       pulumi.StringRef("HDD"),
//				CloudInit:  pulumi.StringRef("V1"),
//				ImageAlias: pulumi.StringRef("ubuntu:latest"),
//				Location:   pulumi.StringRef("us/las"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleDatacenter, err := compute.NewDatacenter(ctx, "exampleDatacenter", &compute.DatacenterArgs{
//				Location:          pulumi.String("us/las"),
//				Description:       pulumi.String("Datacenter Description"),
//				SecAuthProtection: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			exampleLan, err := compute.NewLan(ctx, "exampleLan", &compute.LanArgs{
//				DatacenterId: exampleDatacenter.ID(),
//				Public:       pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			exampleIPBlock, err := compute.NewIPBlock(ctx, "exampleIPBlock", &compute.IPBlockArgs{
//				Location: exampleDatacenter.Location,
//				Size:     pulumi.Int(4),
//			})
//			if err != nil {
//				return err
//			}
//			serverImagePassword, err := random.NewRandomPassword(ctx, "serverImagePassword", &random.RandomPasswordArgs{
//				Length:  pulumi.Int(16),
//				Special: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			exampleServer, err := compute.NewServer(ctx, "exampleServer", &compute.ServerArgs{
//				DatacenterId:     exampleDatacenter.ID(),
//				Cores:            pulumi.Int(1),
//				Ram:              pulumi.Int(1024),
//				AvailabilityZone: pulumi.String("ZONE_1"),
//				CpuFamily:        pulumi.String("INTEL_XEON"),
//				ImageName:        pulumi.String(exampleImage.Name),
//				ImagePassword:    serverImagePassword.Result,
//				Type:             pulumi.String("ENTERPRISE"),
//				Volume: &compute.ServerVolumeArgs{
//					Name:             pulumi.String("system"),
//					Size:             pulumi.Int(5),
//					DiskType:         pulumi.String("SSD Standard"),
//					UserData:         pulumi.String("foo"),
//					Bus:              pulumi.String("VIRTIO"),
//					AvailabilityZone: pulumi.String("ZONE_1"),
//				},
//				Nic: &compute.ServerNicArgs{
//					Lan:            exampleLan.ID(),
//					Name:           pulumi.String("system"),
//					Dhcp:           pulumi.Bool(true),
//					FirewallActive: pulumi.Bool(true),
//					FirewallType:   pulumi.String("BIDIRECTIONAL"),
//					Ips: pulumi.StringArray{
//						exampleIPBlock.Ips.ApplyT(func(ips []string) (string, error) {
//							return ips[0], nil
//						}).(pulumi.StringOutput),
//						exampleIPBlock.Ips.ApplyT(func(ips []string) (string, error) {
//							return ips[1], nil
//						}).(pulumi.StringOutput),
//					},
//					Firewalls: compute.ServerNicFirewallArray{
//						&compute.ServerNicFirewallArgs{
//							Protocol:       pulumi.String("TCP"),
//							Name:           pulumi.String("SSH"),
//							PortRangeStart: pulumi.Int(22),
//							PortRangeEnd:   pulumi.Int(22),
//							SourceMac:      pulumi.String("00:0a:95:9d:68:17"),
//							SourceIp: exampleIPBlock.Ips.ApplyT(func(ips []string) (string, error) {
//								return ips[2], nil
//							}).(pulumi.StringOutput),
//							TargetIp: exampleIPBlock.Ips.ApplyT(func(ips []string) (string, error) {
//								return ips[3], nil
//							}).(pulumi.StringOutput),
//							Type: pulumi.String("EGRESS"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			volumeImagePassword, err := random.NewRandomPassword(ctx, "volumeImagePassword", &random.RandomPasswordArgs{
//				Length:  pulumi.Int(16),
//				Special: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewVolume(ctx, "exampleVolume", &compute.VolumeArgs{
//				DatacenterId:     exampleDatacenter.ID(),
//				ServerId:         exampleServer.ID(),
//				AvailabilityZone: pulumi.String("ZONE_1"),
//				Size:             pulumi.Int(5),
//				DiskType:         pulumi.String("SSD Standard"),
//				Bus:              pulumi.String("VIRTIO"),
//				ImageName:        pulumi.String(exampleImage.Name),
//				ImagePassword:    volumeImagePassword.Result,
//				UserData:         pulumi.String("foo"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewVolume(ctx, "exampleCompute/volumeVolume", &compute.VolumeArgs{
//				DatacenterId:     exampleDatacenter.ID(),
//				ServerId:         exampleServer.ID(),
//				AvailabilityZone: pulumi.String("ZONE_1"),
//				Size:             pulumi.Int(5),
//				DiskType:         pulumi.String("SSD Standard"),
//				Bus:              pulumi.String("VIRTIO"),
//				LicenceType:      pulumi.String("OTHER"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Resource Volume can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import ionoscloud:compute/volume:Volume myvolume {datacenter uuid}/{server uuid}/{volume uuid}
// ```
type Volume struct {
	pulumi.CustomResourceState

	// [string] The storage availability zone assigned to the volume: AUTO, ZONE_1, ZONE_2, or ZONE_3. This property is immutable
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// [string] The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
	BackupUnitId pulumi.StringOutput `pulumi:"backupUnitId"`
	// [string] The UUID of the attached server.
	// > **âš  WARNING**
	// >
	// > sshKeyPath and sshKeys fields are immutable.
	// If you want to create a **CUBE** server, the type of the inline volume must be set to **DAS**. In this case, you can not set the `size` argument since it is taken from the `templateUuid` you set in the server.
	BootServer pulumi.StringOutput `pulumi:"bootServer"`
	// [Boolean] The bus type of the volume: VIRTIO or IDE.
	Bus pulumi.StringOutput `pulumi:"bus"`
	// [string] Is capable of CPU hot plug (no reboot required)
	CpuHotPlug pulumi.BoolOutput `pulumi:"cpuHotPlug"`
	// [string] The ID of a Virtual Data Center.
	DatacenterId pulumi.StringOutput `pulumi:"datacenterId"`
	// The Logical Unit Number of the storage volume. Null for volumes not mounted to any VM.
	DeviceNumber pulumi.IntOutput `pulumi:"deviceNumber"`
	// [string] Is capable of Virt-IO drive hot plug (no reboot required)
	DiscVirtioHotPlug pulumi.BoolOutput `pulumi:"discVirtioHotPlug"`
	// [string] Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.
	DiscVirtioHotUnplug pulumi.BoolOutput `pulumi:"discVirtioHotUnplug"`
	// [string] The volume type: HDD or SSD. This property is immutable.
	DiskType pulumi.StringOutput `pulumi:"diskType"`
	// The image or snapshot UUID.
	Image   pulumi.StringOutput `pulumi:"image"`
	ImageId pulumi.StringOutput `pulumi:"imageId"`
	// [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licenceType` is not provided. Attribute is immutable.
	ImageName pulumi.StringPtrOutput `pulumi:"imageName"`
	// [string] Required if `sshkeyPath` is not provided.
	ImagePassword pulumi.StringPtrOutput `pulumi:"imagePassword"`
	// [string] Required if `imageName` is not provided.
	LicenceType pulumi.StringOutput `pulumi:"licenceType"`
	// [string] The name of the volume.
	Name pulumi.StringOutput `pulumi:"name"`
	// [string] Is capable of nic hot plug (no reboot required)
	NicHotPlug pulumi.BoolOutput `pulumi:"nicHotPlug"`
	// [string] Is capable of nic hot unplug (no reboot required)
	NicHotUnplug pulumi.BoolOutput `pulumi:"nicHotUnplug"`
	// The PCI slot number of the storage volume. Null for volumes not mounted to any VM.
	PciSlot pulumi.IntOutput `pulumi:"pciSlot"`
	// [string] Is capable of memory hot plug (no reboot required)
	RamHotPlug pulumi.BoolOutput `pulumi:"ramHotPlug"`
	// [string] The ID of a server.
	ServerId pulumi.StringOutput `pulumi:"serverId"`
	// [integer] The size of the volume in GB.
	Size pulumi.IntOutput `pulumi:"size"`
	// [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `imagePassword` is not provided. This property is immutable.
	SshKeyPaths pulumi.StringArrayOutput `pulumi:"sshKeyPaths"`
	// [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `imagePassword` is not provided. This property is immutable.
	SshKeys pulumi.StringArrayOutput `pulumi:"sshKeys"`
	// The associated public SSH key.
	Sshkey pulumi.StringOutput `pulumi:"sshkey"`
	// [string] The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. This option will work only with cloud-init compatible images.
	UserData pulumi.StringOutput `pulumi:"userData"`
}

// NewVolume registers a new resource with the given unique name, arguments, and options.
func NewVolume(ctx *pulumi.Context,
	name string, args *VolumeArgs, opts ...pulumi.ResourceOption) (*Volume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatacenterId == nil {
		return nil, errors.New("invalid value for required argument 'DatacenterId'")
	}
	if args.DiskType == nil {
		return nil, errors.New("invalid value for required argument 'DiskType'")
	}
	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("ionoscloud:index/volume:Volume"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Volume
	err := ctx.RegisterResource("ionoscloud:compute/volume:Volume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolume gets an existing Volume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeState, opts ...pulumi.ResourceOption) (*Volume, error) {
	var resource Volume
	err := ctx.ReadResource("ionoscloud:compute/volume:Volume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Volume resources.
type volumeState struct {
	// [string] The storage availability zone assigned to the volume: AUTO, ZONE_1, ZONE_2, or ZONE_3. This property is immutable
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// [string] The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
	BackupUnitId *string `pulumi:"backupUnitId"`
	// [string] The UUID of the attached server.
	// > **âš  WARNING**
	// >
	// > sshKeyPath and sshKeys fields are immutable.
	// If you want to create a **CUBE** server, the type of the inline volume must be set to **DAS**. In this case, you can not set the `size` argument since it is taken from the `templateUuid` you set in the server.
	BootServer *string `pulumi:"bootServer"`
	// [Boolean] The bus type of the volume: VIRTIO or IDE.
	Bus *string `pulumi:"bus"`
	// [string] Is capable of CPU hot plug (no reboot required)
	CpuHotPlug *bool `pulumi:"cpuHotPlug"`
	// [string] The ID of a Virtual Data Center.
	DatacenterId *string `pulumi:"datacenterId"`
	// The Logical Unit Number of the storage volume. Null for volumes not mounted to any VM.
	DeviceNumber *int `pulumi:"deviceNumber"`
	// [string] Is capable of Virt-IO drive hot plug (no reboot required)
	DiscVirtioHotPlug *bool `pulumi:"discVirtioHotPlug"`
	// [string] Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.
	DiscVirtioHotUnplug *bool `pulumi:"discVirtioHotUnplug"`
	// [string] The volume type: HDD or SSD. This property is immutable.
	DiskType *string `pulumi:"diskType"`
	// The image or snapshot UUID.
	Image   *string `pulumi:"image"`
	ImageId *string `pulumi:"imageId"`
	// [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licenceType` is not provided. Attribute is immutable.
	ImageName *string `pulumi:"imageName"`
	// [string] Required if `sshkeyPath` is not provided.
	ImagePassword *string `pulumi:"imagePassword"`
	// [string] Required if `imageName` is not provided.
	LicenceType *string `pulumi:"licenceType"`
	// [string] The name of the volume.
	Name *string `pulumi:"name"`
	// [string] Is capable of nic hot plug (no reboot required)
	NicHotPlug *bool `pulumi:"nicHotPlug"`
	// [string] Is capable of nic hot unplug (no reboot required)
	NicHotUnplug *bool `pulumi:"nicHotUnplug"`
	// The PCI slot number of the storage volume. Null for volumes not mounted to any VM.
	PciSlot *int `pulumi:"pciSlot"`
	// [string] Is capable of memory hot plug (no reboot required)
	RamHotPlug *bool `pulumi:"ramHotPlug"`
	// [string] The ID of a server.
	ServerId *string `pulumi:"serverId"`
	// [integer] The size of the volume in GB.
	Size *int `pulumi:"size"`
	// [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `imagePassword` is not provided. This property is immutable.
	SshKeyPaths []string `pulumi:"sshKeyPaths"`
	// [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `imagePassword` is not provided. This property is immutable.
	SshKeys []string `pulumi:"sshKeys"`
	// The associated public SSH key.
	Sshkey *string `pulumi:"sshkey"`
	// [string] The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. This option will work only with cloud-init compatible images.
	UserData *string `pulumi:"userData"`
}

type VolumeState struct {
	// [string] The storage availability zone assigned to the volume: AUTO, ZONE_1, ZONE_2, or ZONE_3. This property is immutable
	AvailabilityZone pulumi.StringPtrInput
	// [string] The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
	BackupUnitId pulumi.StringPtrInput
	// [string] The UUID of the attached server.
	// > **âš  WARNING**
	// >
	// > sshKeyPath and sshKeys fields are immutable.
	// If you want to create a **CUBE** server, the type of the inline volume must be set to **DAS**. In this case, you can not set the `size` argument since it is taken from the `templateUuid` you set in the server.
	BootServer pulumi.StringPtrInput
	// [Boolean] The bus type of the volume: VIRTIO or IDE.
	Bus pulumi.StringPtrInput
	// [string] Is capable of CPU hot plug (no reboot required)
	CpuHotPlug pulumi.BoolPtrInput
	// [string] The ID of a Virtual Data Center.
	DatacenterId pulumi.StringPtrInput
	// The Logical Unit Number of the storage volume. Null for volumes not mounted to any VM.
	DeviceNumber pulumi.IntPtrInput
	// [string] Is capable of Virt-IO drive hot plug (no reboot required)
	DiscVirtioHotPlug pulumi.BoolPtrInput
	// [string] Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.
	DiscVirtioHotUnplug pulumi.BoolPtrInput
	// [string] The volume type: HDD or SSD. This property is immutable.
	DiskType pulumi.StringPtrInput
	// The image or snapshot UUID.
	Image   pulumi.StringPtrInput
	ImageId pulumi.StringPtrInput
	// [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licenceType` is not provided. Attribute is immutable.
	ImageName pulumi.StringPtrInput
	// [string] Required if `sshkeyPath` is not provided.
	ImagePassword pulumi.StringPtrInput
	// [string] Required if `imageName` is not provided.
	LicenceType pulumi.StringPtrInput
	// [string] The name of the volume.
	Name pulumi.StringPtrInput
	// [string] Is capable of nic hot plug (no reboot required)
	NicHotPlug pulumi.BoolPtrInput
	// [string] Is capable of nic hot unplug (no reboot required)
	NicHotUnplug pulumi.BoolPtrInput
	// The PCI slot number of the storage volume. Null for volumes not mounted to any VM.
	PciSlot pulumi.IntPtrInput
	// [string] Is capable of memory hot plug (no reboot required)
	RamHotPlug pulumi.BoolPtrInput
	// [string] The ID of a server.
	ServerId pulumi.StringPtrInput
	// [integer] The size of the volume in GB.
	Size pulumi.IntPtrInput
	// [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `imagePassword` is not provided. This property is immutable.
	SshKeyPaths pulumi.StringArrayInput
	// [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `imagePassword` is not provided. This property is immutable.
	SshKeys pulumi.StringArrayInput
	// The associated public SSH key.
	Sshkey pulumi.StringPtrInput
	// [string] The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. This option will work only with cloud-init compatible images.
	UserData pulumi.StringPtrInput
}

func (VolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeState)(nil)).Elem()
}

type volumeArgs struct {
	// [string] The storage availability zone assigned to the volume: AUTO, ZONE_1, ZONE_2, or ZONE_3. This property is immutable
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// [string] The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
	BackupUnitId *string `pulumi:"backupUnitId"`
	// [Boolean] The bus type of the volume: VIRTIO or IDE.
	Bus *string `pulumi:"bus"`
	// [string] The ID of a Virtual Data Center.
	DatacenterId string `pulumi:"datacenterId"`
	// [string] The volume type: HDD or SSD. This property is immutable.
	DiskType string `pulumi:"diskType"`
	// [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licenceType` is not provided. Attribute is immutable.
	ImageName *string `pulumi:"imageName"`
	// [string] Required if `sshkeyPath` is not provided.
	ImagePassword *string `pulumi:"imagePassword"`
	// [string] Required if `imageName` is not provided.
	LicenceType *string `pulumi:"licenceType"`
	// [string] The name of the volume.
	Name *string `pulumi:"name"`
	// [string] The ID of a server.
	ServerId string `pulumi:"serverId"`
	// [integer] The size of the volume in GB.
	Size int `pulumi:"size"`
	// [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `imagePassword` is not provided. This property is immutable.
	SshKeyPaths []string `pulumi:"sshKeyPaths"`
	// [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `imagePassword` is not provided. This property is immutable.
	SshKeys []string `pulumi:"sshKeys"`
	// [string] The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. This option will work only with cloud-init compatible images.
	UserData *string `pulumi:"userData"`
}

// The set of arguments for constructing a Volume resource.
type VolumeArgs struct {
	// [string] The storage availability zone assigned to the volume: AUTO, ZONE_1, ZONE_2, or ZONE_3. This property is immutable
	AvailabilityZone pulumi.StringPtrInput
	// [string] The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
	BackupUnitId pulumi.StringPtrInput
	// [Boolean] The bus type of the volume: VIRTIO or IDE.
	Bus pulumi.StringPtrInput
	// [string] The ID of a Virtual Data Center.
	DatacenterId pulumi.StringInput
	// [string] The volume type: HDD or SSD. This property is immutable.
	DiskType pulumi.StringInput
	// [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licenceType` is not provided. Attribute is immutable.
	ImageName pulumi.StringPtrInput
	// [string] Required if `sshkeyPath` is not provided.
	ImagePassword pulumi.StringPtrInput
	// [string] Required if `imageName` is not provided.
	LicenceType pulumi.StringPtrInput
	// [string] The name of the volume.
	Name pulumi.StringPtrInput
	// [string] The ID of a server.
	ServerId pulumi.StringInput
	// [integer] The size of the volume in GB.
	Size pulumi.IntInput
	// [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `imagePassword` is not provided. This property is immutable.
	SshKeyPaths pulumi.StringArrayInput
	// [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `imagePassword` is not provided. This property is immutable.
	SshKeys pulumi.StringArrayInput
	// [string] The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. This option will work only with cloud-init compatible images.
	UserData pulumi.StringPtrInput
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeArgs)(nil)).Elem()
}

type VolumeInput interface {
	pulumi.Input

	ToVolumeOutput() VolumeOutput
	ToVolumeOutputWithContext(ctx context.Context) VolumeOutput
}

func (*Volume) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil)).Elem()
}

func (i *Volume) ToVolumeOutput() VolumeOutput {
	return i.ToVolumeOutputWithContext(context.Background())
}

func (i *Volume) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOutput)
}

// VolumeArrayInput is an input type that accepts VolumeArray and VolumeArrayOutput values.
// You can construct a concrete instance of `VolumeArrayInput` via:
//
//	VolumeArray{ VolumeArgs{...} }
type VolumeArrayInput interface {
	pulumi.Input

	ToVolumeArrayOutput() VolumeArrayOutput
	ToVolumeArrayOutputWithContext(context.Context) VolumeArrayOutput
}

type VolumeArray []VolumeInput

func (VolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Volume)(nil)).Elem()
}

func (i VolumeArray) ToVolumeArrayOutput() VolumeArrayOutput {
	return i.ToVolumeArrayOutputWithContext(context.Background())
}

func (i VolumeArray) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeArrayOutput)
}

// VolumeMapInput is an input type that accepts VolumeMap and VolumeMapOutput values.
// You can construct a concrete instance of `VolumeMapInput` via:
//
//	VolumeMap{ "key": VolumeArgs{...} }
type VolumeMapInput interface {
	pulumi.Input

	ToVolumeMapOutput() VolumeMapOutput
	ToVolumeMapOutputWithContext(context.Context) VolumeMapOutput
}

type VolumeMap map[string]VolumeInput

func (VolumeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Volume)(nil)).Elem()
}

func (i VolumeMap) ToVolumeMapOutput() VolumeMapOutput {
	return i.ToVolumeMapOutputWithContext(context.Background())
}

func (i VolumeMap) ToVolumeMapOutputWithContext(ctx context.Context) VolumeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMapOutput)
}

type VolumeOutput struct{ *pulumi.OutputState }

func (VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil)).Elem()
}

func (o VolumeOutput) ToVolumeOutput() VolumeOutput {
	return o
}

func (o VolumeOutput) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return o
}

// [string] The storage availability zone assigned to the volume: AUTO, ZONE_1, ZONE_2, or ZONE_3. This property is immutable
func (o VolumeOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// [string] The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
func (o VolumeOutput) BackupUnitId() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.BackupUnitId }).(pulumi.StringOutput)
}

// [string] The UUID of the attached server.
// > **âš  WARNING**
// >
// > sshKeyPath and sshKeys fields are immutable.
// If you want to create a **CUBE** server, the type of the inline volume must be set to **DAS**. In this case, you can not set the `size` argument since it is taken from the `templateUuid` you set in the server.
func (o VolumeOutput) BootServer() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.BootServer }).(pulumi.StringOutput)
}

// [Boolean] The bus type of the volume: VIRTIO or IDE.
func (o VolumeOutput) Bus() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Bus }).(pulumi.StringOutput)
}

// [string] Is capable of CPU hot plug (no reboot required)
func (o VolumeOutput) CpuHotPlug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolOutput { return v.CpuHotPlug }).(pulumi.BoolOutput)
}

// [string] The ID of a Virtual Data Center.
func (o VolumeOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.DatacenterId }).(pulumi.StringOutput)
}

// The Logical Unit Number of the storage volume. Null for volumes not mounted to any VM.
func (o VolumeOutput) DeviceNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntOutput { return v.DeviceNumber }).(pulumi.IntOutput)
}

// [string] Is capable of Virt-IO drive hot plug (no reboot required)
func (o VolumeOutput) DiscVirtioHotPlug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolOutput { return v.DiscVirtioHotPlug }).(pulumi.BoolOutput)
}

// [string] Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.
func (o VolumeOutput) DiscVirtioHotUnplug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolOutput { return v.DiscVirtioHotUnplug }).(pulumi.BoolOutput)
}

// [string] The volume type: HDD or SSD. This property is immutable.
func (o VolumeOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.DiskType }).(pulumi.StringOutput)
}

// The image or snapshot UUID.
func (o VolumeOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Image }).(pulumi.StringOutput)
}

func (o VolumeOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.ImageId }).(pulumi.StringOutput)
}

// [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licenceType` is not provided. Attribute is immutable.
func (o VolumeOutput) ImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.ImageName }).(pulumi.StringPtrOutput)
}

// [string] Required if `sshkeyPath` is not provided.
func (o VolumeOutput) ImagePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.ImagePassword }).(pulumi.StringPtrOutput)
}

// [string] Required if `imageName` is not provided.
func (o VolumeOutput) LicenceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.LicenceType }).(pulumi.StringOutput)
}

// [string] The name of the volume.
func (o VolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// [string] Is capable of nic hot plug (no reboot required)
func (o VolumeOutput) NicHotPlug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolOutput { return v.NicHotPlug }).(pulumi.BoolOutput)
}

// [string] Is capable of nic hot unplug (no reboot required)
func (o VolumeOutput) NicHotUnplug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolOutput { return v.NicHotUnplug }).(pulumi.BoolOutput)
}

// The PCI slot number of the storage volume. Null for volumes not mounted to any VM.
func (o VolumeOutput) PciSlot() pulumi.IntOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntOutput { return v.PciSlot }).(pulumi.IntOutput)
}

// [string] Is capable of memory hot plug (no reboot required)
func (o VolumeOutput) RamHotPlug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolOutput { return v.RamHotPlug }).(pulumi.BoolOutput)
}

// [string] The ID of a server.
func (o VolumeOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

// [integer] The size of the volume in GB.
func (o VolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `imagePassword` is not provided. This property is immutable.
func (o VolumeOutput) SshKeyPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringArrayOutput { return v.SshKeyPaths }).(pulumi.StringArrayOutput)
}

// [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `imagePassword` is not provided. This property is immutable.
func (o VolumeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringArrayOutput { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// The associated public SSH key.
func (o VolumeOutput) Sshkey() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Sshkey }).(pulumi.StringOutput)
}

// [string] The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. This option will work only with cloud-init compatible images.
func (o VolumeOutput) UserData() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.UserData }).(pulumi.StringOutput)
}

type VolumeArrayOutput struct{ *pulumi.OutputState }

func (VolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Volume)(nil)).Elem()
}

func (o VolumeArrayOutput) ToVolumeArrayOutput() VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) Index(i pulumi.IntInput) VolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Volume {
		return vs[0].([]*Volume)[vs[1].(int)]
	}).(VolumeOutput)
}

type VolumeMapOutput struct{ *pulumi.OutputState }

func (VolumeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Volume)(nil)).Elem()
}

func (o VolumeMapOutput) ToVolumeMapOutput() VolumeMapOutput {
	return o
}

func (o VolumeMapOutput) ToVolumeMapOutputWithContext(ctx context.Context) VolumeMapOutput {
	return o
}

func (o VolumeMapOutput) MapIndex(k pulumi.StringInput) VolumeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Volume {
		return vs[0].(map[string]*Volume)[vs[1].(string)]
	}).(VolumeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeInput)(nil)).Elem(), &Volume{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeArrayInput)(nil)).Elem(), VolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeMapInput)(nil)).Elem(), VolumeMap{})
	pulumi.RegisterOutputType(VolumeOutput{})
	pulumi.RegisterOutputType(VolumeArrayOutput{})
	pulumi.RegisterOutputType(VolumeMapOutput{})
}
