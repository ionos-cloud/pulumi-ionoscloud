// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Volume struct {
	pulumi.CustomResourceState

	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	BackupUnitId     pulumi.StringOutput `pulumi:"backupUnitId"`
	// The UUID of the attached server.
	BootServer          pulumi.StringOutput      `pulumi:"bootServer"`
	Bus                 pulumi.StringOutput      `pulumi:"bus"`
	CpuHotPlug          pulumi.BoolOutput        `pulumi:"cpuHotPlug"`
	DatacenterId        pulumi.StringOutput      `pulumi:"datacenterId"`
	DeviceNumber        pulumi.IntOutput         `pulumi:"deviceNumber"`
	DiscVirtioHotPlug   pulumi.BoolOutput        `pulumi:"discVirtioHotPlug"`
	DiscVirtioHotUnplug pulumi.BoolOutput        `pulumi:"discVirtioHotUnplug"`
	DiskType            pulumi.StringOutput      `pulumi:"diskType"`
	Image               pulumi.StringOutput      `pulumi:"image"`
	ImageId             pulumi.StringOutput      `pulumi:"imageId"`
	ImageName           pulumi.StringPtrOutput   `pulumi:"imageName"`
	ImagePassword       pulumi.StringPtrOutput   `pulumi:"imagePassword"`
	LicenceType         pulumi.StringOutput      `pulumi:"licenceType"`
	Name                pulumi.StringOutput      `pulumi:"name"`
	NicHotPlug          pulumi.BoolOutput        `pulumi:"nicHotPlug"`
	NicHotUnplug        pulumi.BoolOutput        `pulumi:"nicHotUnplug"`
	PciSlot             pulumi.IntOutput         `pulumi:"pciSlot"`
	RamHotPlug          pulumi.BoolOutput        `pulumi:"ramHotPlug"`
	ServerId            pulumi.StringOutput      `pulumi:"serverId"`
	Size                pulumi.IntOutput         `pulumi:"size"`
	SshKeyPaths         pulumi.StringArrayOutput `pulumi:"sshKeyPaths"`
	SshKeys             pulumi.StringArrayOutput `pulumi:"sshKeys"`
	Sshkey              pulumi.StringOutput      `pulumi:"sshkey"`
	UserData            pulumi.StringOutput      `pulumi:"userData"`
}

// NewVolume registers a new resource with the given unique name, arguments, and options.
func NewVolume(ctx *pulumi.Context,
	name string, args *VolumeArgs, opts ...pulumi.ResourceOption) (*Volume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatacenterId == nil {
		return nil, errors.New("invalid value for required argument 'DatacenterId'")
	}
	if args.DiskType == nil {
		return nil, errors.New("invalid value for required argument 'DiskType'")
	}
	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Volume
	err := ctx.RegisterResource("ionoscloud:compute/volume:Volume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolume gets an existing Volume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeState, opts ...pulumi.ResourceOption) (*Volume, error) {
	var resource Volume
	err := ctx.ReadResource("ionoscloud:compute/volume:Volume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Volume resources.
type volumeState struct {
	AvailabilityZone *string `pulumi:"availabilityZone"`
	BackupUnitId     *string `pulumi:"backupUnitId"`
	// The UUID of the attached server.
	BootServer          *string  `pulumi:"bootServer"`
	Bus                 *string  `pulumi:"bus"`
	CpuHotPlug          *bool    `pulumi:"cpuHotPlug"`
	DatacenterId        *string  `pulumi:"datacenterId"`
	DeviceNumber        *int     `pulumi:"deviceNumber"`
	DiscVirtioHotPlug   *bool    `pulumi:"discVirtioHotPlug"`
	DiscVirtioHotUnplug *bool    `pulumi:"discVirtioHotUnplug"`
	DiskType            *string  `pulumi:"diskType"`
	Image               *string  `pulumi:"image"`
	ImageId             *string  `pulumi:"imageId"`
	ImageName           *string  `pulumi:"imageName"`
	ImagePassword       *string  `pulumi:"imagePassword"`
	LicenceType         *string  `pulumi:"licenceType"`
	Name                *string  `pulumi:"name"`
	NicHotPlug          *bool    `pulumi:"nicHotPlug"`
	NicHotUnplug        *bool    `pulumi:"nicHotUnplug"`
	PciSlot             *int     `pulumi:"pciSlot"`
	RamHotPlug          *bool    `pulumi:"ramHotPlug"`
	ServerId            *string  `pulumi:"serverId"`
	Size                *int     `pulumi:"size"`
	SshKeyPaths         []string `pulumi:"sshKeyPaths"`
	SshKeys             []string `pulumi:"sshKeys"`
	Sshkey              *string  `pulumi:"sshkey"`
	UserData            *string  `pulumi:"userData"`
}

type VolumeState struct {
	AvailabilityZone pulumi.StringPtrInput
	BackupUnitId     pulumi.StringPtrInput
	// The UUID of the attached server.
	BootServer          pulumi.StringPtrInput
	Bus                 pulumi.StringPtrInput
	CpuHotPlug          pulumi.BoolPtrInput
	DatacenterId        pulumi.StringPtrInput
	DeviceNumber        pulumi.IntPtrInput
	DiscVirtioHotPlug   pulumi.BoolPtrInput
	DiscVirtioHotUnplug pulumi.BoolPtrInput
	DiskType            pulumi.StringPtrInput
	Image               pulumi.StringPtrInput
	ImageId             pulumi.StringPtrInput
	ImageName           pulumi.StringPtrInput
	ImagePassword       pulumi.StringPtrInput
	LicenceType         pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	NicHotPlug          pulumi.BoolPtrInput
	NicHotUnplug        pulumi.BoolPtrInput
	PciSlot             pulumi.IntPtrInput
	RamHotPlug          pulumi.BoolPtrInput
	ServerId            pulumi.StringPtrInput
	Size                pulumi.IntPtrInput
	SshKeyPaths         pulumi.StringArrayInput
	SshKeys             pulumi.StringArrayInput
	Sshkey              pulumi.StringPtrInput
	UserData            pulumi.StringPtrInput
}

func (VolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeState)(nil)).Elem()
}

type volumeArgs struct {
	AvailabilityZone *string  `pulumi:"availabilityZone"`
	BackupUnitId     *string  `pulumi:"backupUnitId"`
	Bus              *string  `pulumi:"bus"`
	DatacenterId     string   `pulumi:"datacenterId"`
	DiskType         string   `pulumi:"diskType"`
	ImageName        *string  `pulumi:"imageName"`
	ImagePassword    *string  `pulumi:"imagePassword"`
	LicenceType      *string  `pulumi:"licenceType"`
	Name             *string  `pulumi:"name"`
	ServerId         string   `pulumi:"serverId"`
	Size             int      `pulumi:"size"`
	SshKeyPaths      []string `pulumi:"sshKeyPaths"`
	SshKeys          []string `pulumi:"sshKeys"`
	UserData         *string  `pulumi:"userData"`
}

// The set of arguments for constructing a Volume resource.
type VolumeArgs struct {
	AvailabilityZone pulumi.StringPtrInput
	BackupUnitId     pulumi.StringPtrInput
	Bus              pulumi.StringPtrInput
	DatacenterId     pulumi.StringInput
	DiskType         pulumi.StringInput
	ImageName        pulumi.StringPtrInput
	ImagePassword    pulumi.StringPtrInput
	LicenceType      pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	ServerId         pulumi.StringInput
	Size             pulumi.IntInput
	SshKeyPaths      pulumi.StringArrayInput
	SshKeys          pulumi.StringArrayInput
	UserData         pulumi.StringPtrInput
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeArgs)(nil)).Elem()
}

type VolumeInput interface {
	pulumi.Input

	ToVolumeOutput() VolumeOutput
	ToVolumeOutputWithContext(ctx context.Context) VolumeOutput
}

func (*Volume) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil)).Elem()
}

func (i *Volume) ToVolumeOutput() VolumeOutput {
	return i.ToVolumeOutputWithContext(context.Background())
}

func (i *Volume) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOutput)
}

// VolumeArrayInput is an input type that accepts VolumeArray and VolumeArrayOutput values.
// You can construct a concrete instance of `VolumeArrayInput` via:
//
//	VolumeArray{ VolumeArgs{...} }
type VolumeArrayInput interface {
	pulumi.Input

	ToVolumeArrayOutput() VolumeArrayOutput
	ToVolumeArrayOutputWithContext(context.Context) VolumeArrayOutput
}

type VolumeArray []VolumeInput

func (VolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Volume)(nil)).Elem()
}

func (i VolumeArray) ToVolumeArrayOutput() VolumeArrayOutput {
	return i.ToVolumeArrayOutputWithContext(context.Background())
}

func (i VolumeArray) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeArrayOutput)
}

// VolumeMapInput is an input type that accepts VolumeMap and VolumeMapOutput values.
// You can construct a concrete instance of `VolumeMapInput` via:
//
//	VolumeMap{ "key": VolumeArgs{...} }
type VolumeMapInput interface {
	pulumi.Input

	ToVolumeMapOutput() VolumeMapOutput
	ToVolumeMapOutputWithContext(context.Context) VolumeMapOutput
}

type VolumeMap map[string]VolumeInput

func (VolumeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Volume)(nil)).Elem()
}

func (i VolumeMap) ToVolumeMapOutput() VolumeMapOutput {
	return i.ToVolumeMapOutputWithContext(context.Background())
}

func (i VolumeMap) ToVolumeMapOutputWithContext(ctx context.Context) VolumeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMapOutput)
}

type VolumeOutput struct{ *pulumi.OutputState }

func (VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil)).Elem()
}

func (o VolumeOutput) ToVolumeOutput() VolumeOutput {
	return o
}

func (o VolumeOutput) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return o
}

func (o VolumeOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o VolumeOutput) BackupUnitId() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.BackupUnitId }).(pulumi.StringOutput)
}

// The UUID of the attached server.
func (o VolumeOutput) BootServer() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.BootServer }).(pulumi.StringOutput)
}

func (o VolumeOutput) Bus() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Bus }).(pulumi.StringOutput)
}

func (o VolumeOutput) CpuHotPlug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolOutput { return v.CpuHotPlug }).(pulumi.BoolOutput)
}

func (o VolumeOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.DatacenterId }).(pulumi.StringOutput)
}

func (o VolumeOutput) DeviceNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntOutput { return v.DeviceNumber }).(pulumi.IntOutput)
}

func (o VolumeOutput) DiscVirtioHotPlug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolOutput { return v.DiscVirtioHotPlug }).(pulumi.BoolOutput)
}

func (o VolumeOutput) DiscVirtioHotUnplug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolOutput { return v.DiscVirtioHotUnplug }).(pulumi.BoolOutput)
}

func (o VolumeOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.DiskType }).(pulumi.StringOutput)
}

func (o VolumeOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Image }).(pulumi.StringOutput)
}

func (o VolumeOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.ImageId }).(pulumi.StringOutput)
}

func (o VolumeOutput) ImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.ImageName }).(pulumi.StringPtrOutput)
}

func (o VolumeOutput) ImagePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.ImagePassword }).(pulumi.StringPtrOutput)
}

func (o VolumeOutput) LicenceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.LicenceType }).(pulumi.StringOutput)
}

func (o VolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VolumeOutput) NicHotPlug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolOutput { return v.NicHotPlug }).(pulumi.BoolOutput)
}

func (o VolumeOutput) NicHotUnplug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolOutput { return v.NicHotUnplug }).(pulumi.BoolOutput)
}

func (o VolumeOutput) PciSlot() pulumi.IntOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntOutput { return v.PciSlot }).(pulumi.IntOutput)
}

func (o VolumeOutput) RamHotPlug() pulumi.BoolOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolOutput { return v.RamHotPlug }).(pulumi.BoolOutput)
}

func (o VolumeOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

func (o VolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

func (o VolumeOutput) SshKeyPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringArrayOutput { return v.SshKeyPaths }).(pulumi.StringArrayOutput)
}

func (o VolumeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringArrayOutput { return v.SshKeys }).(pulumi.StringArrayOutput)
}

func (o VolumeOutput) Sshkey() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Sshkey }).(pulumi.StringOutput)
}

func (o VolumeOutput) UserData() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.UserData }).(pulumi.StringOutput)
}

type VolumeArrayOutput struct{ *pulumi.OutputState }

func (VolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Volume)(nil)).Elem()
}

func (o VolumeArrayOutput) ToVolumeArrayOutput() VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) Index(i pulumi.IntInput) VolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Volume {
		return vs[0].([]*Volume)[vs[1].(int)]
	}).(VolumeOutput)
}

type VolumeMapOutput struct{ *pulumi.OutputState }

func (VolumeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Volume)(nil)).Elem()
}

func (o VolumeMapOutput) ToVolumeMapOutput() VolumeMapOutput {
	return o
}

func (o VolumeMapOutput) ToVolumeMapOutputWithContext(ctx context.Context) VolumeMapOutput {
	return o
}

func (o VolumeMapOutput) MapIndex(k pulumi.StringInput) VolumeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Volume {
		return vs[0].(map[string]*Volume)[vs[1].(string)]
	}).(VolumeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeInput)(nil)).Elem(), &Volume{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeArrayInput)(nil)).Elem(), VolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeMapInput)(nil)).Elem(), VolumeMap{})
	pulumi.RegisterOutputType(VolumeOutput{})
	pulumi.RegisterOutputType(VolumeArrayOutput{})
	pulumi.RegisterOutputType(VolumeMapOutput{})
}
