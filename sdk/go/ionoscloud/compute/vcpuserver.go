// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VCPUServer struct {
	pulumi.CustomResourceState

	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the getImage
	// data source.
	//
	// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
	BootCdrom       pulumi.StringOutput      `pulumi:"bootCdrom"`
	BootImage       pulumi.StringOutput      `pulumi:"bootImage"`
	BootVolume      pulumi.StringOutput      `pulumi:"bootVolume"`
	Cores           pulumi.IntOutput         `pulumi:"cores"`
	CpuFamily       pulumi.StringOutput      `pulumi:"cpuFamily"`
	DatacenterId    pulumi.StringOutput      `pulumi:"datacenterId"`
	FirewallruleId  pulumi.StringOutput      `pulumi:"firewallruleId"`
	FirewallruleIds pulumi.StringArrayOutput `pulumi:"firewallruleIds"`
	ImageName       pulumi.StringOutput      `pulumi:"imageName"`
	ImagePassword   pulumi.StringOutput      `pulumi:"imagePassword"`
	// A list that contains the IDs for the volumes defined inside the server resource.
	InlineVolumeIds pulumi.StringArrayOutput   `pulumi:"inlineVolumeIds"`
	Labels          VCPUServerLabelArrayOutput `pulumi:"labels"`
	Name            pulumi.StringOutput        `pulumi:"name"`
	Nic             VCPUServerNicPtrOutput     `pulumi:"nic"`
	PrimaryIp       pulumi.StringOutput        `pulumi:"primaryIp"`
	// Id of the primary network interface
	PrimaryNic pulumi.StringOutput `pulumi:"primaryNic"`
	Ram        pulumi.IntOutput    `pulumi:"ram"`
	// Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the
	// corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH
	// keys are only supported if a public Linux image is used for the volume creation.
	SshKeys pulumi.StringArrayOutput `pulumi:"sshKeys"`
	Type    pulumi.StringOutput      `pulumi:"type"`
	// Sets the power state of the vcpu server. Possible values: `RUNNING` or `SHUTOFF`.
	VmState pulumi.StringOutput    `pulumi:"vmState"`
	Volume  VCPUServerVolumeOutput `pulumi:"volume"`
}

// NewVCPUServer registers a new resource with the given unique name, arguments, and options.
func NewVCPUServer(ctx *pulumi.Context,
	name string, args *VCPUServerArgs, opts ...pulumi.ResourceOption) (*VCPUServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cores == nil {
		return nil, errors.New("invalid value for required argument 'Cores'")
	}
	if args.DatacenterId == nil {
		return nil, errors.New("invalid value for required argument 'DatacenterId'")
	}
	if args.Ram == nil {
		return nil, errors.New("invalid value for required argument 'Ram'")
	}
	if args.Volume == nil {
		return nil, errors.New("invalid value for required argument 'Volume'")
	}
	if args.ImagePassword != nil {
		args.ImagePassword = pulumi.ToSecret(args.ImagePassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"imagePassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VCPUServer
	err := ctx.RegisterResource("ionoscloud:compute/vCPUServer:VCPUServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVCPUServer gets an existing VCPUServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVCPUServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VCPUServerState, opts ...pulumi.ResourceOption) (*VCPUServer, error) {
	var resource VCPUServer
	err := ctx.ReadResource("ionoscloud:compute/vCPUServer:VCPUServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VCPUServer resources.
type vcpuserverState struct {
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the getImage
	// data source.
	//
	// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
	BootCdrom       *string  `pulumi:"bootCdrom"`
	BootImage       *string  `pulumi:"bootImage"`
	BootVolume      *string  `pulumi:"bootVolume"`
	Cores           *int     `pulumi:"cores"`
	CpuFamily       *string  `pulumi:"cpuFamily"`
	DatacenterId    *string  `pulumi:"datacenterId"`
	FirewallruleId  *string  `pulumi:"firewallruleId"`
	FirewallruleIds []string `pulumi:"firewallruleIds"`
	ImageName       *string  `pulumi:"imageName"`
	ImagePassword   *string  `pulumi:"imagePassword"`
	// A list that contains the IDs for the volumes defined inside the server resource.
	InlineVolumeIds []string          `pulumi:"inlineVolumeIds"`
	Labels          []VCPUServerLabel `pulumi:"labels"`
	Name            *string           `pulumi:"name"`
	Nic             *VCPUServerNic    `pulumi:"nic"`
	PrimaryIp       *string           `pulumi:"primaryIp"`
	// Id of the primary network interface
	PrimaryNic *string `pulumi:"primaryNic"`
	Ram        *int    `pulumi:"ram"`
	// Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the
	// corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH
	// keys are only supported if a public Linux image is used for the volume creation.
	SshKeys []string `pulumi:"sshKeys"`
	Type    *string  `pulumi:"type"`
	// Sets the power state of the vcpu server. Possible values: `RUNNING` or `SHUTOFF`.
	VmState *string           `pulumi:"vmState"`
	Volume  *VCPUServerVolume `pulumi:"volume"`
}

type VCPUServerState struct {
	AvailabilityZone pulumi.StringPtrInput
	// The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the getImage
	// data source.
	//
	// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
	BootCdrom       pulumi.StringPtrInput
	BootImage       pulumi.StringPtrInput
	BootVolume      pulumi.StringPtrInput
	Cores           pulumi.IntPtrInput
	CpuFamily       pulumi.StringPtrInput
	DatacenterId    pulumi.StringPtrInput
	FirewallruleId  pulumi.StringPtrInput
	FirewallruleIds pulumi.StringArrayInput
	ImageName       pulumi.StringPtrInput
	ImagePassword   pulumi.StringPtrInput
	// A list that contains the IDs for the volumes defined inside the server resource.
	InlineVolumeIds pulumi.StringArrayInput
	Labels          VCPUServerLabelArrayInput
	Name            pulumi.StringPtrInput
	Nic             VCPUServerNicPtrInput
	PrimaryIp       pulumi.StringPtrInput
	// Id of the primary network interface
	PrimaryNic pulumi.StringPtrInput
	Ram        pulumi.IntPtrInput
	// Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the
	// corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH
	// keys are only supported if a public Linux image is used for the volume creation.
	SshKeys pulumi.StringArrayInput
	Type    pulumi.StringPtrInput
	// Sets the power state of the vcpu server. Possible values: `RUNNING` or `SHUTOFF`.
	VmState pulumi.StringPtrInput
	Volume  VCPUServerVolumePtrInput
}

func (VCPUServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*vcpuserverState)(nil)).Elem()
}

type vcpuserverArgs struct {
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the getImage
	// data source.
	//
	// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
	BootCdrom       *string           `pulumi:"bootCdrom"`
	BootImage       *string           `pulumi:"bootImage"`
	Cores           int               `pulumi:"cores"`
	DatacenterId    string            `pulumi:"datacenterId"`
	FirewallruleIds []string          `pulumi:"firewallruleIds"`
	ImageName       *string           `pulumi:"imageName"`
	ImagePassword   *string           `pulumi:"imagePassword"`
	Labels          []VCPUServerLabel `pulumi:"labels"`
	Name            *string           `pulumi:"name"`
	Nic             *VCPUServerNic    `pulumi:"nic"`
	Ram             int               `pulumi:"ram"`
	// Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the
	// corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH
	// keys are only supported if a public Linux image is used for the volume creation.
	SshKeys []string `pulumi:"sshKeys"`
	// Sets the power state of the vcpu server. Possible values: `RUNNING` or `SHUTOFF`.
	VmState *string          `pulumi:"vmState"`
	Volume  VCPUServerVolume `pulumi:"volume"`
}

// The set of arguments for constructing a VCPUServer resource.
type VCPUServerArgs struct {
	AvailabilityZone pulumi.StringPtrInput
	// The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the getImage
	// data source.
	//
	// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
	BootCdrom       pulumi.StringPtrInput
	BootImage       pulumi.StringPtrInput
	Cores           pulumi.IntInput
	DatacenterId    pulumi.StringInput
	FirewallruleIds pulumi.StringArrayInput
	ImageName       pulumi.StringPtrInput
	ImagePassword   pulumi.StringPtrInput
	Labels          VCPUServerLabelArrayInput
	Name            pulumi.StringPtrInput
	Nic             VCPUServerNicPtrInput
	Ram             pulumi.IntInput
	// Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the
	// corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH
	// keys are only supported if a public Linux image is used for the volume creation.
	SshKeys pulumi.StringArrayInput
	// Sets the power state of the vcpu server. Possible values: `RUNNING` or `SHUTOFF`.
	VmState pulumi.StringPtrInput
	Volume  VCPUServerVolumeInput
}

func (VCPUServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vcpuserverArgs)(nil)).Elem()
}

type VCPUServerInput interface {
	pulumi.Input

	ToVCPUServerOutput() VCPUServerOutput
	ToVCPUServerOutputWithContext(ctx context.Context) VCPUServerOutput
}

func (*VCPUServer) ElementType() reflect.Type {
	return reflect.TypeOf((**VCPUServer)(nil)).Elem()
}

func (i *VCPUServer) ToVCPUServerOutput() VCPUServerOutput {
	return i.ToVCPUServerOutputWithContext(context.Background())
}

func (i *VCPUServer) ToVCPUServerOutputWithContext(ctx context.Context) VCPUServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VCPUServerOutput)
}

// VCPUServerArrayInput is an input type that accepts VCPUServerArray and VCPUServerArrayOutput values.
// You can construct a concrete instance of `VCPUServerArrayInput` via:
//
//	VCPUServerArray{ VCPUServerArgs{...} }
type VCPUServerArrayInput interface {
	pulumi.Input

	ToVCPUServerArrayOutput() VCPUServerArrayOutput
	ToVCPUServerArrayOutputWithContext(context.Context) VCPUServerArrayOutput
}

type VCPUServerArray []VCPUServerInput

func (VCPUServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VCPUServer)(nil)).Elem()
}

func (i VCPUServerArray) ToVCPUServerArrayOutput() VCPUServerArrayOutput {
	return i.ToVCPUServerArrayOutputWithContext(context.Background())
}

func (i VCPUServerArray) ToVCPUServerArrayOutputWithContext(ctx context.Context) VCPUServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VCPUServerArrayOutput)
}

// VCPUServerMapInput is an input type that accepts VCPUServerMap and VCPUServerMapOutput values.
// You can construct a concrete instance of `VCPUServerMapInput` via:
//
//	VCPUServerMap{ "key": VCPUServerArgs{...} }
type VCPUServerMapInput interface {
	pulumi.Input

	ToVCPUServerMapOutput() VCPUServerMapOutput
	ToVCPUServerMapOutputWithContext(context.Context) VCPUServerMapOutput
}

type VCPUServerMap map[string]VCPUServerInput

func (VCPUServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VCPUServer)(nil)).Elem()
}

func (i VCPUServerMap) ToVCPUServerMapOutput() VCPUServerMapOutput {
	return i.ToVCPUServerMapOutputWithContext(context.Background())
}

func (i VCPUServerMap) ToVCPUServerMapOutputWithContext(ctx context.Context) VCPUServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VCPUServerMapOutput)
}

type VCPUServerOutput struct{ *pulumi.OutputState }

func (VCPUServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VCPUServer)(nil)).Elem()
}

func (o VCPUServerOutput) ToVCPUServerOutput() VCPUServerOutput {
	return o
}

func (o VCPUServerOutput) ToVCPUServerOutputWithContext(ctx context.Context) VCPUServerOutput {
	return o
}

func (o VCPUServerOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *VCPUServer) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the getImage
// data source.
//
// Deprecated: Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
func (o VCPUServerOutput) BootCdrom() pulumi.StringOutput {
	return o.ApplyT(func(v *VCPUServer) pulumi.StringOutput { return v.BootCdrom }).(pulumi.StringOutput)
}

func (o VCPUServerOutput) BootImage() pulumi.StringOutput {
	return o.ApplyT(func(v *VCPUServer) pulumi.StringOutput { return v.BootImage }).(pulumi.StringOutput)
}

func (o VCPUServerOutput) BootVolume() pulumi.StringOutput {
	return o.ApplyT(func(v *VCPUServer) pulumi.StringOutput { return v.BootVolume }).(pulumi.StringOutput)
}

func (o VCPUServerOutput) Cores() pulumi.IntOutput {
	return o.ApplyT(func(v *VCPUServer) pulumi.IntOutput { return v.Cores }).(pulumi.IntOutput)
}

func (o VCPUServerOutput) CpuFamily() pulumi.StringOutput {
	return o.ApplyT(func(v *VCPUServer) pulumi.StringOutput { return v.CpuFamily }).(pulumi.StringOutput)
}

func (o VCPUServerOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *VCPUServer) pulumi.StringOutput { return v.DatacenterId }).(pulumi.StringOutput)
}

func (o VCPUServerOutput) FirewallruleId() pulumi.StringOutput {
	return o.ApplyT(func(v *VCPUServer) pulumi.StringOutput { return v.FirewallruleId }).(pulumi.StringOutput)
}

func (o VCPUServerOutput) FirewallruleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VCPUServer) pulumi.StringArrayOutput { return v.FirewallruleIds }).(pulumi.StringArrayOutput)
}

func (o VCPUServerOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v *VCPUServer) pulumi.StringOutput { return v.ImageName }).(pulumi.StringOutput)
}

func (o VCPUServerOutput) ImagePassword() pulumi.StringOutput {
	return o.ApplyT(func(v *VCPUServer) pulumi.StringOutput { return v.ImagePassword }).(pulumi.StringOutput)
}

// A list that contains the IDs for the volumes defined inside the server resource.
func (o VCPUServerOutput) InlineVolumeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VCPUServer) pulumi.StringArrayOutput { return v.InlineVolumeIds }).(pulumi.StringArrayOutput)
}

func (o VCPUServerOutput) Labels() VCPUServerLabelArrayOutput {
	return o.ApplyT(func(v *VCPUServer) VCPUServerLabelArrayOutput { return v.Labels }).(VCPUServerLabelArrayOutput)
}

func (o VCPUServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VCPUServer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VCPUServerOutput) Nic() VCPUServerNicPtrOutput {
	return o.ApplyT(func(v *VCPUServer) VCPUServerNicPtrOutput { return v.Nic }).(VCPUServerNicPtrOutput)
}

func (o VCPUServerOutput) PrimaryIp() pulumi.StringOutput {
	return o.ApplyT(func(v *VCPUServer) pulumi.StringOutput { return v.PrimaryIp }).(pulumi.StringOutput)
}

// Id of the primary network interface
func (o VCPUServerOutput) PrimaryNic() pulumi.StringOutput {
	return o.ApplyT(func(v *VCPUServer) pulumi.StringOutput { return v.PrimaryNic }).(pulumi.StringOutput)
}

func (o VCPUServerOutput) Ram() pulumi.IntOutput {
	return o.ApplyT(func(v *VCPUServer) pulumi.IntOutput { return v.Ram }).(pulumi.IntOutput)
}

// Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the
// corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH
// keys are only supported if a public Linux image is used for the volume creation.
func (o VCPUServerOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VCPUServer) pulumi.StringArrayOutput { return v.SshKeys }).(pulumi.StringArrayOutput)
}

func (o VCPUServerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *VCPUServer) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Sets the power state of the vcpu server. Possible values: `RUNNING` or `SHUTOFF`.
func (o VCPUServerOutput) VmState() pulumi.StringOutput {
	return o.ApplyT(func(v *VCPUServer) pulumi.StringOutput { return v.VmState }).(pulumi.StringOutput)
}

func (o VCPUServerOutput) Volume() VCPUServerVolumeOutput {
	return o.ApplyT(func(v *VCPUServer) VCPUServerVolumeOutput { return v.Volume }).(VCPUServerVolumeOutput)
}

type VCPUServerArrayOutput struct{ *pulumi.OutputState }

func (VCPUServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VCPUServer)(nil)).Elem()
}

func (o VCPUServerArrayOutput) ToVCPUServerArrayOutput() VCPUServerArrayOutput {
	return o
}

func (o VCPUServerArrayOutput) ToVCPUServerArrayOutputWithContext(ctx context.Context) VCPUServerArrayOutput {
	return o
}

func (o VCPUServerArrayOutput) Index(i pulumi.IntInput) VCPUServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VCPUServer {
		return vs[0].([]*VCPUServer)[vs[1].(int)]
	}).(VCPUServerOutput)
}

type VCPUServerMapOutput struct{ *pulumi.OutputState }

func (VCPUServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VCPUServer)(nil)).Elem()
}

func (o VCPUServerMapOutput) ToVCPUServerMapOutput() VCPUServerMapOutput {
	return o
}

func (o VCPUServerMapOutput) ToVCPUServerMapOutputWithContext(ctx context.Context) VCPUServerMapOutput {
	return o
}

func (o VCPUServerMapOutput) MapIndex(k pulumi.StringInput) VCPUServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VCPUServer {
		return vs[0].(map[string]*VCPUServer)[vs[1].(string)]
	}).(VCPUServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VCPUServerInput)(nil)).Elem(), &VCPUServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*VCPUServerArrayInput)(nil)).Elem(), VCPUServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VCPUServerMapInput)(nil)).Elem(), VCPUServerMap{})
	pulumi.RegisterOutputType(VCPUServerOutput{})
	pulumi.RegisterOutputType(VCPUServerArrayOutput{})
	pulumi.RegisterOutputType(VCPUServerMapOutput{})
}
