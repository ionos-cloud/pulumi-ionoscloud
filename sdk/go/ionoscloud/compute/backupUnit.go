// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// A Backup Unit resource can be imported using its `resource id`, e.g.
//
// ```sh
// $ pulumi import ionoscloud:compute/backupUnit:BackupUnit demo {backup_unit_uuid}
// ```
//
// This can be helpful when you want to import backup units which you have already created manually or using other means, outside of terraform. Please note that you need to manually specify the password when first declaring the resource in terraform, as there is no way to retrieve the password from the Cloud API.
type BackupUnit struct {
	pulumi.CustomResourceState

	// [string] The email address assigned to the backup unit
	Email pulumi.StringOutput `pulumi:"email"`
	// The login associated with the backup unit. Derived from the contract number
	Login pulumi.StringOutput `pulumi:"login"`
	// [string] The name of the Backup Unit. This argument is immutable.
	Name pulumi.StringOutput `pulumi:"name"`
	// [string] The desired password for the Backup Unit
	Password pulumi.StringOutput `pulumi:"password"`
}

// NewBackupUnit registers a new resource with the given unique name, arguments, and options.
func NewBackupUnit(ctx *pulumi.Context,
	name string, args *BackupUnitArgs, opts ...pulumi.ResourceOption) (*BackupUnit, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BackupUnit
	err := ctx.RegisterResource("ionoscloud:compute/backupUnit:BackupUnit", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackupUnit gets an existing BackupUnit resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupUnit(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupUnitState, opts ...pulumi.ResourceOption) (*BackupUnit, error) {
	var resource BackupUnit
	err := ctx.ReadResource("ionoscloud:compute/backupUnit:BackupUnit", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackupUnit resources.
type backupUnitState struct {
	// [string] The email address assigned to the backup unit
	Email *string `pulumi:"email"`
	// The login associated with the backup unit. Derived from the contract number
	Login *string `pulumi:"login"`
	// [string] The name of the Backup Unit. This argument is immutable.
	Name *string `pulumi:"name"`
	// [string] The desired password for the Backup Unit
	Password *string `pulumi:"password"`
}

type BackupUnitState struct {
	// [string] The email address assigned to the backup unit
	Email pulumi.StringPtrInput
	// The login associated with the backup unit. Derived from the contract number
	Login pulumi.StringPtrInput
	// [string] The name of the Backup Unit. This argument is immutable.
	Name pulumi.StringPtrInput
	// [string] The desired password for the Backup Unit
	Password pulumi.StringPtrInput
}

func (BackupUnitState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupUnitState)(nil)).Elem()
}

type backupUnitArgs struct {
	// [string] The email address assigned to the backup unit
	Email string `pulumi:"email"`
	// [string] The name of the Backup Unit. This argument is immutable.
	Name *string `pulumi:"name"`
	// [string] The desired password for the Backup Unit
	Password string `pulumi:"password"`
}

// The set of arguments for constructing a BackupUnit resource.
type BackupUnitArgs struct {
	// [string] The email address assigned to the backup unit
	Email pulumi.StringInput
	// [string] The name of the Backup Unit. This argument is immutable.
	Name pulumi.StringPtrInput
	// [string] The desired password for the Backup Unit
	Password pulumi.StringInput
}

func (BackupUnitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupUnitArgs)(nil)).Elem()
}

type BackupUnitInput interface {
	pulumi.Input

	ToBackupUnitOutput() BackupUnitOutput
	ToBackupUnitOutputWithContext(ctx context.Context) BackupUnitOutput
}

func (*BackupUnit) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupUnit)(nil)).Elem()
}

func (i *BackupUnit) ToBackupUnitOutput() BackupUnitOutput {
	return i.ToBackupUnitOutputWithContext(context.Background())
}

func (i *BackupUnit) ToBackupUnitOutputWithContext(ctx context.Context) BackupUnitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupUnitOutput)
}

// BackupUnitArrayInput is an input type that accepts BackupUnitArray and BackupUnitArrayOutput values.
// You can construct a concrete instance of `BackupUnitArrayInput` via:
//
//	BackupUnitArray{ BackupUnitArgs{...} }
type BackupUnitArrayInput interface {
	pulumi.Input

	ToBackupUnitArrayOutput() BackupUnitArrayOutput
	ToBackupUnitArrayOutputWithContext(context.Context) BackupUnitArrayOutput
}

type BackupUnitArray []BackupUnitInput

func (BackupUnitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupUnit)(nil)).Elem()
}

func (i BackupUnitArray) ToBackupUnitArrayOutput() BackupUnitArrayOutput {
	return i.ToBackupUnitArrayOutputWithContext(context.Background())
}

func (i BackupUnitArray) ToBackupUnitArrayOutputWithContext(ctx context.Context) BackupUnitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupUnitArrayOutput)
}

// BackupUnitMapInput is an input type that accepts BackupUnitMap and BackupUnitMapOutput values.
// You can construct a concrete instance of `BackupUnitMapInput` via:
//
//	BackupUnitMap{ "key": BackupUnitArgs{...} }
type BackupUnitMapInput interface {
	pulumi.Input

	ToBackupUnitMapOutput() BackupUnitMapOutput
	ToBackupUnitMapOutputWithContext(context.Context) BackupUnitMapOutput
}

type BackupUnitMap map[string]BackupUnitInput

func (BackupUnitMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupUnit)(nil)).Elem()
}

func (i BackupUnitMap) ToBackupUnitMapOutput() BackupUnitMapOutput {
	return i.ToBackupUnitMapOutputWithContext(context.Background())
}

func (i BackupUnitMap) ToBackupUnitMapOutputWithContext(ctx context.Context) BackupUnitMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupUnitMapOutput)
}

type BackupUnitOutput struct{ *pulumi.OutputState }

func (BackupUnitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupUnit)(nil)).Elem()
}

func (o BackupUnitOutput) ToBackupUnitOutput() BackupUnitOutput {
	return o
}

func (o BackupUnitOutput) ToBackupUnitOutputWithContext(ctx context.Context) BackupUnitOutput {
	return o
}

// [string] The email address assigned to the backup unit
func (o BackupUnitOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupUnit) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// The login associated with the backup unit. Derived from the contract number
func (o BackupUnitOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupUnit) pulumi.StringOutput { return v.Login }).(pulumi.StringOutput)
}

// [string] The name of the Backup Unit. This argument is immutable.
func (o BackupUnitOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupUnit) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// [string] The desired password for the Backup Unit
func (o BackupUnitOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupUnit) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

type BackupUnitArrayOutput struct{ *pulumi.OutputState }

func (BackupUnitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupUnit)(nil)).Elem()
}

func (o BackupUnitArrayOutput) ToBackupUnitArrayOutput() BackupUnitArrayOutput {
	return o
}

func (o BackupUnitArrayOutput) ToBackupUnitArrayOutputWithContext(ctx context.Context) BackupUnitArrayOutput {
	return o
}

func (o BackupUnitArrayOutput) Index(i pulumi.IntInput) BackupUnitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackupUnit {
		return vs[0].([]*BackupUnit)[vs[1].(int)]
	}).(BackupUnitOutput)
}

type BackupUnitMapOutput struct{ *pulumi.OutputState }

func (BackupUnitMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupUnit)(nil)).Elem()
}

func (o BackupUnitMapOutput) ToBackupUnitMapOutput() BackupUnitMapOutput {
	return o
}

func (o BackupUnitMapOutput) ToBackupUnitMapOutputWithContext(ctx context.Context) BackupUnitMapOutput {
	return o
}

func (o BackupUnitMapOutput) MapIndex(k pulumi.StringInput) BackupUnitOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackupUnit {
		return vs[0].(map[string]*BackupUnit)[vs[1].(string)]
	}).(BackupUnitOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupUnitInput)(nil)).Elem(), &BackupUnit{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupUnitArrayInput)(nil)).Elem(), BackupUnitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupUnitMapInput)(nil)).Elem(), BackupUnitMap{})
	pulumi.RegisterOutputType(BackupUnitOutput{})
	pulumi.RegisterOutputType(BackupUnitArrayOutput{})
	pulumi.RegisterOutputType(BackupUnitMapOutput{})
}
