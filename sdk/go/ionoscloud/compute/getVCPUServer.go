// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **VCPU Server data source** can be used to search for and return existing VCPU servers.
// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
// When this happens, please refine your search string so that it is specific enough to return only one result.
//
// ## Example Usage
func LookupVCPUServer(ctx *pulumi.Context, args *LookupVCPUServerArgs, opts ...pulumi.InvokeOption) (*LookupVCPUServerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVCPUServerResult
	err := ctx.Invoke("ionoscloud:compute/getVCPUServer:getVCPUServer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVCPUServer.
type LookupVCPUServerArgs struct {
	// Datacenter's UUID.
	DatacenterId string `pulumi:"datacenterId"`
	// ID of the server you want to search for.
	//
	// `datacenterId` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
	Id *string `pulumi:"id"`
	// Name of an existing server that you want to search for.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getVCPUServer.
type LookupVCPUServerResult struct {
	// The availability zone in which the volume should exist
	AvailabilityZone string `pulumi:"availabilityZone"`
	BootCdrom        string `pulumi:"bootCdrom"`
	BootImage        string `pulumi:"bootImage"`
	BootVolume       string `pulumi:"bootVolume"`
	// list of
	Cdroms []GetVCPUServerCdrom `pulumi:"cdroms"`
	// The total number of cores for the server
	Cores int `pulumi:"cores"`
	// CPU architecture on which server gets provisioned; not all CPU architectures are available in all datacenter regions; available CPU architectures can be retrieved from the datacenter resource.
	CpuFamily string `pulumi:"cpuFamily"`
	// The id of the datacenter
	DatacenterId string `pulumi:"datacenterId"`
	// The Id of the label
	Id *string `pulumi:"id"`
	// list of
	Labels []GetVCPUServerLabel `pulumi:"labels"`
	// Name of the firewall rule
	Name *string `pulumi:"name"`
	// list of
	Nics []GetVCPUServerNic `pulumi:"nics"`
	// The amount of memory for the server in MB
	Ram   int    `pulumi:"ram"`
	Token string `pulumi:"token"`
	// The type of firewall rule
	Type string `pulumi:"type"`
	// Status of the virtual Machine
	VmState string `pulumi:"vmState"`
	// list of
	Volumes []GetVCPUServerVolume `pulumi:"volumes"`
}

func LookupVCPUServerOutput(ctx *pulumi.Context, args LookupVCPUServerOutputArgs, opts ...pulumi.InvokeOption) LookupVCPUServerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupVCPUServerResultOutput, error) {
			args := v.(LookupVCPUServerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ionoscloud:compute/getVCPUServer:getVCPUServer", args, LookupVCPUServerResultOutput{}, options).(LookupVCPUServerResultOutput), nil
		}).(LookupVCPUServerResultOutput)
}

// A collection of arguments for invoking getVCPUServer.
type LookupVCPUServerOutputArgs struct {
	// Datacenter's UUID.
	DatacenterId pulumi.StringInput `pulumi:"datacenterId"`
	// ID of the server you want to search for.
	//
	// `datacenterId` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of an existing server that you want to search for.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupVCPUServerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVCPUServerArgs)(nil)).Elem()
}

// A collection of values returned by getVCPUServer.
type LookupVCPUServerResultOutput struct{ *pulumi.OutputState }

func (LookupVCPUServerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVCPUServerResult)(nil)).Elem()
}

func (o LookupVCPUServerResultOutput) ToLookupVCPUServerResultOutput() LookupVCPUServerResultOutput {
	return o
}

func (o LookupVCPUServerResultOutput) ToLookupVCPUServerResultOutputWithContext(ctx context.Context) LookupVCPUServerResultOutput {
	return o
}

// The availability zone in which the volume should exist
func (o LookupVCPUServerResultOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o LookupVCPUServerResultOutput) BootCdrom() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) string { return v.BootCdrom }).(pulumi.StringOutput)
}

func (o LookupVCPUServerResultOutput) BootImage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) string { return v.BootImage }).(pulumi.StringOutput)
}

func (o LookupVCPUServerResultOutput) BootVolume() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) string { return v.BootVolume }).(pulumi.StringOutput)
}

// list of
func (o LookupVCPUServerResultOutput) Cdroms() GetVCPUServerCdromArrayOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) []GetVCPUServerCdrom { return v.Cdroms }).(GetVCPUServerCdromArrayOutput)
}

// The total number of cores for the server
func (o LookupVCPUServerResultOutput) Cores() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) int { return v.Cores }).(pulumi.IntOutput)
}

// CPU architecture on which server gets provisioned; not all CPU architectures are available in all datacenter regions; available CPU architectures can be retrieved from the datacenter resource.
func (o LookupVCPUServerResultOutput) CpuFamily() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) string { return v.CpuFamily }).(pulumi.StringOutput)
}

// The id of the datacenter
func (o LookupVCPUServerResultOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) string { return v.DatacenterId }).(pulumi.StringOutput)
}

// The Id of the label
func (o LookupVCPUServerResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// list of
func (o LookupVCPUServerResultOutput) Labels() GetVCPUServerLabelArrayOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) []GetVCPUServerLabel { return v.Labels }).(GetVCPUServerLabelArrayOutput)
}

// Name of the firewall rule
func (o LookupVCPUServerResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// list of
func (o LookupVCPUServerResultOutput) Nics() GetVCPUServerNicArrayOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) []GetVCPUServerNic { return v.Nics }).(GetVCPUServerNicArrayOutput)
}

// The amount of memory for the server in MB
func (o LookupVCPUServerResultOutput) Ram() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) int { return v.Ram }).(pulumi.IntOutput)
}

func (o LookupVCPUServerResultOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) string { return v.Token }).(pulumi.StringOutput)
}

// The type of firewall rule
func (o LookupVCPUServerResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) string { return v.Type }).(pulumi.StringOutput)
}

// Status of the virtual Machine
func (o LookupVCPUServerResultOutput) VmState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) string { return v.VmState }).(pulumi.StringOutput)
}

// list of
func (o LookupVCPUServerResultOutput) Volumes() GetVCPUServerVolumeArrayOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) []GetVCPUServerVolume { return v.Volumes }).(GetVCPUServerVolumeArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVCPUServerResultOutput{})
}
