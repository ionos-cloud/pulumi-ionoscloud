// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupVCPUServer(ctx *pulumi.Context, args *LookupVCPUServerArgs, opts ...pulumi.InvokeOption) (*LookupVCPUServerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVCPUServerResult
	err := ctx.Invoke("ionoscloud:compute/getVCPUServer:getVCPUServer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVCPUServer.
type LookupVCPUServerArgs struct {
	DatacenterId string  `pulumi:"datacenterId"`
	Id           *string `pulumi:"id"`
	Name         *string `pulumi:"name"`
}

// A collection of values returned by getVCPUServer.
type LookupVCPUServerResult struct {
	AvailabilityZone string                `pulumi:"availabilityZone"`
	BootCdrom        string                `pulumi:"bootCdrom"`
	BootImage        string                `pulumi:"bootImage"`
	BootVolume       string                `pulumi:"bootVolume"`
	Cdroms           []GetVCPUServerCdrom  `pulumi:"cdroms"`
	Cores            int                   `pulumi:"cores"`
	CpuFamily        string                `pulumi:"cpuFamily"`
	DatacenterId     string                `pulumi:"datacenterId"`
	Id               *string               `pulumi:"id"`
	Labels           []GetVCPUServerLabel  `pulumi:"labels"`
	Name             *string               `pulumi:"name"`
	Nics             []GetVCPUServerNic    `pulumi:"nics"`
	Ram              int                   `pulumi:"ram"`
	Token            string                `pulumi:"token"`
	Type             string                `pulumi:"type"`
	VmState          string                `pulumi:"vmState"`
	Volumes          []GetVCPUServerVolume `pulumi:"volumes"`
}

func LookupVCPUServerOutput(ctx *pulumi.Context, args LookupVCPUServerOutputArgs, opts ...pulumi.InvokeOption) LookupVCPUServerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupVCPUServerResultOutput, error) {
			args := v.(LookupVCPUServerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ionoscloud:compute/getVCPUServer:getVCPUServer", args, LookupVCPUServerResultOutput{}, options).(LookupVCPUServerResultOutput), nil
		}).(LookupVCPUServerResultOutput)
}

// A collection of arguments for invoking getVCPUServer.
type LookupVCPUServerOutputArgs struct {
	DatacenterId pulumi.StringInput    `pulumi:"datacenterId"`
	Id           pulumi.StringPtrInput `pulumi:"id"`
	Name         pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupVCPUServerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVCPUServerArgs)(nil)).Elem()
}

// A collection of values returned by getVCPUServer.
type LookupVCPUServerResultOutput struct{ *pulumi.OutputState }

func (LookupVCPUServerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVCPUServerResult)(nil)).Elem()
}

func (o LookupVCPUServerResultOutput) ToLookupVCPUServerResultOutput() LookupVCPUServerResultOutput {
	return o
}

func (o LookupVCPUServerResultOutput) ToLookupVCPUServerResultOutputWithContext(ctx context.Context) LookupVCPUServerResultOutput {
	return o
}

func (o LookupVCPUServerResultOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o LookupVCPUServerResultOutput) BootCdrom() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) string { return v.BootCdrom }).(pulumi.StringOutput)
}

func (o LookupVCPUServerResultOutput) BootImage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) string { return v.BootImage }).(pulumi.StringOutput)
}

func (o LookupVCPUServerResultOutput) BootVolume() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) string { return v.BootVolume }).(pulumi.StringOutput)
}

func (o LookupVCPUServerResultOutput) Cdroms() GetVCPUServerCdromArrayOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) []GetVCPUServerCdrom { return v.Cdroms }).(GetVCPUServerCdromArrayOutput)
}

func (o LookupVCPUServerResultOutput) Cores() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) int { return v.Cores }).(pulumi.IntOutput)
}

func (o LookupVCPUServerResultOutput) CpuFamily() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) string { return v.CpuFamily }).(pulumi.StringOutput)
}

func (o LookupVCPUServerResultOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) string { return v.DatacenterId }).(pulumi.StringOutput)
}

func (o LookupVCPUServerResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupVCPUServerResultOutput) Labels() GetVCPUServerLabelArrayOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) []GetVCPUServerLabel { return v.Labels }).(GetVCPUServerLabelArrayOutput)
}

func (o LookupVCPUServerResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupVCPUServerResultOutput) Nics() GetVCPUServerNicArrayOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) []GetVCPUServerNic { return v.Nics }).(GetVCPUServerNicArrayOutput)
}

func (o LookupVCPUServerResultOutput) Ram() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) int { return v.Ram }).(pulumi.IntOutput)
}

func (o LookupVCPUServerResultOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) string { return v.Token }).(pulumi.StringOutput)
}

func (o LookupVCPUServerResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) string { return v.Type }).(pulumi.StringOutput)
}

func (o LookupVCPUServerResultOutput) VmState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) string { return v.VmState }).(pulumi.StringOutput)
}

func (o LookupVCPUServerResultOutput) Volumes() GetVCPUServerVolumeArrayOutput {
	return o.ApplyT(func(v LookupVCPUServerResult) []GetVCPUServerVolume { return v.Volumes }).(GetVCPUServerVolumeArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVCPUServerResultOutput{})
}
