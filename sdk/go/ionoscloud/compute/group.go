// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Group struct {
	pulumi.CustomResourceState

	AccessActivityLog pulumi.BoolPtrOutput `pulumi:"accessActivityLog"`
	// Privilege for a group to access and manage certificates.
	AccessAndManageCertificates pulumi.BoolPtrOutput `pulumi:"accessAndManageCertificates"`
	// Privilege for a group to access and manage monitoring related functionality (access metrics, CRUD on alarms,
	// alarm-actions etc) using Monotoring-as-a-Service (MaaS).
	AccessAndManageMonitoring pulumi.BoolPtrOutput `pulumi:"accessAndManageMonitoring"`
	// Create backup unit privilege.
	CreateBackupUnit pulumi.BoolPtrOutput `pulumi:"createBackupUnit"`
	CreateDatacenter pulumi.BoolPtrOutput `pulumi:"createDatacenter"`
	// Create Flow Logs privilege.
	CreateFlowLog pulumi.BoolPtrOutput `pulumi:"createFlowLog"`
	// Create internet access privilege.
	CreateInternetAccess pulumi.BoolPtrOutput `pulumi:"createInternetAccess"`
	// Create Kubernetes cluster privilege.
	CreateK8sCluster pulumi.BoolPtrOutput `pulumi:"createK8sCluster"`
	CreatePcc        pulumi.BoolPtrOutput `pulumi:"createPcc"`
	CreateSnapshot   pulumi.BoolPtrOutput `pulumi:"createSnapshot"`
	// Privilege for a group to manage DBaaS related functionality
	ManageDbaas pulumi.BoolPtrOutput `pulumi:"manageDbaas"`
	Name        pulumi.StringOutput  `pulumi:"name"`
	ReserveIp   pulumi.BoolPtrOutput `pulumi:"reserveIp"`
	S3Privilege pulumi.BoolPtrOutput `pulumi:"s3Privilege"`
	// Deprecated: Please use userIds for adding users to the group, since userId will be removed in the future
	UserId  pulumi.StringPtrOutput   `pulumi:"userId"`
	UserIds pulumi.StringArrayOutput `pulumi:"userIds"`
	Users   GroupUserArrayOutput     `pulumi:"users"`
}

// NewGroup registers a new resource with the given unique name, arguments, and options.
func NewGroup(ctx *pulumi.Context,
	name string, args *GroupArgs, opts ...pulumi.ResourceOption) (*Group, error) {
	if args == nil {
		args = &GroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Group
	err := ctx.RegisterResource("ionoscloud:compute/group:Group", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroup gets an existing Group resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupState, opts ...pulumi.ResourceOption) (*Group, error) {
	var resource Group
	err := ctx.ReadResource("ionoscloud:compute/group:Group", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Group resources.
type groupState struct {
	AccessActivityLog *bool `pulumi:"accessActivityLog"`
	// Privilege for a group to access and manage certificates.
	AccessAndManageCertificates *bool `pulumi:"accessAndManageCertificates"`
	// Privilege for a group to access and manage monitoring related functionality (access metrics, CRUD on alarms,
	// alarm-actions etc) using Monotoring-as-a-Service (MaaS).
	AccessAndManageMonitoring *bool `pulumi:"accessAndManageMonitoring"`
	// Create backup unit privilege.
	CreateBackupUnit *bool `pulumi:"createBackupUnit"`
	CreateDatacenter *bool `pulumi:"createDatacenter"`
	// Create Flow Logs privilege.
	CreateFlowLog *bool `pulumi:"createFlowLog"`
	// Create internet access privilege.
	CreateInternetAccess *bool `pulumi:"createInternetAccess"`
	// Create Kubernetes cluster privilege.
	CreateK8sCluster *bool `pulumi:"createK8sCluster"`
	CreatePcc        *bool `pulumi:"createPcc"`
	CreateSnapshot   *bool `pulumi:"createSnapshot"`
	// Privilege for a group to manage DBaaS related functionality
	ManageDbaas *bool   `pulumi:"manageDbaas"`
	Name        *string `pulumi:"name"`
	ReserveIp   *bool   `pulumi:"reserveIp"`
	S3Privilege *bool   `pulumi:"s3Privilege"`
	// Deprecated: Please use userIds for adding users to the group, since userId will be removed in the future
	UserId  *string     `pulumi:"userId"`
	UserIds []string    `pulumi:"userIds"`
	Users   []GroupUser `pulumi:"users"`
}

type GroupState struct {
	AccessActivityLog pulumi.BoolPtrInput
	// Privilege for a group to access and manage certificates.
	AccessAndManageCertificates pulumi.BoolPtrInput
	// Privilege for a group to access and manage monitoring related functionality (access metrics, CRUD on alarms,
	// alarm-actions etc) using Monotoring-as-a-Service (MaaS).
	AccessAndManageMonitoring pulumi.BoolPtrInput
	// Create backup unit privilege.
	CreateBackupUnit pulumi.BoolPtrInput
	CreateDatacenter pulumi.BoolPtrInput
	// Create Flow Logs privilege.
	CreateFlowLog pulumi.BoolPtrInput
	// Create internet access privilege.
	CreateInternetAccess pulumi.BoolPtrInput
	// Create Kubernetes cluster privilege.
	CreateK8sCluster pulumi.BoolPtrInput
	CreatePcc        pulumi.BoolPtrInput
	CreateSnapshot   pulumi.BoolPtrInput
	// Privilege for a group to manage DBaaS related functionality
	ManageDbaas pulumi.BoolPtrInput
	Name        pulumi.StringPtrInput
	ReserveIp   pulumi.BoolPtrInput
	S3Privilege pulumi.BoolPtrInput
	// Deprecated: Please use userIds for adding users to the group, since userId will be removed in the future
	UserId  pulumi.StringPtrInput
	UserIds pulumi.StringArrayInput
	Users   GroupUserArrayInput
}

func (GroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupState)(nil)).Elem()
}

type groupArgs struct {
	AccessActivityLog *bool `pulumi:"accessActivityLog"`
	// Privilege for a group to access and manage certificates.
	AccessAndManageCertificates *bool `pulumi:"accessAndManageCertificates"`
	// Privilege for a group to access and manage monitoring related functionality (access metrics, CRUD on alarms,
	// alarm-actions etc) using Monotoring-as-a-Service (MaaS).
	AccessAndManageMonitoring *bool `pulumi:"accessAndManageMonitoring"`
	// Create backup unit privilege.
	CreateBackupUnit *bool `pulumi:"createBackupUnit"`
	CreateDatacenter *bool `pulumi:"createDatacenter"`
	// Create Flow Logs privilege.
	CreateFlowLog *bool `pulumi:"createFlowLog"`
	// Create internet access privilege.
	CreateInternetAccess *bool `pulumi:"createInternetAccess"`
	// Create Kubernetes cluster privilege.
	CreateK8sCluster *bool `pulumi:"createK8sCluster"`
	CreatePcc        *bool `pulumi:"createPcc"`
	CreateSnapshot   *bool `pulumi:"createSnapshot"`
	// Privilege for a group to manage DBaaS related functionality
	ManageDbaas *bool   `pulumi:"manageDbaas"`
	Name        *string `pulumi:"name"`
	ReserveIp   *bool   `pulumi:"reserveIp"`
	S3Privilege *bool   `pulumi:"s3Privilege"`
	// Deprecated: Please use userIds for adding users to the group, since userId will be removed in the future
	UserId  *string  `pulumi:"userId"`
	UserIds []string `pulumi:"userIds"`
}

// The set of arguments for constructing a Group resource.
type GroupArgs struct {
	AccessActivityLog pulumi.BoolPtrInput
	// Privilege for a group to access and manage certificates.
	AccessAndManageCertificates pulumi.BoolPtrInput
	// Privilege for a group to access and manage monitoring related functionality (access metrics, CRUD on alarms,
	// alarm-actions etc) using Monotoring-as-a-Service (MaaS).
	AccessAndManageMonitoring pulumi.BoolPtrInput
	// Create backup unit privilege.
	CreateBackupUnit pulumi.BoolPtrInput
	CreateDatacenter pulumi.BoolPtrInput
	// Create Flow Logs privilege.
	CreateFlowLog pulumi.BoolPtrInput
	// Create internet access privilege.
	CreateInternetAccess pulumi.BoolPtrInput
	// Create Kubernetes cluster privilege.
	CreateK8sCluster pulumi.BoolPtrInput
	CreatePcc        pulumi.BoolPtrInput
	CreateSnapshot   pulumi.BoolPtrInput
	// Privilege for a group to manage DBaaS related functionality
	ManageDbaas pulumi.BoolPtrInput
	Name        pulumi.StringPtrInput
	ReserveIp   pulumi.BoolPtrInput
	S3Privilege pulumi.BoolPtrInput
	// Deprecated: Please use userIds for adding users to the group, since userId will be removed in the future
	UserId  pulumi.StringPtrInput
	UserIds pulumi.StringArrayInput
}

func (GroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupArgs)(nil)).Elem()
}

type GroupInput interface {
	pulumi.Input

	ToGroupOutput() GroupOutput
	ToGroupOutputWithContext(ctx context.Context) GroupOutput
}

func (*Group) ElementType() reflect.Type {
	return reflect.TypeOf((**Group)(nil)).Elem()
}

func (i *Group) ToGroupOutput() GroupOutput {
	return i.ToGroupOutputWithContext(context.Background())
}

func (i *Group) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupOutput)
}

// GroupArrayInput is an input type that accepts GroupArray and GroupArrayOutput values.
// You can construct a concrete instance of `GroupArrayInput` via:
//
//	GroupArray{ GroupArgs{...} }
type GroupArrayInput interface {
	pulumi.Input

	ToGroupArrayOutput() GroupArrayOutput
	ToGroupArrayOutputWithContext(context.Context) GroupArrayOutput
}

type GroupArray []GroupInput

func (GroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Group)(nil)).Elem()
}

func (i GroupArray) ToGroupArrayOutput() GroupArrayOutput {
	return i.ToGroupArrayOutputWithContext(context.Background())
}

func (i GroupArray) ToGroupArrayOutputWithContext(ctx context.Context) GroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupArrayOutput)
}

// GroupMapInput is an input type that accepts GroupMap and GroupMapOutput values.
// You can construct a concrete instance of `GroupMapInput` via:
//
//	GroupMap{ "key": GroupArgs{...} }
type GroupMapInput interface {
	pulumi.Input

	ToGroupMapOutput() GroupMapOutput
	ToGroupMapOutputWithContext(context.Context) GroupMapOutput
}

type GroupMap map[string]GroupInput

func (GroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Group)(nil)).Elem()
}

func (i GroupMap) ToGroupMapOutput() GroupMapOutput {
	return i.ToGroupMapOutputWithContext(context.Background())
}

func (i GroupMap) ToGroupMapOutputWithContext(ctx context.Context) GroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMapOutput)
}

type GroupOutput struct{ *pulumi.OutputState }

func (GroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Group)(nil)).Elem()
}

func (o GroupOutput) ToGroupOutput() GroupOutput {
	return o
}

func (o GroupOutput) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return o
}

func (o GroupOutput) AccessActivityLog() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolPtrOutput { return v.AccessActivityLog }).(pulumi.BoolPtrOutput)
}

// Privilege for a group to access and manage certificates.
func (o GroupOutput) AccessAndManageCertificates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolPtrOutput { return v.AccessAndManageCertificates }).(pulumi.BoolPtrOutput)
}

// Privilege for a group to access and manage monitoring related functionality (access metrics, CRUD on alarms,
// alarm-actions etc) using Monotoring-as-a-Service (MaaS).
func (o GroupOutput) AccessAndManageMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolPtrOutput { return v.AccessAndManageMonitoring }).(pulumi.BoolPtrOutput)
}

// Create backup unit privilege.
func (o GroupOutput) CreateBackupUnit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolPtrOutput { return v.CreateBackupUnit }).(pulumi.BoolPtrOutput)
}

func (o GroupOutput) CreateDatacenter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolPtrOutput { return v.CreateDatacenter }).(pulumi.BoolPtrOutput)
}

// Create Flow Logs privilege.
func (o GroupOutput) CreateFlowLog() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolPtrOutput { return v.CreateFlowLog }).(pulumi.BoolPtrOutput)
}

// Create internet access privilege.
func (o GroupOutput) CreateInternetAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolPtrOutput { return v.CreateInternetAccess }).(pulumi.BoolPtrOutput)
}

// Create Kubernetes cluster privilege.
func (o GroupOutput) CreateK8sCluster() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolPtrOutput { return v.CreateK8sCluster }).(pulumi.BoolPtrOutput)
}

func (o GroupOutput) CreatePcc() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolPtrOutput { return v.CreatePcc }).(pulumi.BoolPtrOutput)
}

func (o GroupOutput) CreateSnapshot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolPtrOutput { return v.CreateSnapshot }).(pulumi.BoolPtrOutput)
}

// Privilege for a group to manage DBaaS related functionality
func (o GroupOutput) ManageDbaas() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolPtrOutput { return v.ManageDbaas }).(pulumi.BoolPtrOutput)
}

func (o GroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o GroupOutput) ReserveIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolPtrOutput { return v.ReserveIp }).(pulumi.BoolPtrOutput)
}

func (o GroupOutput) S3Privilege() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolPtrOutput { return v.S3Privilege }).(pulumi.BoolPtrOutput)
}

// Deprecated: Please use userIds for adding users to the group, since userId will be removed in the future
func (o GroupOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.StringPtrOutput { return v.UserId }).(pulumi.StringPtrOutput)
}

func (o GroupOutput) UserIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Group) pulumi.StringArrayOutput { return v.UserIds }).(pulumi.StringArrayOutput)
}

func (o GroupOutput) Users() GroupUserArrayOutput {
	return o.ApplyT(func(v *Group) GroupUserArrayOutput { return v.Users }).(GroupUserArrayOutput)
}

type GroupArrayOutput struct{ *pulumi.OutputState }

func (GroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Group)(nil)).Elem()
}

func (o GroupArrayOutput) ToGroupArrayOutput() GroupArrayOutput {
	return o
}

func (o GroupArrayOutput) ToGroupArrayOutputWithContext(ctx context.Context) GroupArrayOutput {
	return o
}

func (o GroupArrayOutput) Index(i pulumi.IntInput) GroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Group {
		return vs[0].([]*Group)[vs[1].(int)]
	}).(GroupOutput)
}

type GroupMapOutput struct{ *pulumi.OutputState }

func (GroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Group)(nil)).Elem()
}

func (o GroupMapOutput) ToGroupMapOutput() GroupMapOutput {
	return o
}

func (o GroupMapOutput) ToGroupMapOutputWithContext(ctx context.Context) GroupMapOutput {
	return o
}

func (o GroupMapOutput) MapIndex(k pulumi.StringInput) GroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Group {
		return vs[0].(map[string]*Group)[vs[1].(string)]
	}).(GroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupInput)(nil)).Elem(), &Group{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupArrayInput)(nil)).Elem(), GroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMapInput)(nil)).Elem(), GroupMap{})
	pulumi.RegisterOutputType(GroupOutput{})
	pulumi.RegisterOutputType(GroupArrayOutput{})
	pulumi.RegisterOutputType(GroupMapOutput{})
}
