// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type User struct {
	pulumi.CustomResourceState

	// Indicates if the user is active
	Active pulumi.BoolPtrOutput `pulumi:"active"`
	// Indicates if the user has administrative rights. Administrators do not need to be managed in groups, as they
	// automatically have access to all resources associated with the contract.
	Administrator pulumi.BoolPtrOutput `pulumi:"administrator"`
	// Email address of the user
	Email     pulumi.StringOutput `pulumi:"email"`
	FirstName pulumi.StringOutput `pulumi:"firstName"`
	// Indicates if secure (two-factor) authentication is forced for the user
	ForceSecAuth pulumi.BoolPtrOutput `pulumi:"forceSecAuth"`
	// Ids of the groups that the user is a member of
	GroupIds          pulumi.StringArrayOutput `pulumi:"groupIds"`
	LastName          pulumi.StringOutput      `pulumi:"lastName"`
	Password          pulumi.StringOutput      `pulumi:"password"`
	S3CanonicalUserId pulumi.StringOutput      `pulumi:"s3CanonicalUserId"`
	// Indicates if secure (two-factor) authentication is active for the user. It can not be used in create requests - can be
	// used in update.
	SecAuthActive pulumi.BoolOutput `pulumi:"secAuthActive"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.FirstName == nil {
		return nil, errors.New("invalid value for required argument 'FirstName'")
	}
	if args.LastName == nil {
		return nil, errors.New("invalid value for required argument 'LastName'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource User
	err := ctx.RegisterResource("ionoscloud:compute/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("ionoscloud:compute/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// Indicates if the user is active
	Active *bool `pulumi:"active"`
	// Indicates if the user has administrative rights. Administrators do not need to be managed in groups, as they
	// automatically have access to all resources associated with the contract.
	Administrator *bool `pulumi:"administrator"`
	// Email address of the user
	Email     *string `pulumi:"email"`
	FirstName *string `pulumi:"firstName"`
	// Indicates if secure (two-factor) authentication is forced for the user
	ForceSecAuth *bool `pulumi:"forceSecAuth"`
	// Ids of the groups that the user is a member of
	GroupIds          []string `pulumi:"groupIds"`
	LastName          *string  `pulumi:"lastName"`
	Password          *string  `pulumi:"password"`
	S3CanonicalUserId *string  `pulumi:"s3CanonicalUserId"`
	// Indicates if secure (two-factor) authentication is active for the user. It can not be used in create requests - can be
	// used in update.
	SecAuthActive *bool `pulumi:"secAuthActive"`
}

type UserState struct {
	// Indicates if the user is active
	Active pulumi.BoolPtrInput
	// Indicates if the user has administrative rights. Administrators do not need to be managed in groups, as they
	// automatically have access to all resources associated with the contract.
	Administrator pulumi.BoolPtrInput
	// Email address of the user
	Email     pulumi.StringPtrInput
	FirstName pulumi.StringPtrInput
	// Indicates if secure (two-factor) authentication is forced for the user
	ForceSecAuth pulumi.BoolPtrInput
	// Ids of the groups that the user is a member of
	GroupIds          pulumi.StringArrayInput
	LastName          pulumi.StringPtrInput
	Password          pulumi.StringPtrInput
	S3CanonicalUserId pulumi.StringPtrInput
	// Indicates if secure (two-factor) authentication is active for the user. It can not be used in create requests - can be
	// used in update.
	SecAuthActive pulumi.BoolPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// Indicates if the user is active
	Active *bool `pulumi:"active"`
	// Indicates if the user has administrative rights. Administrators do not need to be managed in groups, as they
	// automatically have access to all resources associated with the contract.
	Administrator *bool `pulumi:"administrator"`
	// Email address of the user
	Email     string `pulumi:"email"`
	FirstName string `pulumi:"firstName"`
	// Indicates if secure (two-factor) authentication is forced for the user
	ForceSecAuth *bool `pulumi:"forceSecAuth"`
	// Ids of the groups that the user is a member of
	GroupIds []string `pulumi:"groupIds"`
	LastName string   `pulumi:"lastName"`
	Password string   `pulumi:"password"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// Indicates if the user is active
	Active pulumi.BoolPtrInput
	// Indicates if the user has administrative rights. Administrators do not need to be managed in groups, as they
	// automatically have access to all resources associated with the contract.
	Administrator pulumi.BoolPtrInput
	// Email address of the user
	Email     pulumi.StringInput
	FirstName pulumi.StringInput
	// Indicates if secure (two-factor) authentication is forced for the user
	ForceSecAuth pulumi.BoolPtrInput
	// Ids of the groups that the user is a member of
	GroupIds pulumi.StringArrayInput
	LastName pulumi.StringInput
	Password pulumi.StringInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//	UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//	UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

// Indicates if the user is active
func (o UserOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.Active }).(pulumi.BoolPtrOutput)
}

// Indicates if the user has administrative rights. Administrators do not need to be managed in groups, as they
// automatically have access to all resources associated with the contract.
func (o UserOutput) Administrator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.Administrator }).(pulumi.BoolPtrOutput)
}

// Email address of the user
func (o UserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

func (o UserOutput) FirstName() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.FirstName }).(pulumi.StringOutput)
}

// Indicates if secure (two-factor) authentication is forced for the user
func (o UserOutput) ForceSecAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.ForceSecAuth }).(pulumi.BoolPtrOutput)
}

// Ids of the groups that the user is a member of
func (o UserOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *User) pulumi.StringArrayOutput { return v.GroupIds }).(pulumi.StringArrayOutput)
}

func (o UserOutput) LastName() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.LastName }).(pulumi.StringOutput)
}

func (o UserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

func (o UserOutput) S3CanonicalUserId() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.S3CanonicalUserId }).(pulumi.StringOutput)
}

// Indicates if secure (two-factor) authentication is active for the user. It can not be used in create requests - can be
// used in update.
func (o UserOutput) SecAuthActive() pulumi.BoolOutput {
	return o.ApplyT(func(v *User) pulumi.BoolOutput { return v.SecAuthActive }).(pulumi.BoolOutput)
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}
