// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NatGatewayRule struct {
	pulumi.CustomResourceState

	DatacenterId pulumi.StringOutput `pulumi:"datacenterId"`
	// Name of the NAT gateway rule
	Name         pulumi.StringOutput `pulumi:"name"`
	NatgatewayId pulumi.StringOutput `pulumi:"natgatewayId"`
	// Protocol of the NAT gateway rule. Defaults to ALL. If protocol is 'ICMP' then targetPortRange start and end cannot be
	// set.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Public IP address of the NAT gateway rule. Specifies the address used for masking outgoing packets source address field.
	// Should be one of the customer reserved IP address already configured on the NAT gateway resource
	PublicIp pulumi.StringOutput `pulumi:"publicIp"`
	// Source subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based
	// on the packets source IP address.
	SourceSubnet pulumi.StringOutput `pulumi:"sourceSubnet"`
	// Target port range of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to
	// based on destination port. If none is provided, rule will match any port
	TargetPortRange NatGatewayRuleTargetPortRangeOutput `pulumi:"targetPortRange"`
	// Target or destination subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule
	// applies to based on the packets destination IP address. If none is provided, rule will match any address.
	TargetSubnet pulumi.StringOutput `pulumi:"targetSubnet"`
	// Type of the NAT gateway rule.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNatGatewayRule registers a new resource with the given unique name, arguments, and options.
func NewNatGatewayRule(ctx *pulumi.Context,
	name string, args *NatGatewayRuleArgs, opts ...pulumi.ResourceOption) (*NatGatewayRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatacenterId == nil {
		return nil, errors.New("invalid value for required argument 'DatacenterId'")
	}
	if args.NatgatewayId == nil {
		return nil, errors.New("invalid value for required argument 'NatgatewayId'")
	}
	if args.PublicIp == nil {
		return nil, errors.New("invalid value for required argument 'PublicIp'")
	}
	if args.SourceSubnet == nil {
		return nil, errors.New("invalid value for required argument 'SourceSubnet'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NatGatewayRule
	err := ctx.RegisterResource("ionoscloud:compute/natGatewayRule:NatGatewayRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNatGatewayRule gets an existing NatGatewayRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNatGatewayRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NatGatewayRuleState, opts ...pulumi.ResourceOption) (*NatGatewayRule, error) {
	var resource NatGatewayRule
	err := ctx.ReadResource("ionoscloud:compute/natGatewayRule:NatGatewayRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NatGatewayRule resources.
type natGatewayRuleState struct {
	DatacenterId *string `pulumi:"datacenterId"`
	// Name of the NAT gateway rule
	Name         *string `pulumi:"name"`
	NatgatewayId *string `pulumi:"natgatewayId"`
	// Protocol of the NAT gateway rule. Defaults to ALL. If protocol is 'ICMP' then targetPortRange start and end cannot be
	// set.
	Protocol *string `pulumi:"protocol"`
	// Public IP address of the NAT gateway rule. Specifies the address used for masking outgoing packets source address field.
	// Should be one of the customer reserved IP address already configured on the NAT gateway resource
	PublicIp *string `pulumi:"publicIp"`
	// Source subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based
	// on the packets source IP address.
	SourceSubnet *string `pulumi:"sourceSubnet"`
	// Target port range of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to
	// based on destination port. If none is provided, rule will match any port
	TargetPortRange *NatGatewayRuleTargetPortRange `pulumi:"targetPortRange"`
	// Target or destination subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule
	// applies to based on the packets destination IP address. If none is provided, rule will match any address.
	TargetSubnet *string `pulumi:"targetSubnet"`
	// Type of the NAT gateway rule.
	Type *string `pulumi:"type"`
}

type NatGatewayRuleState struct {
	DatacenterId pulumi.StringPtrInput
	// Name of the NAT gateway rule
	Name         pulumi.StringPtrInput
	NatgatewayId pulumi.StringPtrInput
	// Protocol of the NAT gateway rule. Defaults to ALL. If protocol is 'ICMP' then targetPortRange start and end cannot be
	// set.
	Protocol pulumi.StringPtrInput
	// Public IP address of the NAT gateway rule. Specifies the address used for masking outgoing packets source address field.
	// Should be one of the customer reserved IP address already configured on the NAT gateway resource
	PublicIp pulumi.StringPtrInput
	// Source subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based
	// on the packets source IP address.
	SourceSubnet pulumi.StringPtrInput
	// Target port range of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to
	// based on destination port. If none is provided, rule will match any port
	TargetPortRange NatGatewayRuleTargetPortRangePtrInput
	// Target or destination subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule
	// applies to based on the packets destination IP address. If none is provided, rule will match any address.
	TargetSubnet pulumi.StringPtrInput
	// Type of the NAT gateway rule.
	Type pulumi.StringPtrInput
}

func (NatGatewayRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*natGatewayRuleState)(nil)).Elem()
}

type natGatewayRuleArgs struct {
	DatacenterId string `pulumi:"datacenterId"`
	// Name of the NAT gateway rule
	Name         *string `pulumi:"name"`
	NatgatewayId string  `pulumi:"natgatewayId"`
	// Protocol of the NAT gateway rule. Defaults to ALL. If protocol is 'ICMP' then targetPortRange start and end cannot be
	// set.
	Protocol *string `pulumi:"protocol"`
	// Public IP address of the NAT gateway rule. Specifies the address used for masking outgoing packets source address field.
	// Should be one of the customer reserved IP address already configured on the NAT gateway resource
	PublicIp string `pulumi:"publicIp"`
	// Source subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based
	// on the packets source IP address.
	SourceSubnet string `pulumi:"sourceSubnet"`
	// Target port range of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to
	// based on destination port. If none is provided, rule will match any port
	TargetPortRange *NatGatewayRuleTargetPortRange `pulumi:"targetPortRange"`
	// Target or destination subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule
	// applies to based on the packets destination IP address. If none is provided, rule will match any address.
	TargetSubnet *string `pulumi:"targetSubnet"`
	// Type of the NAT gateway rule.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a NatGatewayRule resource.
type NatGatewayRuleArgs struct {
	DatacenterId pulumi.StringInput
	// Name of the NAT gateway rule
	Name         pulumi.StringPtrInput
	NatgatewayId pulumi.StringInput
	// Protocol of the NAT gateway rule. Defaults to ALL. If protocol is 'ICMP' then targetPortRange start and end cannot be
	// set.
	Protocol pulumi.StringPtrInput
	// Public IP address of the NAT gateway rule. Specifies the address used for masking outgoing packets source address field.
	// Should be one of the customer reserved IP address already configured on the NAT gateway resource
	PublicIp pulumi.StringInput
	// Source subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based
	// on the packets source IP address.
	SourceSubnet pulumi.StringInput
	// Target port range of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to
	// based on destination port. If none is provided, rule will match any port
	TargetPortRange NatGatewayRuleTargetPortRangePtrInput
	// Target or destination subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule
	// applies to based on the packets destination IP address. If none is provided, rule will match any address.
	TargetSubnet pulumi.StringPtrInput
	// Type of the NAT gateway rule.
	Type pulumi.StringPtrInput
}

func (NatGatewayRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*natGatewayRuleArgs)(nil)).Elem()
}

type NatGatewayRuleInput interface {
	pulumi.Input

	ToNatGatewayRuleOutput() NatGatewayRuleOutput
	ToNatGatewayRuleOutputWithContext(ctx context.Context) NatGatewayRuleOutput
}

func (*NatGatewayRule) ElementType() reflect.Type {
	return reflect.TypeOf((**NatGatewayRule)(nil)).Elem()
}

func (i *NatGatewayRule) ToNatGatewayRuleOutput() NatGatewayRuleOutput {
	return i.ToNatGatewayRuleOutputWithContext(context.Background())
}

func (i *NatGatewayRule) ToNatGatewayRuleOutputWithContext(ctx context.Context) NatGatewayRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatGatewayRuleOutput)
}

// NatGatewayRuleArrayInput is an input type that accepts NatGatewayRuleArray and NatGatewayRuleArrayOutput values.
// You can construct a concrete instance of `NatGatewayRuleArrayInput` via:
//
//	NatGatewayRuleArray{ NatGatewayRuleArgs{...} }
type NatGatewayRuleArrayInput interface {
	pulumi.Input

	ToNatGatewayRuleArrayOutput() NatGatewayRuleArrayOutput
	ToNatGatewayRuleArrayOutputWithContext(context.Context) NatGatewayRuleArrayOutput
}

type NatGatewayRuleArray []NatGatewayRuleInput

func (NatGatewayRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NatGatewayRule)(nil)).Elem()
}

func (i NatGatewayRuleArray) ToNatGatewayRuleArrayOutput() NatGatewayRuleArrayOutput {
	return i.ToNatGatewayRuleArrayOutputWithContext(context.Background())
}

func (i NatGatewayRuleArray) ToNatGatewayRuleArrayOutputWithContext(ctx context.Context) NatGatewayRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatGatewayRuleArrayOutput)
}

// NatGatewayRuleMapInput is an input type that accepts NatGatewayRuleMap and NatGatewayRuleMapOutput values.
// You can construct a concrete instance of `NatGatewayRuleMapInput` via:
//
//	NatGatewayRuleMap{ "key": NatGatewayRuleArgs{...} }
type NatGatewayRuleMapInput interface {
	pulumi.Input

	ToNatGatewayRuleMapOutput() NatGatewayRuleMapOutput
	ToNatGatewayRuleMapOutputWithContext(context.Context) NatGatewayRuleMapOutput
}

type NatGatewayRuleMap map[string]NatGatewayRuleInput

func (NatGatewayRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NatGatewayRule)(nil)).Elem()
}

func (i NatGatewayRuleMap) ToNatGatewayRuleMapOutput() NatGatewayRuleMapOutput {
	return i.ToNatGatewayRuleMapOutputWithContext(context.Background())
}

func (i NatGatewayRuleMap) ToNatGatewayRuleMapOutputWithContext(ctx context.Context) NatGatewayRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatGatewayRuleMapOutput)
}

type NatGatewayRuleOutput struct{ *pulumi.OutputState }

func (NatGatewayRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NatGatewayRule)(nil)).Elem()
}

func (o NatGatewayRuleOutput) ToNatGatewayRuleOutput() NatGatewayRuleOutput {
	return o
}

func (o NatGatewayRuleOutput) ToNatGatewayRuleOutputWithContext(ctx context.Context) NatGatewayRuleOutput {
	return o
}

func (o NatGatewayRuleOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatGatewayRule) pulumi.StringOutput { return v.DatacenterId }).(pulumi.StringOutput)
}

// Name of the NAT gateway rule
func (o NatGatewayRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NatGatewayRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NatGatewayRuleOutput) NatgatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatGatewayRule) pulumi.StringOutput { return v.NatgatewayId }).(pulumi.StringOutput)
}

// Protocol of the NAT gateway rule. Defaults to ALL. If protocol is 'ICMP' then targetPortRange start and end cannot be
// set.
func (o NatGatewayRuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *NatGatewayRule) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Public IP address of the NAT gateway rule. Specifies the address used for masking outgoing packets source address field.
// Should be one of the customer reserved IP address already configured on the NAT gateway resource
func (o NatGatewayRuleOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v *NatGatewayRule) pulumi.StringOutput { return v.PublicIp }).(pulumi.StringOutput)
}

// Source subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based
// on the packets source IP address.
func (o NatGatewayRuleOutput) SourceSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v *NatGatewayRule) pulumi.StringOutput { return v.SourceSubnet }).(pulumi.StringOutput)
}

// Target port range of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to
// based on destination port. If none is provided, rule will match any port
func (o NatGatewayRuleOutput) TargetPortRange() NatGatewayRuleTargetPortRangeOutput {
	return o.ApplyT(func(v *NatGatewayRule) NatGatewayRuleTargetPortRangeOutput { return v.TargetPortRange }).(NatGatewayRuleTargetPortRangeOutput)
}

// Target or destination subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule
// applies to based on the packets destination IP address. If none is provided, rule will match any address.
func (o NatGatewayRuleOutput) TargetSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v *NatGatewayRule) pulumi.StringOutput { return v.TargetSubnet }).(pulumi.StringOutput)
}

// Type of the NAT gateway rule.
func (o NatGatewayRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NatGatewayRule) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type NatGatewayRuleArrayOutput struct{ *pulumi.OutputState }

func (NatGatewayRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NatGatewayRule)(nil)).Elem()
}

func (o NatGatewayRuleArrayOutput) ToNatGatewayRuleArrayOutput() NatGatewayRuleArrayOutput {
	return o
}

func (o NatGatewayRuleArrayOutput) ToNatGatewayRuleArrayOutputWithContext(ctx context.Context) NatGatewayRuleArrayOutput {
	return o
}

func (o NatGatewayRuleArrayOutput) Index(i pulumi.IntInput) NatGatewayRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NatGatewayRule {
		return vs[0].([]*NatGatewayRule)[vs[1].(int)]
	}).(NatGatewayRuleOutput)
}

type NatGatewayRuleMapOutput struct{ *pulumi.OutputState }

func (NatGatewayRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NatGatewayRule)(nil)).Elem()
}

func (o NatGatewayRuleMapOutput) ToNatGatewayRuleMapOutput() NatGatewayRuleMapOutput {
	return o
}

func (o NatGatewayRuleMapOutput) ToNatGatewayRuleMapOutputWithContext(ctx context.Context) NatGatewayRuleMapOutput {
	return o
}

func (o NatGatewayRuleMapOutput) MapIndex(k pulumi.StringInput) NatGatewayRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NatGatewayRule {
		return vs[0].(map[string]*NatGatewayRule)[vs[1].(string)]
	}).(NatGatewayRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NatGatewayRuleInput)(nil)).Elem(), &NatGatewayRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*NatGatewayRuleArrayInput)(nil)).Elem(), NatGatewayRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NatGatewayRuleMapInput)(nil)).Elem(), NatGatewayRuleMap{})
	pulumi.RegisterOutputType(NatGatewayRuleOutput{})
	pulumi.RegisterOutputType(NatGatewayRuleArrayOutput{})
	pulumi.RegisterOutputType(NatGatewayRuleMapOutput{})
}
