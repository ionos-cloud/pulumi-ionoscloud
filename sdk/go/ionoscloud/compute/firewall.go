// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Firewall struct {
	pulumi.CustomResourceState

	DatacenterId   pulumi.StringOutput    `pulumi:"datacenterId"`
	IcmpCode       pulumi.StringPtrOutput `pulumi:"icmpCode"`
	IcmpType       pulumi.StringPtrOutput `pulumi:"icmpType"`
	Name           pulumi.StringOutput    `pulumi:"name"`
	NicId          pulumi.StringOutput    `pulumi:"nicId"`
	PortRangeEnd   pulumi.IntPtrOutput    `pulumi:"portRangeEnd"`
	PortRangeStart pulumi.IntPtrOutput    `pulumi:"portRangeStart"`
	Protocol       pulumi.StringOutput    `pulumi:"protocol"`
	ServerId       pulumi.StringOutput    `pulumi:"serverId"`
	SourceIp       pulumi.StringOutput    `pulumi:"sourceIp"`
	SourceMac      pulumi.StringPtrOutput `pulumi:"sourceMac"`
	TargetIp       pulumi.StringOutput    `pulumi:"targetIp"`
	Type           pulumi.StringOutput    `pulumi:"type"`
}

// NewFirewall registers a new resource with the given unique name, arguments, and options.
func NewFirewall(ctx *pulumi.Context,
	name string, args *FirewallArgs, opts ...pulumi.ResourceOption) (*Firewall, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatacenterId == nil {
		return nil, errors.New("invalid value for required argument 'DatacenterId'")
	}
	if args.NicId == nil {
		return nil, errors.New("invalid value for required argument 'NicId'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Firewall
	err := ctx.RegisterResource("ionoscloud:compute/firewall:Firewall", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewall gets an existing Firewall resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewall(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallState, opts ...pulumi.ResourceOption) (*Firewall, error) {
	var resource Firewall
	err := ctx.ReadResource("ionoscloud:compute/firewall:Firewall", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Firewall resources.
type firewallState struct {
	DatacenterId   *string `pulumi:"datacenterId"`
	IcmpCode       *string `pulumi:"icmpCode"`
	IcmpType       *string `pulumi:"icmpType"`
	Name           *string `pulumi:"name"`
	NicId          *string `pulumi:"nicId"`
	PortRangeEnd   *int    `pulumi:"portRangeEnd"`
	PortRangeStart *int    `pulumi:"portRangeStart"`
	Protocol       *string `pulumi:"protocol"`
	ServerId       *string `pulumi:"serverId"`
	SourceIp       *string `pulumi:"sourceIp"`
	SourceMac      *string `pulumi:"sourceMac"`
	TargetIp       *string `pulumi:"targetIp"`
	Type           *string `pulumi:"type"`
}

type FirewallState struct {
	DatacenterId   pulumi.StringPtrInput
	IcmpCode       pulumi.StringPtrInput
	IcmpType       pulumi.StringPtrInput
	Name           pulumi.StringPtrInput
	NicId          pulumi.StringPtrInput
	PortRangeEnd   pulumi.IntPtrInput
	PortRangeStart pulumi.IntPtrInput
	Protocol       pulumi.StringPtrInput
	ServerId       pulumi.StringPtrInput
	SourceIp       pulumi.StringPtrInput
	SourceMac      pulumi.StringPtrInput
	TargetIp       pulumi.StringPtrInput
	Type           pulumi.StringPtrInput
}

func (FirewallState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallState)(nil)).Elem()
}

type firewallArgs struct {
	DatacenterId   string  `pulumi:"datacenterId"`
	IcmpCode       *string `pulumi:"icmpCode"`
	IcmpType       *string `pulumi:"icmpType"`
	Name           *string `pulumi:"name"`
	NicId          string  `pulumi:"nicId"`
	PortRangeEnd   *int    `pulumi:"portRangeEnd"`
	PortRangeStart *int    `pulumi:"portRangeStart"`
	Protocol       string  `pulumi:"protocol"`
	ServerId       string  `pulumi:"serverId"`
	SourceIp       *string `pulumi:"sourceIp"`
	SourceMac      *string `pulumi:"sourceMac"`
	TargetIp       *string `pulumi:"targetIp"`
	Type           *string `pulumi:"type"`
}

// The set of arguments for constructing a Firewall resource.
type FirewallArgs struct {
	DatacenterId   pulumi.StringInput
	IcmpCode       pulumi.StringPtrInput
	IcmpType       pulumi.StringPtrInput
	Name           pulumi.StringPtrInput
	NicId          pulumi.StringInput
	PortRangeEnd   pulumi.IntPtrInput
	PortRangeStart pulumi.IntPtrInput
	Protocol       pulumi.StringInput
	ServerId       pulumi.StringInput
	SourceIp       pulumi.StringPtrInput
	SourceMac      pulumi.StringPtrInput
	TargetIp       pulumi.StringPtrInput
	Type           pulumi.StringPtrInput
}

func (FirewallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallArgs)(nil)).Elem()
}

type FirewallInput interface {
	pulumi.Input

	ToFirewallOutput() FirewallOutput
	ToFirewallOutputWithContext(ctx context.Context) FirewallOutput
}

func (*Firewall) ElementType() reflect.Type {
	return reflect.TypeOf((**Firewall)(nil)).Elem()
}

func (i *Firewall) ToFirewallOutput() FirewallOutput {
	return i.ToFirewallOutputWithContext(context.Background())
}

func (i *Firewall) ToFirewallOutputWithContext(ctx context.Context) FirewallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallOutput)
}

// FirewallArrayInput is an input type that accepts FirewallArray and FirewallArrayOutput values.
// You can construct a concrete instance of `FirewallArrayInput` via:
//
//	FirewallArray{ FirewallArgs{...} }
type FirewallArrayInput interface {
	pulumi.Input

	ToFirewallArrayOutput() FirewallArrayOutput
	ToFirewallArrayOutputWithContext(context.Context) FirewallArrayOutput
}

type FirewallArray []FirewallInput

func (FirewallArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Firewall)(nil)).Elem()
}

func (i FirewallArray) ToFirewallArrayOutput() FirewallArrayOutput {
	return i.ToFirewallArrayOutputWithContext(context.Background())
}

func (i FirewallArray) ToFirewallArrayOutputWithContext(ctx context.Context) FirewallArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallArrayOutput)
}

// FirewallMapInput is an input type that accepts FirewallMap and FirewallMapOutput values.
// You can construct a concrete instance of `FirewallMapInput` via:
//
//	FirewallMap{ "key": FirewallArgs{...} }
type FirewallMapInput interface {
	pulumi.Input

	ToFirewallMapOutput() FirewallMapOutput
	ToFirewallMapOutputWithContext(context.Context) FirewallMapOutput
}

type FirewallMap map[string]FirewallInput

func (FirewallMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Firewall)(nil)).Elem()
}

func (i FirewallMap) ToFirewallMapOutput() FirewallMapOutput {
	return i.ToFirewallMapOutputWithContext(context.Background())
}

func (i FirewallMap) ToFirewallMapOutputWithContext(ctx context.Context) FirewallMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallMapOutput)
}

type FirewallOutput struct{ *pulumi.OutputState }

func (FirewallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Firewall)(nil)).Elem()
}

func (o FirewallOutput) ToFirewallOutput() FirewallOutput {
	return o
}

func (o FirewallOutput) ToFirewallOutputWithContext(ctx context.Context) FirewallOutput {
	return o
}

func (o FirewallOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Firewall) pulumi.StringOutput { return v.DatacenterId }).(pulumi.StringOutput)
}

func (o FirewallOutput) IcmpCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Firewall) pulumi.StringPtrOutput { return v.IcmpCode }).(pulumi.StringPtrOutput)
}

func (o FirewallOutput) IcmpType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Firewall) pulumi.StringPtrOutput { return v.IcmpType }).(pulumi.StringPtrOutput)
}

func (o FirewallOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Firewall) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o FirewallOutput) NicId() pulumi.StringOutput {
	return o.ApplyT(func(v *Firewall) pulumi.StringOutput { return v.NicId }).(pulumi.StringOutput)
}

func (o FirewallOutput) PortRangeEnd() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Firewall) pulumi.IntPtrOutput { return v.PortRangeEnd }).(pulumi.IntPtrOutput)
}

func (o FirewallOutput) PortRangeStart() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Firewall) pulumi.IntPtrOutput { return v.PortRangeStart }).(pulumi.IntPtrOutput)
}

func (o FirewallOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Firewall) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

func (o FirewallOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Firewall) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

func (o FirewallOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Firewall) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

func (o FirewallOutput) SourceMac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Firewall) pulumi.StringPtrOutput { return v.SourceMac }).(pulumi.StringPtrOutput)
}

func (o FirewallOutput) TargetIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Firewall) pulumi.StringOutput { return v.TargetIp }).(pulumi.StringOutput)
}

func (o FirewallOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Firewall) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type FirewallArrayOutput struct{ *pulumi.OutputState }

func (FirewallArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Firewall)(nil)).Elem()
}

func (o FirewallArrayOutput) ToFirewallArrayOutput() FirewallArrayOutput {
	return o
}

func (o FirewallArrayOutput) ToFirewallArrayOutputWithContext(ctx context.Context) FirewallArrayOutput {
	return o
}

func (o FirewallArrayOutput) Index(i pulumi.IntInput) FirewallOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Firewall {
		return vs[0].([]*Firewall)[vs[1].(int)]
	}).(FirewallOutput)
}

type FirewallMapOutput struct{ *pulumi.OutputState }

func (FirewallMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Firewall)(nil)).Elem()
}

func (o FirewallMapOutput) ToFirewallMapOutput() FirewallMapOutput {
	return o
}

func (o FirewallMapOutput) ToFirewallMapOutputWithContext(ctx context.Context) FirewallMapOutput {
	return o
}

func (o FirewallMapOutput) MapIndex(k pulumi.StringInput) FirewallOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Firewall {
		return vs[0].(map[string]*Firewall)[vs[1].(string)]
	}).(FirewallOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallInput)(nil)).Elem(), &Firewall{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallArrayInput)(nil)).Elem(), FirewallArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallMapInput)(nil)).Elem(), FirewallMap{})
	pulumi.RegisterOutputType(FirewallOutput{})
	pulumi.RegisterOutputType(FirewallArrayOutput{})
	pulumi.RegisterOutputType(FirewallMapOutput{})
}
