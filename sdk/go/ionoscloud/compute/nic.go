// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Nic struct {
	pulumi.CustomResourceState

	DatacenterId pulumi.StringOutput  `pulumi:"datacenterId"`
	DeviceNumber pulumi.IntOutput     `pulumi:"deviceNumber"`
	Dhcp         pulumi.BoolPtrOutput `pulumi:"dhcp"`
	// Indicates whether this NIC receives an IPv6 address through DHCP.
	Dhcpv6         pulumi.BoolPtrOutput `pulumi:"dhcpv6"`
	FirewallActive pulumi.BoolPtrOutput `pulumi:"firewallActive"`
	FirewallType   pulumi.StringOutput  `pulumi:"firewallType"`
	// Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture
	// network information such as source and destination IP addresses, source and destination ports, number of packets, amount
	// of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your
	// instances are being accessed.
	Flowlog NicFlowlogPtrOutput `pulumi:"flowlog"`
	// Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks,
	// Passing value null or empty array will assign an IP address automatically.
	Ips pulumi.StringArrayOutput `pulumi:"ips"`
	// IPv6 CIDR block assigned to the NIC.
	Ipv6CidrBlock pulumi.StringOutput `pulumi:"ipv6CidrBlock"`
	// Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6
	// CIDR block assigned to the nic.
	Ipv6Ips  pulumi.StringArrayOutput `pulumi:"ipv6Ips"`
	Lan      pulumi.IntOutput         `pulumi:"lan"`
	Mac      pulumi.StringOutput      `pulumi:"mac"`
	Name     pulumi.StringOutput      `pulumi:"name"`
	PciSlot  pulumi.IntOutput         `pulumi:"pciSlot"`
	ServerId pulumi.StringOutput      `pulumi:"serverId"`
}

// NewNic registers a new resource with the given unique name, arguments, and options.
func NewNic(ctx *pulumi.Context,
	name string, args *NicArgs, opts ...pulumi.ResourceOption) (*Nic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatacenterId == nil {
		return nil, errors.New("invalid value for required argument 'DatacenterId'")
	}
	if args.Lan == nil {
		return nil, errors.New("invalid value for required argument 'Lan'")
	}
	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Nic
	err := ctx.RegisterResource("ionoscloud:compute/nic:Nic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNic gets an existing Nic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NicState, opts ...pulumi.ResourceOption) (*Nic, error) {
	var resource Nic
	err := ctx.ReadResource("ionoscloud:compute/nic:Nic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Nic resources.
type nicState struct {
	DatacenterId *string `pulumi:"datacenterId"`
	DeviceNumber *int    `pulumi:"deviceNumber"`
	Dhcp         *bool   `pulumi:"dhcp"`
	// Indicates whether this NIC receives an IPv6 address through DHCP.
	Dhcpv6         *bool   `pulumi:"dhcpv6"`
	FirewallActive *bool   `pulumi:"firewallActive"`
	FirewallType   *string `pulumi:"firewallType"`
	// Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture
	// network information such as source and destination IP addresses, source and destination ports, number of packets, amount
	// of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your
	// instances are being accessed.
	Flowlog *NicFlowlog `pulumi:"flowlog"`
	// Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks,
	// Passing value null or empty array will assign an IP address automatically.
	Ips []string `pulumi:"ips"`
	// IPv6 CIDR block assigned to the NIC.
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	// Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6
	// CIDR block assigned to the nic.
	Ipv6Ips  []string `pulumi:"ipv6Ips"`
	Lan      *int     `pulumi:"lan"`
	Mac      *string  `pulumi:"mac"`
	Name     *string  `pulumi:"name"`
	PciSlot  *int     `pulumi:"pciSlot"`
	ServerId *string  `pulumi:"serverId"`
}

type NicState struct {
	DatacenterId pulumi.StringPtrInput
	DeviceNumber pulumi.IntPtrInput
	Dhcp         pulumi.BoolPtrInput
	// Indicates whether this NIC receives an IPv6 address through DHCP.
	Dhcpv6         pulumi.BoolPtrInput
	FirewallActive pulumi.BoolPtrInput
	FirewallType   pulumi.StringPtrInput
	// Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture
	// network information such as source and destination IP addresses, source and destination ports, number of packets, amount
	// of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your
	// instances are being accessed.
	Flowlog NicFlowlogPtrInput
	// Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks,
	// Passing value null or empty array will assign an IP address automatically.
	Ips pulumi.StringArrayInput
	// IPv6 CIDR block assigned to the NIC.
	Ipv6CidrBlock pulumi.StringPtrInput
	// Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6
	// CIDR block assigned to the nic.
	Ipv6Ips  pulumi.StringArrayInput
	Lan      pulumi.IntPtrInput
	Mac      pulumi.StringPtrInput
	Name     pulumi.StringPtrInput
	PciSlot  pulumi.IntPtrInput
	ServerId pulumi.StringPtrInput
}

func (NicState) ElementType() reflect.Type {
	return reflect.TypeOf((*nicState)(nil)).Elem()
}

type nicArgs struct {
	DatacenterId string `pulumi:"datacenterId"`
	Dhcp         *bool  `pulumi:"dhcp"`
	// Indicates whether this NIC receives an IPv6 address through DHCP.
	Dhcpv6         *bool   `pulumi:"dhcpv6"`
	FirewallActive *bool   `pulumi:"firewallActive"`
	FirewallType   *string `pulumi:"firewallType"`
	// Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture
	// network information such as source and destination IP addresses, source and destination ports, number of packets, amount
	// of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your
	// instances are being accessed.
	Flowlog *NicFlowlog `pulumi:"flowlog"`
	// Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks,
	// Passing value null or empty array will assign an IP address automatically.
	Ips []string `pulumi:"ips"`
	// IPv6 CIDR block assigned to the NIC.
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	// Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6
	// CIDR block assigned to the nic.
	Ipv6Ips  []string `pulumi:"ipv6Ips"`
	Lan      int      `pulumi:"lan"`
	Name     *string  `pulumi:"name"`
	ServerId string   `pulumi:"serverId"`
}

// The set of arguments for constructing a Nic resource.
type NicArgs struct {
	DatacenterId pulumi.StringInput
	Dhcp         pulumi.BoolPtrInput
	// Indicates whether this NIC receives an IPv6 address through DHCP.
	Dhcpv6         pulumi.BoolPtrInput
	FirewallActive pulumi.BoolPtrInput
	FirewallType   pulumi.StringPtrInput
	// Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture
	// network information such as source and destination IP addresses, source and destination ports, number of packets, amount
	// of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your
	// instances are being accessed.
	Flowlog NicFlowlogPtrInput
	// Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks,
	// Passing value null or empty array will assign an IP address automatically.
	Ips pulumi.StringArrayInput
	// IPv6 CIDR block assigned to the NIC.
	Ipv6CidrBlock pulumi.StringPtrInput
	// Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6
	// CIDR block assigned to the nic.
	Ipv6Ips  pulumi.StringArrayInput
	Lan      pulumi.IntInput
	Name     pulumi.StringPtrInput
	ServerId pulumi.StringInput
}

func (NicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nicArgs)(nil)).Elem()
}

type NicInput interface {
	pulumi.Input

	ToNicOutput() NicOutput
	ToNicOutputWithContext(ctx context.Context) NicOutput
}

func (*Nic) ElementType() reflect.Type {
	return reflect.TypeOf((**Nic)(nil)).Elem()
}

func (i *Nic) ToNicOutput() NicOutput {
	return i.ToNicOutputWithContext(context.Background())
}

func (i *Nic) ToNicOutputWithContext(ctx context.Context) NicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NicOutput)
}

// NicArrayInput is an input type that accepts NicArray and NicArrayOutput values.
// You can construct a concrete instance of `NicArrayInput` via:
//
//	NicArray{ NicArgs{...} }
type NicArrayInput interface {
	pulumi.Input

	ToNicArrayOutput() NicArrayOutput
	ToNicArrayOutputWithContext(context.Context) NicArrayOutput
}

type NicArray []NicInput

func (NicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Nic)(nil)).Elem()
}

func (i NicArray) ToNicArrayOutput() NicArrayOutput {
	return i.ToNicArrayOutputWithContext(context.Background())
}

func (i NicArray) ToNicArrayOutputWithContext(ctx context.Context) NicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NicArrayOutput)
}

// NicMapInput is an input type that accepts NicMap and NicMapOutput values.
// You can construct a concrete instance of `NicMapInput` via:
//
//	NicMap{ "key": NicArgs{...} }
type NicMapInput interface {
	pulumi.Input

	ToNicMapOutput() NicMapOutput
	ToNicMapOutputWithContext(context.Context) NicMapOutput
}

type NicMap map[string]NicInput

func (NicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Nic)(nil)).Elem()
}

func (i NicMap) ToNicMapOutput() NicMapOutput {
	return i.ToNicMapOutputWithContext(context.Background())
}

func (i NicMap) ToNicMapOutputWithContext(ctx context.Context) NicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NicMapOutput)
}

type NicOutput struct{ *pulumi.OutputState }

func (NicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Nic)(nil)).Elem()
}

func (o NicOutput) ToNicOutput() NicOutput {
	return o
}

func (o NicOutput) ToNicOutputWithContext(ctx context.Context) NicOutput {
	return o
}

func (o NicOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Nic) pulumi.StringOutput { return v.DatacenterId }).(pulumi.StringOutput)
}

func (o NicOutput) DeviceNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *Nic) pulumi.IntOutput { return v.DeviceNumber }).(pulumi.IntOutput)
}

func (o NicOutput) Dhcp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Nic) pulumi.BoolPtrOutput { return v.Dhcp }).(pulumi.BoolPtrOutput)
}

// Indicates whether this NIC receives an IPv6 address through DHCP.
func (o NicOutput) Dhcpv6() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Nic) pulumi.BoolPtrOutput { return v.Dhcpv6 }).(pulumi.BoolPtrOutput)
}

func (o NicOutput) FirewallActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Nic) pulumi.BoolPtrOutput { return v.FirewallActive }).(pulumi.BoolPtrOutput)
}

func (o NicOutput) FirewallType() pulumi.StringOutput {
	return o.ApplyT(func(v *Nic) pulumi.StringOutput { return v.FirewallType }).(pulumi.StringOutput)
}

// Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture
// network information such as source and destination IP addresses, source and destination ports, number of packets, amount
// of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your
// instances are being accessed.
func (o NicOutput) Flowlog() NicFlowlogPtrOutput {
	return o.ApplyT(func(v *Nic) NicFlowlogPtrOutput { return v.Flowlog }).(NicFlowlogPtrOutput)
}

// Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks,
// Passing value null or empty array will assign an IP address automatically.
func (o NicOutput) Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Nic) pulumi.StringArrayOutput { return v.Ips }).(pulumi.StringArrayOutput)
}

// IPv6 CIDR block assigned to the NIC.
func (o NicOutput) Ipv6CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *Nic) pulumi.StringOutput { return v.Ipv6CidrBlock }).(pulumi.StringOutput)
}

// Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6
// CIDR block assigned to the nic.
func (o NicOutput) Ipv6Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Nic) pulumi.StringArrayOutput { return v.Ipv6Ips }).(pulumi.StringArrayOutput)
}

func (o NicOutput) Lan() pulumi.IntOutput {
	return o.ApplyT(func(v *Nic) pulumi.IntOutput { return v.Lan }).(pulumi.IntOutput)
}

func (o NicOutput) Mac() pulumi.StringOutput {
	return o.ApplyT(func(v *Nic) pulumi.StringOutput { return v.Mac }).(pulumi.StringOutput)
}

func (o NicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Nic) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NicOutput) PciSlot() pulumi.IntOutput {
	return o.ApplyT(func(v *Nic) pulumi.IntOutput { return v.PciSlot }).(pulumi.IntOutput)
}

func (o NicOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Nic) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

type NicArrayOutput struct{ *pulumi.OutputState }

func (NicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Nic)(nil)).Elem()
}

func (o NicArrayOutput) ToNicArrayOutput() NicArrayOutput {
	return o
}

func (o NicArrayOutput) ToNicArrayOutputWithContext(ctx context.Context) NicArrayOutput {
	return o
}

func (o NicArrayOutput) Index(i pulumi.IntInput) NicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Nic {
		return vs[0].([]*Nic)[vs[1].(int)]
	}).(NicOutput)
}

type NicMapOutput struct{ *pulumi.OutputState }

func (NicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Nic)(nil)).Elem()
}

func (o NicMapOutput) ToNicMapOutput() NicMapOutput {
	return o
}

func (o NicMapOutput) ToNicMapOutputWithContext(ctx context.Context) NicMapOutput {
	return o
}

func (o NicMapOutput) MapIndex(k pulumi.StringInput) NicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Nic {
		return vs[0].(map[string]*Nic)[vs[1].(string)]
	}).(NicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NicInput)(nil)).Elem(), &Nic{})
	pulumi.RegisterInputType(reflect.TypeOf((*NicArrayInput)(nil)).Elem(), NicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NicMapInput)(nil)).Elem(), NicMap{})
	pulumi.RegisterOutputType(NicOutput{})
	pulumi.RegisterOutputType(NicArrayOutput{})
	pulumi.RegisterOutputType(NicMapOutput{})
}
