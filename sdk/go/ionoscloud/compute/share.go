// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages **Shares** and list shares permissions granted to the group members for each shared resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := compute.NewDatacenter(ctx, "example", &compute.DatacenterArgs{
//				Name:              pulumi.String("Datacenter Example"),
//				Location:          pulumi.String("us/las"),
//				Description:       pulumi.String("Datacenter Description"),
//				SecAuthProtection: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			exampleGroup, err := compute.NewGroup(ctx, "example", &compute.GroupArgs{
//				Name:                 pulumi.String("Group Example"),
//				CreateDatacenter:     pulumi.Bool(true),
//				CreateSnapshot:       pulumi.Bool(true),
//				ReserveIp:            pulumi.Bool(true),
//				AccessActivityLog:    pulumi.Bool(true),
//				CreatePcc:            pulumi.Bool(true),
//				S3Privilege:          pulumi.Bool(true),
//				CreateBackupUnit:     pulumi.Bool(true),
//				CreateInternetAccess: pulumi.Bool(true),
//				CreateK8sCluster:     pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewShare(ctx, "example", &compute.ShareArgs{
//				GroupId:        exampleGroup.ID(),
//				ResourceId:     example.ID(),
//				EditPrivilege:  pulumi.Bool(true),
//				SharePrivilege: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Resource Share can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import ionoscloud:compute/share:Share myshare group uuid/resource uuid
// ```
type Share struct {
	pulumi.CustomResourceState

	// [Boolean] The group has permission to edit privileges on this resource.
	EditPrivilege pulumi.BoolPtrOutput `pulumi:"editPrivilege"`
	// [string] The ID of the specific group containing the resource to update.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// [string] The ID of the specific resource to update.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// [Boolean] The group has permission to share this resource.
	//
	// ⚠️ **Note:** There is a limitation due to which the creation of several shares at the same time leads
	// to an error. To avoid this, `parallelism=1` can be used when running `pulumi up` command in order
	// to create the resources in a sequential manner. Another solution involves the usage of `dependsOn`
	// attributes inside the `compute.Share` resource to enforce the sequential creation of the shares.
	SharePrivilege pulumi.BoolPtrOutput `pulumi:"sharePrivilege"`
}

// NewShare registers a new resource with the given unique name, arguments, and options.
func NewShare(ctx *pulumi.Context,
	name string, args *ShareArgs, opts ...pulumi.ResourceOption) (*Share, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Share
	err := ctx.RegisterResource("ionoscloud:compute/share:Share", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetShare gets an existing Share resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetShare(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ShareState, opts ...pulumi.ResourceOption) (*Share, error) {
	var resource Share
	err := ctx.ReadResource("ionoscloud:compute/share:Share", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Share resources.
type shareState struct {
	// [Boolean] The group has permission to edit privileges on this resource.
	EditPrivilege *bool `pulumi:"editPrivilege"`
	// [string] The ID of the specific group containing the resource to update.
	GroupId *string `pulumi:"groupId"`
	// [string] The ID of the specific resource to update.
	ResourceId *string `pulumi:"resourceId"`
	// [Boolean] The group has permission to share this resource.
	//
	// ⚠️ **Note:** There is a limitation due to which the creation of several shares at the same time leads
	// to an error. To avoid this, `parallelism=1` can be used when running `pulumi up` command in order
	// to create the resources in a sequential manner. Another solution involves the usage of `dependsOn`
	// attributes inside the `compute.Share` resource to enforce the sequential creation of the shares.
	SharePrivilege *bool `pulumi:"sharePrivilege"`
}

type ShareState struct {
	// [Boolean] The group has permission to edit privileges on this resource.
	EditPrivilege pulumi.BoolPtrInput
	// [string] The ID of the specific group containing the resource to update.
	GroupId pulumi.StringPtrInput
	// [string] The ID of the specific resource to update.
	ResourceId pulumi.StringPtrInput
	// [Boolean] The group has permission to share this resource.
	//
	// ⚠️ **Note:** There is a limitation due to which the creation of several shares at the same time leads
	// to an error. To avoid this, `parallelism=1` can be used when running `pulumi up` command in order
	// to create the resources in a sequential manner. Another solution involves the usage of `dependsOn`
	// attributes inside the `compute.Share` resource to enforce the sequential creation of the shares.
	SharePrivilege pulumi.BoolPtrInput
}

func (ShareState) ElementType() reflect.Type {
	return reflect.TypeOf((*shareState)(nil)).Elem()
}

type shareArgs struct {
	// [Boolean] The group has permission to edit privileges on this resource.
	EditPrivilege *bool `pulumi:"editPrivilege"`
	// [string] The ID of the specific group containing the resource to update.
	GroupId string `pulumi:"groupId"`
	// [string] The ID of the specific resource to update.
	ResourceId string `pulumi:"resourceId"`
	// [Boolean] The group has permission to share this resource.
	//
	// ⚠️ **Note:** There is a limitation due to which the creation of several shares at the same time leads
	// to an error. To avoid this, `parallelism=1` can be used when running `pulumi up` command in order
	// to create the resources in a sequential manner. Another solution involves the usage of `dependsOn`
	// attributes inside the `compute.Share` resource to enforce the sequential creation of the shares.
	SharePrivilege *bool `pulumi:"sharePrivilege"`
}

// The set of arguments for constructing a Share resource.
type ShareArgs struct {
	// [Boolean] The group has permission to edit privileges on this resource.
	EditPrivilege pulumi.BoolPtrInput
	// [string] The ID of the specific group containing the resource to update.
	GroupId pulumi.StringInput
	// [string] The ID of the specific resource to update.
	ResourceId pulumi.StringInput
	// [Boolean] The group has permission to share this resource.
	//
	// ⚠️ **Note:** There is a limitation due to which the creation of several shares at the same time leads
	// to an error. To avoid this, `parallelism=1` can be used when running `pulumi up` command in order
	// to create the resources in a sequential manner. Another solution involves the usage of `dependsOn`
	// attributes inside the `compute.Share` resource to enforce the sequential creation of the shares.
	SharePrivilege pulumi.BoolPtrInput
}

func (ShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*shareArgs)(nil)).Elem()
}

type ShareInput interface {
	pulumi.Input

	ToShareOutput() ShareOutput
	ToShareOutputWithContext(ctx context.Context) ShareOutput
}

func (*Share) ElementType() reflect.Type {
	return reflect.TypeOf((**Share)(nil)).Elem()
}

func (i *Share) ToShareOutput() ShareOutput {
	return i.ToShareOutputWithContext(context.Background())
}

func (i *Share) ToShareOutputWithContext(ctx context.Context) ShareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareOutput)
}

// ShareArrayInput is an input type that accepts ShareArray and ShareArrayOutput values.
// You can construct a concrete instance of `ShareArrayInput` via:
//
//	ShareArray{ ShareArgs{...} }
type ShareArrayInput interface {
	pulumi.Input

	ToShareArrayOutput() ShareArrayOutput
	ToShareArrayOutputWithContext(context.Context) ShareArrayOutput
}

type ShareArray []ShareInput

func (ShareArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Share)(nil)).Elem()
}

func (i ShareArray) ToShareArrayOutput() ShareArrayOutput {
	return i.ToShareArrayOutputWithContext(context.Background())
}

func (i ShareArray) ToShareArrayOutputWithContext(ctx context.Context) ShareArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareArrayOutput)
}

// ShareMapInput is an input type that accepts ShareMap and ShareMapOutput values.
// You can construct a concrete instance of `ShareMapInput` via:
//
//	ShareMap{ "key": ShareArgs{...} }
type ShareMapInput interface {
	pulumi.Input

	ToShareMapOutput() ShareMapOutput
	ToShareMapOutputWithContext(context.Context) ShareMapOutput
}

type ShareMap map[string]ShareInput

func (ShareMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Share)(nil)).Elem()
}

func (i ShareMap) ToShareMapOutput() ShareMapOutput {
	return i.ToShareMapOutputWithContext(context.Background())
}

func (i ShareMap) ToShareMapOutputWithContext(ctx context.Context) ShareMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareMapOutput)
}

type ShareOutput struct{ *pulumi.OutputState }

func (ShareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Share)(nil)).Elem()
}

func (o ShareOutput) ToShareOutput() ShareOutput {
	return o
}

func (o ShareOutput) ToShareOutputWithContext(ctx context.Context) ShareOutput {
	return o
}

// [Boolean] The group has permission to edit privileges on this resource.
func (o ShareOutput) EditPrivilege() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Share) pulumi.BoolPtrOutput { return v.EditPrivilege }).(pulumi.BoolPtrOutput)
}

// [string] The ID of the specific group containing the resource to update.
func (o ShareOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Share) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// [string] The ID of the specific resource to update.
func (o ShareOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Share) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// [Boolean] The group has permission to share this resource.
//
// ⚠️ **Note:** There is a limitation due to which the creation of several shares at the same time leads
// to an error. To avoid this, `parallelism=1` can be used when running `pulumi up` command in order
// to create the resources in a sequential manner. Another solution involves the usage of `dependsOn`
// attributes inside the `compute.Share` resource to enforce the sequential creation of the shares.
func (o ShareOutput) SharePrivilege() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Share) pulumi.BoolPtrOutput { return v.SharePrivilege }).(pulumi.BoolPtrOutput)
}

type ShareArrayOutput struct{ *pulumi.OutputState }

func (ShareArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Share)(nil)).Elem()
}

func (o ShareArrayOutput) ToShareArrayOutput() ShareArrayOutput {
	return o
}

func (o ShareArrayOutput) ToShareArrayOutputWithContext(ctx context.Context) ShareArrayOutput {
	return o
}

func (o ShareArrayOutput) Index(i pulumi.IntInput) ShareOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Share {
		return vs[0].([]*Share)[vs[1].(int)]
	}).(ShareOutput)
}

type ShareMapOutput struct{ *pulumi.OutputState }

func (ShareMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Share)(nil)).Elem()
}

func (o ShareMapOutput) ToShareMapOutput() ShareMapOutput {
	return o
}

func (o ShareMapOutput) ToShareMapOutputWithContext(ctx context.Context) ShareMapOutput {
	return o
}

func (o ShareMapOutput) MapIndex(k pulumi.StringInput) ShareOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Share {
		return vs[0].(map[string]*Share)[vs[1].(string)]
	}).(ShareOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ShareInput)(nil)).Elem(), &Share{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShareArrayInput)(nil)).Elem(), ShareArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShareMapInput)(nil)).Elem(), ShareMap{})
	pulumi.RegisterOutputType(ShareOutput{})
	pulumi.RegisterOutputType(ShareArrayOutput{})
	pulumi.RegisterOutputType(ShareMapOutput{})
}
