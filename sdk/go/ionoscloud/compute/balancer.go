// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Load Balancer on IonosCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/pulumi/pulumi-random/sdk/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := compute.NewDatacenter(ctx, "example", &compute.DatacenterArgs{
//				Name:              pulumi.String("Datacenter Example"),
//				Location:          pulumi.String("us/las"),
//				Description:       pulumi.String("Datacenter Description"),
//				SecAuthProtection: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewLan(ctx, "example", &compute.LanArgs{
//				DatacenterId: example.ID(),
//				Public:       pulumi.Bool(true),
//				Name:         pulumi.String("Lan Example"),
//			})
//			if err != nil {
//				return err
//			}
//			serverImagePassword, err := random.NewPassword(ctx, "server_image_password", &random.PasswordArgs{
//				Length:  16,
//				Special: false,
//			})
//			if err != nil {
//				return err
//			}
//			exampleServer, err := compute.NewServer(ctx, "example", &compute.ServerArgs{
//				Name:             pulumi.String("Server Example"),
//				DatacenterId:     example.ID(),
//				Cores:            pulumi.Int(1),
//				Ram:              pulumi.Int(1024),
//				AvailabilityZone: pulumi.String("ZONE_1"),
//				CpuFamily:        pulumi.String("INTEL_XEON"),
//				ImageName:        pulumi.String("Ubuntu-20.04"),
//				ImagePassword:    serverImagePassword.Result,
//				Volume: &compute.ServerVolumeArgs{
//					Name:     pulumi.String("system"),
//					Size:     pulumi.Int(14),
//					DiskType: pulumi.String("SSD"),
//				},
//				Nic: &compute.ServerNicArgs{
//					Lan:            pulumi.Int(1),
//					Dhcp:           pulumi.Bool(true),
//					FirewallActive: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewBalancer(ctx, "example", &compute.BalancerArgs{
//				DatacenterId: example.ID(),
//				NicIds: pulumi.StringArray{
//					exampleServer.PrimaryNic,
//				},
//				Name: pulumi.String("Load Balancer Example"),
//				Dhcp: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## A note on nics
//
// When declaring NIC resources to be used with the load balancer, please make sure
// you use the "lifecycle meta-argument" to make sure changes to the lan attribute
// of the nic are ignored.
//
// Please see the Nic resource's documentation for an example on how to do that.
//
// ## Import
//
// Resource Load Balancer can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import ionoscloud:compute/balancer:Balancer myloadbalancer datacenter uuid/loadbalancer uuid
// ```
type Balancer struct {
	pulumi.CustomResourceState

	// [string] The ID of a Virtual Data Center.
	DatacenterId pulumi.StringOutput `pulumi:"datacenterId"`
	// [Boolean] Indicates if the load balancer will reserve an IP using DHCP.
	Dhcp pulumi.BoolPtrOutput `pulumi:"dhcp"`
	// [string] IPv4 address of the load balancer.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// [string] The name of the load balancer.
	Name pulumi.StringOutput `pulumi:"name"`
	// [list] A list of NIC IDs that are part of the load balancer.
	NicIds pulumi.StringArrayOutput `pulumi:"nicIds"`
}

// NewBalancer registers a new resource with the given unique name, arguments, and options.
func NewBalancer(ctx *pulumi.Context,
	name string, args *BalancerArgs, opts ...pulumi.ResourceOption) (*Balancer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatacenterId == nil {
		return nil, errors.New("invalid value for required argument 'DatacenterId'")
	}
	if args.NicIds == nil {
		return nil, errors.New("invalid value for required argument 'NicIds'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Balancer
	err := ctx.RegisterResource("ionoscloud:compute/balancer:Balancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBalancer gets an existing Balancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBalancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BalancerState, opts ...pulumi.ResourceOption) (*Balancer, error) {
	var resource Balancer
	err := ctx.ReadResource("ionoscloud:compute/balancer:Balancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Balancer resources.
type balancerState struct {
	// [string] The ID of a Virtual Data Center.
	DatacenterId *string `pulumi:"datacenterId"`
	// [Boolean] Indicates if the load balancer will reserve an IP using DHCP.
	Dhcp *bool `pulumi:"dhcp"`
	// [string] IPv4 address of the load balancer.
	Ip *string `pulumi:"ip"`
	// [string] The name of the load balancer.
	Name *string `pulumi:"name"`
	// [list] A list of NIC IDs that are part of the load balancer.
	NicIds []string `pulumi:"nicIds"`
}

type BalancerState struct {
	// [string] The ID of a Virtual Data Center.
	DatacenterId pulumi.StringPtrInput
	// [Boolean] Indicates if the load balancer will reserve an IP using DHCP.
	Dhcp pulumi.BoolPtrInput
	// [string] IPv4 address of the load balancer.
	Ip pulumi.StringPtrInput
	// [string] The name of the load balancer.
	Name pulumi.StringPtrInput
	// [list] A list of NIC IDs that are part of the load balancer.
	NicIds pulumi.StringArrayInput
}

func (BalancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*balancerState)(nil)).Elem()
}

type balancerArgs struct {
	// [string] The ID of a Virtual Data Center.
	DatacenterId string `pulumi:"datacenterId"`
	// [Boolean] Indicates if the load balancer will reserve an IP using DHCP.
	Dhcp *bool `pulumi:"dhcp"`
	// [string] IPv4 address of the load balancer.
	Ip *string `pulumi:"ip"`
	// [string] The name of the load balancer.
	Name *string `pulumi:"name"`
	// [list] A list of NIC IDs that are part of the load balancer.
	NicIds []string `pulumi:"nicIds"`
}

// The set of arguments for constructing a Balancer resource.
type BalancerArgs struct {
	// [string] The ID of a Virtual Data Center.
	DatacenterId pulumi.StringInput
	// [Boolean] Indicates if the load balancer will reserve an IP using DHCP.
	Dhcp pulumi.BoolPtrInput
	// [string] IPv4 address of the load balancer.
	Ip pulumi.StringPtrInput
	// [string] The name of the load balancer.
	Name pulumi.StringPtrInput
	// [list] A list of NIC IDs that are part of the load balancer.
	NicIds pulumi.StringArrayInput
}

func (BalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*balancerArgs)(nil)).Elem()
}

type BalancerInput interface {
	pulumi.Input

	ToBalancerOutput() BalancerOutput
	ToBalancerOutputWithContext(ctx context.Context) BalancerOutput
}

func (*Balancer) ElementType() reflect.Type {
	return reflect.TypeOf((**Balancer)(nil)).Elem()
}

func (i *Balancer) ToBalancerOutput() BalancerOutput {
	return i.ToBalancerOutputWithContext(context.Background())
}

func (i *Balancer) ToBalancerOutputWithContext(ctx context.Context) BalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BalancerOutput)
}

// BalancerArrayInput is an input type that accepts BalancerArray and BalancerArrayOutput values.
// You can construct a concrete instance of `BalancerArrayInput` via:
//
//	BalancerArray{ BalancerArgs{...} }
type BalancerArrayInput interface {
	pulumi.Input

	ToBalancerArrayOutput() BalancerArrayOutput
	ToBalancerArrayOutputWithContext(context.Context) BalancerArrayOutput
}

type BalancerArray []BalancerInput

func (BalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Balancer)(nil)).Elem()
}

func (i BalancerArray) ToBalancerArrayOutput() BalancerArrayOutput {
	return i.ToBalancerArrayOutputWithContext(context.Background())
}

func (i BalancerArray) ToBalancerArrayOutputWithContext(ctx context.Context) BalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BalancerArrayOutput)
}

// BalancerMapInput is an input type that accepts BalancerMap and BalancerMapOutput values.
// You can construct a concrete instance of `BalancerMapInput` via:
//
//	BalancerMap{ "key": BalancerArgs{...} }
type BalancerMapInput interface {
	pulumi.Input

	ToBalancerMapOutput() BalancerMapOutput
	ToBalancerMapOutputWithContext(context.Context) BalancerMapOutput
}

type BalancerMap map[string]BalancerInput

func (BalancerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Balancer)(nil)).Elem()
}

func (i BalancerMap) ToBalancerMapOutput() BalancerMapOutput {
	return i.ToBalancerMapOutputWithContext(context.Background())
}

func (i BalancerMap) ToBalancerMapOutputWithContext(ctx context.Context) BalancerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BalancerMapOutput)
}

type BalancerOutput struct{ *pulumi.OutputState }

func (BalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Balancer)(nil)).Elem()
}

func (o BalancerOutput) ToBalancerOutput() BalancerOutput {
	return o
}

func (o BalancerOutput) ToBalancerOutputWithContext(ctx context.Context) BalancerOutput {
	return o
}

// [string] The ID of a Virtual Data Center.
func (o BalancerOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Balancer) pulumi.StringOutput { return v.DatacenterId }).(pulumi.StringOutput)
}

// [Boolean] Indicates if the load balancer will reserve an IP using DHCP.
func (o BalancerOutput) Dhcp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Balancer) pulumi.BoolPtrOutput { return v.Dhcp }).(pulumi.BoolPtrOutput)
}

// [string] IPv4 address of the load balancer.
func (o BalancerOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *Balancer) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// [string] The name of the load balancer.
func (o BalancerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Balancer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// [list] A list of NIC IDs that are part of the load balancer.
func (o BalancerOutput) NicIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Balancer) pulumi.StringArrayOutput { return v.NicIds }).(pulumi.StringArrayOutput)
}

type BalancerArrayOutput struct{ *pulumi.OutputState }

func (BalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Balancer)(nil)).Elem()
}

func (o BalancerArrayOutput) ToBalancerArrayOutput() BalancerArrayOutput {
	return o
}

func (o BalancerArrayOutput) ToBalancerArrayOutputWithContext(ctx context.Context) BalancerArrayOutput {
	return o
}

func (o BalancerArrayOutput) Index(i pulumi.IntInput) BalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Balancer {
		return vs[0].([]*Balancer)[vs[1].(int)]
	}).(BalancerOutput)
}

type BalancerMapOutput struct{ *pulumi.OutputState }

func (BalancerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Balancer)(nil)).Elem()
}

func (o BalancerMapOutput) ToBalancerMapOutput() BalancerMapOutput {
	return o
}

func (o BalancerMapOutput) ToBalancerMapOutputWithContext(ctx context.Context) BalancerMapOutput {
	return o
}

func (o BalancerMapOutput) MapIndex(k pulumi.StringInput) BalancerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Balancer {
		return vs[0].(map[string]*Balancer)[vs[1].(string)]
	}).(BalancerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BalancerInput)(nil)).Elem(), &Balancer{})
	pulumi.RegisterInputType(reflect.TypeOf((*BalancerArrayInput)(nil)).Elem(), BalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BalancerMapInput)(nil)).Elem(), BalancerMap{})
	pulumi.RegisterOutputType(BalancerOutput{})
	pulumi.RegisterOutputType(BalancerArrayOutput{})
	pulumi.RegisterOutputType(BalancerMapOutput{})
}
