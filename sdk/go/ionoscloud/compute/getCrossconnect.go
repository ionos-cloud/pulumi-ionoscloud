// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupCrossconnect(ctx *pulumi.Context, args *LookupCrossconnectArgs, opts ...pulumi.InvokeOption) (*LookupCrossconnectResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCrossconnectResult
	err := ctx.Invoke("ionoscloud:compute/getCrossconnect:getCrossconnect", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCrossconnect.
type LookupCrossconnectArgs struct {
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	Name        *string `pulumi:"name"`
}

// A collection of values returned by getCrossconnect.
type LookupCrossconnectResult struct {
	ConnectableDatacenters []GetCrossconnectConnectableDatacenter `pulumi:"connectableDatacenters"`
	Description            *string                                `pulumi:"description"`
	Id                     *string                                `pulumi:"id"`
	Name                   *string                                `pulumi:"name"`
	Peers                  []GetCrossconnectPeer                  `pulumi:"peers"`
}

func LookupCrossconnectOutput(ctx *pulumi.Context, args LookupCrossconnectOutputArgs, opts ...pulumi.InvokeOption) LookupCrossconnectResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCrossconnectResultOutput, error) {
			args := v.(LookupCrossconnectArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ionoscloud:compute/getCrossconnect:getCrossconnect", args, LookupCrossconnectResultOutput{}, options).(LookupCrossconnectResultOutput), nil
		}).(LookupCrossconnectResultOutput)
}

// A collection of arguments for invoking getCrossconnect.
type LookupCrossconnectOutputArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	Name        pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupCrossconnectOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCrossconnectArgs)(nil)).Elem()
}

// A collection of values returned by getCrossconnect.
type LookupCrossconnectResultOutput struct{ *pulumi.OutputState }

func (LookupCrossconnectResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCrossconnectResult)(nil)).Elem()
}

func (o LookupCrossconnectResultOutput) ToLookupCrossconnectResultOutput() LookupCrossconnectResultOutput {
	return o
}

func (o LookupCrossconnectResultOutput) ToLookupCrossconnectResultOutputWithContext(ctx context.Context) LookupCrossconnectResultOutput {
	return o
}

func (o LookupCrossconnectResultOutput) ConnectableDatacenters() GetCrossconnectConnectableDatacenterArrayOutput {
	return o.ApplyT(func(v LookupCrossconnectResult) []GetCrossconnectConnectableDatacenter {
		return v.ConnectableDatacenters
	}).(GetCrossconnectConnectableDatacenterArrayOutput)
}

func (o LookupCrossconnectResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCrossconnectResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LookupCrossconnectResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCrossconnectResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupCrossconnectResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCrossconnectResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupCrossconnectResultOutput) Peers() GetCrossconnectPeerArrayOutput {
	return o.ApplyT(func(v LookupCrossconnectResult) []GetCrossconnectPeer { return v.Peers }).(GetCrossconnectPeerArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCrossconnectResultOutput{})
}
