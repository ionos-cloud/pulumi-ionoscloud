// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupS3Key(ctx *pulumi.Context, args *LookupS3KeyArgs, opts ...pulumi.InvokeOption) (*LookupS3KeyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupS3KeyResult
	err := ctx.Invoke("ionoscloud:compute/getS3Key:getS3Key", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getS3Key.
type LookupS3KeyArgs struct {
	Active *bool   `pulumi:"active"`
	Id     *string `pulumi:"id"`
	UserId string  `pulumi:"userId"`
}

// A collection of values returned by getS3Key.
type LookupS3KeyResult struct {
	Active    *bool   `pulumi:"active"`
	Id        *string `pulumi:"id"`
	SecretKey string  `pulumi:"secretKey"`
	UserId    string  `pulumi:"userId"`
}

func LookupS3KeyOutput(ctx *pulumi.Context, args LookupS3KeyOutputArgs, opts ...pulumi.InvokeOption) LookupS3KeyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupS3KeyResultOutput, error) {
			args := v.(LookupS3KeyArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ionoscloud:compute/getS3Key:getS3Key", args, LookupS3KeyResultOutput{}, options).(LookupS3KeyResultOutput), nil
		}).(LookupS3KeyResultOutput)
}

// A collection of arguments for invoking getS3Key.
type LookupS3KeyOutputArgs struct {
	Active pulumi.BoolPtrInput   `pulumi:"active"`
	Id     pulumi.StringPtrInput `pulumi:"id"`
	UserId pulumi.StringInput    `pulumi:"userId"`
}

func (LookupS3KeyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupS3KeyArgs)(nil)).Elem()
}

// A collection of values returned by getS3Key.
type LookupS3KeyResultOutput struct{ *pulumi.OutputState }

func (LookupS3KeyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupS3KeyResult)(nil)).Elem()
}

func (o LookupS3KeyResultOutput) ToLookupS3KeyResultOutput() LookupS3KeyResultOutput {
	return o
}

func (o LookupS3KeyResultOutput) ToLookupS3KeyResultOutputWithContext(ctx context.Context) LookupS3KeyResultOutput {
	return o
}

func (o LookupS3KeyResultOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupS3KeyResult) *bool { return v.Active }).(pulumi.BoolPtrOutput)
}

func (o LookupS3KeyResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupS3KeyResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupS3KeyResultOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupS3KeyResult) string { return v.SecretKey }).(pulumi.StringOutput)
}

func (o LookupS3KeyResultOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupS3KeyResult) string { return v.UserId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupS3KeyResultOutput{})
}
