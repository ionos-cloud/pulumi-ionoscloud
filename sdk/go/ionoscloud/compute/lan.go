// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Lan struct {
	pulumi.CustomResourceState

	DatacenterId pulumi.StringOutput      `pulumi:"datacenterId"`
	IpFailovers  LanIpFailoverArrayOutput `pulumi:"ipFailovers"`
	// IPv6 CIDR block assigned to the LAN. Can be set to 'AUTO' for an automatically assigned address or the address can be
	// explicitly supplied.
	Ipv6CidrBlock pulumi.StringOutput    `pulumi:"ipv6CidrBlock"`
	Name          pulumi.StringOutput    `pulumi:"name"`
	Pcc           pulumi.StringPtrOutput `pulumi:"pcc"`
	Public        pulumi.BoolPtrOutput   `pulumi:"public"`
}

// NewLan registers a new resource with the given unique name, arguments, and options.
func NewLan(ctx *pulumi.Context,
	name string, args *LanArgs, opts ...pulumi.ResourceOption) (*Lan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatacenterId == nil {
		return nil, errors.New("invalid value for required argument 'DatacenterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Lan
	err := ctx.RegisterResource("ionoscloud:compute/lan:Lan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLan gets an existing Lan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LanState, opts ...pulumi.ResourceOption) (*Lan, error) {
	var resource Lan
	err := ctx.ReadResource("ionoscloud:compute/lan:Lan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Lan resources.
type lanState struct {
	DatacenterId *string         `pulumi:"datacenterId"`
	IpFailovers  []LanIpFailover `pulumi:"ipFailovers"`
	// IPv6 CIDR block assigned to the LAN. Can be set to 'AUTO' for an automatically assigned address or the address can be
	// explicitly supplied.
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	Name          *string `pulumi:"name"`
	Pcc           *string `pulumi:"pcc"`
	Public        *bool   `pulumi:"public"`
}

type LanState struct {
	DatacenterId pulumi.StringPtrInput
	IpFailovers  LanIpFailoverArrayInput
	// IPv6 CIDR block assigned to the LAN. Can be set to 'AUTO' for an automatically assigned address or the address can be
	// explicitly supplied.
	Ipv6CidrBlock pulumi.StringPtrInput
	Name          pulumi.StringPtrInput
	Pcc           pulumi.StringPtrInput
	Public        pulumi.BoolPtrInput
}

func (LanState) ElementType() reflect.Type {
	return reflect.TypeOf((*lanState)(nil)).Elem()
}

type lanArgs struct {
	DatacenterId string          `pulumi:"datacenterId"`
	IpFailovers  []LanIpFailover `pulumi:"ipFailovers"`
	// IPv6 CIDR block assigned to the LAN. Can be set to 'AUTO' for an automatically assigned address or the address can be
	// explicitly supplied.
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	Name          *string `pulumi:"name"`
	Pcc           *string `pulumi:"pcc"`
	Public        *bool   `pulumi:"public"`
}

// The set of arguments for constructing a Lan resource.
type LanArgs struct {
	DatacenterId pulumi.StringInput
	IpFailovers  LanIpFailoverArrayInput
	// IPv6 CIDR block assigned to the LAN. Can be set to 'AUTO' for an automatically assigned address or the address can be
	// explicitly supplied.
	Ipv6CidrBlock pulumi.StringPtrInput
	Name          pulumi.StringPtrInput
	Pcc           pulumi.StringPtrInput
	Public        pulumi.BoolPtrInput
}

func (LanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lanArgs)(nil)).Elem()
}

type LanInput interface {
	pulumi.Input

	ToLanOutput() LanOutput
	ToLanOutputWithContext(ctx context.Context) LanOutput
}

func (*Lan) ElementType() reflect.Type {
	return reflect.TypeOf((**Lan)(nil)).Elem()
}

func (i *Lan) ToLanOutput() LanOutput {
	return i.ToLanOutputWithContext(context.Background())
}

func (i *Lan) ToLanOutputWithContext(ctx context.Context) LanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LanOutput)
}

// LanArrayInput is an input type that accepts LanArray and LanArrayOutput values.
// You can construct a concrete instance of `LanArrayInput` via:
//
//	LanArray{ LanArgs{...} }
type LanArrayInput interface {
	pulumi.Input

	ToLanArrayOutput() LanArrayOutput
	ToLanArrayOutputWithContext(context.Context) LanArrayOutput
}

type LanArray []LanInput

func (LanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Lan)(nil)).Elem()
}

func (i LanArray) ToLanArrayOutput() LanArrayOutput {
	return i.ToLanArrayOutputWithContext(context.Background())
}

func (i LanArray) ToLanArrayOutputWithContext(ctx context.Context) LanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LanArrayOutput)
}

// LanMapInput is an input type that accepts LanMap and LanMapOutput values.
// You can construct a concrete instance of `LanMapInput` via:
//
//	LanMap{ "key": LanArgs{...} }
type LanMapInput interface {
	pulumi.Input

	ToLanMapOutput() LanMapOutput
	ToLanMapOutputWithContext(context.Context) LanMapOutput
}

type LanMap map[string]LanInput

func (LanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Lan)(nil)).Elem()
}

func (i LanMap) ToLanMapOutput() LanMapOutput {
	return i.ToLanMapOutputWithContext(context.Background())
}

func (i LanMap) ToLanMapOutputWithContext(ctx context.Context) LanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LanMapOutput)
}

type LanOutput struct{ *pulumi.OutputState }

func (LanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Lan)(nil)).Elem()
}

func (o LanOutput) ToLanOutput() LanOutput {
	return o
}

func (o LanOutput) ToLanOutputWithContext(ctx context.Context) LanOutput {
	return o
}

func (o LanOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Lan) pulumi.StringOutput { return v.DatacenterId }).(pulumi.StringOutput)
}

func (o LanOutput) IpFailovers() LanIpFailoverArrayOutput {
	return o.ApplyT(func(v *Lan) LanIpFailoverArrayOutput { return v.IpFailovers }).(LanIpFailoverArrayOutput)
}

// IPv6 CIDR block assigned to the LAN. Can be set to 'AUTO' for an automatically assigned address or the address can be
// explicitly supplied.
func (o LanOutput) Ipv6CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *Lan) pulumi.StringOutput { return v.Ipv6CidrBlock }).(pulumi.StringOutput)
}

func (o LanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Lan) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o LanOutput) Pcc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Lan) pulumi.StringPtrOutput { return v.Pcc }).(pulumi.StringPtrOutput)
}

func (o LanOutput) Public() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Lan) pulumi.BoolPtrOutput { return v.Public }).(pulumi.BoolPtrOutput)
}

type LanArrayOutput struct{ *pulumi.OutputState }

func (LanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Lan)(nil)).Elem()
}

func (o LanArrayOutput) ToLanArrayOutput() LanArrayOutput {
	return o
}

func (o LanArrayOutput) ToLanArrayOutputWithContext(ctx context.Context) LanArrayOutput {
	return o
}

func (o LanArrayOutput) Index(i pulumi.IntInput) LanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Lan {
		return vs[0].([]*Lan)[vs[1].(int)]
	}).(LanOutput)
}

type LanMapOutput struct{ *pulumi.OutputState }

func (LanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Lan)(nil)).Elem()
}

func (o LanMapOutput) ToLanMapOutput() LanMapOutput {
	return o
}

func (o LanMapOutput) ToLanMapOutputWithContext(ctx context.Context) LanMapOutput {
	return o
}

func (o LanMapOutput) MapIndex(k pulumi.StringInput) LanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Lan {
		return vs[0].(map[string]*Lan)[vs[1].(string)]
	}).(LanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LanInput)(nil)).Elem(), &Lan{})
	pulumi.RegisterInputType(reflect.TypeOf((*LanArrayInput)(nil)).Elem(), LanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LanMapInput)(nil)).Elem(), LanMap{})
	pulumi.RegisterOutputType(LanOutput{})
	pulumi.RegisterOutputType(LanArrayOutput{})
	pulumi.RegisterOutputType(LanMapOutput{})
}
