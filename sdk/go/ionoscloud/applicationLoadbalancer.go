// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an **Application Load Balancer** on IonosCloud.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleDatacenter, err := compute.NewDatacenter(ctx, "exampleDatacenter", &compute.DatacenterArgs{
//				Location:          pulumi.String("us/las"),
//				Description:       pulumi.String("datacenter description"),
//				SecAuthProtection: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			example1, err := compute.NewLan(ctx, "example1", &compute.LanArgs{
//				DatacenterId: exampleDatacenter.ID(),
//				Public:       pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			example2, err := compute.NewLan(ctx, "example2", &compute.LanArgs{
//				DatacenterId: exampleDatacenter.ID(),
//				Public:       pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ionoscloud.NewApplicationLoadbalancer(ctx, "exampleApplicationLoadbalancer", &ionoscloud.ApplicationLoadbalancerArgs{
//				DatacenterId: exampleDatacenter.ID(),
//				ListenerLan:  example1.ID(),
//				Ips: pulumi.StringArray{
//					pulumi.String("10.12.118.224"),
//				},
//				TargetLan: example2.ID(),
//				LbPrivateIps: pulumi.StringArray{
//					pulumi.String("10.13.72.225/24"),
//				},
//				CentralLogging: pulumi.Bool(true),
//				LoggingFormat:  pulumi.String("%{+Q}o %{-Q}ci - - [%trg] %r %ST %B \"\" \"\" %cp %ms %ft %b %s %TR %Tw %Tc %Tr %Ta %tsc %ac %fc %bc %sc %rc %sq %bq %CC %CS %hrl %hsl"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Resource Application Load Balancer can be imported using the `resource id` and `datacenter id`, e.g.
//
// ```sh
// $ pulumi import ionoscloud:index/applicationLoadbalancer:ApplicationLoadbalancer myalb {datacenter uuid}/{applicationLoadBalancer uuid}
// ```
type ApplicationLoadbalancer struct {
	pulumi.CustomResourceState

	// [bool] Turn logging on and off for this product. Default value is 'false'.
	CentralLogging pulumi.BoolPtrOutput `pulumi:"centralLogging"`
	// [string] ID of the datacenter.
	DatacenterId pulumi.StringOutput `pulumi:"datacenterId"`
	// [list] Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.
	Flowlog ApplicationLoadbalancerFlowlogPtrOutput `pulumi:"flowlog"`
	// [set] Collection of the Application Load Balancer IP addresses. (Inbound and outbound) IPs of the listenerLan are customer-reserved public IPs for the public Load Balancers, and private IPs for the private Load Balancers.
	Ips pulumi.StringArrayOutput `pulumi:"ips"`
	// [set] Collection of private IP addresses with the subnet mask of the Application Load Balancer. IPs must contain valid a subnet mask. If no IP is provided, the system will generate an IP with /24 subnet.
	LbPrivateIps pulumi.StringArrayOutput `pulumi:"lbPrivateIps"`
	// [int] ID of the listening (inbound) LAN.
	ListenerLan pulumi.IntOutput `pulumi:"listenerLan"`
	// Specifies the format of the logs.
	LoggingFormat pulumi.StringPtrOutput `pulumi:"loggingFormat"`
	// [string] Specifies the name of the flow log.
	//
	// ⚠️ **Note:**: Removing the `flowlog` forces re-creation of the application load balancer resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// [int] ID of the balanced private target LAN (outbound).
	TargetLan pulumi.IntOutput `pulumi:"targetLan"`
}

// NewApplicationLoadbalancer registers a new resource with the given unique name, arguments, and options.
func NewApplicationLoadbalancer(ctx *pulumi.Context,
	name string, args *ApplicationLoadbalancerArgs, opts ...pulumi.ResourceOption) (*ApplicationLoadbalancer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatacenterId == nil {
		return nil, errors.New("invalid value for required argument 'DatacenterId'")
	}
	if args.ListenerLan == nil {
		return nil, errors.New("invalid value for required argument 'ListenerLan'")
	}
	if args.TargetLan == nil {
		return nil, errors.New("invalid value for required argument 'TargetLan'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplicationLoadbalancer
	err := ctx.RegisterResource("ionoscloud:index/applicationLoadbalancer:ApplicationLoadbalancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationLoadbalancer gets an existing ApplicationLoadbalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationLoadbalancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationLoadbalancerState, opts ...pulumi.ResourceOption) (*ApplicationLoadbalancer, error) {
	var resource ApplicationLoadbalancer
	err := ctx.ReadResource("ionoscloud:index/applicationLoadbalancer:ApplicationLoadbalancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationLoadbalancer resources.
type applicationLoadbalancerState struct {
	// [bool] Turn logging on and off for this product. Default value is 'false'.
	CentralLogging *bool `pulumi:"centralLogging"`
	// [string] ID of the datacenter.
	DatacenterId *string `pulumi:"datacenterId"`
	// [list] Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.
	Flowlog *ApplicationLoadbalancerFlowlog `pulumi:"flowlog"`
	// [set] Collection of the Application Load Balancer IP addresses. (Inbound and outbound) IPs of the listenerLan are customer-reserved public IPs for the public Load Balancers, and private IPs for the private Load Balancers.
	Ips []string `pulumi:"ips"`
	// [set] Collection of private IP addresses with the subnet mask of the Application Load Balancer. IPs must contain valid a subnet mask. If no IP is provided, the system will generate an IP with /24 subnet.
	LbPrivateIps []string `pulumi:"lbPrivateIps"`
	// [int] ID of the listening (inbound) LAN.
	ListenerLan *int `pulumi:"listenerLan"`
	// Specifies the format of the logs.
	LoggingFormat *string `pulumi:"loggingFormat"`
	// [string] Specifies the name of the flow log.
	//
	// ⚠️ **Note:**: Removing the `flowlog` forces re-creation of the application load balancer resource.
	Name *string `pulumi:"name"`
	// [int] ID of the balanced private target LAN (outbound).
	TargetLan *int `pulumi:"targetLan"`
}

type ApplicationLoadbalancerState struct {
	// [bool] Turn logging on and off for this product. Default value is 'false'.
	CentralLogging pulumi.BoolPtrInput
	// [string] ID of the datacenter.
	DatacenterId pulumi.StringPtrInput
	// [list] Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.
	Flowlog ApplicationLoadbalancerFlowlogPtrInput
	// [set] Collection of the Application Load Balancer IP addresses. (Inbound and outbound) IPs of the listenerLan are customer-reserved public IPs for the public Load Balancers, and private IPs for the private Load Balancers.
	Ips pulumi.StringArrayInput
	// [set] Collection of private IP addresses with the subnet mask of the Application Load Balancer. IPs must contain valid a subnet mask. If no IP is provided, the system will generate an IP with /24 subnet.
	LbPrivateIps pulumi.StringArrayInput
	// [int] ID of the listening (inbound) LAN.
	ListenerLan pulumi.IntPtrInput
	// Specifies the format of the logs.
	LoggingFormat pulumi.StringPtrInput
	// [string] Specifies the name of the flow log.
	//
	// ⚠️ **Note:**: Removing the `flowlog` forces re-creation of the application load balancer resource.
	Name pulumi.StringPtrInput
	// [int] ID of the balanced private target LAN (outbound).
	TargetLan pulumi.IntPtrInput
}

func (ApplicationLoadbalancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationLoadbalancerState)(nil)).Elem()
}

type applicationLoadbalancerArgs struct {
	// [bool] Turn logging on and off for this product. Default value is 'false'.
	CentralLogging *bool `pulumi:"centralLogging"`
	// [string] ID of the datacenter.
	DatacenterId string `pulumi:"datacenterId"`
	// [list] Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.
	Flowlog *ApplicationLoadbalancerFlowlog `pulumi:"flowlog"`
	// [set] Collection of the Application Load Balancer IP addresses. (Inbound and outbound) IPs of the listenerLan are customer-reserved public IPs for the public Load Balancers, and private IPs for the private Load Balancers.
	Ips []string `pulumi:"ips"`
	// [set] Collection of private IP addresses with the subnet mask of the Application Load Balancer. IPs must contain valid a subnet mask. If no IP is provided, the system will generate an IP with /24 subnet.
	LbPrivateIps []string `pulumi:"lbPrivateIps"`
	// [int] ID of the listening (inbound) LAN.
	ListenerLan int `pulumi:"listenerLan"`
	// Specifies the format of the logs.
	LoggingFormat *string `pulumi:"loggingFormat"`
	// [string] Specifies the name of the flow log.
	//
	// ⚠️ **Note:**: Removing the `flowlog` forces re-creation of the application load balancer resource.
	Name *string `pulumi:"name"`
	// [int] ID of the balanced private target LAN (outbound).
	TargetLan int `pulumi:"targetLan"`
}

// The set of arguments for constructing a ApplicationLoadbalancer resource.
type ApplicationLoadbalancerArgs struct {
	// [bool] Turn logging on and off for this product. Default value is 'false'.
	CentralLogging pulumi.BoolPtrInput
	// [string] ID of the datacenter.
	DatacenterId pulumi.StringInput
	// [list] Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.
	Flowlog ApplicationLoadbalancerFlowlogPtrInput
	// [set] Collection of the Application Load Balancer IP addresses. (Inbound and outbound) IPs of the listenerLan are customer-reserved public IPs for the public Load Balancers, and private IPs for the private Load Balancers.
	Ips pulumi.StringArrayInput
	// [set] Collection of private IP addresses with the subnet mask of the Application Load Balancer. IPs must contain valid a subnet mask. If no IP is provided, the system will generate an IP with /24 subnet.
	LbPrivateIps pulumi.StringArrayInput
	// [int] ID of the listening (inbound) LAN.
	ListenerLan pulumi.IntInput
	// Specifies the format of the logs.
	LoggingFormat pulumi.StringPtrInput
	// [string] Specifies the name of the flow log.
	//
	// ⚠️ **Note:**: Removing the `flowlog` forces re-creation of the application load balancer resource.
	Name pulumi.StringPtrInput
	// [int] ID of the balanced private target LAN (outbound).
	TargetLan pulumi.IntInput
}

func (ApplicationLoadbalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationLoadbalancerArgs)(nil)).Elem()
}

type ApplicationLoadbalancerInput interface {
	pulumi.Input

	ToApplicationLoadbalancerOutput() ApplicationLoadbalancerOutput
	ToApplicationLoadbalancerOutputWithContext(ctx context.Context) ApplicationLoadbalancerOutput
}

func (*ApplicationLoadbalancer) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationLoadbalancer)(nil)).Elem()
}

func (i *ApplicationLoadbalancer) ToApplicationLoadbalancerOutput() ApplicationLoadbalancerOutput {
	return i.ToApplicationLoadbalancerOutputWithContext(context.Background())
}

func (i *ApplicationLoadbalancer) ToApplicationLoadbalancerOutputWithContext(ctx context.Context) ApplicationLoadbalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationLoadbalancerOutput)
}

// ApplicationLoadbalancerArrayInput is an input type that accepts ApplicationLoadbalancerArray and ApplicationLoadbalancerArrayOutput values.
// You can construct a concrete instance of `ApplicationLoadbalancerArrayInput` via:
//
//	ApplicationLoadbalancerArray{ ApplicationLoadbalancerArgs{...} }
type ApplicationLoadbalancerArrayInput interface {
	pulumi.Input

	ToApplicationLoadbalancerArrayOutput() ApplicationLoadbalancerArrayOutput
	ToApplicationLoadbalancerArrayOutputWithContext(context.Context) ApplicationLoadbalancerArrayOutput
}

type ApplicationLoadbalancerArray []ApplicationLoadbalancerInput

func (ApplicationLoadbalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationLoadbalancer)(nil)).Elem()
}

func (i ApplicationLoadbalancerArray) ToApplicationLoadbalancerArrayOutput() ApplicationLoadbalancerArrayOutput {
	return i.ToApplicationLoadbalancerArrayOutputWithContext(context.Background())
}

func (i ApplicationLoadbalancerArray) ToApplicationLoadbalancerArrayOutputWithContext(ctx context.Context) ApplicationLoadbalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationLoadbalancerArrayOutput)
}

// ApplicationLoadbalancerMapInput is an input type that accepts ApplicationLoadbalancerMap and ApplicationLoadbalancerMapOutput values.
// You can construct a concrete instance of `ApplicationLoadbalancerMapInput` via:
//
//	ApplicationLoadbalancerMap{ "key": ApplicationLoadbalancerArgs{...} }
type ApplicationLoadbalancerMapInput interface {
	pulumi.Input

	ToApplicationLoadbalancerMapOutput() ApplicationLoadbalancerMapOutput
	ToApplicationLoadbalancerMapOutputWithContext(context.Context) ApplicationLoadbalancerMapOutput
}

type ApplicationLoadbalancerMap map[string]ApplicationLoadbalancerInput

func (ApplicationLoadbalancerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationLoadbalancer)(nil)).Elem()
}

func (i ApplicationLoadbalancerMap) ToApplicationLoadbalancerMapOutput() ApplicationLoadbalancerMapOutput {
	return i.ToApplicationLoadbalancerMapOutputWithContext(context.Background())
}

func (i ApplicationLoadbalancerMap) ToApplicationLoadbalancerMapOutputWithContext(ctx context.Context) ApplicationLoadbalancerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationLoadbalancerMapOutput)
}

type ApplicationLoadbalancerOutput struct{ *pulumi.OutputState }

func (ApplicationLoadbalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationLoadbalancer)(nil)).Elem()
}

func (o ApplicationLoadbalancerOutput) ToApplicationLoadbalancerOutput() ApplicationLoadbalancerOutput {
	return o
}

func (o ApplicationLoadbalancerOutput) ToApplicationLoadbalancerOutputWithContext(ctx context.Context) ApplicationLoadbalancerOutput {
	return o
}

// [bool] Turn logging on and off for this product. Default value is 'false'.
func (o ApplicationLoadbalancerOutput) CentralLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationLoadbalancer) pulumi.BoolPtrOutput { return v.CentralLogging }).(pulumi.BoolPtrOutput)
}

// [string] ID of the datacenter.
func (o ApplicationLoadbalancerOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationLoadbalancer) pulumi.StringOutput { return v.DatacenterId }).(pulumi.StringOutput)
}

// [list] Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.
func (o ApplicationLoadbalancerOutput) Flowlog() ApplicationLoadbalancerFlowlogPtrOutput {
	return o.ApplyT(func(v *ApplicationLoadbalancer) ApplicationLoadbalancerFlowlogPtrOutput { return v.Flowlog }).(ApplicationLoadbalancerFlowlogPtrOutput)
}

// [set] Collection of the Application Load Balancer IP addresses. (Inbound and outbound) IPs of the listenerLan are customer-reserved public IPs for the public Load Balancers, and private IPs for the private Load Balancers.
func (o ApplicationLoadbalancerOutput) Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationLoadbalancer) pulumi.StringArrayOutput { return v.Ips }).(pulumi.StringArrayOutput)
}

// [set] Collection of private IP addresses with the subnet mask of the Application Load Balancer. IPs must contain valid a subnet mask. If no IP is provided, the system will generate an IP with /24 subnet.
func (o ApplicationLoadbalancerOutput) LbPrivateIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationLoadbalancer) pulumi.StringArrayOutput { return v.LbPrivateIps }).(pulumi.StringArrayOutput)
}

// [int] ID of the listening (inbound) LAN.
func (o ApplicationLoadbalancerOutput) ListenerLan() pulumi.IntOutput {
	return o.ApplyT(func(v *ApplicationLoadbalancer) pulumi.IntOutput { return v.ListenerLan }).(pulumi.IntOutput)
}

// Specifies the format of the logs.
func (o ApplicationLoadbalancerOutput) LoggingFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationLoadbalancer) pulumi.StringPtrOutput { return v.LoggingFormat }).(pulumi.StringPtrOutput)
}

// [string] Specifies the name of the flow log.
//
// ⚠️ **Note:**: Removing the `flowlog` forces re-creation of the application load balancer resource.
func (o ApplicationLoadbalancerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationLoadbalancer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// [int] ID of the balanced private target LAN (outbound).
func (o ApplicationLoadbalancerOutput) TargetLan() pulumi.IntOutput {
	return o.ApplyT(func(v *ApplicationLoadbalancer) pulumi.IntOutput { return v.TargetLan }).(pulumi.IntOutput)
}

type ApplicationLoadbalancerArrayOutput struct{ *pulumi.OutputState }

func (ApplicationLoadbalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationLoadbalancer)(nil)).Elem()
}

func (o ApplicationLoadbalancerArrayOutput) ToApplicationLoadbalancerArrayOutput() ApplicationLoadbalancerArrayOutput {
	return o
}

func (o ApplicationLoadbalancerArrayOutput) ToApplicationLoadbalancerArrayOutputWithContext(ctx context.Context) ApplicationLoadbalancerArrayOutput {
	return o
}

func (o ApplicationLoadbalancerArrayOutput) Index(i pulumi.IntInput) ApplicationLoadbalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplicationLoadbalancer {
		return vs[0].([]*ApplicationLoadbalancer)[vs[1].(int)]
	}).(ApplicationLoadbalancerOutput)
}

type ApplicationLoadbalancerMapOutput struct{ *pulumi.OutputState }

func (ApplicationLoadbalancerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationLoadbalancer)(nil)).Elem()
}

func (o ApplicationLoadbalancerMapOutput) ToApplicationLoadbalancerMapOutput() ApplicationLoadbalancerMapOutput {
	return o
}

func (o ApplicationLoadbalancerMapOutput) ToApplicationLoadbalancerMapOutputWithContext(ctx context.Context) ApplicationLoadbalancerMapOutput {
	return o
}

func (o ApplicationLoadbalancerMapOutput) MapIndex(k pulumi.StringInput) ApplicationLoadbalancerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplicationLoadbalancer {
		return vs[0].(map[string]*ApplicationLoadbalancer)[vs[1].(string)]
	}).(ApplicationLoadbalancerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationLoadbalancerInput)(nil)).Elem(), &ApplicationLoadbalancer{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationLoadbalancerArrayInput)(nil)).Elem(), ApplicationLoadbalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationLoadbalancerMapInput)(nil)).Elem(), ApplicationLoadbalancerMap{})
	pulumi.RegisterOutputType(ApplicationLoadbalancerOutput{})
	pulumi.RegisterOutputType(ApplicationLoadbalancerArrayOutput{})
	pulumi.RegisterOutputType(ApplicationLoadbalancerMapOutput{})
}
