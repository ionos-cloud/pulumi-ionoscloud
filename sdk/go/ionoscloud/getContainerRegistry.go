// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **Container Registry data source** can be used to search for and return an existing Container Registry.
// You can provide a string for the name parameter which will be compared with provisioned Container Registry.
// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
// When this happens, please refine your search and make sure that your resources have unique names.
//
// ## Example Usage
//
// ### By Name
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ionoscloud.LookupContainerRegistry(ctx, &ionoscloud.LookupContainerRegistryArgs{
//				Name: pulumi.StringRef("container-registry-example"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### By Name with Partial Match
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ionoscloud.LookupContainerRegistry(ctx, &ionoscloud.LookupContainerRegistryArgs{
//				Name:         pulumi.StringRef("-example"),
//				PartialMatch: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupContainerRegistry(ctx *pulumi.Context, args *LookupContainerRegistryArgs, opts ...pulumi.InvokeOption) (*LookupContainerRegistryResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupContainerRegistryResult
	err := ctx.Invoke("ionoscloud:index/getContainerRegistry:getContainerRegistry", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getContainerRegistry.
type LookupContainerRegistryArgs struct {
	// ID of the container registry you want to search for.
	Id       *string `pulumi:"id"`
	Location *string `pulumi:"location"`
	// Name of an existing container registry that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partialMatch` parameter is not set to true.
	Name *string `pulumi:"name"`
	// Whether partial matching is allowed or not when using name argument. Default value is false.
	//
	// Either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
	PartialMatch *bool `pulumi:"partialMatch"`
}

// A collection of values returned by getContainerRegistry.
type LookupContainerRegistryResult struct {
	// The subnet CIDRs that are allowed to connect to the registry.  Specify "a.b.c.d/32" for an individual IP address. __Note__: If this list is empty or not set, there are no restrictions.
	ApiSubnetAllowLists        []string                                        `pulumi:"apiSubnetAllowLists"`
	Features                   []GetContainerRegistryFeature                   `pulumi:"features"`
	GarbageCollectionSchedules []GetContainerRegistryGarbageCollectionSchedule `pulumi:"garbageCollectionSchedules"`
	Hostname                   string                                          `pulumi:"hostname"`
	// Id of the container registry.
	Id                 *string                                 `pulumi:"id"`
	Location           *string                                 `pulumi:"location"`
	MaintenanceWindows []GetContainerRegistryMaintenanceWindow `pulumi:"maintenanceWindows"`
	// The name of the container registry.
	Name          *string                            `pulumi:"name"`
	PartialMatch  *bool                              `pulumi:"partialMatch"`
	StorageUsages []GetContainerRegistryStorageUsage `pulumi:"storageUsages"`
}

func LookupContainerRegistryOutput(ctx *pulumi.Context, args LookupContainerRegistryOutputArgs, opts ...pulumi.InvokeOption) LookupContainerRegistryResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupContainerRegistryResult, error) {
			args := v.(LookupContainerRegistryArgs)
			r, err := LookupContainerRegistry(ctx, &args, opts...)
			var s LookupContainerRegistryResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupContainerRegistryResultOutput)
}

// A collection of arguments for invoking getContainerRegistry.
type LookupContainerRegistryOutputArgs struct {
	// ID of the container registry you want to search for.
	Id       pulumi.StringPtrInput `pulumi:"id"`
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Name of an existing container registry that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partialMatch` parameter is not set to true.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Whether partial matching is allowed or not when using name argument. Default value is false.
	//
	// Either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
	PartialMatch pulumi.BoolPtrInput `pulumi:"partialMatch"`
}

func (LookupContainerRegistryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupContainerRegistryArgs)(nil)).Elem()
}

// A collection of values returned by getContainerRegistry.
type LookupContainerRegistryResultOutput struct{ *pulumi.OutputState }

func (LookupContainerRegistryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupContainerRegistryResult)(nil)).Elem()
}

func (o LookupContainerRegistryResultOutput) ToLookupContainerRegistryResultOutput() LookupContainerRegistryResultOutput {
	return o
}

func (o LookupContainerRegistryResultOutput) ToLookupContainerRegistryResultOutputWithContext(ctx context.Context) LookupContainerRegistryResultOutput {
	return o
}

// The subnet CIDRs that are allowed to connect to the registry.  Specify "a.b.c.d/32" for an individual IP address. __Note__: If this list is empty or not set, there are no restrictions.
func (o LookupContainerRegistryResultOutput) ApiSubnetAllowLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupContainerRegistryResult) []string { return v.ApiSubnetAllowLists }).(pulumi.StringArrayOutput)
}

func (o LookupContainerRegistryResultOutput) Features() GetContainerRegistryFeatureArrayOutput {
	return o.ApplyT(func(v LookupContainerRegistryResult) []GetContainerRegistryFeature { return v.Features }).(GetContainerRegistryFeatureArrayOutput)
}

func (o LookupContainerRegistryResultOutput) GarbageCollectionSchedules() GetContainerRegistryGarbageCollectionScheduleArrayOutput {
	return o.ApplyT(func(v LookupContainerRegistryResult) []GetContainerRegistryGarbageCollectionSchedule {
		return v.GarbageCollectionSchedules
	}).(GetContainerRegistryGarbageCollectionScheduleArrayOutput)
}

func (o LookupContainerRegistryResultOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRegistryResult) string { return v.Hostname }).(pulumi.StringOutput)
}

// Id of the container registry.
func (o LookupContainerRegistryResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupContainerRegistryResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupContainerRegistryResultOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupContainerRegistryResult) *string { return v.Location }).(pulumi.StringPtrOutput)
}

func (o LookupContainerRegistryResultOutput) MaintenanceWindows() GetContainerRegistryMaintenanceWindowArrayOutput {
	return o.ApplyT(func(v LookupContainerRegistryResult) []GetContainerRegistryMaintenanceWindow {
		return v.MaintenanceWindows
	}).(GetContainerRegistryMaintenanceWindowArrayOutput)
}

// The name of the container registry.
func (o LookupContainerRegistryResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupContainerRegistryResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupContainerRegistryResultOutput) PartialMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupContainerRegistryResult) *bool { return v.PartialMatch }).(pulumi.BoolPtrOutput)
}

func (o LookupContainerRegistryResultOutput) StorageUsages() GetContainerRegistryStorageUsageArrayOutput {
	return o.ApplyT(func(v LookupContainerRegistryResult) []GetContainerRegistryStorageUsage { return v.StorageUsages }).(GetContainerRegistryStorageUsageArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupContainerRegistryResultOutput{})
}
