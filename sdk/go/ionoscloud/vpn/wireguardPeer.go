// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type WireguardPeer struct {
	pulumi.CustomResourceState

	// The subnet CIDRs that are allowed to connect to the WireGuard Gateway.
	AllowedIps pulumi.StringArrayOutput `pulumi:"allowedIps"`
	// Human readable description of the WireGuard Gateway Peer.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Endpoint configuration for the WireGuard Peer.
	Endpoint WireguardPeerEndpointPtrOutput `pulumi:"endpoint"`
	// The ID of the WireGuard Peer that the peer will connect to.
	GatewayId pulumi.StringOutput `pulumi:"gatewayId"`
	// The location of the WireGuard Peer. Supported locations: de/fra, de/txl
	Location pulumi.StringOutput `pulumi:"location"`
	// The human readable name of your WireGuard Gateway Peer.
	Name pulumi.StringOutput `pulumi:"name"`
	// WireGuard public key of the connecting peer
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
	// The status of the WireGuard Gateway
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewWireguardPeer registers a new resource with the given unique name, arguments, and options.
func NewWireguardPeer(ctx *pulumi.Context,
	name string, args *WireguardPeerArgs, opts ...pulumi.ResourceOption) (*WireguardPeer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllowedIps == nil {
		return nil, errors.New("invalid value for required argument 'AllowedIps'")
	}
	if args.GatewayId == nil {
		return nil, errors.New("invalid value for required argument 'GatewayId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.PublicKey == nil {
		return nil, errors.New("invalid value for required argument 'PublicKey'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WireguardPeer
	err := ctx.RegisterResource("ionoscloud:vpn/wireguardPeer:WireguardPeer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWireguardPeer gets an existing WireguardPeer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWireguardPeer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WireguardPeerState, opts ...pulumi.ResourceOption) (*WireguardPeer, error) {
	var resource WireguardPeer
	err := ctx.ReadResource("ionoscloud:vpn/wireguardPeer:WireguardPeer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WireguardPeer resources.
type wireguardPeerState struct {
	// The subnet CIDRs that are allowed to connect to the WireGuard Gateway.
	AllowedIps []string `pulumi:"allowedIps"`
	// Human readable description of the WireGuard Gateway Peer.
	Description *string `pulumi:"description"`
	// Endpoint configuration for the WireGuard Peer.
	Endpoint *WireguardPeerEndpoint `pulumi:"endpoint"`
	// The ID of the WireGuard Peer that the peer will connect to.
	GatewayId *string `pulumi:"gatewayId"`
	// The location of the WireGuard Peer. Supported locations: de/fra, de/txl
	Location *string `pulumi:"location"`
	// The human readable name of your WireGuard Gateway Peer.
	Name *string `pulumi:"name"`
	// WireGuard public key of the connecting peer
	PublicKey *string `pulumi:"publicKey"`
	// The status of the WireGuard Gateway
	Status *string `pulumi:"status"`
}

type WireguardPeerState struct {
	// The subnet CIDRs that are allowed to connect to the WireGuard Gateway.
	AllowedIps pulumi.StringArrayInput
	// Human readable description of the WireGuard Gateway Peer.
	Description pulumi.StringPtrInput
	// Endpoint configuration for the WireGuard Peer.
	Endpoint WireguardPeerEndpointPtrInput
	// The ID of the WireGuard Peer that the peer will connect to.
	GatewayId pulumi.StringPtrInput
	// The location of the WireGuard Peer. Supported locations: de/fra, de/txl
	Location pulumi.StringPtrInput
	// The human readable name of your WireGuard Gateway Peer.
	Name pulumi.StringPtrInput
	// WireGuard public key of the connecting peer
	PublicKey pulumi.StringPtrInput
	// The status of the WireGuard Gateway
	Status pulumi.StringPtrInput
}

func (WireguardPeerState) ElementType() reflect.Type {
	return reflect.TypeOf((*wireguardPeerState)(nil)).Elem()
}

type wireguardPeerArgs struct {
	// The subnet CIDRs that are allowed to connect to the WireGuard Gateway.
	AllowedIps []string `pulumi:"allowedIps"`
	// Human readable description of the WireGuard Gateway Peer.
	Description *string `pulumi:"description"`
	// Endpoint configuration for the WireGuard Peer.
	Endpoint *WireguardPeerEndpoint `pulumi:"endpoint"`
	// The ID of the WireGuard Peer that the peer will connect to.
	GatewayId string `pulumi:"gatewayId"`
	// The location of the WireGuard Peer. Supported locations: de/fra, de/txl
	Location string `pulumi:"location"`
	// The human readable name of your WireGuard Gateway Peer.
	Name *string `pulumi:"name"`
	// WireGuard public key of the connecting peer
	PublicKey string `pulumi:"publicKey"`
}

// The set of arguments for constructing a WireguardPeer resource.
type WireguardPeerArgs struct {
	// The subnet CIDRs that are allowed to connect to the WireGuard Gateway.
	AllowedIps pulumi.StringArrayInput
	// Human readable description of the WireGuard Gateway Peer.
	Description pulumi.StringPtrInput
	// Endpoint configuration for the WireGuard Peer.
	Endpoint WireguardPeerEndpointPtrInput
	// The ID of the WireGuard Peer that the peer will connect to.
	GatewayId pulumi.StringInput
	// The location of the WireGuard Peer. Supported locations: de/fra, de/txl
	Location pulumi.StringInput
	// The human readable name of your WireGuard Gateway Peer.
	Name pulumi.StringPtrInput
	// WireGuard public key of the connecting peer
	PublicKey pulumi.StringInput
}

func (WireguardPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wireguardPeerArgs)(nil)).Elem()
}

type WireguardPeerInput interface {
	pulumi.Input

	ToWireguardPeerOutput() WireguardPeerOutput
	ToWireguardPeerOutputWithContext(ctx context.Context) WireguardPeerOutput
}

func (*WireguardPeer) ElementType() reflect.Type {
	return reflect.TypeOf((**WireguardPeer)(nil)).Elem()
}

func (i *WireguardPeer) ToWireguardPeerOutput() WireguardPeerOutput {
	return i.ToWireguardPeerOutputWithContext(context.Background())
}

func (i *WireguardPeer) ToWireguardPeerOutputWithContext(ctx context.Context) WireguardPeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WireguardPeerOutput)
}

// WireguardPeerArrayInput is an input type that accepts WireguardPeerArray and WireguardPeerArrayOutput values.
// You can construct a concrete instance of `WireguardPeerArrayInput` via:
//
//	WireguardPeerArray{ WireguardPeerArgs{...} }
type WireguardPeerArrayInput interface {
	pulumi.Input

	ToWireguardPeerArrayOutput() WireguardPeerArrayOutput
	ToWireguardPeerArrayOutputWithContext(context.Context) WireguardPeerArrayOutput
}

type WireguardPeerArray []WireguardPeerInput

func (WireguardPeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WireguardPeer)(nil)).Elem()
}

func (i WireguardPeerArray) ToWireguardPeerArrayOutput() WireguardPeerArrayOutput {
	return i.ToWireguardPeerArrayOutputWithContext(context.Background())
}

func (i WireguardPeerArray) ToWireguardPeerArrayOutputWithContext(ctx context.Context) WireguardPeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WireguardPeerArrayOutput)
}

// WireguardPeerMapInput is an input type that accepts WireguardPeerMap and WireguardPeerMapOutput values.
// You can construct a concrete instance of `WireguardPeerMapInput` via:
//
//	WireguardPeerMap{ "key": WireguardPeerArgs{...} }
type WireguardPeerMapInput interface {
	pulumi.Input

	ToWireguardPeerMapOutput() WireguardPeerMapOutput
	ToWireguardPeerMapOutputWithContext(context.Context) WireguardPeerMapOutput
}

type WireguardPeerMap map[string]WireguardPeerInput

func (WireguardPeerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WireguardPeer)(nil)).Elem()
}

func (i WireguardPeerMap) ToWireguardPeerMapOutput() WireguardPeerMapOutput {
	return i.ToWireguardPeerMapOutputWithContext(context.Background())
}

func (i WireguardPeerMap) ToWireguardPeerMapOutputWithContext(ctx context.Context) WireguardPeerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WireguardPeerMapOutput)
}

type WireguardPeerOutput struct{ *pulumi.OutputState }

func (WireguardPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WireguardPeer)(nil)).Elem()
}

func (o WireguardPeerOutput) ToWireguardPeerOutput() WireguardPeerOutput {
	return o
}

func (o WireguardPeerOutput) ToWireguardPeerOutputWithContext(ctx context.Context) WireguardPeerOutput {
	return o
}

// The subnet CIDRs that are allowed to connect to the WireGuard Gateway.
func (o WireguardPeerOutput) AllowedIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WireguardPeer) pulumi.StringArrayOutput { return v.AllowedIps }).(pulumi.StringArrayOutput)
}

// Human readable description of the WireGuard Gateway Peer.
func (o WireguardPeerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WireguardPeer) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Endpoint configuration for the WireGuard Peer.
func (o WireguardPeerOutput) Endpoint() WireguardPeerEndpointPtrOutput {
	return o.ApplyT(func(v *WireguardPeer) WireguardPeerEndpointPtrOutput { return v.Endpoint }).(WireguardPeerEndpointPtrOutput)
}

// The ID of the WireGuard Peer that the peer will connect to.
func (o WireguardPeerOutput) GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *WireguardPeer) pulumi.StringOutput { return v.GatewayId }).(pulumi.StringOutput)
}

// The location of the WireGuard Peer. Supported locations: de/fra, de/txl
func (o WireguardPeerOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *WireguardPeer) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The human readable name of your WireGuard Gateway Peer.
func (o WireguardPeerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WireguardPeer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// WireGuard public key of the connecting peer
func (o WireguardPeerOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *WireguardPeer) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

// The status of the WireGuard Gateway
func (o WireguardPeerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *WireguardPeer) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type WireguardPeerArrayOutput struct{ *pulumi.OutputState }

func (WireguardPeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WireguardPeer)(nil)).Elem()
}

func (o WireguardPeerArrayOutput) ToWireguardPeerArrayOutput() WireguardPeerArrayOutput {
	return o
}

func (o WireguardPeerArrayOutput) ToWireguardPeerArrayOutputWithContext(ctx context.Context) WireguardPeerArrayOutput {
	return o
}

func (o WireguardPeerArrayOutput) Index(i pulumi.IntInput) WireguardPeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WireguardPeer {
		return vs[0].([]*WireguardPeer)[vs[1].(int)]
	}).(WireguardPeerOutput)
}

type WireguardPeerMapOutput struct{ *pulumi.OutputState }

func (WireguardPeerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WireguardPeer)(nil)).Elem()
}

func (o WireguardPeerMapOutput) ToWireguardPeerMapOutput() WireguardPeerMapOutput {
	return o
}

func (o WireguardPeerMapOutput) ToWireguardPeerMapOutputWithContext(ctx context.Context) WireguardPeerMapOutput {
	return o
}

func (o WireguardPeerMapOutput) MapIndex(k pulumi.StringInput) WireguardPeerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WireguardPeer {
		return vs[0].(map[string]*WireguardPeer)[vs[1].(string)]
	}).(WireguardPeerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WireguardPeerInput)(nil)).Elem(), &WireguardPeer{})
	pulumi.RegisterInputType(reflect.TypeOf((*WireguardPeerArrayInput)(nil)).Elem(), WireguardPeerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WireguardPeerMapInput)(nil)).Elem(), WireguardPeerMap{})
	pulumi.RegisterOutputType(WireguardPeerOutput{})
	pulumi.RegisterOutputType(WireguardPeerArrayOutput{})
	pulumi.RegisterOutputType(WireguardPeerMapOutput{})
}
