// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `vpn.WireguardGateway` data source provides information about a specific IonosCloud VPN WireGuard Gateway. You can use this data source to retrieve details of a WireGuard Gateway for use in other resources and configurations.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/vpn"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpn.LookupWireguardPeer(ctx, &vpn.LookupWireguardPeerArgs{
//				Location:  "de/fra",
//				GatewayId: "example-gateway",
//				Name:      pulumi.StringRef("example-peer"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("vpnWireguardPeerPublicKey", exampleVpnWireguardPeer.PublicKey)
//			return nil
//		})
//	}
//
// ```
func LookupWireguardPeer(ctx *pulumi.Context, args *LookupWireguardPeerArgs, opts ...pulumi.InvokeOption) (*LookupWireguardPeerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupWireguardPeerResult
	err := ctx.Invoke("ionoscloud:vpn/getWireguardPeer:getWireguardPeer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getWireguardPeer.
type LookupWireguardPeerArgs struct {
	// [String] The ID of the WireGuard Gateway.
	GatewayId string `pulumi:"gatewayId"`
	// [String] The ID of the WireGuard Peer.
	Id *string `pulumi:"id"`
	// [String] The location of the WireGuard Gateway.
	Location string `pulumi:"location"`
	// [String] The name of the WireGuard Peer.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getWireguardPeer.
type LookupWireguardPeerResult struct {
	// The subnet CIDRs that are allowed to connect to the WireGuard Gateway.
	AllowedIps []string `pulumi:"allowedIps"`
	// The description of the WireGuard Peer.
	Description string `pulumi:"description"`
	// The endpoint of the WireGuard Peer.
	Endpoints []GetWireguardPeerEndpoint `pulumi:"endpoints"`
	GatewayId string                     `pulumi:"gatewayId"`
	// The unique ID of the WireGuard Peer.
	Id       *string `pulumi:"id"`
	Location string  `pulumi:"location"`
	// The name of the WireGuard Peer.
	Name string `pulumi:"name"`
	// WireGuard public key of the connecting peer.
	PublicKey string `pulumi:"publicKey"`
	// The current status of the WireGuard Peer.
	Status string `pulumi:"status"`
}

func LookupWireguardPeerOutput(ctx *pulumi.Context, args LookupWireguardPeerOutputArgs, opts ...pulumi.InvokeOption) LookupWireguardPeerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupWireguardPeerResultOutput, error) {
			args := v.(LookupWireguardPeerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ionoscloud:vpn/getWireguardPeer:getWireguardPeer", args, LookupWireguardPeerResultOutput{}, options).(LookupWireguardPeerResultOutput), nil
		}).(LookupWireguardPeerResultOutput)
}

// A collection of arguments for invoking getWireguardPeer.
type LookupWireguardPeerOutputArgs struct {
	// [String] The ID of the WireGuard Gateway.
	GatewayId pulumi.StringInput `pulumi:"gatewayId"`
	// [String] The ID of the WireGuard Peer.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// [String] The location of the WireGuard Gateway.
	Location pulumi.StringInput `pulumi:"location"`
	// [String] The name of the WireGuard Peer.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupWireguardPeerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWireguardPeerArgs)(nil)).Elem()
}

// A collection of values returned by getWireguardPeer.
type LookupWireguardPeerResultOutput struct{ *pulumi.OutputState }

func (LookupWireguardPeerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWireguardPeerResult)(nil)).Elem()
}

func (o LookupWireguardPeerResultOutput) ToLookupWireguardPeerResultOutput() LookupWireguardPeerResultOutput {
	return o
}

func (o LookupWireguardPeerResultOutput) ToLookupWireguardPeerResultOutputWithContext(ctx context.Context) LookupWireguardPeerResultOutput {
	return o
}

// The subnet CIDRs that are allowed to connect to the WireGuard Gateway.
func (o LookupWireguardPeerResultOutput) AllowedIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupWireguardPeerResult) []string { return v.AllowedIps }).(pulumi.StringArrayOutput)
}

// The description of the WireGuard Peer.
func (o LookupWireguardPeerResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWireguardPeerResult) string { return v.Description }).(pulumi.StringOutput)
}

// The endpoint of the WireGuard Peer.
func (o LookupWireguardPeerResultOutput) Endpoints() GetWireguardPeerEndpointArrayOutput {
	return o.ApplyT(func(v LookupWireguardPeerResult) []GetWireguardPeerEndpoint { return v.Endpoints }).(GetWireguardPeerEndpointArrayOutput)
}

func (o LookupWireguardPeerResultOutput) GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWireguardPeerResult) string { return v.GatewayId }).(pulumi.StringOutput)
}

// The unique ID of the WireGuard Peer.
func (o LookupWireguardPeerResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWireguardPeerResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupWireguardPeerResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWireguardPeerResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the WireGuard Peer.
func (o LookupWireguardPeerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWireguardPeerResult) string { return v.Name }).(pulumi.StringOutput)
}

// WireGuard public key of the connecting peer.
func (o LookupWireguardPeerResultOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWireguardPeerResult) string { return v.PublicKey }).(pulumi.StringOutput)
}

// The current status of the WireGuard Peer.
func (o LookupWireguardPeerResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWireguardPeerResult) string { return v.Status }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupWireguardPeerResultOutput{})
}
