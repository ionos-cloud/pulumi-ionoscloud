// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type IpsecGatewayConnection struct {
	// [string] The datacenter to connect your VPN Gateway to.
	DatacenterId string `pulumi:"datacenterId"`
	// [string] Describes the private ipv4 subnet in your LAN that should be accessible by the
	// VPN Gateway. Note: this should be the subnet already assigned to the LAN
	Ipv4Cidr string `pulumi:"ipv4Cidr"`
	// [string] Describes the ipv6 subnet in your LAN that should be accessible by the VPN
	// Gateway. **Note**: this should be the subnet already assigned to the LAN
	Ipv6Cidr *string `pulumi:"ipv6Cidr"`
	// [string] The numeric LAN ID to connect your VPN Gateway to.
	LanId string `pulumi:"lanId"`
}

// IpsecGatewayConnectionInput is an input type that accepts IpsecGatewayConnectionArgs and IpsecGatewayConnectionOutput values.
// You can construct a concrete instance of `IpsecGatewayConnectionInput` via:
//
//	IpsecGatewayConnectionArgs{...}
type IpsecGatewayConnectionInput interface {
	pulumi.Input

	ToIpsecGatewayConnectionOutput() IpsecGatewayConnectionOutput
	ToIpsecGatewayConnectionOutputWithContext(context.Context) IpsecGatewayConnectionOutput
}

type IpsecGatewayConnectionArgs struct {
	// [string] The datacenter to connect your VPN Gateway to.
	DatacenterId pulumi.StringInput `pulumi:"datacenterId"`
	// [string] Describes the private ipv4 subnet in your LAN that should be accessible by the
	// VPN Gateway. Note: this should be the subnet already assigned to the LAN
	Ipv4Cidr pulumi.StringInput `pulumi:"ipv4Cidr"`
	// [string] Describes the ipv6 subnet in your LAN that should be accessible by the VPN
	// Gateway. **Note**: this should be the subnet already assigned to the LAN
	Ipv6Cidr pulumi.StringPtrInput `pulumi:"ipv6Cidr"`
	// [string] The numeric LAN ID to connect your VPN Gateway to.
	LanId pulumi.StringInput `pulumi:"lanId"`
}

func (IpsecGatewayConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpsecGatewayConnection)(nil)).Elem()
}

func (i IpsecGatewayConnectionArgs) ToIpsecGatewayConnectionOutput() IpsecGatewayConnectionOutput {
	return i.ToIpsecGatewayConnectionOutputWithContext(context.Background())
}

func (i IpsecGatewayConnectionArgs) ToIpsecGatewayConnectionOutputWithContext(ctx context.Context) IpsecGatewayConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsecGatewayConnectionOutput)
}

// IpsecGatewayConnectionArrayInput is an input type that accepts IpsecGatewayConnectionArray and IpsecGatewayConnectionArrayOutput values.
// You can construct a concrete instance of `IpsecGatewayConnectionArrayInput` via:
//
//	IpsecGatewayConnectionArray{ IpsecGatewayConnectionArgs{...} }
type IpsecGatewayConnectionArrayInput interface {
	pulumi.Input

	ToIpsecGatewayConnectionArrayOutput() IpsecGatewayConnectionArrayOutput
	ToIpsecGatewayConnectionArrayOutputWithContext(context.Context) IpsecGatewayConnectionArrayOutput
}

type IpsecGatewayConnectionArray []IpsecGatewayConnectionInput

func (IpsecGatewayConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpsecGatewayConnection)(nil)).Elem()
}

func (i IpsecGatewayConnectionArray) ToIpsecGatewayConnectionArrayOutput() IpsecGatewayConnectionArrayOutput {
	return i.ToIpsecGatewayConnectionArrayOutputWithContext(context.Background())
}

func (i IpsecGatewayConnectionArray) ToIpsecGatewayConnectionArrayOutputWithContext(ctx context.Context) IpsecGatewayConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsecGatewayConnectionArrayOutput)
}

type IpsecGatewayConnectionOutput struct{ *pulumi.OutputState }

func (IpsecGatewayConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpsecGatewayConnection)(nil)).Elem()
}

func (o IpsecGatewayConnectionOutput) ToIpsecGatewayConnectionOutput() IpsecGatewayConnectionOutput {
	return o
}

func (o IpsecGatewayConnectionOutput) ToIpsecGatewayConnectionOutputWithContext(ctx context.Context) IpsecGatewayConnectionOutput {
	return o
}

// [string] The datacenter to connect your VPN Gateway to.
func (o IpsecGatewayConnectionOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v IpsecGatewayConnection) string { return v.DatacenterId }).(pulumi.StringOutput)
}

// [string] Describes the private ipv4 subnet in your LAN that should be accessible by the
// VPN Gateway. Note: this should be the subnet already assigned to the LAN
func (o IpsecGatewayConnectionOutput) Ipv4Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v IpsecGatewayConnection) string { return v.Ipv4Cidr }).(pulumi.StringOutput)
}

// [string] Describes the ipv6 subnet in your LAN that should be accessible by the VPN
// Gateway. **Note**: this should be the subnet already assigned to the LAN
func (o IpsecGatewayConnectionOutput) Ipv6Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpsecGatewayConnection) *string { return v.Ipv6Cidr }).(pulumi.StringPtrOutput)
}

// [string] The numeric LAN ID to connect your VPN Gateway to.
func (o IpsecGatewayConnectionOutput) LanId() pulumi.StringOutput {
	return o.ApplyT(func(v IpsecGatewayConnection) string { return v.LanId }).(pulumi.StringOutput)
}

type IpsecGatewayConnectionArrayOutput struct{ *pulumi.OutputState }

func (IpsecGatewayConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpsecGatewayConnection)(nil)).Elem()
}

func (o IpsecGatewayConnectionArrayOutput) ToIpsecGatewayConnectionArrayOutput() IpsecGatewayConnectionArrayOutput {
	return o
}

func (o IpsecGatewayConnectionArrayOutput) ToIpsecGatewayConnectionArrayOutputWithContext(ctx context.Context) IpsecGatewayConnectionArrayOutput {
	return o
}

func (o IpsecGatewayConnectionArrayOutput) Index(i pulumi.IntInput) IpsecGatewayConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpsecGatewayConnection {
		return vs[0].([]IpsecGatewayConnection)[vs[1].(int)]
	}).(IpsecGatewayConnectionOutput)
}

type IpsecTunnelAuth struct {
	// [string] The authentication method to use for IPSec Authentication. Possible values: `PSK`.
	// Default value: `PSK`.
	Method *string `pulumi:"method"`
	// [string] The pre-shared key to use for IPSec Authentication. **Note**: Required if method is
	// PSK.
	PskKey *string `pulumi:"pskKey"`
}

// IpsecTunnelAuthInput is an input type that accepts IpsecTunnelAuthArgs and IpsecTunnelAuthOutput values.
// You can construct a concrete instance of `IpsecTunnelAuthInput` via:
//
//	IpsecTunnelAuthArgs{...}
type IpsecTunnelAuthInput interface {
	pulumi.Input

	ToIpsecTunnelAuthOutput() IpsecTunnelAuthOutput
	ToIpsecTunnelAuthOutputWithContext(context.Context) IpsecTunnelAuthOutput
}

type IpsecTunnelAuthArgs struct {
	// [string] The authentication method to use for IPSec Authentication. Possible values: `PSK`.
	// Default value: `PSK`.
	Method pulumi.StringPtrInput `pulumi:"method"`
	// [string] The pre-shared key to use for IPSec Authentication. **Note**: Required if method is
	// PSK.
	PskKey pulumi.StringPtrInput `pulumi:"pskKey"`
}

func (IpsecTunnelAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpsecTunnelAuth)(nil)).Elem()
}

func (i IpsecTunnelAuthArgs) ToIpsecTunnelAuthOutput() IpsecTunnelAuthOutput {
	return i.ToIpsecTunnelAuthOutputWithContext(context.Background())
}

func (i IpsecTunnelAuthArgs) ToIpsecTunnelAuthOutputWithContext(ctx context.Context) IpsecTunnelAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsecTunnelAuthOutput)
}

func (i IpsecTunnelAuthArgs) ToIpsecTunnelAuthPtrOutput() IpsecTunnelAuthPtrOutput {
	return i.ToIpsecTunnelAuthPtrOutputWithContext(context.Background())
}

func (i IpsecTunnelAuthArgs) ToIpsecTunnelAuthPtrOutputWithContext(ctx context.Context) IpsecTunnelAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsecTunnelAuthOutput).ToIpsecTunnelAuthPtrOutputWithContext(ctx)
}

// IpsecTunnelAuthPtrInput is an input type that accepts IpsecTunnelAuthArgs, IpsecTunnelAuthPtr and IpsecTunnelAuthPtrOutput values.
// You can construct a concrete instance of `IpsecTunnelAuthPtrInput` via:
//
//	        IpsecTunnelAuthArgs{...}
//
//	or:
//
//	        nil
type IpsecTunnelAuthPtrInput interface {
	pulumi.Input

	ToIpsecTunnelAuthPtrOutput() IpsecTunnelAuthPtrOutput
	ToIpsecTunnelAuthPtrOutputWithContext(context.Context) IpsecTunnelAuthPtrOutput
}

type ipsecTunnelAuthPtrType IpsecTunnelAuthArgs

func IpsecTunnelAuthPtr(v *IpsecTunnelAuthArgs) IpsecTunnelAuthPtrInput {
	return (*ipsecTunnelAuthPtrType)(v)
}

func (*ipsecTunnelAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IpsecTunnelAuth)(nil)).Elem()
}

func (i *ipsecTunnelAuthPtrType) ToIpsecTunnelAuthPtrOutput() IpsecTunnelAuthPtrOutput {
	return i.ToIpsecTunnelAuthPtrOutputWithContext(context.Background())
}

func (i *ipsecTunnelAuthPtrType) ToIpsecTunnelAuthPtrOutputWithContext(ctx context.Context) IpsecTunnelAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsecTunnelAuthPtrOutput)
}

type IpsecTunnelAuthOutput struct{ *pulumi.OutputState }

func (IpsecTunnelAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpsecTunnelAuth)(nil)).Elem()
}

func (o IpsecTunnelAuthOutput) ToIpsecTunnelAuthOutput() IpsecTunnelAuthOutput {
	return o
}

func (o IpsecTunnelAuthOutput) ToIpsecTunnelAuthOutputWithContext(ctx context.Context) IpsecTunnelAuthOutput {
	return o
}

func (o IpsecTunnelAuthOutput) ToIpsecTunnelAuthPtrOutput() IpsecTunnelAuthPtrOutput {
	return o.ToIpsecTunnelAuthPtrOutputWithContext(context.Background())
}

func (o IpsecTunnelAuthOutput) ToIpsecTunnelAuthPtrOutputWithContext(ctx context.Context) IpsecTunnelAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IpsecTunnelAuth) *IpsecTunnelAuth {
		return &v
	}).(IpsecTunnelAuthPtrOutput)
}

// [string] The authentication method to use for IPSec Authentication. Possible values: `PSK`.
// Default value: `PSK`.
func (o IpsecTunnelAuthOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpsecTunnelAuth) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// [string] The pre-shared key to use for IPSec Authentication. **Note**: Required if method is
// PSK.
func (o IpsecTunnelAuthOutput) PskKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpsecTunnelAuth) *string { return v.PskKey }).(pulumi.StringPtrOutput)
}

type IpsecTunnelAuthPtrOutput struct{ *pulumi.OutputState }

func (IpsecTunnelAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpsecTunnelAuth)(nil)).Elem()
}

func (o IpsecTunnelAuthPtrOutput) ToIpsecTunnelAuthPtrOutput() IpsecTunnelAuthPtrOutput {
	return o
}

func (o IpsecTunnelAuthPtrOutput) ToIpsecTunnelAuthPtrOutputWithContext(ctx context.Context) IpsecTunnelAuthPtrOutput {
	return o
}

func (o IpsecTunnelAuthPtrOutput) Elem() IpsecTunnelAuthOutput {
	return o.ApplyT(func(v *IpsecTunnelAuth) IpsecTunnelAuth {
		if v != nil {
			return *v
		}
		var ret IpsecTunnelAuth
		return ret
	}).(IpsecTunnelAuthOutput)
}

// [string] The authentication method to use for IPSec Authentication. Possible values: `PSK`.
// Default value: `PSK`.
func (o IpsecTunnelAuthPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpsecTunnelAuth) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// [string] The pre-shared key to use for IPSec Authentication. **Note**: Required if method is
// PSK.
func (o IpsecTunnelAuthPtrOutput) PskKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpsecTunnelAuth) *string {
		if v == nil {
			return nil
		}
		return v.PskKey
	}).(pulumi.StringPtrOutput)
}

type IpsecTunnelEsp struct {
	// [string] The Diffie-Hellman Group to use for IPSec Encryption. Possible
	// values: `15-MODP3072`, `16-MODP4096`, `19-ECP256`, `20-ECP384`, `21-ECP521`, `28-ECP256BP`, `29-ECP384BP`, `30-ECP512BP`.
	// Default value: `16-MODP4096`.
	DiffieHellmanGroup *string `pulumi:"diffieHellmanGroup"`
	// [string] The encryption algorithm to use for IPSec Encryption. Possible
	// values: `AES128`, `AES256`, `AES128-CTR`, `AES256-CTR`, `AES128-GCM-16`, `AES256-GCM-16`, `AES128-GCM-12`, `AES256-GCM-12`, `AES128-CCM-12`,
	// `AES256-CCM-12`. Default value: `AES256`.
	EncryptionAlgorithm *string `pulumi:"encryptionAlgorithm"`
	// [string] The integrity algorithm to use for IPSec Encryption. Possible
	// values: `SHA256`, `SHA384`, `SHA512`, `AES-XCBC`. Default value: `SHA256`.
	IntegrityAlgorithm *string `pulumi:"integrityAlgorithm"`
	// [string] The phase lifetime in seconds. Minimum value: `3600`. Maximum value: `86400`.
	// Default value: `86400`.
	Lifetime *int `pulumi:"lifetime"`
}

// IpsecTunnelEspInput is an input type that accepts IpsecTunnelEspArgs and IpsecTunnelEspOutput values.
// You can construct a concrete instance of `IpsecTunnelEspInput` via:
//
//	IpsecTunnelEspArgs{...}
type IpsecTunnelEspInput interface {
	pulumi.Input

	ToIpsecTunnelEspOutput() IpsecTunnelEspOutput
	ToIpsecTunnelEspOutputWithContext(context.Context) IpsecTunnelEspOutput
}

type IpsecTunnelEspArgs struct {
	// [string] The Diffie-Hellman Group to use for IPSec Encryption. Possible
	// values: `15-MODP3072`, `16-MODP4096`, `19-ECP256`, `20-ECP384`, `21-ECP521`, `28-ECP256BP`, `29-ECP384BP`, `30-ECP512BP`.
	// Default value: `16-MODP4096`.
	DiffieHellmanGroup pulumi.StringPtrInput `pulumi:"diffieHellmanGroup"`
	// [string] The encryption algorithm to use for IPSec Encryption. Possible
	// values: `AES128`, `AES256`, `AES128-CTR`, `AES256-CTR`, `AES128-GCM-16`, `AES256-GCM-16`, `AES128-GCM-12`, `AES256-GCM-12`, `AES128-CCM-12`,
	// `AES256-CCM-12`. Default value: `AES256`.
	EncryptionAlgorithm pulumi.StringPtrInput `pulumi:"encryptionAlgorithm"`
	// [string] The integrity algorithm to use for IPSec Encryption. Possible
	// values: `SHA256`, `SHA384`, `SHA512`, `AES-XCBC`. Default value: `SHA256`.
	IntegrityAlgorithm pulumi.StringPtrInput `pulumi:"integrityAlgorithm"`
	// [string] The phase lifetime in seconds. Minimum value: `3600`. Maximum value: `86400`.
	// Default value: `86400`.
	Lifetime pulumi.IntPtrInput `pulumi:"lifetime"`
}

func (IpsecTunnelEspArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpsecTunnelEsp)(nil)).Elem()
}

func (i IpsecTunnelEspArgs) ToIpsecTunnelEspOutput() IpsecTunnelEspOutput {
	return i.ToIpsecTunnelEspOutputWithContext(context.Background())
}

func (i IpsecTunnelEspArgs) ToIpsecTunnelEspOutputWithContext(ctx context.Context) IpsecTunnelEspOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsecTunnelEspOutput)
}

// IpsecTunnelEspArrayInput is an input type that accepts IpsecTunnelEspArray and IpsecTunnelEspArrayOutput values.
// You can construct a concrete instance of `IpsecTunnelEspArrayInput` via:
//
//	IpsecTunnelEspArray{ IpsecTunnelEspArgs{...} }
type IpsecTunnelEspArrayInput interface {
	pulumi.Input

	ToIpsecTunnelEspArrayOutput() IpsecTunnelEspArrayOutput
	ToIpsecTunnelEspArrayOutputWithContext(context.Context) IpsecTunnelEspArrayOutput
}

type IpsecTunnelEspArray []IpsecTunnelEspInput

func (IpsecTunnelEspArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpsecTunnelEsp)(nil)).Elem()
}

func (i IpsecTunnelEspArray) ToIpsecTunnelEspArrayOutput() IpsecTunnelEspArrayOutput {
	return i.ToIpsecTunnelEspArrayOutputWithContext(context.Background())
}

func (i IpsecTunnelEspArray) ToIpsecTunnelEspArrayOutputWithContext(ctx context.Context) IpsecTunnelEspArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsecTunnelEspArrayOutput)
}

type IpsecTunnelEspOutput struct{ *pulumi.OutputState }

func (IpsecTunnelEspOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpsecTunnelEsp)(nil)).Elem()
}

func (o IpsecTunnelEspOutput) ToIpsecTunnelEspOutput() IpsecTunnelEspOutput {
	return o
}

func (o IpsecTunnelEspOutput) ToIpsecTunnelEspOutputWithContext(ctx context.Context) IpsecTunnelEspOutput {
	return o
}

// [string] The Diffie-Hellman Group to use for IPSec Encryption. Possible
// values: `15-MODP3072`, `16-MODP4096`, `19-ECP256`, `20-ECP384`, `21-ECP521`, `28-ECP256BP`, `29-ECP384BP`, `30-ECP512BP`.
// Default value: `16-MODP4096`.
func (o IpsecTunnelEspOutput) DiffieHellmanGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpsecTunnelEsp) *string { return v.DiffieHellmanGroup }).(pulumi.StringPtrOutput)
}

// [string] The encryption algorithm to use for IPSec Encryption. Possible
// values: `AES128`, `AES256`, `AES128-CTR`, `AES256-CTR`, `AES128-GCM-16`, `AES256-GCM-16`, `AES128-GCM-12`, `AES256-GCM-12`, `AES128-CCM-12`,
// `AES256-CCM-12`. Default value: `AES256`.
func (o IpsecTunnelEspOutput) EncryptionAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpsecTunnelEsp) *string { return v.EncryptionAlgorithm }).(pulumi.StringPtrOutput)
}

// [string] The integrity algorithm to use for IPSec Encryption. Possible
// values: `SHA256`, `SHA384`, `SHA512`, `AES-XCBC`. Default value: `SHA256`.
func (o IpsecTunnelEspOutput) IntegrityAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpsecTunnelEsp) *string { return v.IntegrityAlgorithm }).(pulumi.StringPtrOutput)
}

// [string] The phase lifetime in seconds. Minimum value: `3600`. Maximum value: `86400`.
// Default value: `86400`.
func (o IpsecTunnelEspOutput) Lifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IpsecTunnelEsp) *int { return v.Lifetime }).(pulumi.IntPtrOutput)
}

type IpsecTunnelEspArrayOutput struct{ *pulumi.OutputState }

func (IpsecTunnelEspArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpsecTunnelEsp)(nil)).Elem()
}

func (o IpsecTunnelEspArrayOutput) ToIpsecTunnelEspArrayOutput() IpsecTunnelEspArrayOutput {
	return o
}

func (o IpsecTunnelEspArrayOutput) ToIpsecTunnelEspArrayOutputWithContext(ctx context.Context) IpsecTunnelEspArrayOutput {
	return o
}

func (o IpsecTunnelEspArrayOutput) Index(i pulumi.IntInput) IpsecTunnelEspOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpsecTunnelEsp {
		return vs[0].([]IpsecTunnelEsp)[vs[1].(int)]
	}).(IpsecTunnelEspOutput)
}

type IpsecTunnelIke struct {
	// [string] The Diffie-Hellman Group to use for IPSec Encryption. Possible
	// values: `15-MODP3072`, `16-MODP4096`, `19-ECP256`, `20-ECP384`, `21-ECP521`, `28-ECP256BP`, `29-ECP384BP`, `30-ECP512BP`.
	// Default value: `16-MODP4096`.
	DiffieHellmanGroup *string `pulumi:"diffieHellmanGroup"`
	// [string] The encryption algorithm to use for IPSec Encryption. Possible
	// values: `AES128`, `AES256`, `AES128-CTR`, `AES256-CTR`, `AES128-GCM-16`, `AES256-GCM-16`, `AES128-GCM-12`, `AES256-GCM-12`, `AES128-CCM-12`,
	// `AES256-CCM-12`. Default value: `AES256`.
	EncryptionAlgorithm *string `pulumi:"encryptionAlgorithm"`
	// [string] The integrity algorithm to use for IPSec Encryption. Possible
	// values: `SHA256`, `SHA384`, `SHA512`, `AES-XCBC`. Default value: `SHA256`.
	IntegrityAlgorithm *string `pulumi:"integrityAlgorithm"`
	// [string] The phase lifetime in seconds. Minimum value: `3600`. Maximum value: `86400`.
	// Default value: `86400`.
	Lifetime *int `pulumi:"lifetime"`
}

// IpsecTunnelIkeInput is an input type that accepts IpsecTunnelIkeArgs and IpsecTunnelIkeOutput values.
// You can construct a concrete instance of `IpsecTunnelIkeInput` via:
//
//	IpsecTunnelIkeArgs{...}
type IpsecTunnelIkeInput interface {
	pulumi.Input

	ToIpsecTunnelIkeOutput() IpsecTunnelIkeOutput
	ToIpsecTunnelIkeOutputWithContext(context.Context) IpsecTunnelIkeOutput
}

type IpsecTunnelIkeArgs struct {
	// [string] The Diffie-Hellman Group to use for IPSec Encryption. Possible
	// values: `15-MODP3072`, `16-MODP4096`, `19-ECP256`, `20-ECP384`, `21-ECP521`, `28-ECP256BP`, `29-ECP384BP`, `30-ECP512BP`.
	// Default value: `16-MODP4096`.
	DiffieHellmanGroup pulumi.StringPtrInput `pulumi:"diffieHellmanGroup"`
	// [string] The encryption algorithm to use for IPSec Encryption. Possible
	// values: `AES128`, `AES256`, `AES128-CTR`, `AES256-CTR`, `AES128-GCM-16`, `AES256-GCM-16`, `AES128-GCM-12`, `AES256-GCM-12`, `AES128-CCM-12`,
	// `AES256-CCM-12`. Default value: `AES256`.
	EncryptionAlgorithm pulumi.StringPtrInput `pulumi:"encryptionAlgorithm"`
	// [string] The integrity algorithm to use for IPSec Encryption. Possible
	// values: `SHA256`, `SHA384`, `SHA512`, `AES-XCBC`. Default value: `SHA256`.
	IntegrityAlgorithm pulumi.StringPtrInput `pulumi:"integrityAlgorithm"`
	// [string] The phase lifetime in seconds. Minimum value: `3600`. Maximum value: `86400`.
	// Default value: `86400`.
	Lifetime pulumi.IntPtrInput `pulumi:"lifetime"`
}

func (IpsecTunnelIkeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpsecTunnelIke)(nil)).Elem()
}

func (i IpsecTunnelIkeArgs) ToIpsecTunnelIkeOutput() IpsecTunnelIkeOutput {
	return i.ToIpsecTunnelIkeOutputWithContext(context.Background())
}

func (i IpsecTunnelIkeArgs) ToIpsecTunnelIkeOutputWithContext(ctx context.Context) IpsecTunnelIkeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsecTunnelIkeOutput)
}

func (i IpsecTunnelIkeArgs) ToIpsecTunnelIkePtrOutput() IpsecTunnelIkePtrOutput {
	return i.ToIpsecTunnelIkePtrOutputWithContext(context.Background())
}

func (i IpsecTunnelIkeArgs) ToIpsecTunnelIkePtrOutputWithContext(ctx context.Context) IpsecTunnelIkePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsecTunnelIkeOutput).ToIpsecTunnelIkePtrOutputWithContext(ctx)
}

// IpsecTunnelIkePtrInput is an input type that accepts IpsecTunnelIkeArgs, IpsecTunnelIkePtr and IpsecTunnelIkePtrOutput values.
// You can construct a concrete instance of `IpsecTunnelIkePtrInput` via:
//
//	        IpsecTunnelIkeArgs{...}
//
//	or:
//
//	        nil
type IpsecTunnelIkePtrInput interface {
	pulumi.Input

	ToIpsecTunnelIkePtrOutput() IpsecTunnelIkePtrOutput
	ToIpsecTunnelIkePtrOutputWithContext(context.Context) IpsecTunnelIkePtrOutput
}

type ipsecTunnelIkePtrType IpsecTunnelIkeArgs

func IpsecTunnelIkePtr(v *IpsecTunnelIkeArgs) IpsecTunnelIkePtrInput {
	return (*ipsecTunnelIkePtrType)(v)
}

func (*ipsecTunnelIkePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IpsecTunnelIke)(nil)).Elem()
}

func (i *ipsecTunnelIkePtrType) ToIpsecTunnelIkePtrOutput() IpsecTunnelIkePtrOutput {
	return i.ToIpsecTunnelIkePtrOutputWithContext(context.Background())
}

func (i *ipsecTunnelIkePtrType) ToIpsecTunnelIkePtrOutputWithContext(ctx context.Context) IpsecTunnelIkePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsecTunnelIkePtrOutput)
}

type IpsecTunnelIkeOutput struct{ *pulumi.OutputState }

func (IpsecTunnelIkeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpsecTunnelIke)(nil)).Elem()
}

func (o IpsecTunnelIkeOutput) ToIpsecTunnelIkeOutput() IpsecTunnelIkeOutput {
	return o
}

func (o IpsecTunnelIkeOutput) ToIpsecTunnelIkeOutputWithContext(ctx context.Context) IpsecTunnelIkeOutput {
	return o
}

func (o IpsecTunnelIkeOutput) ToIpsecTunnelIkePtrOutput() IpsecTunnelIkePtrOutput {
	return o.ToIpsecTunnelIkePtrOutputWithContext(context.Background())
}

func (o IpsecTunnelIkeOutput) ToIpsecTunnelIkePtrOutputWithContext(ctx context.Context) IpsecTunnelIkePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IpsecTunnelIke) *IpsecTunnelIke {
		return &v
	}).(IpsecTunnelIkePtrOutput)
}

// [string] The Diffie-Hellman Group to use for IPSec Encryption. Possible
// values: `15-MODP3072`, `16-MODP4096`, `19-ECP256`, `20-ECP384`, `21-ECP521`, `28-ECP256BP`, `29-ECP384BP`, `30-ECP512BP`.
// Default value: `16-MODP4096`.
func (o IpsecTunnelIkeOutput) DiffieHellmanGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpsecTunnelIke) *string { return v.DiffieHellmanGroup }).(pulumi.StringPtrOutput)
}

// [string] The encryption algorithm to use for IPSec Encryption. Possible
// values: `AES128`, `AES256`, `AES128-CTR`, `AES256-CTR`, `AES128-GCM-16`, `AES256-GCM-16`, `AES128-GCM-12`, `AES256-GCM-12`, `AES128-CCM-12`,
// `AES256-CCM-12`. Default value: `AES256`.
func (o IpsecTunnelIkeOutput) EncryptionAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpsecTunnelIke) *string { return v.EncryptionAlgorithm }).(pulumi.StringPtrOutput)
}

// [string] The integrity algorithm to use for IPSec Encryption. Possible
// values: `SHA256`, `SHA384`, `SHA512`, `AES-XCBC`. Default value: `SHA256`.
func (o IpsecTunnelIkeOutput) IntegrityAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpsecTunnelIke) *string { return v.IntegrityAlgorithm }).(pulumi.StringPtrOutput)
}

// [string] The phase lifetime in seconds. Minimum value: `3600`. Maximum value: `86400`.
// Default value: `86400`.
func (o IpsecTunnelIkeOutput) Lifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IpsecTunnelIke) *int { return v.Lifetime }).(pulumi.IntPtrOutput)
}

type IpsecTunnelIkePtrOutput struct{ *pulumi.OutputState }

func (IpsecTunnelIkePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpsecTunnelIke)(nil)).Elem()
}

func (o IpsecTunnelIkePtrOutput) ToIpsecTunnelIkePtrOutput() IpsecTunnelIkePtrOutput {
	return o
}

func (o IpsecTunnelIkePtrOutput) ToIpsecTunnelIkePtrOutputWithContext(ctx context.Context) IpsecTunnelIkePtrOutput {
	return o
}

func (o IpsecTunnelIkePtrOutput) Elem() IpsecTunnelIkeOutput {
	return o.ApplyT(func(v *IpsecTunnelIke) IpsecTunnelIke {
		if v != nil {
			return *v
		}
		var ret IpsecTunnelIke
		return ret
	}).(IpsecTunnelIkeOutput)
}

// [string] The Diffie-Hellman Group to use for IPSec Encryption. Possible
// values: `15-MODP3072`, `16-MODP4096`, `19-ECP256`, `20-ECP384`, `21-ECP521`, `28-ECP256BP`, `29-ECP384BP`, `30-ECP512BP`.
// Default value: `16-MODP4096`.
func (o IpsecTunnelIkePtrOutput) DiffieHellmanGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpsecTunnelIke) *string {
		if v == nil {
			return nil
		}
		return v.DiffieHellmanGroup
	}).(pulumi.StringPtrOutput)
}

// [string] The encryption algorithm to use for IPSec Encryption. Possible
// values: `AES128`, `AES256`, `AES128-CTR`, `AES256-CTR`, `AES128-GCM-16`, `AES256-GCM-16`, `AES128-GCM-12`, `AES256-GCM-12`, `AES128-CCM-12`,
// `AES256-CCM-12`. Default value: `AES256`.
func (o IpsecTunnelIkePtrOutput) EncryptionAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpsecTunnelIke) *string {
		if v == nil {
			return nil
		}
		return v.EncryptionAlgorithm
	}).(pulumi.StringPtrOutput)
}

// [string] The integrity algorithm to use for IPSec Encryption. Possible
// values: `SHA256`, `SHA384`, `SHA512`, `AES-XCBC`. Default value: `SHA256`.
func (o IpsecTunnelIkePtrOutput) IntegrityAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpsecTunnelIke) *string {
		if v == nil {
			return nil
		}
		return v.IntegrityAlgorithm
	}).(pulumi.StringPtrOutput)
}

// [string] The phase lifetime in seconds. Minimum value: `3600`. Maximum value: `86400`.
// Default value: `86400`.
func (o IpsecTunnelIkePtrOutput) Lifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IpsecTunnelIke) *int {
		if v == nil {
			return nil
		}
		return v.Lifetime
	}).(pulumi.IntPtrOutput)
}

type WireguardGatewayConnection struct {
	// [String] The ID of the datacenter where the WireGuard Gateway is located.
	DatacenterId string `pulumi:"datacenterId"`
	// [String] The IPv4 CIDR for the WireGuard Gateway connection.
	Ipv4Cidr *string `pulumi:"ipv4Cidr"`
	// [String] The IPv6 CIDR for the WireGuard Gateway connection.
	Ipv6Cidr *string `pulumi:"ipv6Cidr"`
	// [String] The ID of the LAN where the WireGuard Gateway is connected.
	LanId string `pulumi:"lanId"`
}

// WireguardGatewayConnectionInput is an input type that accepts WireguardGatewayConnectionArgs and WireguardGatewayConnectionOutput values.
// You can construct a concrete instance of `WireguardGatewayConnectionInput` via:
//
//	WireguardGatewayConnectionArgs{...}
type WireguardGatewayConnectionInput interface {
	pulumi.Input

	ToWireguardGatewayConnectionOutput() WireguardGatewayConnectionOutput
	ToWireguardGatewayConnectionOutputWithContext(context.Context) WireguardGatewayConnectionOutput
}

type WireguardGatewayConnectionArgs struct {
	// [String] The ID of the datacenter where the WireGuard Gateway is located.
	DatacenterId pulumi.StringInput `pulumi:"datacenterId"`
	// [String] The IPv4 CIDR for the WireGuard Gateway connection.
	Ipv4Cidr pulumi.StringPtrInput `pulumi:"ipv4Cidr"`
	// [String] The IPv6 CIDR for the WireGuard Gateway connection.
	Ipv6Cidr pulumi.StringPtrInput `pulumi:"ipv6Cidr"`
	// [String] The ID of the LAN where the WireGuard Gateway is connected.
	LanId pulumi.StringInput `pulumi:"lanId"`
}

func (WireguardGatewayConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WireguardGatewayConnection)(nil)).Elem()
}

func (i WireguardGatewayConnectionArgs) ToWireguardGatewayConnectionOutput() WireguardGatewayConnectionOutput {
	return i.ToWireguardGatewayConnectionOutputWithContext(context.Background())
}

func (i WireguardGatewayConnectionArgs) ToWireguardGatewayConnectionOutputWithContext(ctx context.Context) WireguardGatewayConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WireguardGatewayConnectionOutput)
}

// WireguardGatewayConnectionArrayInput is an input type that accepts WireguardGatewayConnectionArray and WireguardGatewayConnectionArrayOutput values.
// You can construct a concrete instance of `WireguardGatewayConnectionArrayInput` via:
//
//	WireguardGatewayConnectionArray{ WireguardGatewayConnectionArgs{...} }
type WireguardGatewayConnectionArrayInput interface {
	pulumi.Input

	ToWireguardGatewayConnectionArrayOutput() WireguardGatewayConnectionArrayOutput
	ToWireguardGatewayConnectionArrayOutputWithContext(context.Context) WireguardGatewayConnectionArrayOutput
}

type WireguardGatewayConnectionArray []WireguardGatewayConnectionInput

func (WireguardGatewayConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WireguardGatewayConnection)(nil)).Elem()
}

func (i WireguardGatewayConnectionArray) ToWireguardGatewayConnectionArrayOutput() WireguardGatewayConnectionArrayOutput {
	return i.ToWireguardGatewayConnectionArrayOutputWithContext(context.Background())
}

func (i WireguardGatewayConnectionArray) ToWireguardGatewayConnectionArrayOutputWithContext(ctx context.Context) WireguardGatewayConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WireguardGatewayConnectionArrayOutput)
}

type WireguardGatewayConnectionOutput struct{ *pulumi.OutputState }

func (WireguardGatewayConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WireguardGatewayConnection)(nil)).Elem()
}

func (o WireguardGatewayConnectionOutput) ToWireguardGatewayConnectionOutput() WireguardGatewayConnectionOutput {
	return o
}

func (o WireguardGatewayConnectionOutput) ToWireguardGatewayConnectionOutputWithContext(ctx context.Context) WireguardGatewayConnectionOutput {
	return o
}

// [String] The ID of the datacenter where the WireGuard Gateway is located.
func (o WireguardGatewayConnectionOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v WireguardGatewayConnection) string { return v.DatacenterId }).(pulumi.StringOutput)
}

// [String] The IPv4 CIDR for the WireGuard Gateway connection.
func (o WireguardGatewayConnectionOutput) Ipv4Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WireguardGatewayConnection) *string { return v.Ipv4Cidr }).(pulumi.StringPtrOutput)
}

// [String] The IPv6 CIDR for the WireGuard Gateway connection.
func (o WireguardGatewayConnectionOutput) Ipv6Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WireguardGatewayConnection) *string { return v.Ipv6Cidr }).(pulumi.StringPtrOutput)
}

// [String] The ID of the LAN where the WireGuard Gateway is connected.
func (o WireguardGatewayConnectionOutput) LanId() pulumi.StringOutput {
	return o.ApplyT(func(v WireguardGatewayConnection) string { return v.LanId }).(pulumi.StringOutput)
}

type WireguardGatewayConnectionArrayOutput struct{ *pulumi.OutputState }

func (WireguardGatewayConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WireguardGatewayConnection)(nil)).Elem()
}

func (o WireguardGatewayConnectionArrayOutput) ToWireguardGatewayConnectionArrayOutput() WireguardGatewayConnectionArrayOutput {
	return o
}

func (o WireguardGatewayConnectionArrayOutput) ToWireguardGatewayConnectionArrayOutputWithContext(ctx context.Context) WireguardGatewayConnectionArrayOutput {
	return o
}

func (o WireguardGatewayConnectionArrayOutput) Index(i pulumi.IntInput) WireguardGatewayConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WireguardGatewayConnection {
		return vs[0].([]WireguardGatewayConnection)[vs[1].(int)]
	}).(WireguardGatewayConnectionOutput)
}

type WireguardPeerEndpoint struct {
	// [string] The hostname or IPV4 address that the WireGuard Server will connect to.
	Host string `pulumi:"host"`
	// [int] The port that the WireGuard Server will connect to. Defaults to `51820`.
	Port *int `pulumi:"port"`
}

// WireguardPeerEndpointInput is an input type that accepts WireguardPeerEndpointArgs and WireguardPeerEndpointOutput values.
// You can construct a concrete instance of `WireguardPeerEndpointInput` via:
//
//	WireguardPeerEndpointArgs{...}
type WireguardPeerEndpointInput interface {
	pulumi.Input

	ToWireguardPeerEndpointOutput() WireguardPeerEndpointOutput
	ToWireguardPeerEndpointOutputWithContext(context.Context) WireguardPeerEndpointOutput
}

type WireguardPeerEndpointArgs struct {
	// [string] The hostname or IPV4 address that the WireGuard Server will connect to.
	Host pulumi.StringInput `pulumi:"host"`
	// [int] The port that the WireGuard Server will connect to. Defaults to `51820`.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (WireguardPeerEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WireguardPeerEndpoint)(nil)).Elem()
}

func (i WireguardPeerEndpointArgs) ToWireguardPeerEndpointOutput() WireguardPeerEndpointOutput {
	return i.ToWireguardPeerEndpointOutputWithContext(context.Background())
}

func (i WireguardPeerEndpointArgs) ToWireguardPeerEndpointOutputWithContext(ctx context.Context) WireguardPeerEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WireguardPeerEndpointOutput)
}

func (i WireguardPeerEndpointArgs) ToWireguardPeerEndpointPtrOutput() WireguardPeerEndpointPtrOutput {
	return i.ToWireguardPeerEndpointPtrOutputWithContext(context.Background())
}

func (i WireguardPeerEndpointArgs) ToWireguardPeerEndpointPtrOutputWithContext(ctx context.Context) WireguardPeerEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WireguardPeerEndpointOutput).ToWireguardPeerEndpointPtrOutputWithContext(ctx)
}

// WireguardPeerEndpointPtrInput is an input type that accepts WireguardPeerEndpointArgs, WireguardPeerEndpointPtr and WireguardPeerEndpointPtrOutput values.
// You can construct a concrete instance of `WireguardPeerEndpointPtrInput` via:
//
//	        WireguardPeerEndpointArgs{...}
//
//	or:
//
//	        nil
type WireguardPeerEndpointPtrInput interface {
	pulumi.Input

	ToWireguardPeerEndpointPtrOutput() WireguardPeerEndpointPtrOutput
	ToWireguardPeerEndpointPtrOutputWithContext(context.Context) WireguardPeerEndpointPtrOutput
}

type wireguardPeerEndpointPtrType WireguardPeerEndpointArgs

func WireguardPeerEndpointPtr(v *WireguardPeerEndpointArgs) WireguardPeerEndpointPtrInput {
	return (*wireguardPeerEndpointPtrType)(v)
}

func (*wireguardPeerEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WireguardPeerEndpoint)(nil)).Elem()
}

func (i *wireguardPeerEndpointPtrType) ToWireguardPeerEndpointPtrOutput() WireguardPeerEndpointPtrOutput {
	return i.ToWireguardPeerEndpointPtrOutputWithContext(context.Background())
}

func (i *wireguardPeerEndpointPtrType) ToWireguardPeerEndpointPtrOutputWithContext(ctx context.Context) WireguardPeerEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WireguardPeerEndpointPtrOutput)
}

type WireguardPeerEndpointOutput struct{ *pulumi.OutputState }

func (WireguardPeerEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WireguardPeerEndpoint)(nil)).Elem()
}

func (o WireguardPeerEndpointOutput) ToWireguardPeerEndpointOutput() WireguardPeerEndpointOutput {
	return o
}

func (o WireguardPeerEndpointOutput) ToWireguardPeerEndpointOutputWithContext(ctx context.Context) WireguardPeerEndpointOutput {
	return o
}

func (o WireguardPeerEndpointOutput) ToWireguardPeerEndpointPtrOutput() WireguardPeerEndpointPtrOutput {
	return o.ToWireguardPeerEndpointPtrOutputWithContext(context.Background())
}

func (o WireguardPeerEndpointOutput) ToWireguardPeerEndpointPtrOutputWithContext(ctx context.Context) WireguardPeerEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WireguardPeerEndpoint) *WireguardPeerEndpoint {
		return &v
	}).(WireguardPeerEndpointPtrOutput)
}

// [string] The hostname or IPV4 address that the WireGuard Server will connect to.
func (o WireguardPeerEndpointOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v WireguardPeerEndpoint) string { return v.Host }).(pulumi.StringOutput)
}

// [int] The port that the WireGuard Server will connect to. Defaults to `51820`.
func (o WireguardPeerEndpointOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WireguardPeerEndpoint) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type WireguardPeerEndpointPtrOutput struct{ *pulumi.OutputState }

func (WireguardPeerEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WireguardPeerEndpoint)(nil)).Elem()
}

func (o WireguardPeerEndpointPtrOutput) ToWireguardPeerEndpointPtrOutput() WireguardPeerEndpointPtrOutput {
	return o
}

func (o WireguardPeerEndpointPtrOutput) ToWireguardPeerEndpointPtrOutputWithContext(ctx context.Context) WireguardPeerEndpointPtrOutput {
	return o
}

func (o WireguardPeerEndpointPtrOutput) Elem() WireguardPeerEndpointOutput {
	return o.ApplyT(func(v *WireguardPeerEndpoint) WireguardPeerEndpoint {
		if v != nil {
			return *v
		}
		var ret WireguardPeerEndpoint
		return ret
	}).(WireguardPeerEndpointOutput)
}

// [string] The hostname or IPV4 address that the WireGuard Server will connect to.
func (o WireguardPeerEndpointPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WireguardPeerEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// [int] The port that the WireGuard Server will connect to. Defaults to `51820`.
func (o WireguardPeerEndpointPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WireguardPeerEndpoint) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpsecGatewayConnectionInput)(nil)).Elem(), IpsecGatewayConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsecGatewayConnectionArrayInput)(nil)).Elem(), IpsecGatewayConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsecTunnelAuthInput)(nil)).Elem(), IpsecTunnelAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsecTunnelAuthPtrInput)(nil)).Elem(), IpsecTunnelAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsecTunnelEspInput)(nil)).Elem(), IpsecTunnelEspArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsecTunnelEspArrayInput)(nil)).Elem(), IpsecTunnelEspArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsecTunnelIkeInput)(nil)).Elem(), IpsecTunnelIkeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsecTunnelIkePtrInput)(nil)).Elem(), IpsecTunnelIkeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WireguardGatewayConnectionInput)(nil)).Elem(), WireguardGatewayConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WireguardGatewayConnectionArrayInput)(nil)).Elem(), WireguardGatewayConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WireguardPeerEndpointInput)(nil)).Elem(), WireguardPeerEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WireguardPeerEndpointPtrInput)(nil)).Elem(), WireguardPeerEndpointArgs{})
	pulumi.RegisterOutputType(IpsecGatewayConnectionOutput{})
	pulumi.RegisterOutputType(IpsecGatewayConnectionArrayOutput{})
	pulumi.RegisterOutputType(IpsecTunnelAuthOutput{})
	pulumi.RegisterOutputType(IpsecTunnelAuthPtrOutput{})
	pulumi.RegisterOutputType(IpsecTunnelEspOutput{})
	pulumi.RegisterOutputType(IpsecTunnelEspArrayOutput{})
	pulumi.RegisterOutputType(IpsecTunnelIkeOutput{})
	pulumi.RegisterOutputType(IpsecTunnelIkePtrOutput{})
	pulumi.RegisterOutputType(WireguardGatewayConnectionOutput{})
	pulumi.RegisterOutputType(WireguardGatewayConnectionArrayOutput{})
	pulumi.RegisterOutputType(WireguardPeerEndpointOutput{})
	pulumi.RegisterOutputType(WireguardPeerEndpointPtrOutput{})
}
