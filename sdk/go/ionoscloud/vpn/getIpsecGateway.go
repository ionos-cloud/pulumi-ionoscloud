// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **VPN IPSec Gateway data source** can be used to search for and return an existing IPSec Gateway.
// You can provide a string for the name parameter which will be compared with provisioned IPSec Gateways.
// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
// When this happens, please refine your search string so that it is specific enough to return only one result.
//
// ## Example Usage
//
// ### By ID
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/vpn"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpn.LookupIpsecGateway(ctx, &vpn.LookupIpsecGatewayArgs{
//				Id:       pulumi.StringRef("gateway_id"),
//				Location: pulumi.StringRef("gateway_location"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### By Name
//
// Needs to have the resource be previously created, or a dependsOn clause to ensure that the resource is created before
// this data source is called.
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/vpn"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpn.LookupIpsecGateway(ctx, &vpn.LookupIpsecGatewayArgs{
//				Name:     pulumi.StringRef("ipsec-gateway"),
//				Location: pulumi.StringRef("gateway_location"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupIpsecGateway(ctx *pulumi.Context, args *LookupIpsecGatewayArgs, opts ...pulumi.InvokeOption) (*LookupIpsecGatewayResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIpsecGatewayResult
	err := ctx.Invoke("ionoscloud:vpn/getIpsecGateway:getIpsecGateway", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIpsecGateway.
type LookupIpsecGatewayArgs struct {
	// ID of an existing IPSec Gateway that you want to search for.
	Id *string `pulumi:"id"`
	// The location of the IPSec Gateway.
	Location *string `pulumi:"location"`
	// Name of an existing IPSec Gateway that you want to search for.
	Name *string `pulumi:"name"`
	// The IKE version that is permitted for the VPN tunnels.
	Version *string `pulumi:"version"`
}

// A collection of values returned by getIpsecGateway.
type LookupIpsecGatewayResult struct {
	// The network connection for your gateway.
	Connections []GetIpsecGatewayConnection `pulumi:"connections"`
	// (Optional)[string] The human-readable description of the IPSec Gateway.
	Description string `pulumi:"description"`
	// Public IP address to be assigned to the gateway.
	GatewayIp string `pulumi:"gatewayIp"`
	// The unique ID of the IPSec Gateway.
	Id       string  `pulumi:"id"`
	Location *string `pulumi:"location"`
	// A weekly 4 hour-long window, during which maintenance might occur.
	MaintenanceWindows []GetIpsecGatewayMaintenanceWindow `pulumi:"maintenanceWindows"`
	// The name of the IPSec Gateway.
	Name string `pulumi:"name"`
	// Gateway performance options.
	Tier string `pulumi:"tier"`
	// The IKE version that is permitted for the VPN tunnels.
	Version string `pulumi:"version"`
}

func LookupIpsecGatewayOutput(ctx *pulumi.Context, args LookupIpsecGatewayOutputArgs, opts ...pulumi.InvokeOption) LookupIpsecGatewayResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupIpsecGatewayResultOutput, error) {
			args := v.(LookupIpsecGatewayArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ionoscloud:vpn/getIpsecGateway:getIpsecGateway", args, LookupIpsecGatewayResultOutput{}, options).(LookupIpsecGatewayResultOutput), nil
		}).(LookupIpsecGatewayResultOutput)
}

// A collection of arguments for invoking getIpsecGateway.
type LookupIpsecGatewayOutputArgs struct {
	// ID of an existing IPSec Gateway that you want to search for.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The location of the IPSec Gateway.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Name of an existing IPSec Gateway that you want to search for.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The IKE version that is permitted for the VPN tunnels.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (LookupIpsecGatewayOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIpsecGatewayArgs)(nil)).Elem()
}

// A collection of values returned by getIpsecGateway.
type LookupIpsecGatewayResultOutput struct{ *pulumi.OutputState }

func (LookupIpsecGatewayResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIpsecGatewayResult)(nil)).Elem()
}

func (o LookupIpsecGatewayResultOutput) ToLookupIpsecGatewayResultOutput() LookupIpsecGatewayResultOutput {
	return o
}

func (o LookupIpsecGatewayResultOutput) ToLookupIpsecGatewayResultOutputWithContext(ctx context.Context) LookupIpsecGatewayResultOutput {
	return o
}

// The network connection for your gateway.
func (o LookupIpsecGatewayResultOutput) Connections() GetIpsecGatewayConnectionArrayOutput {
	return o.ApplyT(func(v LookupIpsecGatewayResult) []GetIpsecGatewayConnection { return v.Connections }).(GetIpsecGatewayConnectionArrayOutput)
}

// (Optional)[string] The human-readable description of the IPSec Gateway.
func (o LookupIpsecGatewayResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpsecGatewayResult) string { return v.Description }).(pulumi.StringOutput)
}

// Public IP address to be assigned to the gateway.
func (o LookupIpsecGatewayResultOutput) GatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpsecGatewayResult) string { return v.GatewayIp }).(pulumi.StringOutput)
}

// The unique ID of the IPSec Gateway.
func (o LookupIpsecGatewayResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpsecGatewayResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupIpsecGatewayResultOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIpsecGatewayResult) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// A weekly 4 hour-long window, during which maintenance might occur.
func (o LookupIpsecGatewayResultOutput) MaintenanceWindows() GetIpsecGatewayMaintenanceWindowArrayOutput {
	return o.ApplyT(func(v LookupIpsecGatewayResult) []GetIpsecGatewayMaintenanceWindow { return v.MaintenanceWindows }).(GetIpsecGatewayMaintenanceWindowArrayOutput)
}

// The name of the IPSec Gateway.
func (o LookupIpsecGatewayResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpsecGatewayResult) string { return v.Name }).(pulumi.StringOutput)
}

// Gateway performance options.
func (o LookupIpsecGatewayResultOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpsecGatewayResult) string { return v.Tier }).(pulumi.StringOutput)
}

// The IKE version that is permitted for the VPN tunnels.
func (o LookupIpsecGatewayResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpsecGatewayResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIpsecGatewayResultOutput{})
}
