// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IpsecGateway struct {
	pulumi.CustomResourceState

	// The network connection for your gateway. Note: all connections must belong to the same datacenter.
	Connections IpsecGatewayConnectionArrayOutput `pulumi:"connections"`
	// The human-readable description of your IPSec Gateway.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Public IP address to be assigned to the gateway. Note: This must be an IP address in the same datacenter as the
	// connections.
	GatewayIp pulumi.StringOutput `pulumi:"gatewayIp"`
	// The location of the IPSec Gateway. Supported locations: de/fra, de/txl
	Location pulumi.StringOutput `pulumi:"location"`
	// The human readable name of your IPSecGateway.
	Name pulumi.StringOutput `pulumi:"name"`
	// The IKE version that is permitted for the VPN tunnels.
	Version pulumi.StringPtrOutput `pulumi:"version"`
}

// NewIpsecGateway registers a new resource with the given unique name, arguments, and options.
func NewIpsecGateway(ctx *pulumi.Context,
	name string, args *IpsecGatewayArgs, opts ...pulumi.ResourceOption) (*IpsecGateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connections == nil {
		return nil, errors.New("invalid value for required argument 'Connections'")
	}
	if args.GatewayIp == nil {
		return nil, errors.New("invalid value for required argument 'GatewayIp'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpsecGateway
	err := ctx.RegisterResource("ionoscloud:vpn/ipsecGateway:IpsecGateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpsecGateway gets an existing IpsecGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpsecGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpsecGatewayState, opts ...pulumi.ResourceOption) (*IpsecGateway, error) {
	var resource IpsecGateway
	err := ctx.ReadResource("ionoscloud:vpn/ipsecGateway:IpsecGateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpsecGateway resources.
type ipsecGatewayState struct {
	// The network connection for your gateway. Note: all connections must belong to the same datacenter.
	Connections []IpsecGatewayConnection `pulumi:"connections"`
	// The human-readable description of your IPSec Gateway.
	Description *string `pulumi:"description"`
	// Public IP address to be assigned to the gateway. Note: This must be an IP address in the same datacenter as the
	// connections.
	GatewayIp *string `pulumi:"gatewayIp"`
	// The location of the IPSec Gateway. Supported locations: de/fra, de/txl
	Location *string `pulumi:"location"`
	// The human readable name of your IPSecGateway.
	Name *string `pulumi:"name"`
	// The IKE version that is permitted for the VPN tunnels.
	Version *string `pulumi:"version"`
}

type IpsecGatewayState struct {
	// The network connection for your gateway. Note: all connections must belong to the same datacenter.
	Connections IpsecGatewayConnectionArrayInput
	// The human-readable description of your IPSec Gateway.
	Description pulumi.StringPtrInput
	// Public IP address to be assigned to the gateway. Note: This must be an IP address in the same datacenter as the
	// connections.
	GatewayIp pulumi.StringPtrInput
	// The location of the IPSec Gateway. Supported locations: de/fra, de/txl
	Location pulumi.StringPtrInput
	// The human readable name of your IPSecGateway.
	Name pulumi.StringPtrInput
	// The IKE version that is permitted for the VPN tunnels.
	Version pulumi.StringPtrInput
}

func (IpsecGatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsecGatewayState)(nil)).Elem()
}

type ipsecGatewayArgs struct {
	// The network connection for your gateway. Note: all connections must belong to the same datacenter.
	Connections []IpsecGatewayConnection `pulumi:"connections"`
	// The human-readable description of your IPSec Gateway.
	Description *string `pulumi:"description"`
	// Public IP address to be assigned to the gateway. Note: This must be an IP address in the same datacenter as the
	// connections.
	GatewayIp string `pulumi:"gatewayIp"`
	// The location of the IPSec Gateway. Supported locations: de/fra, de/txl
	Location string `pulumi:"location"`
	// The human readable name of your IPSecGateway.
	Name *string `pulumi:"name"`
	// The IKE version that is permitted for the VPN tunnels.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a IpsecGateway resource.
type IpsecGatewayArgs struct {
	// The network connection for your gateway. Note: all connections must belong to the same datacenter.
	Connections IpsecGatewayConnectionArrayInput
	// The human-readable description of your IPSec Gateway.
	Description pulumi.StringPtrInput
	// Public IP address to be assigned to the gateway. Note: This must be an IP address in the same datacenter as the
	// connections.
	GatewayIp pulumi.StringInput
	// The location of the IPSec Gateway. Supported locations: de/fra, de/txl
	Location pulumi.StringInput
	// The human readable name of your IPSecGateway.
	Name pulumi.StringPtrInput
	// The IKE version that is permitted for the VPN tunnels.
	Version pulumi.StringPtrInput
}

func (IpsecGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsecGatewayArgs)(nil)).Elem()
}

type IpsecGatewayInput interface {
	pulumi.Input

	ToIpsecGatewayOutput() IpsecGatewayOutput
	ToIpsecGatewayOutputWithContext(ctx context.Context) IpsecGatewayOutput
}

func (*IpsecGateway) ElementType() reflect.Type {
	return reflect.TypeOf((**IpsecGateway)(nil)).Elem()
}

func (i *IpsecGateway) ToIpsecGatewayOutput() IpsecGatewayOutput {
	return i.ToIpsecGatewayOutputWithContext(context.Background())
}

func (i *IpsecGateway) ToIpsecGatewayOutputWithContext(ctx context.Context) IpsecGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsecGatewayOutput)
}

// IpsecGatewayArrayInput is an input type that accepts IpsecGatewayArray and IpsecGatewayArrayOutput values.
// You can construct a concrete instance of `IpsecGatewayArrayInput` via:
//
//	IpsecGatewayArray{ IpsecGatewayArgs{...} }
type IpsecGatewayArrayInput interface {
	pulumi.Input

	ToIpsecGatewayArrayOutput() IpsecGatewayArrayOutput
	ToIpsecGatewayArrayOutputWithContext(context.Context) IpsecGatewayArrayOutput
}

type IpsecGatewayArray []IpsecGatewayInput

func (IpsecGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpsecGateway)(nil)).Elem()
}

func (i IpsecGatewayArray) ToIpsecGatewayArrayOutput() IpsecGatewayArrayOutput {
	return i.ToIpsecGatewayArrayOutputWithContext(context.Background())
}

func (i IpsecGatewayArray) ToIpsecGatewayArrayOutputWithContext(ctx context.Context) IpsecGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsecGatewayArrayOutput)
}

// IpsecGatewayMapInput is an input type that accepts IpsecGatewayMap and IpsecGatewayMapOutput values.
// You can construct a concrete instance of `IpsecGatewayMapInput` via:
//
//	IpsecGatewayMap{ "key": IpsecGatewayArgs{...} }
type IpsecGatewayMapInput interface {
	pulumi.Input

	ToIpsecGatewayMapOutput() IpsecGatewayMapOutput
	ToIpsecGatewayMapOutputWithContext(context.Context) IpsecGatewayMapOutput
}

type IpsecGatewayMap map[string]IpsecGatewayInput

func (IpsecGatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpsecGateway)(nil)).Elem()
}

func (i IpsecGatewayMap) ToIpsecGatewayMapOutput() IpsecGatewayMapOutput {
	return i.ToIpsecGatewayMapOutputWithContext(context.Background())
}

func (i IpsecGatewayMap) ToIpsecGatewayMapOutputWithContext(ctx context.Context) IpsecGatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsecGatewayMapOutput)
}

type IpsecGatewayOutput struct{ *pulumi.OutputState }

func (IpsecGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpsecGateway)(nil)).Elem()
}

func (o IpsecGatewayOutput) ToIpsecGatewayOutput() IpsecGatewayOutput {
	return o
}

func (o IpsecGatewayOutput) ToIpsecGatewayOutputWithContext(ctx context.Context) IpsecGatewayOutput {
	return o
}

// The network connection for your gateway. Note: all connections must belong to the same datacenter.
func (o IpsecGatewayOutput) Connections() IpsecGatewayConnectionArrayOutput {
	return o.ApplyT(func(v *IpsecGateway) IpsecGatewayConnectionArrayOutput { return v.Connections }).(IpsecGatewayConnectionArrayOutput)
}

// The human-readable description of your IPSec Gateway.
func (o IpsecGatewayOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpsecGateway) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Public IP address to be assigned to the gateway. Note: This must be an IP address in the same datacenter as the
// connections.
func (o IpsecGatewayOutput) GatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsecGateway) pulumi.StringOutput { return v.GatewayIp }).(pulumi.StringOutput)
}

// The location of the IPSec Gateway. Supported locations: de/fra, de/txl
func (o IpsecGatewayOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsecGateway) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The human readable name of your IPSecGateway.
func (o IpsecGatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsecGateway) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The IKE version that is permitted for the VPN tunnels.
func (o IpsecGatewayOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpsecGateway) pulumi.StringPtrOutput { return v.Version }).(pulumi.StringPtrOutput)
}

type IpsecGatewayArrayOutput struct{ *pulumi.OutputState }

func (IpsecGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpsecGateway)(nil)).Elem()
}

func (o IpsecGatewayArrayOutput) ToIpsecGatewayArrayOutput() IpsecGatewayArrayOutput {
	return o
}

func (o IpsecGatewayArrayOutput) ToIpsecGatewayArrayOutputWithContext(ctx context.Context) IpsecGatewayArrayOutput {
	return o
}

func (o IpsecGatewayArrayOutput) Index(i pulumi.IntInput) IpsecGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpsecGateway {
		return vs[0].([]*IpsecGateway)[vs[1].(int)]
	}).(IpsecGatewayOutput)
}

type IpsecGatewayMapOutput struct{ *pulumi.OutputState }

func (IpsecGatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpsecGateway)(nil)).Elem()
}

func (o IpsecGatewayMapOutput) ToIpsecGatewayMapOutput() IpsecGatewayMapOutput {
	return o
}

func (o IpsecGatewayMapOutput) ToIpsecGatewayMapOutputWithContext(ctx context.Context) IpsecGatewayMapOutput {
	return o
}

func (o IpsecGatewayMapOutput) MapIndex(k pulumi.StringInput) IpsecGatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpsecGateway {
		return vs[0].(map[string]*IpsecGateway)[vs[1].(string)]
	}).(IpsecGatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpsecGatewayInput)(nil)).Elem(), &IpsecGateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsecGatewayArrayInput)(nil)).Elem(), IpsecGatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsecGatewayMapInput)(nil)).Elem(), IpsecGatewayMap{})
	pulumi.RegisterOutputType(IpsecGatewayOutput{})
	pulumi.RegisterOutputType(IpsecGatewayArrayOutput{})
	pulumi.RegisterOutputType(IpsecGatewayMapOutput{})
}
