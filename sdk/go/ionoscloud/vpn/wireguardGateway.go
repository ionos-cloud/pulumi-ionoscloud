// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type WireguardGateway struct {
	pulumi.CustomResourceState

	Connections WireguardGatewayConnectionArrayOutput `pulumi:"connections"`
	Description pulumi.StringPtrOutput                `pulumi:"description"`
	GatewayIp   pulumi.StringOutput                   `pulumi:"gatewayIp"`
	// The IPV4 address (with CIDR mask) to be assigned to the WireGuard interface. __Note__: either interfaceIPv4CIDR or
	// interfaceIPv6CIDR is __required__.
	InterfaceIpv4Cidr pulumi.StringPtrOutput `pulumi:"interfaceIpv4Cidr"`
	// The IPV6 address (with CIDR mask) to be assigned to the WireGuard interface. __Note__: either interfaceIPv6CIDR or
	// interfaceIPv4CIDR is __required__.
	InterfaceIpv6Cidr pulumi.StringPtrOutput `pulumi:"interfaceIpv6Cidr"`
	ListenPort        pulumi.IntPtrOutput    `pulumi:"listenPort"`
	// The location of the WireGuard Gateway. Supported locations: de/fra, de/txl
	Location pulumi.StringOutput `pulumi:"location"`
	Name     pulumi.StringOutput `pulumi:"name"`
	// PrivateKey used for WireGuard Server
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// PublicKey used for WireGuard Server. Received in response from API
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
	// The status of the WireGuard Gateway
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewWireguardGateway registers a new resource with the given unique name, arguments, and options.
func NewWireguardGateway(ctx *pulumi.Context,
	name string, args *WireguardGatewayArgs, opts ...pulumi.ResourceOption) (*WireguardGateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connections == nil {
		return nil, errors.New("invalid value for required argument 'Connections'")
	}
	if args.GatewayIp == nil {
		return nil, errors.New("invalid value for required argument 'GatewayIp'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.PrivateKey == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKey'")
	}
	if args.PrivateKey != nil {
		args.PrivateKey = pulumi.ToSecret(args.PrivateKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"privateKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WireguardGateway
	err := ctx.RegisterResource("ionoscloud:vpn/wireguardGateway:WireguardGateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWireguardGateway gets an existing WireguardGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWireguardGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WireguardGatewayState, opts ...pulumi.ResourceOption) (*WireguardGateway, error) {
	var resource WireguardGateway
	err := ctx.ReadResource("ionoscloud:vpn/wireguardGateway:WireguardGateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WireguardGateway resources.
type wireguardGatewayState struct {
	Connections []WireguardGatewayConnection `pulumi:"connections"`
	Description *string                      `pulumi:"description"`
	GatewayIp   *string                      `pulumi:"gatewayIp"`
	// The IPV4 address (with CIDR mask) to be assigned to the WireGuard interface. __Note__: either interfaceIPv4CIDR or
	// interfaceIPv6CIDR is __required__.
	InterfaceIpv4Cidr *string `pulumi:"interfaceIpv4Cidr"`
	// The IPV6 address (with CIDR mask) to be assigned to the WireGuard interface. __Note__: either interfaceIPv6CIDR or
	// interfaceIPv4CIDR is __required__.
	InterfaceIpv6Cidr *string `pulumi:"interfaceIpv6Cidr"`
	ListenPort        *int    `pulumi:"listenPort"`
	// The location of the WireGuard Gateway. Supported locations: de/fra, de/txl
	Location *string `pulumi:"location"`
	Name     *string `pulumi:"name"`
	// PrivateKey used for WireGuard Server
	PrivateKey *string `pulumi:"privateKey"`
	// PublicKey used for WireGuard Server. Received in response from API
	PublicKey *string `pulumi:"publicKey"`
	// The status of the WireGuard Gateway
	Status *string `pulumi:"status"`
}

type WireguardGatewayState struct {
	Connections WireguardGatewayConnectionArrayInput
	Description pulumi.StringPtrInput
	GatewayIp   pulumi.StringPtrInput
	// The IPV4 address (with CIDR mask) to be assigned to the WireGuard interface. __Note__: either interfaceIPv4CIDR or
	// interfaceIPv6CIDR is __required__.
	InterfaceIpv4Cidr pulumi.StringPtrInput
	// The IPV6 address (with CIDR mask) to be assigned to the WireGuard interface. __Note__: either interfaceIPv6CIDR or
	// interfaceIPv4CIDR is __required__.
	InterfaceIpv6Cidr pulumi.StringPtrInput
	ListenPort        pulumi.IntPtrInput
	// The location of the WireGuard Gateway. Supported locations: de/fra, de/txl
	Location pulumi.StringPtrInput
	Name     pulumi.StringPtrInput
	// PrivateKey used for WireGuard Server
	PrivateKey pulumi.StringPtrInput
	// PublicKey used for WireGuard Server. Received in response from API
	PublicKey pulumi.StringPtrInput
	// The status of the WireGuard Gateway
	Status pulumi.StringPtrInput
}

func (WireguardGatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*wireguardGatewayState)(nil)).Elem()
}

type wireguardGatewayArgs struct {
	Connections []WireguardGatewayConnection `pulumi:"connections"`
	Description *string                      `pulumi:"description"`
	GatewayIp   string                       `pulumi:"gatewayIp"`
	// The IPV4 address (with CIDR mask) to be assigned to the WireGuard interface. __Note__: either interfaceIPv4CIDR or
	// interfaceIPv6CIDR is __required__.
	InterfaceIpv4Cidr *string `pulumi:"interfaceIpv4Cidr"`
	// The IPV6 address (with CIDR mask) to be assigned to the WireGuard interface. __Note__: either interfaceIPv6CIDR or
	// interfaceIPv4CIDR is __required__.
	InterfaceIpv6Cidr *string `pulumi:"interfaceIpv6Cidr"`
	ListenPort        *int    `pulumi:"listenPort"`
	// The location of the WireGuard Gateway. Supported locations: de/fra, de/txl
	Location string  `pulumi:"location"`
	Name     *string `pulumi:"name"`
	// PrivateKey used for WireGuard Server
	PrivateKey string `pulumi:"privateKey"`
}

// The set of arguments for constructing a WireguardGateway resource.
type WireguardGatewayArgs struct {
	Connections WireguardGatewayConnectionArrayInput
	Description pulumi.StringPtrInput
	GatewayIp   pulumi.StringInput
	// The IPV4 address (with CIDR mask) to be assigned to the WireGuard interface. __Note__: either interfaceIPv4CIDR or
	// interfaceIPv6CIDR is __required__.
	InterfaceIpv4Cidr pulumi.StringPtrInput
	// The IPV6 address (with CIDR mask) to be assigned to the WireGuard interface. __Note__: either interfaceIPv6CIDR or
	// interfaceIPv4CIDR is __required__.
	InterfaceIpv6Cidr pulumi.StringPtrInput
	ListenPort        pulumi.IntPtrInput
	// The location of the WireGuard Gateway. Supported locations: de/fra, de/txl
	Location pulumi.StringInput
	Name     pulumi.StringPtrInput
	// PrivateKey used for WireGuard Server
	PrivateKey pulumi.StringInput
}

func (WireguardGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wireguardGatewayArgs)(nil)).Elem()
}

type WireguardGatewayInput interface {
	pulumi.Input

	ToWireguardGatewayOutput() WireguardGatewayOutput
	ToWireguardGatewayOutputWithContext(ctx context.Context) WireguardGatewayOutput
}

func (*WireguardGateway) ElementType() reflect.Type {
	return reflect.TypeOf((**WireguardGateway)(nil)).Elem()
}

func (i *WireguardGateway) ToWireguardGatewayOutput() WireguardGatewayOutput {
	return i.ToWireguardGatewayOutputWithContext(context.Background())
}

func (i *WireguardGateway) ToWireguardGatewayOutputWithContext(ctx context.Context) WireguardGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WireguardGatewayOutput)
}

// WireguardGatewayArrayInput is an input type that accepts WireguardGatewayArray and WireguardGatewayArrayOutput values.
// You can construct a concrete instance of `WireguardGatewayArrayInput` via:
//
//	WireguardGatewayArray{ WireguardGatewayArgs{...} }
type WireguardGatewayArrayInput interface {
	pulumi.Input

	ToWireguardGatewayArrayOutput() WireguardGatewayArrayOutput
	ToWireguardGatewayArrayOutputWithContext(context.Context) WireguardGatewayArrayOutput
}

type WireguardGatewayArray []WireguardGatewayInput

func (WireguardGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WireguardGateway)(nil)).Elem()
}

func (i WireguardGatewayArray) ToWireguardGatewayArrayOutput() WireguardGatewayArrayOutput {
	return i.ToWireguardGatewayArrayOutputWithContext(context.Background())
}

func (i WireguardGatewayArray) ToWireguardGatewayArrayOutputWithContext(ctx context.Context) WireguardGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WireguardGatewayArrayOutput)
}

// WireguardGatewayMapInput is an input type that accepts WireguardGatewayMap and WireguardGatewayMapOutput values.
// You can construct a concrete instance of `WireguardGatewayMapInput` via:
//
//	WireguardGatewayMap{ "key": WireguardGatewayArgs{...} }
type WireguardGatewayMapInput interface {
	pulumi.Input

	ToWireguardGatewayMapOutput() WireguardGatewayMapOutput
	ToWireguardGatewayMapOutputWithContext(context.Context) WireguardGatewayMapOutput
}

type WireguardGatewayMap map[string]WireguardGatewayInput

func (WireguardGatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WireguardGateway)(nil)).Elem()
}

func (i WireguardGatewayMap) ToWireguardGatewayMapOutput() WireguardGatewayMapOutput {
	return i.ToWireguardGatewayMapOutputWithContext(context.Background())
}

func (i WireguardGatewayMap) ToWireguardGatewayMapOutputWithContext(ctx context.Context) WireguardGatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WireguardGatewayMapOutput)
}

type WireguardGatewayOutput struct{ *pulumi.OutputState }

func (WireguardGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WireguardGateway)(nil)).Elem()
}

func (o WireguardGatewayOutput) ToWireguardGatewayOutput() WireguardGatewayOutput {
	return o
}

func (o WireguardGatewayOutput) ToWireguardGatewayOutputWithContext(ctx context.Context) WireguardGatewayOutput {
	return o
}

func (o WireguardGatewayOutput) Connections() WireguardGatewayConnectionArrayOutput {
	return o.ApplyT(func(v *WireguardGateway) WireguardGatewayConnectionArrayOutput { return v.Connections }).(WireguardGatewayConnectionArrayOutput)
}

func (o WireguardGatewayOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WireguardGateway) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o WireguardGatewayOutput) GatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v *WireguardGateway) pulumi.StringOutput { return v.GatewayIp }).(pulumi.StringOutput)
}

// The IPV4 address (with CIDR mask) to be assigned to the WireGuard interface. __Note__: either interfaceIPv4CIDR or
// interfaceIPv6CIDR is __required__.
func (o WireguardGatewayOutput) InterfaceIpv4Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WireguardGateway) pulumi.StringPtrOutput { return v.InterfaceIpv4Cidr }).(pulumi.StringPtrOutput)
}

// The IPV6 address (with CIDR mask) to be assigned to the WireGuard interface. __Note__: either interfaceIPv6CIDR or
// interfaceIPv4CIDR is __required__.
func (o WireguardGatewayOutput) InterfaceIpv6Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WireguardGateway) pulumi.StringPtrOutput { return v.InterfaceIpv6Cidr }).(pulumi.StringPtrOutput)
}

func (o WireguardGatewayOutput) ListenPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WireguardGateway) pulumi.IntPtrOutput { return v.ListenPort }).(pulumi.IntPtrOutput)
}

// The location of the WireGuard Gateway. Supported locations: de/fra, de/txl
func (o WireguardGatewayOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *WireguardGateway) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o WireguardGatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WireguardGateway) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// PrivateKey used for WireGuard Server
func (o WireguardGatewayOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v *WireguardGateway) pulumi.StringOutput { return v.PrivateKey }).(pulumi.StringOutput)
}

// PublicKey used for WireGuard Server. Received in response from API
func (o WireguardGatewayOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *WireguardGateway) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

// The status of the WireGuard Gateway
func (o WireguardGatewayOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *WireguardGateway) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type WireguardGatewayArrayOutput struct{ *pulumi.OutputState }

func (WireguardGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WireguardGateway)(nil)).Elem()
}

func (o WireguardGatewayArrayOutput) ToWireguardGatewayArrayOutput() WireguardGatewayArrayOutput {
	return o
}

func (o WireguardGatewayArrayOutput) ToWireguardGatewayArrayOutputWithContext(ctx context.Context) WireguardGatewayArrayOutput {
	return o
}

func (o WireguardGatewayArrayOutput) Index(i pulumi.IntInput) WireguardGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WireguardGateway {
		return vs[0].([]*WireguardGateway)[vs[1].(int)]
	}).(WireguardGatewayOutput)
}

type WireguardGatewayMapOutput struct{ *pulumi.OutputState }

func (WireguardGatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WireguardGateway)(nil)).Elem()
}

func (o WireguardGatewayMapOutput) ToWireguardGatewayMapOutput() WireguardGatewayMapOutput {
	return o
}

func (o WireguardGatewayMapOutput) ToWireguardGatewayMapOutputWithContext(ctx context.Context) WireguardGatewayMapOutput {
	return o
}

func (o WireguardGatewayMapOutput) MapIndex(k pulumi.StringInput) WireguardGatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WireguardGateway {
		return vs[0].(map[string]*WireguardGateway)[vs[1].(string)]
	}).(WireguardGatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WireguardGatewayInput)(nil)).Elem(), &WireguardGateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*WireguardGatewayArrayInput)(nil)).Elem(), WireguardGatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WireguardGatewayMapInput)(nil)).Elem(), WireguardGatewayMap{})
	pulumi.RegisterOutputType(WireguardGatewayOutput{})
	pulumi.RegisterOutputType(WireguardGatewayArrayOutput{})
	pulumi.RegisterOutputType(WireguardGatewayMapOutput{})
}
