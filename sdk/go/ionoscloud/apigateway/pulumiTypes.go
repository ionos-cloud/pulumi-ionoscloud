// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ApigatewayCustomDomain struct {
	// [string] The certificate ID for the domain. Must be a valid certificate in UUID form.
	CertificateId *string `pulumi:"certificateId"`
	// [string] The domain name. Externally reachable.
	Name string `pulumi:"name"`
}

// ApigatewayCustomDomainInput is an input type that accepts ApigatewayCustomDomainArgs and ApigatewayCustomDomainOutput values.
// You can construct a concrete instance of `ApigatewayCustomDomainInput` via:
//
//	ApigatewayCustomDomainArgs{...}
type ApigatewayCustomDomainInput interface {
	pulumi.Input

	ToApigatewayCustomDomainOutput() ApigatewayCustomDomainOutput
	ToApigatewayCustomDomainOutputWithContext(context.Context) ApigatewayCustomDomainOutput
}

type ApigatewayCustomDomainArgs struct {
	// [string] The certificate ID for the domain. Must be a valid certificate in UUID form.
	CertificateId pulumi.StringPtrInput `pulumi:"certificateId"`
	// [string] The domain name. Externally reachable.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ApigatewayCustomDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApigatewayCustomDomain)(nil)).Elem()
}

func (i ApigatewayCustomDomainArgs) ToApigatewayCustomDomainOutput() ApigatewayCustomDomainOutput {
	return i.ToApigatewayCustomDomainOutputWithContext(context.Background())
}

func (i ApigatewayCustomDomainArgs) ToApigatewayCustomDomainOutputWithContext(ctx context.Context) ApigatewayCustomDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApigatewayCustomDomainOutput)
}

// ApigatewayCustomDomainArrayInput is an input type that accepts ApigatewayCustomDomainArray and ApigatewayCustomDomainArrayOutput values.
// You can construct a concrete instance of `ApigatewayCustomDomainArrayInput` via:
//
//	ApigatewayCustomDomainArray{ ApigatewayCustomDomainArgs{...} }
type ApigatewayCustomDomainArrayInput interface {
	pulumi.Input

	ToApigatewayCustomDomainArrayOutput() ApigatewayCustomDomainArrayOutput
	ToApigatewayCustomDomainArrayOutputWithContext(context.Context) ApigatewayCustomDomainArrayOutput
}

type ApigatewayCustomDomainArray []ApigatewayCustomDomainInput

func (ApigatewayCustomDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApigatewayCustomDomain)(nil)).Elem()
}

func (i ApigatewayCustomDomainArray) ToApigatewayCustomDomainArrayOutput() ApigatewayCustomDomainArrayOutput {
	return i.ToApigatewayCustomDomainArrayOutputWithContext(context.Background())
}

func (i ApigatewayCustomDomainArray) ToApigatewayCustomDomainArrayOutputWithContext(ctx context.Context) ApigatewayCustomDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApigatewayCustomDomainArrayOutput)
}

type ApigatewayCustomDomainOutput struct{ *pulumi.OutputState }

func (ApigatewayCustomDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApigatewayCustomDomain)(nil)).Elem()
}

func (o ApigatewayCustomDomainOutput) ToApigatewayCustomDomainOutput() ApigatewayCustomDomainOutput {
	return o
}

func (o ApigatewayCustomDomainOutput) ToApigatewayCustomDomainOutputWithContext(ctx context.Context) ApigatewayCustomDomainOutput {
	return o
}

// [string] The certificate ID for the domain. Must be a valid certificate in UUID form.
func (o ApigatewayCustomDomainOutput) CertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApigatewayCustomDomain) *string { return v.CertificateId }).(pulumi.StringPtrOutput)
}

// [string] The domain name. Externally reachable.
func (o ApigatewayCustomDomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApigatewayCustomDomain) string { return v.Name }).(pulumi.StringOutput)
}

type ApigatewayCustomDomainArrayOutput struct{ *pulumi.OutputState }

func (ApigatewayCustomDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApigatewayCustomDomain)(nil)).Elem()
}

func (o ApigatewayCustomDomainArrayOutput) ToApigatewayCustomDomainArrayOutput() ApigatewayCustomDomainArrayOutput {
	return o
}

func (o ApigatewayCustomDomainArrayOutput) ToApigatewayCustomDomainArrayOutputWithContext(ctx context.Context) ApigatewayCustomDomainArrayOutput {
	return o
}

func (o ApigatewayCustomDomainArrayOutput) Index(i pulumi.IntInput) ApigatewayCustomDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApigatewayCustomDomain {
		return vs[0].([]ApigatewayCustomDomain)[vs[1].(int)]
	}).(ApigatewayCustomDomainOutput)
}

type RouteUpstream struct {
	// [string] The host of the upstream.
	Host string `pulumi:"host"`
	// [string] The load balancer algorithm. Default value: `roundrobin`.
	Loadbalancer *string `pulumi:"loadbalancer"`
	// [int] The port of the upstream. Default value: `80`.
	Port *int `pulumi:"port"`
	// [string] The target URL of the upstream. Default value: `http`.
	Scheme *string `pulumi:"scheme"`
	// [int] Weight with which to split traffic to the upstream. Default value: `100`.
	Weight *int `pulumi:"weight"`
}

// RouteUpstreamInput is an input type that accepts RouteUpstreamArgs and RouteUpstreamOutput values.
// You can construct a concrete instance of `RouteUpstreamInput` via:
//
//	RouteUpstreamArgs{...}
type RouteUpstreamInput interface {
	pulumi.Input

	ToRouteUpstreamOutput() RouteUpstreamOutput
	ToRouteUpstreamOutputWithContext(context.Context) RouteUpstreamOutput
}

type RouteUpstreamArgs struct {
	// [string] The host of the upstream.
	Host pulumi.StringInput `pulumi:"host"`
	// [string] The load balancer algorithm. Default value: `roundrobin`.
	Loadbalancer pulumi.StringPtrInput `pulumi:"loadbalancer"`
	// [int] The port of the upstream. Default value: `80`.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// [string] The target URL of the upstream. Default value: `http`.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
	// [int] Weight with which to split traffic to the upstream. Default value: `100`.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (RouteUpstreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteUpstream)(nil)).Elem()
}

func (i RouteUpstreamArgs) ToRouteUpstreamOutput() RouteUpstreamOutput {
	return i.ToRouteUpstreamOutputWithContext(context.Background())
}

func (i RouteUpstreamArgs) ToRouteUpstreamOutputWithContext(ctx context.Context) RouteUpstreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteUpstreamOutput)
}

// RouteUpstreamArrayInput is an input type that accepts RouteUpstreamArray and RouteUpstreamArrayOutput values.
// You can construct a concrete instance of `RouteUpstreamArrayInput` via:
//
//	RouteUpstreamArray{ RouteUpstreamArgs{...} }
type RouteUpstreamArrayInput interface {
	pulumi.Input

	ToRouteUpstreamArrayOutput() RouteUpstreamArrayOutput
	ToRouteUpstreamArrayOutputWithContext(context.Context) RouteUpstreamArrayOutput
}

type RouteUpstreamArray []RouteUpstreamInput

func (RouteUpstreamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteUpstream)(nil)).Elem()
}

func (i RouteUpstreamArray) ToRouteUpstreamArrayOutput() RouteUpstreamArrayOutput {
	return i.ToRouteUpstreamArrayOutputWithContext(context.Background())
}

func (i RouteUpstreamArray) ToRouteUpstreamArrayOutputWithContext(ctx context.Context) RouteUpstreamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteUpstreamArrayOutput)
}

type RouteUpstreamOutput struct{ *pulumi.OutputState }

func (RouteUpstreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteUpstream)(nil)).Elem()
}

func (o RouteUpstreamOutput) ToRouteUpstreamOutput() RouteUpstreamOutput {
	return o
}

func (o RouteUpstreamOutput) ToRouteUpstreamOutputWithContext(ctx context.Context) RouteUpstreamOutput {
	return o
}

// [string] The host of the upstream.
func (o RouteUpstreamOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v RouteUpstream) string { return v.Host }).(pulumi.StringOutput)
}

// [string] The load balancer algorithm. Default value: `roundrobin`.
func (o RouteUpstreamOutput) Loadbalancer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteUpstream) *string { return v.Loadbalancer }).(pulumi.StringPtrOutput)
}

// [int] The port of the upstream. Default value: `80`.
func (o RouteUpstreamOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouteUpstream) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// [string] The target URL of the upstream. Default value: `http`.
func (o RouteUpstreamOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteUpstream) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

// [int] Weight with which to split traffic to the upstream. Default value: `100`.
func (o RouteUpstreamOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouteUpstream) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type RouteUpstreamArrayOutput struct{ *pulumi.OutputState }

func (RouteUpstreamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteUpstream)(nil)).Elem()
}

func (o RouteUpstreamArrayOutput) ToRouteUpstreamArrayOutput() RouteUpstreamArrayOutput {
	return o
}

func (o RouteUpstreamArrayOutput) ToRouteUpstreamArrayOutputWithContext(ctx context.Context) RouteUpstreamArrayOutput {
	return o
}

func (o RouteUpstreamArrayOutput) Index(i pulumi.IntInput) RouteUpstreamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouteUpstream {
		return vs[0].([]RouteUpstream)[vs[1].(int)]
	}).(RouteUpstreamOutput)
}

type GetApigatewayCustomDomain struct {
	// The ID of the certificate to use for the distribution.
	CertificateId string `pulumi:"certificateId"`
	// Name of an existing API Gateway that you want to search for.
	Name string `pulumi:"name"`
}

// GetApigatewayCustomDomainInput is an input type that accepts GetApigatewayCustomDomainArgs and GetApigatewayCustomDomainOutput values.
// You can construct a concrete instance of `GetApigatewayCustomDomainInput` via:
//
//	GetApigatewayCustomDomainArgs{...}
type GetApigatewayCustomDomainInput interface {
	pulumi.Input

	ToGetApigatewayCustomDomainOutput() GetApigatewayCustomDomainOutput
	ToGetApigatewayCustomDomainOutputWithContext(context.Context) GetApigatewayCustomDomainOutput
}

type GetApigatewayCustomDomainArgs struct {
	// The ID of the certificate to use for the distribution.
	CertificateId pulumi.StringInput `pulumi:"certificateId"`
	// Name of an existing API Gateway that you want to search for.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetApigatewayCustomDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApigatewayCustomDomain)(nil)).Elem()
}

func (i GetApigatewayCustomDomainArgs) ToGetApigatewayCustomDomainOutput() GetApigatewayCustomDomainOutput {
	return i.ToGetApigatewayCustomDomainOutputWithContext(context.Background())
}

func (i GetApigatewayCustomDomainArgs) ToGetApigatewayCustomDomainOutputWithContext(ctx context.Context) GetApigatewayCustomDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApigatewayCustomDomainOutput)
}

// GetApigatewayCustomDomainArrayInput is an input type that accepts GetApigatewayCustomDomainArray and GetApigatewayCustomDomainArrayOutput values.
// You can construct a concrete instance of `GetApigatewayCustomDomainArrayInput` via:
//
//	GetApigatewayCustomDomainArray{ GetApigatewayCustomDomainArgs{...} }
type GetApigatewayCustomDomainArrayInput interface {
	pulumi.Input

	ToGetApigatewayCustomDomainArrayOutput() GetApigatewayCustomDomainArrayOutput
	ToGetApigatewayCustomDomainArrayOutputWithContext(context.Context) GetApigatewayCustomDomainArrayOutput
}

type GetApigatewayCustomDomainArray []GetApigatewayCustomDomainInput

func (GetApigatewayCustomDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApigatewayCustomDomain)(nil)).Elem()
}

func (i GetApigatewayCustomDomainArray) ToGetApigatewayCustomDomainArrayOutput() GetApigatewayCustomDomainArrayOutput {
	return i.ToGetApigatewayCustomDomainArrayOutputWithContext(context.Background())
}

func (i GetApigatewayCustomDomainArray) ToGetApigatewayCustomDomainArrayOutputWithContext(ctx context.Context) GetApigatewayCustomDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApigatewayCustomDomainArrayOutput)
}

type GetApigatewayCustomDomainOutput struct{ *pulumi.OutputState }

func (GetApigatewayCustomDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApigatewayCustomDomain)(nil)).Elem()
}

func (o GetApigatewayCustomDomainOutput) ToGetApigatewayCustomDomainOutput() GetApigatewayCustomDomainOutput {
	return o
}

func (o GetApigatewayCustomDomainOutput) ToGetApigatewayCustomDomainOutputWithContext(ctx context.Context) GetApigatewayCustomDomainOutput {
	return o
}

// The ID of the certificate to use for the distribution.
func (o GetApigatewayCustomDomainOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v GetApigatewayCustomDomain) string { return v.CertificateId }).(pulumi.StringOutput)
}

// Name of an existing API Gateway that you want to search for.
func (o GetApigatewayCustomDomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetApigatewayCustomDomain) string { return v.Name }).(pulumi.StringOutput)
}

type GetApigatewayCustomDomainArrayOutput struct{ *pulumi.OutputState }

func (GetApigatewayCustomDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApigatewayCustomDomain)(nil)).Elem()
}

func (o GetApigatewayCustomDomainArrayOutput) ToGetApigatewayCustomDomainArrayOutput() GetApigatewayCustomDomainArrayOutput {
	return o
}

func (o GetApigatewayCustomDomainArrayOutput) ToGetApigatewayCustomDomainArrayOutputWithContext(ctx context.Context) GetApigatewayCustomDomainArrayOutput {
	return o
}

func (o GetApigatewayCustomDomainArrayOutput) Index(i pulumi.IntInput) GetApigatewayCustomDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApigatewayCustomDomain {
		return vs[0].([]GetApigatewayCustomDomain)[vs[1].(int)]
	}).(GetApigatewayCustomDomainOutput)
}

type GetRouteUpstream struct {
	// The host of the upstream.
	Host string `pulumi:"host"`
	// The load balancer algorithm.
	Loadbalancer string `pulumi:"loadbalancer"`
	// The port of the upstream.
	Port int `pulumi:"port"`
	// The target URL of the upstream.
	Scheme string `pulumi:"scheme"`
	// Weight with which to split traffic to the upstream.
	Weight int `pulumi:"weight"`
}

// GetRouteUpstreamInput is an input type that accepts GetRouteUpstreamArgs and GetRouteUpstreamOutput values.
// You can construct a concrete instance of `GetRouteUpstreamInput` via:
//
//	GetRouteUpstreamArgs{...}
type GetRouteUpstreamInput interface {
	pulumi.Input

	ToGetRouteUpstreamOutput() GetRouteUpstreamOutput
	ToGetRouteUpstreamOutputWithContext(context.Context) GetRouteUpstreamOutput
}

type GetRouteUpstreamArgs struct {
	// The host of the upstream.
	Host pulumi.StringInput `pulumi:"host"`
	// The load balancer algorithm.
	Loadbalancer pulumi.StringInput `pulumi:"loadbalancer"`
	// The port of the upstream.
	Port pulumi.IntInput `pulumi:"port"`
	// The target URL of the upstream.
	Scheme pulumi.StringInput `pulumi:"scheme"`
	// Weight with which to split traffic to the upstream.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (GetRouteUpstreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteUpstream)(nil)).Elem()
}

func (i GetRouteUpstreamArgs) ToGetRouteUpstreamOutput() GetRouteUpstreamOutput {
	return i.ToGetRouteUpstreamOutputWithContext(context.Background())
}

func (i GetRouteUpstreamArgs) ToGetRouteUpstreamOutputWithContext(ctx context.Context) GetRouteUpstreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteUpstreamOutput)
}

// GetRouteUpstreamArrayInput is an input type that accepts GetRouteUpstreamArray and GetRouteUpstreamArrayOutput values.
// You can construct a concrete instance of `GetRouteUpstreamArrayInput` via:
//
//	GetRouteUpstreamArray{ GetRouteUpstreamArgs{...} }
type GetRouteUpstreamArrayInput interface {
	pulumi.Input

	ToGetRouteUpstreamArrayOutput() GetRouteUpstreamArrayOutput
	ToGetRouteUpstreamArrayOutputWithContext(context.Context) GetRouteUpstreamArrayOutput
}

type GetRouteUpstreamArray []GetRouteUpstreamInput

func (GetRouteUpstreamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouteUpstream)(nil)).Elem()
}

func (i GetRouteUpstreamArray) ToGetRouteUpstreamArrayOutput() GetRouteUpstreamArrayOutput {
	return i.ToGetRouteUpstreamArrayOutputWithContext(context.Background())
}

func (i GetRouteUpstreamArray) ToGetRouteUpstreamArrayOutputWithContext(ctx context.Context) GetRouteUpstreamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteUpstreamArrayOutput)
}

type GetRouteUpstreamOutput struct{ *pulumi.OutputState }

func (GetRouteUpstreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteUpstream)(nil)).Elem()
}

func (o GetRouteUpstreamOutput) ToGetRouteUpstreamOutput() GetRouteUpstreamOutput {
	return o
}

func (o GetRouteUpstreamOutput) ToGetRouteUpstreamOutputWithContext(ctx context.Context) GetRouteUpstreamOutput {
	return o
}

// The host of the upstream.
func (o GetRouteUpstreamOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteUpstream) string { return v.Host }).(pulumi.StringOutput)
}

// The load balancer algorithm.
func (o GetRouteUpstreamOutput) Loadbalancer() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteUpstream) string { return v.Loadbalancer }).(pulumi.StringOutput)
}

// The port of the upstream.
func (o GetRouteUpstreamOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetRouteUpstream) int { return v.Port }).(pulumi.IntOutput)
}

// The target URL of the upstream.
func (o GetRouteUpstreamOutput) Scheme() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteUpstream) string { return v.Scheme }).(pulumi.StringOutput)
}

// Weight with which to split traffic to the upstream.
func (o GetRouteUpstreamOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v GetRouteUpstream) int { return v.Weight }).(pulumi.IntOutput)
}

type GetRouteUpstreamArrayOutput struct{ *pulumi.OutputState }

func (GetRouteUpstreamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouteUpstream)(nil)).Elem()
}

func (o GetRouteUpstreamArrayOutput) ToGetRouteUpstreamArrayOutput() GetRouteUpstreamArrayOutput {
	return o
}

func (o GetRouteUpstreamArrayOutput) ToGetRouteUpstreamArrayOutputWithContext(ctx context.Context) GetRouteUpstreamArrayOutput {
	return o
}

func (o GetRouteUpstreamArrayOutput) Index(i pulumi.IntInput) GetRouteUpstreamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRouteUpstream {
		return vs[0].([]GetRouteUpstream)[vs[1].(int)]
	}).(GetRouteUpstreamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApigatewayCustomDomainInput)(nil)).Elem(), ApigatewayCustomDomainArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApigatewayCustomDomainArrayInput)(nil)).Elem(), ApigatewayCustomDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteUpstreamInput)(nil)).Elem(), RouteUpstreamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteUpstreamArrayInput)(nil)).Elem(), RouteUpstreamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApigatewayCustomDomainInput)(nil)).Elem(), GetApigatewayCustomDomainArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApigatewayCustomDomainArrayInput)(nil)).Elem(), GetApigatewayCustomDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRouteUpstreamInput)(nil)).Elem(), GetRouteUpstreamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRouteUpstreamArrayInput)(nil)).Elem(), GetRouteUpstreamArray{})
	pulumi.RegisterOutputType(ApigatewayCustomDomainOutput{})
	pulumi.RegisterOutputType(ApigatewayCustomDomainArrayOutput{})
	pulumi.RegisterOutputType(RouteUpstreamOutput{})
	pulumi.RegisterOutputType(RouteUpstreamArrayOutput{})
	pulumi.RegisterOutputType(GetApigatewayCustomDomainOutput{})
	pulumi.RegisterOutputType(GetApigatewayCustomDomainArrayOutput{})
	pulumi.RegisterOutputType(GetRouteUpstreamOutput{})
	pulumi.RegisterOutputType(GetRouteUpstreamArrayOutput{})
}
