// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an **API Gateway Route** on IonosCloud.
//
// ## Example Usage
//
// This resource will create an operational API Gateway Route. After this section completes, the provisioner can be called.
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/apigateway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := apigateway.NewApigateway(ctx, "example", &apigateway.ApigatewayArgs{
//				Name:    pulumi.String("example-gateway"),
//				Metrics: pulumi.Bool(true),
//				CustomDomains: apigateway.ApigatewayCustomDomainArray{
//					&apigateway.ApigatewayCustomDomainArgs{
//						Name:          pulumi.String("example.com"),
//						CertificateId: pulumi.String("00000000-0000-0000-0000-000000000000"),
//					},
//					&apigateway.ApigatewayCustomDomainArgs{
//						Name:          pulumi.String("example.org"),
//						CertificateId: pulumi.String("00000000-0000-0000-0000-000000000000"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apigateway.NewRoute(ctx, "apigateway_route", &apigateway.RouteArgs{
//				Name: pulumi.String("apigateway-route"),
//				Type: pulumi.String("http"),
//				Paths: pulumi.StringArray{
//					pulumi.String("/foo/*"),
//					pulumi.String("/bar"),
//				},
//				Methods: pulumi.StringArray{
//					pulumi.String("GET"),
//					pulumi.String("POST"),
//				},
//				Websocket: pulumi.Bool(false),
//				Upstreams: apigateway.RouteUpstreamArray{
//					&apigateway.RouteUpstreamArgs{
//						Scheme:       pulumi.String("http"),
//						Loadbalancer: pulumi.String("roundrobin"),
//						Host:         pulumi.String("example.com"),
//						Port:         pulumi.Int(80),
//						Weight:       pulumi.Int(100),
//					},
//				},
//				GatewayId: example.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// API Gateway route can be imported using the `apigateway route id`:
//
// ```sh
// $ pulumi import ionoscloud:apigateway/route:Route myroute {apigateway uuid}:{apigateway route uuid}
// ```
type Route struct {
	pulumi.CustomResourceState

	// [string] The ID of the API Gateway that the route belongs to.
	GatewayId pulumi.StringOutput `pulumi:"gatewayId"`
	// [list] The HTTP methods that the route should match. Minimum items: 1. Possible values: `GET`,
	// `POST`, `PUT`, `DELETE`, `PATCH`, `OPTIONS`, `HEAD`, `CONNECT`, `TRACE`.
	Methods pulumi.StringArrayOutput `pulumi:"methods"`
	// [string] Name of the API Gateway Route. Only alphanumeric characters are allowed.
	Name pulumi.StringOutput `pulumi:"name"`
	// [list] The paths that the route should match. Minimum items: 1.
	Paths pulumi.StringArrayOutput `pulumi:"paths"`
	// [string] This field specifies the protocol used by the ingress to route traffic to the backend
	// service. Default value: `http`.
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// Upstreams information of the API Gateway Route. Minimum items: 1.
	Upstreams RouteUpstreamArrayOutput `pulumi:"upstreams"`
	// [bool] To enable websocket support. Default value: `false`.
	Websocket pulumi.BoolPtrOutput `pulumi:"websocket"`
}

// NewRoute registers a new resource with the given unique name, arguments, and options.
func NewRoute(ctx *pulumi.Context,
	name string, args *RouteArgs, opts ...pulumi.ResourceOption) (*Route, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GatewayId == nil {
		return nil, errors.New("invalid value for required argument 'GatewayId'")
	}
	if args.Methods == nil {
		return nil, errors.New("invalid value for required argument 'Methods'")
	}
	if args.Paths == nil {
		return nil, errors.New("invalid value for required argument 'Paths'")
	}
	if args.Upstreams == nil {
		return nil, errors.New("invalid value for required argument 'Upstreams'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Route
	err := ctx.RegisterResource("ionoscloud:apigateway/route:Route", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoute gets an existing Route resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteState, opts ...pulumi.ResourceOption) (*Route, error) {
	var resource Route
	err := ctx.ReadResource("ionoscloud:apigateway/route:Route", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Route resources.
type routeState struct {
	// [string] The ID of the API Gateway that the route belongs to.
	GatewayId *string `pulumi:"gatewayId"`
	// [list] The HTTP methods that the route should match. Minimum items: 1. Possible values: `GET`,
	// `POST`, `PUT`, `DELETE`, `PATCH`, `OPTIONS`, `HEAD`, `CONNECT`, `TRACE`.
	Methods []string `pulumi:"methods"`
	// [string] Name of the API Gateway Route. Only alphanumeric characters are allowed.
	Name *string `pulumi:"name"`
	// [list] The paths that the route should match. Minimum items: 1.
	Paths []string `pulumi:"paths"`
	// [string] This field specifies the protocol used by the ingress to route traffic to the backend
	// service. Default value: `http`.
	Type *string `pulumi:"type"`
	// Upstreams information of the API Gateway Route. Minimum items: 1.
	Upstreams []RouteUpstream `pulumi:"upstreams"`
	// [bool] To enable websocket support. Default value: `false`.
	Websocket *bool `pulumi:"websocket"`
}

type RouteState struct {
	// [string] The ID of the API Gateway that the route belongs to.
	GatewayId pulumi.StringPtrInput
	// [list] The HTTP methods that the route should match. Minimum items: 1. Possible values: `GET`,
	// `POST`, `PUT`, `DELETE`, `PATCH`, `OPTIONS`, `HEAD`, `CONNECT`, `TRACE`.
	Methods pulumi.StringArrayInput
	// [string] Name of the API Gateway Route. Only alphanumeric characters are allowed.
	Name pulumi.StringPtrInput
	// [list] The paths that the route should match. Minimum items: 1.
	Paths pulumi.StringArrayInput
	// [string] This field specifies the protocol used by the ingress to route traffic to the backend
	// service. Default value: `http`.
	Type pulumi.StringPtrInput
	// Upstreams information of the API Gateway Route. Minimum items: 1.
	Upstreams RouteUpstreamArrayInput
	// [bool] To enable websocket support. Default value: `false`.
	Websocket pulumi.BoolPtrInput
}

func (RouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeState)(nil)).Elem()
}

type routeArgs struct {
	// [string] The ID of the API Gateway that the route belongs to.
	GatewayId string `pulumi:"gatewayId"`
	// [list] The HTTP methods that the route should match. Minimum items: 1. Possible values: `GET`,
	// `POST`, `PUT`, `DELETE`, `PATCH`, `OPTIONS`, `HEAD`, `CONNECT`, `TRACE`.
	Methods []string `pulumi:"methods"`
	// [string] Name of the API Gateway Route. Only alphanumeric characters are allowed.
	Name *string `pulumi:"name"`
	// [list] The paths that the route should match. Minimum items: 1.
	Paths []string `pulumi:"paths"`
	// [string] This field specifies the protocol used by the ingress to route traffic to the backend
	// service. Default value: `http`.
	Type *string `pulumi:"type"`
	// Upstreams information of the API Gateway Route. Minimum items: 1.
	Upstreams []RouteUpstream `pulumi:"upstreams"`
	// [bool] To enable websocket support. Default value: `false`.
	Websocket *bool `pulumi:"websocket"`
}

// The set of arguments for constructing a Route resource.
type RouteArgs struct {
	// [string] The ID of the API Gateway that the route belongs to.
	GatewayId pulumi.StringInput
	// [list] The HTTP methods that the route should match. Minimum items: 1. Possible values: `GET`,
	// `POST`, `PUT`, `DELETE`, `PATCH`, `OPTIONS`, `HEAD`, `CONNECT`, `TRACE`.
	Methods pulumi.StringArrayInput
	// [string] Name of the API Gateway Route. Only alphanumeric characters are allowed.
	Name pulumi.StringPtrInput
	// [list] The paths that the route should match. Minimum items: 1.
	Paths pulumi.StringArrayInput
	// [string] This field specifies the protocol used by the ingress to route traffic to the backend
	// service. Default value: `http`.
	Type pulumi.StringPtrInput
	// Upstreams information of the API Gateway Route. Minimum items: 1.
	Upstreams RouteUpstreamArrayInput
	// [bool] To enable websocket support. Default value: `false`.
	Websocket pulumi.BoolPtrInput
}

func (RouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeArgs)(nil)).Elem()
}

type RouteInput interface {
	pulumi.Input

	ToRouteOutput() RouteOutput
	ToRouteOutputWithContext(ctx context.Context) RouteOutput
}

func (*Route) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (i *Route) ToRouteOutput() RouteOutput {
	return i.ToRouteOutputWithContext(context.Background())
}

func (i *Route) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteOutput)
}

// RouteArrayInput is an input type that accepts RouteArray and RouteArrayOutput values.
// You can construct a concrete instance of `RouteArrayInput` via:
//
//	RouteArray{ RouteArgs{...} }
type RouteArrayInput interface {
	pulumi.Input

	ToRouteArrayOutput() RouteArrayOutput
	ToRouteArrayOutputWithContext(context.Context) RouteArrayOutput
}

type RouteArray []RouteInput

func (RouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Route)(nil)).Elem()
}

func (i RouteArray) ToRouteArrayOutput() RouteArrayOutput {
	return i.ToRouteArrayOutputWithContext(context.Background())
}

func (i RouteArray) ToRouteArrayOutputWithContext(ctx context.Context) RouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteArrayOutput)
}

// RouteMapInput is an input type that accepts RouteMap and RouteMapOutput values.
// You can construct a concrete instance of `RouteMapInput` via:
//
//	RouteMap{ "key": RouteArgs{...} }
type RouteMapInput interface {
	pulumi.Input

	ToRouteMapOutput() RouteMapOutput
	ToRouteMapOutputWithContext(context.Context) RouteMapOutput
}

type RouteMap map[string]RouteInput

func (RouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Route)(nil)).Elem()
}

func (i RouteMap) ToRouteMapOutput() RouteMapOutput {
	return i.ToRouteMapOutputWithContext(context.Background())
}

func (i RouteMap) ToRouteMapOutputWithContext(ctx context.Context) RouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteMapOutput)
}

type RouteOutput struct{ *pulumi.OutputState }

func (RouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (o RouteOutput) ToRouteOutput() RouteOutput {
	return o
}

func (o RouteOutput) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return o
}

// [string] The ID of the API Gateway that the route belongs to.
func (o RouteOutput) GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.GatewayId }).(pulumi.StringOutput)
}

// [list] The HTTP methods that the route should match. Minimum items: 1. Possible values: `GET`,
// `POST`, `PUT`, `DELETE`, `PATCH`, `OPTIONS`, `HEAD`, `CONNECT`, `TRACE`.
func (o RouteOutput) Methods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Route) pulumi.StringArrayOutput { return v.Methods }).(pulumi.StringArrayOutput)
}

// [string] Name of the API Gateway Route. Only alphanumeric characters are allowed.
func (o RouteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// [list] The paths that the route should match. Minimum items: 1.
func (o RouteOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Route) pulumi.StringArrayOutput { return v.Paths }).(pulumi.StringArrayOutput)
}

// [string] This field specifies the protocol used by the ingress to route traffic to the backend
// service. Default value: `http`.
func (o RouteOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// Upstreams information of the API Gateway Route. Minimum items: 1.
func (o RouteOutput) Upstreams() RouteUpstreamArrayOutput {
	return o.ApplyT(func(v *Route) RouteUpstreamArrayOutput { return v.Upstreams }).(RouteUpstreamArrayOutput)
}

// [bool] To enable websocket support. Default value: `false`.
func (o RouteOutput) Websocket() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.BoolPtrOutput { return v.Websocket }).(pulumi.BoolPtrOutput)
}

type RouteArrayOutput struct{ *pulumi.OutputState }

func (RouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Route)(nil)).Elem()
}

func (o RouteArrayOutput) ToRouteArrayOutput() RouteArrayOutput {
	return o
}

func (o RouteArrayOutput) ToRouteArrayOutputWithContext(ctx context.Context) RouteArrayOutput {
	return o
}

func (o RouteArrayOutput) Index(i pulumi.IntInput) RouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Route {
		return vs[0].([]*Route)[vs[1].(int)]
	}).(RouteOutput)
}

type RouteMapOutput struct{ *pulumi.OutputState }

func (RouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Route)(nil)).Elem()
}

func (o RouteMapOutput) ToRouteMapOutput() RouteMapOutput {
	return o
}

func (o RouteMapOutput) ToRouteMapOutputWithContext(ctx context.Context) RouteMapOutput {
	return o
}

func (o RouteMapOutput) MapIndex(k pulumi.StringInput) RouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Route {
		return vs[0].(map[string]*Route)[vs[1].(string)]
	}).(RouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteInput)(nil)).Elem(), &Route{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteArrayInput)(nil)).Elem(), RouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteMapInput)(nil)).Elem(), RouteMap{})
	pulumi.RegisterOutputType(RouteOutput{})
	pulumi.RegisterOutputType(RouteArrayOutput{})
	pulumi.RegisterOutputType(RouteMapOutput{})
}
