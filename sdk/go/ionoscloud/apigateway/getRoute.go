// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **API Gateway Route data source** can be used to search for and return an existing API Gateway route.
// You can provide a string for the name parameter which will be compared with provisioned API Gateway routes.
// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
// When this happens, please refine your search string so that it is specific enough to return only one result.
//
// ## Example Usage
//
// ### By ID
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/apigateway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := apigateway.LookupRoute(ctx, &apigateway.LookupRouteArgs{
//				Id:        pulumi.StringRef("your_apigateway_route_id"),
//				GatewayId: "your_gateway_id",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### By Name
//
// Needs to have the resource be previously created, or a dependsOn clause to ensure that the resource is created before
// this data source is called.
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/apigateway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := apigateway.LookupRoute(ctx, &apigateway.LookupRouteArgs{
//				Name:      pulumi.StringRef("apigateway-route"),
//				GatewayId: "your_gateway_id",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupRoute(ctx *pulumi.Context, args *LookupRouteArgs, opts ...pulumi.InvokeOption) (*LookupRouteResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRouteResult
	err := ctx.Invoke("ionoscloud:apigateway/getRoute:getRoute", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRoute.
type LookupRouteArgs struct {
	// The ID of the API Gateway that the route belongs to.
	GatewayId string `pulumi:"gatewayId"`
	// ID of an existing API Gateway Route that you want to search for.
	Id *string `pulumi:"id"`
	// Name of an existing API Gateway Route that you want to search for.
	Name         *string `pulumi:"name"`
	PartialMatch *bool   `pulumi:"partialMatch"`
}

// A collection of values returned by getRoute.
type LookupRouteResult struct {
	GatewayId string `pulumi:"gatewayId"`
	// ID of the API Gateway Route.
	Id string `pulumi:"id"`
	// The HTTP methods that the route should match.
	Methods []string `pulumi:"methods"`
	// The name of the API Gateway Route.
	Name         string `pulumi:"name"`
	PartialMatch *bool  `pulumi:"partialMatch"`
	// The paths that the route should match.
	Paths []string `pulumi:"paths"`
	// This field specifies the protocol used by the ingress to route traffic to the backend service.
	Type      string             `pulumi:"type"`
	Upstreams []GetRouteUpstream `pulumi:"upstreams"`
	// Shows whether websocket support is enabled or disabled.
	Websocket bool `pulumi:"websocket"`
}

func LookupRouteOutput(ctx *pulumi.Context, args LookupRouteOutputArgs, opts ...pulumi.InvokeOption) LookupRouteResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupRouteResultOutput, error) {
			args := v.(LookupRouteArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ionoscloud:apigateway/getRoute:getRoute", args, LookupRouteResultOutput{}, options).(LookupRouteResultOutput), nil
		}).(LookupRouteResultOutput)
}

// A collection of arguments for invoking getRoute.
type LookupRouteOutputArgs struct {
	// The ID of the API Gateway that the route belongs to.
	GatewayId pulumi.StringInput `pulumi:"gatewayId"`
	// ID of an existing API Gateway Route that you want to search for.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of an existing API Gateway Route that you want to search for.
	Name         pulumi.StringPtrInput `pulumi:"name"`
	PartialMatch pulumi.BoolPtrInput   `pulumi:"partialMatch"`
}

func (LookupRouteOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRouteArgs)(nil)).Elem()
}

// A collection of values returned by getRoute.
type LookupRouteResultOutput struct{ *pulumi.OutputState }

func (LookupRouteResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRouteResult)(nil)).Elem()
}

func (o LookupRouteResultOutput) ToLookupRouteResultOutput() LookupRouteResultOutput {
	return o
}

func (o LookupRouteResultOutput) ToLookupRouteResultOutputWithContext(ctx context.Context) LookupRouteResultOutput {
	return o
}

func (o LookupRouteResultOutput) GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteResult) string { return v.GatewayId }).(pulumi.StringOutput)
}

// ID of the API Gateway Route.
func (o LookupRouteResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteResult) string { return v.Id }).(pulumi.StringOutput)
}

// The HTTP methods that the route should match.
func (o LookupRouteResultOutput) Methods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRouteResult) []string { return v.Methods }).(pulumi.StringArrayOutput)
}

// The name of the API Gateway Route.
func (o LookupRouteResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupRouteResultOutput) PartialMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupRouteResult) *bool { return v.PartialMatch }).(pulumi.BoolPtrOutput)
}

// The paths that the route should match.
func (o LookupRouteResultOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRouteResult) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

// This field specifies the protocol used by the ingress to route traffic to the backend service.
func (o LookupRouteResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteResult) string { return v.Type }).(pulumi.StringOutput)
}

func (o LookupRouteResultOutput) Upstreams() GetRouteUpstreamArrayOutput {
	return o.ApplyT(func(v LookupRouteResult) []GetRouteUpstream { return v.Upstreams }).(GetRouteUpstreamArrayOutput)
}

// Shows whether websocket support is enabled or disabled.
func (o LookupRouteResultOutput) Websocket() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRouteResult) bool { return v.Websocket }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRouteResultOutput{})
}
