// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages a **Cross Connect** on IonosCloud.
 * Cross Connect allows you to connect virtual data centers (VDC) with each other using a private LAN.
 * The VDCs to be connected need to belong to the same IONOS Cloud contract and location.
 * You can only use private LANs for a Cross Connect connection. A LAN can only be a part of one Cross Connect.
 *
 * The IP addresses of the NICs used for the Cross Connect connection may not be used in more than one NIC and they need to belong to the same IP range.
 *
 * ## Example Usage
 *
 * To connect two datacenters we need 2 lans defined, one in each datacenter. After, we reference the cross-connect through which we want the connection to be established.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const crossConnectTestResource = new ionoscloud.PrivateCrossconnect("crossConnectTestResource", {description: "CrossConnectTestResource"});
 * const dc1 = new ionoscloud.compute.Datacenter("dc1", {location: "de/txl"});
 * const dc2 = new ionoscloud.compute.Datacenter("dc2", {location: "de/txl"});
 * const dc1lan = new ionoscloud.compute.Lan("dc1lan", {
 *     datacenterId: dc1.id,
 *     "public": false,
 *     pcc: crossConnectTestResource.id,
 * });
 * const dc2lan = new ionoscloud.compute.Lan("dc2lan", {
 *     datacenterId: dc2.id,
 *     "public": false,
 *     pcc: crossConnectTestResource.id,
 * });
 * ```
 *
 * ## Import
 *
 * A Cross Connect resource can be imported using its `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import ionoscloud:index/privateCrossconnect:PrivateCrossconnect demo {ionoscloud_private_crossconnect_uuid}
 * ```
 *
 * This can be helpful when you want to import cross-connects which you have already created manually or using other means, outside of terraform.
 */
export class PrivateCrossconnect extends pulumi.CustomResource {
    /**
     * Get an existing PrivateCrossconnect resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PrivateCrossconnectState, opts?: pulumi.CustomResourceOptions): PrivateCrossconnect {
        return new PrivateCrossconnect(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:index/privateCrossconnect:PrivateCrossconnect';

    /**
     * Returns true if the given object is an instance of PrivateCrossconnect.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PrivateCrossconnect {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PrivateCrossconnect.__pulumiType;
    }

    /**
     * A list containing all the connectable datacenters
     */
    public readonly connectableDatacenters!: pulumi.Output<outputs.PrivateCrossconnectConnectableDatacenter[]>;
    /**
     * [string] A short description for the cross-connection.
     * - `connectable datacenters` - (Computed) A list containing all the connectable datacenters
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * [string] The name of the cross-connection.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Lists LAN's joined to this cross connect
     */
    public readonly peers!: pulumi.Output<outputs.PrivateCrossconnectPeer[]>;

    /**
     * Create a PrivateCrossconnect resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PrivateCrossconnectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PrivateCrossconnectArgs | PrivateCrossconnectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PrivateCrossconnectState | undefined;
            resourceInputs["connectableDatacenters"] = state ? state.connectableDatacenters : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["peers"] = state ? state.peers : undefined;
        } else {
            const args = argsOrState as PrivateCrossconnectArgs | undefined;
            resourceInputs["connectableDatacenters"] = args ? args.connectableDatacenters : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["peers"] = args ? args.peers : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PrivateCrossconnect.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PrivateCrossconnect resources.
 */
export interface PrivateCrossconnectState {
    /**
     * A list containing all the connectable datacenters
     */
    connectableDatacenters?: pulumi.Input<pulumi.Input<inputs.PrivateCrossconnectConnectableDatacenter>[]>;
    /**
     * [string] A short description for the cross-connection.
     * - `connectable datacenters` - (Computed) A list containing all the connectable datacenters
     */
    description?: pulumi.Input<string>;
    /**
     * [string] The name of the cross-connection.
     */
    name?: pulumi.Input<string>;
    /**
     * Lists LAN's joined to this cross connect
     */
    peers?: pulumi.Input<pulumi.Input<inputs.PrivateCrossconnectPeer>[]>;
}

/**
 * The set of arguments for constructing a PrivateCrossconnect resource.
 */
export interface PrivateCrossconnectArgs {
    /**
     * A list containing all the connectable datacenters
     */
    connectableDatacenters?: pulumi.Input<pulumi.Input<inputs.PrivateCrossconnectConnectableDatacenter>[]>;
    /**
     * [string] A short description for the cross-connection.
     * - `connectable datacenters` - (Computed) A list containing all the connectable datacenters
     */
    description?: pulumi.Input<string>;
    /**
     * [string] The name of the cross-connection.
     */
    name?: pulumi.Input<string>;
    /**
     * Lists LAN's joined to this cross connect
     */
    peers?: pulumi.Input<pulumi.Input<inputs.PrivateCrossconnectPeer>[]>;
}
