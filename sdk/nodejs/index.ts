// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ApigatewayArgs, ApigatewayState } from "./apigateway";
export type Apigateway = import("./apigateway").Apigateway;
export const Apigateway: typeof import("./apigateway").Apigateway = null as any;
utilities.lazyLoad(exports, ["Apigateway"], () => require("./apigateway"));

export { ApigatewayRouteArgs, ApigatewayRouteState } from "./apigatewayRoute";
export type ApigatewayRoute = import("./apigatewayRoute").ApigatewayRoute;
export const ApigatewayRoute: typeof import("./apigatewayRoute").ApigatewayRoute = null as any;
utilities.lazyLoad(exports, ["ApigatewayRoute"], () => require("./apigatewayRoute"));

export { AutoscalingGroupArgs, AutoscalingGroupState } from "./autoscalingGroup";
export type AutoscalingGroup = import("./autoscalingGroup").AutoscalingGroup;
export const AutoscalingGroup: typeof import("./autoscalingGroup").AutoscalingGroup = null as any;
utilities.lazyLoad(exports, ["AutoscalingGroup"], () => require("./autoscalingGroup"));

export { GetApigatewayArgs, GetApigatewayResult, GetApigatewayOutputArgs } from "./getApigateway";
export const getApigateway: typeof import("./getApigateway").getApigateway = null as any;
export const getApigatewayOutput: typeof import("./getApigateway").getApigatewayOutput = null as any;
utilities.lazyLoad(exports, ["getApigateway","getApigatewayOutput"], () => require("./getApigateway"));

export { GetApigatewayRouteArgs, GetApigatewayRouteResult, GetApigatewayRouteOutputArgs } from "./getApigatewayRoute";
export const getApigatewayRoute: typeof import("./getApigatewayRoute").getApigatewayRoute = null as any;
export const getApigatewayRouteOutput: typeof import("./getApigatewayRoute").getApigatewayRouteOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayRoute","getApigatewayRouteOutput"], () => require("./getApigatewayRoute"));

export { GetAutoscalingGroupArgs, GetAutoscalingGroupResult, GetAutoscalingGroupOutputArgs } from "./getAutoscalingGroup";
export const getAutoscalingGroup: typeof import("./getAutoscalingGroup").getAutoscalingGroup = null as any;
export const getAutoscalingGroupOutput: typeof import("./getAutoscalingGroup").getAutoscalingGroupOutput = null as any;
utilities.lazyLoad(exports, ["getAutoscalingGroup","getAutoscalingGroupOutput"], () => require("./getAutoscalingGroup"));

export { GetAutoscalingGroupServersArgs, GetAutoscalingGroupServersResult, GetAutoscalingGroupServersOutputArgs } from "./getAutoscalingGroupServers";
export const getAutoscalingGroupServers: typeof import("./getAutoscalingGroupServers").getAutoscalingGroupServers = null as any;
export const getAutoscalingGroupServersOutput: typeof import("./getAutoscalingGroupServers").getAutoscalingGroupServersOutput = null as any;
utilities.lazyLoad(exports, ["getAutoscalingGroupServers","getAutoscalingGroupServersOutput"], () => require("./getAutoscalingGroupServers"));

export { GetContainerRegistryLocationsResult } from "./getContainerRegistryLocations";
export const getContainerRegistryLocations: typeof import("./getContainerRegistryLocations").getContainerRegistryLocations = null as any;
export const getContainerRegistryLocationsOutput: typeof import("./getContainerRegistryLocations").getContainerRegistryLocationsOutput = null as any;
utilities.lazyLoad(exports, ["getContainerRegistryLocations","getContainerRegistryLocationsOutput"], () => require("./getContainerRegistryLocations"));

export { GetDataplatformNodePoolsArgs, GetDataplatformNodePoolsResult, GetDataplatformNodePoolsOutputArgs } from "./getDataplatformNodePools";
export const getDataplatformNodePools: typeof import("./getDataplatformNodePools").getDataplatformNodePools = null as any;
export const getDataplatformNodePoolsOutput: typeof import("./getDataplatformNodePools").getDataplatformNodePoolsOutput = null as any;
utilities.lazyLoad(exports, ["getDataplatformNodePools","getDataplatformNodePoolsOutput"], () => require("./getDataplatformNodePools"));

export { GetDataplatformVersionsResult } from "./getDataplatformVersions";
export const getDataplatformVersions: typeof import("./getDataplatformVersions").getDataplatformVersions = null as any;
export const getDataplatformVersionsOutput: typeof import("./getDataplatformVersions").getDataplatformVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getDataplatformVersions","getDataplatformVersionsOutput"], () => require("./getDataplatformVersions"));

export { GetImageArgs, GetImageResult, GetImageOutputArgs } from "./getImage";
export const getImage: typeof import("./getImage").getImage = null as any;
export const getImageOutput: typeof import("./getImage").getImageOutput = null as any;
utilities.lazyLoad(exports, ["getImage","getImageOutput"], () => require("./getImage"));

export { GetInmemorydbSnapshotArgs, GetInmemorydbSnapshotResult, GetInmemorydbSnapshotOutputArgs } from "./getInmemorydbSnapshot";
export const getInmemorydbSnapshot: typeof import("./getInmemorydbSnapshot").getInmemorydbSnapshot = null as any;
export const getInmemorydbSnapshotOutput: typeof import("./getInmemorydbSnapshot").getInmemorydbSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getInmemorydbSnapshot","getInmemorydbSnapshotOutput"], () => require("./getInmemorydbSnapshot"));

export { GetK8sClustersArgs, GetK8sClustersResult, GetK8sClustersOutputArgs } from "./getK8sClusters";
export const getK8sClusters: typeof import("./getK8sClusters").getK8sClusters = null as any;
export const getK8sClustersOutput: typeof import("./getK8sClusters").getK8sClustersOutput = null as any;
utilities.lazyLoad(exports, ["getK8sClusters","getK8sClustersOutput"], () => require("./getK8sClusters"));

export { GetK8sNodePoolNodesArgs, GetK8sNodePoolNodesResult, GetK8sNodePoolNodesOutputArgs } from "./getK8sNodePoolNodes";
export const getK8sNodePoolNodes: typeof import("./getK8sNodePoolNodes").getK8sNodePoolNodes = null as any;
export const getK8sNodePoolNodesOutput: typeof import("./getK8sNodePoolNodes").getK8sNodePoolNodesOutput = null as any;
utilities.lazyLoad(exports, ["getK8sNodePoolNodes","getK8sNodePoolNodesOutput"], () => require("./getK8sNodePoolNodes"));

export { GetKafkaClusterArgs, GetKafkaClusterResult, GetKafkaClusterOutputArgs } from "./getKafkaCluster";
export const getKafkaCluster: typeof import("./getKafkaCluster").getKafkaCluster = null as any;
export const getKafkaClusterOutput: typeof import("./getKafkaCluster").getKafkaClusterOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaCluster","getKafkaClusterOutput"], () => require("./getKafkaCluster"));

export { GetKafkaClusterTopicArgs, GetKafkaClusterTopicResult, GetKafkaClusterTopicOutputArgs } from "./getKafkaClusterTopic";
export const getKafkaClusterTopic: typeof import("./getKafkaClusterTopic").getKafkaClusterTopic = null as any;
export const getKafkaClusterTopicOutput: typeof import("./getKafkaClusterTopic").getKafkaClusterTopicOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaClusterTopic","getKafkaClusterTopicOutput"], () => require("./getKafkaClusterTopic"));

export { GetLocationArgs, GetLocationResult, GetLocationOutputArgs } from "./getLocation";
export const getLocation: typeof import("./getLocation").getLocation = null as any;
export const getLocationOutput: typeof import("./getLocation").getLocationOutput = null as any;
utilities.lazyLoad(exports, ["getLocation","getLocationOutput"], () => require("./getLocation"));

export { GetMariadbBackupsArgs, GetMariadbBackupsResult, GetMariadbBackupsOutputArgs } from "./getMariadbBackups";
export const getMariadbBackups: typeof import("./getMariadbBackups").getMariadbBackups = null as any;
export const getMariadbBackupsOutput: typeof import("./getMariadbBackups").getMariadbBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getMariadbBackups","getMariadbBackupsOutput"], () => require("./getMariadbBackups"));

export { GetMongoTemplateArgs, GetMongoTemplateResult, GetMongoTemplateOutputArgs } from "./getMongoTemplate";
export const getMongoTemplate: typeof import("./getMongoTemplate").getMongoTemplate = null as any;
export const getMongoTemplateOutput: typeof import("./getMongoTemplate").getMongoTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getMongoTemplate","getMongoTemplateOutput"], () => require("./getMongoTemplate"));

export { GetPgBackupsArgs, GetPgBackupsResult, GetPgBackupsOutputArgs } from "./getPgBackups";
export const getPgBackups: typeof import("./getPgBackups").getPgBackups = null as any;
export const getPgBackupsOutput: typeof import("./getPgBackups").getPgBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getPgBackups","getPgBackupsOutput"], () => require("./getPgBackups"));

export { GetPgDatabasesArgs, GetPgDatabasesResult, GetPgDatabasesOutputArgs } from "./getPgDatabases";
export const getPgDatabases: typeof import("./getPgDatabases").getPgDatabases = null as any;
export const getPgDatabasesOutput: typeof import("./getPgDatabases").getPgDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getPgDatabases","getPgDatabasesOutput"], () => require("./getPgDatabases"));

export { GetPgVersionsArgs, GetPgVersionsResult, GetPgVersionsOutputArgs } from "./getPgVersions";
export const getPgVersions: typeof import("./getPgVersions").getPgVersions = null as any;
export const getPgVersionsOutput: typeof import("./getPgVersions").getPgVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getPgVersions","getPgVersionsOutput"], () => require("./getPgVersions"));

export { GetResourceArgs, GetResourceResult, GetResourceOutputArgs } from "./getResource";
export const getResource: typeof import("./getResource").getResource = null as any;
export const getResourceOutput: typeof import("./getResource").getResourceOutput = null as any;
utilities.lazyLoad(exports, ["getResource","getResourceOutput"], () => require("./getResource"));

export { GetServersArgs, GetServersResult, GetServersOutputArgs } from "./getServers";
export const getServers: typeof import("./getServers").getServers = null as any;
export const getServersOutput: typeof import("./getServers").getServersOutput = null as any;
utilities.lazyLoad(exports, ["getServers","getServersOutput"], () => require("./getServers"));

export { GetTargetGroupArgs, GetTargetGroupResult, GetTargetGroupOutputArgs } from "./getTargetGroup";
export const getTargetGroup: typeof import("./getTargetGroup").getTargetGroup = null as any;
export const getTargetGroupOutput: typeof import("./getTargetGroup").getTargetGroupOutput = null as any;
utilities.lazyLoad(exports, ["getTargetGroup","getTargetGroupOutput"], () => require("./getTargetGroup"));

export { GetTemplateArgs, GetTemplateResult, GetTemplateOutputArgs } from "./getTemplate";
export const getTemplate: typeof import("./getTemplate").getTemplate = null as any;
export const getTemplateOutput: typeof import("./getTemplate").getTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getTemplate","getTemplateOutput"], () => require("./getTemplate"));

export { KafkaClusterArgs, KafkaClusterState } from "./kafkaCluster";
export type KafkaCluster = import("./kafkaCluster").KafkaCluster;
export const KafkaCluster: typeof import("./kafkaCluster").KafkaCluster = null as any;
utilities.lazyLoad(exports, ["KafkaCluster"], () => require("./kafkaCluster"));

export { KafkaClusterTopicArgs, KafkaClusterTopicState } from "./kafkaClusterTopic";
export type KafkaClusterTopic = import("./kafkaClusterTopic").KafkaClusterTopic;
export const KafkaClusterTopic: typeof import("./kafkaClusterTopic").KafkaClusterTopic = null as any;
utilities.lazyLoad(exports, ["KafkaClusterTopic"], () => require("./kafkaClusterTopic"));

export { LoadbalancerArgs, LoadbalancerState } from "./loadbalancer";
export type Loadbalancer = import("./loadbalancer").Loadbalancer;
export const Loadbalancer: typeof import("./loadbalancer").Loadbalancer = null as any;
utilities.lazyLoad(exports, ["Loadbalancer"], () => require("./loadbalancer"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { TargetGroupArgs, TargetGroupState } from "./targetGroup";
export type TargetGroup = import("./targetGroup").TargetGroup;
export const TargetGroup: typeof import("./targetGroup").TargetGroup = null as any;
utilities.lazyLoad(exports, ["TargetGroup"], () => require("./targetGroup"));


// Export sub-modules:
import * as alb from "./alb";
import * as cdn from "./cdn";
import * as cert from "./cert";
import * as compute from "./compute";
import * as config from "./config";
import * as creg from "./creg";
import * as dbaas from "./dbaas";
import * as dns from "./dns";
import * as dsaas from "./dsaas";
import * as k8s from "./k8s";
import * as logging from "./logging";
import * as nfs from "./nfs";
import * as nlb from "./nlb";
import * as types from "./types";
import * as vpn from "./vpn";

export {
    alb,
    cdn,
    cert,
    compute,
    config,
    creg,
    dbaas,
    dns,
    dsaas,
    k8s,
    logging,
    nfs,
    nlb,
    types,
    vpn,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ionoscloud:index/apigateway:Apigateway":
                return new Apigateway(name, <any>undefined, { urn })
            case "ionoscloud:index/apigatewayRoute:ApigatewayRoute":
                return new ApigatewayRoute(name, <any>undefined, { urn })
            case "ionoscloud:index/autoscalingGroup:AutoscalingGroup":
                return new AutoscalingGroup(name, <any>undefined, { urn })
            case "ionoscloud:index/kafkaCluster:KafkaCluster":
                return new KafkaCluster(name, <any>undefined, { urn })
            case "ionoscloud:index/kafkaClusterTopic:KafkaClusterTopic":
                return new KafkaClusterTopic(name, <any>undefined, { urn })
            case "ionoscloud:index/loadbalancer:Loadbalancer":
                return new Loadbalancer(name, <any>undefined, { urn })
            case "ionoscloud:index/targetGroup:TargetGroup":
                return new TargetGroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ionoscloud", "index/apigateway", _module)
pulumi.runtime.registerResourceModule("ionoscloud", "index/apigatewayRoute", _module)
pulumi.runtime.registerResourceModule("ionoscloud", "index/autoscalingGroup", _module)
pulumi.runtime.registerResourceModule("ionoscloud", "index/kafkaCluster", _module)
pulumi.runtime.registerResourceModule("ionoscloud", "index/kafkaClusterTopic", _module)
pulumi.runtime.registerResourceModule("ionoscloud", "index/loadbalancer", _module)
pulumi.runtime.registerResourceModule("ionoscloud", "index/targetGroup", _module)
pulumi.runtime.registerResourcePackage("ionoscloud", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:ionoscloud") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
