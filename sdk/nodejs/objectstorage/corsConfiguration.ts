// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages Object Lock Configuration for Buckets on IonosCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = new ionoscloud.objectstorage.Bucket("example", {name: "example"});
 * const test = new ionoscloud.objectstorage.CorsConfiguration("test", {
 *     bucket: example.name,
 *     corsRules: [{
 *         allowedHeaders: ["*"],
 *         allowedMethods: [
 *             "PUT",
 *             "POST",
 *         ],
 *         allowedOrigins: ["https://s3-website-test.hashicorp.com"],
 *         exposeHeaders: ["ETag"],
 *         maxAgeSeconds: 3000,
 *         id: 1234,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * IONOS Object Storage Bucket cors configuration can be imported using the `bucket` name.
 *
 * ```sh
 * $ pulumi import ionoscloud:objectstorage/corsConfiguration:CorsConfiguration example example
 * ```
 */
export class CorsConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing CorsConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CorsConfigurationState, opts?: pulumi.CustomResourceOptions): CorsConfiguration {
        return new CorsConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:objectstorage/corsConfiguration:CorsConfiguration';

    /**
     * Returns true if the given object is an instance of CorsConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CorsConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CorsConfiguration.__pulumiType;
    }

    /**
     * [string] The name of the bucket where the object will be stored.
     */
    public readonly bucket!: pulumi.Output<string>;
    /**
     * [block] A block of corsRule as defined below.
     */
    public readonly corsRules!: pulumi.Output<outputs.objectstorage.CorsConfigurationCorsRule[] | undefined>;

    /**
     * Create a CorsConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CorsConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CorsConfigurationArgs | CorsConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CorsConfigurationState | undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["corsRules"] = state ? state.corsRules : undefined;
        } else {
            const args = argsOrState as CorsConfigurationArgs | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["corsRules"] = args ? args.corsRules : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CorsConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CorsConfiguration resources.
 */
export interface CorsConfigurationState {
    /**
     * [string] The name of the bucket where the object will be stored.
     */
    bucket?: pulumi.Input<string>;
    /**
     * [block] A block of corsRule as defined below.
     */
    corsRules?: pulumi.Input<pulumi.Input<inputs.objectstorage.CorsConfigurationCorsRule>[]>;
}

/**
 * The set of arguments for constructing a CorsConfiguration resource.
 */
export interface CorsConfigurationArgs {
    /**
     * [string] The name of the bucket where the object will be stored.
     */
    bucket: pulumi.Input<string>;
    /**
     * [block] A block of corsRule as defined below.
     */
    corsRules?: pulumi.Input<pulumi.Input<inputs.objectstorage.CorsConfigurationCorsRule>[]>;
}
