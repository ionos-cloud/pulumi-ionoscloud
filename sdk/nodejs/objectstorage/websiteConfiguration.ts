// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages Website Configuration for Buckets on IonosCloud.
 *
 * ## Import
 *
 * IONOS Object Storage Bucket website configuration can be imported using the `bucket` name.
 *
 * ```sh
 * $ pulumi import ionoscloud:objectstorage/websiteConfiguration:WebsiteConfiguration example example
 * ```
 */
export class WebsiteConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing WebsiteConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebsiteConfigurationState, opts?: pulumi.CustomResourceOptions): WebsiteConfiguration {
        return new WebsiteConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:objectstorage/websiteConfiguration:WebsiteConfiguration';

    /**
     * Returns true if the given object is an instance of WebsiteConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WebsiteConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WebsiteConfiguration.__pulumiType;
    }

    /**
     * [string] The name of the bucket where the object will be stored.
     */
    public readonly bucket!: pulumi.Output<string>;
    /**
     * The object key name to use when a 4XX class error occurs. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests
     */
    public readonly errorDocument!: pulumi.Output<outputs.objectstorage.WebsiteConfigurationErrorDocument | undefined>;
    /**
     * Container for the Suffix element.
     */
    public readonly indexDocument!: pulumi.Output<outputs.objectstorage.WebsiteConfigurationIndexDocument | undefined>;
    /**
     * Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can can specify a different error code to return.
     */
    public readonly redirectAllRequestsTo!: pulumi.Output<outputs.objectstorage.WebsiteConfigurationRedirectAllRequestsTo | undefined>;
    /**
     * A container for describing a condition that must be met for the specified redirect to apply.
     */
    public readonly routingRules!: pulumi.Output<outputs.objectstorage.WebsiteConfigurationRoutingRule[] | undefined>;

    /**
     * Create a WebsiteConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebsiteConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebsiteConfigurationArgs | WebsiteConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebsiteConfigurationState | undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["errorDocument"] = state ? state.errorDocument : undefined;
            resourceInputs["indexDocument"] = state ? state.indexDocument : undefined;
            resourceInputs["redirectAllRequestsTo"] = state ? state.redirectAllRequestsTo : undefined;
            resourceInputs["routingRules"] = state ? state.routingRules : undefined;
        } else {
            const args = argsOrState as WebsiteConfigurationArgs | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["errorDocument"] = args ? args.errorDocument : undefined;
            resourceInputs["indexDocument"] = args ? args.indexDocument : undefined;
            resourceInputs["redirectAllRequestsTo"] = args ? args.redirectAllRequestsTo : undefined;
            resourceInputs["routingRules"] = args ? args.routingRules : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WebsiteConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WebsiteConfiguration resources.
 */
export interface WebsiteConfigurationState {
    /**
     * [string] The name of the bucket where the object will be stored.
     */
    bucket?: pulumi.Input<string>;
    /**
     * The object key name to use when a 4XX class error occurs. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests
     */
    errorDocument?: pulumi.Input<inputs.objectstorage.WebsiteConfigurationErrorDocument>;
    /**
     * Container for the Suffix element.
     */
    indexDocument?: pulumi.Input<inputs.objectstorage.WebsiteConfigurationIndexDocument>;
    /**
     * Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can can specify a different error code to return.
     */
    redirectAllRequestsTo?: pulumi.Input<inputs.objectstorage.WebsiteConfigurationRedirectAllRequestsTo>;
    /**
     * A container for describing a condition that must be met for the specified redirect to apply.
     */
    routingRules?: pulumi.Input<pulumi.Input<inputs.objectstorage.WebsiteConfigurationRoutingRule>[]>;
}

/**
 * The set of arguments for constructing a WebsiteConfiguration resource.
 */
export interface WebsiteConfigurationArgs {
    /**
     * [string] The name of the bucket where the object will be stored.
     */
    bucket: pulumi.Input<string>;
    /**
     * The object key name to use when a 4XX class error occurs. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests
     */
    errorDocument?: pulumi.Input<inputs.objectstorage.WebsiteConfigurationErrorDocument>;
    /**
     * Container for the Suffix element.
     */
    indexDocument?: pulumi.Input<inputs.objectstorage.WebsiteConfigurationIndexDocument>;
    /**
     * Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can can specify a different error code to return.
     */
    redirectAllRequestsTo?: pulumi.Input<inputs.objectstorage.WebsiteConfigurationRedirectAllRequestsTo>;
    /**
     * A container for describing a condition that must be met for the specified redirect to apply.
     */
    routingRules?: pulumi.Input<pulumi.Input<inputs.objectstorage.WebsiteConfigurationRoutingRule>[]>;
}
