// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { BucketArgs, BucketState } from "./bucket";
export type Bucket = import("./bucket").Bucket;
export const Bucket: typeof import("./bucket").Bucket = null as any;
utilities.lazyLoad(exports, ["Bucket"], () => require("./bucket"));

export { BucketLifecycleConfigurationArgs, BucketLifecycleConfigurationState } from "./bucketLifecycleConfiguration";
export type BucketLifecycleConfiguration = import("./bucketLifecycleConfiguration").BucketLifecycleConfiguration;
export const BucketLifecycleConfiguration: typeof import("./bucketLifecycleConfiguration").BucketLifecycleConfiguration = null as any;
utilities.lazyLoad(exports, ["BucketLifecycleConfiguration"], () => require("./bucketLifecycleConfiguration"));

export { BucketPolicyArgs, BucketPolicyState } from "./bucketPolicy";
export type BucketPolicy = import("./bucketPolicy").BucketPolicy;
export const BucketPolicy: typeof import("./bucketPolicy").BucketPolicy = null as any;
utilities.lazyLoad(exports, ["BucketPolicy"], () => require("./bucketPolicy"));

export { BucketServerSideEncryptionConfigurationArgs, BucketServerSideEncryptionConfigurationState } from "./bucketServerSideEncryptionConfiguration";
export type BucketServerSideEncryptionConfiguration = import("./bucketServerSideEncryptionConfiguration").BucketServerSideEncryptionConfiguration;
export const BucketServerSideEncryptionConfiguration: typeof import("./bucketServerSideEncryptionConfiguration").BucketServerSideEncryptionConfiguration = null as any;
utilities.lazyLoad(exports, ["BucketServerSideEncryptionConfiguration"], () => require("./bucketServerSideEncryptionConfiguration"));

export { BucketVersioningArgs, BucketVersioningState } from "./bucketVersioning";
export type BucketVersioning = import("./bucketVersioning").BucketVersioning;
export const BucketVersioning: typeof import("./bucketVersioning").BucketVersioning = null as any;
utilities.lazyLoad(exports, ["BucketVersioning"], () => require("./bucketVersioning"));

export { CorsConfigurationArgs, CorsConfigurationState } from "./corsConfiguration";
export type CorsConfiguration = import("./corsConfiguration").CorsConfiguration;
export const CorsConfiguration: typeof import("./corsConfiguration").CorsConfiguration = null as any;
utilities.lazyLoad(exports, ["CorsConfiguration"], () => require("./corsConfiguration"));

export { GetS3BucketArgs, GetS3BucketResult, GetS3BucketOutputArgs } from "./getS3Bucket";
export const getS3Bucket: typeof import("./getS3Bucket").getS3Bucket = null as any;
export const getS3BucketOutput: typeof import("./getS3Bucket").getS3BucketOutput = null as any;
utilities.lazyLoad(exports, ["getS3Bucket","getS3BucketOutput"], () => require("./getS3Bucket"));

export { GetS3BucketPolicyArgs, GetS3BucketPolicyResult, GetS3BucketPolicyOutputArgs } from "./getS3BucketPolicy";
export const getS3BucketPolicy: typeof import("./getS3BucketPolicy").getS3BucketPolicy = null as any;
export const getS3BucketPolicyOutput: typeof import("./getS3BucketPolicy").getS3BucketPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getS3BucketPolicy","getS3BucketPolicyOutput"], () => require("./getS3BucketPolicy"));

export { GetS3ObjectArgs, GetS3ObjectResult, GetS3ObjectOutputArgs } from "./getS3Object";
export const getS3Object: typeof import("./getS3Object").getS3Object = null as any;
export const getS3ObjectOutput: typeof import("./getS3Object").getS3ObjectOutput = null as any;
utilities.lazyLoad(exports, ["getS3Object","getS3ObjectOutput"], () => require("./getS3Object"));

export { GetS3ObjectsArgs, GetS3ObjectsResult, GetS3ObjectsOutputArgs } from "./getS3Objects";
export const getS3Objects: typeof import("./getS3Objects").getS3Objects = null as any;
export const getS3ObjectsOutput: typeof import("./getS3Objects").getS3ObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getS3Objects","getS3ObjectsOutput"], () => require("./getS3Objects"));

export { ObjectArgs, ObjectState } from "./object";
export type Object = import("./object").Object;
export const Object: typeof import("./object").Object = null as any;
utilities.lazyLoad(exports, ["Object"], () => require("./object"));

export { ObjectCopyArgs, ObjectCopyState } from "./objectCopy";
export type ObjectCopy = import("./objectCopy").ObjectCopy;
export const ObjectCopy: typeof import("./objectCopy").ObjectCopy = null as any;
utilities.lazyLoad(exports, ["ObjectCopy"], () => require("./objectCopy"));

export { ObjectLockConfigurationArgs, ObjectLockConfigurationState } from "./objectLockConfiguration";
export type ObjectLockConfiguration = import("./objectLockConfiguration").ObjectLockConfiguration;
export const ObjectLockConfiguration: typeof import("./objectLockConfiguration").ObjectLockConfiguration = null as any;
utilities.lazyLoad(exports, ["ObjectLockConfiguration"], () => require("./objectLockConfiguration"));

export { PublicAccessBlockArgs, PublicAccessBlockState } from "./publicAccessBlock";
export type PublicAccessBlock = import("./publicAccessBlock").PublicAccessBlock;
export const PublicAccessBlock: typeof import("./publicAccessBlock").PublicAccessBlock = null as any;
utilities.lazyLoad(exports, ["PublicAccessBlock"], () => require("./publicAccessBlock"));

export { WebsiteConfigurationArgs, WebsiteConfigurationState } from "./websiteConfiguration";
export type WebsiteConfiguration = import("./websiteConfiguration").WebsiteConfiguration;
export const WebsiteConfiguration: typeof import("./websiteConfiguration").WebsiteConfiguration = null as any;
utilities.lazyLoad(exports, ["WebsiteConfiguration"], () => require("./websiteConfiguration"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ionoscloud:objectstorage/bucket:Bucket":
                return new Bucket(name, <any>undefined, { urn })
            case "ionoscloud:objectstorage/bucketLifecycleConfiguration:BucketLifecycleConfiguration":
                return new BucketLifecycleConfiguration(name, <any>undefined, { urn })
            case "ionoscloud:objectstorage/bucketPolicy:BucketPolicy":
                return new BucketPolicy(name, <any>undefined, { urn })
            case "ionoscloud:objectstorage/bucketServerSideEncryptionConfiguration:BucketServerSideEncryptionConfiguration":
                return new BucketServerSideEncryptionConfiguration(name, <any>undefined, { urn })
            case "ionoscloud:objectstorage/bucketVersioning:BucketVersioning":
                return new BucketVersioning(name, <any>undefined, { urn })
            case "ionoscloud:objectstorage/corsConfiguration:CorsConfiguration":
                return new CorsConfiguration(name, <any>undefined, { urn })
            case "ionoscloud:objectstorage/object:Object":
                return new Object(name, <any>undefined, { urn })
            case "ionoscloud:objectstorage/objectCopy:ObjectCopy":
                return new ObjectCopy(name, <any>undefined, { urn })
            case "ionoscloud:objectstorage/objectLockConfiguration:ObjectLockConfiguration":
                return new ObjectLockConfiguration(name, <any>undefined, { urn })
            case "ionoscloud:objectstorage/publicAccessBlock:PublicAccessBlock":
                return new PublicAccessBlock(name, <any>undefined, { urn })
            case "ionoscloud:objectstorage/websiteConfiguration:WebsiteConfiguration":
                return new WebsiteConfiguration(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ionoscloud", "objectstorage/bucket", _module)
pulumi.runtime.registerResourceModule("ionoscloud", "objectstorage/bucketLifecycleConfiguration", _module)
pulumi.runtime.registerResourceModule("ionoscloud", "objectstorage/bucketPolicy", _module)
pulumi.runtime.registerResourceModule("ionoscloud", "objectstorage/bucketServerSideEncryptionConfiguration", _module)
pulumi.runtime.registerResourceModule("ionoscloud", "objectstorage/bucketVersioning", _module)
pulumi.runtime.registerResourceModule("ionoscloud", "objectstorage/corsConfiguration", _module)
pulumi.runtime.registerResourceModule("ionoscloud", "objectstorage/object", _module)
pulumi.runtime.registerResourceModule("ionoscloud", "objectstorage/objectCopy", _module)
pulumi.runtime.registerResourceModule("ionoscloud", "objectstorage/objectLockConfiguration", _module)
pulumi.runtime.registerResourceModule("ionoscloud", "objectstorage/publicAccessBlock", _module)
pulumi.runtime.registerResourceModule("ionoscloud", "objectstorage/websiteConfiguration", _module)
