// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages an **Container Registry Token** on IonosCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const exampleRegistry = new ionoscloud.creg.Registry("exampleRegistry", {
 *     garbageCollectionSchedule: {
 *         days: [
 *             "Monday",
 *             "Tuesday",
 *         ],
 *         time: "05:19:00+00:00",
 *     },
 *     location: "de/fra",
 * });
 * const exampleRegistryToken = new ionoscloud.creg.RegistryToken("exampleRegistryToken", {
 *     expiryDate: "2023-01-13 16:27:42Z",
 *     scopes: [{
 *         actions: ["push"],
 *         name: "Scope1",
 *         type: "repository",
 *     }],
 *     status: "enabled",
 *     registryId: exampleRegistry.id,
 *     savePasswordToFile: "pass.txt",
 * });
 * ```
 *
 * ## Import
 *
 * Resource Container Registry Token can be imported using the `container registry id` and `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import ionoscloud:creg/registryToken:RegistryToken mycrtoken {container_registry uuid}/{container_registry_token uuid}
 * ```
 */
export class RegistryToken extends pulumi.CustomResource {
    /**
     * Get an existing RegistryToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegistryTokenState, opts?: pulumi.CustomResourceOptions): RegistryToken {
        return new RegistryToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:creg/registryToken:RegistryToken';

    /**
     * Returns true if the given object is an instance of RegistryToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RegistryToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegistryToken.__pulumiType;
    }

    public /*out*/ readonly credentials!: pulumi.Output<outputs.creg.RegistryTokenCredential[]>;
    public readonly expiryDate!: pulumi.Output<string | undefined>;
    /**
     * [string] The name of the container registry token. Immutable, update forces re-creation of the resource.
     * * `expiry-date`           - (Optional)[string] The value must be supplied as ISO 8601 timestamp
     */
    public readonly name!: pulumi.Output<string>;
    public readonly registryId!: pulumi.Output<string>;
    /**
     * [string] Saves token password to file. Only works on create. Takes as argument a file name, or a file path
     *
     * > **⚠ WARNING** `savePasswordToFile` must be used with caution.
     * > It will save the password(token) returned on create to a file. This is the only way to get the token.
     */
    public readonly savePasswordToFile!: pulumi.Output<string | undefined>;
    /**
     * [map]
     */
    public readonly scopes!: pulumi.Output<outputs.creg.RegistryTokenScope[]>;
    /**
     * [string] Must have on of the values: `enabled`, `disabled`
     */
    public readonly status!: pulumi.Output<string>;

    /**
     * Create a RegistryToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RegistryTokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RegistryTokenArgs | RegistryTokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RegistryTokenState | undefined;
            resourceInputs["credentials"] = state ? state.credentials : undefined;
            resourceInputs["expiryDate"] = state ? state.expiryDate : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["registryId"] = state ? state.registryId : undefined;
            resourceInputs["savePasswordToFile"] = state ? state.savePasswordToFile : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as RegistryTokenArgs | undefined;
            if ((!args || args.registryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registryId'");
            }
            resourceInputs["expiryDate"] = args ? args.expiryDate : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["registryId"] = args ? args.registryId : undefined;
            resourceInputs["savePasswordToFile"] = args ? args.savePasswordToFile : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["credentials"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RegistryToken.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RegistryToken resources.
 */
export interface RegistryTokenState {
    credentials?: pulumi.Input<pulumi.Input<inputs.creg.RegistryTokenCredential>[]>;
    expiryDate?: pulumi.Input<string>;
    /**
     * [string] The name of the container registry token. Immutable, update forces re-creation of the resource.
     * * `expiry-date`           - (Optional)[string] The value must be supplied as ISO 8601 timestamp
     */
    name?: pulumi.Input<string>;
    registryId?: pulumi.Input<string>;
    /**
     * [string] Saves token password to file. Only works on create. Takes as argument a file name, or a file path
     *
     * > **⚠ WARNING** `savePasswordToFile` must be used with caution.
     * > It will save the password(token) returned on create to a file. This is the only way to get the token.
     */
    savePasswordToFile?: pulumi.Input<string>;
    /**
     * [map]
     */
    scopes?: pulumi.Input<pulumi.Input<inputs.creg.RegistryTokenScope>[]>;
    /**
     * [string] Must have on of the values: `enabled`, `disabled`
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RegistryToken resource.
 */
export interface RegistryTokenArgs {
    expiryDate?: pulumi.Input<string>;
    /**
     * [string] The name of the container registry token. Immutable, update forces re-creation of the resource.
     * * `expiry-date`           - (Optional)[string] The value must be supplied as ISO 8601 timestamp
     */
    name?: pulumi.Input<string>;
    registryId: pulumi.Input<string>;
    /**
     * [string] Saves token password to file. Only works on create. Takes as argument a file name, or a file path
     *
     * > **⚠ WARNING** `savePasswordToFile` must be used with caution.
     * > It will save the password(token) returned on create to a file. This is the only way to get the token.
     */
    savePasswordToFile?: pulumi.Input<string>;
    /**
     * [map]
     */
    scopes?: pulumi.Input<pulumi.Input<inputs.creg.RegistryTokenScope>[]>;
    /**
     * [string] Must have on of the values: `enabled`, `disabled`
     */
    status?: pulumi.Input<string>;
}
