// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Registry extends pulumi.CustomResource {
    /**
     * Get an existing Registry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegistryState, opts?: pulumi.CustomResourceOptions): Registry {
        return new Registry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:creg/registry:Registry';

    /**
     * Returns true if the given object is an instance of Registry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Registry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Registry.__pulumiType;
    }

    /**
     * The subnet CIDRs that are allowed to connect to the registry. Specify 'a.b.c.d/32' for an individual IP address.
     * __Note__: If this list is empty or not set, there are no restrictions.
     */
    public readonly apiSubnetAllowLists!: pulumi.Output<string[] | undefined>;
    public readonly features!: pulumi.Output<outputs.creg.RegistryFeatures>;
    public readonly garbageCollectionSchedule!: pulumi.Output<outputs.creg.RegistryGarbageCollectionSchedule>;
    public /*out*/ readonly hostname!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly storageUsages!: pulumi.Output<outputs.creg.RegistryStorageUsage[]>;

    /**
     * Create a Registry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RegistryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RegistryArgs | RegistryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RegistryState | undefined;
            resourceInputs["apiSubnetAllowLists"] = state ? state.apiSubnetAllowLists : undefined;
            resourceInputs["features"] = state ? state.features : undefined;
            resourceInputs["garbageCollectionSchedule"] = state ? state.garbageCollectionSchedule : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["storageUsages"] = state ? state.storageUsages : undefined;
        } else {
            const args = argsOrState as RegistryArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["apiSubnetAllowLists"] = args ? args.apiSubnetAllowLists : undefined;
            resourceInputs["features"] = args ? args.features : undefined;
            resourceInputs["garbageCollectionSchedule"] = args ? args.garbageCollectionSchedule : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["hostname"] = undefined /*out*/;
            resourceInputs["storageUsages"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Registry.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Registry resources.
 */
export interface RegistryState {
    /**
     * The subnet CIDRs that are allowed to connect to the registry. Specify 'a.b.c.d/32' for an individual IP address.
     * __Note__: If this list is empty or not set, there are no restrictions.
     */
    apiSubnetAllowLists?: pulumi.Input<pulumi.Input<string>[]>;
    features?: pulumi.Input<inputs.creg.RegistryFeatures>;
    garbageCollectionSchedule?: pulumi.Input<inputs.creg.RegistryGarbageCollectionSchedule>;
    hostname?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    storageUsages?: pulumi.Input<pulumi.Input<inputs.creg.RegistryStorageUsage>[]>;
}

/**
 * The set of arguments for constructing a Registry resource.
 */
export interface RegistryArgs {
    /**
     * The subnet CIDRs that are allowed to connect to the registry. Specify 'a.b.c.d/32' for an individual IP address.
     * __Note__: If this list is empty or not set, there are no restrictions.
     */
    apiSubnetAllowLists?: pulumi.Input<pulumi.Input<string>[]>;
    features?: pulumi.Input<inputs.creg.RegistryFeatures>;
    garbageCollectionSchedule?: pulumi.Input<inputs.creg.RegistryGarbageCollectionSchedule>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
