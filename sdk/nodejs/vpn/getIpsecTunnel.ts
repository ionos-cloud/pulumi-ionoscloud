// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * The **VPN IPSec Gateway Tunnel data source** can be used to search for and return an existing IPSec Gateway Tunnel.
 * You can provide a string for the name parameter which will be compared with provisioned IPSec Gateway Tunnels.
 * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
 * When this happens, please refine your search string so that it is specific enough to return only one result.
 *
 * ## Example Usage
 *
 * ### By ID
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.vpn.getIpsecTunnel({
 *     id: "tunnel_id",
 *     gatewayId: "gateway_id",
 *     location: "gateway_location",
 * });
 * ```
 *
 * ### By Name
 *
 * Needs to have the resource be previously created, or a dependsOn clause to ensure that the resource is created before
 * this data source is called.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.vpn.getIpsecTunnel({
 *     name: "ipsec-tunnel",
 *     gatewayId: "gateway_id",
 *     location: "gateway_location",
 * });
 * ```
 *
 * ## Attributes reference
 *
 * The following attributes are returned by the datasource:
 *
 * * `id` - The unique ID of the IPSec Gateway Tunnel.
 * * `name` - The name of the IPSec Gateway Tunnel.
 * * `description` - The human-readable description of your IPSec Gateway Tunnel.
 * * `remoteHost` - The remote peer host fully qualified domain name or public IPV4 IP to connect to.
 * * `ike` - Settings for the initial security exchange phase.
 *     * `diffieHellmanGroup` - The Diffie-Hellman Group to use for IPSec Encryption.
 *     * `encryptionAlgorithm` - The encryption algorithm to use for IPSec Encryption.
 *     * `integrityAlgorithm` - The integrity algorithm to use for IPSec Encryption.
 *     * `lifetime` - The phase lifetime in seconds.
 * * `esp` - Settings for the IPSec SA (ESP) phase.
 *     * `diffieHellmanGroup` - The Diffie-Hellman Group to use for IPSec Encryption.
 *     * `encryptionAlgorithm` - The encryption algorithm to use for IPSec Encryption.
 *     * `integrityAlgorithm` - The integrity algorithm to use for IPSec Encryption.
 *     * `lifetime` - The phase lifetime in seconds.
 * * `auth` - Properties with all data needed to define IPSec Authentication.
 *     * `method` - The authentication method to use for IPSec Authentication.
 * * `cloudNetworkCidrs` - The network CIDRs on the "Left" side that are allowed to connect to the IPSec
 *   tunnel, i.e. the CIDRs within your IONOS Cloud LAN. Specify "0.0.0.0/0" or "::/0" for all addresses.
 * * `peerNetworkCidrs` - The network CIDRs on the "Right" side that are allowed to connect to the IPSec
 *   tunnel. Specify "0.0.0.0/0" or "::/0" for all addresses.
 */
export function getIpsecTunnel(args: GetIpsecTunnelArgs, opts?: pulumi.InvokeOptions): Promise<GetIpsecTunnelResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ionoscloud:vpn/getIpsecTunnel:getIpsecTunnel", {
        "gatewayId": args.gatewayId,
        "id": args.id,
        "location": args.location,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getIpsecTunnel.
 */
export interface GetIpsecTunnelArgs {
    /**
     * The ID of the IPSec Gateway that the tunnel belongs to.
     */
    gatewayId: string;
    /**
     * ID of an existing IPSec Gateway Tunnel that you want to search for.
     */
    id?: string;
    /**
     * The location of the IPSec Gateway Tunnel.
     */
    location?: string;
    /**
     * Name of an existing IPSec Gateway Tunnel that you want to search for.
     */
    name?: string;
}

/**
 * A collection of values returned by getIpsecTunnel.
 */
export interface GetIpsecTunnelResult {
    readonly auths: outputs.vpn.GetIpsecTunnelAuth[];
    readonly cloudNetworkCidrs: string[];
    readonly description: string;
    readonly esps: outputs.vpn.GetIpsecTunnelEsp[];
    readonly gatewayId: string;
    readonly id: string;
    readonly ikes: outputs.vpn.GetIpsecTunnelIke[];
    readonly location?: string;
    readonly name: string;
    readonly peerNetworkCidrs: string[];
    readonly remoteHost: string;
}
/**
 * The **VPN IPSec Gateway Tunnel data source** can be used to search for and return an existing IPSec Gateway Tunnel.
 * You can provide a string for the name parameter which will be compared with provisioned IPSec Gateway Tunnels.
 * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
 * When this happens, please refine your search string so that it is specific enough to return only one result.
 *
 * ## Example Usage
 *
 * ### By ID
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.vpn.getIpsecTunnel({
 *     id: "tunnel_id",
 *     gatewayId: "gateway_id",
 *     location: "gateway_location",
 * });
 * ```
 *
 * ### By Name
 *
 * Needs to have the resource be previously created, or a dependsOn clause to ensure that the resource is created before
 * this data source is called.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.vpn.getIpsecTunnel({
 *     name: "ipsec-tunnel",
 *     gatewayId: "gateway_id",
 *     location: "gateway_location",
 * });
 * ```
 *
 * ## Attributes reference
 *
 * The following attributes are returned by the datasource:
 *
 * * `id` - The unique ID of the IPSec Gateway Tunnel.
 * * `name` - The name of the IPSec Gateway Tunnel.
 * * `description` - The human-readable description of your IPSec Gateway Tunnel.
 * * `remoteHost` - The remote peer host fully qualified domain name or public IPV4 IP to connect to.
 * * `ike` - Settings for the initial security exchange phase.
 *     * `diffieHellmanGroup` - The Diffie-Hellman Group to use for IPSec Encryption.
 *     * `encryptionAlgorithm` - The encryption algorithm to use for IPSec Encryption.
 *     * `integrityAlgorithm` - The integrity algorithm to use for IPSec Encryption.
 *     * `lifetime` - The phase lifetime in seconds.
 * * `esp` - Settings for the IPSec SA (ESP) phase.
 *     * `diffieHellmanGroup` - The Diffie-Hellman Group to use for IPSec Encryption.
 *     * `encryptionAlgorithm` - The encryption algorithm to use for IPSec Encryption.
 *     * `integrityAlgorithm` - The integrity algorithm to use for IPSec Encryption.
 *     * `lifetime` - The phase lifetime in seconds.
 * * `auth` - Properties with all data needed to define IPSec Authentication.
 *     * `method` - The authentication method to use for IPSec Authentication.
 * * `cloudNetworkCidrs` - The network CIDRs on the "Left" side that are allowed to connect to the IPSec
 *   tunnel, i.e. the CIDRs within your IONOS Cloud LAN. Specify "0.0.0.0/0" or "::/0" for all addresses.
 * * `peerNetworkCidrs` - The network CIDRs on the "Right" side that are allowed to connect to the IPSec
 *   tunnel. Specify "0.0.0.0/0" or "::/0" for all addresses.
 */
export function getIpsecTunnelOutput(args: GetIpsecTunnelOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetIpsecTunnelResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("ionoscloud:vpn/getIpsecTunnel:getIpsecTunnel", {
        "gatewayId": args.gatewayId,
        "id": args.id,
        "location": args.location,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getIpsecTunnel.
 */
export interface GetIpsecTunnelOutputArgs {
    /**
     * The ID of the IPSec Gateway that the tunnel belongs to.
     */
    gatewayId: pulumi.Input<string>;
    /**
     * ID of an existing IPSec Gateway Tunnel that you want to search for.
     */
    id?: pulumi.Input<string>;
    /**
     * The location of the IPSec Gateway Tunnel.
     */
    location?: pulumi.Input<string>;
    /**
     * Name of an existing IPSec Gateway Tunnel that you want to search for.
     */
    name?: pulumi.Input<string>;
}
