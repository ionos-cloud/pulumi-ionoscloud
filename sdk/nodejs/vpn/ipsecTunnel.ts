// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class IpsecTunnel extends pulumi.CustomResource {
    /**
     * Get an existing IpsecTunnel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpsecTunnelState, opts?: pulumi.CustomResourceOptions): IpsecTunnel {
        return new IpsecTunnel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:vpn/ipsecTunnel:IpsecTunnel';

    /**
     * Returns true if the given object is an instance of IpsecTunnel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpsecTunnel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpsecTunnel.__pulumiType;
    }

    /**
     * Properties with all data needed to define IPSec Authentication.
     */
    public readonly auth!: pulumi.Output<outputs.vpn.IpsecTunnelAuth>;
    /**
     * The network CIDRs on the "Left" side that are allowed to connect to the IPSec tunnel, i.e. the CIDRs within your IONOS
     * Cloud LAN. Specify "0.0.0.0/0" or "::/0" for all addresses.
     */
    public readonly cloudNetworkCidrs!: pulumi.Output<string[]>;
    /**
     * The human-readable description of your IPSec Gateway Tunnel.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Settings for the IPSec SA (ESP) phase.
     */
    public readonly esps!: pulumi.Output<outputs.vpn.IpsecTunnelEsp[]>;
    /**
     * The ID of the IPSec Gateway that the tunnel belongs to.
     */
    public readonly gatewayId!: pulumi.Output<string>;
    /**
     * Settings for the initial security exchange phase.
     */
    public readonly ike!: pulumi.Output<outputs.vpn.IpsecTunnelIke>;
    /**
     * The location of the IPSec Gateway Tunnel. Supported locations: de/fra, de/txl, es/vit, gb/bhx, gb/lhr, us/ewr, us/las,
     * us/mci, fr/par
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * The human-readable name of your IPSec Gateway Tunnel.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The network CIDRs on the "Right" side that are allowed to connect to the IPSec tunnel. Specify "0.0.0.0/0" or "::/0" for
     * all addresses.
     */
    public readonly peerNetworkCidrs!: pulumi.Output<string[]>;
    /**
     * The remote peer host fully qualified domain name or public IPV4 IP to connect to.
     */
    public readonly remoteHost!: pulumi.Output<string>;

    /**
     * Create a IpsecTunnel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IpsecTunnelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpsecTunnelArgs | IpsecTunnelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpsecTunnelState | undefined;
            resourceInputs["auth"] = state ? state.auth : undefined;
            resourceInputs["cloudNetworkCidrs"] = state ? state.cloudNetworkCidrs : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["esps"] = state ? state.esps : undefined;
            resourceInputs["gatewayId"] = state ? state.gatewayId : undefined;
            resourceInputs["ike"] = state ? state.ike : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["peerNetworkCidrs"] = state ? state.peerNetworkCidrs : undefined;
            resourceInputs["remoteHost"] = state ? state.remoteHost : undefined;
        } else {
            const args = argsOrState as IpsecTunnelArgs | undefined;
            if ((!args || args.auth === undefined) && !opts.urn) {
                throw new Error("Missing required property 'auth'");
            }
            if ((!args || args.cloudNetworkCidrs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudNetworkCidrs'");
            }
            if ((!args || args.esps === undefined) && !opts.urn) {
                throw new Error("Missing required property 'esps'");
            }
            if ((!args || args.gatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayId'");
            }
            if ((!args || args.ike === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ike'");
            }
            if ((!args || args.peerNetworkCidrs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerNetworkCidrs'");
            }
            if ((!args || args.remoteHost === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteHost'");
            }
            resourceInputs["auth"] = args ? args.auth : undefined;
            resourceInputs["cloudNetworkCidrs"] = args ? args.cloudNetworkCidrs : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["esps"] = args ? args.esps : undefined;
            resourceInputs["gatewayId"] = args ? args.gatewayId : undefined;
            resourceInputs["ike"] = args ? args.ike : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["peerNetworkCidrs"] = args ? args.peerNetworkCidrs : undefined;
            resourceInputs["remoteHost"] = args ? args.remoteHost : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpsecTunnel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IpsecTunnel resources.
 */
export interface IpsecTunnelState {
    /**
     * Properties with all data needed to define IPSec Authentication.
     */
    auth?: pulumi.Input<inputs.vpn.IpsecTunnelAuth>;
    /**
     * The network CIDRs on the "Left" side that are allowed to connect to the IPSec tunnel, i.e. the CIDRs within your IONOS
     * Cloud LAN. Specify "0.0.0.0/0" or "::/0" for all addresses.
     */
    cloudNetworkCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The human-readable description of your IPSec Gateway Tunnel.
     */
    description?: pulumi.Input<string>;
    /**
     * Settings for the IPSec SA (ESP) phase.
     */
    esps?: pulumi.Input<pulumi.Input<inputs.vpn.IpsecTunnelEsp>[]>;
    /**
     * The ID of the IPSec Gateway that the tunnel belongs to.
     */
    gatewayId?: pulumi.Input<string>;
    /**
     * Settings for the initial security exchange phase.
     */
    ike?: pulumi.Input<inputs.vpn.IpsecTunnelIke>;
    /**
     * The location of the IPSec Gateway Tunnel. Supported locations: de/fra, de/txl, es/vit, gb/bhx, gb/lhr, us/ewr, us/las,
     * us/mci, fr/par
     */
    location?: pulumi.Input<string>;
    /**
     * The human-readable name of your IPSec Gateway Tunnel.
     */
    name?: pulumi.Input<string>;
    /**
     * The network CIDRs on the "Right" side that are allowed to connect to the IPSec tunnel. Specify "0.0.0.0/0" or "::/0" for
     * all addresses.
     */
    peerNetworkCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The remote peer host fully qualified domain name or public IPV4 IP to connect to.
     */
    remoteHost?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IpsecTunnel resource.
 */
export interface IpsecTunnelArgs {
    /**
     * Properties with all data needed to define IPSec Authentication.
     */
    auth: pulumi.Input<inputs.vpn.IpsecTunnelAuth>;
    /**
     * The network CIDRs on the "Left" side that are allowed to connect to the IPSec tunnel, i.e. the CIDRs within your IONOS
     * Cloud LAN. Specify "0.0.0.0/0" or "::/0" for all addresses.
     */
    cloudNetworkCidrs: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The human-readable description of your IPSec Gateway Tunnel.
     */
    description?: pulumi.Input<string>;
    /**
     * Settings for the IPSec SA (ESP) phase.
     */
    esps: pulumi.Input<pulumi.Input<inputs.vpn.IpsecTunnelEsp>[]>;
    /**
     * The ID of the IPSec Gateway that the tunnel belongs to.
     */
    gatewayId: pulumi.Input<string>;
    /**
     * Settings for the initial security exchange phase.
     */
    ike: pulumi.Input<inputs.vpn.IpsecTunnelIke>;
    /**
     * The location of the IPSec Gateway Tunnel. Supported locations: de/fra, de/txl, es/vit, gb/bhx, gb/lhr, us/ewr, us/las,
     * us/mci, fr/par
     */
    location?: pulumi.Input<string>;
    /**
     * The human-readable name of your IPSec Gateway Tunnel.
     */
    name?: pulumi.Input<string>;
    /**
     * The network CIDRs on the "Right" side that are allowed to connect to the IPSec tunnel. Specify "0.0.0.0/0" or "::/0" for
     * all addresses.
     */
    peerNetworkCidrs: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The remote peer host fully qualified domain name or public IPV4 IP to connect to.
     */
    remoteHost: pulumi.Input<string>;
}
