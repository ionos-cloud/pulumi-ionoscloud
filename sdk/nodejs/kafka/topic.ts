// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a **Kafka Cluster Topic** on IonosCloud.
 *
 * ## Example Usage
 *
 * This resource will create an operational Kafka Cluster Topic. After this section completes, the provisioner can be
 * called.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * // Basic example
 * const exampleDatacenter = new ionoscloud.compute.Datacenter("exampleDatacenter", {location: "de/fra"});
 * const exampleLan = new ionoscloud.compute.Lan("exampleLan", {
 *     datacenterId: exampleDatacenter.id,
 *     "public": false,
 * });
 * const exampleCluster = new ionoscloud.kafka.Cluster("exampleCluster", {
 *     location: exampleDatacenter.location,
 *     version: "3.7.0",
 *     size: "S",
 *     connections: {
 *         datacenterId: exampleDatacenter.id,
 *         lanId: exampleLan.id,
 *         brokerAddresses: [
 *             "192.168.1.101/24",
 *             "192.168.1.102/24",
 *             "192.168.1.103/24",
 *         ],
 *     },
 * });
 * const exampleTopic = new ionoscloud.kafka.Topic("exampleTopic", {
 *     clusterId: exampleCluster.id,
 *     location: exampleCluster.location,
 *     replicationFactor: 1,
 *     numberOfPartitions: 1,
 *     retentionTime: 86400000,
 *     segmentBytes: 1073741824,
 * });
 * ```
 *
 * ## Import
 *
 * Kafka Cluster Topic can be imported using the `location`, `kafka cluster id` and the `kafka cluster topic id`:
 *
 * ```sh
 * $ pulumi import ionoscloud:kafka/topic:Topic my_topic {location}:{kafka cluster uuid}:{kafka cluster topic uuid}
 * ```
 */
export class Topic extends pulumi.CustomResource {
    /**
     * Get an existing Topic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TopicState, opts?: pulumi.CustomResourceOptions): Topic {
        return new Topic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:kafka/topic:Topic';

    /**
     * Returns true if the given object is an instance of Topic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Topic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Topic.__pulumiType;
    }

    /**
     * [string] ID of the Kafka Cluster that the topic belongs to.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * [string] The location of the Kafka Cluster Topic. Possible values: `de/fra`, `de/txl`
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * [string] Name of the Kafka Cluster.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * [int] The number of partitions of the topic. Partitions allow for parallel
     * processing of messages. The partition count must be greater than or equal to the replication factor. Minimum value: 1.
     * Default value: 3.
     */
    public readonly numberOfPartitions!: pulumi.Output<number | undefined>;
    /**
     * [int] The number of replicas of the topic. The replication factor determines how many
     * copies of the topic are stored on different brokers. The replication factor must be less than or equal to the number
     * of brokers in the Kafka Cluster. Minimum value: 1. Default value: 3.
     */
    public readonly replicationFactor!: pulumi.Output<number | undefined>;
    /**
     * [int] This configuration controls the maximum time we will retain a log before we will
     * discard old log segments to free up space. This represents an SLA on how soon consumers must read their data. If set
     * to -1, no time limit is applied. Default value: 604800000.
     */
    public readonly retentionTime!: pulumi.Output<number | undefined>;
    /**
     * [int] This configuration controls the segment file size for the log. Retention and
     * cleaning is always done a file at a time so a larger segment size means fewer files but less granular control over
     * retention. Default value: 1073741824.
     */
    public readonly segmentBytes!: pulumi.Output<number | undefined>;

    /**
     * Create a Topic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TopicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TopicArgs | TopicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TopicState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numberOfPartitions"] = state ? state.numberOfPartitions : undefined;
            resourceInputs["replicationFactor"] = state ? state.replicationFactor : undefined;
            resourceInputs["retentionTime"] = state ? state.retentionTime : undefined;
            resourceInputs["segmentBytes"] = state ? state.segmentBytes : undefined;
        } else {
            const args = argsOrState as TopicArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["numberOfPartitions"] = args ? args.numberOfPartitions : undefined;
            resourceInputs["replicationFactor"] = args ? args.replicationFactor : undefined;
            resourceInputs["retentionTime"] = args ? args.retentionTime : undefined;
            resourceInputs["segmentBytes"] = args ? args.segmentBytes : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Topic.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Topic resources.
 */
export interface TopicState {
    /**
     * [string] ID of the Kafka Cluster that the topic belongs to.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * [string] The location of the Kafka Cluster Topic. Possible values: `de/fra`, `de/txl`
     */
    location?: pulumi.Input<string>;
    /**
     * [string] Name of the Kafka Cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * [int] The number of partitions of the topic. Partitions allow for parallel
     * processing of messages. The partition count must be greater than or equal to the replication factor. Minimum value: 1.
     * Default value: 3.
     */
    numberOfPartitions?: pulumi.Input<number>;
    /**
     * [int] The number of replicas of the topic. The replication factor determines how many
     * copies of the topic are stored on different brokers. The replication factor must be less than or equal to the number
     * of brokers in the Kafka Cluster. Minimum value: 1. Default value: 3.
     */
    replicationFactor?: pulumi.Input<number>;
    /**
     * [int] This configuration controls the maximum time we will retain a log before we will
     * discard old log segments to free up space. This represents an SLA on how soon consumers must read their data. If set
     * to -1, no time limit is applied. Default value: 604800000.
     */
    retentionTime?: pulumi.Input<number>;
    /**
     * [int] This configuration controls the segment file size for the log. Retention and
     * cleaning is always done a file at a time so a larger segment size means fewer files but less granular control over
     * retention. Default value: 1073741824.
     */
    segmentBytes?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Topic resource.
 */
export interface TopicArgs {
    /**
     * [string] ID of the Kafka Cluster that the topic belongs to.
     */
    clusterId: pulumi.Input<string>;
    /**
     * [string] The location of the Kafka Cluster Topic. Possible values: `de/fra`, `de/txl`
     */
    location: pulumi.Input<string>;
    /**
     * [string] Name of the Kafka Cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * [int] The number of partitions of the topic. Partitions allow for parallel
     * processing of messages. The partition count must be greater than or equal to the replication factor. Minimum value: 1.
     * Default value: 3.
     */
    numberOfPartitions?: pulumi.Input<number>;
    /**
     * [int] The number of replicas of the topic. The replication factor determines how many
     * copies of the topic are stored on different brokers. The replication factor must be less than or equal to the number
     * of brokers in the Kafka Cluster. Minimum value: 1. Default value: 3.
     */
    replicationFactor?: pulumi.Input<number>;
    /**
     * [int] This configuration controls the maximum time we will retain a log before we will
     * discard old log segments to free up space. This represents an SLA on how soon consumers must read their data. If set
     * to -1, no time limit is applied. Default value: 604800000.
     */
    retentionTime?: pulumi.Input<number>;
    /**
     * [int] This configuration controls the segment file size for the log. Retention and
     * cleaning is always done a file at a time so a larger segment size means fewer files but less granular control over
     * retention. Default value: 1073741824.
     */
    segmentBytes?: pulumi.Input<number>;
}
