// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The **Container Registry data source** can be used to search for and return an existing Container Registry.
 * You can provide a string for the name parameter which will be compared with provisioned Container Registry.
 * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
 * When this happens, please refine your search and make sure that your resources have unique names.
 *
 * ## Example Usage
 *
 * ### By Name
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.getContainerRegistry({
 *     name: "container-registry-example",
 * });
 * ```
 *
 * ### By Name with Partial Match
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.getContainerRegistry({
 *     name: "-example",
 *     partialMatch: true,
 * });
 * ```
 */
export function getContainerRegistry(args?: GetContainerRegistryArgs, opts?: pulumi.InvokeOptions): Promise<GetContainerRegistryResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ionoscloud:index/getContainerRegistry:getContainerRegistry", {
        "id": args.id,
        "location": args.location,
        "name": args.name,
        "partialMatch": args.partialMatch,
    }, opts);
}

/**
 * A collection of arguments for invoking getContainerRegistry.
 */
export interface GetContainerRegistryArgs {
    /**
     * ID of the container registry you want to search for.
     */
    id?: string;
    location?: string;
    /**
     * Name of an existing container registry that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partialMatch` parameter is not set to true.
     */
    name?: string;
    /**
     * Whether partial matching is allowed or not when using name argument. Default value is false.
     *
     * Either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
     */
    partialMatch?: boolean;
}

/**
 * A collection of values returned by getContainerRegistry.
 */
export interface GetContainerRegistryResult {
    /**
     * The subnet CIDRs that are allowed to connect to the registry.  Specify "a.b.c.d/32" for an individual IP address. __Note__: If this list is empty or not set, there are no restrictions.
     */
    readonly apiSubnetAllowLists: string[];
    readonly features: outputs.GetContainerRegistryFeature[];
    readonly garbageCollectionSchedules: outputs.GetContainerRegistryGarbageCollectionSchedule[];
    readonly hostname: string;
    /**
     * Id of the container registry.
     */
    readonly id?: string;
    readonly location?: string;
    readonly maintenanceWindows: outputs.GetContainerRegistryMaintenanceWindow[];
    /**
     * The name of the container registry.
     */
    readonly name?: string;
    readonly partialMatch?: boolean;
    readonly storageUsages: outputs.GetContainerRegistryStorageUsage[];
}
/**
 * The **Container Registry data source** can be used to search for and return an existing Container Registry.
 * You can provide a string for the name parameter which will be compared with provisioned Container Registry.
 * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
 * When this happens, please refine your search and make sure that your resources have unique names.
 *
 * ## Example Usage
 *
 * ### By Name
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.getContainerRegistry({
 *     name: "container-registry-example",
 * });
 * ```
 *
 * ### By Name with Partial Match
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.getContainerRegistry({
 *     name: "-example",
 *     partialMatch: true,
 * });
 * ```
 */
export function getContainerRegistryOutput(args?: GetContainerRegistryOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetContainerRegistryResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("ionoscloud:index/getContainerRegistry:getContainerRegistry", {
        "id": args.id,
        "location": args.location,
        "name": args.name,
        "partialMatch": args.partialMatch,
    }, opts);
}

/**
 * A collection of arguments for invoking getContainerRegistry.
 */
export interface GetContainerRegistryOutputArgs {
    /**
     * ID of the container registry you want to search for.
     */
    id?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    /**
     * Name of an existing container registry that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partialMatch` parameter is not set to true.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether partial matching is allowed or not when using name argument. Default value is false.
     *
     * Either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
     */
    partialMatch?: pulumi.Input<boolean>;
}
