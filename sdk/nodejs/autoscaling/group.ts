// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Group extends pulumi.CustomResource {
    /**
     * Get an existing Group resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupState, opts?: pulumi.CustomResourceOptions): Group {
        return new Group(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:autoscaling/group:Group';

    /**
     * Returns true if the given object is an instance of Group.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Group {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Group.__pulumiType;
    }

    /**
     * Unique identifier for the resource
     */
    public readonly datacenterId!: pulumi.Output<string>;
    /**
     * Location of the data center.
     */
    public /*out*/ readonly location!: pulumi.Output<string>;
    /**
     * The maximum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for
     * both automatic and manual changes.
     */
    public readonly maxReplicaCount!: pulumi.Output<number>;
    /**
     * The minimum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for
     * both automatic and manual changes
     */
    public readonly minReplicaCount!: pulumi.Output<number>;
    /**
     * User-defined name for the Autoscaling Group.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Defines the behavior of this VM Auto Scaling Group. A policy consists of triggers and actions, where an action is an
     * automated behavior, and the trigger defines the circumstances under which the action is triggered. Currently, two
     * separate actions are supported, namely scaling inward and outward, triggered by the thresholds defined for a particular
     * metric.
     */
    public readonly policy!: pulumi.Output<outputs.autoscaling.GroupPolicy>;
    public readonly replicaConfiguration!: pulumi.Output<outputs.autoscaling.GroupReplicaConfiguration>;

    /**
     * Create a Group resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupArgs | GroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupState | undefined;
            resourceInputs["datacenterId"] = state ? state.datacenterId : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["maxReplicaCount"] = state ? state.maxReplicaCount : undefined;
            resourceInputs["minReplicaCount"] = state ? state.minReplicaCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["replicaConfiguration"] = state ? state.replicaConfiguration : undefined;
        } else {
            const args = argsOrState as GroupArgs | undefined;
            if ((!args || args.datacenterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datacenterId'");
            }
            if ((!args || args.maxReplicaCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxReplicaCount'");
            }
            if ((!args || args.minReplicaCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'minReplicaCount'");
            }
            if ((!args || args.policy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policy'");
            }
            if ((!args || args.replicaConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicaConfiguration'");
            }
            resourceInputs["datacenterId"] = args ? args.datacenterId : undefined;
            resourceInputs["maxReplicaCount"] = args ? args.maxReplicaCount : undefined;
            resourceInputs["minReplicaCount"] = args ? args.minReplicaCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["replicaConfiguration"] = args ? args.replicaConfiguration : undefined;
            resourceInputs["location"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Group.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Group resources.
 */
export interface GroupState {
    /**
     * Unique identifier for the resource
     */
    datacenterId?: pulumi.Input<string>;
    /**
     * Location of the data center.
     */
    location?: pulumi.Input<string>;
    /**
     * The maximum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for
     * both automatic and manual changes.
     */
    maxReplicaCount?: pulumi.Input<number>;
    /**
     * The minimum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for
     * both automatic and manual changes
     */
    minReplicaCount?: pulumi.Input<number>;
    /**
     * User-defined name for the Autoscaling Group.
     */
    name?: pulumi.Input<string>;
    /**
     * Defines the behavior of this VM Auto Scaling Group. A policy consists of triggers and actions, where an action is an
     * automated behavior, and the trigger defines the circumstances under which the action is triggered. Currently, two
     * separate actions are supported, namely scaling inward and outward, triggered by the thresholds defined for a particular
     * metric.
     */
    policy?: pulumi.Input<inputs.autoscaling.GroupPolicy>;
    replicaConfiguration?: pulumi.Input<inputs.autoscaling.GroupReplicaConfiguration>;
}

/**
 * The set of arguments for constructing a Group resource.
 */
export interface GroupArgs {
    /**
     * Unique identifier for the resource
     */
    datacenterId: pulumi.Input<string>;
    /**
     * The maximum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for
     * both automatic and manual changes.
     */
    maxReplicaCount: pulumi.Input<number>;
    /**
     * The minimum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for
     * both automatic and manual changes
     */
    minReplicaCount: pulumi.Input<number>;
    /**
     * User-defined name for the Autoscaling Group.
     */
    name?: pulumi.Input<string>;
    /**
     * Defines the behavior of this VM Auto Scaling Group. A policy consists of triggers and actions, where an action is an
     * automated behavior, and the trigger defines the circumstances under which the action is triggered. Currently, two
     * separate actions are supported, namely scaling inward and outward, triggered by the thresholds defined for a particular
     * metric.
     */
    policy: pulumi.Input<inputs.autoscaling.GroupPolicy>;
    replicaConfiguration: pulumi.Input<inputs.autoscaling.GroupReplicaConfiguration>;
}
