// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The **Firewall data source** can be used to search for and return an existing FirewallRules.
 * You can provide a string for either id or name parameters which will be compared with provisioned Firewall Rules.
 * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
 * When this happens, please refine your search string so that it is specific enough to return only one result.
 *
 * ## Example Usage
 */
export function getFirewall(args: GetFirewallArgs, opts?: pulumi.InvokeOptions): Promise<GetFirewallResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ionoscloud:index/getFirewall:getFirewall", {
        "datacenterId": args.datacenterId,
        "id": args.id,
        "name": args.name,
        "nicId": args.nicId,
        "serverId": args.serverId,
    }, opts);
}

/**
 * A collection of arguments for invoking getFirewall.
 */
export interface GetFirewallArgs {
    /**
     * The Virtual Data Center ID.
     */
    datacenterId: string;
    /**
     * ID of the firewall rule you want to search for.
     */
    id?: string;
    /**
     * Name of an existing firewall rule that you want to search for.
     */
    name?: string;
    /**
     * The NIC ID.
     *
     * Either `name` or   `id` must be provided. If none, or both are provided, the datasource will return an error.
     */
    nicId: string;
    /**
     * The Server ID.
     */
    serverId: string;
}

/**
 * A collection of values returned by getFirewall.
 */
export interface GetFirewallResult {
    readonly datacenterId: string;
    /**
     * Defines the allowed code (from 0 to 254) if protocol ICMP is chosen.
     */
    readonly icmpCode: string;
    /**
     * Defines the allowed type (from 0 to 254) if the protocol ICMP is chosen.
     */
    readonly icmpType: string;
    /**
     * The id of the firewall rule.
     */
    readonly id?: string;
    /**
     * The name of the firewall rule.
     */
    readonly name?: string;
    readonly nicId: string;
    /**
     * Defines the end range of the allowed port (from 1 to 65534) if the protocol TCP or UDP is chosen.
     */
    readonly portRangeEnd: number;
    /**
     * Defines the start range of the allowed port (from 1 to 65534) if protocol TCP or UDP is chosen.
     */
    readonly portRangeStart: number;
    /**
     * The protocol for the rule: TCP, UDP, ICMP, ANY. This property is immutable.
     */
    readonly protocol: string;
    readonly serverId: string;
    /**
     * Only traffic originating from the respective IPv4 address is allowed.
     */
    readonly sourceIp: string;
    /**
     * Only traffic originating from the respective MAC address is allowed.
     */
    readonly sourceMac: string;
    /**
     * Only traffic directed to the respective IP address of the NIC is allowed.
     */
    readonly targetIp: string;
    readonly type: string;
}
/**
 * The **Firewall data source** can be used to search for and return an existing FirewallRules.
 * You can provide a string for either id or name parameters which will be compared with provisioned Firewall Rules.
 * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
 * When this happens, please refine your search string so that it is specific enough to return only one result.
 *
 * ## Example Usage
 */
export function getFirewallOutput(args: GetFirewallOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetFirewallResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("ionoscloud:index/getFirewall:getFirewall", {
        "datacenterId": args.datacenterId,
        "id": args.id,
        "name": args.name,
        "nicId": args.nicId,
        "serverId": args.serverId,
    }, opts);
}

/**
 * A collection of arguments for invoking getFirewall.
 */
export interface GetFirewallOutputArgs {
    /**
     * The Virtual Data Center ID.
     */
    datacenterId: pulumi.Input<string>;
    /**
     * ID of the firewall rule you want to search for.
     */
    id?: pulumi.Input<string>;
    /**
     * Name of an existing firewall rule that you want to search for.
     */
    name?: pulumi.Input<string>;
    /**
     * The NIC ID.
     *
     * Either `name` or   `id` must be provided. If none, or both are provided, the datasource will return an error.
     */
    nicId: pulumi.Input<string>;
    /**
     * The Server ID.
     */
    serverId: pulumi.Input<string>;
}
