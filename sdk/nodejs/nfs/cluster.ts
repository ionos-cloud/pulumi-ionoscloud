// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:nfs/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * The network connections for the Network File Storage Cluster.
     */
    public readonly connections!: pulumi.Output<outputs.nfs.ClusterConnections>;
    /**
     * The location of the Network File Storage Cluster. Available locations: 'de/fra, 'de/txl, 'fr-par, 'gb-lhr, 'es/vit,
     * 'us/las, 'us/ewr, 'us/mci'
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * The name of the Network File Storage Cluster.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly nfs!: pulumi.Output<outputs.nfs.ClusterNfs | undefined>;
    /**
     * The size of the Network File Storage Cluster. Minimum size is 2.
     */
    public readonly size!: pulumi.Output<number>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["connections"] = state ? state.connections : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nfs"] = state ? state.nfs : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if ((!args || args.connections === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connections'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["connections"] = args ? args.connections : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nfs"] = args ? args.nfs : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * The network connections for the Network File Storage Cluster.
     */
    connections?: pulumi.Input<inputs.nfs.ClusterConnections>;
    /**
     * The location of the Network File Storage Cluster. Available locations: 'de/fra, 'de/txl, 'fr-par, 'gb-lhr, 'es/vit,
     * 'us/las, 'us/ewr, 'us/mci'
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the Network File Storage Cluster.
     */
    name?: pulumi.Input<string>;
    nfs?: pulumi.Input<inputs.nfs.ClusterNfs>;
    /**
     * The size of the Network File Storage Cluster. Minimum size is 2.
     */
    size?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * The network connections for the Network File Storage Cluster.
     */
    connections: pulumi.Input<inputs.nfs.ClusterConnections>;
    /**
     * The location of the Network File Storage Cluster. Available locations: 'de/fra, 'de/txl, 'fr-par, 'gb-lhr, 'es/vit,
     * 'us/las, 'us/ewr, 'us/mci'
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the Network File Storage Cluster.
     */
    name?: pulumi.Input<string>;
    nfs?: pulumi.Input<inputs.nfs.ClusterNfs>;
    /**
     * The size of the Network File Storage Cluster. Minimum size is 2.
     */
    size: pulumi.Input<number>;
}
