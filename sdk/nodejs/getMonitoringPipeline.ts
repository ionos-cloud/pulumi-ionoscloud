// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The **Monitoring pipeline** datasource can be used to search for and return an existing Monitoring pipeline.
 * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
 *
 * > ⚠️  Only tokens are accepted for authorization in the **monitoring_pipeline** data source. Please ensure you are using tokens as other methods will not be valid.
 *
 * ## Example Usage
 *
 * ### By ID
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.getMonitoringPipeline({
 *     location: "de/txl",
 *     id: "pipeline_id",
 * });
 * ```
 *
 * ### By name
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.getMonitoringPipeline({
 *     location: "de/txl",
 *     name: "pipeline_name",
 * });
 * ```
 */
export function getMonitoringPipeline(args?: GetMonitoringPipelineArgs, opts?: pulumi.InvokeOptions): Promise<GetMonitoringPipelineResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ionoscloud:index/getMonitoringPipeline:getMonitoringPipeline", {
        "id": args.id,
        "location": args.location,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getMonitoringPipeline.
 */
export interface GetMonitoringPipelineArgs {
    /**
     * [string] The ID of the Monitoring pipeline you want to search for.
     */
    id?: string;
    /**
     * [string] The location of the Monitoring pipeline. Default is `de/fra`. It can be one of `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `fr/par`. If this is not set and if no value is provided for the `IONOS_API_URL` env var, the default `location` will be: `de/fra`.
     */
    location?: string;
    /**
     * [string] The name of the Monitoring pipeline you want to search for.
     *
     * Either `id` or `name` must be provided. If none, or both are provided, the datasource will return an error.
     */
    name?: string;
}

/**
 * A collection of values returned by getMonitoringPipeline.
 */
export interface GetMonitoringPipelineResult {
    readonly grafanaEndpoint: string;
    /**
     * The HTTP endpoint of the Monitoring instance.
     */
    readonly httpEndpoint: string;
    /**
     * The UUID of the Monitoring pipeline.
     */
    readonly id: string;
    readonly location?: string;
    /**
     * The name of the Monitoring pipeline.
     */
    readonly name: string;
}
/**
 * The **Monitoring pipeline** datasource can be used to search for and return an existing Monitoring pipeline.
 * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
 *
 * > ⚠️  Only tokens are accepted for authorization in the **monitoring_pipeline** data source. Please ensure you are using tokens as other methods will not be valid.
 *
 * ## Example Usage
 *
 * ### By ID
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.getMonitoringPipeline({
 *     location: "de/txl",
 *     id: "pipeline_id",
 * });
 * ```
 *
 * ### By name
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.getMonitoringPipeline({
 *     location: "de/txl",
 *     name: "pipeline_name",
 * });
 * ```
 */
export function getMonitoringPipelineOutput(args?: GetMonitoringPipelineOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetMonitoringPipelineResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("ionoscloud:index/getMonitoringPipeline:getMonitoringPipeline", {
        "id": args.id,
        "location": args.location,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getMonitoringPipeline.
 */
export interface GetMonitoringPipelineOutputArgs {
    /**
     * [string] The ID of the Monitoring pipeline you want to search for.
     */
    id?: pulumi.Input<string>;
    /**
     * [string] The location of the Monitoring pipeline. Default is `de/fra`. It can be one of `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `fr/par`. If this is not set and if no value is provided for the `IONOS_API_URL` env var, the default `location` will be: `de/fra`.
     */
    location?: pulumi.Input<string>;
    /**
     * [string] The name of the Monitoring pipeline you want to search for.
     *
     * Either `id` or `name` must be provided. If none, or both are provided, the datasource will return an error.
     */
    name?: pulumi.Input<string>;
}
