// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The Distribution data source can be used to search for and return an existing Distributions.
 * You can provide a string for the domain parameter which will be compared with provisioned Distributions.
 * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
 * When this happens, please refine your search and make sure that your resources have unique domains.
 *
 * ## Example Usage
 *
 * ### By Domain
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.getCdnDistribution({
 *     domain: "example.com",
 * });
 * ```
 *
 * ### By Domain with Partial Match
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.getCdnDistribution({
 *     domain: "example",
 *     partialMatch: true,
 * });
 * ```
 */
export function getCdnDistribution(args?: GetCdnDistributionArgs, opts?: pulumi.InvokeOptions): Promise<GetCdnDistributionResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ionoscloud:index/getCdnDistribution:getCdnDistribution", {
        "domain": args.domain,
        "id": args.id,
        "partialMatch": args.partialMatch,
    }, opts);
}

/**
 * A collection of arguments for invoking getCdnDistribution.
 */
export interface GetCdnDistributionArgs {
    /**
     * Domain of an existing distribution that you want to search for. Search by domain is case-insensitive. The whole resource domain is required if `partialMatch` parameter is not set to true.
     */
    domain?: string;
    /**
     * ID of the distribution you want to search for.
     */
    id?: string;
    /**
     * Whether partial matching is allowed or not when using domain argument. Default value is false.
     *
     * Either `domain` or `id` must be provided. If none, or both of `domain` and `id` are provided, the datasource will return an error.
     */
    partialMatch?: boolean;
}

/**
 * A collection of values returned by getCdnDistribution.
 */
export interface GetCdnDistributionResult {
    /**
     * The ID of the certificate to use for the distribution. You can create certificates with the certificate resource.
     */
    readonly certificateId: string;
    /**
     * The domain of the distribution.
     */
    readonly domain?: string;
    readonly id?: string;
    readonly partialMatch?: boolean;
    /**
     * IP of the distribution, it has to be included on the domain DNS Zone as A record.
     */
    readonly publicEndpointV4: string;
    /**
     * IP of the distribution, it has to be included on the domain DNS Zone as AAAA record.
     */
    readonly publicEndpointV6: string;
    /**
     * Unique resource identifier.
     */
    readonly resourceUrn: string;
    /**
     * The routing rules for the distribution.
     */
    readonly routingRules: outputs.GetCdnDistributionRoutingRule[];
}
/**
 * The Distribution data source can be used to search for and return an existing Distributions.
 * You can provide a string for the domain parameter which will be compared with provisioned Distributions.
 * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
 * When this happens, please refine your search and make sure that your resources have unique domains.
 *
 * ## Example Usage
 *
 * ### By Domain
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.getCdnDistribution({
 *     domain: "example.com",
 * });
 * ```
 *
 * ### By Domain with Partial Match
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.getCdnDistribution({
 *     domain: "example",
 *     partialMatch: true,
 * });
 * ```
 */
export function getCdnDistributionOutput(args?: GetCdnDistributionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCdnDistributionResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("ionoscloud:index/getCdnDistribution:getCdnDistribution", {
        "domain": args.domain,
        "id": args.id,
        "partialMatch": args.partialMatch,
    }, opts);
}

/**
 * A collection of arguments for invoking getCdnDistribution.
 */
export interface GetCdnDistributionOutputArgs {
    /**
     * Domain of an existing distribution that you want to search for. Search by domain is case-insensitive. The whole resource domain is required if `partialMatch` parameter is not set to true.
     */
    domain?: pulumi.Input<string>;
    /**
     * ID of the distribution you want to search for.
     */
    id?: pulumi.Input<string>;
    /**
     * Whether partial matching is allowed or not when using domain argument. Default value is false.
     *
     * Either `domain` or `id` must be provided. If none, or both of `domain` and `id` are provided, the datasource will return an error.
     */
    partialMatch?: pulumi.Input<boolean>;
}
