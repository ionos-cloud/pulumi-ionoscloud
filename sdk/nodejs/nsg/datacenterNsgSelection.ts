// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Links a Network Security Group to a IonosCloud datacenter. The datacenter can only have one linked NSG. To set a new NSG for the datacenter, the current one will be unlinked.
 *
 * ## Example Usage
 *
 * A Network Security Group can be linked to a `ionoscloud.compute.Datacenter` with this resource.
 * Deleting the resource will unlink the NSG from the datacenter.
 *
 * ### Select an external volume
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@ionos-cloud/sdk-pulumi";
 *
 * const example = new ionoscloud.compute.Datacenter("example", {
 *     name: "Datacenter Default NSG Example",
 *     location: "de/fra",
 * });
 * const exampleNsg = new ionoscloud.nsg.Nsg("example", {
 *     name: "NSG",
 *     description: "NSG",
 *     datacenterId: example.id,
 * });
 * const exampleDatacenterNsgSelection = new ionoscloud.nsg.DatacenterNsgSelection("example", {
 *     datacenterId: example.id,
 *     nsgId: exampleNsg.id,
 * });
 * ```
 */
export class DatacenterNsgSelection extends pulumi.CustomResource {
    /**
     * Get an existing DatacenterNsgSelection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatacenterNsgSelectionState, opts?: pulumi.CustomResourceOptions): DatacenterNsgSelection {
        return new DatacenterNsgSelection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:nsg/datacenterNsgSelection:DatacenterNsgSelection';

    /**
     * Returns true if the given object is an instance of DatacenterNsgSelection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatacenterNsgSelection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatacenterNsgSelection.__pulumiType;
    }

    /**
     * [string] The ID of a Virtual Data Center.
     */
    public readonly datacenterId!: pulumi.Output<string>;
    /**
     * [string] The ID of a Network Security Group.
     */
    public readonly nsgId!: pulumi.Output<string>;

    /**
     * Create a DatacenterNsgSelection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatacenterNsgSelectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatacenterNsgSelectionArgs | DatacenterNsgSelectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatacenterNsgSelectionState | undefined;
            resourceInputs["datacenterId"] = state ? state.datacenterId : undefined;
            resourceInputs["nsgId"] = state ? state.nsgId : undefined;
        } else {
            const args = argsOrState as DatacenterNsgSelectionArgs | undefined;
            if ((!args || args.datacenterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datacenterId'");
            }
            if ((!args || args.nsgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nsgId'");
            }
            resourceInputs["datacenterId"] = args ? args.datacenterId : undefined;
            resourceInputs["nsgId"] = args ? args.nsgId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatacenterNsgSelection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DatacenterNsgSelection resources.
 */
export interface DatacenterNsgSelectionState {
    /**
     * [string] The ID of a Virtual Data Center.
     */
    datacenterId?: pulumi.Input<string>;
    /**
     * [string] The ID of a Network Security Group.
     */
    nsgId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatacenterNsgSelection resource.
 */
export interface DatacenterNsgSelectionArgs {
    /**
     * [string] The ID of a Virtual Data Center.
     */
    datacenterId: pulumi.Input<string>;
    /**
     * [string] The ID of a Network Security Group.
     */
    nsgId: pulumi.Input<string>;
}
