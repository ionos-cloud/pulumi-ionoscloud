// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a **Network Security Group** on IonosCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = new ionoscloud.compute.Datacenter("example", {
 *     name: "Datacenter NSG Example",
 *     location: "de/txl",
 * });
 * const exampleNsg = new ionoscloud.nsg.Nsg("example", {
 *     name: "Example NSG",
 *     description: "Example NSG Description",
 *     datacenterId: example.id,
 * });
 * ```
 *
 * ## Import
 *
 * Resource Server can be imported using the `resource id` and the `datacenter id`, e.g.
 *
 * ```sh
 * $ pulumi import ionoscloud:nsg/nsg:Nsg mynsg datacenter uuid/nsg uuid
 * ```
 *
 * Or by using an `import` block. Here is an example that allows you to import the default created nsg into pulumi.
 *
 * hcl
 *
 * resource "ionoscloud_datacenter" "example" {
 *
 *   name            = "Datacenter NSG Example"
 *
 *   location        = "de/txl"
 *
 * }
 *
 * import {
 *
 *   to = ionoscloud_nsg.imported
 *
 *   id = "datacenter uuid/default nsg uuid"
 *
 * }
 *
 * resource "ionoscloud_nsg" "imported_default" {  # Imported here
 *
 *   datacenter_id     = ionoscloud_datacenter.example.id
 *
 * }
 */
export class Nsg extends pulumi.CustomResource {
    /**
     * Get an existing Nsg resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NsgState, opts?: pulumi.CustomResourceOptions): Nsg {
        return new Nsg(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:nsg/nsg:Nsg';

    /**
     * Returns true if the given object is an instance of Nsg.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Nsg {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Nsg.__pulumiType;
    }

    /**
     * [string] The ID of a Virtual Data Center.
     */
    public readonly datacenterId!: pulumi.Output<string>;
    /**
     * [string] Description for the Network Security Group.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * [string] The name of the Network Security Group.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * List of Firewall Rules that are part of the Network Security Group
     */
    public /*out*/ readonly ruleIds!: pulumi.Output<string[]>;

    /**
     * Create a Nsg resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NsgArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NsgArgs | NsgState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NsgState | undefined;
            resourceInputs["datacenterId"] = state ? state.datacenterId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ruleIds"] = state ? state.ruleIds : undefined;
        } else {
            const args = argsOrState as NsgArgs | undefined;
            if ((!args || args.datacenterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datacenterId'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            resourceInputs["datacenterId"] = args ? args.datacenterId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ruleIds"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Nsg.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Nsg resources.
 */
export interface NsgState {
    /**
     * [string] The ID of a Virtual Data Center.
     */
    datacenterId?: pulumi.Input<string>;
    /**
     * [string] Description for the Network Security Group.
     */
    description?: pulumi.Input<string>;
    /**
     * [string] The name of the Network Security Group.
     */
    name?: pulumi.Input<string>;
    /**
     * List of Firewall Rules that are part of the Network Security Group
     */
    ruleIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Nsg resource.
 */
export interface NsgArgs {
    /**
     * [string] The ID of a Virtual Data Center.
     */
    datacenterId: pulumi.Input<string>;
    /**
     * [string] Description for the Network Security Group.
     */
    description: pulumi.Input<string>;
    /**
     * [string] The name of the Network Security Group.
     */
    name?: pulumi.Input<string>;
}
