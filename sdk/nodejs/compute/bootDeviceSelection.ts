// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class BootDeviceSelection extends pulumi.CustomResource {
    /**
     * Get an existing BootDeviceSelection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BootDeviceSelectionState, opts?: pulumi.CustomResourceOptions): BootDeviceSelection {
        return new BootDeviceSelection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:compute/bootDeviceSelection:BootDeviceSelection';

    /**
     * Returns true if the given object is an instance of BootDeviceSelection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BootDeviceSelection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BootDeviceSelection.__pulumiType;
    }

    /**
     * ID of the entity to set as primary boot device. Possible boot devices are CDROM Images and Volumes. If omitted, server
     * will boot from PXE
     */
    public readonly bootDeviceId!: pulumi.Output<string | undefined>;
    /**
     * ID of the Datacenter that holds the server for which the boot volume is selected
     */
    public readonly datacenterId!: pulumi.Output<string>;
    /**
     * ID of the first attached volume of the Server, which will be the default boot volume.
     */
    public /*out*/ readonly defaultBootVolumeId!: pulumi.Output<string>;
    /**
     * ID of the Server for which the boot device will be selected.
     */
    public readonly serverId!: pulumi.Output<string>;

    /**
     * Create a BootDeviceSelection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BootDeviceSelectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BootDeviceSelectionArgs | BootDeviceSelectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BootDeviceSelectionState | undefined;
            resourceInputs["bootDeviceId"] = state ? state.bootDeviceId : undefined;
            resourceInputs["datacenterId"] = state ? state.datacenterId : undefined;
            resourceInputs["defaultBootVolumeId"] = state ? state.defaultBootVolumeId : undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
        } else {
            const args = argsOrState as BootDeviceSelectionArgs | undefined;
            if ((!args || args.datacenterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datacenterId'");
            }
            if ((!args || args.serverId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverId'");
            }
            resourceInputs["bootDeviceId"] = args ? args.bootDeviceId : undefined;
            resourceInputs["datacenterId"] = args ? args.datacenterId : undefined;
            resourceInputs["serverId"] = args ? args.serverId : undefined;
            resourceInputs["defaultBootVolumeId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BootDeviceSelection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BootDeviceSelection resources.
 */
export interface BootDeviceSelectionState {
    /**
     * ID of the entity to set as primary boot device. Possible boot devices are CDROM Images and Volumes. If omitted, server
     * will boot from PXE
     */
    bootDeviceId?: pulumi.Input<string>;
    /**
     * ID of the Datacenter that holds the server for which the boot volume is selected
     */
    datacenterId?: pulumi.Input<string>;
    /**
     * ID of the first attached volume of the Server, which will be the default boot volume.
     */
    defaultBootVolumeId?: pulumi.Input<string>;
    /**
     * ID of the Server for which the boot device will be selected.
     */
    serverId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BootDeviceSelection resource.
 */
export interface BootDeviceSelectionArgs {
    /**
     * ID of the entity to set as primary boot device. Possible boot devices are CDROM Images and Volumes. If omitted, server
     * will boot from PXE
     */
    bootDeviceId?: pulumi.Input<string>;
    /**
     * ID of the Datacenter that holds the server for which the boot volume is selected
     */
    datacenterId: pulumi.Input<string>;
    /**
     * ID of the Server for which the boot device will be selected.
     */
    serverId: pulumi.Input<string>;
}
