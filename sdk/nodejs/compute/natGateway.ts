// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a **Nat Gateway** on IonosCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = new ionoscloud.compute.Datacenter("example", {
 *     name: "Datacenter Example",
 *     location: "us/las",
 *     description: "Datacenter Description",
 *     secAuthProtection: false,
 * });
 * const exampleIPBlock = new ionoscloud.compute.IPBlock("example", {
 *     location: "us/las",
 *     size: 2,
 *     name: "IP Block Example",
 * });
 * const exampleLan = new ionoscloud.compute.Lan("example", {
 *     datacenterId: example.id,
 *     "public": true,
 *     name: "Lan Example",
 * });
 * const exampleNatGateway = new ionoscloud.compute.NatGateway("example", {
 *     datacenterId: example.id,
 *     name: "example",
 *     publicIps: [
 *         exampleIPBlock.ips[0],
 *         exampleIPBlock.ips[1],
 *     ],
 *     lans: [{
 *         id: exampleLan.id,
 *         gatewayIps: ["10.11.2.5"],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * A Nat Gateway resource can be imported using its `resource id` and the `datacenter id`, e.g.
 *
 * ```sh
 * $ pulumi import ionoscloud:compute/natGateway:NatGateway my_natgateway datacenter uuid/nat gateway uuid
 * ```
 */
export class NatGateway extends pulumi.CustomResource {
    /**
     * Get an existing NatGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NatGatewayState, opts?: pulumi.CustomResourceOptions): NatGateway {
        return new NatGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:compute/natGateway:NatGateway';

    /**
     * Returns true if the given object is an instance of NatGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NatGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NatGateway.__pulumiType;
    }

    /**
     * [string] A Datacenter's UUID.
     */
    public readonly datacenterId!: pulumi.Output<string>;
    /**
     * [list] A list of Local Area Networks the node pool should be part of.
     */
    public readonly lans!: pulumi.Output<outputs.compute.NatGatewayLan[]>;
    /**
     * [string] Name of the NAT gateway.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * [list]Collection of public IP addresses of the NAT gateway. Should be customer reserved IP addresses in that location.
     */
    public readonly publicIps!: pulumi.Output<string[]>;

    /**
     * Create a NatGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NatGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NatGatewayArgs | NatGatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NatGatewayState | undefined;
            resourceInputs["datacenterId"] = state ? state.datacenterId : undefined;
            resourceInputs["lans"] = state ? state.lans : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["publicIps"] = state ? state.publicIps : undefined;
        } else {
            const args = argsOrState as NatGatewayArgs | undefined;
            if ((!args || args.datacenterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datacenterId'");
            }
            if ((!args || args.lans === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lans'");
            }
            if ((!args || args.publicIps === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publicIps'");
            }
            resourceInputs["datacenterId"] = args ? args.datacenterId : undefined;
            resourceInputs["lans"] = args ? args.lans : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicIps"] = args ? args.publicIps : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NatGateway.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NatGateway resources.
 */
export interface NatGatewayState {
    /**
     * [string] A Datacenter's UUID.
     */
    datacenterId?: pulumi.Input<string>;
    /**
     * [list] A list of Local Area Networks the node pool should be part of.
     */
    lans?: pulumi.Input<pulumi.Input<inputs.compute.NatGatewayLan>[]>;
    /**
     * [string] Name of the NAT gateway.
     */
    name?: pulumi.Input<string>;
    /**
     * [list]Collection of public IP addresses of the NAT gateway. Should be customer reserved IP addresses in that location.
     */
    publicIps?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a NatGateway resource.
 */
export interface NatGatewayArgs {
    /**
     * [string] A Datacenter's UUID.
     */
    datacenterId: pulumi.Input<string>;
    /**
     * [list] A list of Local Area Networks the node pool should be part of.
     */
    lans: pulumi.Input<pulumi.Input<inputs.compute.NatGatewayLan>[]>;
    /**
     * [string] Name of the NAT gateway.
     */
    name?: pulumi.Input<string>;
    /**
     * [list]Collection of public IP addresses of the NAT gateway. Should be customer reserved IP addresses in that location.
     */
    publicIps: pulumi.Input<pulumi.Input<string>[]>;
}
