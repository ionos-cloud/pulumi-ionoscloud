// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * The **Image data source** can be used to search for and return an existing image which can then be used to provision a server.\
 * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
 * When this happens, please refine your search string so that it is specific enough to return only one result. In case multiple matches are found, enable debug(`TF_LOG=debug`) to show the name and location of the images.
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const cdrom = ionoscloud.compute.getImage({
 *     imageAlias: "ubuntu:latest_iso",
 *     type: "CDROM",
 *     location: "de/txl",
 *     cloudInit: "NONE",
 * });
 * ```
 * Finds an image with alias `ubuntu:latest_iso`, in location `de/txl`, that does not support `cloudInit` and is of type `CDROM`.
 *
 * ### Additional Examples
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.compute.getImage({
 *     imageAlias: "ubuntu:latest",
 *     location: "de/txl",
 * });
 * ```
 *
 * Finds an image with alias `ubuntu:latest` in location `de/txl`. Uses exact matching on both fields.
 *
 * ### Additional Examples
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.compute.getImage({
 *     type: "HDD",
 *     cloudInit: "V1",
 *     imageAlias: "ubuntu:latest",
 *     location: "us/ewr",
 * });
 * ```
 * Finds an image named `ubuntu-20.04.6` in location `de/txl`. Uses exact matching.
 */
export function getImage(args?: GetImageArgs, opts?: pulumi.InvokeOptions): Promise<GetImageResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ionoscloud:compute/getImage:getImage", {
        "cloudInit": args.cloudInit,
        "description": args.description,
        "imageAlias": args.imageAlias,
        "location": args.location,
        "name": args.name,
        "type": args.type,
        "version": args.version,
    }, opts);
}

/**
 * A collection of arguments for invoking getImage.
 */
export interface GetImageArgs {
    /**
     * Cloud init compatibility ("NONE" or "V1"). Exact match.
     */
    cloudInit?: string;
    /**
     * description of the image
     */
    description?: string;
    /**
     * Image alias of the image you are searching for. Exact match. E.g. =`centos:latest`, `ubuntu:latest`
     */
    imageAlias?: string;
    /**
     * Id of the existing image's location. Exact match. Possible values: `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `us/ewr`, `us/las`
     */
    location?: string;
    /**
     * Name of an existing image that you want to search for. It will return an exact match if one exists, otherwise it will retrieve partial matches.
     */
    name?: string;
    /**
     * The image type, HDD or CD-ROM. Exact match.
     */
    type?: string;
    /**
     * The version of the image that you want to search for.
     *
     * If both "name" and "version" are provided the plugin will concatenate the two strings in this format [name]-[version].
     * The resulting string will be used to search for an exact match. An error will be thrown if one is not found.
     */
    version?: string;
}

/**
 * A collection of values returned by getImage.
 */
export interface GetImageResult {
    /**
     * Cloud init compatibility
     */
    readonly cloudInit: string;
    /**
     * Is capable of CPU hot plug (no reboot required)
     */
    readonly cpuHotPlug: boolean;
    /**
     * Is capable of CPU hot unplug (no reboot required)
     */
    readonly cpuHotUnplug: boolean;
    /**
     * description of the image
     */
    readonly description: string;
    /**
     * Is capable of SCSI drive hot plug (no reboot required)
     */
    readonly discScsiHotPlug: boolean;
    /**
     * Is capable of SCSI drive hot unplug (no reboot required)
     */
    readonly discScsiHotUnplug: boolean;
    /**
     * Is capable of Virt-IO drive hot plug (no reboot required)
     */
    readonly discVirtioHotPlug: boolean;
    /**
     * Is capable of Virt-IO drive hot unplug (no reboot required)
     */
    readonly discVirtioHotUnplug: boolean;
    /**
     * Indicates if the serial ID of the disk attached to the server will be exposed or not.
     */
    readonly exposeSerial: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly imageAlias: string;
    /**
     * List of image aliases mapped for this Image
     */
    readonly imageAliases: string[];
    /**
     * OS type of this Image
     */
    readonly licenceType: string;
    /**
     * Location of that image/snapshot.
     */
    readonly location: string;
    /**
     * name of the image
     */
    readonly name: string;
    /**
     * Is capable of nic hot plug (no reboot required)
     */
    readonly nicHotPlug: boolean;
    /**
     * Is capable of nic hot unplug (no reboot required)
     */
    readonly nicHotUnplug: boolean;
    /**
     * Indicates if the image is part of the public repository or not
     */
    readonly public: boolean;
    /**
     * Is capable of memory hot plug (no reboot required)
     */
    readonly ramHotPlug: boolean;
    /**
     * Is capable of memory hot unplug (no reboot required)
     */
    readonly ramHotUnplug: boolean;
    /**
     * The size of the image in GB
     */
    readonly size: number;
    /**
     * This indicates the type of image
     */
    readonly type: string;
    readonly version: string;
}
/**
 * The **Image data source** can be used to search for and return an existing image which can then be used to provision a server.\
 * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
 * When this happens, please refine your search string so that it is specific enough to return only one result. In case multiple matches are found, enable debug(`TF_LOG=debug`) to show the name and location of the images.
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const cdrom = ionoscloud.compute.getImage({
 *     imageAlias: "ubuntu:latest_iso",
 *     type: "CDROM",
 *     location: "de/txl",
 *     cloudInit: "NONE",
 * });
 * ```
 * Finds an image with alias `ubuntu:latest_iso`, in location `de/txl`, that does not support `cloudInit` and is of type `CDROM`.
 *
 * ### Additional Examples
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.compute.getImage({
 *     imageAlias: "ubuntu:latest",
 *     location: "de/txl",
 * });
 * ```
 *
 * Finds an image with alias `ubuntu:latest` in location `de/txl`. Uses exact matching on both fields.
 *
 * ### Additional Examples
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.compute.getImage({
 *     type: "HDD",
 *     cloudInit: "V1",
 *     imageAlias: "ubuntu:latest",
 *     location: "us/ewr",
 * });
 * ```
 * Finds an image named `ubuntu-20.04.6` in location `de/txl`. Uses exact matching.
 */
export function getImageOutput(args?: GetImageOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetImageResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("ionoscloud:compute/getImage:getImage", {
        "cloudInit": args.cloudInit,
        "description": args.description,
        "imageAlias": args.imageAlias,
        "location": args.location,
        "name": args.name,
        "type": args.type,
        "version": args.version,
    }, opts);
}

/**
 * A collection of arguments for invoking getImage.
 */
export interface GetImageOutputArgs {
    /**
     * Cloud init compatibility ("NONE" or "V1"). Exact match.
     */
    cloudInit?: pulumi.Input<string>;
    /**
     * description of the image
     */
    description?: pulumi.Input<string>;
    /**
     * Image alias of the image you are searching for. Exact match. E.g. =`centos:latest`, `ubuntu:latest`
     */
    imageAlias?: pulumi.Input<string>;
    /**
     * Id of the existing image's location. Exact match. Possible values: `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `us/ewr`, `us/las`
     */
    location?: pulumi.Input<string>;
    /**
     * Name of an existing image that you want to search for. It will return an exact match if one exists, otherwise it will retrieve partial matches.
     */
    name?: pulumi.Input<string>;
    /**
     * The image type, HDD or CD-ROM. Exact match.
     */
    type?: pulumi.Input<string>;
    /**
     * The version of the image that you want to search for.
     *
     * If both "name" and "version" are provided the plugin will concatenate the two strings in this format [name]-[version].
     * The resulting string will be used to search for an exact match. An error will be thrown if one is not found.
     */
    version?: pulumi.Input<string>;
}
