// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Virtual **Data Center** on IonosCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = new ionoscloud.compute.Datacenter("example", {
 *     name: "Datacenter Example",
 *     location: "us/las",
 *     description: "datacenter description",
 *     secAuthProtection: false,
 * });
 * ```
 *
 * ## Attaching a NSG to a Datacenter
 *
 * #### A single Network Security Group can be attached at any time to a Datacenter. To do this, use the `ionoscloud.nsg.DatacenterNsgSelection` and provide the IDs of the NSG and Datacenter to link them.
 * #### Deleting the resource or setting the empty string for the `nsgId` field will de-attach any previously linked NSG from the Datacenter.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = new ionoscloud.compute.Datacenter("example", {
 *     name: "Datacenter NSG Example",
 *     location: "de/txl",
 * });
 * const exampleNsg = new ionoscloud.nsg.Nsg("example", {
 *     name: "Example NSG",
 *     description: "Example NSG Description",
 *     datacenterId: example.id,
 * });
 * const exampleDatacenterNsgSelection = new ionoscloud.nsg.DatacenterNsgSelection("example", {
 *     datacenterId: example.id,
 *     nsgId: exampleNsg.id,
 * });
 * ```
 *
 * ## Import
 *
 * Resource Datacenter can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import ionoscloud:compute/datacenter:Datacenter mydc datacenter uuid
 * ```
 */
export class Datacenter extends pulumi.CustomResource {
    /**
     * Get an existing Datacenter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatacenterState, opts?: pulumi.CustomResourceOptions): Datacenter {
        return new Datacenter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:compute/datacenter:Datacenter';

    /**
     * Returns true if the given object is an instance of Datacenter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Datacenter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Datacenter.__pulumiType;
    }

    /**
     * Array of features and CPU families available in a location
     */
    public /*out*/ readonly cpuArchitectures!: pulumi.Output<outputs.compute.DatacenterCpuArchitecture[]>;
    /**
     * [string] Description for the Virtual Data Center.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * List of features supported by the location this data center is part of
     */
    public /*out*/ readonly features!: pulumi.Output<string[]>;
    /**
     * The automatically-assigned /56 IPv6 CIDR block if IPv6 is enabled on this virtual data center
     */
    public /*out*/ readonly ipv6CidrBlock!: pulumi.Output<string>;
    /**
     * [string] The regional location where the Virtual Data Center will be created. This argument is immutable.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * [string] The name of the Virtual Data Center.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * [bool] Boolean value representing if the data center requires extra protection e.g. two factor protection
     */
    public readonly secAuthProtection!: pulumi.Output<boolean | undefined>;
    /**
     * The version of that Data Center. Gets incremented with every change
     */
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a Datacenter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatacenterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatacenterArgs | DatacenterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatacenterState | undefined;
            resourceInputs["cpuArchitectures"] = state ? state.cpuArchitectures : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["features"] = state ? state.features : undefined;
            resourceInputs["ipv6CidrBlock"] = state ? state.ipv6CidrBlock : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["secAuthProtection"] = state ? state.secAuthProtection : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as DatacenterArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["secAuthProtection"] = args ? args.secAuthProtection : undefined;
            resourceInputs["cpuArchitectures"] = undefined /*out*/;
            resourceInputs["features"] = undefined /*out*/;
            resourceInputs["ipv6CidrBlock"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Datacenter.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Datacenter resources.
 */
export interface DatacenterState {
    /**
     * Array of features and CPU families available in a location
     */
    cpuArchitectures?: pulumi.Input<pulumi.Input<inputs.compute.DatacenterCpuArchitecture>[]>;
    /**
     * [string] Description for the Virtual Data Center.
     */
    description?: pulumi.Input<string>;
    /**
     * List of features supported by the location this data center is part of
     */
    features?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The automatically-assigned /56 IPv6 CIDR block if IPv6 is enabled on this virtual data center
     */
    ipv6CidrBlock?: pulumi.Input<string>;
    /**
     * [string] The regional location where the Virtual Data Center will be created. This argument is immutable.
     */
    location?: pulumi.Input<string>;
    /**
     * [string] The name of the Virtual Data Center.
     */
    name?: pulumi.Input<string>;
    /**
     * [bool] Boolean value representing if the data center requires extra protection e.g. two factor protection
     */
    secAuthProtection?: pulumi.Input<boolean>;
    /**
     * The version of that Data Center. Gets incremented with every change
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Datacenter resource.
 */
export interface DatacenterArgs {
    /**
     * [string] Description for the Virtual Data Center.
     */
    description?: pulumi.Input<string>;
    /**
     * [string] The regional location where the Virtual Data Center will be created. This argument is immutable.
     */
    location: pulumi.Input<string>;
    /**
     * [string] The name of the Virtual Data Center.
     */
    name?: pulumi.Input<string>;
    /**
     * [bool] Boolean value representing if the data center requires extra protection e.g. two factor protection
     */
    secAuthProtection?: pulumi.Input<boolean>;
}
