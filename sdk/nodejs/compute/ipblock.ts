// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages **IP Blocks** on IonosCloud. IP Blocks contain reserved public IP addresses that can be assigned servers or other resources.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = new ionoscloud.compute.IPBlock("example", {
 *     location: "us/las",
 *     size: 1,
 * });
 * ```
 *
 * ## Import
 *
 * Resource Ipblock can be imported using the `resource id`, e.g.
 *
 * ```sh
 * $ pulumi import ionoscloud:compute/iPBlock:IPBlock myipblock {ipblock uuid}
 * ```
 */
export class IPBlock extends pulumi.CustomResource {
    /**
     * Get an existing IPBlock resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IPBlockState, opts?: pulumi.CustomResourceOptions): IPBlock {
        return new IPBlock(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:compute/iPBlock:IPBlock';

    /**
     * Returns true if the given object is an instance of IPBlock.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IPBlock {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IPBlock.__pulumiType;
    }

    /**
     * Read-Only attribute. Lists consumption detail of an individual ip
     */
    public readonly ipConsumers!: pulumi.Output<outputs.compute.IPBlockIpConsumer[]>;
    /**
     * [integer] The list of IP addresses associated with this block.
     */
    public /*out*/ readonly ips!: pulumi.Output<string[]>;
    /**
     * [string] The regional location for this IP Block: us/las, us/ewr, de/fra, de/fkb.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * [string] The name of Ip Block
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * [integer] The number of IP addresses to reserve for this block.
     */
    public readonly size!: pulumi.Output<number>;

    /**
     * Create a IPBlock resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IPBlockArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IPBlockArgs | IPBlockState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IPBlockState | undefined;
            resourceInputs["ipConsumers"] = state ? state.ipConsumers : undefined;
            resourceInputs["ips"] = state ? state.ips : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
        } else {
            const args = argsOrState as IPBlockArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["ipConsumers"] = args ? args.ipConsumers : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["ips"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IPBlock.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IPBlock resources.
 */
export interface IPBlockState {
    /**
     * Read-Only attribute. Lists consumption detail of an individual ip
     */
    ipConsumers?: pulumi.Input<pulumi.Input<inputs.compute.IPBlockIpConsumer>[]>;
    /**
     * [integer] The list of IP addresses associated with this block.
     */
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * [string] The regional location for this IP Block: us/las, us/ewr, de/fra, de/fkb.
     */
    location?: pulumi.Input<string>;
    /**
     * [string] The name of Ip Block
     */
    name?: pulumi.Input<string>;
    /**
     * [integer] The number of IP addresses to reserve for this block.
     */
    size?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a IPBlock resource.
 */
export interface IPBlockArgs {
    /**
     * Read-Only attribute. Lists consumption detail of an individual ip
     */
    ipConsumers?: pulumi.Input<pulumi.Input<inputs.compute.IPBlockIpConsumer>[]>;
    /**
     * [string] The regional location for this IP Block: us/las, us/ewr, de/fra, de/fkb.
     */
    location: pulumi.Input<string>;
    /**
     * [string] The name of Ip Block
     */
    name?: pulumi.Input<string>;
    /**
     * [integer] The number of IP addresses to reserve for this block.
     */
    size: pulumi.Input<number>;
}
