// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a **VCPU Server** on IonosCloud.
 *
 * ## Example Usage
 *
 * ### VCPU Server
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 * import * as random from "@pulumi/random";
 *
 * const example = ionoscloud.compute.getImage({
 *     type: "HDD",
 *     imageAlias: "ubuntu:latest",
 *     location: "us/las",
 * });
 * const exampleDatacenter = new ionoscloud.compute.Datacenter("example", {
 *     name: "Datacenter Example",
 *     location: "de/txl",
 *     description: "Datacenter Description",
 *     secAuthProtection: false,
 * });
 * const exampleLan = new ionoscloud.compute.Lan("example", {
 *     datacenterId: exampleDatacenter.id,
 *     "public": true,
 *     name: "Lan Example",
 * });
 * const exampleIPBlock = new ionoscloud.compute.IPBlock("example", {
 *     location: exampleDatacenter.location,
 *     size: 4,
 *     name: "IP Block Example",
 * });
 * const serverImagePassword = new random.index.Password("server_image_password", {
 *     length: 16,
 *     special: false,
 * });
 * const exampleVCPUServer = new ionoscloud.compute.VCPUServer("example", {
 *     name: "VCPU Server Example",
 *     datacenterId: exampleDatacenter.id,
 *     cores: 1,
 *     ram: 1024,
 *     availabilityZone: "ZONE_1",
 *     imageName: example.then(example => example.id),
 *     imagePassword: serverImagePassword.result,
 *     volume: {
 *         name: "system",
 *         size: 5,
 *         diskType: "SSD Standard",
 *         userData: "foo",
 *         bus: "VIRTIO",
 *         availabilityZone: "ZONE_1",
 *     },
 *     nic: {
 *         lan: exampleLan.id,
 *         name: "system",
 *         dhcp: true,
 *         firewallActive: true,
 *         firewallType: "BIDIRECTIONAL",
 *         ips: [
 *             exampleIPBlock.ips[0],
 *             exampleIPBlock.ips[1],
 *         ],
 *         firewalls: [{
 *             protocol: "TCP",
 *             name: "SSH",
 *             portRangeStart: 22,
 *             portRangeEnd: 22,
 *             sourceMac: "00:0a:95:9d:68:17",
 *             sourceIp: exampleIPBlock.ips[2],
 *             targetIp: exampleIPBlock.ips[3],
 *             type: "EGRESS",
 *         }],
 *     },
 *     labels: [
 *         {
 *             key: "labelkey1",
 *             value: "labelvalue1",
 *         },
 *         {
 *             key: "labelkey2",
 *             value: "labelvalue2",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Notes
 *
 * Please note that for any secondary volume, you need to set the **licence_type** property to **UNKNOWN**
 *
 * ⚠️ **Note:** Important for deleting an `firewall` rule from within a list of inline resources defined on the same nic. There is one limitation to removing one firewall rule
 * from the middle of the list of `firewall` rules. The existing rules will be modified and the last one will be deleted.
 *
 * ## Import
 *
 * Resource VCPU Server can be imported using the `resource id` and the `datacenter id`, for example, passing only resource id and datacenter id means that the first nic found linked to the server will be attached to it.
 *
 * ```sh
 * $ pulumi import ionoscloud:compute/vCPUServer:VCPUServer myserver datacenter uuid/server uuid
 * ```
 *
 * Optionally, you can pass `primary_nic` and `firewallrule_id` so pulumi will know to import also the first nic and firewall rule (if it exists on the server):
 *
 * ```sh
 * $ pulumi import ionoscloud:compute/vCPUServer:VCPUServer myserver datacenter uuid/server uuid/primary nic id/firewall rule id
 * ```
 */
export class VCPUServer extends pulumi.CustomResource {
    /**
     * Get an existing VCPUServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VCPUServerState, opts?: pulumi.CustomResourceOptions): VCPUServer {
        return new VCPUServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:compute/vCPUServer:VCPUServer';

    /**
     * Returns true if the given object is an instance of VCPUServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VCPUServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VCPUServer.__pulumiType;
    }

    /**
     * [string] The availability zone in which the server should exist. E.g: `AUTO`, `ZONE_1`, `ZONE_2`. This property is immutable.
     */
    public readonly availabilityZone!: pulumi.Output<string>;
    /**
     * ***DEPRECATED*** Please refer to ionoscloud.compute.BootDeviceSelection (Optional)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the ionoscloud.compute.getImage data source.
     *
     * @deprecated Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
     */
    public readonly bootCdrom!: pulumi.Output<string>;
    /**
     * [string] The image or snapshot UUID / name. May also be an image alias. It is required if `licenceType` is not provided.
     */
    public readonly bootImage!: pulumi.Output<string>;
    /**
     * The associated boot volume.
     */
    public /*out*/ readonly bootVolume!: pulumi.Output<string>;
    /**
     * [integer] Number of server CPU cores.
     */
    public readonly cores!: pulumi.Output<number>;
    public /*out*/ readonly cpuFamily!: pulumi.Output<string>;
    /**
     * [string] The ID of a Virtual Data Center.
     */
    public readonly datacenterId!: pulumi.Output<string>;
    /**
     * The associated firewall rule.
     */
    public /*out*/ readonly firewallruleId!: pulumi.Output<string>;
    /**
     * The associated firewall rules.
     */
    public readonly firewallruleIds!: pulumi.Output<string[]>;
    /**
     * (Computed)[string] The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licenceType` is not provided. Attribute is immutable.
     */
    public readonly imageName!: pulumi.Output<string>;
    /**
     * [string] The password for the image.
     */
    public readonly imagePassword!: pulumi.Output<string>;
    /**
     * A list with the IDs for the volumes that are defined inside the server resource.
     */
    public /*out*/ readonly inlineVolumeIds!: pulumi.Output<string[]>;
    /**
     * A label can be seen as an object with only two required fields: `key` and `value`, both of the `string` type. Please check the example presented above to see how a `label` can be used in the plan. A server can have multiple labels.
     */
    public readonly labels!: pulumi.Output<outputs.compute.VCPUServerLabel[] | undefined>;
    /**
     * [string] The name of the server.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * See the Nic section.
     */
    public readonly nic!: pulumi.Output<outputs.compute.VCPUServerNic | undefined>;
    /**
     * The associated IP address.
     */
    public /*out*/ readonly primaryIp!: pulumi.Output<string>;
    /**
     * The associated NIC.
     */
    public /*out*/ readonly primaryNic!: pulumi.Output<string>;
    /**
     * [integer] The amount of memory for the server in MB.
     */
    public readonly ram!: pulumi.Output<number>;
    /**
     * The list of Security Group IDs for the resource.
     *
     * > **⚠ WARNING**
     * >
     * > sshKeys field is immutable.
     */
    public readonly securityGroupsIds!: pulumi.Output<string[] | undefined>;
    /**
     * [list] Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is used for the volume creation. Does not support `~` expansion to homedir in the given path.
     */
    public readonly sshKeys!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Sets the power state of the vcpu server. Possible values: `RUNNING` or `SHUTOFF`.
     */
    public readonly vmState!: pulumi.Output<string>;
    /**
     * See the Volume section.
     */
    public readonly volume!: pulumi.Output<outputs.compute.VCPUServerVolume>;

    /**
     * Create a VCPUServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VCPUServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VCPUServerArgs | VCPUServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VCPUServerState | undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["bootCdrom"] = state ? state.bootCdrom : undefined;
            resourceInputs["bootImage"] = state ? state.bootImage : undefined;
            resourceInputs["bootVolume"] = state ? state.bootVolume : undefined;
            resourceInputs["cores"] = state ? state.cores : undefined;
            resourceInputs["cpuFamily"] = state ? state.cpuFamily : undefined;
            resourceInputs["datacenterId"] = state ? state.datacenterId : undefined;
            resourceInputs["firewallruleId"] = state ? state.firewallruleId : undefined;
            resourceInputs["firewallruleIds"] = state ? state.firewallruleIds : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["imageName"] = state ? state.imageName : undefined;
            resourceInputs["imagePassword"] = state ? state.imagePassword : undefined;
            resourceInputs["inlineVolumeIds"] = state ? state.inlineVolumeIds : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nic"] = state ? state.nic : undefined;
            resourceInputs["primaryIp"] = state ? state.primaryIp : undefined;
            resourceInputs["primaryNic"] = state ? state.primaryNic : undefined;
            resourceInputs["ram"] = state ? state.ram : undefined;
            resourceInputs["securityGroupsIds"] = state ? state.securityGroupsIds : undefined;
            resourceInputs["sshKeys"] = state ? state.sshKeys : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vmState"] = state ? state.vmState : undefined;
            resourceInputs["volume"] = state ? state.volume : undefined;
        } else {
            const args = argsOrState as VCPUServerArgs | undefined;
            if ((!args || args.cores === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cores'");
            }
            if ((!args || args.datacenterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datacenterId'");
            }
            if ((!args || args.ram === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ram'");
            }
            if ((!args || args.volume === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volume'");
            }
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["bootCdrom"] = args ? args.bootCdrom : undefined;
            resourceInputs["bootImage"] = args ? args.bootImage : undefined;
            resourceInputs["cores"] = args ? args.cores : undefined;
            resourceInputs["datacenterId"] = args ? args.datacenterId : undefined;
            resourceInputs["firewallruleIds"] = args ? args.firewallruleIds : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["imageName"] = args ? args.imageName : undefined;
            resourceInputs["imagePassword"] = args?.imagePassword ? pulumi.secret(args.imagePassword) : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nic"] = args ? args.nic : undefined;
            resourceInputs["ram"] = args ? args.ram : undefined;
            resourceInputs["securityGroupsIds"] = args ? args.securityGroupsIds : undefined;
            resourceInputs["sshKeys"] = args ? args.sshKeys : undefined;
            resourceInputs["vmState"] = args ? args.vmState : undefined;
            resourceInputs["volume"] = args ? args.volume : undefined;
            resourceInputs["bootVolume"] = undefined /*out*/;
            resourceInputs["cpuFamily"] = undefined /*out*/;
            resourceInputs["firewallruleId"] = undefined /*out*/;
            resourceInputs["inlineVolumeIds"] = undefined /*out*/;
            resourceInputs["primaryIp"] = undefined /*out*/;
            resourceInputs["primaryNic"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["imagePassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(VCPUServer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VCPUServer resources.
 */
export interface VCPUServerState {
    /**
     * [string] The availability zone in which the server should exist. E.g: `AUTO`, `ZONE_1`, `ZONE_2`. This property is immutable.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * ***DEPRECATED*** Please refer to ionoscloud.compute.BootDeviceSelection (Optional)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the ionoscloud.compute.getImage data source.
     *
     * @deprecated Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
     */
    bootCdrom?: pulumi.Input<string>;
    /**
     * [string] The image or snapshot UUID / name. May also be an image alias. It is required if `licenceType` is not provided.
     */
    bootImage?: pulumi.Input<string>;
    /**
     * The associated boot volume.
     */
    bootVolume?: pulumi.Input<string>;
    /**
     * [integer] Number of server CPU cores.
     */
    cores?: pulumi.Input<number>;
    cpuFamily?: pulumi.Input<string>;
    /**
     * [string] The ID of a Virtual Data Center.
     */
    datacenterId?: pulumi.Input<string>;
    /**
     * The associated firewall rule.
     */
    firewallruleId?: pulumi.Input<string>;
    /**
     * The associated firewall rules.
     */
    firewallruleIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Computed)[string] The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
     */
    hostname?: pulumi.Input<string>;
    /**
     * [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licenceType` is not provided. Attribute is immutable.
     */
    imageName?: pulumi.Input<string>;
    /**
     * [string] The password for the image.
     */
    imagePassword?: pulumi.Input<string>;
    /**
     * A list with the IDs for the volumes that are defined inside the server resource.
     */
    inlineVolumeIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A label can be seen as an object with only two required fields: `key` and `value`, both of the `string` type. Please check the example presented above to see how a `label` can be used in the plan. A server can have multiple labels.
     */
    labels?: pulumi.Input<pulumi.Input<inputs.compute.VCPUServerLabel>[]>;
    /**
     * [string] The name of the server.
     */
    name?: pulumi.Input<string>;
    /**
     * See the Nic section.
     */
    nic?: pulumi.Input<inputs.compute.VCPUServerNic>;
    /**
     * The associated IP address.
     */
    primaryIp?: pulumi.Input<string>;
    /**
     * The associated NIC.
     */
    primaryNic?: pulumi.Input<string>;
    /**
     * [integer] The amount of memory for the server in MB.
     */
    ram?: pulumi.Input<number>;
    /**
     * The list of Security Group IDs for the resource.
     *
     * > **⚠ WARNING**
     * >
     * > sshKeys field is immutable.
     */
    securityGroupsIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * [list] Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is used for the volume creation. Does not support `~` expansion to homedir in the given path.
     */
    sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
    /**
     * Sets the power state of the vcpu server. Possible values: `RUNNING` or `SHUTOFF`.
     */
    vmState?: pulumi.Input<string>;
    /**
     * See the Volume section.
     */
    volume?: pulumi.Input<inputs.compute.VCPUServerVolume>;
}

/**
 * The set of arguments for constructing a VCPUServer resource.
 */
export interface VCPUServerArgs {
    /**
     * [string] The availability zone in which the server should exist. E.g: `AUTO`, `ZONE_1`, `ZONE_2`. This property is immutable.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * ***DEPRECATED*** Please refer to ionoscloud.compute.BootDeviceSelection (Optional)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the ionoscloud.compute.getImage data source.
     *
     * @deprecated Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server.
     */
    bootCdrom?: pulumi.Input<string>;
    /**
     * [string] The image or snapshot UUID / name. May also be an image alias. It is required if `licenceType` is not provided.
     */
    bootImage?: pulumi.Input<string>;
    /**
     * [integer] Number of server CPU cores.
     */
    cores: pulumi.Input<number>;
    /**
     * [string] The ID of a Virtual Data Center.
     */
    datacenterId: pulumi.Input<string>;
    /**
     * The associated firewall rules.
     */
    firewallruleIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Computed)[string] The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
     */
    hostname?: pulumi.Input<string>;
    /**
     * [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licenceType` is not provided. Attribute is immutable.
     */
    imageName?: pulumi.Input<string>;
    /**
     * [string] The password for the image.
     */
    imagePassword?: pulumi.Input<string>;
    /**
     * A label can be seen as an object with only two required fields: `key` and `value`, both of the `string` type. Please check the example presented above to see how a `label` can be used in the plan. A server can have multiple labels.
     */
    labels?: pulumi.Input<pulumi.Input<inputs.compute.VCPUServerLabel>[]>;
    /**
     * [string] The name of the server.
     */
    name?: pulumi.Input<string>;
    /**
     * See the Nic section.
     */
    nic?: pulumi.Input<inputs.compute.VCPUServerNic>;
    /**
     * [integer] The amount of memory for the server in MB.
     */
    ram: pulumi.Input<number>;
    /**
     * The list of Security Group IDs for the resource.
     *
     * > **⚠ WARNING**
     * >
     * > sshKeys field is immutable.
     */
    securityGroupsIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * [list] Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is used for the volume creation. Does not support `~` expansion to homedir in the given path.
     */
    sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Sets the power state of the vcpu server. Possible values: `RUNNING` or `SHUTOFF`.
     */
    vmState?: pulumi.Input<string>;
    /**
     * See the Volume section.
     */
    volume: pulumi.Input<inputs.compute.VCPUServerVolume>;
}
