// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Crossconnect extends pulumi.CustomResource {
    /**
     * Get an existing Crossconnect resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CrossconnectState, opts?: pulumi.CustomResourceOptions): Crossconnect {
        return new Crossconnect(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:compute/crossconnect:Crossconnect';

    /**
     * Returns true if the given object is an instance of Crossconnect.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Crossconnect {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Crossconnect.__pulumiType;
    }

    /**
     * A list containing all the connectable datacenters
     */
    public readonly connectableDatacenters!: pulumi.Output<outputs.compute.CrossconnectConnectableDatacenter[]>;
    /**
     * The desired description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The desired name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A list containing the details of all cross-connected datacenters
     */
    public readonly peers!: pulumi.Output<outputs.compute.CrossconnectPeer[]>;

    /**
     * Create a Crossconnect resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CrossconnectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CrossconnectArgs | CrossconnectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CrossconnectState | undefined;
            resourceInputs["connectableDatacenters"] = state ? state.connectableDatacenters : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["peers"] = state ? state.peers : undefined;
        } else {
            const args = argsOrState as CrossconnectArgs | undefined;
            resourceInputs["connectableDatacenters"] = args ? args.connectableDatacenters : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["peers"] = args ? args.peers : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Crossconnect.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Crossconnect resources.
 */
export interface CrossconnectState {
    /**
     * A list containing all the connectable datacenters
     */
    connectableDatacenters?: pulumi.Input<pulumi.Input<inputs.compute.CrossconnectConnectableDatacenter>[]>;
    /**
     * The desired description
     */
    description?: pulumi.Input<string>;
    /**
     * The desired name
     */
    name?: pulumi.Input<string>;
    /**
     * A list containing the details of all cross-connected datacenters
     */
    peers?: pulumi.Input<pulumi.Input<inputs.compute.CrossconnectPeer>[]>;
}

/**
 * The set of arguments for constructing a Crossconnect resource.
 */
export interface CrossconnectArgs {
    /**
     * A list containing all the connectable datacenters
     */
    connectableDatacenters?: pulumi.Input<pulumi.Input<inputs.compute.CrossconnectConnectableDatacenter>[]>;
    /**
     * The desired description
     */
    description?: pulumi.Input<string>;
    /**
     * The desired name
     */
    name?: pulumi.Input<string>;
    /**
     * A list containing the details of all cross-connected datacenters
     */
    peers?: pulumi.Input<pulumi.Input<inputs.compute.CrossconnectPeer>[]>;
}
