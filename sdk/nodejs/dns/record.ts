// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a **DNS Record**.
 *
 * > ⚠️  Only tokens are accepted for authorization in the **ionoscloud_dns_record** resource. Please ensure you are using tokens as other methods will not be valid.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = new ionoscloud.dns.Zone("example", {
 *     description: "description",
 *     enabled: false,
 * });
 * const recordexample = new ionoscloud.dns.Record("recordexample", {
 *     zoneId: example.id,
 *     type: "CNAME",
 *     content: "1.2.3.4",
 *     ttl: 2000,
 *     priority: 1024,
 *     enabled: false,
 * });
 * ```
 *
 * ## Import
 *
 * In order to import a DNS Record, you can define an empty DNS Record resource in the plan:
 *
 * hcl
 *
 * resource "ionoscloud_dns_record" "example" {
 *
 * }
 *
 * The resource can be imported using the `zone_id` and the `record_id`, for example:
 *
 * ```sh
 * $ pulumi import ionoscloud:dns/record:Record example {zone_id}/{record_id}
 * ```
 */
export class Record extends pulumi.CustomResource {
    /**
     * Get an existing Record resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RecordState, opts?: pulumi.CustomResourceOptions): Record {
        return new Record(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:dns/record:Record';

    /**
     * Returns true if the given object is an instance of Record.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Record {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Record.__pulumiType;
    }

    /**
     * [string] The content of the DNS Record.
     */
    public readonly content!: pulumi.Output<string>;
    /**
     * [bool] Indicates if the DNS Record is active or not. Default is `true`.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Fully qualified domain name
     */
    public /*out*/ readonly fqdn!: pulumi.Output<string>;
    /**
     * [string] The name of the DNS Record.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * [int] The priority for the DNS Record.
     */
    public readonly priority!: pulumi.Output<number | undefined>;
    /**
     * [int] Time to live for the DNS Record. Default is `3600`.
     */
    public readonly ttl!: pulumi.Output<number>;
    /**
     * [string] The type of the DNS Record, can have one of these values: `A, AAAA, CNAME, ALIAS, MX, NS, SRV, TXT, CAA, SSHFP, TLSA, SMIMEA, DS, HTTPS, SVCB, OPENPGPKEY, CERT, URI, RP, LOC`. More details about types can be found [here](https://docs.ionos.com/dns-as-a-service/readme/api-how-tos/create-a-new-dns-record#create-records-of-other-types).
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * [string] The DNS Zone ID in which the DNS Record will be created.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a Record resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RecordArgs | RecordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RecordState | undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as RecordArgs | undefined;
            if ((!args || args.content === undefined) && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["fqdn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Record.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Record resources.
 */
export interface RecordState {
    /**
     * [string] The content of the DNS Record.
     */
    content?: pulumi.Input<string>;
    /**
     * [bool] Indicates if the DNS Record is active or not. Default is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Fully qualified domain name
     */
    fqdn?: pulumi.Input<string>;
    /**
     * [string] The name of the DNS Record.
     */
    name?: pulumi.Input<string>;
    /**
     * [int] The priority for the DNS Record.
     */
    priority?: pulumi.Input<number>;
    /**
     * [int] Time to live for the DNS Record. Default is `3600`.
     */
    ttl?: pulumi.Input<number>;
    /**
     * [string] The type of the DNS Record, can have one of these values: `A, AAAA, CNAME, ALIAS, MX, NS, SRV, TXT, CAA, SSHFP, TLSA, SMIMEA, DS, HTTPS, SVCB, OPENPGPKEY, CERT, URI, RP, LOC`. More details about types can be found [here](https://docs.ionos.com/dns-as-a-service/readme/api-how-tos/create-a-new-dns-record#create-records-of-other-types).
     */
    type?: pulumi.Input<string>;
    /**
     * [string] The DNS Zone ID in which the DNS Record will be created.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Record resource.
 */
export interface RecordArgs {
    /**
     * [string] The content of the DNS Record.
     */
    content: pulumi.Input<string>;
    /**
     * [bool] Indicates if the DNS Record is active or not. Default is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * [string] The name of the DNS Record.
     */
    name?: pulumi.Input<string>;
    /**
     * [int] The priority for the DNS Record.
     */
    priority?: pulumi.Input<number>;
    /**
     * [int] Time to live for the DNS Record. Default is `3600`.
     */
    ttl?: pulumi.Input<number>;
    /**
     * [string] The type of the DNS Record, can have one of these values: `A, AAAA, CNAME, ALIAS, MX, NS, SRV, TXT, CAA, SSHFP, TLSA, SMIMEA, DS, HTTPS, SVCB, OPENPGPKEY, CERT, URI, RP, LOC`. More details about types can be found [here](https://docs.ionos.com/dns-as-a-service/readme/api-how-tos/create-a-new-dns-record#create-records-of-other-types).
     */
    type: pulumi.Input<string>;
    /**
     * [string] The DNS Zone ID in which the DNS Record will be created.
     */
    zoneId: pulumi.Input<string>;
}
