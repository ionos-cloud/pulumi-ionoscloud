// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The **Container Registry Token data source** can be used to search for and return an existing Container Registry Token.
 * You can provide a string for the name parameter which will be compared with provisioned Container Registry Token.
 * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
 * When this happens, please refine your search and make sure that your resources have unique names.
 *
 * ## Example Usage
 *
 * ### By Name
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.getContainerRegistryToken({
 *     registryId: ionoscloud_container_registry.example.id,
 *     name: "container-registry-token-example",
 * });
 * ```
 *
 * ### By Name with Partial Match
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.getContainerRegistryToken({
 *     registryId: ionoscloud_container_registry.example.id,
 *     name: "-example",
 *     partialMatch: true,
 * });
 * ```
 */
export function getContainerRegistryToken(args: GetContainerRegistryTokenArgs, opts?: pulumi.InvokeOptions): Promise<GetContainerRegistryTokenResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ionoscloud:index/getContainerRegistryToken:getContainerRegistryToken", {
        "id": args.id,
        "name": args.name,
        "partialMatch": args.partialMatch,
        "registryId": args.registryId,
    }, opts);
}

/**
 * A collection of arguments for invoking getContainerRegistryToken.
 */
export interface GetContainerRegistryTokenArgs {
    /**
     * ID of the container registry token you want to search for.
     */
    id?: string;
    /**
     * Name of an existing container registry token that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partialMatch` parameter is not set to true.
     */
    name?: string;
    /**
     * Whether partial matching is allowed or not when using name argument. Default value is false.
     *
     * `registryId` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
     */
    partialMatch?: boolean;
    /**
     * Registry's UUID.
     */
    registryId: string;
}

/**
 * A collection of values returned by getContainerRegistryToken.
 */
export interface GetContainerRegistryTokenResult {
    readonly credentials: outputs.GetContainerRegistryTokenCredential[];
    readonly expiryDate: string;
    /**
     * Id of the container registry token.
     */
    readonly id?: string;
    readonly name?: string;
    readonly partialMatch?: boolean;
    readonly registryId: string;
    readonly scopes: outputs.GetContainerRegistryTokenScope[];
    readonly status: string;
}
/**
 * The **Container Registry Token data source** can be used to search for and return an existing Container Registry Token.
 * You can provide a string for the name parameter which will be compared with provisioned Container Registry Token.
 * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
 * When this happens, please refine your search and make sure that your resources have unique names.
 *
 * ## Example Usage
 *
 * ### By Name
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.getContainerRegistryToken({
 *     registryId: ionoscloud_container_registry.example.id,
 *     name: "container-registry-token-example",
 * });
 * ```
 *
 * ### By Name with Partial Match
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.getContainerRegistryToken({
 *     registryId: ionoscloud_container_registry.example.id,
 *     name: "-example",
 *     partialMatch: true,
 * });
 * ```
 */
export function getContainerRegistryTokenOutput(args: GetContainerRegistryTokenOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetContainerRegistryTokenResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("ionoscloud:index/getContainerRegistryToken:getContainerRegistryToken", {
        "id": args.id,
        "name": args.name,
        "partialMatch": args.partialMatch,
        "registryId": args.registryId,
    }, opts);
}

/**
 * A collection of arguments for invoking getContainerRegistryToken.
 */
export interface GetContainerRegistryTokenOutputArgs {
    /**
     * ID of the container registry token you want to search for.
     */
    id?: pulumi.Input<string>;
    /**
     * Name of an existing container registry token that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partialMatch` parameter is not set to true.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether partial matching is allowed or not when using name argument. Default value is false.
     *
     * `registryId` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
     */
    partialMatch?: pulumi.Input<boolean>;
    /**
     * Registry's UUID.
     */
    registryId: pulumi.Input<string>;
}
