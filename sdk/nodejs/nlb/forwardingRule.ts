// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a **Network Load Balancer Forwarding Rule** on IonosCloud.
 *
 * ## Example Usage
 *
 * ### 
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const exampleDatacenter = new ionoscloud.compute.Datacenter("exampleDatacenter", {
 *     location: "us/las",
 *     description: "Datacenter Description",
 *     secAuthProtection: false,
 * });
 * const example1 = new ionoscloud.compute.Lan("example1", {
 *     datacenterId: exampleDatacenter.id,
 *     "public": false,
 * });
 * const example2 = new ionoscloud.compute.Lan("example2", {
 *     datacenterId: exampleDatacenter.id,
 *     "public": false,
 * });
 * const exampleBalancer = new ionoscloud.nlb.Balancer("exampleBalancer", {
 *     datacenterId: exampleDatacenter.id,
 *     listenerLan: example1.id,
 *     targetLan: example2.id,
 *     ips: ["10.12.118.224"],
 *     lbPrivateIps: ["10.13.72.225/24"],
 * });
 * const exampleForwardingRule = new ionoscloud.nlb.ForwardingRule("exampleForwardingRule", {
 *     datacenterId: exampleDatacenter.id,
 *     networkloadbalancerId: exampleBalancer.id,
 *     algorithm: "SOURCE_IP",
 *     protocol: "TCP",
 *     listenerIp: "10.12.118.224",
 *     listenerPort: 8081,
 *     targets: [{
 *         ip: "22.231.2.2",
 *         port: 8080,
 *         weight: 123,
 *         proxyProtocol: "v1",
 *         healthCheck: {
 *             check: true,
 *             checkInterval: 1000,
 *         },
 *     }],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * A Network Load Balancer Forwarding Rule resource can be imported using its `resource id`, the `datacenter id` and the `networkloadbalancer id` e.g.
 *
 * ```sh
 * $ pulumi import ionoscloud:nlb/forwardingRule:ForwardingRule my_networkloadbalancer_forwardingrule {datacenter uuid}/{networkloadbalancer uuid}/{networkloadbalancer_forwardingrule uuid}
 * ```
 */
export class ForwardingRule extends pulumi.CustomResource {
    /**
     * Get an existing ForwardingRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ForwardingRuleState, opts?: pulumi.CustomResourceOptions): ForwardingRule {
        return new ForwardingRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:nlb/forwardingRule:ForwardingRule';

    /**
     * Returns true if the given object is an instance of ForwardingRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ForwardingRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ForwardingRule.__pulumiType;
    }

    /**
     * [string] Algorithm for the balancing.
     */
    public readonly algorithm!: pulumi.Output<string>;
    /**
     * [string] A Datacenter's UUID.
     */
    public readonly datacenterId!: pulumi.Output<string>;
    /**
     * Health check attributes for Network Load Balancer forwarding rule target.
     */
    public readonly healthCheck!: pulumi.Output<outputs.nlb.ForwardingRuleHealthCheck>;
    /**
     * [string] Listening IP. (inbound)
     */
    public readonly listenerIp!: pulumi.Output<string>;
    /**
     * [int] Listening port number. (inbound) (range: 1 to 65535)
     */
    public readonly listenerPort!: pulumi.Output<number>;
    /**
     * [string] A name of that Network Load Balancer forwarding rule.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly networkloadbalancerId!: pulumi.Output<string>;
    /**
     * [string] Protocol of the balancing.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * [Set] Array of items in that collection.
     */
    public readonly targets!: pulumi.Output<outputs.nlb.ForwardingRuleTarget[]>;

    /**
     * Create a ForwardingRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ForwardingRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ForwardingRuleArgs | ForwardingRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ForwardingRuleState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["datacenterId"] = state ? state.datacenterId : undefined;
            resourceInputs["healthCheck"] = state ? state.healthCheck : undefined;
            resourceInputs["listenerIp"] = state ? state.listenerIp : undefined;
            resourceInputs["listenerPort"] = state ? state.listenerPort : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkloadbalancerId"] = state ? state.networkloadbalancerId : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
        } else {
            const args = argsOrState as ForwardingRuleArgs | undefined;
            if ((!args || args.algorithm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'algorithm'");
            }
            if ((!args || args.datacenterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datacenterId'");
            }
            if ((!args || args.listenerIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenerIp'");
            }
            if ((!args || args.listenerPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenerPort'");
            }
            if ((!args || args.networkloadbalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkloadbalancerId'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.targets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targets'");
            }
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["datacenterId"] = args ? args.datacenterId : undefined;
            resourceInputs["healthCheck"] = args ? args.healthCheck : undefined;
            resourceInputs["listenerIp"] = args ? args.listenerIp : undefined;
            resourceInputs["listenerPort"] = args ? args.listenerPort : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkloadbalancerId"] = args ? args.networkloadbalancerId : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ForwardingRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ForwardingRule resources.
 */
export interface ForwardingRuleState {
    /**
     * [string] Algorithm for the balancing.
     */
    algorithm?: pulumi.Input<string>;
    /**
     * [string] A Datacenter's UUID.
     */
    datacenterId?: pulumi.Input<string>;
    /**
     * Health check attributes for Network Load Balancer forwarding rule target.
     */
    healthCheck?: pulumi.Input<inputs.nlb.ForwardingRuleHealthCheck>;
    /**
     * [string] Listening IP. (inbound)
     */
    listenerIp?: pulumi.Input<string>;
    /**
     * [int] Listening port number. (inbound) (range: 1 to 65535)
     */
    listenerPort?: pulumi.Input<number>;
    /**
     * [string] A name of that Network Load Balancer forwarding rule.
     */
    name?: pulumi.Input<string>;
    networkloadbalancerId?: pulumi.Input<string>;
    /**
     * [string] Protocol of the balancing.
     */
    protocol?: pulumi.Input<string>;
    /**
     * [Set] Array of items in that collection.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.nlb.ForwardingRuleTarget>[]>;
}

/**
 * The set of arguments for constructing a ForwardingRule resource.
 */
export interface ForwardingRuleArgs {
    /**
     * [string] Algorithm for the balancing.
     */
    algorithm: pulumi.Input<string>;
    /**
     * [string] A Datacenter's UUID.
     */
    datacenterId: pulumi.Input<string>;
    /**
     * Health check attributes for Network Load Balancer forwarding rule target.
     */
    healthCheck?: pulumi.Input<inputs.nlb.ForwardingRuleHealthCheck>;
    /**
     * [string] Listening IP. (inbound)
     */
    listenerIp: pulumi.Input<string>;
    /**
     * [int] Listening port number. (inbound) (range: 1 to 65535)
     */
    listenerPort: pulumi.Input<number>;
    /**
     * [string] A name of that Network Load Balancer forwarding rule.
     */
    name?: pulumi.Input<string>;
    networkloadbalancerId: pulumi.Input<string>;
    /**
     * [string] Protocol of the balancing.
     */
    protocol: pulumi.Input<string>;
    /**
     * [Set] Array of items in that collection.
     */
    targets: pulumi.Input<pulumi.Input<inputs.nlb.ForwardingRuleTarget>[]>;
}
