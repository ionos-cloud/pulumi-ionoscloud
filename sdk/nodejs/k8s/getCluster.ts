// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * The **k8s Cluster data source** can be used to search for and return existing k8s clusters.
 * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
 * When this happens, please refine your search string so that it is specific enough to return only one result.
 *
 * ## Example Usage
 *
 * ### By Name
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.k8s.getCluster({
 *     name: "K8s Cluster Example",
 * });
 * ```
 */
export function getCluster(args?: GetClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ionoscloud:k8s/getCluster:getCluster", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterArgs {
    /**
     * ID of the cluster you want to search for.
     *
     * Either `name` or `id` must be provided. If none, or both are provided, the datasource will return an error.
     */
    id?: string;
    /**
     * Name of an existing cluster that you want to search for.
     */
    name?: string;
}

/**
 * A collection of values returned by getCluster.
 */
export interface GetClusterResult {
    /**
     * access to the K8s API server is restricted to these CIDRs
     */
    readonly apiSubnetAllowLists: string[];
    /**
     * A list of available versions for upgrading the cluster
     */
    readonly availableUpgradeVersions: string[];
    /**
     * base64 decoded cluster certificate authority data (provided as an attribute for direct use)
     */
    readonly caCrt: string;
    /**
     * structured kubernetes config consisting of a list with 1 item with the following fields:
     * * apiVersion - Kubernetes API Version
     * * kind - "Config"
     * * current-context - string
     * * clusters - list of
     * * name - name of cluster
     * * cluster - map of
     * * certificate-authority-data - **base64 decoded** cluster CA data
     * * server -  server address in the form `https://host:port`
     * * contexts - list of
     * * name - context name
     * * context - map of
     * * cluster - cluster name
     * * user - cluster user
     * * users - list of
     * * name - user name
     * * user - map of
     * * token - user token used for authentication
     */
    readonly configs: outputs.k8s.GetClusterConfig[];
    /**
     * id of the cluster
     */
    readonly id?: string;
    /**
     * Kubernetes version
     */
    readonly k8sVersion: string;
    /**
     * Kubernetes configuration
     */
    readonly kubeConfig: string;
    /**
     * this attribute is mandatory if the cluster is private.
     */
    readonly location: string;
    /**
     * A maintenance window comprise of a day of the week and a time for maintenance to be allowed
     */
    readonly maintenanceWindows: outputs.k8s.GetClusterMaintenanceWindow[];
    /**
     * name of the cluster
     */
    readonly name?: string;
    /**
     * the NAT gateway IP of the cluster if the cluster is private.
     */
    readonly natGatewayIp: string;
    /**
     * list of the IDs of the node pools in this cluster
     */
    readonly nodePools: string[];
    /**
     * the node subnet of the cluster, if the cluster is private.
     */
    readonly nodeSubnet: string;
    /**
     * indicates if the cluster is public or private.
     */
    readonly public: boolean;
    /**
     * list of IONOS Object Storage bucket configured for K8s usage
     */
    readonly s3Buckets: outputs.k8s.GetClusterS3Bucket[];
    /**
     * cluster server (same as `config[0].clusters[0].cluster.server` but provided as an attribute for ease of use)
     */
    readonly server: string;
    /**
     * one of "AVAILABLE",
     * "INACTIVE",
     * "BUSY",
     * "DEPLOYING",
     * "ACTIVE",
     * "FAILED",
     * "SUSPENDED",
     * "FAILED_SUSPENDED",
     * "UPDATING",
     * "FAILED_UPDATING",
     * "DESTROYING",
     * "FAILED_DESTROYING",
     * "TERMINATED"
     */
    readonly state: string;
    /**
     * a convenience map to be search the token of a specific user
     * - key - is the user name
     * - value - is the token
     */
    readonly userTokens: {[key: string]: string};
    /**
     * A list of versions that may be used for node pools under this cluster
     */
    readonly viableNodePoolVersions: string[];
}
/**
 * The **k8s Cluster data source** can be used to search for and return existing k8s clusters.
 * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
 * When this happens, please refine your search string so that it is specific enough to return only one result.
 *
 * ## Example Usage
 *
 * ### By Name
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.k8s.getCluster({
 *     name: "K8s Cluster Example",
 * });
 * ```
 */
export function getClusterOutput(args?: GetClusterOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetClusterResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("ionoscloud:k8s/getCluster:getCluster", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterOutputArgs {
    /**
     * ID of the cluster you want to search for.
     *
     * Either `name` or `id` must be provided. If none, or both are provided, the datasource will return an error.
     */
    id?: pulumi.Input<string>;
    /**
     * Name of an existing cluster that you want to search for.
     */
    name?: pulumi.Input<string>;
}
