// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The **Servers data source** can be used to search for and return existing servers based on filters used.
 *
 * ## Example Usage
 *
 * ### By Name
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.getServers({
 *     datacenterId: ionoscloud_datacenter.example.id,
 *     filters: [{
 *         name: "name",
 *         value: "server_name_to_look_here",
 *     }],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### By CPU Family
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.getServers({
 *     datacenterId: ionoscloud_datacenter.example.id,
 *     filters: [{
 *         name: "cpu_family",
 *         value: "INTEL_XEON",
 *     }],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### By Name and Cores
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.getServers({
 *     datacenterId: ionoscloud_datacenter.example.id,
 *     filters: [
 *         {
 *             name: "name",
 *             value: "test",
 *         },
 *         {
 *             name: "cores",
 *             value: "1",
 *         },
 *     ],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getServers(args: GetServersArgs, opts?: pulumi.InvokeOptions): Promise<GetServersResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ionoscloud:index/getServers:getServers", {
        "datacenterId": args.datacenterId,
        "filters": args.filters,
    }, opts);
}

/**
 * A collection of arguments for invoking getServers.
 */
export interface GetServersArgs {
    /**
     * Name of an existing datacenter that the servers are a part of
     */
    datacenterId: string;
    /**
     * One or more name/value pairs to filter off of. You can use most base fields in the server resource. These do **NOT** include nested fields in nics or volume nested fields.
     *
     *
     * `datacenterId` must be provided. If `datacenterId` is missing , the datasource will return an error.
     *
     * **NOTE:** Lookup by filter is partial. Searching for a server using filter name and value `test`, will find all servers that have `test` in the name.
     * For example, it will find servers named `test`, `test1`, `testsomething`.
     *
     * **NOTE:** You cannot search by `imageName` by providing an alias like `ubuntu`.
     */
    filters?: inputs.GetServersFilter[];
}

/**
 * A collection of values returned by getServers.
 */
export interface GetServersResult {
    readonly datacenterId: string;
    readonly filters?: outputs.GetServersFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * list of servers that matches the filters provided.
     * For a full reference of all attributes returned, check out documentation
     */
    readonly servers: outputs.GetServersServer[];
}
/**
 * The **Servers data source** can be used to search for and return existing servers based on filters used.
 *
 * ## Example Usage
 *
 * ### By Name
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.getServers({
 *     datacenterId: ionoscloud_datacenter.example.id,
 *     filters: [{
 *         name: "name",
 *         value: "server_name_to_look_here",
 *     }],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### By CPU Family
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.getServers({
 *     datacenterId: ionoscloud_datacenter.example.id,
 *     filters: [{
 *         name: "cpu_family",
 *         value: "INTEL_XEON",
 *     }],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### By Name and Cores
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@pulumi/ionoscloud";
 *
 * const example = ionoscloud.getServers({
 *     datacenterId: ionoscloud_datacenter.example.id,
 *     filters: [
 *         {
 *             name: "name",
 *             value: "test",
 *         },
 *         {
 *             name: "cores",
 *             value: "1",
 *         },
 *     ],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getServersOutput(args: GetServersOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServersResult> {
    return pulumi.output(args).apply((a: any) => getServers(a, opts))
}

/**
 * A collection of arguments for invoking getServers.
 */
export interface GetServersOutputArgs {
    /**
     * Name of an existing datacenter that the servers are a part of
     */
    datacenterId: pulumi.Input<string>;
    /**
     * One or more name/value pairs to filter off of. You can use most base fields in the server resource. These do **NOT** include nested fields in nics or volume nested fields.
     *
     *
     * `datacenterId` must be provided. If `datacenterId` is missing , the datasource will return an error.
     *
     * **NOTE:** Lookup by filter is partial. Searching for a server using filter name and value `test`, will find all servers that have `test` in the name.
     * For example, it will find servers named `test`, `test1`, `testsomething`.
     *
     * **NOTE:** You cannot search by `imageName` by providing an alias like `ubuntu`.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.GetServersFilterArgs>[]>;
}
