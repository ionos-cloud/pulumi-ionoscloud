// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetInMemoryDBReplicaSetArgs, GetInMemoryDBReplicaSetResult, GetInMemoryDBReplicaSetOutputArgs } from "./getInMemoryDBReplicaSet";
export const getInMemoryDBReplicaSet: typeof import("./getInMemoryDBReplicaSet").getInMemoryDBReplicaSet = null as any;
export const getInMemoryDBReplicaSetOutput: typeof import("./getInMemoryDBReplicaSet").getInMemoryDBReplicaSetOutput = null as any;
utilities.lazyLoad(exports, ["getInMemoryDBReplicaSet","getInMemoryDBReplicaSetOutput"], () => require("./getInMemoryDBReplicaSet"));

export { GetInmemorydbSnapshotArgs, GetInmemorydbSnapshotResult, GetInmemorydbSnapshotOutputArgs } from "./getInmemorydbSnapshot";
export const getInmemorydbSnapshot: typeof import("./getInmemorydbSnapshot").getInmemorydbSnapshot = null as any;
export const getInmemorydbSnapshotOutput: typeof import("./getInmemorydbSnapshot").getInmemorydbSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getInmemorydbSnapshot","getInmemorydbSnapshotOutput"], () => require("./getInmemorydbSnapshot"));

export { GetMariaDBBackupsArgs, GetMariaDBBackupsResult, GetMariaDBBackupsOutputArgs } from "./getMariaDBBackups";
export const getMariaDBBackups: typeof import("./getMariaDBBackups").getMariaDBBackups = null as any;
export const getMariaDBBackupsOutput: typeof import("./getMariaDBBackups").getMariaDBBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getMariaDBBackups","getMariaDBBackupsOutput"], () => require("./getMariaDBBackups"));

export { GetMariaDBClusterArgs, GetMariaDBClusterResult, GetMariaDBClusterOutputArgs } from "./getMariaDBCluster";
export const getMariaDBCluster: typeof import("./getMariaDBCluster").getMariaDBCluster = null as any;
export const getMariaDBClusterOutput: typeof import("./getMariaDBCluster").getMariaDBClusterOutput = null as any;
utilities.lazyLoad(exports, ["getMariaDBCluster","getMariaDBClusterOutput"], () => require("./getMariaDBCluster"));

export { GetMongoClusterArgs, GetMongoClusterResult, GetMongoClusterOutputArgs } from "./getMongoCluster";
export const getMongoCluster: typeof import("./getMongoCluster").getMongoCluster = null as any;
export const getMongoClusterOutput: typeof import("./getMongoCluster").getMongoClusterOutput = null as any;
utilities.lazyLoad(exports, ["getMongoCluster","getMongoClusterOutput"], () => require("./getMongoCluster"));

export { GetMongoTemplateArgs, GetMongoTemplateResult, GetMongoTemplateOutputArgs } from "./getMongoTemplate";
export const getMongoTemplate: typeof import("./getMongoTemplate").getMongoTemplate = null as any;
export const getMongoTemplateOutput: typeof import("./getMongoTemplate").getMongoTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getMongoTemplate","getMongoTemplateOutput"], () => require("./getMongoTemplate"));

export { GetMongoUserArgs, GetMongoUserResult, GetMongoUserOutputArgs } from "./getMongoUser";
export const getMongoUser: typeof import("./getMongoUser").getMongoUser = null as any;
export const getMongoUserOutput: typeof import("./getMongoUser").getMongoUserOutput = null as any;
utilities.lazyLoad(exports, ["getMongoUser","getMongoUserOutput"], () => require("./getMongoUser"));

export { GetPSQLBackupsArgs, GetPSQLBackupsResult, GetPSQLBackupsOutputArgs } from "./getPSQLBackups";
export const getPSQLBackups: typeof import("./getPSQLBackups").getPSQLBackups = null as any;
export const getPSQLBackupsOutput: typeof import("./getPSQLBackups").getPSQLBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getPSQLBackups","getPSQLBackupsOutput"], () => require("./getPSQLBackups"));

export { GetPSQLClusterArgs, GetPSQLClusterResult, GetPSQLClusterOutputArgs } from "./getPSQLCluster";
export const getPSQLCluster: typeof import("./getPSQLCluster").getPSQLCluster = null as any;
export const getPSQLClusterOutput: typeof import("./getPSQLCluster").getPSQLClusterOutput = null as any;
utilities.lazyLoad(exports, ["getPSQLCluster","getPSQLClusterOutput"], () => require("./getPSQLCluster"));

export { GetPSQLDatabaseArgs, GetPSQLDatabaseResult, GetPSQLDatabaseOutputArgs } from "./getPSQLDatabase";
export const getPSQLDatabase: typeof import("./getPSQLDatabase").getPSQLDatabase = null as any;
export const getPSQLDatabaseOutput: typeof import("./getPSQLDatabase").getPSQLDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getPSQLDatabase","getPSQLDatabaseOutput"], () => require("./getPSQLDatabase"));

export { GetPSQLDatabasesArgs, GetPSQLDatabasesResult, GetPSQLDatabasesOutputArgs } from "./getPSQLDatabases";
export const getPSQLDatabases: typeof import("./getPSQLDatabases").getPSQLDatabases = null as any;
export const getPSQLDatabasesOutput: typeof import("./getPSQLDatabases").getPSQLDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getPSQLDatabases","getPSQLDatabasesOutput"], () => require("./getPSQLDatabases"));

export { GetPSQLUserArgs, GetPSQLUserResult, GetPSQLUserOutputArgs } from "./getPSQLUser";
export const getPSQLUser: typeof import("./getPSQLUser").getPSQLUser = null as any;
export const getPSQLUserOutput: typeof import("./getPSQLUser").getPSQLUserOutput = null as any;
utilities.lazyLoad(exports, ["getPSQLUser","getPSQLUserOutput"], () => require("./getPSQLUser"));

export { GetPSQLVersionsArgs, GetPSQLVersionsResult, GetPSQLVersionsOutputArgs } from "./getPSQLVersions";
export const getPSQLVersions: typeof import("./getPSQLVersions").getPSQLVersions = null as any;
export const getPSQLVersionsOutput: typeof import("./getPSQLVersions").getPSQLVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getPSQLVersions","getPSQLVersionsOutput"], () => require("./getPSQLVersions"));

export { InMemoryDBReplicaSetArgs, InMemoryDBReplicaSetState } from "./inMemoryDBReplicaSet";
export type InMemoryDBReplicaSet = import("./inMemoryDBReplicaSet").InMemoryDBReplicaSet;
export const InMemoryDBReplicaSet: typeof import("./inMemoryDBReplicaSet").InMemoryDBReplicaSet = null as any;
utilities.lazyLoad(exports, ["InMemoryDBReplicaSet"], () => require("./inMemoryDBReplicaSet"));

export { MariaDBClusterArgs, MariaDBClusterState } from "./mariaDBCluster";
export type MariaDBCluster = import("./mariaDBCluster").MariaDBCluster;
export const MariaDBCluster: typeof import("./mariaDBCluster").MariaDBCluster = null as any;
utilities.lazyLoad(exports, ["MariaDBCluster"], () => require("./mariaDBCluster"));

export { MongoClusterArgs, MongoClusterState } from "./mongoCluster";
export type MongoCluster = import("./mongoCluster").MongoCluster;
export const MongoCluster: typeof import("./mongoCluster").MongoCluster = null as any;
utilities.lazyLoad(exports, ["MongoCluster"], () => require("./mongoCluster"));

export { MongoUserArgs, MongoUserState } from "./mongoUser";
export type MongoUser = import("./mongoUser").MongoUser;
export const MongoUser: typeof import("./mongoUser").MongoUser = null as any;
utilities.lazyLoad(exports, ["MongoUser"], () => require("./mongoUser"));

export { PSQLClusterArgs, PSQLClusterState } from "./psqlcluster";
export type PSQLCluster = import("./psqlcluster").PSQLCluster;
export const PSQLCluster: typeof import("./psqlcluster").PSQLCluster = null as any;
utilities.lazyLoad(exports, ["PSQLCluster"], () => require("./psqlcluster"));

export { PSQLDatabaseArgs, PSQLDatabaseState } from "./psqldatabase";
export type PSQLDatabase = import("./psqldatabase").PSQLDatabase;
export const PSQLDatabase: typeof import("./psqldatabase").PSQLDatabase = null as any;
utilities.lazyLoad(exports, ["PSQLDatabase"], () => require("./psqldatabase"));

export { PSQLUserArgs, PSQLUserState } from "./psqluser";
export type PSQLUser = import("./psqluser").PSQLUser;
export const PSQLUser: typeof import("./psqluser").PSQLUser = null as any;
utilities.lazyLoad(exports, ["PSQLUser"], () => require("./psqluser"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ionoscloud:dbaas/inMemoryDBReplicaSet:InMemoryDBReplicaSet":
                return new InMemoryDBReplicaSet(name, <any>undefined, { urn })
            case "ionoscloud:dbaas/mariaDBCluster:MariaDBCluster":
                return new MariaDBCluster(name, <any>undefined, { urn })
            case "ionoscloud:dbaas/mongoCluster:MongoCluster":
                return new MongoCluster(name, <any>undefined, { urn })
            case "ionoscloud:dbaas/mongoUser:MongoUser":
                return new MongoUser(name, <any>undefined, { urn })
            case "ionoscloud:dbaas/pSQLCluster:PSQLCluster":
                return new PSQLCluster(name, <any>undefined, { urn })
            case "ionoscloud:dbaas/pSQLDatabase:PSQLDatabase":
                return new PSQLDatabase(name, <any>undefined, { urn })
            case "ionoscloud:dbaas/pSQLUser:PSQLUser":
                return new PSQLUser(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ionoscloud", "dbaas/inMemoryDBReplicaSet", _module)
pulumi.runtime.registerResourceModule("ionoscloud", "dbaas/mariaDBCluster", _module)
pulumi.runtime.registerResourceModule("ionoscloud", "dbaas/mongoCluster", _module)
pulumi.runtime.registerResourceModule("ionoscloud", "dbaas/mongoUser", _module)
pulumi.runtime.registerResourceModule("ionoscloud", "dbaas/pSQLCluster", _module)
pulumi.runtime.registerResourceModule("ionoscloud", "dbaas/pSQLDatabase", _module)
pulumi.runtime.registerResourceModule("ionoscloud", "dbaas/pSQLUser", _module)
