// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a **DBaaS InMemoryDB Replica Set**.
 *
 * ## Import
 *
 * Resource DBaaS InMemoryDB Replica Set can be imported using the `replicaset_id` and the `location`, separated by `:`, e.g:
 *
 * ```sh
 * $ pulumi import ionoscloud:dbaas/inMemoryDBReplicaSet:InMemoryDBReplicaSet example {location}:{replicaSet UUID}
 * ```
 */
export class InMemoryDBReplicaSet extends pulumi.CustomResource {
    /**
     * Get an existing InMemoryDBReplicaSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InMemoryDBReplicaSetState, opts?: pulumi.CustomResourceOptions): InMemoryDBReplicaSet {
        return new InMemoryDBReplicaSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:dbaas/inMemoryDBReplicaSet:InMemoryDBReplicaSet';

    /**
     * Returns true if the given object is an instance of InMemoryDBReplicaSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InMemoryDBReplicaSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InMemoryDBReplicaSet.__pulumiType;
    }

    /**
     * [object] The network connection for your replica set. Only one connection is allowed. Updates to the value of the fields force the replica set to be re-created.
     */
    public readonly connections!: pulumi.Output<outputs.dbaas.InMemoryDBReplicaSetConnections>;
    /**
     * [object] Credentials for the InMemoryDB replicaset, only one type of password can be used since they are mutually exclusive. These values are used to create the initial InMemoryDB user, updating any of these will force recreation of the replica set resource.
     */
    public readonly credentials!: pulumi.Output<outputs.dbaas.InMemoryDBReplicaSetCredentials>;
    /**
     * [string] The human-readable name of your replica set.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * [string] The DNS name pointing to your replica set. Will be used to connect to the active/standalone instance.
     */
    public /*out*/ readonly dnsName!: pulumi.Output<string>;
    /**
     * [string] The eviction policy for the replica set, possible values are:
     */
    public readonly evictionPolicy!: pulumi.Output<string>;
    /**
     * [string] The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
     */
    public readonly initialSnapshotId!: pulumi.Output<string | undefined>;
    /**
     * [string] The location of your replica set. Updates to the value of the field force the replica set to be re-created.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * (Computed) A weekly 4 hour-long window, during which maintenance might occur.
     */
    public readonly maintenanceWindow!: pulumi.Output<outputs.dbaas.InMemoryDBReplicaSetMaintenanceWindow>;
    /**
     * [string] Specifies How and If data is persisted, possible values are:
     * * `None` - Data is inMemory only and will not be persisted. Useful for cache only applications.
     * * `AOF` - (Append Only File) AOF persistence logs every write operation received by the server. These operations can then be replayed again at server startup, reconstructing the original dataset. Commands are logged using the same format as the InMemoryDB protocol itself.
     * * `RDB` - RDB persistence performs snapshots of the current in memory state.
     * * `RDB_AOF` - Both RDB and AOF persistence are enabled.
     */
    public readonly persistenceMode!: pulumi.Output<string>;
    /**
     * [int] The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only standby for a failure of the active instance.
     */
    public readonly replicas!: pulumi.Output<number>;
    /**
     * [object] The resources of the individual replicas.
     */
    public readonly resources!: pulumi.Output<outputs.dbaas.InMemoryDBReplicaSetResources>;
    /**
     * [string] The InMemoryDB version of your replica set.
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a InMemoryDBReplicaSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InMemoryDBReplicaSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InMemoryDBReplicaSetArgs | InMemoryDBReplicaSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InMemoryDBReplicaSetState | undefined;
            resourceInputs["connections"] = state ? state.connections : undefined;
            resourceInputs["credentials"] = state ? state.credentials : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["dnsName"] = state ? state.dnsName : undefined;
            resourceInputs["evictionPolicy"] = state ? state.evictionPolicy : undefined;
            resourceInputs["initialSnapshotId"] = state ? state.initialSnapshotId : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            resourceInputs["persistenceMode"] = state ? state.persistenceMode : undefined;
            resourceInputs["replicas"] = state ? state.replicas : undefined;
            resourceInputs["resources"] = state ? state.resources : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as InMemoryDBReplicaSetArgs | undefined;
            if ((!args || args.connections === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connections'");
            }
            if ((!args || args.credentials === undefined) && !opts.urn) {
                throw new Error("Missing required property 'credentials'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.evictionPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'evictionPolicy'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.persistenceMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'persistenceMode'");
            }
            if ((!args || args.replicas === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicas'");
            }
            if ((!args || args.resources === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resources'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["connections"] = args ? args.connections : undefined;
            resourceInputs["credentials"] = args ? args.credentials : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["evictionPolicy"] = args ? args.evictionPolicy : undefined;
            resourceInputs["initialSnapshotId"] = args ? args.initialSnapshotId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            resourceInputs["persistenceMode"] = args ? args.persistenceMode : undefined;
            resourceInputs["replicas"] = args ? args.replicas : undefined;
            resourceInputs["resources"] = args ? args.resources : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["dnsName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InMemoryDBReplicaSet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InMemoryDBReplicaSet resources.
 */
export interface InMemoryDBReplicaSetState {
    /**
     * [object] The network connection for your replica set. Only one connection is allowed. Updates to the value of the fields force the replica set to be re-created.
     */
    connections?: pulumi.Input<inputs.dbaas.InMemoryDBReplicaSetConnections>;
    /**
     * [object] Credentials for the InMemoryDB replicaset, only one type of password can be used since they are mutually exclusive. These values are used to create the initial InMemoryDB user, updating any of these will force recreation of the replica set resource.
     */
    credentials?: pulumi.Input<inputs.dbaas.InMemoryDBReplicaSetCredentials>;
    /**
     * [string] The human-readable name of your replica set.
     */
    displayName?: pulumi.Input<string>;
    /**
     * [string] The DNS name pointing to your replica set. Will be used to connect to the active/standalone instance.
     */
    dnsName?: pulumi.Input<string>;
    /**
     * [string] The eviction policy for the replica set, possible values are:
     */
    evictionPolicy?: pulumi.Input<string>;
    /**
     * [string] The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
     */
    initialSnapshotId?: pulumi.Input<string>;
    /**
     * [string] The location of your replica set. Updates to the value of the field force the replica set to be re-created.
     */
    location?: pulumi.Input<string>;
    /**
     * (Computed) A weekly 4 hour-long window, during which maintenance might occur.
     */
    maintenanceWindow?: pulumi.Input<inputs.dbaas.InMemoryDBReplicaSetMaintenanceWindow>;
    /**
     * [string] Specifies How and If data is persisted, possible values are:
     * * `None` - Data is inMemory only and will not be persisted. Useful for cache only applications.
     * * `AOF` - (Append Only File) AOF persistence logs every write operation received by the server. These operations can then be replayed again at server startup, reconstructing the original dataset. Commands are logged using the same format as the InMemoryDB protocol itself.
     * * `RDB` - RDB persistence performs snapshots of the current in memory state.
     * * `RDB_AOF` - Both RDB and AOF persistence are enabled.
     */
    persistenceMode?: pulumi.Input<string>;
    /**
     * [int] The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only standby for a failure of the active instance.
     */
    replicas?: pulumi.Input<number>;
    /**
     * [object] The resources of the individual replicas.
     */
    resources?: pulumi.Input<inputs.dbaas.InMemoryDBReplicaSetResources>;
    /**
     * [string] The InMemoryDB version of your replica set.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InMemoryDBReplicaSet resource.
 */
export interface InMemoryDBReplicaSetArgs {
    /**
     * [object] The network connection for your replica set. Only one connection is allowed. Updates to the value of the fields force the replica set to be re-created.
     */
    connections: pulumi.Input<inputs.dbaas.InMemoryDBReplicaSetConnections>;
    /**
     * [object] Credentials for the InMemoryDB replicaset, only one type of password can be used since they are mutually exclusive. These values are used to create the initial InMemoryDB user, updating any of these will force recreation of the replica set resource.
     */
    credentials: pulumi.Input<inputs.dbaas.InMemoryDBReplicaSetCredentials>;
    /**
     * [string] The human-readable name of your replica set.
     */
    displayName: pulumi.Input<string>;
    /**
     * [string] The eviction policy for the replica set, possible values are:
     */
    evictionPolicy: pulumi.Input<string>;
    /**
     * [string] The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
     */
    initialSnapshotId?: pulumi.Input<string>;
    /**
     * [string] The location of your replica set. Updates to the value of the field force the replica set to be re-created.
     */
    location: pulumi.Input<string>;
    /**
     * (Computed) A weekly 4 hour-long window, during which maintenance might occur.
     */
    maintenanceWindow?: pulumi.Input<inputs.dbaas.InMemoryDBReplicaSetMaintenanceWindow>;
    /**
     * [string] Specifies How and If data is persisted, possible values are:
     * * `None` - Data is inMemory only and will not be persisted. Useful for cache only applications.
     * * `AOF` - (Append Only File) AOF persistence logs every write operation received by the server. These operations can then be replayed again at server startup, reconstructing the original dataset. Commands are logged using the same format as the InMemoryDB protocol itself.
     * * `RDB` - RDB persistence performs snapshots of the current in memory state.
     * * `RDB_AOF` - Both RDB and AOF persistence are enabled.
     */
    persistenceMode: pulumi.Input<string>;
    /**
     * [int] The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only standby for a failure of the active instance.
     */
    replicas: pulumi.Input<number>;
    /**
     * [object] The resources of the individual replicas.
     */
    resources: pulumi.Input<inputs.dbaas.InMemoryDBReplicaSetResources>;
    /**
     * [string] The InMemoryDB version of your replica set.
     */
    version: pulumi.Input<string>;
}
