// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a **DbaaS Mongo User**. .
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@ionos-cloud/sdk-pulumi";
 *
 * // Basic example
 * const datacenterExample = new ionoscloud.compute.Datacenter("datacenter_example", {
 *     name: "example",
 *     location: "de/txl",
 *     description: "Datacenter for testing dbaas cluster",
 * });
 * const lanExample = new ionoscloud.compute.Lan("lan_example", {
 *     datacenterId: datacenterExample.id,
 *     "public": false,
 *     name: "example",
 * });
 * const exampleMongoCluster = new ionoscloud.dbaas.MongoCluster("example_mongo_cluster", {
 *     maintenanceWindow: {
 *         dayOfTheWeek: "Sunday",
 *         time: "09:00:00",
 *     },
 *     mongodbVersion: "5.0",
 *     instances: 1,
 *     displayName: "example_mongo_cluster",
 *     location: datacenterExample.location,
 *     connections: {
 *         datacenterId: datacenterExample.id,
 *         lanId: lanExample.id,
 *         cidrLists: ["192.168.1.108/24"],
 *     },
 *     templateId: "6b78ea06-ee0e-4689-998c-fc9c46e781f6",
 * });
 * const exampleMongoUser = new ionoscloud.dbaas.MongoUser("example_mongo_user", {
 *     clusterId: exampleMongoCluster.id,
 *     username: "myUser",
 *     password: "strongPassword",
 *     roles: [
 *         {
 *             role: "read",
 *             database: "db1",
 *         },
 *         {
 *             role: "readWrite",
 *             database: "db2",
 *         },
 *     ],
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ionoscloud from "@ionos-cloud/sdk-pulumi";
 * import * as random from "@pulumi/random";
 *
 * // Complete example
 * const datacenterExample = new ionoscloud.compute.Datacenter("datacenter_example", {
 *     name: "example",
 *     location: "de/txl",
 *     description: "Datacenter for testing dbaas cluster",
 * });
 * const lanExample = new ionoscloud.compute.Lan("lan_example", {
 *     datacenterId: datacenterExample.id,
 *     "public": false,
 *     name: "example",
 * });
 * const exampleMongoCluster = new ionoscloud.dbaas.MongoCluster("example_mongo_cluster", {
 *     maintenanceWindow: {
 *         dayOfTheWeek: "Sunday",
 *         time: "09:00:00",
 *     },
 *     mongodbVersion: "5.0",
 *     instances: 1,
 *     displayName: "example_mongo_cluster",
 *     location: datacenterExample.location,
 *     connections: {
 *         datacenterId: datacenterExample.id,
 *         lanId: lanExample.id,
 *         cidrLists: ["192.168.1.108/24"],
 *     },
 *     templateId: "6b78ea06-ee0e-4689-998c-fc9c46e781f6",
 * });
 * const clusterPassword = new random.index.Password("cluster_password", {
 *     length: 16,
 *     special: true,
 *     overrideSpecial: "!#$%&*()-_=+[]{}<>:?",
 * });
 * const userPassword = new random.index.Password("user_password", {
 *     length: 16,
 *     special: true,
 *     overrideSpecial: "!#$%&*()-_=+[]{}<>:?",
 * });
 * const exampleMongoUser = new ionoscloud.dbaas.MongoUser("example_mongo_user", {
 *     clusterId: exampleMongoCluster.id,
 *     username: "myUser",
 *     password: userPassword.result,
 *     roles: [
 *         {
 *             role: "read",
 *             database: "db1",
 *         },
 *         {
 *             role: "readWrite",
 *             database: "db2",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Resource DBaaS MongoDB User can be imported using the `clusterID` and the `username`.
 *
 * First, define an empty resource in the plan:
 *
 * hcl
 *
 * resource "ionoscloud_mongo_user" "importeduser" {
 *
 * }
 *
 * Then you can import the user using the following command:
 *
 * ```sh
 * $ pulumi import ionoscloud:dbaas/mongoUser:MongoUser mycluser clusterid/username
 * ```
 */
export class MongoUser extends pulumi.CustomResource {
    /**
     * Get an existing MongoUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MongoUserState, opts?: pulumi.CustomResourceOptions): MongoUser {
        return new MongoUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ionoscloud:dbaas/mongoUser:MongoUser';

    /**
     * Returns true if the given object is an instance of MongoUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MongoUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MongoUser.__pulumiType;
    }

    /**
     * [string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * [string] User password. Updates to the value of the field force the cluster to be re-created.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * [string] a list of mongodb user roles. Updates to the value of the field force the cluster to be re-created.
     */
    public readonly roles!: pulumi.Output<outputs.dbaas.MongoUserRole[] | undefined>;
    /**
     * [string] Used for authentication. Updates to the value of the field force the cluster to be re-created.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a MongoUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MongoUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MongoUserArgs | MongoUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MongoUserState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as MongoUserArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MongoUser.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MongoUser resources.
 */
export interface MongoUserState {
    /**
     * [string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * [string] User password. Updates to the value of the field force the cluster to be re-created.
     */
    password?: pulumi.Input<string>;
    /**
     * [string] a list of mongodb user roles. Updates to the value of the field force the cluster to be re-created.
     */
    roles?: pulumi.Input<pulumi.Input<inputs.dbaas.MongoUserRole>[]>;
    /**
     * [string] Used for authentication. Updates to the value of the field force the cluster to be re-created.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MongoUser resource.
 */
export interface MongoUserArgs {
    /**
     * [string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.
     */
    clusterId: pulumi.Input<string>;
    /**
     * [string] User password. Updates to the value of the field force the cluster to be re-created.
     */
    password: pulumi.Input<string>;
    /**
     * [string] a list of mongodb user roles. Updates to the value of the field force the cluster to be re-created.
     */
    roles?: pulumi.Input<pulumi.Input<inputs.dbaas.MongoUserRole>[]>;
    /**
     * [string] Used for authentication. Updates to the value of the field force the cluster to be re-created.
     */
    username: pulumi.Input<string>;
}
