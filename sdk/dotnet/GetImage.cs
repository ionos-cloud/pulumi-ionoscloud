// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud
{
    public static class GetImage
    {
        public static Task<GetImageResult> InvokeAsync(GetImageArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetImageResult>("ionoscloud:index/getImage:getImage", args ?? new GetImageArgs(), options.WithDefaults());

        public static Output<GetImageResult> Invoke(GetImageInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetImageResult>("ionoscloud:index/getImage:getImage", args ?? new GetImageInvokeArgs(), options.WithDefaults());

        public static Output<GetImageResult> Invoke(GetImageInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetImageResult>("ionoscloud:index/getImage:getImage", args ?? new GetImageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImageArgs : global::Pulumi.InvokeArgs
    {
        [Input("cloudInit")]
        public string? CloudInit { get; set; }

        [Input("description")]
        public string? Description { get; set; }

        [Input("imageAlias")]
        public string? ImageAlias { get; set; }

        [Input("location")]
        public string? Location { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("type")]
        public string? Type { get; set; }

        [Input("version")]
        public string? Version { get; set; }

        public GetImageArgs()
        {
        }
        public static new GetImageArgs Empty => new GetImageArgs();
    }

    public sealed class GetImageInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("cloudInit")]
        public Input<string>? CloudInit { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("imageAlias")]
        public Input<string>? ImageAlias { get; set; }

        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("version")]
        public Input<string>? Version { get; set; }

        public GetImageInvokeArgs()
        {
        }
        public static new GetImageInvokeArgs Empty => new GetImageInvokeArgs();
    }


    [OutputType]
    public sealed class GetImageResult
    {
        public readonly string CloudInit;
        public readonly bool CpuHotPlug;
        public readonly bool CpuHotUnplug;
        public readonly string? Description;
        public readonly bool DiscScsiHotPlug;
        public readonly bool DiscScsiHotUnplug;
        public readonly bool DiscVirtioHotPlug;
        public readonly bool DiscVirtioHotUnplug;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? ImageAlias;
        public readonly ImmutableArray<string> ImageAliases;
        public readonly string LicenceType;
        public readonly string? Location;
        public readonly string? Name;
        public readonly bool NicHotPlug;
        public readonly bool NicHotUnplug;
        public readonly bool Public;
        public readonly bool RamHotPlug;
        public readonly bool RamHotUnplug;
        public readonly double Size;
        public readonly string? Type;
        public readonly string? Version;

        [OutputConstructor]
        private GetImageResult(
            string cloudInit,

            bool cpuHotPlug,

            bool cpuHotUnplug,

            string? description,

            bool discScsiHotPlug,

            bool discScsiHotUnplug,

            bool discVirtioHotPlug,

            bool discVirtioHotUnplug,

            string id,

            string? imageAlias,

            ImmutableArray<string> imageAliases,

            string licenceType,

            string? location,

            string? name,

            bool nicHotPlug,

            bool nicHotUnplug,

            bool @public,

            bool ramHotPlug,

            bool ramHotUnplug,

            double size,

            string? type,

            string? version)
        {
            CloudInit = cloudInit;
            CpuHotPlug = cpuHotPlug;
            CpuHotUnplug = cpuHotUnplug;
            Description = description;
            DiscScsiHotPlug = discScsiHotPlug;
            DiscScsiHotUnplug = discScsiHotUnplug;
            DiscVirtioHotPlug = discVirtioHotPlug;
            DiscVirtioHotUnplug = discVirtioHotUnplug;
            Id = id;
            ImageAlias = imageAlias;
            ImageAliases = imageAliases;
            LicenceType = licenceType;
            Location = location;
            Name = name;
            NicHotPlug = nicHotPlug;
            NicHotUnplug = nicHotUnplug;
            Public = @public;
            RamHotPlug = ramHotPlug;
            RamHotUnplug = ramHotUnplug;
            Size = size;
            Type = type;
            Version = version;
        }
    }
}
