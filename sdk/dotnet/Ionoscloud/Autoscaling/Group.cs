// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Ionoscloud.Pulumi.Ionoscloud.Autoscaling
{
    /// <summary>
    /// Manages an Autoscaling Group on IonosCloud.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ionoscloud = Pulumi.Ionoscloud;
    /// using Random = Pulumi.Random;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var datacenterExample = new Ionoscloud.Compute.Datacenter("datacenter_example", new()
    ///     {
    ///         Name = "datacenter_example",
    ///         Location = "de/fra",
    ///     });
    /// 
    ///     var lanExample1 = new Ionoscloud.Compute.Lan("lan_example_1", new()
    ///     {
    ///         DatacenterId = datacenterExample.Id,
    ///         Public = false,
    ///         Name = "lan_example_1",
    ///     });
    /// 
    ///     var lanExample2 = new Ionoscloud.Compute.Lan("lan_example_2", new()
    ///     {
    ///         DatacenterId = datacenterExample.Id,
    ///         Public = false,
    ///         Name = "lan_example_2",
    ///     });
    /// 
    ///     var autoscalingTargetGroup = new Ionoscloud.Compute.TargetGroup("autoscaling_target_group", new()
    ///     {
    ///         Name = "Target Group Example",
    ///         Algorithm = "ROUND_ROBIN",
    ///         Protocol = "HTTP",
    ///     });
    /// 
    ///     var serverImagePassword = new Random.Index.Password("server_image_password", new()
    ///     {
    ///         Length = 16,
    ///         Special = false,
    ///     });
    /// 
    ///     var autoscalingGroupExample = new Ionoscloud.Autoscaling.Group("autoscaling_group_example", new()
    ///     {
    ///         DatacenterId = datacenterExample.Id,
    ///         MaxReplicaCount = 2,
    ///         MinReplicaCount = 1,
    ///         Name = "autoscaling_group_example",
    ///         Policy = new Ionoscloud.Autoscaling.Inputs.GroupPolicyArgs
    ///         {
    ///             Metric = "INSTANCE_CPU_UTILIZATION_AVERAGE",
    ///             Range = "PT24H",
    ///             ScaleInAction = new Ionoscloud.Autoscaling.Inputs.GroupPolicyScaleInActionArgs
    ///             {
    ///                 Amount = 1,
    ///                 AmountType = "ABSOLUTE",
    ///                 TerminationPolicyType = "OLDEST_SERVER_FIRST",
    ///                 CooldownPeriod = "PT5M",
    ///                 DeleteVolumes = true,
    ///             },
    ///             ScaleInThreshold = 33,
    ///             ScaleOutAction = new Ionoscloud.Autoscaling.Inputs.GroupPolicyScaleOutActionArgs
    ///             {
    ///                 Amount = 1,
    ///                 AmountType = "ABSOLUTE",
    ///                 CooldownPeriod = "PT5M",
    ///             },
    ///             ScaleOutThreshold = 77,
    ///             Unit = "PER_HOUR",
    ///         },
    ///         ReplicaConfiguration = new Ionoscloud.Autoscaling.Inputs.GroupReplicaConfigurationArgs
    ///         {
    ///             AvailabilityZone = "AUTO",
    ///             Cores = 2,
    ///             CpuFamily = "INTEL_SKYLAKE",
    ///             Ram = 2048,
    ///             Nics = new[]
    ///             {
    ///                 new Ionoscloud.Autoscaling.Inputs.GroupReplicaConfigurationNicArgs
    ///                 {
    ///                     Lan = lanExample1.Id,
    ///                     Name = "nic_example_1",
    ///                     Dhcp = true,
    ///                 },
    ///                 new Ionoscloud.Autoscaling.Inputs.GroupReplicaConfigurationNicArgs
    ///                 {
    ///                     Lan = lanExample2.Id,
    ///                     Name = "nic_example_2",
    ///                     Dhcp = true,
    ///                     FirewallActive = true,
    ///                     FirewallType = "INGRESS",
    ///                     FirewallRules = new[]
    ///                     {
    ///                         new Ionoscloud.Autoscaling.Inputs.GroupReplicaConfigurationNicFirewallRuleArgs
    ///                         {
    ///                             Name = "rule_1",
    ///                             Protocol = "TCP",
    ///                             PortRangeStart = 1,
    ///                             PortRangeEnd = 1000,
    ///                             Type = "INGRESS",
    ///                         },
    ///                     },
    ///                     FlowLogs = new[]
    ///                     {
    ///                         new Ionoscloud.Autoscaling.Inputs.GroupReplicaConfigurationNicFlowLogArgs
    ///                         {
    ///                             Name = "flow_log_1",
    ///                             Bucket = "test-de-bucket",
    ///                             Action = "ALL",
    ///                             Direction = "BIDIRECTIONAL",
    ///                         },
    ///                     },
    ///                     TargetGroup = new Ionoscloud.Autoscaling.Inputs.GroupReplicaConfigurationNicTargetGroupArgs
    ///                     {
    ///                         TargetGroupId = autoscalingTargetGroup.Id,
    ///                         Port = 80,
    ///                         Weight = 50,
    ///                     },
    ///                 },
    ///             },
    ///             Volumes = new[]
    ///             {
    ///                 new Ionoscloud.Autoscaling.Inputs.GroupReplicaConfigurationVolumeArgs
    ///                 {
    ///                     ImageAlias = "ubuntu:latest",
    ///                     Name = "volume_example",
    ///                     Size = 10,
    ///                     Type = "HDD",
    ///                     UserData = "ZWNobyAiSGVsbG8sIFdvcmxkIgo=",
    ///                     ImagePassword = serverImagePassword.Result,
    ///                     BootOrder = "AUTO",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [IonoscloudResourceType("ionoscloud:autoscaling/group:Group")]
    public partial class Group : global::Pulumi.CustomResource
    {
        /// <summary>
        /// [string] Unique identifier for the resource
        /// </summary>
        [Output("datacenterId")]
        public Output<string> DatacenterId { get; private set; } = null!;

        /// <summary>
        /// Location of the data center.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// [int] The maximum value for the number of replicas on a VM Auto Scaling Group. Must be &gt;= 0 and &lt;= 200. Will be enforced for both automatic and manual changes.
        /// </summary>
        [Output("maxReplicaCount")]
        public Output<int> MaxReplicaCount { get; private set; } = null!;

        /// <summary>
        /// [int] The minimum value for the number of replicas on a VM Auto Scaling Group. Must be &gt;= 0 and &lt;= 200. Will be enforced for both automatic and manual changes.
        /// </summary>
        [Output("minReplicaCount")]
        public Output<int> MinReplicaCount { get; private set; } = null!;

        /// <summary>
        /// [string] User-defined name for the Autoscaling Group.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// [List] Specifies the behavior of this Autoscaling Group. A policy consists of Triggers and Actions, whereby an Action is some kind of automated behavior, and a Trigger is defined by the circumstances under which the Action is triggered. Currently, two separate Actions, namely Scaling In and Out are supported, triggered through Thresholds defined on a given Metric.
        /// </summary>
        [Output("policy")]
        public Output<Outputs.GroupPolicy> Policy { get; private set; } = null!;

        /// <summary>
        /// [List]
        /// </summary>
        [Output("replicaConfiguration")]
        public Output<Outputs.GroupReplicaConfiguration> ReplicaConfiguration { get; private set; } = null!;


        /// <summary>
        /// Create a Group resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Group(string name, GroupArgs args, CustomResourceOptions? options = null)
            : base("ionoscloud:autoscaling/group:Group", name, args ?? new GroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Group(string name, Input<string> id, GroupState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:autoscaling/group:Group", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Group resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Group Get(string name, Input<string> id, GroupState? state = null, CustomResourceOptions? options = null)
        {
            return new Group(name, id, state, options);
        }
    }

    public sealed class GroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// [string] Unique identifier for the resource
        /// </summary>
        [Input("datacenterId", required: true)]
        public Input<string> DatacenterId { get; set; } = null!;

        /// <summary>
        /// [int] The maximum value for the number of replicas on a VM Auto Scaling Group. Must be &gt;= 0 and &lt;= 200. Will be enforced for both automatic and manual changes.
        /// </summary>
        [Input("maxReplicaCount", required: true)]
        public Input<int> MaxReplicaCount { get; set; } = null!;

        /// <summary>
        /// [int] The minimum value for the number of replicas on a VM Auto Scaling Group. Must be &gt;= 0 and &lt;= 200. Will be enforced for both automatic and manual changes.
        /// </summary>
        [Input("minReplicaCount", required: true)]
        public Input<int> MinReplicaCount { get; set; } = null!;

        /// <summary>
        /// [string] User-defined name for the Autoscaling Group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// [List] Specifies the behavior of this Autoscaling Group. A policy consists of Triggers and Actions, whereby an Action is some kind of automated behavior, and a Trigger is defined by the circumstances under which the Action is triggered. Currently, two separate Actions, namely Scaling In and Out are supported, triggered through Thresholds defined on a given Metric.
        /// </summary>
        [Input("policy", required: true)]
        public Input<Inputs.GroupPolicyArgs> Policy { get; set; } = null!;

        /// <summary>
        /// [List]
        /// </summary>
        [Input("replicaConfiguration", required: true)]
        public Input<Inputs.GroupReplicaConfigurationArgs> ReplicaConfiguration { get; set; } = null!;

        public GroupArgs()
        {
        }
        public static new GroupArgs Empty => new GroupArgs();
    }

    public sealed class GroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// [string] Unique identifier for the resource
        /// </summary>
        [Input("datacenterId")]
        public Input<string>? DatacenterId { get; set; }

        /// <summary>
        /// Location of the data center.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// [int] The maximum value for the number of replicas on a VM Auto Scaling Group. Must be &gt;= 0 and &lt;= 200. Will be enforced for both automatic and manual changes.
        /// </summary>
        [Input("maxReplicaCount")]
        public Input<int>? MaxReplicaCount { get; set; }

        /// <summary>
        /// [int] The minimum value for the number of replicas on a VM Auto Scaling Group. Must be &gt;= 0 and &lt;= 200. Will be enforced for both automatic and manual changes.
        /// </summary>
        [Input("minReplicaCount")]
        public Input<int>? MinReplicaCount { get; set; }

        /// <summary>
        /// [string] User-defined name for the Autoscaling Group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// [List] Specifies the behavior of this Autoscaling Group. A policy consists of Triggers and Actions, whereby an Action is some kind of automated behavior, and a Trigger is defined by the circumstances under which the Action is triggered. Currently, two separate Actions, namely Scaling In and Out are supported, triggered through Thresholds defined on a given Metric.
        /// </summary>
        [Input("policy")]
        public Input<Inputs.GroupPolicyGetArgs>? Policy { get; set; }

        /// <summary>
        /// [List]
        /// </summary>
        [Input("replicaConfiguration")]
        public Input<Inputs.GroupReplicaConfigurationGetArgs>? ReplicaConfiguration { get; set; }

        public GroupState()
        {
        }
        public static new GroupState Empty => new GroupState();
    }
}
