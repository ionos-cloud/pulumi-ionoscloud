// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Ionoscloud.Pulumi.Ionoscloud.K8s
{
    public static class GetCluster
    {
        /// <summary>
        /// The **k8s Cluster data source** can be used to search for and return existing k8s clusters.
        /// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
        /// When this happens, please refine your search string so that it is specific enough to return only one result.
        /// 
        /// ## Example Usage
        /// 
        /// ### By ID
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.K8s.GetCluster.Invoke(new()
        ///     {
        ///         Id = "cluster_id",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### By Name
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.K8s.GetCluster.Invoke(new()
        ///     {
        ///         Name = "K8s Cluster Example",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Example of accessing a kubernetes cluster using the user's token
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCluster = new Ionoscloud.K8s.Cluster("test", new()
        ///     {
        ///         Name = "test_cluster",
        ///         MaintenanceWindow = new Ionoscloud.K8s.Inputs.ClusterMaintenanceWindowArgs
        ///         {
        ///             DayOfTheWeek = "Saturday",
        ///             Time = "03:58:25Z",
        ///         },
        ///     });
        /// 
        ///     var test = Ionoscloud.K8s.GetCluster.Invoke(new()
        ///     {
        ///         Name = "test_cluster",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Example of accessing a kubernetes cluster using the token from the config
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCluster = new Ionoscloud.K8s.Cluster("test", new()
        ///     {
        ///         Name = "test_cluster",
        ///         MaintenanceWindow = new Ionoscloud.K8s.Inputs.ClusterMaintenanceWindowArgs
        ///         {
        ///             DayOfTheWeek = "Saturday",
        ///             Time = "03:58:25Z",
        ///         },
        ///     });
        /// 
        ///     var test = Ionoscloud.K8s.GetCluster.Invoke(new()
        ///     {
        ///         Name = "test_cluster",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetClusterResult> InvokeAsync(GetClusterArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClusterResult>("ionoscloud:k8s/getCluster:getCluster", args ?? new GetClusterArgs(), options.WithDefaults());

        /// <summary>
        /// The **k8s Cluster data source** can be used to search for and return existing k8s clusters.
        /// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
        /// When this happens, please refine your search string so that it is specific enough to return only one result.
        /// 
        /// ## Example Usage
        /// 
        /// ### By ID
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.K8s.GetCluster.Invoke(new()
        ///     {
        ///         Id = "cluster_id",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### By Name
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.K8s.GetCluster.Invoke(new()
        ///     {
        ///         Name = "K8s Cluster Example",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Example of accessing a kubernetes cluster using the user's token
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCluster = new Ionoscloud.K8s.Cluster("test", new()
        ///     {
        ///         Name = "test_cluster",
        ///         MaintenanceWindow = new Ionoscloud.K8s.Inputs.ClusterMaintenanceWindowArgs
        ///         {
        ///             DayOfTheWeek = "Saturday",
        ///             Time = "03:58:25Z",
        ///         },
        ///     });
        /// 
        ///     var test = Ionoscloud.K8s.GetCluster.Invoke(new()
        ///     {
        ///         Name = "test_cluster",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Example of accessing a kubernetes cluster using the token from the config
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCluster = new Ionoscloud.K8s.Cluster("test", new()
        ///     {
        ///         Name = "test_cluster",
        ///         MaintenanceWindow = new Ionoscloud.K8s.Inputs.ClusterMaintenanceWindowArgs
        ///         {
        ///             DayOfTheWeek = "Saturday",
        ///             Time = "03:58:25Z",
        ///         },
        ///     });
        /// 
        ///     var test = Ionoscloud.K8s.GetCluster.Invoke(new()
        ///     {
        ///         Name = "test_cluster",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetClusterResult> Invoke(GetClusterInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterResult>("ionoscloud:k8s/getCluster:getCluster", args ?? new GetClusterInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The **k8s Cluster data source** can be used to search for and return existing k8s clusters.
        /// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
        /// When this happens, please refine your search string so that it is specific enough to return only one result.
        /// 
        /// ## Example Usage
        /// 
        /// ### By ID
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.K8s.GetCluster.Invoke(new()
        ///     {
        ///         Id = "cluster_id",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### By Name
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.K8s.GetCluster.Invoke(new()
        ///     {
        ///         Name = "K8s Cluster Example",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Example of accessing a kubernetes cluster using the user's token
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCluster = new Ionoscloud.K8s.Cluster("test", new()
        ///     {
        ///         Name = "test_cluster",
        ///         MaintenanceWindow = new Ionoscloud.K8s.Inputs.ClusterMaintenanceWindowArgs
        ///         {
        ///             DayOfTheWeek = "Saturday",
        ///             Time = "03:58:25Z",
        ///         },
        ///     });
        /// 
        ///     var test = Ionoscloud.K8s.GetCluster.Invoke(new()
        ///     {
        ///         Name = "test_cluster",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Example of accessing a kubernetes cluster using the token from the config
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCluster = new Ionoscloud.K8s.Cluster("test", new()
        ///     {
        ///         Name = "test_cluster",
        ///         MaintenanceWindow = new Ionoscloud.K8s.Inputs.ClusterMaintenanceWindowArgs
        ///         {
        ///             DayOfTheWeek = "Saturday",
        ///             Time = "03:58:25Z",
        ///         },
        ///     });
        /// 
        ///     var test = Ionoscloud.K8s.GetCluster.Invoke(new()
        ///     {
        ///         Name = "test_cluster",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetClusterResult> Invoke(GetClusterInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterResult>("ionoscloud:k8s/getCluster:getCluster", args ?? new GetClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the cluster you want to search for.
        /// 
        /// Either `name` or `id` must be provided. If none, or both are provided, the datasource will return an error.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Name of an existing cluster that you want to search for.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetClusterArgs()
        {
        }
        public static new GetClusterArgs Empty => new GetClusterArgs();
    }

    public sealed class GetClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the cluster you want to search for.
        /// 
        /// Either `name` or `id` must be provided. If none, or both are provided, the datasource will return an error.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Name of an existing cluster that you want to search for.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetClusterInvokeArgs()
        {
        }
        public static new GetClusterInvokeArgs Empty => new GetClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetClusterResult
    {
        /// <summary>
        /// access to the K8s API server is restricted to these CIDRs
        /// </summary>
        public readonly ImmutableArray<string> ApiSubnetAllowLists;
        /// <summary>
        /// A list of available versions for upgrading the cluster
        /// </summary>
        public readonly ImmutableArray<string> AvailableUpgradeVersions;
        /// <summary>
        /// base64 decoded cluster certificate authority data (provided as an attribute for direct use)
        /// </summary>
        public readonly string CaCrt;
        /// <summary>
        /// structured kubernetes config consisting of a list with 1 item with the following fields:
        /// * api_version - Kubernetes API Version
        /// * kind - "Config"
        /// * current-context - string
        /// * clusters - list of
        /// * name - name of cluster
        /// * cluster - map of
        /// * certificate-authority-data - **base64 decoded** cluster CA data
        /// * server -  server address in the form `https://host:port`
        /// * contexts - list of
        /// * name - context name
        /// * context - map of
        /// * cluster - cluster name
        /// * user - cluster user
        /// * users - list of
        /// * name - user name
        /// * user - map of
        /// * token - user token used for authentication
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterConfigResult> Configs;
        /// <summary>
        /// id of the cluster
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Kubernetes version
        /// </summary>
        public readonly string K8sVersion;
        /// <summary>
        /// Kubernetes configuration
        /// </summary>
        public readonly string KubeConfig;
        /// <summary>
        /// this attribute is mandatory if the cluster is private.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// A maintenance window comprise of a day of the week and a time for maintenance to be allowed
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterMaintenanceWindowResult> MaintenanceWindows;
        /// <summary>
        /// name of the cluster
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// the NAT gateway IP of the cluster if the cluster is private.
        /// </summary>
        public readonly string NatGatewayIp;
        /// <summary>
        /// list of the IDs of the node pools in this cluster
        /// </summary>
        public readonly ImmutableArray<string> NodePools;
        /// <summary>
        /// the node subnet of the cluster, if the cluster is private.
        /// </summary>
        public readonly string NodeSubnet;
        /// <summary>
        /// indicates if the cluster is public or private.
        /// </summary>
        public readonly bool Public;
        /// <summary>
        /// list of IONOS Object Storage bucket configured for K8s usage
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterS3BucketResult> S3Buckets;
        /// <summary>
        /// cluster server (same as `config[0].clusters[0].cluster.server` but provided as an attribute for ease of use)
        /// </summary>
        public readonly string Server;
        /// <summary>
        /// one of "AVAILABLE",
        /// "INACTIVE",
        /// "BUSY",
        /// "DEPLOYING",
        /// "ACTIVE",
        /// "FAILED",
        /// "SUSPENDED",
        /// "FAILED_SUSPENDED",
        /// "UPDATING",
        /// "FAILED_UPDATING",
        /// "DESTROYING",
        /// "FAILED_DESTROYING",
        /// "TERMINATED"
        /// </summary>
        public readonly string State;
        /// <summary>
        /// a convenience map to be search the token of a specific user
        /// - key - is the user name
        /// - value - is the token
        /// </summary>
        public readonly ImmutableDictionary<string, string> UserTokens;
        /// <summary>
        /// A list of versions that may be used for node pools under this cluster
        /// </summary>
        public readonly ImmutableArray<string> ViableNodePoolVersions;

        [OutputConstructor]
        private GetClusterResult(
            ImmutableArray<string> apiSubnetAllowLists,

            ImmutableArray<string> availableUpgradeVersions,

            string caCrt,

            ImmutableArray<Outputs.GetClusterConfigResult> configs,

            string id,

            string k8sVersion,

            string kubeConfig,

            string location,

            ImmutableArray<Outputs.GetClusterMaintenanceWindowResult> maintenanceWindows,

            string name,

            string natGatewayIp,

            ImmutableArray<string> nodePools,

            string nodeSubnet,

            bool @public,

            ImmutableArray<Outputs.GetClusterS3BucketResult> s3Buckets,

            string server,

            string state,

            ImmutableDictionary<string, string> userTokens,

            ImmutableArray<string> viableNodePoolVersions)
        {
            ApiSubnetAllowLists = apiSubnetAllowLists;
            AvailableUpgradeVersions = availableUpgradeVersions;
            CaCrt = caCrt;
            Configs = configs;
            Id = id;
            K8sVersion = k8sVersion;
            KubeConfig = kubeConfig;
            Location = location;
            MaintenanceWindows = maintenanceWindows;
            Name = name;
            NatGatewayIp = natGatewayIp;
            NodePools = nodePools;
            NodeSubnet = nodeSubnet;
            Public = @public;
            S3Buckets = s3Buckets;
            Server = server;
            State = state;
            UserTokens = userTokens;
            ViableNodePoolVersions = viableNodePoolVersions;
        }
    }
}
