// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Ionoscloud.Pulumi.Ionoscloud.Dsaas
{
    public static class GetNodePools
    {
        /// <summary>
        /// The **Dataplatform Node Pools Data Source** can be used to search for and return a list of existing Dataplatform Node Pools under a Dataplatform Cluster.
        /// 
        /// ## Example Usage
        /// 
        /// ### All Node Pools under a Cluster ID
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Dsaas.GetNodePools.Invoke(new()
        ///     {
        ///         ClusterId = "cluster_id",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### By Name
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Dsaas.GetNodePools.Invoke(new()
        ///     {
        ///         ClusterId = "cluster_id",
        ///         Name = "Dataplatform_Node_Pool_Example",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### By Name with Partial Match
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Dsaas.GetNodePools.Invoke(new()
        ///     {
        ///         ClusterId = "cluster_id",
        ///         Name = "_Example",
        ///         PartialMatch = true,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNodePoolsResult> InvokeAsync(GetNodePoolsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNodePoolsResult>("ionoscloud:dsaas/getNodePools:getNodePools", args ?? new GetNodePoolsArgs(), options.WithDefaults());

        /// <summary>
        /// The **Dataplatform Node Pools Data Source** can be used to search for and return a list of existing Dataplatform Node Pools under a Dataplatform Cluster.
        /// 
        /// ## Example Usage
        /// 
        /// ### All Node Pools under a Cluster ID
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Dsaas.GetNodePools.Invoke(new()
        ///     {
        ///         ClusterId = "cluster_id",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### By Name
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Dsaas.GetNodePools.Invoke(new()
        ///     {
        ///         ClusterId = "cluster_id",
        ///         Name = "Dataplatform_Node_Pool_Example",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### By Name with Partial Match
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Dsaas.GetNodePools.Invoke(new()
        ///     {
        ///         ClusterId = "cluster_id",
        ///         Name = "_Example",
        ///         PartialMatch = true,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNodePoolsResult> Invoke(GetNodePoolsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNodePoolsResult>("ionoscloud:dsaas/getNodePools:getNodePools", args ?? new GetNodePoolsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The **Dataplatform Node Pools Data Source** can be used to search for and return a list of existing Dataplatform Node Pools under a Dataplatform Cluster.
        /// 
        /// ## Example Usage
        /// 
        /// ### All Node Pools under a Cluster ID
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Dsaas.GetNodePools.Invoke(new()
        ///     {
        ///         ClusterId = "cluster_id",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### By Name
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Dsaas.GetNodePools.Invoke(new()
        ///     {
        ///         ClusterId = "cluster_id",
        ///         Name = "Dataplatform_Node_Pool_Example",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### By Name with Partial Match
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Dsaas.GetNodePools.Invoke(new()
        ///     {
        ///         ClusterId = "cluster_id",
        ///         Name = "_Example",
        ///         PartialMatch = true,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNodePoolsResult> Invoke(GetNodePoolsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNodePoolsResult>("ionoscloud:dsaas/getNodePools:getNodePools", args ?? new GetNodePoolsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNodePoolsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the cluster the searched node pool is part of.
        /// </summary>
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        /// <summary>
        /// Name of an existing cluster that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partial_match` parameter is not set to true.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Whether partial matching is allowed or not when using name argument. Default value is false.
        /// </summary>
        [Input("partialMatch")]
        public bool? PartialMatch { get; set; }

        public GetNodePoolsArgs()
        {
        }
        public static new GetNodePoolsArgs Empty => new GetNodePoolsArgs();
    }

    public sealed class GetNodePoolsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the cluster the searched node pool is part of.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// Name of an existing cluster that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partial_match` parameter is not set to true.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether partial matching is allowed or not when using name argument. Default value is false.
        /// </summary>
        [Input("partialMatch")]
        public Input<bool>? PartialMatch { get; set; }

        public GetNodePoolsInvokeArgs()
        {
        }
        public static new GetNodePoolsInvokeArgs Empty => new GetNodePoolsInvokeArgs();
    }


    [OutputType]
    public sealed class GetNodePoolsResult
    {
        /// <summary>
        /// ID of the cluster the searched node pool is part of.
        /// </summary>
        public readonly string ClusterId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Name;
        /// <summary>
        /// List of Node Pools - See the Node Pool section.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNodePoolsNodePoolResult> NodePools;
        public readonly bool? PartialMatch;

        [OutputConstructor]
        private GetNodePoolsResult(
            string clusterId,

            string id,

            string? name,

            ImmutableArray<Outputs.GetNodePoolsNodePoolResult> nodePools,

            bool? partialMatch)
        {
            ClusterId = clusterId;
            Id = id;
            Name = name;
            NodePools = nodePools;
            PartialMatch = partialMatch;
        }
    }
}
