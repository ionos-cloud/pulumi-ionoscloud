// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Ionoscloud.Pulumi.Ionoscloud.Compute
{
    /// <summary>
    /// Manages the selection of a boot device for IonosCloud Servers.
    /// 
    /// ## Example Usage
    /// 
    /// The boot device of a `ionoscloud.compute.Server`, `ionoscloud.compute.VCPUServer` or `ionoscloud.compute.CubeServer` can be selected with this resource.
    /// Deleting this resource will revert the boot device back to the default volume, which is the first inline volume created together with the server.
    /// This resource also allows switching between a `volume` and a `ionoscloud.compute.getImage` CDROM. Note that CDROM images are detached after they are no longer set as boot devices.
    /// 
    /// ### Select an external volume
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ionoscloud = Ionoscloud.Pulumi.Ionoscloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleServer = new Ionoscloud.Compute.Server("example", new()
    ///     {
    ///         Name = "Server Example",
    ///         AvailabilityZone = "ZONE_2",
    ///         ImageName = "ubuntu:latest",
    ///         Cores = 2,
    ///         Ram = 2048,
    ///         ImagePassword = serverImagePassword.Result,
    ///         DatacenterId = exampleIonoscloudDatacenter.Id,
    ///         Volume = new Ionoscloud.Compute.Inputs.ServerVolumeArgs
    ///         {
    ///             Name = "Inline Updated",
    ///             Size = 20,
    ///             DiskType = "SSD Standard",
    ///             Bus = "VIRTIO",
    ///             AvailabilityZone = "AUTO",
    ///         },
    ///         Nic = new Ionoscloud.Compute.Inputs.ServerNicArgs
    ///         {
    ///             Lan = exampleIonoscloudLan.Id,
    ///             Name = "Nic Example",
    ///             Dhcp = true,
    ///             FirewallActive = true,
    ///         },
    ///     });
    /// 
    ///     var exampleVolume = new Ionoscloud.Compute.Volume("example", new()
    ///     {
    ///         ServerId = exampleServer.Id,
    ///         DatacenterId = exampleIonoscloudDatacenter.Id,
    ///         Name = "External 1",
    ///         Size = 10,
    ///         DiskType = "HDD",
    ///         AvailabilityZone = "AUTO",
    ///         ImageName = "debian:latest",
    ///         ImagePassword = serverImagePassword.Result,
    ///     });
    /// 
    ///     var example = new Ionoscloud.Compute.BootDeviceSelection("example", new()
    ///     {
    ///         DatacenterId = exampleIonoscloudDatacenter.Id,
    ///         ServerId = exampleServer.Id,
    ///         BootDeviceId = exampleVolume.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Select an inline volume again
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ionoscloud = Ionoscloud.Pulumi.Ionoscloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleServer = new Ionoscloud.Compute.Server("example", new()
    ///     {
    ///         Name = "Server Example",
    ///         AvailabilityZone = "ZONE_2",
    ///         ImageName = "ubuntu:latest",
    ///         Cores = 2,
    ///         Ram = 2048,
    ///         ImagePassword = serverImagePassword.Result,
    ///         DatacenterId = exampleIonoscloudDatacenter.Id,
    ///         Volume = new Ionoscloud.Compute.Inputs.ServerVolumeArgs
    ///         {
    ///             Name = "Inline Updated",
    ///             Size = 20,
    ///             DiskType = "SSD Standard",
    ///             Bus = "VIRTIO",
    ///             AvailabilityZone = "AUTO",
    ///         },
    ///         Nic = new Ionoscloud.Compute.Inputs.ServerNicArgs
    ///         {
    ///             Lan = exampleIonoscloudLan.Id,
    ///             Name = "Nic Example",
    ///             Dhcp = true,
    ///             FirewallActive = true,
    ///         },
    ///     });
    /// 
    ///     var example = new Ionoscloud.Compute.BootDeviceSelection("example", new()
    ///     {
    ///         DatacenterId = exampleIonoscloudDatacenter.Id,
    ///         ServerId = exampleServer.Id,
    ///         BootDeviceId = exampleServer.InlineVolumeIds.Apply(inlineVolumeIds =&gt; inlineVolumeIds[0]),
    ///     });
    /// 
    ///     var exampleVolume = new Ionoscloud.Compute.Volume("example", new()
    ///     {
    ///         ServerId = exampleServer.Id,
    ///         DatacenterId = exampleIonoscloudDatacenter.Id,
    ///         Name = "External 1",
    ///         Size = 10,
    ///         DiskType = "HDD",
    ///         AvailabilityZone = "AUTO",
    ///         ImageName = "debian:latest",
    ///         ImagePassword = serverImagePassword.Result,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Select a CDROM image
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ionoscloud = Ionoscloud.Pulumi.Ionoscloud;
    /// using Ionoscloud = Pulumi.Ionoscloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleServer = new Ionoscloud.Compute.Server("example", new()
    ///     {
    ///         Name = "Server Example",
    ///         AvailabilityZone = "ZONE_2",
    ///         ImageName = "ubuntu:latest",
    ///         Cores = 2,
    ///         Ram = 2048,
    ///         ImagePassword = serverImagePassword.Result,
    ///         DatacenterId = exampleIonoscloudDatacenter.Id,
    ///         Volume = new Ionoscloud.Compute.Inputs.ServerVolumeArgs
    ///         {
    ///             Name = "Inline Updated",
    ///             Size = 20,
    ///             DiskType = "SSD Standard",
    ///             Bus = "VIRTIO",
    ///             AvailabilityZone = "AUTO",
    ///         },
    ///         Nic = new Ionoscloud.Compute.Inputs.ServerNicArgs
    ///         {
    ///             Lan = exampleIonoscloudLan.Id,
    ///             Name = "Nic Example",
    ///             Dhcp = true,
    ///             FirewallActive = true,
    ///         },
    ///     });
    /// 
    ///     var example = Ionoscloud.Compute.GetImage.Invoke(new()
    ///     {
    ///         Name = "ubuntu-20.04",
    ///         Location = "de/txl",
    ///         Type = "CDROM",
    ///     });
    /// 
    ///     var exampleBootDeviceSelection = new Ionoscloud.Compute.BootDeviceSelection("example", new()
    ///     {
    ///         DatacenterId = exampleIonoscloudDatacenter.Id,
    ///         ServerId = exampleServer.InlineVolumeIds.Apply(inlineVolumeIds =&gt; inlineVolumeIds[0]),
    ///         BootDeviceId = example.Apply(getImageResult =&gt; getImageResult.Id),
    ///     });
    /// 
    ///     var exampleVolume = new Ionoscloud.Compute.Volume("example", new()
    ///     {
    ///         ServerId = exampleServer.Id,
    ///         DatacenterId = exampleIonoscloudDatacenter.Id,
    ///         Name = "External 1",
    ///         Size = 10,
    ///         DiskType = "HDD",
    ///         AvailabilityZone = "AUTO",
    ///         ImageName = "debian:latest",
    ///         ImagePassword = serverImagePassword.Result,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Perform a network boot
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ionoscloud = Ionoscloud.Pulumi.Ionoscloud;
    /// using Ionoscloud = Pulumi.Ionoscloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleServer = new Ionoscloud.Compute.Server("example", new()
    ///     {
    ///         Name = "Server Example",
    ///         AvailabilityZone = "ZONE_2",
    ///         ImageName = "ubuntu:latest",
    ///         Cores = 2,
    ///         Ram = 2048,
    ///         ImagePassword = serverImagePassword.Result,
    ///         DatacenterId = exampleIonoscloudDatacenter.Id,
    ///         Volume = new Ionoscloud.Compute.Inputs.ServerVolumeArgs
    ///         {
    ///             Name = "Inline volume",
    ///             Size = 20,
    ///             DiskType = "SSD Standard",
    ///             Bus = "VIRTIO",
    ///             AvailabilityZone = "AUTO",
    ///         },
    ///         Nic = new Ionoscloud.Compute.Inputs.ServerNicArgs
    ///         {
    ///             Lan = exampleIonoscloudLan.Id,
    ///             Name = "Nic Example",
    ///             Dhcp = true,
    ///             FirewallActive = true,
    ///         },
    ///     });
    /// 
    ///     var exampleBootDeviceSelection = new Ionoscloud.Compute.BootDeviceSelection("example", new()
    ///     {
    ///         DatacenterId = exampleIonoscloudDatacenter.Id,
    ///         ServerId = exampleServer.InlineVolumeIds.Apply(inlineVolumeIds =&gt; inlineVolumeIds[0]),
    ///     });
    /// 
    ///     var exampleVolume = new Ionoscloud.Compute.Volume("example", new()
    ///     {
    ///         ServerId = exampleServer.Id,
    ///         DatacenterId = exampleIonoscloudDatacenter.Id,
    ///         Name = "External 1",
    ///         Size = 10,
    ///         DiskType = "HDD",
    ///         AvailabilityZone = "AUTO",
    ///         ImageName = "debian:latest",
    ///         ImagePassword = serverImagePassword.Result,
    ///     });
    /// 
    ///     var example = Ionoscloud.Compute.GetImage.Invoke(new()
    ///     {
    ///         Name = "ubuntu-20.04",
    ///         Location = "de/txl",
    ///         Type = "CDROM",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [IonoscloudResourceType("ionoscloud:compute/bootDeviceSelection:BootDeviceSelection")]
    public partial class BootDeviceSelection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// [string] The ID of a bootable device such as a volume or an image data source. If this field is omitted from the configuration, the VM will be restarted with no primary boot device, and it will enter the PXE shell for network booting. 
        /// ***Note***: If the network booting process started by the PXE shell fails, the VM will still boot into the image of the attached storage as a fallback. This behavior imitates the "Boot from Network" option from [DCD](https://dcd.ionos.com/).
        /// </summary>
        [Output("bootDeviceId")]
        public Output<string?> BootDeviceId { get; private set; } = null!;

        /// <summary>
        /// [string] The ID of a Virtual Data Center.
        /// </summary>
        [Output("datacenterId")]
        public Output<string> DatacenterId { get; private set; } = null!;

        /// <summary>
        /// ID of the first attached volume of the Server, which will be the default boot volume.
        /// </summary>
        [Output("defaultBootVolumeId")]
        public Output<string> DefaultBootVolumeId { get; private set; } = null!;

        /// <summary>
        /// [string] The ID of a server.
        /// </summary>
        [Output("serverId")]
        public Output<string> ServerId { get; private set; } = null!;


        /// <summary>
        /// Create a BootDeviceSelection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BootDeviceSelection(string name, BootDeviceSelectionArgs args, CustomResourceOptions? options = null)
            : base("ionoscloud:compute/bootDeviceSelection:BootDeviceSelection", name, args ?? new BootDeviceSelectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BootDeviceSelection(string name, Input<string> id, BootDeviceSelectionState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:compute/bootDeviceSelection:BootDeviceSelection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BootDeviceSelection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BootDeviceSelection Get(string name, Input<string> id, BootDeviceSelectionState? state = null, CustomResourceOptions? options = null)
        {
            return new BootDeviceSelection(name, id, state, options);
        }
    }

    public sealed class BootDeviceSelectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// [string] The ID of a bootable device such as a volume or an image data source. If this field is omitted from the configuration, the VM will be restarted with no primary boot device, and it will enter the PXE shell for network booting. 
        /// ***Note***: If the network booting process started by the PXE shell fails, the VM will still boot into the image of the attached storage as a fallback. This behavior imitates the "Boot from Network" option from [DCD](https://dcd.ionos.com/).
        /// </summary>
        [Input("bootDeviceId")]
        public Input<string>? BootDeviceId { get; set; }

        /// <summary>
        /// [string] The ID of a Virtual Data Center.
        /// </summary>
        [Input("datacenterId", required: true)]
        public Input<string> DatacenterId { get; set; } = null!;

        /// <summary>
        /// [string] The ID of a server.
        /// </summary>
        [Input("serverId", required: true)]
        public Input<string> ServerId { get; set; } = null!;

        public BootDeviceSelectionArgs()
        {
        }
        public static new BootDeviceSelectionArgs Empty => new BootDeviceSelectionArgs();
    }

    public sealed class BootDeviceSelectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// [string] The ID of a bootable device such as a volume or an image data source. If this field is omitted from the configuration, the VM will be restarted with no primary boot device, and it will enter the PXE shell for network booting. 
        /// ***Note***: If the network booting process started by the PXE shell fails, the VM will still boot into the image of the attached storage as a fallback. This behavior imitates the "Boot from Network" option from [DCD](https://dcd.ionos.com/).
        /// </summary>
        [Input("bootDeviceId")]
        public Input<string>? BootDeviceId { get; set; }

        /// <summary>
        /// [string] The ID of a Virtual Data Center.
        /// </summary>
        [Input("datacenterId")]
        public Input<string>? DatacenterId { get; set; }

        /// <summary>
        /// ID of the first attached volume of the Server, which will be the default boot volume.
        /// </summary>
        [Input("defaultBootVolumeId")]
        public Input<string>? DefaultBootVolumeId { get; set; }

        /// <summary>
        /// [string] The ID of a server.
        /// </summary>
        [Input("serverId")]
        public Input<string>? ServerId { get; set; }

        public BootDeviceSelectionState()
        {
        }
        public static new BootDeviceSelectionState Empty => new BootDeviceSelectionState();
    }
}
