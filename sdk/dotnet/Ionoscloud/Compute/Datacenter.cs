// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Ionoscloud.Pulumi.Ionoscloud.Compute
{
    /// <summary>
    /// Manages a Virtual **Data Center** on IonosCloud.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ionoscloud = Ionoscloud.Pulumi.Ionoscloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Ionoscloud.Compute.Datacenter("example", new()
    ///     {
    ///         Name = "Datacenter Example",
    ///         Location = "us/las",
    ///         Description = "datacenter description",
    ///         SecAuthProtection = false,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Attaching a NSG to a Datacenter
    /// 
    /// #### A single Network Security Group can be attached at any time to a Datacenter. To do this, use the `ionoscloud.nsg.DatacenterNsgSelection` and provide the IDs of the NSG and Datacenter to link them.
    /// #### Deleting the resource or setting the empty string for the `nsg_id` field will de-attach any previously linked NSG from the Datacenter.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ionoscloud = Ionoscloud.Pulumi.Ionoscloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Ionoscloud.Compute.Datacenter("example", new()
    ///     {
    ///         Name = "Datacenter NSG Example",
    ///         Location = "de/txl",
    ///     });
    /// 
    ///     var exampleNsg = new Ionoscloud.Nsg.Nsg("example", new()
    ///     {
    ///         Name = "Example NSG",
    ///         Description = "Example NSG Description",
    ///         DatacenterId = example.Id,
    ///     });
    /// 
    ///     var exampleDatacenterNsgSelection = new Ionoscloud.Nsg.DatacenterNsgSelection("example", new()
    ///     {
    ///         DatacenterId = example.Id,
    ///         NsgId = exampleNsg.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Resource Datacenter can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import ionoscloud:compute/datacenter:Datacenter mydc datacenter uuid
    /// ```
    /// </summary>
    [IonoscloudResourceType("ionoscloud:compute/datacenter:Datacenter")]
    public partial class Datacenter : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Array of features and CPU families available in a location
        /// </summary>
        [Output("cpuArchitectures")]
        public Output<ImmutableArray<Outputs.DatacenterCpuArchitecture>> CpuArchitectures { get; private set; } = null!;

        /// <summary>
        /// [string] Description for the Virtual Data Center.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// List of features supported by the location this data center is part of
        /// </summary>
        [Output("features")]
        public Output<ImmutableArray<string>> Features { get; private set; } = null!;

        /// <summary>
        /// The automatically-assigned /56 IPv6 CIDR block if IPv6 is enabled on this virtual data center
        /// </summary>
        [Output("ipv6CidrBlock")]
        public Output<string> Ipv6CidrBlock { get; private set; } = null!;

        /// <summary>
        /// [string] The regional location where the Virtual Data Center will be created. This argument is immutable.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// [string] The name of the Virtual Data Center.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// [bool] Boolean value representing if the data center requires extra protection e.g. two factor protection
        /// </summary>
        [Output("secAuthProtection")]
        public Output<bool?> SecAuthProtection { get; private set; } = null!;

        /// <summary>
        /// The version of that Data Center. Gets incremented with every change
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a Datacenter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Datacenter(string name, DatacenterArgs args, CustomResourceOptions? options = null)
            : base("ionoscloud:compute/datacenter:Datacenter", name, args ?? new DatacenterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Datacenter(string name, Input<string> id, DatacenterState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:compute/datacenter:Datacenter", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Datacenter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Datacenter Get(string name, Input<string> id, DatacenterState? state = null, CustomResourceOptions? options = null)
        {
            return new Datacenter(name, id, state, options);
        }
    }

    public sealed class DatacenterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// [string] Description for the Virtual Data Center.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// [string] The regional location where the Virtual Data Center will be created. This argument is immutable.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// [string] The name of the Virtual Data Center.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// [bool] Boolean value representing if the data center requires extra protection e.g. two factor protection
        /// </summary>
        [Input("secAuthProtection")]
        public Input<bool>? SecAuthProtection { get; set; }

        public DatacenterArgs()
        {
        }
        public static new DatacenterArgs Empty => new DatacenterArgs();
    }

    public sealed class DatacenterState : global::Pulumi.ResourceArgs
    {
        [Input("cpuArchitectures")]
        private InputList<Inputs.DatacenterCpuArchitectureGetArgs>? _cpuArchitectures;

        /// <summary>
        /// Array of features and CPU families available in a location
        /// </summary>
        public InputList<Inputs.DatacenterCpuArchitectureGetArgs> CpuArchitectures
        {
            get => _cpuArchitectures ?? (_cpuArchitectures = new InputList<Inputs.DatacenterCpuArchitectureGetArgs>());
            set => _cpuArchitectures = value;
        }

        /// <summary>
        /// [string] Description for the Virtual Data Center.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("features")]
        private InputList<string>? _features;

        /// <summary>
        /// List of features supported by the location this data center is part of
        /// </summary>
        public InputList<string> Features
        {
            get => _features ?? (_features = new InputList<string>());
            set => _features = value;
        }

        /// <summary>
        /// The automatically-assigned /56 IPv6 CIDR block if IPv6 is enabled on this virtual data center
        /// </summary>
        [Input("ipv6CidrBlock")]
        public Input<string>? Ipv6CidrBlock { get; set; }

        /// <summary>
        /// [string] The regional location where the Virtual Data Center will be created. This argument is immutable.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// [string] The name of the Virtual Data Center.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// [bool] Boolean value representing if the data center requires extra protection e.g. two factor protection
        /// </summary>
        [Input("secAuthProtection")]
        public Input<bool>? SecAuthProtection { get; set; }

        /// <summary>
        /// The version of that Data Center. Gets incremented with every change
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public DatacenterState()
        {
        }
        public static new DatacenterState Empty => new DatacenterState();
    }
}
