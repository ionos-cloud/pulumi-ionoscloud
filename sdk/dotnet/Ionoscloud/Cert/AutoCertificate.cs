// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Ionoscloud.Pulumi.Ionoscloud.Cert
{
    /// <summary>
    /// Manages a **CM AutoCertificate**.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ionoscloud = Ionoscloud.Pulumi.Ionoscloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Ionoscloud.Cert.AutoCertificateProvider("example", new()
    ///     {
    ///         Name = "Let's Encrypt",
    ///         Email = "user@example.com",
    ///         Location = "de/fra",
    ///         Server = "https://acme-v02.api.letsencrypt.org/directory",
    ///         ExternalAccountBinding = new Ionoscloud.Cert.Inputs.AutoCertificateProviderExternalAccountBindingArgs
    ///         {
    ///             KeyId = "some-key-id",
    ///             KeySecret = "secret",
    ///         },
    ///     });
    /// 
    ///     var exampleAutoCertificate = new Ionoscloud.Cert.AutoCertificate("example", new()
    ///     {
    ///         ProviderId = example.Id,
    ///         CommonName = "www.example.com",
    ///         Location = example.Location,
    ///         KeyAlgorithm = "rsa4096",
    ///         Name = "My Auto renewed certificate",
    ///         SubjectAlternativeNames = new[]
    ///         {
    ///             "app.example.com",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The resource can be imported using the `auto_certificate_id` and the `location`, separated by `:`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import ionoscloud:cert/autoCertificate:AutoCertificate example location:auto_certificate_id
    /// ```
    /// </summary>
    [IonoscloudResourceType("ionoscloud:cert/autoCertificate:AutoCertificate")]
    public partial class AutoCertificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// [string] The common name (DNS) of the certificate to issue. The common name needs to be part of a zone in IONOS Cloud DNS.
        /// </summary>
        [Output("commonName")]
        public Output<string> CommonName { get; private set; } = null!;

        /// <summary>
        /// [string] The key algorithm used to generate the certificate.
        /// </summary>
        [Output("keyAlgorithm")]
        public Output<string> KeyAlgorithm { get; private set; } = null!;

        /// <summary>
        /// [string] The ID of the last certificate that was issued.
        /// </summary>
        [Output("lastIssuedCertificateId")]
        public Output<string> LastIssuedCertificateId { get; private set; } = null!;

        /// <summary>
        /// [string] The location of the auto-certificate.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// [string] A certificate name used for management purposes.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// [string] The certificate provider used to issue the certificates.
        /// </summary>
        [Output("providerId")]
        public Output<string> ProviderId { get; private set; } = null!;

        /// <summary>
        /// [list][string] Optional additional names to be added to the issued certificate. The additional names needs to be part of a zone in IONOS Cloud DNS.
        /// </summary>
        [Output("subjectAlternativeNames")]
        public Output<ImmutableArray<string>> SubjectAlternativeNames { get; private set; } = null!;


        /// <summary>
        /// Create a AutoCertificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AutoCertificate(string name, AutoCertificateArgs args, CustomResourceOptions? options = null)
            : base("ionoscloud:cert/autoCertificate:AutoCertificate", name, args ?? new AutoCertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AutoCertificate(string name, Input<string> id, AutoCertificateState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:cert/autoCertificate:AutoCertificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AutoCertificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AutoCertificate Get(string name, Input<string> id, AutoCertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new AutoCertificate(name, id, state, options);
        }
    }

    public sealed class AutoCertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// [string] The common name (DNS) of the certificate to issue. The common name needs to be part of a zone in IONOS Cloud DNS.
        /// </summary>
        [Input("commonName", required: true)]
        public Input<string> CommonName { get; set; } = null!;

        /// <summary>
        /// [string] The key algorithm used to generate the certificate.
        /// </summary>
        [Input("keyAlgorithm", required: true)]
        public Input<string> KeyAlgorithm { get; set; } = null!;

        /// <summary>
        /// [string] The location of the auto-certificate.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// [string] A certificate name used for management purposes.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// [string] The certificate provider used to issue the certificates.
        /// </summary>
        [Input("providerId", required: true)]
        public Input<string> ProviderId { get; set; } = null!;

        [Input("subjectAlternativeNames")]
        private InputList<string>? _subjectAlternativeNames;

        /// <summary>
        /// [list][string] Optional additional names to be added to the issued certificate. The additional names needs to be part of a zone in IONOS Cloud DNS.
        /// </summary>
        public InputList<string> SubjectAlternativeNames
        {
            get => _subjectAlternativeNames ?? (_subjectAlternativeNames = new InputList<string>());
            set => _subjectAlternativeNames = value;
        }

        public AutoCertificateArgs()
        {
        }
        public static new AutoCertificateArgs Empty => new AutoCertificateArgs();
    }

    public sealed class AutoCertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// [string] The common name (DNS) of the certificate to issue. The common name needs to be part of a zone in IONOS Cloud DNS.
        /// </summary>
        [Input("commonName")]
        public Input<string>? CommonName { get; set; }

        /// <summary>
        /// [string] The key algorithm used to generate the certificate.
        /// </summary>
        [Input("keyAlgorithm")]
        public Input<string>? KeyAlgorithm { get; set; }

        /// <summary>
        /// [string] The ID of the last certificate that was issued.
        /// </summary>
        [Input("lastIssuedCertificateId")]
        public Input<string>? LastIssuedCertificateId { get; set; }

        /// <summary>
        /// [string] The location of the auto-certificate.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// [string] A certificate name used for management purposes.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// [string] The certificate provider used to issue the certificates.
        /// </summary>
        [Input("providerId")]
        public Input<string>? ProviderId { get; set; }

        [Input("subjectAlternativeNames")]
        private InputList<string>? _subjectAlternativeNames;

        /// <summary>
        /// [list][string] Optional additional names to be added to the issued certificate. The additional names needs to be part of a zone in IONOS Cloud DNS.
        /// </summary>
        public InputList<string> SubjectAlternativeNames
        {
            get => _subjectAlternativeNames ?? (_subjectAlternativeNames = new InputList<string>());
            set => _subjectAlternativeNames = value;
        }

        public AutoCertificateState()
        {
        }
        public static new AutoCertificateState Empty => new AutoCertificateState();
    }
}
