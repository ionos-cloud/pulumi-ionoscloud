// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Ionoscloud.Pulumi.Ionoscloud.Vpn
{
    public static class GetIpsecGateway
    {
        /// <summary>
        /// The **VPN IPSec Gateway data source** can be used to search for and return an existing IPSec Gateway.
        /// You can provide a string for the name parameter which will be compared with provisioned IPSec Gateways.
        /// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
        /// When this happens, please refine your search string so that it is specific enough to return only one result.
        /// 
        /// ## Example Usage
        /// 
        /// ### By ID
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Vpn.GetIpsecGateway.Invoke(new()
        ///     {
        ///         Id = "gateway_id",
        ///         Location = "gateway_location",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### By Name
        /// 
        /// Needs to have the resource be previously created, or a depends_on clause to ensure that the resource is created before
        /// this data source is called.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Vpn.GetIpsecGateway.Invoke(new()
        ///     {
        ///         Name = "ipsec-gateway",
        ///         Location = "gateway_location",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetIpsecGatewayResult> InvokeAsync(GetIpsecGatewayArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIpsecGatewayResult>("ionoscloud:vpn/getIpsecGateway:getIpsecGateway", args ?? new GetIpsecGatewayArgs(), options.WithDefaults());

        /// <summary>
        /// The **VPN IPSec Gateway data source** can be used to search for and return an existing IPSec Gateway.
        /// You can provide a string for the name parameter which will be compared with provisioned IPSec Gateways.
        /// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
        /// When this happens, please refine your search string so that it is specific enough to return only one result.
        /// 
        /// ## Example Usage
        /// 
        /// ### By ID
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Vpn.GetIpsecGateway.Invoke(new()
        ///     {
        ///         Id = "gateway_id",
        ///         Location = "gateway_location",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### By Name
        /// 
        /// Needs to have the resource be previously created, or a depends_on clause to ensure that the resource is created before
        /// this data source is called.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Vpn.GetIpsecGateway.Invoke(new()
        ///     {
        ///         Name = "ipsec-gateway",
        ///         Location = "gateway_location",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetIpsecGatewayResult> Invoke(GetIpsecGatewayInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIpsecGatewayResult>("ionoscloud:vpn/getIpsecGateway:getIpsecGateway", args ?? new GetIpsecGatewayInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The **VPN IPSec Gateway data source** can be used to search for and return an existing IPSec Gateway.
        /// You can provide a string for the name parameter which will be compared with provisioned IPSec Gateways.
        /// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
        /// When this happens, please refine your search string so that it is specific enough to return only one result.
        /// 
        /// ## Example Usage
        /// 
        /// ### By ID
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Vpn.GetIpsecGateway.Invoke(new()
        ///     {
        ///         Id = "gateway_id",
        ///         Location = "gateway_location",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### By Name
        /// 
        /// Needs to have the resource be previously created, or a depends_on clause to ensure that the resource is created before
        /// this data source is called.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Vpn.GetIpsecGateway.Invoke(new()
        ///     {
        ///         Name = "ipsec-gateway",
        ///         Location = "gateway_location",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetIpsecGatewayResult> Invoke(GetIpsecGatewayInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetIpsecGatewayResult>("ionoscloud:vpn/getIpsecGateway:getIpsecGateway", args ?? new GetIpsecGatewayInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIpsecGatewayArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of an existing IPSec Gateway that you want to search for.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The location of the IPSec Gateway.
        /// </summary>
        [Input("location")]
        public string? Location { get; set; }

        /// <summary>
        /// Name of an existing IPSec Gateway that you want to search for.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The IKE version that is permitted for the VPN tunnels.
        /// </summary>
        [Input("version")]
        public string? Version { get; set; }

        public GetIpsecGatewayArgs()
        {
        }
        public static new GetIpsecGatewayArgs Empty => new GetIpsecGatewayArgs();
    }

    public sealed class GetIpsecGatewayInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of an existing IPSec Gateway that you want to search for.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The location of the IPSec Gateway.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Name of an existing IPSec Gateway that you want to search for.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The IKE version that is permitted for the VPN tunnels.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public GetIpsecGatewayInvokeArgs()
        {
        }
        public static new GetIpsecGatewayInvokeArgs Empty => new GetIpsecGatewayInvokeArgs();
    }


    [OutputType]
    public sealed class GetIpsecGatewayResult
    {
        /// <summary>
        /// The network connection for your gateway.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetIpsecGatewayConnectionResult> Connections;
        /// <summary>
        /// (Optional)[string] The human-readable description of the IPSec Gateway.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Public IP address to be assigned to the gateway.
        /// </summary>
        public readonly string GatewayIp;
        /// <summary>
        /// The unique ID of the IPSec Gateway.
        /// </summary>
        public readonly string Id;
        public readonly string? Location;
        /// <summary>
        /// A weekly 4 hour-long window, during which maintenance might occur.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetIpsecGatewayMaintenanceWindowResult> MaintenanceWindows;
        /// <summary>
        /// The name of the IPSec Gateway.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Gateway performance options.
        /// </summary>
        public readonly string Tier;
        /// <summary>
        /// The IKE version that is permitted for the VPN tunnels.
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetIpsecGatewayResult(
            ImmutableArray<Outputs.GetIpsecGatewayConnectionResult> connections,

            string description,

            string gatewayIp,

            string id,

            string? location,

            ImmutableArray<Outputs.GetIpsecGatewayMaintenanceWindowResult> maintenanceWindows,

            string name,

            string tier,

            string version)
        {
            Connections = connections;
            Description = description;
            GatewayIp = gatewayIp;
            Id = id;
            Location = location;
            MaintenanceWindows = maintenanceWindows;
            Name = name;
            Tier = tier;
            Version = version;
        }
    }
}
