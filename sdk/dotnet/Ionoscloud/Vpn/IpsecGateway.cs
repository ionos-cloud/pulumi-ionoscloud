// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Ionoscloud.Pulumi.Ionoscloud.Vpn
{
    /// <summary>
    /// An IPSec Gateway resource manages the creation, management, and deletion of VPN IPSec Gateways within the IONOS Cloud
    /// infrastructure. This resource facilitates the creation of VPN IPSec Gateways, enabling secure connections between your
    /// network resources.
    /// 
    /// ## Usage example
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ionoscloud = Pulumi.Ionoscloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Basic example
    ///     var testDatacenter = new Ionoscloud.Compute.Datacenter("test_datacenter", new()
    ///     {
    ///         Name = "test_vpn_gateway_basic",
    ///         Location = "de/fra",
    ///     });
    /// 
    ///     var testLan = new Ionoscloud.Compute.Lan("test_lan", new()
    ///     {
    ///         Name = "test_lan_basic",
    ///         Public = false,
    ///         DatacenterId = testDatacenter.Id,
    ///     });
    /// 
    ///     var testIpblock = new Ionoscloud.Compute.IPBlock("test_ipblock", new()
    ///     {
    ///         Name = "test_ipblock_basic",
    ///         Location = "de/fra",
    ///         Size = 1,
    ///     });
    /// 
    ///     var example = new Ionoscloud.Vpn.IpsecGateway("example", new()
    ///     {
    ///         Name = "ipsec_gateway_basic",
    ///         Location = "de/fra",
    ///         GatewayIp = testIpblock.Ips.Apply(ips =&gt; ips[0]),
    ///         Version = "IKEv2",
    ///         Description = "This gateway connects site A to VDC X.",
    ///         Connections = new[]
    ///         {
    ///             new Ionoscloud.Vpn.Inputs.IpsecGatewayConnectionArgs
    ///             {
    ///                 DatacenterId = testDatacenter.Id,
    ///                 LanId = testLan.Id,
    ///                 Ipv4Cidr = "192.168.100.10/24",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ionoscloud = Pulumi.Ionoscloud;
    /// using Random = Pulumi.Random;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Complete example
    ///     var testDatacenter = new Ionoscloud.Compute.Datacenter("test_datacenter", new()
    ///     {
    ///         Name = "vpn_gateway_test",
    ///         Location = "de/fra",
    ///     });
    /// 
    ///     var testLan = new Ionoscloud.Compute.Lan("test_lan", new()
    ///     {
    ///         Name = "test_lan",
    ///         Public = false,
    ///         DatacenterId = testDatacenter.Id,
    ///         Ipv6CidrBlock = lanIpv6CidrBlock,
    ///     });
    /// 
    ///     var testIpblock = new Ionoscloud.Compute.IPBlock("test_ipblock", new()
    ///     {
    ///         Name = "test_ipblock",
    ///         Location = "de/fra",
    ///         Size = 1,
    ///     });
    /// 
    ///     var serverImagePassword = new Random.Index.Password("server_image_password", new()
    ///     {
    ///         Length = 16,
    ///         Special = false,
    ///     });
    /// 
    ///     var testServer = new Ionoscloud.Compute.Server("test_server", new()
    ///     {
    ///         Name = "test_server",
    ///         DatacenterId = testDatacenter.Id,
    ///         Cores = 1,
    ///         Ram = 2048,
    ///         ImageName = "ubuntu:latest",
    ///         ImagePassword = serverImagePassword.Result,
    ///         Nic = new Ionoscloud.Compute.Inputs.ServerNicArgs
    ///         {
    ///             Lan = testLan.Id,
    ///             Name = "test_nic",
    ///             Dhcp = true,
    ///             Dhcpv6 = false,
    ///             Ipv6CidrBlock = ipv6CidrBlock,
    ///             FirewallActive = false,
    ///         },
    ///         Volume = new Ionoscloud.Compute.Inputs.ServerVolumeArgs
    ///         {
    ///             Name = "test_volume",
    ///             DiskType = "HDD",
    ///             Size = 10,
    ///             LicenceType = "OTHER",
    ///         },
    ///     });
    /// 
    ///     var example = new Ionoscloud.Vpn.IpsecGateway("example", new()
    ///     {
    ///         Name = "ipsec-gateway",
    ///         Location = "de/fra",
    ///         GatewayIp = testIpblock.Ips.Apply(ips =&gt; ips[0]),
    ///         Version = "IKEv2",
    ///         Description = "This gateway connects site A to VDC X.",
    ///         Connections = new[]
    ///         {
    ///             new Ionoscloud.Vpn.Inputs.IpsecGatewayConnectionArgs
    ///             {
    ///                 DatacenterId = testDatacenter.Id,
    ///                 LanId = testLan.Id,
    ///                 Ipv4Cidr = "ipv4_cidr_block_from_nic",
    ///                 Ipv6Cidr = "ipv6_cidr_block_from_dc",
    ///             },
    ///         },
    ///         MaintenanceWindow = new Ionoscloud.Vpn.Inputs.IpsecGatewayMaintenanceWindowArgs
    ///         {
    ///             DayOfTheWeek = "Monday",
    ///             Time = "09:00:00",
    ///         },
    ///         Tier = "STANDARD",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The resource can be imported using the `location` and `gateway_id`, for example:
    /// 
    /// ```sh
    /// $ pulumi import ionoscloud:vpn/ipsecGateway:IpsecGateway example location:gateway_id
    /// ```
    /// </summary>
    [IonoscloudResourceType("ionoscloud:vpn/ipsecGateway:IpsecGateway")]
    public partial class IpsecGateway : global::Pulumi.CustomResource
    {
        /// <summary>
        /// [list] The network connection for your gateway. **Note**: all connections must belong to the
        /// same datacenter. Minimum items: 1. Maximum items: 10.
        /// </summary>
        [Output("connections")]
        public Output<ImmutableArray<Outputs.IpsecGatewayConnection>> Connections { get; private set; } = null!;

        /// <summary>
        /// [string] The human-readable description of the IPSec Gateway.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// [string] Public IP address to be assigned to the gateway. Note: This must be an IP address in
        /// the same datacenter as the connections.
        /// </summary>
        [Output("gatewayIp")]
        public Output<string> GatewayIp { get; private set; } = null!;

        /// <summary>
        /// [string] The location of the IPSec Gateway. Supported locations: de/fra, de/txl, es/vit,
        /// gb/bhx, gb/lhr, us/ewr, us/las, us/mci, fr/par.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// (Computed) A weekly 4 hour-long window, during which maintenance might occur.
        /// </summary>
        [Output("maintenanceWindow")]
        public Output<Outputs.IpsecGatewayMaintenanceWindow> MaintenanceWindow { get; private set; } = null!;

        /// <summary>
        /// [string] The name of the IPSec Gateway.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// (Computed)[string] Gateway performance options.  See product documentation for full details. Options: STANDARD, STANDARD_HA, ENHANCED, ENHANCED_HA, PREMIUM, PREMIUM_HA.
        /// </summary>
        [Output("tier")]
        public Output<string?> Tier { get; private set; } = null!;

        /// <summary>
        /// [string] The IKE version that is permitted for the VPN tunnels. Default: `IKEv2`. Possible
        /// values: `IKEv2`.
        /// </summary>
        [Output("version")]
        public Output<string?> Version { get; private set; } = null!;


        /// <summary>
        /// Create a IpsecGateway resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IpsecGateway(string name, IpsecGatewayArgs args, CustomResourceOptions? options = null)
            : base("ionoscloud:vpn/ipsecGateway:IpsecGateway", name, args ?? new IpsecGatewayArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IpsecGateway(string name, Input<string> id, IpsecGatewayState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:vpn/ipsecGateway:IpsecGateway", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IpsecGateway resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IpsecGateway Get(string name, Input<string> id, IpsecGatewayState? state = null, CustomResourceOptions? options = null)
        {
            return new IpsecGateway(name, id, state, options);
        }
    }

    public sealed class IpsecGatewayArgs : global::Pulumi.ResourceArgs
    {
        [Input("connections", required: true)]
        private InputList<Inputs.IpsecGatewayConnectionArgs>? _connections;

        /// <summary>
        /// [list] The network connection for your gateway. **Note**: all connections must belong to the
        /// same datacenter. Minimum items: 1. Maximum items: 10.
        /// </summary>
        public InputList<Inputs.IpsecGatewayConnectionArgs> Connections
        {
            get => _connections ?? (_connections = new InputList<Inputs.IpsecGatewayConnectionArgs>());
            set => _connections = value;
        }

        /// <summary>
        /// [string] The human-readable description of the IPSec Gateway.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// [string] Public IP address to be assigned to the gateway. Note: This must be an IP address in
        /// the same datacenter as the connections.
        /// </summary>
        [Input("gatewayIp", required: true)]
        public Input<string> GatewayIp { get; set; } = null!;

        /// <summary>
        /// [string] The location of the IPSec Gateway. Supported locations: de/fra, de/txl, es/vit,
        /// gb/bhx, gb/lhr, us/ewr, us/las, us/mci, fr/par.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// (Computed) A weekly 4 hour-long window, during which maintenance might occur.
        /// </summary>
        [Input("maintenanceWindow")]
        public Input<Inputs.IpsecGatewayMaintenanceWindowArgs>? MaintenanceWindow { get; set; }

        /// <summary>
        /// [string] The name of the IPSec Gateway.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (Computed)[string] Gateway performance options.  See product documentation for full details. Options: STANDARD, STANDARD_HA, ENHANCED, ENHANCED_HA, PREMIUM, PREMIUM_HA.
        /// </summary>
        [Input("tier")]
        public Input<string>? Tier { get; set; }

        /// <summary>
        /// [string] The IKE version that is permitted for the VPN tunnels. Default: `IKEv2`. Possible
        /// values: `IKEv2`.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public IpsecGatewayArgs()
        {
        }
        public static new IpsecGatewayArgs Empty => new IpsecGatewayArgs();
    }

    public sealed class IpsecGatewayState : global::Pulumi.ResourceArgs
    {
        [Input("connections")]
        private InputList<Inputs.IpsecGatewayConnectionGetArgs>? _connections;

        /// <summary>
        /// [list] The network connection for your gateway. **Note**: all connections must belong to the
        /// same datacenter. Minimum items: 1. Maximum items: 10.
        /// </summary>
        public InputList<Inputs.IpsecGatewayConnectionGetArgs> Connections
        {
            get => _connections ?? (_connections = new InputList<Inputs.IpsecGatewayConnectionGetArgs>());
            set => _connections = value;
        }

        /// <summary>
        /// [string] The human-readable description of the IPSec Gateway.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// [string] Public IP address to be assigned to the gateway. Note: This must be an IP address in
        /// the same datacenter as the connections.
        /// </summary>
        [Input("gatewayIp")]
        public Input<string>? GatewayIp { get; set; }

        /// <summary>
        /// [string] The location of the IPSec Gateway. Supported locations: de/fra, de/txl, es/vit,
        /// gb/bhx, gb/lhr, us/ewr, us/las, us/mci, fr/par.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// (Computed) A weekly 4 hour-long window, during which maintenance might occur.
        /// </summary>
        [Input("maintenanceWindow")]
        public Input<Inputs.IpsecGatewayMaintenanceWindowGetArgs>? MaintenanceWindow { get; set; }

        /// <summary>
        /// [string] The name of the IPSec Gateway.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (Computed)[string] Gateway performance options.  See product documentation for full details. Options: STANDARD, STANDARD_HA, ENHANCED, ENHANCED_HA, PREMIUM, PREMIUM_HA.
        /// </summary>
        [Input("tier")]
        public Input<string>? Tier { get; set; }

        /// <summary>
        /// [string] The IKE version that is permitted for the VPN tunnels. Default: `IKEv2`. Possible
        /// values: `IKEv2`.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public IpsecGatewayState()
        {
        }
        public static new IpsecGatewayState Empty => new IpsecGatewayState();
    }
}
