// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Ionoscloud.Pulumi.Ionoscloud.Dbaas
{
    /// <summary>
    /// Manages a **DbaaS PgSql Database**.
    /// 
    /// ## Example Usage
    /// 
    /// Create a `PgSQL` cluster as presented in the documentation for the cluster, then define a database resource
    /// and link it with the previously created cluster:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ionoscloud = Pulumi.Ionoscloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var examplePgDatabase = new Ionoscloud.Dbaas.PSQLDatabase("example_pg_database", new()
    ///     {
    ///         ClusterId = example.Id,
    ///         Name = "exampledatabase",
    ///         Owner = "exampleuser",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// In order to import a PgSql database, you can define an empty database resource in the plan:
    /// 
    /// hcl
    /// 
    /// resource "ionoscloud_pg_database" "example" {
    /// 
    /// }
    /// 
    /// The resource can be imported using the `clusterId` and the `name`, for example:
    /// 
    /// ```sh
    /// $ pulumi import ionoscloud:dbaas/pSQLDatabase:PSQLDatabase example clusterid/name
    /// ```
    /// </summary>
    [IonoscloudResourceType("ionoscloud:dbaas/pSQLDatabase:PSQLDatabase")]
    public partial class PSQLDatabase : global::Pulumi.CustomResource
    {
        /// <summary>
        /// [string] The unique ID of the cluster.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// [string] The name of the database.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// [string] The owner of the database.
        /// </summary>
        [Output("owner")]
        public Output<string> Owner { get; private set; } = null!;


        /// <summary>
        /// Create a PSQLDatabase resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PSQLDatabase(string name, PSQLDatabaseArgs args, CustomResourceOptions? options = null)
            : base("ionoscloud:dbaas/pSQLDatabase:PSQLDatabase", name, args ?? new PSQLDatabaseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PSQLDatabase(string name, Input<string> id, PSQLDatabaseState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:dbaas/pSQLDatabase:PSQLDatabase", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PSQLDatabase resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PSQLDatabase Get(string name, Input<string> id, PSQLDatabaseState? state = null, CustomResourceOptions? options = null)
        {
            return new PSQLDatabase(name, id, state, options);
        }
    }

    public sealed class PSQLDatabaseArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// [string] The unique ID of the cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// [string] The name of the database.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// [string] The owner of the database.
        /// </summary>
        [Input("owner", required: true)]
        public Input<string> Owner { get; set; } = null!;

        public PSQLDatabaseArgs()
        {
        }
        public static new PSQLDatabaseArgs Empty => new PSQLDatabaseArgs();
    }

    public sealed class PSQLDatabaseState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// [string] The unique ID of the cluster.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// [string] The name of the database.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// [string] The owner of the database.
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        public PSQLDatabaseState()
        {
        }
        public static new PSQLDatabaseState Empty => new PSQLDatabaseState();
    }
}
