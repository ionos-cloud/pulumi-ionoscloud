// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Ionoscloud.Pulumi.Ionoscloud.Dbaas
{
    /// <summary>
    /// Manages a **DbaaS PgSql User**.
    /// 
    /// ## Example Usage
    /// 
    /// Create a `PgSQL` cluster as presented in the documentation for the cluster, then define a user resource
    /// and link it with the previously created cluster:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ionoscloud = Ionoscloud.Pulumi.Ionoscloud;
    /// using Random = Pulumi.Random;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var userPassword = new Random.Index.Password("user_password", new()
    ///     {
    ///         Length = 16,
    ///         Special = true,
    ///         OverrideSpecial = "!#$%&amp;*()-_=+[]{}&lt;&gt;:?",
    ///     });
    /// 
    ///     var examplePgUser = new Ionoscloud.Dbaas.PSQLUser("example_pg_user", new()
    ///     {
    ///         ClusterId = example.Id,
    ///         Username = "exampleuser",
    ///         Password = userPassword.Result,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// In order to import a PgSql user, you can define an empty user resource in the plan:
    /// 
    /// hcl
    /// 
    /// resource "ionoscloud_pg_user" "example" {
    /// 
    /// }
    /// 
    /// The resource can be imported using the `clusterId` and the `username`, for example:
    /// 
    /// ```sh
    /// $ pulumi import ionoscloud:dbaas/pSQLUser:PSQLUser example clusterid/username
    /// ```
    /// </summary>
    [IonoscloudResourceType("ionoscloud:dbaas/pSQLUser:PSQLUser")]
    public partial class PSQLUser : global::Pulumi.CustomResource
    {
        /// <summary>
        /// [string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// [bool] Describes whether this user is a system user or not. A system user cannot be updated or deleted.
        /// </summary>
        [Output("isSystemUser")]
        public Output<bool> IsSystemUser { get; private set; } = null!;

        /// <summary>
        /// [string] User password.
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// [string] Used for authentication. Updates to the value of the field force the cluster to be re-created.
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a PSQLUser resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PSQLUser(string name, PSQLUserArgs args, CustomResourceOptions? options = null)
            : base("ionoscloud:dbaas/pSQLUser:PSQLUser", name, args ?? new PSQLUserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PSQLUser(string name, Input<string> id, PSQLUserState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:dbaas/pSQLUser:PSQLUser", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PSQLUser resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PSQLUser Get(string name, Input<string> id, PSQLUserState? state = null, CustomResourceOptions? options = null)
        {
            return new PSQLUser(name, id, state, options);
        }
    }

    public sealed class PSQLUserArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// [string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        [Input("password", required: true)]
        private Input<string>? _password;

        /// <summary>
        /// [string] User password.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// [string] Used for authentication. Updates to the value of the field force the cluster to be re-created.
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public PSQLUserArgs()
        {
        }
        public static new PSQLUserArgs Empty => new PSQLUserArgs();
    }

    public sealed class PSQLUserState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// [string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// [bool] Describes whether this user is a system user or not. A system user cannot be updated or deleted.
        /// </summary>
        [Input("isSystemUser")]
        public Input<bool>? IsSystemUser { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// [string] User password.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// [string] Used for authentication. Updates to the value of the field force the cluster to be re-created.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public PSQLUserState()
        {
        }
        public static new PSQLUserState Empty => new PSQLUserState();
    }
}
