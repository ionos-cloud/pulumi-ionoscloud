// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Ionoscloud.Pulumi.Ionoscloud.Cdn.Inputs
{

    public sealed class DistributionRoutingRuleUpstreamArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// [bool] Enable or disable caching. If enabled, the CDN will cache the responses from the upstream host. Subsequent requests for the same resource will be served from the cache.
        /// </summary>
        [Input("caching", required: true)]
        public Input<bool> Caching { get; set; } = null!;

        /// <summary>
        /// [map] - A map of geo_restrictions
        /// </summary>
        [Input("geoRestrictions")]
        public Input<Inputs.DistributionRoutingRuleUpstreamGeoRestrictionsArgs>? GeoRestrictions { get; set; }

        /// <summary>
        /// [string] The upstream host that handles the requests if not already cached. This host will be protected by the WAF if the option is enabled.
        /// </summary>
        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        /// <summary>
        /// [string] Rate limit class that will be applied to limit the number of incoming requests per IP.
        /// </summary>
        [Input("rateLimitClass", required: true)]
        public Input<string> RateLimitClass { get; set; } = null!;

        /// <summary>
        /// [string] The SNI (Server Name Indication) mode of the upstream. It supports two modes: 1) `distribution`: for outgoing connections to the upstream host, the CDN requires the upstream host to present a valid certificate that matches the configured domain of the CDN distribution; 2) `origin`: for outgoing connections to the upstream host, the CDN requires the upstream host to present a valid certificate that matches the configured upstream/origin hostname.
        /// </summary>
        [Input("sniMode", required: true)]
        public Input<string> SniMode { get; set; } = null!;

        /// <summary>
        /// [bool] Enable or disable WAF to protect the upstream host.
        /// </summary>
        [Input("waf", required: true)]
        public Input<bool> Waf { get; set; } = null!;

        public DistributionRoutingRuleUpstreamArgs()
        {
        }
        public static new DistributionRoutingRuleUpstreamArgs Empty => new DistributionRoutingRuleUpstreamArgs();
    }
}
