// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud.Cert
{
    /// <summary>
    /// Manages a **Certificate** on IonosCloud.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ionoscloud = Pulumi.Ionoscloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var cert = new Ionoscloud.Cert.IonosCertificate("cert", new()
    ///     {
    ///         Name = "add_name_here",
    ///         Certificate = "tour_certificate",
    ///         CertificateChain = "your_certificate_chain",
    ///         PrivateKey = "your_private_key",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Resource certificate can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import ionoscloud:cert/certificate:Certificate mycert certificate uuid
    /// ```
    /// </summary>
    [IonoscloudResourceType("ionoscloud:cert/certificate:Certificate")]
    public partial class IonosCertificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// [string] The certificate body. Pem encoded. Immutable.
        /// </summary>
        [Output("certificate")]
        public Output<string> Certificate { get; private set; } = null!;

        /// <summary>
        /// [string] The certificate chain. Pem encoded. Immutable.
        /// </summary>
        [Output("certificateChain")]
        public Output<string?> CertificateChain { get; private set; } = null!;

        /// <summary>
        /// [string] The certificate name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// [string] The certificate private key. Immutable. Sensitive.
        /// </summary>
        [Output("privateKey")]
        public Output<string> PrivateKey { get; private set; } = null!;


        /// <summary>
        /// Create a IonosCertificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IonosCertificate(string name, IonosCertificateArgs args, CustomResourceOptions? options = null)
            : base("ionoscloud:cert/certificate:Certificate", name, args ?? new IonosCertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IonosCertificate(string name, Input<string> id, IonosCertificateState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:cert/certificate:Certificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "privateKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IonosCertificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IonosCertificate Get(string name, Input<string> id, IonosCertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new IonosCertificate(name, id, state, options);
        }
    }

    public sealed class IonosCertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// [string] The certificate body. Pem encoded. Immutable.
        /// </summary>
        [Input("certificate", required: true)]
        public Input<string> Certificate { get; set; } = null!;

        /// <summary>
        /// [string] The certificate chain. Pem encoded. Immutable.
        /// </summary>
        [Input("certificateChain")]
        public Input<string>? CertificateChain { get; set; }

        /// <summary>
        /// [string] The certificate name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privateKey", required: true)]
        private Input<string>? _privateKey;

        /// <summary>
        /// [string] The certificate private key. Immutable. Sensitive.
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public IonosCertificateArgs()
        {
        }
        public static new IonosCertificateArgs Empty => new IonosCertificateArgs();
    }

    public sealed class IonosCertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// [string] The certificate body. Pem encoded. Immutable.
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// [string] The certificate chain. Pem encoded. Immutable.
        /// </summary>
        [Input("certificateChain")]
        public Input<string>? CertificateChain { get; set; }

        /// <summary>
        /// [string] The certificate name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;

        /// <summary>
        /// [string] The certificate private key. Immutable. Sensitive.
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public IonosCertificateState()
        {
        }
        public static new IonosCertificateState Empty => new IonosCertificateState();
    }
}
