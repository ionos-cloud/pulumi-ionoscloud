// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud.Cert
{
    public static class GetAutoCertificate
    {
        /// <summary>
        /// The **CM AutoCertificate data source** can be used to search for and return an existing auto-certificate.
        /// You can provide a string for either id or name parameters which will be compared with provisioned auto-certificates.
        /// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
        /// When this happens, please refine your search string so that it is specific enough to return only one result.
        /// 
        /// ## Example Usage
        /// 
        /// ### By ID
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Cert.GetAutoCertificate.Invoke(new()
        ///     {
        ///         Id = "auto_certificate_id",
        ///         Location = "auto_certificate_location",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### By Name
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Cert.GetAutoCertificate.Invoke(new()
        ///     {
        ///         Name = "AutoCertificate Name Example",
        ///         Location = "auto_certificate_location",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAutoCertificateResult> InvokeAsync(GetAutoCertificateArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAutoCertificateResult>("ionoscloud:cert/getAutoCertificate:getAutoCertificate", args ?? new GetAutoCertificateArgs(), options.WithDefaults());

        /// <summary>
        /// The **CM AutoCertificate data source** can be used to search for and return an existing auto-certificate.
        /// You can provide a string for either id or name parameters which will be compared with provisioned auto-certificates.
        /// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
        /// When this happens, please refine your search string so that it is specific enough to return only one result.
        /// 
        /// ## Example Usage
        /// 
        /// ### By ID
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Cert.GetAutoCertificate.Invoke(new()
        ///     {
        ///         Id = "auto_certificate_id",
        ///         Location = "auto_certificate_location",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### By Name
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Cert.GetAutoCertificate.Invoke(new()
        ///     {
        ///         Name = "AutoCertificate Name Example",
        ///         Location = "auto_certificate_location",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAutoCertificateResult> Invoke(GetAutoCertificateInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAutoCertificateResult>("ionoscloud:cert/getAutoCertificate:getAutoCertificate", args ?? new GetAutoCertificateInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The **CM AutoCertificate data source** can be used to search for and return an existing auto-certificate.
        /// You can provide a string for either id or name parameters which will be compared with provisioned auto-certificates.
        /// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
        /// When this happens, please refine your search string so that it is specific enough to return only one result.
        /// 
        /// ## Example Usage
        /// 
        /// ### By ID
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Cert.GetAutoCertificate.Invoke(new()
        ///     {
        ///         Id = "auto_certificate_id",
        ///         Location = "auto_certificate_location",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### By Name
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Cert.GetAutoCertificate.Invoke(new()
        ///     {
        ///         Name = "AutoCertificate Name Example",
        ///         Location = "auto_certificate_location",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAutoCertificateResult> Invoke(GetAutoCertificateInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAutoCertificateResult>("ionoscloud:cert/getAutoCertificate:getAutoCertificate", args ?? new GetAutoCertificateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAutoCertificateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// [string] ID of the auto-certificate you want to search for.
        /// 
        /// Either `name` or `id` must be provided. If none, or both are provided, the datasource will return an error.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// [string] The location of the auto-certificate.
        /// </summary>
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        /// <summary>
        /// [string] Name of an existing auto-certificate that you want to search for.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetAutoCertificateArgs()
        {
        }
        public static new GetAutoCertificateArgs Empty => new GetAutoCertificateArgs();
    }

    public sealed class GetAutoCertificateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// [string] ID of the auto-certificate you want to search for.
        /// 
        /// Either `name` or `id` must be provided. If none, or both are provided, the datasource will return an error.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// [string] The location of the auto-certificate.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// [string] Name of an existing auto-certificate that you want to search for.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetAutoCertificateInvokeArgs()
        {
        }
        public static new GetAutoCertificateInvokeArgs Empty => new GetAutoCertificateInvokeArgs();
    }


    [OutputType]
    public sealed class GetAutoCertificateResult
    {
        /// <summary>
        /// [string] The common name (DNS) of the certificate to issue. The common name needs to be part of a zone in IONOS Cloud DNS.
        /// </summary>
        public readonly string CommonName;
        public readonly string Id;
        /// <summary>
        /// [string] The key algorithm used to generate the certificate.
        /// </summary>
        public readonly string KeyAlgorithm;
        /// <summary>
        /// [string] The ID of the last certificate that was issued.
        /// </summary>
        public readonly string LastIssuedCertificateId;
        public readonly string Location;
        public readonly string Name;
        public readonly string ProviderId;
        /// <summary>
        /// [list][string] Optional additional names to be added to the issued certificate. The additional names needs to be part of a zone in IONOS Cloud DNS.
        /// </summary>
        public readonly ImmutableArray<string> SubjectAlternativeNames;

        [OutputConstructor]
        private GetAutoCertificateResult(
            string commonName,

            string id,

            string keyAlgorithm,

            string lastIssuedCertificateId,

            string location,

            string name,

            string providerId,

            ImmutableArray<string> subjectAlternativeNames)
        {
            CommonName = commonName;
            Id = id;
            KeyAlgorithm = keyAlgorithm;
            LastIssuedCertificateId = lastIssuedCertificateId;
            Location = location;
            Name = name;
            ProviderId = providerId;
            SubjectAlternativeNames = subjectAlternativeNames;
        }
    }
}
