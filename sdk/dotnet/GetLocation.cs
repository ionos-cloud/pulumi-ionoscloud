// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud
{
    public static class GetLocation
    {
        /// <summary>
        /// The **Location data source** can be used to search for and return an existing location which can then be used elsewhere in the configuration.
        /// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
        /// When this happens, please refine your search string so that it is specific enough to return only one result.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as ionoscloud from "@pulumi/ionoscloud";
        /// 
        /// const example = ionoscloud.getLocation({
        ///     feature: "SSD",
        ///     name: "karlsruhe",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_ionoscloud as ionoscloud
        /// 
        /// example = ionoscloud.get_location(feature="SSD",
        ///     name="karlsruhe")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.GetLocation.Invoke(new()
        ///     {
        ///         Feature = "SSD",
        ///         Name = "karlsruhe",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ionoscloud.GetLocation(ctx, &amp;ionoscloud.GetLocationArgs{
        /// 			Feature: pulumi.StringRef("SSD"),
        /// 			Name:    pulumi.StringRef("karlsruhe"),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.ionoscloud.IonoscloudFunctions;
        /// import com.pulumi.ionoscloud.inputs.GetLocationArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = IonoscloudFunctions.getLocation(GetLocationArgs.builder()
        ///             .feature("SSD")
        ///             .name("karlsruhe")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   example:
        ///     fn::invoke:
        ///       Function: ionoscloud:getLocation
        ///       Arguments:
        ///         feature: SSD
        ///         name: karlsruhe
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetLocationResult> InvokeAsync(GetLocationArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLocationResult>("ionoscloud:index/getLocation:getLocation", args ?? new GetLocationArgs(), options.WithDefaults());

        /// <summary>
        /// The **Location data source** can be used to search for and return an existing location which can then be used elsewhere in the configuration.
        /// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
        /// When this happens, please refine your search string so that it is specific enough to return only one result.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as ionoscloud from "@pulumi/ionoscloud";
        /// 
        /// const example = ionoscloud.getLocation({
        ///     feature: "SSD",
        ///     name: "karlsruhe",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_ionoscloud as ionoscloud
        /// 
        /// example = ionoscloud.get_location(feature="SSD",
        ///     name="karlsruhe")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.GetLocation.Invoke(new()
        ///     {
        ///         Feature = "SSD",
        ///         Name = "karlsruhe",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ionoscloud.GetLocation(ctx, &amp;ionoscloud.GetLocationArgs{
        /// 			Feature: pulumi.StringRef("SSD"),
        /// 			Name:    pulumi.StringRef("karlsruhe"),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.ionoscloud.IonoscloudFunctions;
        /// import com.pulumi.ionoscloud.inputs.GetLocationArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = IonoscloudFunctions.getLocation(GetLocationArgs.builder()
        ///             .feature("SSD")
        ///             .name("karlsruhe")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   example:
        ///     fn::invoke:
        ///       Function: ionoscloud:getLocation
        ///       Arguments:
        ///         feature: SSD
        ///         name: karlsruhe
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetLocationResult> Invoke(GetLocationInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLocationResult>("ionoscloud:index/getLocation:getLocation", args ?? new GetLocationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLocationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A desired feature that the location must be able to provide.
        /// </summary>
        [Input("feature")]
        public string? Feature { get; set; }

        /// <summary>
        /// Name of the location to search for.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetLocationArgs()
        {
        }
        public static new GetLocationArgs Empty => new GetLocationArgs();
    }

    public sealed class GetLocationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A desired feature that the location must be able to provide.
        /// </summary>
        [Input("feature")]
        public Input<string>? Feature { get; set; }

        /// <summary>
        /// Name of the location to search for.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetLocationInvokeArgs()
        {
        }
        public static new GetLocationInvokeArgs Empty => new GetLocationInvokeArgs();
    }


    [OutputType]
    public sealed class GetLocationResult
    {
        /// <summary>
        /// Array of features and CPU families available in a location
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLocationCpuArchitectureResult> CpuArchitectures;
        public readonly string? Feature;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of image aliases available for the location
        /// </summary>
        public readonly ImmutableArray<string> ImageAliases;
        public readonly string? Name;

        [OutputConstructor]
        private GetLocationResult(
            ImmutableArray<Outputs.GetLocationCpuArchitectureResult> cpuArchitectures,

            string? feature,

            string id,

            ImmutableArray<string> imageAliases,

            string? name)
        {
            CpuArchitectures = cpuArchitectures;
            Feature = feature;
            Id = id;
            ImageAliases = imageAliases;
            Name = name;
        }
    }
}
