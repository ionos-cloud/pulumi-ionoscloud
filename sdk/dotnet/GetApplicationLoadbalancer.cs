// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud
{
    public static class GetApplicationLoadbalancer
    {
        /// <summary>
        /// The **Application Load Balancer data source** can be used to search for and return an existing Application Load Balancer.
        /// You can provide a string for the name parameter which will be compared with provisioned Application Load Balancers.
        /// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
        /// When this happens, please refine your search and make sure that your resources have unique names.
        /// 
        /// ## Example Usage
        /// 
        /// ### By Name
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.GetApplicationLoadbalancer.Invoke(new()
        ///     {
        ///         DatacenterId = ionoscloud_datacenter.Example.Id,
        ///         Name = "ALB name",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### By Name with Partial Match
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.GetApplicationLoadbalancer.Invoke(new()
        ///     {
        ///         DatacenterId = ionoscloud_datacenter.Example.Id,
        ///         Name = "name",
        ///         PartialMatch = true,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetApplicationLoadbalancerResult> InvokeAsync(GetApplicationLoadbalancerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetApplicationLoadbalancerResult>("ionoscloud:index/getApplicationLoadbalancer:getApplicationLoadbalancer", args ?? new GetApplicationLoadbalancerArgs(), options.WithDefaults());

        /// <summary>
        /// The **Application Load Balancer data source** can be used to search for and return an existing Application Load Balancer.
        /// You can provide a string for the name parameter which will be compared with provisioned Application Load Balancers.
        /// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
        /// When this happens, please refine your search and make sure that your resources have unique names.
        /// 
        /// ## Example Usage
        /// 
        /// ### By Name
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.GetApplicationLoadbalancer.Invoke(new()
        ///     {
        ///         DatacenterId = ionoscloud_datacenter.Example.Id,
        ///         Name = "ALB name",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### By Name with Partial Match
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.GetApplicationLoadbalancer.Invoke(new()
        ///     {
        ///         DatacenterId = ionoscloud_datacenter.Example.Id,
        ///         Name = "name",
        ///         PartialMatch = true,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetApplicationLoadbalancerResult> Invoke(GetApplicationLoadbalancerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetApplicationLoadbalancerResult>("ionoscloud:index/getApplicationLoadbalancer:getApplicationLoadbalancer", args ?? new GetApplicationLoadbalancerInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The **Application Load Balancer data source** can be used to search for and return an existing Application Load Balancer.
        /// You can provide a string for the name parameter which will be compared with provisioned Application Load Balancers.
        /// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
        /// When this happens, please refine your search and make sure that your resources have unique names.
        /// 
        /// ## Example Usage
        /// 
        /// ### By Name
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.GetApplicationLoadbalancer.Invoke(new()
        ///     {
        ///         DatacenterId = ionoscloud_datacenter.Example.Id,
        ///         Name = "ALB name",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### By Name with Partial Match
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.GetApplicationLoadbalancer.Invoke(new()
        ///     {
        ///         DatacenterId = ionoscloud_datacenter.Example.Id,
        ///         Name = "name",
        ///         PartialMatch = true,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetApplicationLoadbalancerResult> Invoke(GetApplicationLoadbalancerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetApplicationLoadbalancerResult>("ionoscloud:index/getApplicationLoadbalancer:getApplicationLoadbalancer", args ?? new GetApplicationLoadbalancerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetApplicationLoadbalancerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Datacenter's UUID.
        /// </summary>
        [Input("datacenterId", required: true)]
        public string DatacenterId { get; set; } = null!;

        /// <summary>
        /// ID of the application load balancer you want to search for.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Name of an existing application load balancer that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partial_match` parameter is not set to true.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Whether partial matching is allowed or not when using name argument. Default value is false.
        /// 
        /// `datacenter_id` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
        /// </summary>
        [Input("partialMatch")]
        public bool? PartialMatch { get; set; }

        public GetApplicationLoadbalancerArgs()
        {
        }
        public static new GetApplicationLoadbalancerArgs Empty => new GetApplicationLoadbalancerArgs();
    }

    public sealed class GetApplicationLoadbalancerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Datacenter's UUID.
        /// </summary>
        [Input("datacenterId", required: true)]
        public Input<string> DatacenterId { get; set; } = null!;

        /// <summary>
        /// ID of the application load balancer you want to search for.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Name of an existing application load balancer that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partial_match` parameter is not set to true.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether partial matching is allowed or not when using name argument. Default value is false.
        /// 
        /// `datacenter_id` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
        /// </summary>
        [Input("partialMatch")]
        public Input<bool>? PartialMatch { get; set; }

        public GetApplicationLoadbalancerInvokeArgs()
        {
        }
        public static new GetApplicationLoadbalancerInvokeArgs Empty => new GetApplicationLoadbalancerInvokeArgs();
    }


    [OutputType]
    public sealed class GetApplicationLoadbalancerResult
    {
        /// <summary>
        /// Turn logging on and off for this product. Default value is 'false'.
        /// </summary>
        public readonly bool CentralLogging;
        public readonly string DatacenterId;
        /// <summary>
        /// Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetApplicationLoadbalancerFlowlogResult> Flowlogs;
        /// <summary>
        /// Id of the application load balancer.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Collection of the Application Load Balancer IP addresses. (Inbound and outbound) IPs of the listenerLan are customer-reserved public IPs for the public Load Balancers, and private IPs for the private Load Balancers.
        /// </summary>
        public readonly ImmutableArray<string> Ips;
        /// <summary>
        /// Collection of private IP addresses with the subnet mask of the Application Load Balancer. IPs must contain valid a subnet mask. If no IP is provided, the system will generate an IP with /24 subnet.
        /// </summary>
        public readonly ImmutableArray<string> LbPrivateIps;
        /// <summary>
        /// ID of the listening (inbound) LAN.
        /// </summary>
        public readonly int ListenerLan;
        public readonly string LoggingFormat;
        /// <summary>
        /// Specifies the name of the flow log.
        /// </summary>
        public readonly string? Name;
        public readonly bool? PartialMatch;
        /// <summary>
        /// ID of the balanced private target LAN (outbound).
        /// </summary>
        public readonly int TargetLan;

        [OutputConstructor]
        private GetApplicationLoadbalancerResult(
            bool centralLogging,

            string datacenterId,

            ImmutableArray<Outputs.GetApplicationLoadbalancerFlowlogResult> flowlogs,

            string? id,

            ImmutableArray<string> ips,

            ImmutableArray<string> lbPrivateIps,

            int listenerLan,

            string loggingFormat,

            string? name,

            bool? partialMatch,

            int targetLan)
        {
            CentralLogging = centralLogging;
            DatacenterId = datacenterId;
            Flowlogs = flowlogs;
            Id = id;
            Ips = ips;
            LbPrivateIps = lbPrivateIps;
            ListenerLan = listenerLan;
            LoggingFormat = loggingFormat;
            Name = name;
            PartialMatch = partialMatch;
            TargetLan = targetLan;
        }
    }
}
