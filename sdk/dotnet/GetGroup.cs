// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud
{
    public static class GetGroup
    {
        /// <summary>
        /// The **Group data source** can be used to search for and return existing groups.
        /// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned. 
        /// When this happens, please refine your search string so that it is specific enough to return only one result.
        /// 
        /// ## Example Usage
        /// 
        /// ### By Name
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.GetGroup.Invoke(new()
        ///     {
        ///         Name = "Group Example",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetGroupResult> InvokeAsync(GetGroupArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGroupResult>("ionoscloud:index/getGroup:getGroup", args ?? new GetGroupArgs(), options.WithDefaults());

        /// <summary>
        /// The **Group data source** can be used to search for and return existing groups.
        /// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned. 
        /// When this happens, please refine your search string so that it is specific enough to return only one result.
        /// 
        /// ## Example Usage
        /// 
        /// ### By Name
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.GetGroup.Invoke(new()
        ///     {
        ///         Name = "Group Example",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetGroupResult> Invoke(GetGroupInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGroupResult>("ionoscloud:index/getGroup:getGroup", args ?? new GetGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the group you want to search for.
        /// 
        /// Either `name` or `id` must be provided. If none, or both are provided, the datasource will return an error.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Name of an existing group that you want to search for.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetGroupArgs()
        {
        }
        public static new GetGroupArgs Empty => new GetGroupArgs();
    }

    public sealed class GetGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the group you want to search for.
        /// 
        /// Either `name` or `id` must be provided. If none, or both are provided, the datasource will return an error.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Name of an existing group that you want to search for.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetGroupInvokeArgs()
        {
        }
        public static new GetGroupInvokeArgs Empty => new GetGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetGroupResult
    {
        /// <summary>
        /// The group will be allowed to access the activity log.
        /// </summary>
        public readonly bool AccessActivityLog;
        /// <summary>
        /// The group will be allowed to access and manage certificates.
        /// </summary>
        public readonly bool AccessAndManageCertificates;
        /// <summary>
        /// The group will be allowed to access and manage monitoring.
        /// </summary>
        public readonly bool AccessAndManageMonitoring;
        /// <summary>
        /// The group will be allowed to create backup unit privilege.
        /// </summary>
        public readonly bool CreateBackupUnit;
        /// <summary>
        /// The group will be allowed to create virtual data centers.
        /// </summary>
        public readonly bool CreateDatacenter;
        /// <summary>
        /// The group will be allowed to create flow log.
        /// </summary>
        public readonly bool CreateFlowLog;
        /// <summary>
        /// The group will be allowed to create internet access privilege.
        /// </summary>
        public readonly bool CreateInternetAccess;
        /// <summary>
        /// The group will be allowed to create kubernetes cluster privilege.
        /// </summary>
        public readonly bool CreateK8sCluster;
        /// <summary>
        /// The group will be allowed to create Cross Connects privilege.
        /// </summary>
        public readonly bool CreatePcc;
        /// <summary>
        /// The group will be allowed to create snapshots.
        /// </summary>
        public readonly bool CreateSnapshot;
        /// <summary>
        /// The id of the group.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Privilege for a group to manage DBaaS related functionality.
        /// </summary>
        public readonly bool ManageDbaas;
        /// <summary>
        /// A name for the group.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The group will be allowed to reserve IP addresses.
        /// </summary>
        public readonly bool ReserveIp;
        /// <summary>
        /// The group will have S3 privilege.
        /// </summary>
        public readonly bool S3Privilege;
        /// <summary>
        /// List of users in group.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGroupUserResult> Users;

        [OutputConstructor]
        private GetGroupResult(
            bool accessActivityLog,

            bool accessAndManageCertificates,

            bool accessAndManageMonitoring,

            bool createBackupUnit,

            bool createDatacenter,

            bool createFlowLog,

            bool createInternetAccess,

            bool createK8sCluster,

            bool createPcc,

            bool createSnapshot,

            string? id,

            bool manageDbaas,

            string? name,

            bool reserveIp,

            bool s3Privilege,

            ImmutableArray<Outputs.GetGroupUserResult> users)
        {
            AccessActivityLog = accessActivityLog;
            AccessAndManageCertificates = accessAndManageCertificates;
            AccessAndManageMonitoring = accessAndManageMonitoring;
            CreateBackupUnit = createBackupUnit;
            CreateDatacenter = createDatacenter;
            CreateFlowLog = createFlowLog;
            CreateInternetAccess = createInternetAccess;
            CreateK8sCluster = createK8sCluster;
            CreatePcc = createPcc;
            CreateSnapshot = createSnapshot;
            Id = id;
            ManageDbaas = manageDbaas;
            Name = name;
            ReserveIp = reserveIp;
            S3Privilege = s3Privilege;
            Users = users;
        }
    }
}
