// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud
{
    public static class GetApigatewayRoute
    {
        public static Task<GetApigatewayRouteResult> InvokeAsync(GetApigatewayRouteArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetApigatewayRouteResult>("ionoscloud:index/getApigatewayRoute:getApigatewayRoute", args ?? new GetApigatewayRouteArgs(), options.WithDefaults());

        public static Output<GetApigatewayRouteResult> Invoke(GetApigatewayRouteInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetApigatewayRouteResult>("ionoscloud:index/getApigatewayRoute:getApigatewayRoute", args ?? new GetApigatewayRouteInvokeArgs(), options.WithDefaults());

        public static Output<GetApigatewayRouteResult> Invoke(GetApigatewayRouteInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetApigatewayRouteResult>("ionoscloud:index/getApigatewayRoute:getApigatewayRoute", args ?? new GetApigatewayRouteInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetApigatewayRouteArgs : global::Pulumi.InvokeArgs
    {
        [Input("gatewayId", required: true)]
        public string GatewayId { get; set; } = null!;

        [Input("id")]
        public string? Id { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("partialMatch")]
        public bool? PartialMatch { get; set; }

        public GetApigatewayRouteArgs()
        {
        }
        public static new GetApigatewayRouteArgs Empty => new GetApigatewayRouteArgs();
    }

    public sealed class GetApigatewayRouteInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("gatewayId", required: true)]
        public Input<string> GatewayId { get; set; } = null!;

        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("partialMatch")]
        public Input<bool>? PartialMatch { get; set; }

        public GetApigatewayRouteInvokeArgs()
        {
        }
        public static new GetApigatewayRouteInvokeArgs Empty => new GetApigatewayRouteInvokeArgs();
    }


    [OutputType]
    public sealed class GetApigatewayRouteResult
    {
        public readonly string GatewayId;
        public readonly string Id;
        public readonly ImmutableArray<string> Methods;
        public readonly string Name;
        public readonly bool? PartialMatch;
        public readonly ImmutableArray<string> Paths;
        public readonly string Type;
        public readonly ImmutableArray<Outputs.GetApigatewayRouteUpstreamResult> Upstreams;
        public readonly bool Websocket;

        [OutputConstructor]
        private GetApigatewayRouteResult(
            string gatewayId,

            string id,

            ImmutableArray<string> methods,

            string name,

            bool? partialMatch,

            ImmutableArray<string> paths,

            string type,

            ImmutableArray<Outputs.GetApigatewayRouteUpstreamResult> upstreams,

            bool websocket)
        {
            GatewayId = gatewayId;
            Id = id;
            Methods = methods;
            Name = name;
            PartialMatch = partialMatch;
            Paths = paths;
            Type = type;
            Upstreams = upstreams;
            Websocket = websocket;
        }
    }
}
