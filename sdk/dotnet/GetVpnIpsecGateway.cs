// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud
{
    public static class GetVpnIpsecGateway
    {
        /// <summary>
        /// The **VPN IPSec Gateway data source** can be used to search for and return an existing IPSec Gateway.
        /// You can provide a string for the name parameter which will be compared with provisioned IPSec Gateways.
        /// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
        /// When this happens, please refine your search string so that it is specific enough to return only one result.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Task<GetVpnIpsecGatewayResult> InvokeAsync(GetVpnIpsecGatewayArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVpnIpsecGatewayResult>("ionoscloud:index/getVpnIpsecGateway:getVpnIpsecGateway", args ?? new GetVpnIpsecGatewayArgs(), options.WithDefaults());

        /// <summary>
        /// The **VPN IPSec Gateway data source** can be used to search for and return an existing IPSec Gateway.
        /// You can provide a string for the name parameter which will be compared with provisioned IPSec Gateways.
        /// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
        /// When this happens, please refine your search string so that it is specific enough to return only one result.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetVpnIpsecGatewayResult> Invoke(GetVpnIpsecGatewayInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpnIpsecGatewayResult>("ionoscloud:index/getVpnIpsecGateway:getVpnIpsecGateway", args ?? new GetVpnIpsecGatewayInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The **VPN IPSec Gateway data source** can be used to search for and return an existing IPSec Gateway.
        /// You can provide a string for the name parameter which will be compared with provisioned IPSec Gateways.
        /// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
        /// When this happens, please refine your search string so that it is specific enough to return only one result.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetVpnIpsecGatewayResult> Invoke(GetVpnIpsecGatewayInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpnIpsecGatewayResult>("ionoscloud:index/getVpnIpsecGateway:getVpnIpsecGateway", args ?? new GetVpnIpsecGatewayInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVpnIpsecGatewayArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of an existing IPSec Gateway that you want to search for.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The location of the IPSec Gateway.
        /// </summary>
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        /// <summary>
        /// Name of an existing IPSec Gateway that you want to search for.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The IKE version that is permitted for the VPN tunnels.
        /// </summary>
        [Input("version")]
        public string? Version { get; set; }

        public GetVpnIpsecGatewayArgs()
        {
        }
        public static new GetVpnIpsecGatewayArgs Empty => new GetVpnIpsecGatewayArgs();
    }

    public sealed class GetVpnIpsecGatewayInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of an existing IPSec Gateway that you want to search for.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The location of the IPSec Gateway.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Name of an existing IPSec Gateway that you want to search for.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The IKE version that is permitted for the VPN tunnels.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public GetVpnIpsecGatewayInvokeArgs()
        {
        }
        public static new GetVpnIpsecGatewayInvokeArgs Empty => new GetVpnIpsecGatewayInvokeArgs();
    }


    [OutputType]
    public sealed class GetVpnIpsecGatewayResult
    {
        /// <summary>
        /// The network connection for your gateway.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnIpsecGatewayConnectionResult> Connections;
        /// <summary>
        /// (Optional)[string] The human-readable description of the IPSec Gateway.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Public IP address to be assigned to the gateway.
        /// </summary>
        public readonly string GatewayIp;
        /// <summary>
        /// The unique ID of the IPSec Gateway.
        /// </summary>
        public readonly string Id;
        public readonly string Location;
        /// <summary>
        /// The name of the IPSec Gateway.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The IKE version that is permitted for the VPN tunnels.
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetVpnIpsecGatewayResult(
            ImmutableArray<Outputs.GetVpnIpsecGatewayConnectionResult> connections,

            string description,

            string gatewayIp,

            string id,

            string location,

            string name,

            string version)
        {
            Connections = connections;
            Description = description;
            GatewayIp = gatewayIp;
            Id = id;
            Location = location;
            Name = name;
            Version = version;
        }
    }
}
