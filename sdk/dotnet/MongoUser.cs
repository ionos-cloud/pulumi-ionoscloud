// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud
{
    [IonoscloudResourceType("ionoscloud:index/mongoUser:MongoUser")]
    public partial class MongoUser : global::Pulumi.CustomResource
    {
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        [Output("roles")]
        public Output<ImmutableArray<Outputs.MongoUserRole>> Roles { get; private set; } = null!;

        [Output("username")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a MongoUser resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MongoUser(string name, MongoUserArgs args, CustomResourceOptions? options = null)
            : base("ionoscloud:index/mongoUser:MongoUser", name, args ?? new MongoUserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MongoUser(string name, Input<string> id, MongoUserState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:index/mongoUser:MongoUser", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/ionos-cloud/pulumi-ionoscloud/",
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MongoUser resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MongoUser Get(string name, Input<string> id, MongoUserState? state = null, CustomResourceOptions? options = null)
        {
            return new MongoUser(name, id, state, options);
        }
    }

    public sealed class MongoUserArgs : global::Pulumi.ResourceArgs
    {
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        [Input("password", required: true)]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("roles")]
        private InputList<Inputs.MongoUserRoleArgs>? _roles;
        public InputList<Inputs.MongoUserRoleArgs> Roles
        {
            get => _roles ?? (_roles = new InputList<Inputs.MongoUserRoleArgs>());
            set => _roles = value;
        }

        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public MongoUserArgs()
        {
        }
        public static new MongoUserArgs Empty => new MongoUserArgs();
    }

    public sealed class MongoUserState : global::Pulumi.ResourceArgs
    {
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("password")]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("roles")]
        private InputList<Inputs.MongoUserRoleGetArgs>? _roles;
        public InputList<Inputs.MongoUserRoleGetArgs> Roles
        {
            get => _roles ?? (_roles = new InputList<Inputs.MongoUserRoleGetArgs>());
            set => _roles = value;
        }

        [Input("username")]
        public Input<string>? Username { get; set; }

        public MongoUserState()
        {
        }
        public static new MongoUserState Empty => new MongoUserState();
    }
}
