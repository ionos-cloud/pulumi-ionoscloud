// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud
{
    public static class GetNfsShare
    {
        /// <summary>
        /// Returns information about shares of Network File Storage (NFS) on IonosCloud.
        /// </summary>
        public static Task<GetNfsShareResult> InvokeAsync(GetNfsShareArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNfsShareResult>("ionoscloud:index/getNfsShare:getNfsShare", args ?? new GetNfsShareArgs(), options.WithDefaults());

        /// <summary>
        /// Returns information about shares of Network File Storage (NFS) on IonosCloud.
        /// </summary>
        public static Output<GetNfsShareResult> Invoke(GetNfsShareInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNfsShareResult>("ionoscloud:index/getNfsShare:getNfsShare", args ?? new GetNfsShareInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNfsShareArgs : global::Pulumi.InvokeArgs
    {
        [Input("clientGroups")]
        private List<Inputs.GetNfsShareClientGroupArgs>? _clientGroups;

        /// <summary>
        /// The groups of clients are the systems connecting to the Network File Storage cluster. Each client group supports the following:
        /// </summary>
        public List<Inputs.GetNfsShareClientGroupArgs> ClientGroups
        {
            get => _clientGroups ?? (_clientGroups = new List<Inputs.GetNfsShareClientGroupArgs>());
            set => _clientGroups = value;
        }

        /// <summary>
        /// The ID of the Network File Storage cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        /// <summary>
        /// The group ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
        /// </summary>
        [Input("gid")]
        public int? Gid { get; set; }

        /// <summary>
        /// ID of the Network File Storage share.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The location where the Network File Storage share is located.
        /// </summary>
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        /// <summary>
        /// Name of the Network File Storage share.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Whether partial matching is allowed or not when using the name filter. Defaults to `false`.
        /// </summary>
        [Input("partialMatch")]
        public bool? PartialMatch { get; set; }

        /// <summary>
        /// The quota in MiB for the export. The quota can restrict the amount of data that can be stored within the export. The quota can be disabled using `0`.
        /// </summary>
        [Input("quota")]
        public int? Quota { get; set; }

        /// <summary>
        /// The user ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
        /// </summary>
        [Input("uid")]
        public int? Uid { get; set; }

        public GetNfsShareArgs()
        {
        }
        public static new GetNfsShareArgs Empty => new GetNfsShareArgs();
    }

    public sealed class GetNfsShareInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("clientGroups")]
        private InputList<Inputs.GetNfsShareClientGroupInputArgs>? _clientGroups;

        /// <summary>
        /// The groups of clients are the systems connecting to the Network File Storage cluster. Each client group supports the following:
        /// </summary>
        public InputList<Inputs.GetNfsShareClientGroupInputArgs> ClientGroups
        {
            get => _clientGroups ?? (_clientGroups = new InputList<Inputs.GetNfsShareClientGroupInputArgs>());
            set => _clientGroups = value;
        }

        /// <summary>
        /// The ID of the Network File Storage cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// The group ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
        /// </summary>
        [Input("gid")]
        public Input<int>? Gid { get; set; }

        /// <summary>
        /// ID of the Network File Storage share.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The location where the Network File Storage share is located.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Name of the Network File Storage share.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether partial matching is allowed or not when using the name filter. Defaults to `false`.
        /// </summary>
        [Input("partialMatch")]
        public Input<bool>? PartialMatch { get; set; }

        /// <summary>
        /// The quota in MiB for the export. The quota can restrict the amount of data that can be stored within the export. The quota can be disabled using `0`.
        /// </summary>
        [Input("quota")]
        public Input<int>? Quota { get; set; }

        /// <summary>
        /// The user ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
        /// </summary>
        [Input("uid")]
        public Input<int>? Uid { get; set; }

        public GetNfsShareInvokeArgs()
        {
        }
        public static new GetNfsShareInvokeArgs Empty => new GetNfsShareInvokeArgs();
    }


    [OutputType]
    public sealed class GetNfsShareResult
    {
        /// <summary>
        /// The groups of clients are the systems connecting to the Network File Storage cluster. Each client group supports the following:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNfsShareClientGroupResult> ClientGroups;
        /// <summary>
        /// The ID of the Network File Storage cluster.
        /// </summary>
        public readonly string ClusterId;
        /// <summary>
        /// The group ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
        /// </summary>
        public readonly int Gid;
        /// <summary>
        /// The ID of the Network File Storage share.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The location where the Network File Storage share is located.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the Network File Storage share.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Path to the NFS export. The NFS path is the path to the directory being exported.
        /// </summary>
        public readonly string NfsPath;
        public readonly bool? PartialMatch;
        /// <summary>
        /// The quota in MiB for the export. The quota can restrict the amount of data that can be stored within the export. The quota can be disabled using `0`.
        /// </summary>
        public readonly int Quota;
        /// <summary>
        /// The user ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
        /// </summary>
        public readonly int Uid;

        [OutputConstructor]
        private GetNfsShareResult(
            ImmutableArray<Outputs.GetNfsShareClientGroupResult> clientGroups,

            string clusterId,

            int gid,

            string id,

            string location,

            string name,

            string nfsPath,

            bool? partialMatch,

            int quota,

            int uid)
        {
            ClientGroups = clientGroups;
            ClusterId = clusterId;
            Gid = gid;
            Id = id;
            Location = location;
            Name = name;
            NfsPath = nfsPath;
            PartialMatch = partialMatch;
            Quota = quota;
            Uid = uid;
        }
    }
}
