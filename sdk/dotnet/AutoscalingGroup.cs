// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud
{
    [IonoscloudResourceType("ionoscloud:index/autoscalingGroup:AutoscalingGroup")]
    public partial class AutoscalingGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Unique identifier for the resource
        /// </summary>
        [Output("datacenterId")]
        public Output<string> DatacenterId { get; private set; } = null!;

        /// <summary>
        /// Location of the data center.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The maximum value for the number of replicas on a VM Auto Scaling Group. Must be &gt;= 0 and &lt;= 200. Will be enforced for
        /// both automatic and manual changes.
        /// </summary>
        [Output("maxReplicaCount")]
        public Output<int> MaxReplicaCount { get; private set; } = null!;

        /// <summary>
        /// The minimum value for the number of replicas on a VM Auto Scaling Group. Must be &gt;= 0 and &lt;= 200. Will be enforced for
        /// both automatic and manual changes
        /// </summary>
        [Output("minReplicaCount")]
        public Output<int> MinReplicaCount { get; private set; } = null!;

        /// <summary>
        /// User-defined name for the Autoscaling Group.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Defines the behavior of this VM Auto Scaling Group. A policy consists of triggers and actions, where an action is an
        /// automated behavior, and the trigger defines the circumstances under which the action is triggered. Currently, two
        /// separate actions are supported, namely scaling inward and outward, triggered by the thresholds defined for a particular
        /// metric.
        /// </summary>
        [Output("policy")]
        public Output<Outputs.AutoscalingGroupPolicy> Policy { get; private set; } = null!;

        [Output("replicaConfiguration")]
        public Output<Outputs.AutoscalingGroupReplicaConfiguration> ReplicaConfiguration { get; private set; } = null!;


        /// <summary>
        /// Create a AutoscalingGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AutoscalingGroup(string name, AutoscalingGroupArgs args, CustomResourceOptions? options = null)
            : base("ionoscloud:index/autoscalingGroup:AutoscalingGroup", name, args ?? new AutoscalingGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AutoscalingGroup(string name, Input<string> id, AutoscalingGroupState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:index/autoscalingGroup:AutoscalingGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AutoscalingGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AutoscalingGroup Get(string name, Input<string> id, AutoscalingGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new AutoscalingGroup(name, id, state, options);
        }
    }

    public sealed class AutoscalingGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Unique identifier for the resource
        /// </summary>
        [Input("datacenterId", required: true)]
        public Input<string> DatacenterId { get; set; } = null!;

        /// <summary>
        /// The maximum value for the number of replicas on a VM Auto Scaling Group. Must be &gt;= 0 and &lt;= 200. Will be enforced for
        /// both automatic and manual changes.
        /// </summary>
        [Input("maxReplicaCount", required: true)]
        public Input<int> MaxReplicaCount { get; set; } = null!;

        /// <summary>
        /// The minimum value for the number of replicas on a VM Auto Scaling Group. Must be &gt;= 0 and &lt;= 200. Will be enforced for
        /// both automatic and manual changes
        /// </summary>
        [Input("minReplicaCount", required: true)]
        public Input<int> MinReplicaCount { get; set; } = null!;

        /// <summary>
        /// User-defined name for the Autoscaling Group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Defines the behavior of this VM Auto Scaling Group. A policy consists of triggers and actions, where an action is an
        /// automated behavior, and the trigger defines the circumstances under which the action is triggered. Currently, two
        /// separate actions are supported, namely scaling inward and outward, triggered by the thresholds defined for a particular
        /// metric.
        /// </summary>
        [Input("policy", required: true)]
        public Input<Inputs.AutoscalingGroupPolicyArgs> Policy { get; set; } = null!;

        [Input("replicaConfiguration", required: true)]
        public Input<Inputs.AutoscalingGroupReplicaConfigurationArgs> ReplicaConfiguration { get; set; } = null!;

        public AutoscalingGroupArgs()
        {
        }
        public static new AutoscalingGroupArgs Empty => new AutoscalingGroupArgs();
    }

    public sealed class AutoscalingGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Unique identifier for the resource
        /// </summary>
        [Input("datacenterId")]
        public Input<string>? DatacenterId { get; set; }

        /// <summary>
        /// Location of the data center.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The maximum value for the number of replicas on a VM Auto Scaling Group. Must be &gt;= 0 and &lt;= 200. Will be enforced for
        /// both automatic and manual changes.
        /// </summary>
        [Input("maxReplicaCount")]
        public Input<int>? MaxReplicaCount { get; set; }

        /// <summary>
        /// The minimum value for the number of replicas on a VM Auto Scaling Group. Must be &gt;= 0 and &lt;= 200. Will be enforced for
        /// both automatic and manual changes
        /// </summary>
        [Input("minReplicaCount")]
        public Input<int>? MinReplicaCount { get; set; }

        /// <summary>
        /// User-defined name for the Autoscaling Group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Defines the behavior of this VM Auto Scaling Group. A policy consists of triggers and actions, where an action is an
        /// automated behavior, and the trigger defines the circumstances under which the action is triggered. Currently, two
        /// separate actions are supported, namely scaling inward and outward, triggered by the thresholds defined for a particular
        /// metric.
        /// </summary>
        [Input("policy")]
        public Input<Inputs.AutoscalingGroupPolicyGetArgs>? Policy { get; set; }

        [Input("replicaConfiguration")]
        public Input<Inputs.AutoscalingGroupReplicaConfigurationGetArgs>? ReplicaConfiguration { get; set; }

        public AutoscalingGroupState()
        {
        }
        public static new AutoscalingGroupState Empty => new AutoscalingGroupState();
    }
}
