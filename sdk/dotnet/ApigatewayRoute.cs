// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud
{
    [IonoscloudResourceType("ionoscloud:index/apigatewayRoute:ApigatewayRoute")]
    public partial class ApigatewayRoute : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the API Gateway that the route belongs to.
        /// </summary>
        [Output("gatewayId")]
        public Output<string> GatewayId { get; private set; } = null!;

        /// <summary>
        /// The HTTP methods that the route should match.
        /// </summary>
        [Output("methods")]
        public Output<ImmutableArray<string>> Methods { get; private set; } = null!;

        /// <summary>
        /// The name of the API Gateway Route.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The paths that the route should match.
        /// </summary>
        [Output("paths")]
        public Output<ImmutableArray<string>> Paths { get; private set; } = null!;

        /// <summary>
        /// This field specifies the protocol used by the ingress to route traffic to the backend service.
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        [Output("upstreams")]
        public Output<ImmutableArray<Outputs.ApigatewayRouteUpstream>> Upstreams { get; private set; } = null!;

        /// <summary>
        /// To enable websocket support.
        /// </summary>
        [Output("websocket")]
        public Output<bool?> Websocket { get; private set; } = null!;


        /// <summary>
        /// Create a ApigatewayRoute resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApigatewayRoute(string name, ApigatewayRouteArgs args, CustomResourceOptions? options = null)
            : base("ionoscloud:index/apigatewayRoute:ApigatewayRoute", name, args ?? new ApigatewayRouteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApigatewayRoute(string name, Input<string> id, ApigatewayRouteState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:index/apigatewayRoute:ApigatewayRoute", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApigatewayRoute resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApigatewayRoute Get(string name, Input<string> id, ApigatewayRouteState? state = null, CustomResourceOptions? options = null)
        {
            return new ApigatewayRoute(name, id, state, options);
        }
    }

    public sealed class ApigatewayRouteArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the API Gateway that the route belongs to.
        /// </summary>
        [Input("gatewayId", required: true)]
        public Input<string> GatewayId { get; set; } = null!;

        [Input("methods", required: true)]
        private InputList<string>? _methods;

        /// <summary>
        /// The HTTP methods that the route should match.
        /// </summary>
        public InputList<string> Methods
        {
            get => _methods ?? (_methods = new InputList<string>());
            set => _methods = value;
        }

        /// <summary>
        /// The name of the API Gateway Route.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("paths", required: true)]
        private InputList<string>? _paths;

        /// <summary>
        /// The paths that the route should match.
        /// </summary>
        public InputList<string> Paths
        {
            get => _paths ?? (_paths = new InputList<string>());
            set => _paths = value;
        }

        /// <summary>
        /// This field specifies the protocol used by the ingress to route traffic to the backend service.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("upstreams", required: true)]
        private InputList<Inputs.ApigatewayRouteUpstreamArgs>? _upstreams;
        public InputList<Inputs.ApigatewayRouteUpstreamArgs> Upstreams
        {
            get => _upstreams ?? (_upstreams = new InputList<Inputs.ApigatewayRouteUpstreamArgs>());
            set => _upstreams = value;
        }

        /// <summary>
        /// To enable websocket support.
        /// </summary>
        [Input("websocket")]
        public Input<bool>? Websocket { get; set; }

        public ApigatewayRouteArgs()
        {
        }
        public static new ApigatewayRouteArgs Empty => new ApigatewayRouteArgs();
    }

    public sealed class ApigatewayRouteState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the API Gateway that the route belongs to.
        /// </summary>
        [Input("gatewayId")]
        public Input<string>? GatewayId { get; set; }

        [Input("methods")]
        private InputList<string>? _methods;

        /// <summary>
        /// The HTTP methods that the route should match.
        /// </summary>
        public InputList<string> Methods
        {
            get => _methods ?? (_methods = new InputList<string>());
            set => _methods = value;
        }

        /// <summary>
        /// The name of the API Gateway Route.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("paths")]
        private InputList<string>? _paths;

        /// <summary>
        /// The paths that the route should match.
        /// </summary>
        public InputList<string> Paths
        {
            get => _paths ?? (_paths = new InputList<string>());
            set => _paths = value;
        }

        /// <summary>
        /// This field specifies the protocol used by the ingress to route traffic to the backend service.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("upstreams")]
        private InputList<Inputs.ApigatewayRouteUpstreamGetArgs>? _upstreams;
        public InputList<Inputs.ApigatewayRouteUpstreamGetArgs> Upstreams
        {
            get => _upstreams ?? (_upstreams = new InputList<Inputs.ApigatewayRouteUpstreamGetArgs>());
            set => _upstreams = value;
        }

        /// <summary>
        /// To enable websocket support.
        /// </summary>
        [Input("websocket")]
        public Input<bool>? Websocket { get; set; }

        public ApigatewayRouteState()
        {
        }
        public static new ApigatewayRouteState Empty => new ApigatewayRouteState();
    }
}
