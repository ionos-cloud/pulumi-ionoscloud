// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud.Dsaas
{
    public static class GetNodePool
    {
        public static Task<GetNodePoolResult> InvokeAsync(GetNodePoolArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNodePoolResult>("ionoscloud:dsaas/getNodePool:getNodePool", args ?? new GetNodePoolArgs(), options.WithDefaults());

        public static Output<GetNodePoolResult> Invoke(GetNodePoolInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNodePoolResult>("ionoscloud:dsaas/getNodePool:getNodePool", args ?? new GetNodePoolInvokeArgs(), options.WithDefaults());

        public static Output<GetNodePoolResult> Invoke(GetNodePoolInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNodePoolResult>("ionoscloud:dsaas/getNodePool:getNodePool", args ?? new GetNodePoolInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNodePoolArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        [Input("id")]
        public string? Id { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("partialMatch")]
        public bool? PartialMatch { get; set; }

        public GetNodePoolArgs()
        {
        }
        public static new GetNodePoolArgs Empty => new GetNodePoolArgs();
    }

    public sealed class GetNodePoolInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("partialMatch")]
        public Input<bool>? PartialMatch { get; set; }

        public GetNodePoolInvokeArgs()
        {
        }
        public static new GetNodePoolInvokeArgs Empty => new GetNodePoolInvokeArgs();
    }


    [OutputType]
    public sealed class GetNodePoolResult
    {
        public readonly ImmutableDictionary<string, string> Annotations;
        public readonly string AvailabilityZone;
        public readonly string ClusterId;
        public readonly int CoresCount;
        public readonly string CpuFamily;
        public readonly string DatacenterId;
        public readonly string? Id;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly ImmutableArray<Outputs.GetNodePoolMaintenanceWindowResult> MaintenanceWindows;
        public readonly string? Name;
        public readonly int NodeCount;
        public readonly bool? PartialMatch;
        public readonly int RamSize;
        public readonly int StorageSize;
        public readonly string StorageType;
        public readonly string Version;

        [OutputConstructor]
        private GetNodePoolResult(
            ImmutableDictionary<string, string> annotations,

            string availabilityZone,

            string clusterId,

            int coresCount,

            string cpuFamily,

            string datacenterId,

            string? id,

            ImmutableDictionary<string, string> labels,

            ImmutableArray<Outputs.GetNodePoolMaintenanceWindowResult> maintenanceWindows,

            string? name,

            int nodeCount,

            bool? partialMatch,

            int ramSize,

            int storageSize,

            string storageType,

            string version)
        {
            Annotations = annotations;
            AvailabilityZone = availabilityZone;
            ClusterId = clusterId;
            CoresCount = coresCount;
            CpuFamily = cpuFamily;
            DatacenterId = datacenterId;
            Id = id;
            Labels = labels;
            MaintenanceWindows = maintenanceWindows;
            Name = name;
            NodeCount = nodeCount;
            PartialMatch = partialMatch;
            RamSize = ramSize;
            StorageSize = storageSize;
            StorageType = storageType;
            Version = version;
        }
    }
}
