// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud.Dsaas
{
    public static class GetCluster
    {
        public static Task<GetClusterResult> InvokeAsync(GetClusterArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClusterResult>("ionoscloud:dsaas/getCluster:getCluster", args ?? new GetClusterArgs(), options.WithDefaults());

        public static Output<GetClusterResult> Invoke(GetClusterInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterResult>("ionoscloud:dsaas/getCluster:getCluster", args ?? new GetClusterInvokeArgs(), options.WithDefaults());

        public static Output<GetClusterResult> Invoke(GetClusterInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterResult>("ionoscloud:dsaas/getCluster:getCluster", args ?? new GetClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public string? Id { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("partialMatch")]
        public bool? PartialMatch { get; set; }

        public GetClusterArgs()
        {
        }
        public static new GetClusterArgs Empty => new GetClusterArgs();
    }

    public sealed class GetClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("partialMatch")]
        public Input<bool>? PartialMatch { get; set; }

        public GetClusterInvokeArgs()
        {
        }
        public static new GetClusterInvokeArgs Empty => new GetClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetClusterResult
    {
        public readonly string CaCrt;
        public readonly ImmutableArray<Outputs.GetClusterConfigResult> Configs;
        public readonly string DatacenterId;
        public readonly string? Id;
        public readonly string KubeConfig;
        public readonly ImmutableArray<Outputs.GetClusterLanResult> Lans;
        public readonly ImmutableArray<Outputs.GetClusterMaintenanceWindowResult> MaintenanceWindows;
        public readonly string? Name;
        public readonly bool? PartialMatch;
        public readonly string Server;
        public readonly ImmutableDictionary<string, string> UserTokens;
        public readonly string Version;

        [OutputConstructor]
        private GetClusterResult(
            string caCrt,

            ImmutableArray<Outputs.GetClusterConfigResult> configs,

            string datacenterId,

            string? id,

            string kubeConfig,

            ImmutableArray<Outputs.GetClusterLanResult> lans,

            ImmutableArray<Outputs.GetClusterMaintenanceWindowResult> maintenanceWindows,

            string? name,

            bool? partialMatch,

            string server,

            ImmutableDictionary<string, string> userTokens,

            string version)
        {
            CaCrt = caCrt;
            Configs = configs;
            DatacenterId = datacenterId;
            Id = id;
            KubeConfig = kubeConfig;
            Lans = lans;
            MaintenanceWindows = maintenanceWindows;
            Name = name;
            PartialMatch = partialMatch;
            Server = server;
            UserTokens = userTokens;
            Version = version;
        }
    }
}
