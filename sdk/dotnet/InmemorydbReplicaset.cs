// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud
{
    [IonoscloudResourceType("ionoscloud:index/inmemorydbReplicaset:InmemorydbReplicaset")]
    public partial class InmemorydbReplicaset : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The network connection for your replica set. Only one connection is allowed.
        /// </summary>
        [Output("connections")]
        public Output<Outputs.InmemorydbReplicasetConnections> Connections { get; private set; } = null!;

        /// <summary>
        /// Credentials for the InMemoryDB replicaset.
        /// </summary>
        [Output("credentials")]
        public Output<Outputs.InmemorydbReplicasetCredentials> Credentials { get; private set; } = null!;

        /// <summary>
        /// The human readable name of your replica set.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The DNS name pointing to your replica set. Will be used to connect to the active/standalone instance.
        /// </summary>
        [Output("dnsName")]
        public Output<string> DnsName { get; private set; } = null!;

        /// <summary>
        /// The eviction policy for the replica set.
        /// </summary>
        [Output("evictionPolicy")]
        public Output<string> EvictionPolicy { get; private set; } = null!;

        /// <summary>
        /// The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
        /// </summary>
        [Output("initialSnapshotId")]
        public Output<string?> InitialSnapshotId { get; private set; } = null!;

        /// <summary>
        /// The replica set location
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// A weekly 4 hour-long window, during which maintenance might occur.
        /// </summary>
        [Output("maintenanceWindow")]
        public Output<Outputs.InmemorydbReplicasetMaintenanceWindow> MaintenanceWindow { get; private set; } = null!;

        /// <summary>
        /// Specifies How and If data is persisted.
        /// </summary>
        [Output("persistenceMode")]
        public Output<string> PersistenceMode { get; private set; } = null!;

        /// <summary>
        /// The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the
        /// value is 1. In all other cases, the value is &gt; 1. The replicas will not be available as read replicas, they are only
        /// standby for a failure of the active instance.
        /// </summary>
        [Output("replicas")]
        public Output<int> Replicas { get; private set; } = null!;

        /// <summary>
        /// The resources of the individual replicas.
        /// </summary>
        [Output("resources")]
        public Output<Outputs.InmemorydbReplicasetResources> Resources { get; private set; } = null!;

        /// <summary>
        /// The InMemoryDB version of your replica set.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a InmemorydbReplicaset resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InmemorydbReplicaset(string name, InmemorydbReplicasetArgs args, CustomResourceOptions? options = null)
            : base("ionoscloud:index/inmemorydbReplicaset:InmemorydbReplicaset", name, args ?? new InmemorydbReplicasetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InmemorydbReplicaset(string name, Input<string> id, InmemorydbReplicasetState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:index/inmemorydbReplicaset:InmemorydbReplicaset", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/ionos-cloud/pulumi-ionoscloud/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InmemorydbReplicaset resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InmemorydbReplicaset Get(string name, Input<string> id, InmemorydbReplicasetState? state = null, CustomResourceOptions? options = null)
        {
            return new InmemorydbReplicaset(name, id, state, options);
        }
    }

    public sealed class InmemorydbReplicasetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The network connection for your replica set. Only one connection is allowed.
        /// </summary>
        [Input("connections", required: true)]
        public Input<Inputs.InmemorydbReplicasetConnectionsArgs> Connections { get; set; } = null!;

        /// <summary>
        /// Credentials for the InMemoryDB replicaset.
        /// </summary>
        [Input("credentials", required: true)]
        public Input<Inputs.InmemorydbReplicasetCredentialsArgs> Credentials { get; set; } = null!;

        /// <summary>
        /// The human readable name of your replica set.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// The eviction policy for the replica set.
        /// </summary>
        [Input("evictionPolicy", required: true)]
        public Input<string> EvictionPolicy { get; set; } = null!;

        /// <summary>
        /// The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
        /// </summary>
        [Input("initialSnapshotId")]
        public Input<string>? InitialSnapshotId { get; set; }

        /// <summary>
        /// The replica set location
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// A weekly 4 hour-long window, during which maintenance might occur.
        /// </summary>
        [Input("maintenanceWindow")]
        public Input<Inputs.InmemorydbReplicasetMaintenanceWindowArgs>? MaintenanceWindow { get; set; }

        /// <summary>
        /// Specifies How and If data is persisted.
        /// </summary>
        [Input("persistenceMode", required: true)]
        public Input<string> PersistenceMode { get; set; } = null!;

        /// <summary>
        /// The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the
        /// value is 1. In all other cases, the value is &gt; 1. The replicas will not be available as read replicas, they are only
        /// standby for a failure of the active instance.
        /// </summary>
        [Input("replicas", required: true)]
        public Input<int> Replicas { get; set; } = null!;

        /// <summary>
        /// The resources of the individual replicas.
        /// </summary>
        [Input("resources", required: true)]
        public Input<Inputs.InmemorydbReplicasetResourcesArgs> Resources { get; set; } = null!;

        /// <summary>
        /// The InMemoryDB version of your replica set.
        /// </summary>
        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        public InmemorydbReplicasetArgs()
        {
        }
        public static new InmemorydbReplicasetArgs Empty => new InmemorydbReplicasetArgs();
    }

    public sealed class InmemorydbReplicasetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The network connection for your replica set. Only one connection is allowed.
        /// </summary>
        [Input("connections")]
        public Input<Inputs.InmemorydbReplicasetConnectionsGetArgs>? Connections { get; set; }

        /// <summary>
        /// Credentials for the InMemoryDB replicaset.
        /// </summary>
        [Input("credentials")]
        public Input<Inputs.InmemorydbReplicasetCredentialsGetArgs>? Credentials { get; set; }

        /// <summary>
        /// The human readable name of your replica set.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The DNS name pointing to your replica set. Will be used to connect to the active/standalone instance.
        /// </summary>
        [Input("dnsName")]
        public Input<string>? DnsName { get; set; }

        /// <summary>
        /// The eviction policy for the replica set.
        /// </summary>
        [Input("evictionPolicy")]
        public Input<string>? EvictionPolicy { get; set; }

        /// <summary>
        /// The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
        /// </summary>
        [Input("initialSnapshotId")]
        public Input<string>? InitialSnapshotId { get; set; }

        /// <summary>
        /// The replica set location
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// A weekly 4 hour-long window, during which maintenance might occur.
        /// </summary>
        [Input("maintenanceWindow")]
        public Input<Inputs.InmemorydbReplicasetMaintenanceWindowGetArgs>? MaintenanceWindow { get; set; }

        /// <summary>
        /// Specifies How and If data is persisted.
        /// </summary>
        [Input("persistenceMode")]
        public Input<string>? PersistenceMode { get; set; }

        /// <summary>
        /// The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the
        /// value is 1. In all other cases, the value is &gt; 1. The replicas will not be available as read replicas, they are only
        /// standby for a failure of the active instance.
        /// </summary>
        [Input("replicas")]
        public Input<int>? Replicas { get; set; }

        /// <summary>
        /// The resources of the individual replicas.
        /// </summary>
        [Input("resources")]
        public Input<Inputs.InmemorydbReplicasetResourcesGetArgs>? Resources { get; set; }

        /// <summary>
        /// The InMemoryDB version of your replica set.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public InmemorydbReplicasetState()
        {
        }
        public static new InmemorydbReplicasetState Empty => new InmemorydbReplicasetState();
    }
}
