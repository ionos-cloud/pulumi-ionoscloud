// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud.Creg
{
    public static class GetRegistry
    {
        public static Task<GetRegistryResult> InvokeAsync(GetRegistryArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRegistryResult>("ionoscloud:creg/getRegistry:getRegistry", args ?? new GetRegistryArgs(), options.WithDefaults());

        public static Output<GetRegistryResult> Invoke(GetRegistryInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegistryResult>("ionoscloud:creg/getRegistry:getRegistry", args ?? new GetRegistryInvokeArgs(), options.WithDefaults());

        public static Output<GetRegistryResult> Invoke(GetRegistryInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegistryResult>("ionoscloud:creg/getRegistry:getRegistry", args ?? new GetRegistryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRegistryArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public string? Id { get; set; }

        [Input("location")]
        public string? Location { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("partialMatch")]
        public bool? PartialMatch { get; set; }

        public GetRegistryArgs()
        {
        }
        public static new GetRegistryArgs Empty => new GetRegistryArgs();
    }

    public sealed class GetRegistryInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("partialMatch")]
        public Input<bool>? PartialMatch { get; set; }

        public GetRegistryInvokeArgs()
        {
        }
        public static new GetRegistryInvokeArgs Empty => new GetRegistryInvokeArgs();
    }


    [OutputType]
    public sealed class GetRegistryResult
    {
        public readonly ImmutableArray<string> ApiSubnetAllowLists;
        public readonly ImmutableArray<Outputs.GetRegistryFeatureResult> Features;
        public readonly ImmutableArray<Outputs.GetRegistryGarbageCollectionScheduleResult> GarbageCollectionSchedules;
        public readonly string Hostname;
        public readonly string? Id;
        public readonly string? Location;
        public readonly ImmutableArray<Outputs.GetRegistryMaintenanceWindowResult> MaintenanceWindows;
        public readonly string? Name;
        public readonly bool? PartialMatch;
        public readonly ImmutableArray<Outputs.GetRegistryStorageUsageResult> StorageUsages;

        [OutputConstructor]
        private GetRegistryResult(
            ImmutableArray<string> apiSubnetAllowLists,

            ImmutableArray<Outputs.GetRegistryFeatureResult> features,

            ImmutableArray<Outputs.GetRegistryGarbageCollectionScheduleResult> garbageCollectionSchedules,

            string hostname,

            string? id,

            string? location,

            ImmutableArray<Outputs.GetRegistryMaintenanceWindowResult> maintenanceWindows,

            string? name,

            bool? partialMatch,

            ImmutableArray<Outputs.GetRegistryStorageUsageResult> storageUsages)
        {
            ApiSubnetAllowLists = apiSubnetAllowLists;
            Features = features;
            GarbageCollectionSchedules = garbageCollectionSchedules;
            Hostname = hostname;
            Id = id;
            Location = location;
            MaintenanceWindows = maintenanceWindows;
            Name = name;
            PartialMatch = partialMatch;
            StorageUsages = storageUsages;
        }
    }
}
