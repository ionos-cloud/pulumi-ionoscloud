// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud
{
    /// <summary>
    /// ## Import
    /// 
    /// In order to import a Logging pipeline, you can define an empty Logging pipeline resource in the plan:
    /// 
    /// hcl
    /// 
    /// resource "ionoscloud_logging_pipeline" "example" {
    /// 
    /// }
    /// 
    /// The resource can be imported using the `location` and `pipeline_id`, for example:
    /// 
    /// ```sh
    /// $ pulumi import ionoscloud:index/loggingPipeline:LoggingPipeline example {location}:{pipeline_id}
    /// ```
    /// </summary>
    [IonoscloudResourceType("ionoscloud:index/loggingPipeline:LoggingPipeline")]
    public partial class LoggingPipeline : global::Pulumi.CustomResource
    {
        /// <summary>
        /// [string] The address of the client's grafana instance.
        /// </summary>
        [Output("grafanaAddress")]
        public Output<string> GrafanaAddress { get; private set; } = null!;

        /// <summary>
        /// [string] The location of the Logging pipeline. Default: `de/txl` One of `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `fr/par`.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// [list] Pipeline logs, a list that contains elements with the following structure:
        /// </summary>
        [Output("logs")]
        public Output<ImmutableArray<Outputs.LoggingPipelineLog>> Logs { get; private set; } = null!;

        /// <summary>
        /// [string] The name of the Logging pipeline.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a LoggingPipeline resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LoggingPipeline(string name, LoggingPipelineArgs args, CustomResourceOptions? options = null)
            : base("ionoscloud:index/loggingPipeline:LoggingPipeline", name, args ?? new LoggingPipelineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LoggingPipeline(string name, Input<string> id, LoggingPipelineState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:index/loggingPipeline:LoggingPipeline", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/ionos-cloud/pulumi-ionoscloud/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LoggingPipeline resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LoggingPipeline Get(string name, Input<string> id, LoggingPipelineState? state = null, CustomResourceOptions? options = null)
        {
            return new LoggingPipeline(name, id, state, options);
        }
    }

    public sealed class LoggingPipelineArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// [string] The location of the Logging pipeline. Default: `de/txl` One of `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `fr/par`.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("logs", required: true)]
        private InputList<Inputs.LoggingPipelineLogArgs>? _logs;

        /// <summary>
        /// [list] Pipeline logs, a list that contains elements with the following structure:
        /// </summary>
        public InputList<Inputs.LoggingPipelineLogArgs> Logs
        {
            get => _logs ?? (_logs = new InputList<Inputs.LoggingPipelineLogArgs>());
            set => _logs = value;
        }

        /// <summary>
        /// [string] The name of the Logging pipeline.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public LoggingPipelineArgs()
        {
        }
        public static new LoggingPipelineArgs Empty => new LoggingPipelineArgs();
    }

    public sealed class LoggingPipelineState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// [string] The address of the client's grafana instance.
        /// </summary>
        [Input("grafanaAddress")]
        public Input<string>? GrafanaAddress { get; set; }

        /// <summary>
        /// [string] The location of the Logging pipeline. Default: `de/txl` One of `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `fr/par`.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("logs")]
        private InputList<Inputs.LoggingPipelineLogGetArgs>? _logs;

        /// <summary>
        /// [list] Pipeline logs, a list that contains elements with the following structure:
        /// </summary>
        public InputList<Inputs.LoggingPipelineLogGetArgs> Logs
        {
            get => _logs ?? (_logs = new InputList<Inputs.LoggingPipelineLogGetArgs>());
            set => _logs = value;
        }

        /// <summary>
        /// [string] The name of the Logging pipeline.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public LoggingPipelineState()
        {
        }
        public static new LoggingPipelineState Empty => new LoggingPipelineState();
    }
}
