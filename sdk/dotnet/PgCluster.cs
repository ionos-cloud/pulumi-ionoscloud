// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud
{
    [IonoscloudResourceType("ionoscloud:index/pgCluster:PgCluster")]
    public partial class PgCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The S3 location where the backups will be stored.
        /// </summary>
        [Output("backupLocation")]
        public Output<string> BackupLocation { get; private set; } = null!;

        /// <summary>
        /// Configuration options for the connection pooler
        /// </summary>
        [Output("connectionPooler")]
        public Output<Outputs.PgClusterConnectionPooler> ConnectionPooler { get; private set; } = null!;

        /// <summary>
        /// Details about the network connection for your cluster.
        /// </summary>
        [Output("connections")]
        public Output<Outputs.PgClusterConnections?> Connections { get; private set; } = null!;

        /// <summary>
        /// The number of CPU cores per replica.
        /// </summary>
        [Output("cores")]
        public Output<int> Cores { get; private set; } = null!;

        /// <summary>
        /// Credentials for the database user to be created.
        /// </summary>
        [Output("credentials")]
        public Output<Outputs.PgClusterCredentials> Credentials { get; private set; } = null!;

        /// <summary>
        /// The friendly name of your cluster.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The DNS name pointing to your cluster
        /// </summary>
        [Output("dnsName")]
        public Output<string> DnsName { get; private set; } = null!;

        /// <summary>
        /// Creates the cluster based on the existing backup.
        /// </summary>
        [Output("fromBackup")]
        public Output<Outputs.PgClusterFromBackup?> FromBackup { get; private set; } = null!;

        /// <summary>
        /// The total number of instances in the cluster (one master and n-1 standbys)
        /// </summary>
        [Output("instances")]
        public Output<int> Instances { get; private set; } = null!;

        /// <summary>
        /// The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
        /// be modified after datacenter creation (disallowed in update requests)
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// a weekly 4 hour-long window, during which maintenance might occur
        /// </summary>
        [Output("maintenanceWindow")]
        public Output<Outputs.PgClusterMaintenanceWindow> MaintenanceWindow { get; private set; } = null!;

        /// <summary>
        /// The PostgreSQL version of your cluster.
        /// </summary>
        [Output("postgresVersion")]
        public Output<string> PostgresVersion { get; private set; } = null!;

        /// <summary>
        /// The amount of memory per instance in megabytes. Has to be a multiple of 1024.
        /// </summary>
        [Output("ram")]
        public Output<int> Ram { get; private set; } = null!;

        /// <summary>
        /// The amount of storage per instance in megabytes. Has to be a multiple of 2048.
        /// </summary>
        [Output("storageSize")]
        public Output<int> StorageSize { get; private set; } = null!;

        /// <summary>
        /// The storage type used in your cluster.
        /// </summary>
        [Output("storageType")]
        public Output<string> StorageType { get; private set; } = null!;

        /// <summary>
        /// Represents different modes of replication.
        /// </summary>
        [Output("synchronizationMode")]
        public Output<string> SynchronizationMode { get; private set; } = null!;


        /// <summary>
        /// Create a PgCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PgCluster(string name, PgClusterArgs args, CustomResourceOptions? options = null)
            : base("ionoscloud:index/pgCluster:PgCluster", name, args ?? new PgClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PgCluster(string name, Input<string> id, PgClusterState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:index/pgCluster:PgCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/ionos-cloud/pulumi-ionoscloud/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PgCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PgCluster Get(string name, Input<string> id, PgClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new PgCluster(name, id, state, options);
        }
    }

    public sealed class PgClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The S3 location where the backups will be stored.
        /// </summary>
        [Input("backupLocation")]
        public Input<string>? BackupLocation { get; set; }

        /// <summary>
        /// Configuration options for the connection pooler
        /// </summary>
        [Input("connectionPooler")]
        public Input<Inputs.PgClusterConnectionPoolerArgs>? ConnectionPooler { get; set; }

        /// <summary>
        /// Details about the network connection for your cluster.
        /// </summary>
        [Input("connections")]
        public Input<Inputs.PgClusterConnectionsArgs>? Connections { get; set; }

        /// <summary>
        /// The number of CPU cores per replica.
        /// </summary>
        [Input("cores", required: true)]
        public Input<int> Cores { get; set; } = null!;

        /// <summary>
        /// Credentials for the database user to be created.
        /// </summary>
        [Input("credentials", required: true)]
        public Input<Inputs.PgClusterCredentialsArgs> Credentials { get; set; } = null!;

        /// <summary>
        /// The friendly name of your cluster.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Creates the cluster based on the existing backup.
        /// </summary>
        [Input("fromBackup")]
        public Input<Inputs.PgClusterFromBackupArgs>? FromBackup { get; set; }

        /// <summary>
        /// The total number of instances in the cluster (one master and n-1 standbys)
        /// </summary>
        [Input("instances", required: true)]
        public Input<int> Instances { get; set; } = null!;

        /// <summary>
        /// The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
        /// be modified after datacenter creation (disallowed in update requests)
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// a weekly 4 hour-long window, during which maintenance might occur
        /// </summary>
        [Input("maintenanceWindow")]
        public Input<Inputs.PgClusterMaintenanceWindowArgs>? MaintenanceWindow { get; set; }

        /// <summary>
        /// The PostgreSQL version of your cluster.
        /// </summary>
        [Input("postgresVersion", required: true)]
        public Input<string> PostgresVersion { get; set; } = null!;

        /// <summary>
        /// The amount of memory per instance in megabytes. Has to be a multiple of 1024.
        /// </summary>
        [Input("ram", required: true)]
        public Input<int> Ram { get; set; } = null!;

        /// <summary>
        /// The amount of storage per instance in megabytes. Has to be a multiple of 2048.
        /// </summary>
        [Input("storageSize", required: true)]
        public Input<int> StorageSize { get; set; } = null!;

        /// <summary>
        /// The storage type used in your cluster.
        /// </summary>
        [Input("storageType", required: true)]
        public Input<string> StorageType { get; set; } = null!;

        /// <summary>
        /// Represents different modes of replication.
        /// </summary>
        [Input("synchronizationMode", required: true)]
        public Input<string> SynchronizationMode { get; set; } = null!;

        public PgClusterArgs()
        {
        }
        public static new PgClusterArgs Empty => new PgClusterArgs();
    }

    public sealed class PgClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The S3 location where the backups will be stored.
        /// </summary>
        [Input("backupLocation")]
        public Input<string>? BackupLocation { get; set; }

        /// <summary>
        /// Configuration options for the connection pooler
        /// </summary>
        [Input("connectionPooler")]
        public Input<Inputs.PgClusterConnectionPoolerGetArgs>? ConnectionPooler { get; set; }

        /// <summary>
        /// Details about the network connection for your cluster.
        /// </summary>
        [Input("connections")]
        public Input<Inputs.PgClusterConnectionsGetArgs>? Connections { get; set; }

        /// <summary>
        /// The number of CPU cores per replica.
        /// </summary>
        [Input("cores")]
        public Input<int>? Cores { get; set; }

        /// <summary>
        /// Credentials for the database user to be created.
        /// </summary>
        [Input("credentials")]
        public Input<Inputs.PgClusterCredentialsGetArgs>? Credentials { get; set; }

        /// <summary>
        /// The friendly name of your cluster.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The DNS name pointing to your cluster
        /// </summary>
        [Input("dnsName")]
        public Input<string>? DnsName { get; set; }

        /// <summary>
        /// Creates the cluster based on the existing backup.
        /// </summary>
        [Input("fromBackup")]
        public Input<Inputs.PgClusterFromBackupGetArgs>? FromBackup { get; set; }

        /// <summary>
        /// The total number of instances in the cluster (one master and n-1 standbys)
        /// </summary>
        [Input("instances")]
        public Input<int>? Instances { get; set; }

        /// <summary>
        /// The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
        /// be modified after datacenter creation (disallowed in update requests)
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// a weekly 4 hour-long window, during which maintenance might occur
        /// </summary>
        [Input("maintenanceWindow")]
        public Input<Inputs.PgClusterMaintenanceWindowGetArgs>? MaintenanceWindow { get; set; }

        /// <summary>
        /// The PostgreSQL version of your cluster.
        /// </summary>
        [Input("postgresVersion")]
        public Input<string>? PostgresVersion { get; set; }

        /// <summary>
        /// The amount of memory per instance in megabytes. Has to be a multiple of 1024.
        /// </summary>
        [Input("ram")]
        public Input<int>? Ram { get; set; }

        /// <summary>
        /// The amount of storage per instance in megabytes. Has to be a multiple of 2048.
        /// </summary>
        [Input("storageSize")]
        public Input<int>? StorageSize { get; set; }

        /// <summary>
        /// The storage type used in your cluster.
        /// </summary>
        [Input("storageType")]
        public Input<string>? StorageType { get; set; }

        /// <summary>
        /// Represents different modes of replication.
        /// </summary>
        [Input("synchronizationMode")]
        public Input<string>? SynchronizationMode { get; set; }

        public PgClusterState()
        {
        }
        public static new PgClusterState Empty => new PgClusterState();
    }
}
