// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud
{
    /// <summary>
    /// Creates and manages Network File Storage (NFS) Share objects on IonosCloud.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ionoscloud = Pulumi.Ionoscloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Basic example
    ///     var nfsDc = new Ionoscloud.Compute.Datacenter("nfsDc", new()
    ///     {
    ///         Location = "de/txl",
    ///         Description = "Datacenter Description",
    ///         SecAuthProtection = false,
    ///     });
    /// 
    ///     var nfsLan = new Ionoscloud.Compute.Lan("nfsLan", new()
    ///     {
    ///         DatacenterId = nfsDc.Id,
    ///         Public = false,
    ///     });
    /// 
    ///     var exampleNfsCluster = new Ionoscloud.NfsCluster("exampleNfsCluster", new()
    ///     {
    ///         Location = "de/txl",
    ///         Size = 2,
    ///         Nfs = new Ionoscloud.Inputs.NfsClusterNfsArgs
    ///         {
    ///             MinVersion = "4.2",
    ///         },
    ///         Connections = new Ionoscloud.Inputs.NfsClusterConnectionsArgs
    ///         {
    ///             DatacenterId = nfsDc.Id,
    ///             IpAddress = "192.168.100.10/24",
    ///             Lan = nfsLan.Id,
    ///         },
    ///     });
    /// 
    ///     var exampleNfsShare = new Ionoscloud.NfsShare("exampleNfsShare", new()
    ///     {
    ///         Location = "de/txl",
    ///         ClusterId = exampleNfsCluster.Id,
    ///         Quota = 512,
    ///         Gid = 512,
    ///         Uid = 512,
    ///         ClientGroups = new[]
    ///         {
    ///             new Ionoscloud.Inputs.NfsShareClientGroupArgs
    ///             {
    ///                 Description = "Client Group 1",
    ///                 IpNetworks = new[]
    ///                 {
    ///                     "10.234.50.0/24",
    ///                 },
    ///                 Hosts = new[]
    ///                 {
    ///                     "10.234.62.123",
    ///                 },
    ///                 Nfs = new Ionoscloud.Inputs.NfsShareClientGroupNfsArgs
    ///                 {
    ///                     Squash = "all-anonymous",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// A Network File Storage Share resource can be imported using its `location`, `cluster_id` and `resource id`:
    /// 
    /// ```sh
    /// $ pulumi import ionoscloud:index/nfsShare:NfsShare name location:cluster_id:resource_id
    /// ```
    /// </summary>
    [IonoscloudResourceType("ionoscloud:index/nfsShare:NfsShare")]
    public partial class NfsShare : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The groups of clients are the systems connecting to the Network File Storage cluster. Each group includes:
        /// </summary>
        [Output("clientGroups")]
        public Output<ImmutableArray<Outputs.NfsShareClientGroup>> ClientGroups { get; private set; } = null!;

        /// <summary>
        /// The ID of the Network File Storage Cluster.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// The group ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
        /// </summary>
        [Output("gid")]
        public Output<int?> Gid { get; private set; } = null!;

        /// <summary>
        /// The location of the Network File Storage Cluster.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The directory being exported.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Path to the NFS export. The NFS path is the path to the directory being exported.
        /// </summary>
        [Output("nfsPath")]
        public Output<string> NfsPath { get; private set; } = null!;

        /// <summary>
        /// The quota in MiB for the export. The quota can restrict the amount of data that can be stored within the export. The quota can be disabled using `0`. Default is `0`.
        /// </summary>
        [Output("quota")]
        public Output<int?> Quota { get; private set; } = null!;

        /// <summary>
        /// The user ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
        /// </summary>
        [Output("uid")]
        public Output<int?> Uid { get; private set; } = null!;


        /// <summary>
        /// Create a NfsShare resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NfsShare(string name, NfsShareArgs args, CustomResourceOptions? options = null)
            : base("ionoscloud:index/nfsShare:NfsShare", name, args ?? new NfsShareArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NfsShare(string name, Input<string> id, NfsShareState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:index/nfsShare:NfsShare", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NfsShare resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NfsShare Get(string name, Input<string> id, NfsShareState? state = null, CustomResourceOptions? options = null)
        {
            return new NfsShare(name, id, state, options);
        }
    }

    public sealed class NfsShareArgs : global::Pulumi.ResourceArgs
    {
        [Input("clientGroups", required: true)]
        private InputList<Inputs.NfsShareClientGroupArgs>? _clientGroups;

        /// <summary>
        /// The groups of clients are the systems connecting to the Network File Storage cluster. Each group includes:
        /// </summary>
        public InputList<Inputs.NfsShareClientGroupArgs> ClientGroups
        {
            get => _clientGroups ?? (_clientGroups = new InputList<Inputs.NfsShareClientGroupArgs>());
            set => _clientGroups = value;
        }

        /// <summary>
        /// The ID of the Network File Storage Cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// The group ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
        /// </summary>
        [Input("gid")]
        public Input<int>? Gid { get; set; }

        /// <summary>
        /// The location of the Network File Storage Cluster.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The directory being exported.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The quota in MiB for the export. The quota can restrict the amount of data that can be stored within the export. The quota can be disabled using `0`. Default is `0`.
        /// </summary>
        [Input("quota")]
        public Input<int>? Quota { get; set; }

        /// <summary>
        /// The user ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
        /// </summary>
        [Input("uid")]
        public Input<int>? Uid { get; set; }

        public NfsShareArgs()
        {
        }
        public static new NfsShareArgs Empty => new NfsShareArgs();
    }

    public sealed class NfsShareState : global::Pulumi.ResourceArgs
    {
        [Input("clientGroups")]
        private InputList<Inputs.NfsShareClientGroupGetArgs>? _clientGroups;

        /// <summary>
        /// The groups of clients are the systems connecting to the Network File Storage cluster. Each group includes:
        /// </summary>
        public InputList<Inputs.NfsShareClientGroupGetArgs> ClientGroups
        {
            get => _clientGroups ?? (_clientGroups = new InputList<Inputs.NfsShareClientGroupGetArgs>());
            set => _clientGroups = value;
        }

        /// <summary>
        /// The ID of the Network File Storage Cluster.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// The group ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
        /// </summary>
        [Input("gid")]
        public Input<int>? Gid { get; set; }

        /// <summary>
        /// The location of the Network File Storage Cluster.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The directory being exported.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Path to the NFS export. The NFS path is the path to the directory being exported.
        /// </summary>
        [Input("nfsPath")]
        public Input<string>? NfsPath { get; set; }

        /// <summary>
        /// The quota in MiB for the export. The quota can restrict the amount of data that can be stored within the export. The quota can be disabled using `0`. Default is `0`.
        /// </summary>
        [Input("quota")]
        public Input<int>? Quota { get; set; }

        /// <summary>
        /// The user ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
        /// </summary>
        [Input("uid")]
        public Input<int>? Uid { get; set; }

        public NfsShareState()
        {
        }
        public static new NfsShareState Empty => new NfsShareState();
    }
}
