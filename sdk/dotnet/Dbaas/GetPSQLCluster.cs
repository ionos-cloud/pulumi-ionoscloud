// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud.Dbaas
{
    public static class GetPSQLCluster
    {
        public static Task<GetPSQLClusterResult> InvokeAsync(GetPSQLClusterArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPSQLClusterResult>("ionoscloud:dbaas/getPSQLCluster:getPSQLCluster", args ?? new GetPSQLClusterArgs(), options.WithDefaults());

        public static Output<GetPSQLClusterResult> Invoke(GetPSQLClusterInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPSQLClusterResult>("ionoscloud:dbaas/getPSQLCluster:getPSQLCluster", args ?? new GetPSQLClusterInvokeArgs(), options.WithDefaults());

        public static Output<GetPSQLClusterResult> Invoke(GetPSQLClusterInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPSQLClusterResult>("ionoscloud:dbaas/getPSQLCluster:getPSQLCluster", args ?? new GetPSQLClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPSQLClusterArgs : global::Pulumi.InvokeArgs
    {
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("id")]
        public string? Id { get; set; }

        public GetPSQLClusterArgs()
        {
        }
        public static new GetPSQLClusterArgs Empty => new GetPSQLClusterArgs();
    }

    public sealed class GetPSQLClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("id")]
        public Input<string>? Id { get; set; }

        public GetPSQLClusterInvokeArgs()
        {
        }
        public static new GetPSQLClusterInvokeArgs Empty => new GetPSQLClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetPSQLClusterResult
    {
        public readonly string BackupLocation;
        public readonly ImmutableArray<Outputs.GetPSQLClusterConnectionPoolerResult> ConnectionPoolers;
        public readonly ImmutableArray<Outputs.GetPSQLClusterConnectionResult> Connections;
        public readonly int Cores;
        public readonly string? DisplayName;
        public readonly string DnsName;
        public readonly ImmutableArray<Outputs.GetPSQLClusterFromBackupResult> FromBackups;
        public readonly string? Id;
        public readonly int Instances;
        public readonly string Location;
        public readonly ImmutableArray<Outputs.GetPSQLClusterMaintenanceWindowResult> MaintenanceWindows;
        public readonly string PostgresVersion;
        public readonly int Ram;
        public readonly int StorageSize;
        public readonly string StorageType;
        public readonly string SynchronizationMode;

        [OutputConstructor]
        private GetPSQLClusterResult(
            string backupLocation,

            ImmutableArray<Outputs.GetPSQLClusterConnectionPoolerResult> connectionPoolers,

            ImmutableArray<Outputs.GetPSQLClusterConnectionResult> connections,

            int cores,

            string? displayName,

            string dnsName,

            ImmutableArray<Outputs.GetPSQLClusterFromBackupResult> fromBackups,

            string? id,

            int instances,

            string location,

            ImmutableArray<Outputs.GetPSQLClusterMaintenanceWindowResult> maintenanceWindows,

            string postgresVersion,

            int ram,

            int storageSize,

            string storageType,

            string synchronizationMode)
        {
            BackupLocation = backupLocation;
            ConnectionPoolers = connectionPoolers;
            Connections = connections;
            Cores = cores;
            DisplayName = displayName;
            DnsName = dnsName;
            FromBackups = fromBackups;
            Id = id;
            Instances = instances;
            Location = location;
            MaintenanceWindows = maintenanceWindows;
            PostgresVersion = postgresVersion;
            Ram = ram;
            StorageSize = storageSize;
            StorageType = storageType;
            SynchronizationMode = synchronizationMode;
        }
    }
}
