// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud
{
    public static class GetLoggingPipeline
    {
        /// <summary>
        /// The **Logging pipeline** datasource can be used to search for and return an existing Logging pipeline.
        /// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
        /// 
        /// &gt; ⚠️  Only tokens are accepted for authorization in the **logging_pipeline** data source. Please ensure you are using tokens as other methods will not be valid.
        /// 
        /// ## Example Usage
        /// 
        /// ### By name
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as ionoscloud from "@pulumi/ionoscloud";
        /// 
        /// const example = ionoscloud.getLoggingPipeline({
        ///     location: "de/txl",
        ///     name: "pipeline_name",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_ionoscloud as ionoscloud
        /// 
        /// example = ionoscloud.get_logging_pipeline(location="de/txl",
        ///     name="pipeline_name")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.GetLoggingPipeline.Invoke(new()
        ///     {
        ///         Location = "de/txl",
        ///         Name = "pipeline_name",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ionoscloud.LookupLoggingPipeline(ctx, &amp;ionoscloud.LookupLoggingPipelineArgs{
        /// 			Location: pulumi.StringRef("de/txl"),
        /// 			Name:     pulumi.StringRef("pipeline_name"),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.ionoscloud.IonoscloudFunctions;
        /// import com.pulumi.ionoscloud.inputs.GetLoggingPipelineArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = IonoscloudFunctions.getLoggingPipeline(GetLoggingPipelineArgs.builder()
        ///             .location("de/txl")
        ///             .name("pipeline_name")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   example:
        ///     fn::invoke:
        ///       Function: ionoscloud:getLoggingPipeline
        ///       Arguments:
        ///         location: de/txl
        ///         name: pipeline_name
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetLoggingPipelineResult> InvokeAsync(GetLoggingPipelineArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLoggingPipelineResult>("ionoscloud:index/getLoggingPipeline:getLoggingPipeline", args ?? new GetLoggingPipelineArgs(), options.WithDefaults());

        /// <summary>
        /// The **Logging pipeline** datasource can be used to search for and return an existing Logging pipeline.
        /// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
        /// 
        /// &gt; ⚠️  Only tokens are accepted for authorization in the **logging_pipeline** data source. Please ensure you are using tokens as other methods will not be valid.
        /// 
        /// ## Example Usage
        /// 
        /// ### By name
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as ionoscloud from "@pulumi/ionoscloud";
        /// 
        /// const example = ionoscloud.getLoggingPipeline({
        ///     location: "de/txl",
        ///     name: "pipeline_name",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_ionoscloud as ionoscloud
        /// 
        /// example = ionoscloud.get_logging_pipeline(location="de/txl",
        ///     name="pipeline_name")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.GetLoggingPipeline.Invoke(new()
        ///     {
        ///         Location = "de/txl",
        ///         Name = "pipeline_name",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ionoscloud.LookupLoggingPipeline(ctx, &amp;ionoscloud.LookupLoggingPipelineArgs{
        /// 			Location: pulumi.StringRef("de/txl"),
        /// 			Name:     pulumi.StringRef("pipeline_name"),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.ionoscloud.IonoscloudFunctions;
        /// import com.pulumi.ionoscloud.inputs.GetLoggingPipelineArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = IonoscloudFunctions.getLoggingPipeline(GetLoggingPipelineArgs.builder()
        ///             .location("de/txl")
        ///             .name("pipeline_name")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   example:
        ///     fn::invoke:
        ///       Function: ionoscloud:getLoggingPipeline
        ///       Arguments:
        ///         location: de/txl
        ///         name: pipeline_name
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetLoggingPipelineResult> Invoke(GetLoggingPipelineInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLoggingPipelineResult>("ionoscloud:index/getLoggingPipeline:getLoggingPipeline", args ?? new GetLoggingPipelineInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLoggingPipelineArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// [string] The ID of the Logging pipeline you want to search for.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// [string] The location of the Logging pipeline. Default: `de/txl`. One of `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `fr/par`.
        /// </summary>
        [Input("location")]
        public string? Location { get; set; }

        /// <summary>
        /// [string] The name of the Logging pipeline you want to search for.
        /// 
        /// Either `id` or `name` must be provided. If none, or both are provided, the datasource will return an error.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetLoggingPipelineArgs()
        {
        }
        public static new GetLoggingPipelineArgs Empty => new GetLoggingPipelineArgs();
    }

    public sealed class GetLoggingPipelineInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// [string] The ID of the Logging pipeline you want to search for.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// [string] The location of the Logging pipeline. Default: `de/txl`. One of `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `fr/par`.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// [string] The name of the Logging pipeline you want to search for.
        /// 
        /// Either `id` or `name` must be provided. If none, or both are provided, the datasource will return an error.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetLoggingPipelineInvokeArgs()
        {
        }
        public static new GetLoggingPipelineInvokeArgs Empty => new GetLoggingPipelineInvokeArgs();
    }


    [OutputType]
    public sealed class GetLoggingPipelineResult
    {
        /// <summary>
        /// The address of the client's grafana instance.
        /// </summary>
        public readonly string GrafanaAddress;
        /// <summary>
        /// The UUID of the Logging pipeline.
        /// </summary>
        public readonly string? Id;
        public readonly string? Location;
        /// <summary>
        /// [list] Pipeline logs, a list that contains elements with the following structure:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLoggingPipelineLogResult> Logs;
        /// <summary>
        /// The name of the Logging pipeline.
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private GetLoggingPipelineResult(
            string grafanaAddress,

            string? id,

            string? location,

            ImmutableArray<Outputs.GetLoggingPipelineLogResult> logs,

            string name)
        {
            GrafanaAddress = grafanaAddress;
            Id = id;
            Location = location;
            Logs = logs;
            Name = name;
        }
    }
}
