// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud
{
    [IonoscloudResourceType("ionoscloud:index/kafkaClusterTopic:KafkaClusterTopic")]
    public partial class KafkaClusterTopic : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Kafka Cluster to which the topic belongs.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// The location of your Kafka Cluster Topic. Supported locations: de/fra, de/txl
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of your Kafka Cluster Topic. Must be 63 characters or less and must begin and end with an alphanumeric
        /// character (`[a-z0-9A-Z]`) with dashes (`-`), underscores (`_`), dots (`.`), and alphanumerics between.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The number of partitions of the topic. Partitions allow for parallel processing of messages. The partition count must be
        /// greater than or equal to the replication factor.
        /// </summary>
        [Output("numberOfPartitions")]
        public Output<int?> NumberOfPartitions { get; private set; } = null!;

        /// <summary>
        /// The number of replicas of the topic. The replication factor determines how many copies of the topic are stored on
        /// different brokers. The replication factor must be less than or equal to the number of brokers in the Kafka Cluster.
        /// </summary>
        [Output("replicationFactor")]
        public Output<int?> ReplicationFactor { get; private set; } = null!;

        /// <summary>
        /// This configuration controls the maximum time we will retain a log before we will discard old log segments to free up
        /// space. This represents an SLA on how soon consumers must read their data. If set to -1, no time limit is applied.
        /// </summary>
        [Output("retentionTime")]
        public Output<int?> RetentionTime { get; private set; } = null!;

        /// <summary>
        /// This configuration controls the segment file size for the log. Retention and cleaning is always done a file at a time so
        /// a larger segment size means fewer files but less granular control over retention.
        /// </summary>
        [Output("segmentBytes")]
        public Output<int?> SegmentBytes { get; private set; } = null!;


        /// <summary>
        /// Create a KafkaClusterTopic resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KafkaClusterTopic(string name, KafkaClusterTopicArgs args, CustomResourceOptions? options = null)
            : base("ionoscloud:index/kafkaClusterTopic:KafkaClusterTopic", name, args ?? new KafkaClusterTopicArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KafkaClusterTopic(string name, Input<string> id, KafkaClusterTopicState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:index/kafkaClusterTopic:KafkaClusterTopic", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/ionos-cloud/pulumi-ionoscloud/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KafkaClusterTopic resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KafkaClusterTopic Get(string name, Input<string> id, KafkaClusterTopicState? state = null, CustomResourceOptions? options = null)
        {
            return new KafkaClusterTopic(name, id, state, options);
        }
    }

    public sealed class KafkaClusterTopicArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Kafka Cluster to which the topic belongs.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// The location of your Kafka Cluster Topic. Supported locations: de/fra, de/txl
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The name of your Kafka Cluster Topic. Must be 63 characters or less and must begin and end with an alphanumeric
        /// character (`[a-z0-9A-Z]`) with dashes (`-`), underscores (`_`), dots (`.`), and alphanumerics between.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The number of partitions of the topic. Partitions allow for parallel processing of messages. The partition count must be
        /// greater than or equal to the replication factor.
        /// </summary>
        [Input("numberOfPartitions")]
        public Input<int>? NumberOfPartitions { get; set; }

        /// <summary>
        /// The number of replicas of the topic. The replication factor determines how many copies of the topic are stored on
        /// different brokers. The replication factor must be less than or equal to the number of brokers in the Kafka Cluster.
        /// </summary>
        [Input("replicationFactor")]
        public Input<int>? ReplicationFactor { get; set; }

        /// <summary>
        /// This configuration controls the maximum time we will retain a log before we will discard old log segments to free up
        /// space. This represents an SLA on how soon consumers must read their data. If set to -1, no time limit is applied.
        /// </summary>
        [Input("retentionTime")]
        public Input<int>? RetentionTime { get; set; }

        /// <summary>
        /// This configuration controls the segment file size for the log. Retention and cleaning is always done a file at a time so
        /// a larger segment size means fewer files but less granular control over retention.
        /// </summary>
        [Input("segmentBytes")]
        public Input<int>? SegmentBytes { get; set; }

        public KafkaClusterTopicArgs()
        {
        }
        public static new KafkaClusterTopicArgs Empty => new KafkaClusterTopicArgs();
    }

    public sealed class KafkaClusterTopicState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Kafka Cluster to which the topic belongs.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// The location of your Kafka Cluster Topic. Supported locations: de/fra, de/txl
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of your Kafka Cluster Topic. Must be 63 characters or less and must begin and end with an alphanumeric
        /// character (`[a-z0-9A-Z]`) with dashes (`-`), underscores (`_`), dots (`.`), and alphanumerics between.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The number of partitions of the topic. Partitions allow for parallel processing of messages. The partition count must be
        /// greater than or equal to the replication factor.
        /// </summary>
        [Input("numberOfPartitions")]
        public Input<int>? NumberOfPartitions { get; set; }

        /// <summary>
        /// The number of replicas of the topic. The replication factor determines how many copies of the topic are stored on
        /// different brokers. The replication factor must be less than or equal to the number of brokers in the Kafka Cluster.
        /// </summary>
        [Input("replicationFactor")]
        public Input<int>? ReplicationFactor { get; set; }

        /// <summary>
        /// This configuration controls the maximum time we will retain a log before we will discard old log segments to free up
        /// space. This represents an SLA on how soon consumers must read their data. If set to -1, no time limit is applied.
        /// </summary>
        [Input("retentionTime")]
        public Input<int>? RetentionTime { get; set; }

        /// <summary>
        /// This configuration controls the segment file size for the log. Retention and cleaning is always done a file at a time so
        /// a larger segment size means fewer files but less granular control over retention.
        /// </summary>
        [Input("segmentBytes")]
        public Input<int>? SegmentBytes { get; set; }

        public KafkaClusterTopicState()
        {
        }
        public static new KafkaClusterTopicState Empty => new KafkaClusterTopicState();
    }
}
