// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud
{
    /// <summary>
    /// Manages a **CDN Distribution** on IonosCloud.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.IO;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ionoscloud = Pulumi.Ionoscloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     //optionally you can add a certificate to the distribution
    ///     var cert = new Ionoscloud.Certificate("cert", new()
    ///     {
    ///         Certificate = File.ReadAllText("path_to_cert"),
    ///         CertificateChain = File.ReadAllText("path_to_cert_chain"),
    ///         PrivateKey = File.ReadAllText("path_to_private_key"),
    ///     });
    /// 
    ///     var example = new Ionoscloud.CdnDistribution("example", new()
    ///     {
    ///         Domain = "example.com",
    ///         CertificateId = cert.Id,
    ///         RoutingRules = new[]
    ///         {
    ///             new Ionoscloud.Inputs.CdnDistributionRoutingRuleArgs
    ///             {
    ///                 Scheme = "https",
    ///                 Prefix = "/api",
    ///                 Upstream = new Ionoscloud.Inputs.CdnDistributionRoutingRuleUpstreamArgs
    ///                 {
    ///                     Host = "server.example.com",
    ///                     Caching = true,
    ///                     Waf = true,
    ///                     SniMode = "distribution",
    ///                     RateLimitClass = "R500",
    ///                     GeoRestrictions = new Ionoscloud.Inputs.CdnDistributionRoutingRuleUpstreamGeoRestrictionsArgs
    ///                     {
    ///                         AllowLists = new[]
    ///                         {
    ///                             "CN",
    ///                             "RU",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new Ionoscloud.Inputs.CdnDistributionRoutingRuleArgs
    ///             {
    ///                 Scheme = "http/https",
    ///                 Prefix = "/api2",
    ///                 Upstream = new Ionoscloud.Inputs.CdnDistributionRoutingRuleUpstreamArgs
    ///                 {
    ///                     Host = "server2.example.com",
    ///                     Caching = false,
    ///                     Waf = false,
    ///                     SniMode = "origin",
    ///                     RateLimitClass = "R10",
    ///                     GeoRestrictions = new Ionoscloud.Inputs.CdnDistributionRoutingRuleUpstreamGeoRestrictionsArgs
    ///                     {
    ///                         BlockLists = new[]
    ///                         {
    ///                             "CN",
    ///                             "RU",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Resource Distribution can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import ionoscloud:index/cdnDistribution:CdnDistribution myDistribution {distribution uuid}
    /// ```
    /// </summary>
    [IonoscloudResourceType("ionoscloud:index/cdnDistribution:CdnDistribution")]
    public partial class CdnDistribution : global::Pulumi.CustomResource
    {
        /// <summary>
        /// [string] The ID of the certificate to use for the distribution. You can create certificates with the certificate resource.
        /// </summary>
        [Output("certificateId")]
        public Output<string?> CertificateId { get; private set; } = null!;

        /// <summary>
        /// [string] The domain of the distribution.
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        /// <summary>
        /// IP of the distribution, it has to be included on the domain DNS Zone as A record.
        /// </summary>
        [Output("publicEndpointV4")]
        public Output<string> PublicEndpointV4 { get; private set; } = null!;

        /// <summary>
        /// IP of the distribution, it has to be included on the domain DNS Zone as AAAA record.
        /// </summary>
        [Output("publicEndpointV6")]
        public Output<string> PublicEndpointV6 { get; private set; } = null!;

        /// <summary>
        /// Unique resource indentifier.
        /// </summary>
        [Output("resourceUrn")]
        public Output<string> ResourceUrn { get; private set; } = null!;

        /// <summary>
        /// [list] The routing rules for the distribution.
        /// </summary>
        [Output("routingRules")]
        public Output<ImmutableArray<Outputs.CdnDistributionRoutingRule>> RoutingRules { get; private set; } = null!;


        /// <summary>
        /// Create a CdnDistribution resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CdnDistribution(string name, CdnDistributionArgs args, CustomResourceOptions? options = null)
            : base("ionoscloud:index/cdnDistribution:CdnDistribution", name, args ?? new CdnDistributionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CdnDistribution(string name, Input<string> id, CdnDistributionState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:index/cdnDistribution:CdnDistribution", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CdnDistribution resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CdnDistribution Get(string name, Input<string> id, CdnDistributionState? state = null, CustomResourceOptions? options = null)
        {
            return new CdnDistribution(name, id, state, options);
        }
    }

    public sealed class CdnDistributionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// [string] The ID of the certificate to use for the distribution. You can create certificates with the certificate resource.
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// [string] The domain of the distribution.
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        [Input("routingRules", required: true)]
        private InputList<Inputs.CdnDistributionRoutingRuleArgs>? _routingRules;

        /// <summary>
        /// [list] The routing rules for the distribution.
        /// </summary>
        public InputList<Inputs.CdnDistributionRoutingRuleArgs> RoutingRules
        {
            get => _routingRules ?? (_routingRules = new InputList<Inputs.CdnDistributionRoutingRuleArgs>());
            set => _routingRules = value;
        }

        public CdnDistributionArgs()
        {
        }
        public static new CdnDistributionArgs Empty => new CdnDistributionArgs();
    }

    public sealed class CdnDistributionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// [string] The ID of the certificate to use for the distribution. You can create certificates with the certificate resource.
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// [string] The domain of the distribution.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// IP of the distribution, it has to be included on the domain DNS Zone as A record.
        /// </summary>
        [Input("publicEndpointV4")]
        public Input<string>? PublicEndpointV4 { get; set; }

        /// <summary>
        /// IP of the distribution, it has to be included on the domain DNS Zone as AAAA record.
        /// </summary>
        [Input("publicEndpointV6")]
        public Input<string>? PublicEndpointV6 { get; set; }

        /// <summary>
        /// Unique resource indentifier.
        /// </summary>
        [Input("resourceUrn")]
        public Input<string>? ResourceUrn { get; set; }

        [Input("routingRules")]
        private InputList<Inputs.CdnDistributionRoutingRuleGetArgs>? _routingRules;

        /// <summary>
        /// [list] The routing rules for the distribution.
        /// </summary>
        public InputList<Inputs.CdnDistributionRoutingRuleGetArgs> RoutingRules
        {
            get => _routingRules ?? (_routingRules = new InputList<Inputs.CdnDistributionRoutingRuleGetArgs>());
            set => _routingRules = value;
        }

        public CdnDistributionState()
        {
        }
        public static new CdnDistributionState Empty => new CdnDistributionState();
    }
}
