// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud.Cdn
{
    [IonoscloudResourceType("ionoscloud:cdn/distribution:Distribution")]
    public partial class Distribution : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the certificate to use for the distribution.
        /// </summary>
        [Output("certificateId")]
        public Output<string?> CertificateId { get; private set; } = null!;

        /// <summary>
        /// The domain of the distribution.
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        /// <summary>
        /// IP of the distribution, it has to be included on the domain DNS Zone as A record.
        /// </summary>
        [Output("publicEndpointV4")]
        public Output<string> PublicEndpointV4 { get; private set; } = null!;

        /// <summary>
        /// IP of the distribution, it has to be included on the domain DNS Zone as AAAA record.
        /// </summary>
        [Output("publicEndpointV6")]
        public Output<string> PublicEndpointV6 { get; private set; } = null!;

        /// <summary>
        /// Unique name of the resource.
        /// </summary>
        [Output("resourceUrn")]
        public Output<string> ResourceUrn { get; private set; } = null!;

        /// <summary>
        /// The routing rules for the distribution.
        /// </summary>
        [Output("routingRules")]
        public Output<ImmutableArray<Outputs.DistributionRoutingRule>> RoutingRules { get; private set; } = null!;


        /// <summary>
        /// Create a Distribution resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Distribution(string name, DistributionArgs args, CustomResourceOptions? options = null)
            : base("ionoscloud:cdn/distribution:Distribution", name, args ?? new DistributionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Distribution(string name, Input<string> id, DistributionState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:cdn/distribution:Distribution", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Distribution resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Distribution Get(string name, Input<string> id, DistributionState? state = null, CustomResourceOptions? options = null)
        {
            return new Distribution(name, id, state, options);
        }
    }

    public sealed class DistributionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the certificate to use for the distribution.
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// The domain of the distribution.
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        [Input("routingRules", required: true)]
        private InputList<Inputs.DistributionRoutingRuleArgs>? _routingRules;

        /// <summary>
        /// The routing rules for the distribution.
        /// </summary>
        public InputList<Inputs.DistributionRoutingRuleArgs> RoutingRules
        {
            get => _routingRules ?? (_routingRules = new InputList<Inputs.DistributionRoutingRuleArgs>());
            set => _routingRules = value;
        }

        public DistributionArgs()
        {
        }
        public static new DistributionArgs Empty => new DistributionArgs();
    }

    public sealed class DistributionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the certificate to use for the distribution.
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// The domain of the distribution.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// IP of the distribution, it has to be included on the domain DNS Zone as A record.
        /// </summary>
        [Input("publicEndpointV4")]
        public Input<string>? PublicEndpointV4 { get; set; }

        /// <summary>
        /// IP of the distribution, it has to be included on the domain DNS Zone as AAAA record.
        /// </summary>
        [Input("publicEndpointV6")]
        public Input<string>? PublicEndpointV6 { get; set; }

        /// <summary>
        /// Unique name of the resource.
        /// </summary>
        [Input("resourceUrn")]
        public Input<string>? ResourceUrn { get; set; }

        [Input("routingRules")]
        private InputList<Inputs.DistributionRoutingRuleGetArgs>? _routingRules;

        /// <summary>
        /// The routing rules for the distribution.
        /// </summary>
        public InputList<Inputs.DistributionRoutingRuleGetArgs> RoutingRules
        {
            get => _routingRules ?? (_routingRules = new InputList<Inputs.DistributionRoutingRuleGetArgs>());
            set => _routingRules = value;
        }

        public DistributionState()
        {
        }
        public static new DistributionState Empty => new DistributionState();
    }
}
