// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud.Outputs
{

    [OutputType]
    public sealed class GetCubeServerCdromResult
    {
        /// <summary>
        /// Cloud init compatibility
        /// </summary>
        public readonly string CloudInit;
        /// <summary>
        /// Is capable of CPU hot plug (no reboot required)
        /// </summary>
        public readonly bool CpuHotPlug;
        /// <summary>
        /// Is capable of CPU hot unplug (no reboot required)
        /// </summary>
        public readonly bool CpuHotUnplug;
        /// <summary>
        /// Description of cdrom
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Is capable of SCSI drive hot plug (no reboot required)
        /// </summary>
        public readonly bool DiscScsiHotPlug;
        /// <summary>
        /// Is capable of SCSI drive hot unplug (no reboot required)
        /// </summary>
        public readonly bool DiscScsiHotUnplug;
        /// <summary>
        /// Is capable of Virt-IO drive hot plug (no reboot required)
        /// </summary>
        public readonly bool DiscVirtioHotPlug;
        /// <summary>
        /// Is capable of Virt-IO drive hot unplug (no reboot required)
        /// </summary>
        public readonly bool DiscVirtioHotUnplug;
        /// <summary>
        /// ID of the server you want to search for.
        /// 
        /// `datacenter_id` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of image aliases mapped for this Image
        /// </summary>
        public readonly ImmutableArray<string> ImageAliases;
        /// <summary>
        /// Type of image
        /// </summary>
        public readonly string ImageType;
        /// <summary>
        /// OS type of this volume
        /// </summary>
        public readonly string LicenceType;
        /// <summary>
        /// Location of that image/snapshot
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Name of an existing server that you want to search for.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Is capable of nic hot plug (no reboot required)
        /// </summary>
        public readonly bool NicHotPlug;
        /// <summary>
        /// Is capable of nic hot unplug (no reboot required)
        /// </summary>
        public readonly bool NicHotUnplug;
        /// <summary>
        /// Indicates if the image is part of the public repository or not
        /// </summary>
        public readonly bool Public;
        /// <summary>
        /// Is capable of memory hot plug (no reboot required)
        /// </summary>
        public readonly bool RamHotPlug;
        /// <summary>
        /// Is capable of memory hot unplug (no reboot required)
        /// </summary>
        public readonly bool RamHotUnplug;
        /// <summary>
        /// The size of the image in GB
        /// </summary>
        public readonly double Size;

        [OutputConstructor]
        private GetCubeServerCdromResult(
            string cloudInit,

            bool cpuHotPlug,

            bool cpuHotUnplug,

            string description,

            bool discScsiHotPlug,

            bool discScsiHotUnplug,

            bool discVirtioHotPlug,

            bool discVirtioHotUnplug,

            string id,

            ImmutableArray<string> imageAliases,

            string imageType,

            string licenceType,

            string location,

            string name,

            bool nicHotPlug,

            bool nicHotUnplug,

            bool @public,

            bool ramHotPlug,

            bool ramHotUnplug,

            double size)
        {
            CloudInit = cloudInit;
            CpuHotPlug = cpuHotPlug;
            CpuHotUnplug = cpuHotUnplug;
            Description = description;
            DiscScsiHotPlug = discScsiHotPlug;
            DiscScsiHotUnplug = discScsiHotUnplug;
            DiscVirtioHotPlug = discVirtioHotPlug;
            DiscVirtioHotUnplug = discVirtioHotUnplug;
            Id = id;
            ImageAliases = imageAliases;
            ImageType = imageType;
            LicenceType = licenceType;
            Location = location;
            Name = name;
            NicHotPlug = nicHotPlug;
            NicHotUnplug = nicHotUnplug;
            Public = @public;
            RamHotPlug = ramHotPlug;
            RamHotUnplug = ramHotUnplug;
            Size = size;
        }
    }
}
