// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud.Outputs
{

    [OutputType]
    public sealed class GetDataplatformNodePoolsNodePoolResult
    {
        /// <summary>
        /// Key-value pairs attached to node pool resource as kubernetes annotations
        /// </summary>
        public readonly ImmutableDictionary<string, string> Annotations;
        /// <summary>
        /// The availability zone of the virtual datacenter region where the node pool resources should be provisioned.
        /// </summary>
        public readonly string AvailabilityZone;
        /// <summary>
        /// The number of CPU cores per node.
        /// </summary>
        public readonly int CoresCount;
        /// <summary>
        /// A valid CPU family name or `AUTO` if the platform shall choose the best fitting option. Available CPU architectures can be retrieved from the datacenter resource.
        /// </summary>
        public readonly string CpuFamily;
        /// <summary>
        /// The UUID of the virtual data center (VDC) in which the node pool is provisioned
        /// </summary>
        public readonly string DatacenterId;
        public readonly string Id;
        /// <summary>
        /// Key-value pairs attached to the node pool resource as kubernetes labels
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Starting time of a weekly 4 hour-long window, during which maintenance might occur in hh:mm:ss format
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDataplatformNodePoolsNodePoolMaintenanceWindowResult> MaintenanceWindows;
        /// <summary>
        /// Name of an existing cluster that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partial_match` parameter is not set to true.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The number of nodes that make up the node pool.
        /// </summary>
        public readonly int NodeCount;
        /// <summary>
        /// The RAM size for one node in MB. Must be set in multiples of 1024 MB, with a minimum size is of 2048 MB.
        /// </summary>
        public readonly int RamSize;
        /// <summary>
        /// The size of the volume in GB. The size must be greater than 10GB.
        /// </summary>
        public readonly int StorageSize;
        /// <summary>
        /// The type of hardware for the volume.
        /// </summary>
        public readonly string StorageType;
        /// <summary>
        /// The version of the Data Platform.
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetDataplatformNodePoolsNodePoolResult(
            ImmutableDictionary<string, string> annotations,

            string availabilityZone,

            int coresCount,

            string cpuFamily,

            string datacenterId,

            string id,

            ImmutableDictionary<string, string> labels,

            ImmutableArray<Outputs.GetDataplatformNodePoolsNodePoolMaintenanceWindowResult> maintenanceWindows,

            string name,

            int nodeCount,

            int ramSize,

            int storageSize,

            string storageType,

            string version)
        {
            Annotations = annotations;
            AvailabilityZone = availabilityZone;
            CoresCount = coresCount;
            CpuFamily = cpuFamily;
            DatacenterId = datacenterId;
            Id = id;
            Labels = labels;
            MaintenanceWindows = maintenanceWindows;
            Name = name;
            NodeCount = nodeCount;
            RamSize = ramSize;
            StorageSize = storageSize;
            StorageType = storageType;
            Version = version;
        }
    }
}
