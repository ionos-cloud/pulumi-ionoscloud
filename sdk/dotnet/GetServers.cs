// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud
{
    public static class GetServers
    {
        public static Task<GetServersResult> InvokeAsync(GetServersArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServersResult>("ionoscloud:index/getServers:getServers", args ?? new GetServersArgs(), options.WithDefaults());

        public static Output<GetServersResult> Invoke(GetServersInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServersResult>("ionoscloud:index/getServers:getServers", args ?? new GetServersInvokeArgs(), options.WithDefaults());

        public static Output<GetServersResult> Invoke(GetServersInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetServersResult>("ionoscloud:index/getServers:getServers", args ?? new GetServersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServersArgs : global::Pulumi.InvokeArgs
    {
        [Input("datacenterId", required: true)]
        public string DatacenterId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetServersFilterArgs>? _filters;
        public List<Inputs.GetServersFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetServersFilterArgs>());
            set => _filters = value;
        }

        public GetServersArgs()
        {
        }
        public static new GetServersArgs Empty => new GetServersArgs();
    }

    public sealed class GetServersInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("datacenterId", required: true)]
        public Input<string> DatacenterId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetServersFilterInputArgs>? _filters;
        public InputList<Inputs.GetServersFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetServersFilterInputArgs>());
            set => _filters = value;
        }

        public GetServersInvokeArgs()
        {
        }
        public static new GetServersInvokeArgs Empty => new GetServersInvokeArgs();
    }


    [OutputType]
    public sealed class GetServersResult
    {
        public readonly string DatacenterId;
        public readonly ImmutableArray<Outputs.GetServersFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetServersServerResult> Servers;

        [OutputConstructor]
        private GetServersResult(
            string datacenterId,

            ImmutableArray<Outputs.GetServersFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetServersServerResult> servers)
        {
            DatacenterId = datacenterId;
            Filters = filters;
            Id = id;
            Servers = servers;
        }
    }
}
