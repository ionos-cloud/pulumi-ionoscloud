// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud
{
    public static class GetServers
    {
        /// <summary>
        /// The **Servers data source** can be used to search for and return existing servers based on filters used.
        /// 
        /// ## Example Usage
        /// 
        /// ### By Name
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as ionoscloud from "@pulumi/ionoscloud";
        /// 
        /// const example = ionoscloud.getServers({
        ///     datacenterId: ionoscloud_datacenter.example.id,
        ///     filters: [{
        ///         name: "name",
        ///         value: "server_name_to_look_here",
        ///     }],
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_ionoscloud as ionoscloud
        /// 
        /// example = ionoscloud.get_servers(datacenter_id=ionoscloud_datacenter["example"]["id"],
        ///     filters=[ionoscloud.GetServersFilterArgs(
        ///         name="name",
        ///         value="server_name_to_look_here",
        ///     )])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.GetServers.Invoke(new()
        ///     {
        ///         DatacenterId = ionoscloud_datacenter.Example.Id,
        ///         Filters = new[]
        ///         {
        ///             new Ionoscloud.Inputs.GetServersFilterInputArgs
        ///             {
        ///                 Name = "name",
        ///                 Value = "server_name_to_look_here",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ionoscloud.GetServers(ctx, &amp;ionoscloud.GetServersArgs{
        /// 			DatacenterId: ionoscloud_datacenter.Example.Id,
        /// 			Filters: []ionoscloud.GetServersFilter{
        /// 				{
        /// 					Name:  "name",
        /// 					Value: "server_name_to_look_here",
        /// 				},
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.ionoscloud.IonoscloudFunctions;
        /// import com.pulumi.ionoscloud.inputs.GetServersArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = IonoscloudFunctions.getServers(GetServersArgs.builder()
        ///             .datacenterId(ionoscloud_datacenter.example().id())
        ///             .filters(GetServersFilterArgs.builder()
        ///                 .name("name")
        ///                 .value("server_name_to_look_here")
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   example:
        ///     fn::invoke:
        ///       Function: ionoscloud:getServers
        ///       Arguments:
        ///         datacenterId: ${ionoscloud_datacenter.example.id}
        ///         filters:
        ///           - name: name
        ///             value: server_name_to_look_here
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// ### By CPU Family
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as ionoscloud from "@pulumi/ionoscloud";
        /// 
        /// const example = ionoscloud.getServers({
        ///     datacenterId: ionoscloud_datacenter.example.id,
        ///     filters: [{
        ///         name: "cpu_family",
        ///         value: "INTEL_XEON",
        ///     }],
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_ionoscloud as ionoscloud
        /// 
        /// example = ionoscloud.get_servers(datacenter_id=ionoscloud_datacenter["example"]["id"],
        ///     filters=[ionoscloud.GetServersFilterArgs(
        ///         name="cpu_family",
        ///         value="INTEL_XEON",
        ///     )])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.GetServers.Invoke(new()
        ///     {
        ///         DatacenterId = ionoscloud_datacenter.Example.Id,
        ///         Filters = new[]
        ///         {
        ///             new Ionoscloud.Inputs.GetServersFilterInputArgs
        ///             {
        ///                 Name = "cpu_family",
        ///                 Value = "INTEL_XEON",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ionoscloud.GetServers(ctx, &amp;ionoscloud.GetServersArgs{
        /// 			DatacenterId: ionoscloud_datacenter.Example.Id,
        /// 			Filters: []ionoscloud.GetServersFilter{
        /// 				{
        /// 					Name:  "cpu_family",
        /// 					Value: "INTEL_XEON",
        /// 				},
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.ionoscloud.IonoscloudFunctions;
        /// import com.pulumi.ionoscloud.inputs.GetServersArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = IonoscloudFunctions.getServers(GetServersArgs.builder()
        ///             .datacenterId(ionoscloud_datacenter.example().id())
        ///             .filters(GetServersFilterArgs.builder()
        ///                 .name("cpu_family")
        ///                 .value("INTEL_XEON")
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   example:
        ///     fn::invoke:
        ///       Function: ionoscloud:getServers
        ///       Arguments:
        ///         datacenterId: ${ionoscloud_datacenter.example.id}
        ///         filters:
        ///           - name: cpu_family
        ///             value: INTEL_XEON
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// 
        /// ### By Name and Cores
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as ionoscloud from "@pulumi/ionoscloud";
        /// 
        /// const example = ionoscloud.getServers({
        ///     datacenterId: ionoscloud_datacenter.example.id,
        ///     filters: [
        ///         {
        ///             name: "name",
        ///             value: "test",
        ///         },
        ///         {
        ///             name: "cores",
        ///             value: "1",
        ///         },
        ///     ],
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_ionoscloud as ionoscloud
        /// 
        /// example = ionoscloud.get_servers(datacenter_id=ionoscloud_datacenter["example"]["id"],
        ///     filters=[
        ///         ionoscloud.GetServersFilterArgs(
        ///             name="name",
        ///             value="test",
        ///         ),
        ///         ionoscloud.GetServersFilterArgs(
        ///             name="cores",
        ///             value="1",
        ///         ),
        ///     ])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.GetServers.Invoke(new()
        ///     {
        ///         DatacenterId = ionoscloud_datacenter.Example.Id,
        ///         Filters = new[]
        ///         {
        ///             new Ionoscloud.Inputs.GetServersFilterInputArgs
        ///             {
        ///                 Name = "name",
        ///                 Value = "test",
        ///             },
        ///             new Ionoscloud.Inputs.GetServersFilterInputArgs
        ///             {
        ///                 Name = "cores",
        ///                 Value = "1",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ionoscloud.GetServers(ctx, &amp;ionoscloud.GetServersArgs{
        /// 			DatacenterId: ionoscloud_datacenter.Example.Id,
        /// 			Filters: []ionoscloud.GetServersFilter{
        /// 				{
        /// 					Name:  "name",
        /// 					Value: "test",
        /// 				},
        /// 				{
        /// 					Name:  "cores",
        /// 					Value: "1",
        /// 				},
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.ionoscloud.IonoscloudFunctions;
        /// import com.pulumi.ionoscloud.inputs.GetServersArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = IonoscloudFunctions.getServers(GetServersArgs.builder()
        ///             .datacenterId(ionoscloud_datacenter.example().id())
        ///             .filters(            
        ///                 GetServersFilterArgs.builder()
        ///                     .name("name")
        ///                     .value("test")
        ///                     .build(),
        ///                 GetServersFilterArgs.builder()
        ///                     .name("cores")
        ///                     .value("1")
        ///                     .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   example:
        ///     fn::invoke:
        ///       Function: ionoscloud:getServers
        ///       Arguments:
        ///         datacenterId: ${ionoscloud_datacenter.example.id}
        ///         filters:
        ///           - name: name
        ///             value: test
        ///           - name: cores
        ///             value: '1'
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetServersResult> InvokeAsync(GetServersArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServersResult>("ionoscloud:index/getServers:getServers", args ?? new GetServersArgs(), options.WithDefaults());

        /// <summary>
        /// The **Servers data source** can be used to search for and return existing servers based on filters used.
        /// 
        /// ## Example Usage
        /// 
        /// ### By Name
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as ionoscloud from "@pulumi/ionoscloud";
        /// 
        /// const example = ionoscloud.getServers({
        ///     datacenterId: ionoscloud_datacenter.example.id,
        ///     filters: [{
        ///         name: "name",
        ///         value: "server_name_to_look_here",
        ///     }],
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_ionoscloud as ionoscloud
        /// 
        /// example = ionoscloud.get_servers(datacenter_id=ionoscloud_datacenter["example"]["id"],
        ///     filters=[ionoscloud.GetServersFilterArgs(
        ///         name="name",
        ///         value="server_name_to_look_here",
        ///     )])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.GetServers.Invoke(new()
        ///     {
        ///         DatacenterId = ionoscloud_datacenter.Example.Id,
        ///         Filters = new[]
        ///         {
        ///             new Ionoscloud.Inputs.GetServersFilterInputArgs
        ///             {
        ///                 Name = "name",
        ///                 Value = "server_name_to_look_here",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ionoscloud.GetServers(ctx, &amp;ionoscloud.GetServersArgs{
        /// 			DatacenterId: ionoscloud_datacenter.Example.Id,
        /// 			Filters: []ionoscloud.GetServersFilter{
        /// 				{
        /// 					Name:  "name",
        /// 					Value: "server_name_to_look_here",
        /// 				},
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.ionoscloud.IonoscloudFunctions;
        /// import com.pulumi.ionoscloud.inputs.GetServersArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = IonoscloudFunctions.getServers(GetServersArgs.builder()
        ///             .datacenterId(ionoscloud_datacenter.example().id())
        ///             .filters(GetServersFilterArgs.builder()
        ///                 .name("name")
        ///                 .value("server_name_to_look_here")
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   example:
        ///     fn::invoke:
        ///       Function: ionoscloud:getServers
        ///       Arguments:
        ///         datacenterId: ${ionoscloud_datacenter.example.id}
        ///         filters:
        ///           - name: name
        ///             value: server_name_to_look_here
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// ### By CPU Family
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as ionoscloud from "@pulumi/ionoscloud";
        /// 
        /// const example = ionoscloud.getServers({
        ///     datacenterId: ionoscloud_datacenter.example.id,
        ///     filters: [{
        ///         name: "cpu_family",
        ///         value: "INTEL_XEON",
        ///     }],
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_ionoscloud as ionoscloud
        /// 
        /// example = ionoscloud.get_servers(datacenter_id=ionoscloud_datacenter["example"]["id"],
        ///     filters=[ionoscloud.GetServersFilterArgs(
        ///         name="cpu_family",
        ///         value="INTEL_XEON",
        ///     )])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.GetServers.Invoke(new()
        ///     {
        ///         DatacenterId = ionoscloud_datacenter.Example.Id,
        ///         Filters = new[]
        ///         {
        ///             new Ionoscloud.Inputs.GetServersFilterInputArgs
        ///             {
        ///                 Name = "cpu_family",
        ///                 Value = "INTEL_XEON",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ionoscloud.GetServers(ctx, &amp;ionoscloud.GetServersArgs{
        /// 			DatacenterId: ionoscloud_datacenter.Example.Id,
        /// 			Filters: []ionoscloud.GetServersFilter{
        /// 				{
        /// 					Name:  "cpu_family",
        /// 					Value: "INTEL_XEON",
        /// 				},
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.ionoscloud.IonoscloudFunctions;
        /// import com.pulumi.ionoscloud.inputs.GetServersArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = IonoscloudFunctions.getServers(GetServersArgs.builder()
        ///             .datacenterId(ionoscloud_datacenter.example().id())
        ///             .filters(GetServersFilterArgs.builder()
        ///                 .name("cpu_family")
        ///                 .value("INTEL_XEON")
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   example:
        ///     fn::invoke:
        ///       Function: ionoscloud:getServers
        ///       Arguments:
        ///         datacenterId: ${ionoscloud_datacenter.example.id}
        ///         filters:
        ///           - name: cpu_family
        ///             value: INTEL_XEON
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// 
        /// ### By Name and Cores
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as ionoscloud from "@pulumi/ionoscloud";
        /// 
        /// const example = ionoscloud.getServers({
        ///     datacenterId: ionoscloud_datacenter.example.id,
        ///     filters: [
        ///         {
        ///             name: "name",
        ///             value: "test",
        ///         },
        ///         {
        ///             name: "cores",
        ///             value: "1",
        ///         },
        ///     ],
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_ionoscloud as ionoscloud
        /// 
        /// example = ionoscloud.get_servers(datacenter_id=ionoscloud_datacenter["example"]["id"],
        ///     filters=[
        ///         ionoscloud.GetServersFilterArgs(
        ///             name="name",
        ///             value="test",
        ///         ),
        ///         ionoscloud.GetServersFilterArgs(
        ///             name="cores",
        ///             value="1",
        ///         ),
        ///     ])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.GetServers.Invoke(new()
        ///     {
        ///         DatacenterId = ionoscloud_datacenter.Example.Id,
        ///         Filters = new[]
        ///         {
        ///             new Ionoscloud.Inputs.GetServersFilterInputArgs
        ///             {
        ///                 Name = "name",
        ///                 Value = "test",
        ///             },
        ///             new Ionoscloud.Inputs.GetServersFilterInputArgs
        ///             {
        ///                 Name = "cores",
        ///                 Value = "1",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ionoscloud.GetServers(ctx, &amp;ionoscloud.GetServersArgs{
        /// 			DatacenterId: ionoscloud_datacenter.Example.Id,
        /// 			Filters: []ionoscloud.GetServersFilter{
        /// 				{
        /// 					Name:  "name",
        /// 					Value: "test",
        /// 				},
        /// 				{
        /// 					Name:  "cores",
        /// 					Value: "1",
        /// 				},
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.ionoscloud.IonoscloudFunctions;
        /// import com.pulumi.ionoscloud.inputs.GetServersArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = IonoscloudFunctions.getServers(GetServersArgs.builder()
        ///             .datacenterId(ionoscloud_datacenter.example().id())
        ///             .filters(            
        ///                 GetServersFilterArgs.builder()
        ///                     .name("name")
        ///                     .value("test")
        ///                     .build(),
        ///                 GetServersFilterArgs.builder()
        ///                     .name("cores")
        ///                     .value("1")
        ///                     .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   example:
        ///     fn::invoke:
        ///       Function: ionoscloud:getServers
        ///       Arguments:
        ///         datacenterId: ${ionoscloud_datacenter.example.id}
        ///         filters:
        ///           - name: name
        ///             value: test
        ///           - name: cores
        ///             value: '1'
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetServersResult> Invoke(GetServersInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServersResult>("ionoscloud:index/getServers:getServers", args ?? new GetServersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServersArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of an existing datacenter that the servers are a part of
        /// </summary>
        [Input("datacenterId", required: true)]
        public string DatacenterId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetServersFilterArgs>? _filters;

        /// <summary>
        /// One or more name/value pairs to filter off of. You can use most base fields in the server resource. These do **NOT** include nested fields in nics or volume nested fields.
        /// 
        /// 
        /// `datacenter_id` must be provided. If `datacenter_id` is missing , the datasource will return an error.
        /// 
        /// **NOTE:** Lookup by filter is partial. Searching for a server using filter name and value `test`, will find all servers that have `test` in the name.
        /// For example, it will find servers named `test`, `test1`, `testsomething`.
        /// 
        /// **NOTE:** You cannot search by `image_name` by providing an alias like `ubuntu`.
        /// </summary>
        public List<Inputs.GetServersFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetServersFilterArgs>());
            set => _filters = value;
        }

        public GetServersArgs()
        {
        }
        public static new GetServersArgs Empty => new GetServersArgs();
    }

    public sealed class GetServersInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of an existing datacenter that the servers are a part of
        /// </summary>
        [Input("datacenterId", required: true)]
        public Input<string> DatacenterId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetServersFilterInputArgs>? _filters;

        /// <summary>
        /// One or more name/value pairs to filter off of. You can use most base fields in the server resource. These do **NOT** include nested fields in nics or volume nested fields.
        /// 
        /// 
        /// `datacenter_id` must be provided. If `datacenter_id` is missing , the datasource will return an error.
        /// 
        /// **NOTE:** Lookup by filter is partial. Searching for a server using filter name and value `test`, will find all servers that have `test` in the name.
        /// For example, it will find servers named `test`, `test1`, `testsomething`.
        /// 
        /// **NOTE:** You cannot search by `image_name` by providing an alias like `ubuntu`.
        /// </summary>
        public InputList<Inputs.GetServersFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetServersFilterInputArgs>());
            set => _filters = value;
        }

        public GetServersInvokeArgs()
        {
        }
        public static new GetServersInvokeArgs Empty => new GetServersInvokeArgs();
    }


    [OutputType]
    public sealed class GetServersResult
    {
        public readonly string DatacenterId;
        public readonly ImmutableArray<Outputs.GetServersFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// list of servers that matches the filters provided.
        /// For a full reference of all attributes returned, check out documentation
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServersServerResult> Servers;

        [OutputConstructor]
        private GetServersResult(
            string datacenterId,

            ImmutableArray<Outputs.GetServersFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetServersServerResult> servers)
        {
            DatacenterId = datacenterId;
            Filters = filters;
            Id = id;
            Servers = servers;
        }
    }
}
