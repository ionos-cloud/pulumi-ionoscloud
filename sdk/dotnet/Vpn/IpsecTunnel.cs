// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud.Vpn
{
    [IonoscloudResourceType("ionoscloud:vpn/ipsecTunnel:IpsecTunnel")]
    public partial class IpsecTunnel : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Properties with all data needed to define IPSec Authentication.
        /// </summary>
        [Output("auth")]
        public Output<Outputs.IpsecTunnelAuth> Auth { get; private set; } = null!;

        /// <summary>
        /// The network CIDRs on the "Left" side that are allowed to connect to the IPSec tunnel, i.e. the CIDRs within your IONOS
        /// Cloud LAN. Specify "0.0.0.0/0" or "::/0" for all addresses.
        /// </summary>
        [Output("cloudNetworkCidrs")]
        public Output<ImmutableArray<string>> CloudNetworkCidrs { get; private set; } = null!;

        /// <summary>
        /// The human-readable description of your IPSec Gateway Tunnel.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Settings for the IPSec SA (ESP) phase.
        /// </summary>
        [Output("esps")]
        public Output<ImmutableArray<Outputs.IpsecTunnelEsp>> Esps { get; private set; } = null!;

        /// <summary>
        /// The ID of the IPSec Gateway that the tunnel belongs to.
        /// </summary>
        [Output("gatewayId")]
        public Output<string> GatewayId { get; private set; } = null!;

        /// <summary>
        /// Settings for the initial security exchange phase.
        /// </summary>
        [Output("ike")]
        public Output<Outputs.IpsecTunnelIke> Ike { get; private set; } = null!;

        /// <summary>
        /// The location of the IPSec Gateway Tunnel. Supported locations: de/fra, de/txl
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The human-readable name of your IPSec Gateway Tunnel.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The network CIDRs on the "Right" side that are allowed to connect to the IPSec tunnel. Specify "0.0.0.0/0" or "::/0" for
        /// all addresses.
        /// </summary>
        [Output("peerNetworkCidrs")]
        public Output<ImmutableArray<string>> PeerNetworkCidrs { get; private set; } = null!;

        /// <summary>
        /// The remote peer host fully qualified domain name or public IPV4 IP to connect to.
        /// </summary>
        [Output("remoteHost")]
        public Output<string> RemoteHost { get; private set; } = null!;


        /// <summary>
        /// Create a IpsecTunnel resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IpsecTunnel(string name, IpsecTunnelArgs args, CustomResourceOptions? options = null)
            : base("ionoscloud:vpn/ipsecTunnel:IpsecTunnel", name, args ?? new IpsecTunnelArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IpsecTunnel(string name, Input<string> id, IpsecTunnelState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:vpn/ipsecTunnel:IpsecTunnel", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IpsecTunnel resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IpsecTunnel Get(string name, Input<string> id, IpsecTunnelState? state = null, CustomResourceOptions? options = null)
        {
            return new IpsecTunnel(name, id, state, options);
        }
    }

    public sealed class IpsecTunnelArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Properties with all data needed to define IPSec Authentication.
        /// </summary>
        [Input("auth", required: true)]
        public Input<Inputs.IpsecTunnelAuthArgs> Auth { get; set; } = null!;

        [Input("cloudNetworkCidrs", required: true)]
        private InputList<string>? _cloudNetworkCidrs;

        /// <summary>
        /// The network CIDRs on the "Left" side that are allowed to connect to the IPSec tunnel, i.e. the CIDRs within your IONOS
        /// Cloud LAN. Specify "0.0.0.0/0" or "::/0" for all addresses.
        /// </summary>
        public InputList<string> CloudNetworkCidrs
        {
            get => _cloudNetworkCidrs ?? (_cloudNetworkCidrs = new InputList<string>());
            set => _cloudNetworkCidrs = value;
        }

        /// <summary>
        /// The human-readable description of your IPSec Gateway Tunnel.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("esps", required: true)]
        private InputList<Inputs.IpsecTunnelEspArgs>? _esps;

        /// <summary>
        /// Settings for the IPSec SA (ESP) phase.
        /// </summary>
        public InputList<Inputs.IpsecTunnelEspArgs> Esps
        {
            get => _esps ?? (_esps = new InputList<Inputs.IpsecTunnelEspArgs>());
            set => _esps = value;
        }

        /// <summary>
        /// The ID of the IPSec Gateway that the tunnel belongs to.
        /// </summary>
        [Input("gatewayId", required: true)]
        public Input<string> GatewayId { get; set; } = null!;

        /// <summary>
        /// Settings for the initial security exchange phase.
        /// </summary>
        [Input("ike", required: true)]
        public Input<Inputs.IpsecTunnelIkeArgs> Ike { get; set; } = null!;

        /// <summary>
        /// The location of the IPSec Gateway Tunnel. Supported locations: de/fra, de/txl
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The human-readable name of your IPSec Gateway Tunnel.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("peerNetworkCidrs", required: true)]
        private InputList<string>? _peerNetworkCidrs;

        /// <summary>
        /// The network CIDRs on the "Right" side that are allowed to connect to the IPSec tunnel. Specify "0.0.0.0/0" or "::/0" for
        /// all addresses.
        /// </summary>
        public InputList<string> PeerNetworkCidrs
        {
            get => _peerNetworkCidrs ?? (_peerNetworkCidrs = new InputList<string>());
            set => _peerNetworkCidrs = value;
        }

        /// <summary>
        /// The remote peer host fully qualified domain name or public IPV4 IP to connect to.
        /// </summary>
        [Input("remoteHost", required: true)]
        public Input<string> RemoteHost { get; set; } = null!;

        public IpsecTunnelArgs()
        {
        }
        public static new IpsecTunnelArgs Empty => new IpsecTunnelArgs();
    }

    public sealed class IpsecTunnelState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Properties with all data needed to define IPSec Authentication.
        /// </summary>
        [Input("auth")]
        public Input<Inputs.IpsecTunnelAuthGetArgs>? Auth { get; set; }

        [Input("cloudNetworkCidrs")]
        private InputList<string>? _cloudNetworkCidrs;

        /// <summary>
        /// The network CIDRs on the "Left" side that are allowed to connect to the IPSec tunnel, i.e. the CIDRs within your IONOS
        /// Cloud LAN. Specify "0.0.0.0/0" or "::/0" for all addresses.
        /// </summary>
        public InputList<string> CloudNetworkCidrs
        {
            get => _cloudNetworkCidrs ?? (_cloudNetworkCidrs = new InputList<string>());
            set => _cloudNetworkCidrs = value;
        }

        /// <summary>
        /// The human-readable description of your IPSec Gateway Tunnel.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("esps")]
        private InputList<Inputs.IpsecTunnelEspGetArgs>? _esps;

        /// <summary>
        /// Settings for the IPSec SA (ESP) phase.
        /// </summary>
        public InputList<Inputs.IpsecTunnelEspGetArgs> Esps
        {
            get => _esps ?? (_esps = new InputList<Inputs.IpsecTunnelEspGetArgs>());
            set => _esps = value;
        }

        /// <summary>
        /// The ID of the IPSec Gateway that the tunnel belongs to.
        /// </summary>
        [Input("gatewayId")]
        public Input<string>? GatewayId { get; set; }

        /// <summary>
        /// Settings for the initial security exchange phase.
        /// </summary>
        [Input("ike")]
        public Input<Inputs.IpsecTunnelIkeGetArgs>? Ike { get; set; }

        /// <summary>
        /// The location of the IPSec Gateway Tunnel. Supported locations: de/fra, de/txl
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The human-readable name of your IPSec Gateway Tunnel.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("peerNetworkCidrs")]
        private InputList<string>? _peerNetworkCidrs;

        /// <summary>
        /// The network CIDRs on the "Right" side that are allowed to connect to the IPSec tunnel. Specify "0.0.0.0/0" or "::/0" for
        /// all addresses.
        /// </summary>
        public InputList<string> PeerNetworkCidrs
        {
            get => _peerNetworkCidrs ?? (_peerNetworkCidrs = new InputList<string>());
            set => _peerNetworkCidrs = value;
        }

        /// <summary>
        /// The remote peer host fully qualified domain name or public IPV4 IP to connect to.
        /// </summary>
        [Input("remoteHost")]
        public Input<string>? RemoteHost { get; set; }

        public IpsecTunnelState()
        {
        }
        public static new IpsecTunnelState Empty => new IpsecTunnelState();
    }
}
