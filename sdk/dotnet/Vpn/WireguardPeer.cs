// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud.Vpn
{
    [IonoscloudResourceType("ionoscloud:vpn/wireguardPeer:WireguardPeer")]
    public partial class WireguardPeer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The subnet CIDRs that are allowed to connect to the WireGuard Gateway.
        /// </summary>
        [Output("allowedIps")]
        public Output<ImmutableArray<string>> AllowedIps { get; private set; } = null!;

        /// <summary>
        /// Human readable description of the WireGuard Gateway Peer.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Endpoint configuration for the WireGuard Peer.
        /// </summary>
        [Output("endpoint")]
        public Output<Outputs.WireguardPeerEndpoint?> Endpoint { get; private set; } = null!;

        /// <summary>
        /// The ID of the WireGuard Peer that the peer will connect to.
        /// </summary>
        [Output("gatewayId")]
        public Output<string> GatewayId { get; private set; } = null!;

        /// <summary>
        /// The location of the WireGuard Peer. Supported locations: de/fra, de/txl
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The human readable name of your WireGuard Gateway Peer.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// WireGuard public key of the connecting peer
        /// </summary>
        [Output("publicKey")]
        public Output<string> PublicKey { get; private set; } = null!;

        /// <summary>
        /// The status of the WireGuard Gateway
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a WireguardPeer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WireguardPeer(string name, WireguardPeerArgs args, CustomResourceOptions? options = null)
            : base("ionoscloud:vpn/wireguardPeer:WireguardPeer", name, args ?? new WireguardPeerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WireguardPeer(string name, Input<string> id, WireguardPeerState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:vpn/wireguardPeer:WireguardPeer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WireguardPeer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WireguardPeer Get(string name, Input<string> id, WireguardPeerState? state = null, CustomResourceOptions? options = null)
        {
            return new WireguardPeer(name, id, state, options);
        }
    }

    public sealed class WireguardPeerArgs : global::Pulumi.ResourceArgs
    {
        [Input("allowedIps", required: true)]
        private InputList<string>? _allowedIps;

        /// <summary>
        /// The subnet CIDRs that are allowed to connect to the WireGuard Gateway.
        /// </summary>
        public InputList<string> AllowedIps
        {
            get => _allowedIps ?? (_allowedIps = new InputList<string>());
            set => _allowedIps = value;
        }

        /// <summary>
        /// Human readable description of the WireGuard Gateway Peer.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Endpoint configuration for the WireGuard Peer.
        /// </summary>
        [Input("endpoint")]
        public Input<Inputs.WireguardPeerEndpointArgs>? Endpoint { get; set; }

        /// <summary>
        /// The ID of the WireGuard Peer that the peer will connect to.
        /// </summary>
        [Input("gatewayId", required: true)]
        public Input<string> GatewayId { get; set; } = null!;

        /// <summary>
        /// The location of the WireGuard Peer. Supported locations: de/fra, de/txl
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The human readable name of your WireGuard Gateway Peer.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// WireGuard public key of the connecting peer
        /// </summary>
        [Input("publicKey", required: true)]
        public Input<string> PublicKey { get; set; } = null!;

        public WireguardPeerArgs()
        {
        }
        public static new WireguardPeerArgs Empty => new WireguardPeerArgs();
    }

    public sealed class WireguardPeerState : global::Pulumi.ResourceArgs
    {
        [Input("allowedIps")]
        private InputList<string>? _allowedIps;

        /// <summary>
        /// The subnet CIDRs that are allowed to connect to the WireGuard Gateway.
        /// </summary>
        public InputList<string> AllowedIps
        {
            get => _allowedIps ?? (_allowedIps = new InputList<string>());
            set => _allowedIps = value;
        }

        /// <summary>
        /// Human readable description of the WireGuard Gateway Peer.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Endpoint configuration for the WireGuard Peer.
        /// </summary>
        [Input("endpoint")]
        public Input<Inputs.WireguardPeerEndpointGetArgs>? Endpoint { get; set; }

        /// <summary>
        /// The ID of the WireGuard Peer that the peer will connect to.
        /// </summary>
        [Input("gatewayId")]
        public Input<string>? GatewayId { get; set; }

        /// <summary>
        /// The location of the WireGuard Peer. Supported locations: de/fra, de/txl
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The human readable name of your WireGuard Gateway Peer.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// WireGuard public key of the connecting peer
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        /// <summary>
        /// The status of the WireGuard Gateway
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public WireguardPeerState()
        {
        }
        public static new WireguardPeerState Empty => new WireguardPeerState();
    }
}
