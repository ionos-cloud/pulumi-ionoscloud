// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud.Vpn
{
    public static class GetIpsecTunnel
    {
        /// <summary>
        /// The **VPN IPSec Gateway Tunnel data source** can be used to search for and return an existing IPSec Gateway Tunnel.
        /// You can provide a string for the name parameter which will be compared with provisioned IPSec Gateway Tunnels.
        /// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
        /// When this happens, please refine your search string so that it is specific enough to return only one result.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Task<GetIpsecTunnelResult> InvokeAsync(GetIpsecTunnelArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIpsecTunnelResult>("ionoscloud:vpn/getIpsecTunnel:getIpsecTunnel", args ?? new GetIpsecTunnelArgs(), options.WithDefaults());

        /// <summary>
        /// The **VPN IPSec Gateway Tunnel data source** can be used to search for and return an existing IPSec Gateway Tunnel.
        /// You can provide a string for the name parameter which will be compared with provisioned IPSec Gateway Tunnels.
        /// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
        /// When this happens, please refine your search string so that it is specific enough to return only one result.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetIpsecTunnelResult> Invoke(GetIpsecTunnelInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIpsecTunnelResult>("ionoscloud:vpn/getIpsecTunnel:getIpsecTunnel", args ?? new GetIpsecTunnelInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The **VPN IPSec Gateway Tunnel data source** can be used to search for and return an existing IPSec Gateway Tunnel.
        /// You can provide a string for the name parameter which will be compared with provisioned IPSec Gateway Tunnels.
        /// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
        /// When this happens, please refine your search string so that it is specific enough to return only one result.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetIpsecTunnelResult> Invoke(GetIpsecTunnelInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetIpsecTunnelResult>("ionoscloud:vpn/getIpsecTunnel:getIpsecTunnel", args ?? new GetIpsecTunnelInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIpsecTunnelArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the IPSec Gateway that the tunnel belongs to.
        /// </summary>
        [Input("gatewayId", required: true)]
        public string GatewayId { get; set; } = null!;

        /// <summary>
        /// ID of an existing IPSec Gateway Tunnel that you want to search for.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The location of the IPSec Gateway Tunnel.
        /// </summary>
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        /// <summary>
        /// Name of an existing IPSec Gateway Tunnel that you want to search for.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetIpsecTunnelArgs()
        {
        }
        public static new GetIpsecTunnelArgs Empty => new GetIpsecTunnelArgs();
    }

    public sealed class GetIpsecTunnelInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the IPSec Gateway that the tunnel belongs to.
        /// </summary>
        [Input("gatewayId", required: true)]
        public Input<string> GatewayId { get; set; } = null!;

        /// <summary>
        /// ID of an existing IPSec Gateway Tunnel that you want to search for.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The location of the IPSec Gateway Tunnel.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Name of an existing IPSec Gateway Tunnel that you want to search for.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetIpsecTunnelInvokeArgs()
        {
        }
        public static new GetIpsecTunnelInvokeArgs Empty => new GetIpsecTunnelInvokeArgs();
    }


    [OutputType]
    public sealed class GetIpsecTunnelResult
    {
        public readonly ImmutableArray<Outputs.GetIpsecTunnelAuthResult> Auths;
        public readonly ImmutableArray<string> CloudNetworkCidrs;
        public readonly string Description;
        public readonly ImmutableArray<Outputs.GetIpsecTunnelEspResult> Esps;
        public readonly string GatewayId;
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetIpsecTunnelIkeResult> Ikes;
        public readonly string Location;
        public readonly string Name;
        public readonly ImmutableArray<string> PeerNetworkCidrs;
        public readonly string RemoteHost;

        [OutputConstructor]
        private GetIpsecTunnelResult(
            ImmutableArray<Outputs.GetIpsecTunnelAuthResult> auths,

            ImmutableArray<string> cloudNetworkCidrs,

            string description,

            ImmutableArray<Outputs.GetIpsecTunnelEspResult> esps,

            string gatewayId,

            string id,

            ImmutableArray<Outputs.GetIpsecTunnelIkeResult> ikes,

            string location,

            string name,

            ImmutableArray<string> peerNetworkCidrs,

            string remoteHost)
        {
            Auths = auths;
            CloudNetworkCidrs = cloudNetworkCidrs;
            Description = description;
            Esps = esps;
            GatewayId = gatewayId;
            Id = id;
            Ikes = ikes;
            Location = location;
            Name = name;
            PeerNetworkCidrs = peerNetworkCidrs;
            RemoteHost = remoteHost;
        }
    }
}
