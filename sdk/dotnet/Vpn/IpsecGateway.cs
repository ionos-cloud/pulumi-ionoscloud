// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud.Vpn
{
    [IonoscloudResourceType("ionoscloud:vpn/ipsecGateway:IpsecGateway")]
    public partial class IpsecGateway : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The network connection for your gateway. Note: all connections must belong to the same datacenter.
        /// </summary>
        [Output("connections")]
        public Output<ImmutableArray<Outputs.IpsecGatewayConnection>> Connections { get; private set; } = null!;

        /// <summary>
        /// The human-readable description of your IPSec Gateway.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Public IP address to be assigned to the gateway. Note: This must be an IP address in the same datacenter as the
        /// connections.
        /// </summary>
        [Output("gatewayIp")]
        public Output<string> GatewayIp { get; private set; } = null!;

        /// <summary>
        /// The location of the IPSec Gateway. Supported locations: de/fra, de/txl
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The human readable name of your IPSecGateway.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The IKE version that is permitted for the VPN tunnels.
        /// </summary>
        [Output("version")]
        public Output<string?> Version { get; private set; } = null!;


        /// <summary>
        /// Create a IpsecGateway resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IpsecGateway(string name, IpsecGatewayArgs args, CustomResourceOptions? options = null)
            : base("ionoscloud:vpn/ipsecGateway:IpsecGateway", name, args ?? new IpsecGatewayArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IpsecGateway(string name, Input<string> id, IpsecGatewayState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:vpn/ipsecGateway:IpsecGateway", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IpsecGateway resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IpsecGateway Get(string name, Input<string> id, IpsecGatewayState? state = null, CustomResourceOptions? options = null)
        {
            return new IpsecGateway(name, id, state, options);
        }
    }

    public sealed class IpsecGatewayArgs : global::Pulumi.ResourceArgs
    {
        [Input("connections", required: true)]
        private InputList<Inputs.IpsecGatewayConnectionArgs>? _connections;

        /// <summary>
        /// The network connection for your gateway. Note: all connections must belong to the same datacenter.
        /// </summary>
        public InputList<Inputs.IpsecGatewayConnectionArgs> Connections
        {
            get => _connections ?? (_connections = new InputList<Inputs.IpsecGatewayConnectionArgs>());
            set => _connections = value;
        }

        /// <summary>
        /// The human-readable description of your IPSec Gateway.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Public IP address to be assigned to the gateway. Note: This must be an IP address in the same datacenter as the
        /// connections.
        /// </summary>
        [Input("gatewayIp", required: true)]
        public Input<string> GatewayIp { get; set; } = null!;

        /// <summary>
        /// The location of the IPSec Gateway. Supported locations: de/fra, de/txl
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The human readable name of your IPSecGateway.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The IKE version that is permitted for the VPN tunnels.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public IpsecGatewayArgs()
        {
        }
        public static new IpsecGatewayArgs Empty => new IpsecGatewayArgs();
    }

    public sealed class IpsecGatewayState : global::Pulumi.ResourceArgs
    {
        [Input("connections")]
        private InputList<Inputs.IpsecGatewayConnectionGetArgs>? _connections;

        /// <summary>
        /// The network connection for your gateway. Note: all connections must belong to the same datacenter.
        /// </summary>
        public InputList<Inputs.IpsecGatewayConnectionGetArgs> Connections
        {
            get => _connections ?? (_connections = new InputList<Inputs.IpsecGatewayConnectionGetArgs>());
            set => _connections = value;
        }

        /// <summary>
        /// The human-readable description of your IPSec Gateway.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Public IP address to be assigned to the gateway. Note: This must be an IP address in the same datacenter as the
        /// connections.
        /// </summary>
        [Input("gatewayIp")]
        public Input<string>? GatewayIp { get; set; }

        /// <summary>
        /// The location of the IPSec Gateway. Supported locations: de/fra, de/txl
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The human readable name of your IPSecGateway.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The IKE version that is permitted for the VPN tunnels.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public IpsecGatewayState()
        {
        }
        public static new IpsecGatewayState Empty => new IpsecGatewayState();
    }
}
