// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud.Vpn
{
    /// <summary>
    /// ## Overview
    /// 
    /// The `ionoscloud.vpn.WireguardGateway` resource manages a WireGuard Gateway within the IONOS Cloud infrastructure.
    /// This resource facilitates the creation, management, and deletion of WireGuard VPN Gateways, enabling secure connections between your network resources.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ionoscloud = Pulumi.Ionoscloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var datacenterExample = new Ionoscloud.Compute.Datacenter("datacenter_example", new()
    ///     {
    ///         Name = "datacenter_example",
    ///         Location = "de/fra",
    ///     });
    /// 
    ///     var ipblockExample = new Ionoscloud.Compute.IPBlock("ipblock_example", new()
    ///     {
    ///         Location = "de/fra",
    ///         Size = 1,
    ///         Name = "ipblock_example",
    ///     });
    /// 
    ///     var lanExample = new Ionoscloud.Compute.Lan("lan_example", new()
    ///     {
    ///         Name = "lan_example",
    ///         DatacenterId = datacenterExample.Id,
    ///     });
    /// 
    ///     var gateway = new Ionoscloud.Vpn.WireguardGateway("gateway", new()
    ///     {
    ///         Location = "de/fra",
    ///         Name = "gateway_example",
    ///         Description = "description",
    ///         PrivateKey = "private",
    ///         GatewayIp = ipblockExample.Ips.Apply(ips =&gt; ips[0]),
    ///         InterfaceIpv4Cidr = "192.168.1.100/24",
    ///         Connections = new[]
    ///         {
    ///             new Ionoscloud.Vpn.Inputs.WireguardGatewayConnectionArgs
    ///             {
    ///                 DatacenterId = datacenterExample.Id,
    ///                 LanId = lanExample.Id,
    ///                 Ipv4Cidr = "192.168.1.108/24",
    ///             },
    ///         },
    ///         MaintenanceWindow = new Ionoscloud.Vpn.Inputs.WireguardGatewayMaintenanceWindowArgs
    ///         {
    ///             DayOfTheWeek = "Monday",
    ///             Time = "09:00:00",
    ///         },
    ///         Tier = "STANDARD",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// WireGuard Gateways can be imported using their ID:
    /// 
    /// ```sh
    /// $ pulumi import ionoscloud:vpn/wireguardGateway:WireguardGateway example_gateway location:id
    /// ```
    /// </summary>
    [IonoscloudResourceType("ionoscloud:vpn/wireguardGateway:WireguardGateway")]
    public partial class WireguardGateway : global::Pulumi.CustomResource
    {
        /// <summary>
        /// [Block] The connection configuration for the WireGuard Gateway. This block supports fields documented below.
        /// </summary>
        [Output("connections")]
        public Output<ImmutableArray<Outputs.WireguardGatewayConnection>> Connections { get; private set; } = null!;

        /// <summary>
        /// [String] A description of the WireGuard Gateway.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// [String] The IP address of the WireGuard Gateway.
        /// </summary>
        [Output("gatewayIp")]
        public Output<string> GatewayIp { get; private set; } = null!;

        /// <summary>
        /// [String] The IPv4 CIDR for the WireGuard Gateway interface.
        /// </summary>
        [Output("interfaceIpv4Cidr")]
        public Output<string?> InterfaceIpv4Cidr { get; private set; } = null!;

        /// <summary>
        /// [String] The IPv6 CIDR for the WireGuard Gateway interface.
        /// </summary>
        [Output("interfaceIpv6Cidr")]
        public Output<string?> InterfaceIpv6Cidr { get; private set; } = null!;

        [Output("listenPort")]
        public Output<int?> ListenPort { get; private set; } = null!;

        /// <summary>
        /// [String] The location of the WireGuard Gateway. Supported locations: de/fra, de/txl, es/vit,
        /// gb/bhx, gb/lhr, us/ewr, us/las, us/mci, fr/par.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// (Computed) A weekly 4 hour-long window, during which maintenance might occur.
        /// </summary>
        [Output("maintenanceWindow")]
        public Output<Outputs.WireguardGatewayMaintenanceWindow> MaintenanceWindow { get; private set; } = null!;

        /// <summary>
        /// [String] The name of the WireGuard Gateway.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// [String] The private key for the WireGuard Gateway. To be created with the wg utility.
        /// </summary>
        [Output("privateKey")]
        public Output<string> PrivateKey { get; private set; } = null!;

        /// <summary>
        /// (Computed)[String] The public key for the WireGuard Gateway.
        /// -
        /// &gt; **âš  NOTE:** `IONOS_API_URL_VPN` can be used to set a custom API URL for the resource. `location` field needs to be empty, otherwise it will override the custom API URL. Setting `endpoint` or `IONOS_API_URL` does not have any effect.
        /// </summary>
        [Output("publicKey")]
        public Output<string> PublicKey { get; private set; } = null!;

        /// <summary>
        /// (Computed)[String] The current status of the WireGuard Gateway.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// (Computed)[string] Gateway performance options.  See product documentation for full details. Options: STANDARD, STANDARD_HA, ENHANCED, ENHANCED_HA, PREMIUM, PREMIUM_HA.
        /// </summary>
        [Output("tier")]
        public Output<string?> Tier { get; private set; } = null!;


        /// <summary>
        /// Create a WireguardGateway resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WireguardGateway(string name, WireguardGatewayArgs args, CustomResourceOptions? options = null)
            : base("ionoscloud:vpn/wireguardGateway:WireguardGateway", name, args ?? new WireguardGatewayArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WireguardGateway(string name, Input<string> id, WireguardGatewayState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:vpn/wireguardGateway:WireguardGateway", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "privateKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WireguardGateway resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WireguardGateway Get(string name, Input<string> id, WireguardGatewayState? state = null, CustomResourceOptions? options = null)
        {
            return new WireguardGateway(name, id, state, options);
        }
    }

    public sealed class WireguardGatewayArgs : global::Pulumi.ResourceArgs
    {
        [Input("connections", required: true)]
        private InputList<Inputs.WireguardGatewayConnectionArgs>? _connections;

        /// <summary>
        /// [Block] The connection configuration for the WireGuard Gateway. This block supports fields documented below.
        /// </summary>
        public InputList<Inputs.WireguardGatewayConnectionArgs> Connections
        {
            get => _connections ?? (_connections = new InputList<Inputs.WireguardGatewayConnectionArgs>());
            set => _connections = value;
        }

        /// <summary>
        /// [String] A description of the WireGuard Gateway.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// [String] The IP address of the WireGuard Gateway.
        /// </summary>
        [Input("gatewayIp", required: true)]
        public Input<string> GatewayIp { get; set; } = null!;

        /// <summary>
        /// [String] The IPv4 CIDR for the WireGuard Gateway interface.
        /// </summary>
        [Input("interfaceIpv4Cidr")]
        public Input<string>? InterfaceIpv4Cidr { get; set; }

        /// <summary>
        /// [String] The IPv6 CIDR for the WireGuard Gateway interface.
        /// </summary>
        [Input("interfaceIpv6Cidr")]
        public Input<string>? InterfaceIpv6Cidr { get; set; }

        [Input("listenPort")]
        public Input<int>? ListenPort { get; set; }

        /// <summary>
        /// [String] The location of the WireGuard Gateway. Supported locations: de/fra, de/txl, es/vit,
        /// gb/bhx, gb/lhr, us/ewr, us/las, us/mci, fr/par.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// (Computed) A weekly 4 hour-long window, during which maintenance might occur.
        /// </summary>
        [Input("maintenanceWindow")]
        public Input<Inputs.WireguardGatewayMaintenanceWindowArgs>? MaintenanceWindow { get; set; }

        /// <summary>
        /// [String] The name of the WireGuard Gateway.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privateKey", required: true)]
        private Input<string>? _privateKey;

        /// <summary>
        /// [String] The private key for the WireGuard Gateway. To be created with the wg utility.
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// (Computed)[string] Gateway performance options.  See product documentation for full details. Options: STANDARD, STANDARD_HA, ENHANCED, ENHANCED_HA, PREMIUM, PREMIUM_HA.
        /// </summary>
        [Input("tier")]
        public Input<string>? Tier { get; set; }

        public WireguardGatewayArgs()
        {
        }
        public static new WireguardGatewayArgs Empty => new WireguardGatewayArgs();
    }

    public sealed class WireguardGatewayState : global::Pulumi.ResourceArgs
    {
        [Input("connections")]
        private InputList<Inputs.WireguardGatewayConnectionGetArgs>? _connections;

        /// <summary>
        /// [Block] The connection configuration for the WireGuard Gateway. This block supports fields documented below.
        /// </summary>
        public InputList<Inputs.WireguardGatewayConnectionGetArgs> Connections
        {
            get => _connections ?? (_connections = new InputList<Inputs.WireguardGatewayConnectionGetArgs>());
            set => _connections = value;
        }

        /// <summary>
        /// [String] A description of the WireGuard Gateway.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// [String] The IP address of the WireGuard Gateway.
        /// </summary>
        [Input("gatewayIp")]
        public Input<string>? GatewayIp { get; set; }

        /// <summary>
        /// [String] The IPv4 CIDR for the WireGuard Gateway interface.
        /// </summary>
        [Input("interfaceIpv4Cidr")]
        public Input<string>? InterfaceIpv4Cidr { get; set; }

        /// <summary>
        /// [String] The IPv6 CIDR for the WireGuard Gateway interface.
        /// </summary>
        [Input("interfaceIpv6Cidr")]
        public Input<string>? InterfaceIpv6Cidr { get; set; }

        [Input("listenPort")]
        public Input<int>? ListenPort { get; set; }

        /// <summary>
        /// [String] The location of the WireGuard Gateway. Supported locations: de/fra, de/txl, es/vit,
        /// gb/bhx, gb/lhr, us/ewr, us/las, us/mci, fr/par.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// (Computed) A weekly 4 hour-long window, during which maintenance might occur.
        /// </summary>
        [Input("maintenanceWindow")]
        public Input<Inputs.WireguardGatewayMaintenanceWindowGetArgs>? MaintenanceWindow { get; set; }

        /// <summary>
        /// [String] The name of the WireGuard Gateway.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;

        /// <summary>
        /// [String] The private key for the WireGuard Gateway. To be created with the wg utility.
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// (Computed)[String] The public key for the WireGuard Gateway.
        /// -
        /// &gt; **âš  NOTE:** `IONOS_API_URL_VPN` can be used to set a custom API URL for the resource. `location` field needs to be empty, otherwise it will override the custom API URL. Setting `endpoint` or `IONOS_API_URL` does not have any effect.
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        /// <summary>
        /// (Computed)[String] The current status of the WireGuard Gateway.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// (Computed)[string] Gateway performance options.  See product documentation for full details. Options: STANDARD, STANDARD_HA, ENHANCED, ENHANCED_HA, PREMIUM, PREMIUM_HA.
        /// </summary>
        [Input("tier")]
        public Input<string>? Tier { get; set; }

        public WireguardGatewayState()
        {
        }
        public static new WireguardGatewayState Empty => new WireguardGatewayState();
    }
}
