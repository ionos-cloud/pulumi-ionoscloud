// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud.K8s
{
    [IonoscloudResourceType("ionoscloud:k8s/nodePool:NodePool")]
    public partial class NodePool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// When set to true, allows the update of immutable fields by destroying and re-creating the node pool
        /// </summary>
        [Output("allowReplace")]
        public Output<bool?> AllowReplace { get; private set; } = null!;

        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>?> Annotations { get; private set; } = null!;

        /// <summary>
        /// The range defining the minimum and maximum number of worker nodes that the managed node group can scale in
        /// </summary>
        [Output("autoScaling")]
        public Output<Outputs.NodePoolAutoScaling?> AutoScaling { get; private set; } = null!;

        /// <summary>
        /// The compute availability zone in which the nodes should exist
        /// </summary>
        [Output("availabilityZone")]
        public Output<string> AvailabilityZone { get; private set; } = null!;

        /// <summary>
        /// CPU cores count
        /// </summary>
        [Output("coresCount")]
        public Output<int> CoresCount { get; private set; } = null!;

        /// <summary>
        /// CPU Family
        /// </summary>
        [Output("cpuFamily")]
        public Output<string> CpuFamily { get; private set; } = null!;

        /// <summary>
        /// The UUID of the VDC
        /// </summary>
        [Output("datacenterId")]
        public Output<string> DatacenterId { get; private set; } = null!;

        /// <summary>
        /// The UUID of an existing kubernetes cluster
        /// </summary>
        [Output("k8sClusterId")]
        public Output<string> K8sClusterId { get; private set; } = null!;

        /// <summary>
        /// The desired Kubernetes Version. For supported values, please check the API documentation. Downgrades are not supported.
        /// The provider will ignore downgrades of patch level.
        /// </summary>
        [Output("k8sVersion")]
        public Output<string> K8sVersion { get; private set; } = null!;

        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// A list of Local Area Networks the node pool should be part of
        /// </summary>
        [Output("lans")]
        public Output<ImmutableArray<Outputs.NodePoolLan>> Lans { get; private set; } = null!;

        /// <summary>
        /// A maintenance window comprise of a day of the week and a time for maintenance to be allowed
        /// </summary>
        [Output("maintenanceWindow")]
        public Output<Outputs.NodePoolMaintenanceWindow> MaintenanceWindow { get; private set; } = null!;

        /// <summary>
        /// The desired name for the node pool
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The number of nodes in this node pool
        /// </summary>
        [Output("nodeCount")]
        public Output<int> NodeCount { get; private set; } = null!;

        /// <summary>
        /// A list of fixed IPs. Cannot be set on private clusters.
        /// </summary>
        [Output("publicIps")]
        public Output<ImmutableArray<string>> PublicIps { get; private set; } = null!;

        /// <summary>
        /// The amount of RAM in MB
        /// </summary>
        [Output("ramSize")]
        public Output<int> RamSize { get; private set; } = null!;

        /// <summary>
        /// The total allocated storage capacity of a node in GB
        /// </summary>
        [Output("storageSize")]
        public Output<int> StorageSize { get; private set; } = null!;

        /// <summary>
        /// Storage type to use
        /// </summary>
        [Output("storageType")]
        public Output<string> StorageType { get; private set; } = null!;


        /// <summary>
        /// Create a NodePool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NodePool(string name, NodePoolArgs args, CustomResourceOptions? options = null)
            : base("ionoscloud:k8s/nodePool:NodePool", name, args ?? new NodePoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NodePool(string name, Input<string> id, NodePoolState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:k8s/nodePool:NodePool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NodePool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NodePool Get(string name, Input<string> id, NodePoolState? state = null, CustomResourceOptions? options = null)
        {
            return new NodePool(name, id, state, options);
        }
    }

    public sealed class NodePoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When set to true, allows the update of immutable fields by destroying and re-creating the node pool
        /// </summary>
        [Input("allowReplace")]
        public Input<bool>? AllowReplace { get; set; }

        [Input("annotations")]
        private InputMap<string>? _annotations;
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// The range defining the minimum and maximum number of worker nodes that the managed node group can scale in
        /// </summary>
        [Input("autoScaling")]
        public Input<Inputs.NodePoolAutoScalingArgs>? AutoScaling { get; set; }

        /// <summary>
        /// The compute availability zone in which the nodes should exist
        /// </summary>
        [Input("availabilityZone", required: true)]
        public Input<string> AvailabilityZone { get; set; } = null!;

        /// <summary>
        /// CPU cores count
        /// </summary>
        [Input("coresCount", required: true)]
        public Input<int> CoresCount { get; set; } = null!;

        /// <summary>
        /// CPU Family
        /// </summary>
        [Input("cpuFamily", required: true)]
        public Input<string> CpuFamily { get; set; } = null!;

        /// <summary>
        /// The UUID of the VDC
        /// </summary>
        [Input("datacenterId", required: true)]
        public Input<string> DatacenterId { get; set; } = null!;

        /// <summary>
        /// The UUID of an existing kubernetes cluster
        /// </summary>
        [Input("k8sClusterId", required: true)]
        public Input<string> K8sClusterId { get; set; } = null!;

        /// <summary>
        /// The desired Kubernetes Version. For supported values, please check the API documentation. Downgrades are not supported.
        /// The provider will ignore downgrades of patch level.
        /// </summary>
        [Input("k8sVersion", required: true)]
        public Input<string> K8sVersion { get; set; } = null!;

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("lans")]
        private InputList<Inputs.NodePoolLanArgs>? _lans;

        /// <summary>
        /// A list of Local Area Networks the node pool should be part of
        /// </summary>
        public InputList<Inputs.NodePoolLanArgs> Lans
        {
            get => _lans ?? (_lans = new InputList<Inputs.NodePoolLanArgs>());
            set => _lans = value;
        }

        /// <summary>
        /// A maintenance window comprise of a day of the week and a time for maintenance to be allowed
        /// </summary>
        [Input("maintenanceWindow")]
        public Input<Inputs.NodePoolMaintenanceWindowArgs>? MaintenanceWindow { get; set; }

        /// <summary>
        /// The desired name for the node pool
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The number of nodes in this node pool
        /// </summary>
        [Input("nodeCount", required: true)]
        public Input<int> NodeCount { get; set; } = null!;

        [Input("publicIps")]
        private InputList<string>? _publicIps;

        /// <summary>
        /// A list of fixed IPs. Cannot be set on private clusters.
        /// </summary>
        public InputList<string> PublicIps
        {
            get => _publicIps ?? (_publicIps = new InputList<string>());
            set => _publicIps = value;
        }

        /// <summary>
        /// The amount of RAM in MB
        /// </summary>
        [Input("ramSize", required: true)]
        public Input<int> RamSize { get; set; } = null!;

        /// <summary>
        /// The total allocated storage capacity of a node in GB
        /// </summary>
        [Input("storageSize", required: true)]
        public Input<int> StorageSize { get; set; } = null!;

        /// <summary>
        /// Storage type to use
        /// </summary>
        [Input("storageType", required: true)]
        public Input<string> StorageType { get; set; } = null!;

        public NodePoolArgs()
        {
        }
        public static new NodePoolArgs Empty => new NodePoolArgs();
    }

    public sealed class NodePoolState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When set to true, allows the update of immutable fields by destroying and re-creating the node pool
        /// </summary>
        [Input("allowReplace")]
        public Input<bool>? AllowReplace { get; set; }

        [Input("annotations")]
        private InputMap<string>? _annotations;
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// The range defining the minimum and maximum number of worker nodes that the managed node group can scale in
        /// </summary>
        [Input("autoScaling")]
        public Input<Inputs.NodePoolAutoScalingGetArgs>? AutoScaling { get; set; }

        /// <summary>
        /// The compute availability zone in which the nodes should exist
        /// </summary>
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        /// <summary>
        /// CPU cores count
        /// </summary>
        [Input("coresCount")]
        public Input<int>? CoresCount { get; set; }

        /// <summary>
        /// CPU Family
        /// </summary>
        [Input("cpuFamily")]
        public Input<string>? CpuFamily { get; set; }

        /// <summary>
        /// The UUID of the VDC
        /// </summary>
        [Input("datacenterId")]
        public Input<string>? DatacenterId { get; set; }

        /// <summary>
        /// The UUID of an existing kubernetes cluster
        /// </summary>
        [Input("k8sClusterId")]
        public Input<string>? K8sClusterId { get; set; }

        /// <summary>
        /// The desired Kubernetes Version. For supported values, please check the API documentation. Downgrades are not supported.
        /// The provider will ignore downgrades of patch level.
        /// </summary>
        [Input("k8sVersion")]
        public Input<string>? K8sVersion { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("lans")]
        private InputList<Inputs.NodePoolLanGetArgs>? _lans;

        /// <summary>
        /// A list of Local Area Networks the node pool should be part of
        /// </summary>
        public InputList<Inputs.NodePoolLanGetArgs> Lans
        {
            get => _lans ?? (_lans = new InputList<Inputs.NodePoolLanGetArgs>());
            set => _lans = value;
        }

        /// <summary>
        /// A maintenance window comprise of a day of the week and a time for maintenance to be allowed
        /// </summary>
        [Input("maintenanceWindow")]
        public Input<Inputs.NodePoolMaintenanceWindowGetArgs>? MaintenanceWindow { get; set; }

        /// <summary>
        /// The desired name for the node pool
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The number of nodes in this node pool
        /// </summary>
        [Input("nodeCount")]
        public Input<int>? NodeCount { get; set; }

        [Input("publicIps")]
        private InputList<string>? _publicIps;

        /// <summary>
        /// A list of fixed IPs. Cannot be set on private clusters.
        /// </summary>
        public InputList<string> PublicIps
        {
            get => _publicIps ?? (_publicIps = new InputList<string>());
            set => _publicIps = value;
        }

        /// <summary>
        /// The amount of RAM in MB
        /// </summary>
        [Input("ramSize")]
        public Input<int>? RamSize { get; set; }

        /// <summary>
        /// The total allocated storage capacity of a node in GB
        /// </summary>
        [Input("storageSize")]
        public Input<int>? StorageSize { get; set; }

        /// <summary>
        /// Storage type to use
        /// </summary>
        [Input("storageType")]
        public Input<string>? StorageType { get; set; }

        public NodePoolState()
        {
        }
        public static new NodePoolState Empty => new NodePoolState();
    }
}
