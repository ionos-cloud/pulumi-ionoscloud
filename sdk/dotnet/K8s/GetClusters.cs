// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud.K8s
{
    public static class GetClusters
    {
        /// <summary>
        /// The **k8s_clusters data source** can be used to search for and return existing kubernetes clusters based on filters used.
        /// 
        /// ## Example Usage
        /// 
        /// ### By Name
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.K8s.GetClusters.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Ionoscloud.K8s.Inputs.GetClustersFilterInputArgs
        ///             {
        ///                 Name = "name",
        ///                 Value = "k8sClusterExample",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### By Name and k8s version Family
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example2 = Ionoscloud.K8s.GetClusters.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Ionoscloud.K8s.Inputs.GetClustersFilterInputArgs
        ///             {
        ///                 Name = "name",
        ///                 Value = "k8sClusterExample",
        ///             },
        ///             new Ionoscloud.K8s.Inputs.GetClustersFilterInputArgs
        ///             {
        ///                 Name = "k8s_version",
        ///                 Value = "1.27",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### Retrieve private clusters only, by Name and Cluster State
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Compute.GetServers.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Ionoscloud.Compute.Inputs.GetServersFilterInputArgs
        ///             {
        ///                 Name = "name",
        ///                 Value = "k8sClusterExample",
        ///             },
        ///             new Ionoscloud.Compute.Inputs.GetServersFilterInputArgs
        ///             {
        ///                 Name = "state",
        ///                 Value = "ACTIVE",
        ///             },
        ///             new Ionoscloud.Compute.Inputs.GetServersFilterInputArgs
        ///             {
        ///                 Name = "public",
        ///                 Value = "false",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetClustersResult> InvokeAsync(GetClustersArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClustersResult>("ionoscloud:k8s/getClusters:getClusters", args ?? new GetClustersArgs(), options.WithDefaults());

        /// <summary>
        /// The **k8s_clusters data source** can be used to search for and return existing kubernetes clusters based on filters used.
        /// 
        /// ## Example Usage
        /// 
        /// ### By Name
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.K8s.GetClusters.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Ionoscloud.K8s.Inputs.GetClustersFilterInputArgs
        ///             {
        ///                 Name = "name",
        ///                 Value = "k8sClusterExample",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### By Name and k8s version Family
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example2 = Ionoscloud.K8s.GetClusters.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Ionoscloud.K8s.Inputs.GetClustersFilterInputArgs
        ///             {
        ///                 Name = "name",
        ///                 Value = "k8sClusterExample",
        ///             },
        ///             new Ionoscloud.K8s.Inputs.GetClustersFilterInputArgs
        ///             {
        ///                 Name = "k8s_version",
        ///                 Value = "1.27",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### Retrieve private clusters only, by Name and Cluster State
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Compute.GetServers.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Ionoscloud.Compute.Inputs.GetServersFilterInputArgs
        ///             {
        ///                 Name = "name",
        ///                 Value = "k8sClusterExample",
        ///             },
        ///             new Ionoscloud.Compute.Inputs.GetServersFilterInputArgs
        ///             {
        ///                 Name = "state",
        ///                 Value = "ACTIVE",
        ///             },
        ///             new Ionoscloud.Compute.Inputs.GetServersFilterInputArgs
        ///             {
        ///                 Name = "public",
        ///                 Value = "false",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetClustersResult> Invoke(GetClustersInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClustersResult>("ionoscloud:k8s/getClusters:getClusters", args ?? new GetClustersInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The **k8s_clusters data source** can be used to search for and return existing kubernetes clusters based on filters used.
        /// 
        /// ## Example Usage
        /// 
        /// ### By Name
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.K8s.GetClusters.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Ionoscloud.K8s.Inputs.GetClustersFilterInputArgs
        ///             {
        ///                 Name = "name",
        ///                 Value = "k8sClusterExample",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### By Name and k8s version Family
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example2 = Ionoscloud.K8s.GetClusters.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Ionoscloud.K8s.Inputs.GetClustersFilterInputArgs
        ///             {
        ///                 Name = "name",
        ///                 Value = "k8sClusterExample",
        ///             },
        ///             new Ionoscloud.K8s.Inputs.GetClustersFilterInputArgs
        ///             {
        ///                 Name = "k8s_version",
        ///                 Value = "1.27",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// 
        /// ### Retrieve private clusters only, by Name and Cluster State
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Compute.GetServers.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Ionoscloud.Compute.Inputs.GetServersFilterInputArgs
        ///             {
        ///                 Name = "name",
        ///                 Value = "k8sClusterExample",
        ///             },
        ///             new Ionoscloud.Compute.Inputs.GetServersFilterInputArgs
        ///             {
        ///                 Name = "state",
        ///                 Value = "ACTIVE",
        ///             },
        ///             new Ionoscloud.Compute.Inputs.GetServersFilterInputArgs
        ///             {
        ///                 Name = "public",
        ///                 Value = "false",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetClustersResult> Invoke(GetClustersInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetClustersResult>("ionoscloud:k8s/getClusters:getClusters", args ?? new GetClustersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClustersArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetClustersFilterArgs>? _filters;

        /// <summary>
        /// One or more property name - value pairs to be used in filtering the cluster list by the specified attributes. You can use most of the top level fields from the  k8s_cluster resource **except** those containing other nested structures such as `maintenance_window` or `config`.
        /// 
        /// **NOTE:** Filtering uses partial matching for all types of values. Searching for a cluster using `name:testCluster` will find all clusters who have the `testCluster` substring in their name. This also applies to values for properties that would normally be boolean or numerical.
        /// </summary>
        public List<Inputs.GetClustersFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetClustersFilterArgs>());
            set => _filters = value;
        }

        public GetClustersArgs()
        {
        }
        public static new GetClustersArgs Empty => new GetClustersArgs();
    }

    public sealed class GetClustersInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetClustersFilterInputArgs>? _filters;

        /// <summary>
        /// One or more property name - value pairs to be used in filtering the cluster list by the specified attributes. You can use most of the top level fields from the  k8s_cluster resource **except** those containing other nested structures such as `maintenance_window` or `config`.
        /// 
        /// **NOTE:** Filtering uses partial matching for all types of values. Searching for a cluster using `name:testCluster` will find all clusters who have the `testCluster` substring in their name. This also applies to values for properties that would normally be boolean or numerical.
        /// </summary>
        public InputList<Inputs.GetClustersFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetClustersFilterInputArgs>());
            set => _filters = value;
        }

        public GetClustersInvokeArgs()
        {
        }
        public static new GetClustersInvokeArgs Empty => new GetClustersInvokeArgs();
    }


    [OutputType]
    public sealed class GetClustersResult
    {
        /// <summary>
        /// list of Kubernetes clusters that match the provided filters. The elements of this list are structurally identical to the `k8s_cluster` datasource, which is limited to retrieving only 1 cluster in a single query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClustersClusterResult> Clusters;
        /// <summary>
        /// indicates the number of clusters found and added to the list after the query has been performed with the specified filters.
        /// For a full reference of all the attributes returned, check out documentation
        /// </summary>
        public readonly int Entries;
        public readonly ImmutableArray<Outputs.GetClustersFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetClustersResult(
            ImmutableArray<Outputs.GetClustersClusterResult> clusters,

            int entries,

            ImmutableArray<Outputs.GetClustersFilterResult> filters,

            string id)
        {
            Clusters = clusters;
            Entries = entries;
            Filters = filters;
            Id = id;
        }
    }
}
