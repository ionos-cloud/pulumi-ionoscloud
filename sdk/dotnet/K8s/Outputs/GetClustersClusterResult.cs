// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud.K8s.Outputs
{

    [OutputType]
    public sealed class GetClustersClusterResult
    {
        /// <summary>
        /// Access to the K8s API server is restricted to these CIDRs. Cluster-internal traffic is not affected by this restriction. If no allowlist is specified, access is not restricted. If an IP without subnet mask is provided, the default value will be used: 32 for IPv4 and 128 for IPv6.
        /// </summary>
        public readonly ImmutableArray<string> ApiSubnetAllowLists;
        /// <summary>
        /// A list of available versions for upgrading the cluster
        /// </summary>
        public readonly ImmutableArray<string> AvailableUpgradeVersions;
        public readonly string CaCrt;
        public readonly ImmutableArray<Outputs.GetClustersClusterConfigResult> Configs;
        public readonly string Id;
        public readonly string K8sVersion;
        public readonly string KubeConfig;
        public readonly string Location;
        /// <summary>
        /// A maintenance window comprise of a day of the week and a time for maintenance to be allowed
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClustersClusterMaintenanceWindowResult> MaintenanceWindows;
        public readonly string Name;
        /// <summary>
        /// The NAT gateway IP of the cluster if the cluster is private.
        /// </summary>
        public readonly string NatGatewayIp;
        public readonly ImmutableArray<string> NodePools;
        /// <summary>
        /// The node subnet of the cluster, if the cluster is private.
        /// </summary>
        public readonly string NodeSubnet;
        /// <summary>
        /// The indicator if the cluster is public or private.
        /// </summary>
        public readonly bool Public;
        /// <summary>
        /// List of Object Storage bucket configured for K8s usage. For now it contains only an Object Storage bucket used to store K8s API audit logs.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClustersClusterS3BucketResult> S3Buckets;
        public readonly string Server;
        public readonly string State;
        public readonly ImmutableDictionary<string, string> UserTokens;
        /// <summary>
        /// A list of versions that may be used for node pools under this cluster
        /// </summary>
        public readonly ImmutableArray<string> ViableNodePoolVersions;

        [OutputConstructor]
        private GetClustersClusterResult(
            ImmutableArray<string> apiSubnetAllowLists,

            ImmutableArray<string> availableUpgradeVersions,

            string caCrt,

            ImmutableArray<Outputs.GetClustersClusterConfigResult> configs,

            string id,

            string k8sVersion,

            string kubeConfig,

            string location,

            ImmutableArray<Outputs.GetClustersClusterMaintenanceWindowResult> maintenanceWindows,

            string name,

            string natGatewayIp,

            ImmutableArray<string> nodePools,

            string nodeSubnet,

            bool @public,

            ImmutableArray<Outputs.GetClustersClusterS3BucketResult> s3Buckets,

            string server,

            string state,

            ImmutableDictionary<string, string> userTokens,

            ImmutableArray<string> viableNodePoolVersions)
        {
            ApiSubnetAllowLists = apiSubnetAllowLists;
            AvailableUpgradeVersions = availableUpgradeVersions;
            CaCrt = caCrt;
            Configs = configs;
            Id = id;
            K8sVersion = k8sVersion;
            KubeConfig = kubeConfig;
            Location = location;
            MaintenanceWindows = maintenanceWindows;
            Name = name;
            NatGatewayIp = natGatewayIp;
            NodePools = nodePools;
            NodeSubnet = nodeSubnet;
            Public = @public;
            S3Buckets = s3Buckets;
            Server = server;
            State = state;
            UserTokens = userTokens;
            ViableNodePoolVersions = viableNodePoolVersions;
        }
    }
}
