// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud.Compute
{
    [IonoscloudResourceType("ionoscloud:compute/nic:Nic")]
    public partial class Nic : global::Pulumi.CustomResource
    {
        [Output("datacenterId")]
        public Output<string> DatacenterId { get; private set; } = null!;

        [Output("deviceNumber")]
        public Output<int> DeviceNumber { get; private set; } = null!;

        [Output("dhcp")]
        public Output<bool?> Dhcp { get; private set; } = null!;

        /// <summary>
        /// Indicates whether this NIC receives an IPv6 address through DHCP.
        /// </summary>
        [Output("dhcpv6")]
        public Output<bool?> Dhcpv6 { get; private set; } = null!;

        [Output("firewallActive")]
        public Output<bool?> FirewallActive { get; private set; } = null!;

        [Output("firewallType")]
        public Output<string> FirewallType { get; private set; } = null!;

        /// <summary>
        /// Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture
        /// network information such as source and destination IP addresses, source and destination ports, number of packets, amount
        /// of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your
        /// instances are being accessed.
        /// </summary>
        [Output("flowlog")]
        public Output<Outputs.NicFlowlog?> Flowlog { get; private set; } = null!;

        /// <summary>
        /// Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks,
        /// Passing value null or empty array will assign an IP address automatically.
        /// </summary>
        [Output("ips")]
        public Output<ImmutableArray<string>> Ips { get; private set; } = null!;

        /// <summary>
        /// IPv6 CIDR block assigned to the NIC.
        /// </summary>
        [Output("ipv6CidrBlock")]
        public Output<string> Ipv6CidrBlock { get; private set; } = null!;

        /// <summary>
        /// Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6
        /// CIDR block assigned to the nic.
        /// </summary>
        [Output("ipv6Ips")]
        public Output<ImmutableArray<string>> Ipv6Ips { get; private set; } = null!;

        [Output("lan")]
        public Output<int> Lan { get; private set; } = null!;

        [Output("mac")]
        public Output<string> Mac { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("pciSlot")]
        public Output<int> PciSlot { get; private set; } = null!;

        [Output("serverId")]
        public Output<string> ServerId { get; private set; } = null!;


        /// <summary>
        /// Create a Nic resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Nic(string name, NicArgs args, CustomResourceOptions? options = null)
            : base("ionoscloud:compute/nic:Nic", name, args ?? new NicArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Nic(string name, Input<string> id, NicState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:compute/nic:Nic", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Nic resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Nic Get(string name, Input<string> id, NicState? state = null, CustomResourceOptions? options = null)
        {
            return new Nic(name, id, state, options);
        }
    }

    public sealed class NicArgs : global::Pulumi.ResourceArgs
    {
        [Input("datacenterId", required: true)]
        public Input<string> DatacenterId { get; set; } = null!;

        [Input("dhcp")]
        public Input<bool>? Dhcp { get; set; }

        /// <summary>
        /// Indicates whether this NIC receives an IPv6 address through DHCP.
        /// </summary>
        [Input("dhcpv6")]
        public Input<bool>? Dhcpv6 { get; set; }

        [Input("firewallActive")]
        public Input<bool>? FirewallActive { get; set; }

        [Input("firewallType")]
        public Input<string>? FirewallType { get; set; }

        /// <summary>
        /// Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture
        /// network information such as source and destination IP addresses, source and destination ports, number of packets, amount
        /// of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your
        /// instances are being accessed.
        /// </summary>
        [Input("flowlog")]
        public Input<Inputs.NicFlowlogArgs>? Flowlog { get; set; }

        [Input("ips")]
        private InputList<string>? _ips;

        /// <summary>
        /// Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks,
        /// Passing value null or empty array will assign an IP address automatically.
        /// </summary>
        public InputList<string> Ips
        {
            get => _ips ?? (_ips = new InputList<string>());
            set => _ips = value;
        }

        /// <summary>
        /// IPv6 CIDR block assigned to the NIC.
        /// </summary>
        [Input("ipv6CidrBlock")]
        public Input<string>? Ipv6CidrBlock { get; set; }

        [Input("ipv6Ips")]
        private InputList<string>? _ipv6Ips;

        /// <summary>
        /// Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6
        /// CIDR block assigned to the nic.
        /// </summary>
        public InputList<string> Ipv6Ips
        {
            get => _ipv6Ips ?? (_ipv6Ips = new InputList<string>());
            set => _ipv6Ips = value;
        }

        [Input("lan", required: true)]
        public Input<int> Lan { get; set; } = null!;

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("serverId", required: true)]
        public Input<string> ServerId { get; set; } = null!;

        public NicArgs()
        {
        }
        public static new NicArgs Empty => new NicArgs();
    }

    public sealed class NicState : global::Pulumi.ResourceArgs
    {
        [Input("datacenterId")]
        public Input<string>? DatacenterId { get; set; }

        [Input("deviceNumber")]
        public Input<int>? DeviceNumber { get; set; }

        [Input("dhcp")]
        public Input<bool>? Dhcp { get; set; }

        /// <summary>
        /// Indicates whether this NIC receives an IPv6 address through DHCP.
        /// </summary>
        [Input("dhcpv6")]
        public Input<bool>? Dhcpv6 { get; set; }

        [Input("firewallActive")]
        public Input<bool>? FirewallActive { get; set; }

        [Input("firewallType")]
        public Input<string>? FirewallType { get; set; }

        /// <summary>
        /// Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture
        /// network information such as source and destination IP addresses, source and destination ports, number of packets, amount
        /// of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your
        /// instances are being accessed.
        /// </summary>
        [Input("flowlog")]
        public Input<Inputs.NicFlowlogGetArgs>? Flowlog { get; set; }

        [Input("ips")]
        private InputList<string>? _ips;

        /// <summary>
        /// Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks,
        /// Passing value null or empty array will assign an IP address automatically.
        /// </summary>
        public InputList<string> Ips
        {
            get => _ips ?? (_ips = new InputList<string>());
            set => _ips = value;
        }

        /// <summary>
        /// IPv6 CIDR block assigned to the NIC.
        /// </summary>
        [Input("ipv6CidrBlock")]
        public Input<string>? Ipv6CidrBlock { get; set; }

        [Input("ipv6Ips")]
        private InputList<string>? _ipv6Ips;

        /// <summary>
        /// Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6
        /// CIDR block assigned to the nic.
        /// </summary>
        public InputList<string> Ipv6Ips
        {
            get => _ipv6Ips ?? (_ipv6Ips = new InputList<string>());
            set => _ipv6Ips = value;
        }

        [Input("lan")]
        public Input<int>? Lan { get; set; }

        [Input("mac")]
        public Input<string>? Mac { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("pciSlot")]
        public Input<int>? PciSlot { get; set; }

        [Input("serverId")]
        public Input<string>? ServerId { get; set; }

        public NicState()
        {
        }
        public static new NicState Empty => new NicState();
    }
}
