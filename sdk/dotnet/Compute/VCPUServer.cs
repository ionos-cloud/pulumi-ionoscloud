// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud.Compute
{
    [IonoscloudResourceType("ionoscloud:compute/vCPUServer:VCPUServer")]
    public partial class VCPUServer : global::Pulumi.CustomResource
    {
        [Output("availabilityZone")]
        public Output<string> AvailabilityZone { get; private set; } = null!;

        /// <summary>
        /// The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the
        /// ionoscloud.getImage data source.
        /// </summary>
        [Output("bootCdrom")]
        public Output<string> BootCdrom { get; private set; } = null!;

        [Output("bootImage")]
        public Output<string> BootImage { get; private set; } = null!;

        [Output("bootVolume")]
        public Output<string> BootVolume { get; private set; } = null!;

        [Output("cores")]
        public Output<int> Cores { get; private set; } = null!;

        [Output("cpuFamily")]
        public Output<string> CpuFamily { get; private set; } = null!;

        [Output("datacenterId")]
        public Output<string> DatacenterId { get; private set; } = null!;

        [Output("firewallruleId")]
        public Output<string> FirewallruleId { get; private set; } = null!;

        [Output("firewallruleIds")]
        public Output<ImmutableArray<string>> FirewallruleIds { get; private set; } = null!;

        [Output("imageName")]
        public Output<string> ImageName { get; private set; } = null!;

        [Output("imagePassword")]
        public Output<string> ImagePassword { get; private set; } = null!;

        /// <summary>
        /// A list that contains the IDs for the volumes defined inside the server resource.
        /// </summary>
        [Output("inlineVolumeIds")]
        public Output<ImmutableArray<string>> InlineVolumeIds { get; private set; } = null!;

        [Output("labels")]
        public Output<ImmutableArray<Outputs.VCPUServerLabel>> Labels { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("nic")]
        public Output<Outputs.VCPUServerNic?> Nic { get; private set; } = null!;

        [Output("primaryIp")]
        public Output<string> PrimaryIp { get; private set; } = null!;

        /// <summary>
        /// Id of the primary network interface
        /// </summary>
        [Output("primaryNic")]
        public Output<string> PrimaryNic { get; private set; } = null!;

        [Output("ram")]
        public Output<int> Ram { get; private set; } = null!;

        /// <summary>
        /// Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the
        /// corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH
        /// keys are only supported if a public Linux image is used for the volume creation.
        /// </summary>
        [Output("sshKeys")]
        public Output<ImmutableArray<string>> SshKeys { get; private set; } = null!;

        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Sets the power state of the vcpu server. Possible values: `RUNNING` or `SHUTOFF`.
        /// </summary>
        [Output("vmState")]
        public Output<string> VmState { get; private set; } = null!;

        [Output("volume")]
        public Output<Outputs.VCPUServerVolume> Volume { get; private set; } = null!;


        /// <summary>
        /// Create a VCPUServer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VCPUServer(string name, VCPUServerArgs args, CustomResourceOptions? options = null)
            : base("ionoscloud:compute/vCPUServer:VCPUServer", name, args ?? new VCPUServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VCPUServer(string name, Input<string> id, VCPUServerState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:compute/vCPUServer:VCPUServer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "imagePassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VCPUServer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VCPUServer Get(string name, Input<string> id, VCPUServerState? state = null, CustomResourceOptions? options = null)
        {
            return new VCPUServer(name, id, state, options);
        }
    }

    public sealed class VCPUServerArgs : global::Pulumi.ResourceArgs
    {
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        /// <summary>
        /// The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the
        /// ionoscloud.getImage data source.
        /// </summary>
        [Input("bootCdrom")]
        public Input<string>? BootCdrom { get; set; }

        [Input("bootImage")]
        public Input<string>? BootImage { get; set; }

        [Input("cores", required: true)]
        public Input<int> Cores { get; set; } = null!;

        [Input("datacenterId", required: true)]
        public Input<string> DatacenterId { get; set; } = null!;

        [Input("firewallruleIds")]
        private InputList<string>? _firewallruleIds;
        public InputList<string> FirewallruleIds
        {
            get => _firewallruleIds ?? (_firewallruleIds = new InputList<string>());
            set => _firewallruleIds = value;
        }

        [Input("imageName")]
        public Input<string>? ImageName { get; set; }

        [Input("imagePassword")]
        private Input<string>? _imagePassword;
        public Input<string>? ImagePassword
        {
            get => _imagePassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _imagePassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("labels")]
        private InputList<Inputs.VCPUServerLabelArgs>? _labels;
        public InputList<Inputs.VCPUServerLabelArgs> Labels
        {
            get => _labels ?? (_labels = new InputList<Inputs.VCPUServerLabelArgs>());
            set => _labels = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nic")]
        public Input<Inputs.VCPUServerNicArgs>? Nic { get; set; }

        [Input("ram", required: true)]
        public Input<int> Ram { get; set; } = null!;

        [Input("sshKeys")]
        private InputList<string>? _sshKeys;

        /// <summary>
        /// Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the
        /// corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH
        /// keys are only supported if a public Linux image is used for the volume creation.
        /// </summary>
        public InputList<string> SshKeys
        {
            get => _sshKeys ?? (_sshKeys = new InputList<string>());
            set => _sshKeys = value;
        }

        /// <summary>
        /// Sets the power state of the vcpu server. Possible values: `RUNNING` or `SHUTOFF`.
        /// </summary>
        [Input("vmState")]
        public Input<string>? VmState { get; set; }

        [Input("volume", required: true)]
        public Input<Inputs.VCPUServerVolumeArgs> Volume { get; set; } = null!;

        public VCPUServerArgs()
        {
        }
        public static new VCPUServerArgs Empty => new VCPUServerArgs();
    }

    public sealed class VCPUServerState : global::Pulumi.ResourceArgs
    {
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        /// <summary>
        /// The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the
        /// ionoscloud.getImage data source.
        /// </summary>
        [Input("bootCdrom")]
        public Input<string>? BootCdrom { get; set; }

        [Input("bootImage")]
        public Input<string>? BootImage { get; set; }

        [Input("bootVolume")]
        public Input<string>? BootVolume { get; set; }

        [Input("cores")]
        public Input<int>? Cores { get; set; }

        [Input("cpuFamily")]
        public Input<string>? CpuFamily { get; set; }

        [Input("datacenterId")]
        public Input<string>? DatacenterId { get; set; }

        [Input("firewallruleId")]
        public Input<string>? FirewallruleId { get; set; }

        [Input("firewallruleIds")]
        private InputList<string>? _firewallruleIds;
        public InputList<string> FirewallruleIds
        {
            get => _firewallruleIds ?? (_firewallruleIds = new InputList<string>());
            set => _firewallruleIds = value;
        }

        [Input("imageName")]
        public Input<string>? ImageName { get; set; }

        [Input("imagePassword")]
        private Input<string>? _imagePassword;
        public Input<string>? ImagePassword
        {
            get => _imagePassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _imagePassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("inlineVolumeIds")]
        private InputList<string>? _inlineVolumeIds;

        /// <summary>
        /// A list that contains the IDs for the volumes defined inside the server resource.
        /// </summary>
        public InputList<string> InlineVolumeIds
        {
            get => _inlineVolumeIds ?? (_inlineVolumeIds = new InputList<string>());
            set => _inlineVolumeIds = value;
        }

        [Input("labels")]
        private InputList<Inputs.VCPUServerLabelGetArgs>? _labels;
        public InputList<Inputs.VCPUServerLabelGetArgs> Labels
        {
            get => _labels ?? (_labels = new InputList<Inputs.VCPUServerLabelGetArgs>());
            set => _labels = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nic")]
        public Input<Inputs.VCPUServerNicGetArgs>? Nic { get; set; }

        [Input("primaryIp")]
        public Input<string>? PrimaryIp { get; set; }

        /// <summary>
        /// Id of the primary network interface
        /// </summary>
        [Input("primaryNic")]
        public Input<string>? PrimaryNic { get; set; }

        [Input("ram")]
        public Input<int>? Ram { get; set; }

        [Input("sshKeys")]
        private InputList<string>? _sshKeys;

        /// <summary>
        /// Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the
        /// corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH
        /// keys are only supported if a public Linux image is used for the volume creation.
        /// </summary>
        public InputList<string> SshKeys
        {
            get => _sshKeys ?? (_sshKeys = new InputList<string>());
            set => _sshKeys = value;
        }

        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Sets the power state of the vcpu server. Possible values: `RUNNING` or `SHUTOFF`.
        /// </summary>
        [Input("vmState")]
        public Input<string>? VmState { get; set; }

        [Input("volume")]
        public Input<Inputs.VCPUServerVolumeGetArgs>? Volume { get; set; }

        public VCPUServerState()
        {
        }
        public static new VCPUServerState Empty => new VCPUServerState();
    }
}
