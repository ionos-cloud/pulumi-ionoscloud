// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud.Compute
{
    public static class GetLan
    {
        /// <summary>
        /// The **LAN data source** can be used to search for and return existing lans.
        /// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
        /// When this happens, please refine your search string so that it is specific enough to return only one result.
        /// 
        /// ## Example Usage
        /// 
        /// ### By ID
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Compute.GetLan.Invoke(new()
        ///     {
        ///         DatacenterId = "datacenter_id",
        ///         Id = "lan_id",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### By Name
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Compute.GetLan.Invoke(new()
        ///     {
        ///         DatacenterId = "datacenter_id",
        ///         Name = "Lan Example",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetLanResult> InvokeAsync(GetLanArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLanResult>("ionoscloud:compute/getLan:getLan", args ?? new GetLanArgs(), options.WithDefaults());

        /// <summary>
        /// The **LAN data source** can be used to search for and return existing lans.
        /// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
        /// When this happens, please refine your search string so that it is specific enough to return only one result.
        /// 
        /// ## Example Usage
        /// 
        /// ### By ID
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Compute.GetLan.Invoke(new()
        ///     {
        ///         DatacenterId = "datacenter_id",
        ///         Id = "lan_id",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### By Name
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Compute.GetLan.Invoke(new()
        ///     {
        ///         DatacenterId = "datacenter_id",
        ///         Name = "Lan Example",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLanResult> Invoke(GetLanInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLanResult>("ionoscloud:compute/getLan:getLan", args ?? new GetLanInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The **LAN data source** can be used to search for and return existing lans.
        /// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
        /// When this happens, please refine your search string so that it is specific enough to return only one result.
        /// 
        /// ## Example Usage
        /// 
        /// ### By ID
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Compute.GetLan.Invoke(new()
        ///     {
        ///         DatacenterId = "datacenter_id",
        ///         Id = "lan_id",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### By Name
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ionoscloud = Pulumi.Ionoscloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Ionoscloud.Compute.GetLan.Invoke(new()
        ///     {
        ///         DatacenterId = "datacenter_id",
        ///         Name = "Lan Example",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLanResult> Invoke(GetLanInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetLanResult>("ionoscloud:compute/getLan:getLan", args ?? new GetLanInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLanArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Datacenter's UUID.
        /// </summary>
        [Input("datacenterId", required: true)]
        public string DatacenterId { get; set; } = null!;

        /// <summary>
        /// ID of the lan you want to search for.
        /// 
        /// `datacenter_id` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Name of an existing lan that you want to search for.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetLanArgs()
        {
        }
        public static new GetLanArgs Empty => new GetLanArgs();
    }

    public sealed class GetLanInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Datacenter's UUID.
        /// </summary>
        [Input("datacenterId", required: true)]
        public Input<string> DatacenterId { get; set; } = null!;

        /// <summary>
        /// ID of the lan you want to search for.
        /// 
        /// `datacenter_id` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Name of an existing lan that you want to search for.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetLanInvokeArgs()
        {
        }
        public static new GetLanInvokeArgs Empty => new GetLanInvokeArgs();
    }


    [OutputType]
    public sealed class GetLanResult
    {
        /// <summary>
        /// The ID of lan's Virtual Data Center.
        /// </summary>
        public readonly string DatacenterId;
        /// <summary>
        /// The id of the LAN.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// list of
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLanIpFailoverResult> IpFailovers;
        /// <summary>
        /// For public LANs this property is null, for private LANs it contains the private IPv4 CIDR range.
        /// </summary>
        public readonly string Ipv4CidrBlock;
        /// <summary>
        /// Contains the LAN's /64 IPv6 CIDR block if this LAN is IPv6 enabled.
        /// </summary>
        public readonly string Ipv6CidrBlock;
        /// <summary>
        /// The name of the LAN.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The unique id of a `ionoscloud.compute.Crossconnect` resource, in order.
        /// </summary>
        public readonly string Pcc;
        /// <summary>
        /// Indicates if the LAN faces the public Internet (true) or not (false).
        /// </summary>
        public readonly bool Public;

        [OutputConstructor]
        private GetLanResult(
            string datacenterId,

            string id,

            ImmutableArray<Outputs.GetLanIpFailoverResult> ipFailovers,

            string ipv4CidrBlock,

            string ipv6CidrBlock,

            string name,

            string pcc,

            bool @public)
        {
            DatacenterId = datacenterId;
            Id = id;
            IpFailovers = ipFailovers;
            Ipv4CidrBlock = ipv4CidrBlock;
            Ipv6CidrBlock = ipv6CidrBlock;
            Name = name;
            Pcc = pcc;
            Public = @public;
        }
    }
}
