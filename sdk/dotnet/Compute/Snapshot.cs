// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud.Compute
{
    [IonoscloudResourceType("ionoscloud:compute/snapshot:Snapshot")]
    public partial class Snapshot : global::Pulumi.CustomResource
    {
        [Output("cpuHotPlug")]
        public Output<bool> CpuHotPlug { get; private set; } = null!;

        [Output("cpuHotUnplug")]
        public Output<bool> CpuHotUnplug { get; private set; } = null!;

        [Output("datacenterId")]
        public Output<string> DatacenterId { get; private set; } = null!;

        /// <summary>
        /// Human readable description
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("discScsiHotPlug")]
        public Output<bool> DiscScsiHotPlug { get; private set; } = null!;

        [Output("discScsiHotUnplug")]
        public Output<bool> DiscScsiHotUnplug { get; private set; } = null!;

        [Output("discVirtioHotPlug")]
        public Output<bool> DiscVirtioHotPlug { get; private set; } = null!;

        [Output("discVirtioHotUnplug")]
        public Output<bool> DiscVirtioHotUnplug { get; private set; } = null!;

        /// <summary>
        /// OS type of this Snapshot
        /// </summary>
        [Output("licenceType")]
        public Output<string> LicenceType { get; private set; } = null!;

        /// <summary>
        /// Location of that image/snapshot
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// A name of that resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("nicHotPlug")]
        public Output<bool> NicHotPlug { get; private set; } = null!;

        [Output("nicHotUnplug")]
        public Output<bool> NicHotUnplug { get; private set; } = null!;

        [Output("ramHotPlug")]
        public Output<bool> RamHotPlug { get; private set; } = null!;

        [Output("ramHotUnplug")]
        public Output<bool> RamHotUnplug { get; private set; } = null!;

        /// <summary>
        /// Boolean value representing if the snapshot requires extra protection e.g. two factor protection
        /// </summary>
        [Output("secAuthProtection")]
        public Output<bool> SecAuthProtection { get; private set; } = null!;

        /// <summary>
        /// The size of the image in GB
        /// </summary>
        [Output("size")]
        public Output<int> Size { get; private set; } = null!;

        [Output("volumeId")]
        public Output<string> VolumeId { get; private set; } = null!;


        /// <summary>
        /// Create a Snapshot resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Snapshot(string name, SnapshotArgs args, CustomResourceOptions? options = null)
            : base("ionoscloud:compute/snapshot:Snapshot", name, args ?? new SnapshotArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Snapshot(string name, Input<string> id, SnapshotState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:compute/snapshot:Snapshot", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Snapshot resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Snapshot Get(string name, Input<string> id, SnapshotState? state = null, CustomResourceOptions? options = null)
        {
            return new Snapshot(name, id, state, options);
        }
    }

    public sealed class SnapshotArgs : global::Pulumi.ResourceArgs
    {
        [Input("cpuHotPlug")]
        public Input<bool>? CpuHotPlug { get; set; }

        [Input("datacenterId", required: true)]
        public Input<string> DatacenterId { get; set; } = null!;

        /// <summary>
        /// Human readable description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("discVirtioHotPlug")]
        public Input<bool>? DiscVirtioHotPlug { get; set; }

        [Input("discVirtioHotUnplug")]
        public Input<bool>? DiscVirtioHotUnplug { get; set; }

        /// <summary>
        /// OS type of this Snapshot
        /// </summary>
        [Input("licenceType")]
        public Input<string>? LicenceType { get; set; }

        /// <summary>
        /// A name of that resource
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nicHotPlug")]
        public Input<bool>? NicHotPlug { get; set; }

        [Input("nicHotUnplug")]
        public Input<bool>? NicHotUnplug { get; set; }

        [Input("ramHotPlug")]
        public Input<bool>? RamHotPlug { get; set; }

        /// <summary>
        /// Boolean value representing if the snapshot requires extra protection e.g. two factor protection
        /// </summary>
        [Input("secAuthProtection")]
        public Input<bool>? SecAuthProtection { get; set; }

        [Input("volumeId", required: true)]
        public Input<string> VolumeId { get; set; } = null!;

        public SnapshotArgs()
        {
        }
        public static new SnapshotArgs Empty => new SnapshotArgs();
    }

    public sealed class SnapshotState : global::Pulumi.ResourceArgs
    {
        [Input("cpuHotPlug")]
        public Input<bool>? CpuHotPlug { get; set; }

        [Input("cpuHotUnplug")]
        public Input<bool>? CpuHotUnplug { get; set; }

        [Input("datacenterId")]
        public Input<string>? DatacenterId { get; set; }

        /// <summary>
        /// Human readable description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("discScsiHotPlug")]
        public Input<bool>? DiscScsiHotPlug { get; set; }

        [Input("discScsiHotUnplug")]
        public Input<bool>? DiscScsiHotUnplug { get; set; }

        [Input("discVirtioHotPlug")]
        public Input<bool>? DiscVirtioHotPlug { get; set; }

        [Input("discVirtioHotUnplug")]
        public Input<bool>? DiscVirtioHotUnplug { get; set; }

        /// <summary>
        /// OS type of this Snapshot
        /// </summary>
        [Input("licenceType")]
        public Input<string>? LicenceType { get; set; }

        /// <summary>
        /// Location of that image/snapshot
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// A name of that resource
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nicHotPlug")]
        public Input<bool>? NicHotPlug { get; set; }

        [Input("nicHotUnplug")]
        public Input<bool>? NicHotUnplug { get; set; }

        [Input("ramHotPlug")]
        public Input<bool>? RamHotPlug { get; set; }

        [Input("ramHotUnplug")]
        public Input<bool>? RamHotUnplug { get; set; }

        /// <summary>
        /// Boolean value representing if the snapshot requires extra protection e.g. two factor protection
        /// </summary>
        [Input("secAuthProtection")]
        public Input<bool>? SecAuthProtection { get; set; }

        /// <summary>
        /// The size of the image in GB
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        [Input("volumeId")]
        public Input<string>? VolumeId { get; set; }

        public SnapshotState()
        {
        }
        public static new SnapshotState Empty => new SnapshotState();
    }
}
