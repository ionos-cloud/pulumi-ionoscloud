// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud.Compute.Outputs
{

    [OutputType]
    public sealed class ServerVolume
    {
        /// <summary>
        /// [string] The availability zone in which the server should exist. E.g: `AUTO`, `ZONE_1`, `ZONE_2`. This property is immutable.
        /// </summary>
        public readonly string? AvailabilityZone;
        /// <summary>
        /// The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
        /// </summary>
        public readonly string? BackupUnitId;
        /// <summary>
        /// The UUID of the attached server.
        /// </summary>
        public readonly string? BootServer;
        public readonly string? Bus;
        public readonly bool? CpuHotPlug;
        public readonly int? DeviceNumber;
        public readonly bool? DiscVirtioHotPlug;
        public readonly bool? DiscVirtioHotUnplug;
        public readonly string DiskType;
        /// <summary>
        /// [string] Required if `ssh_key_path` is not provided.
        /// </summary>
        public readonly string? ImagePassword;
        /// <summary>
        /// [string] Sets the OS type of the server.
        /// </summary>
        public readonly string? LicenceType;
        /// <summary>
        /// [string] The name of the server.
        /// </summary>
        public readonly string? Name;
        public readonly bool? NicHotPlug;
        public readonly bool? NicHotUnplug;
        public readonly int? PciSlot;
        public readonly bool? RamHotPlug;
        /// <summary>
        /// The size of the volume in GB.
        /// </summary>
        public readonly int? Size;
        /// <summary>
        /// [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images.  Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. Does not support `~` expansion to homedir in the given path. This property is immutable.
        /// </summary>
        public readonly ImmutableArray<string> SshKeyPaths;
        /// <summary>
        /// [list] Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is used for the volume creation. Does not support `~` expansion to homedir in the given path.
        /// </summary>
        public readonly ImmutableArray<string> SshKeys;
        /// <summary>
        /// The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' that has cloud-init compatibility in conjunction with this property.
        /// </summary>
        public readonly string? UserData;

        [OutputConstructor]
        private ServerVolume(
            string? availabilityZone,

            string? backupUnitId,

            string? bootServer,

            string? bus,

            bool? cpuHotPlug,

            int? deviceNumber,

            bool? discVirtioHotPlug,

            bool? discVirtioHotUnplug,

            string diskType,

            string? imagePassword,

            string? licenceType,

            string? name,

            bool? nicHotPlug,

            bool? nicHotUnplug,

            int? pciSlot,

            bool? ramHotPlug,

            int? size,

            ImmutableArray<string> sshKeyPaths,

            ImmutableArray<string> sshKeys,

            string? userData)
        {
            AvailabilityZone = availabilityZone;
            BackupUnitId = backupUnitId;
            BootServer = bootServer;
            Bus = bus;
            CpuHotPlug = cpuHotPlug;
            DeviceNumber = deviceNumber;
            DiscVirtioHotPlug = discVirtioHotPlug;
            DiscVirtioHotUnplug = discVirtioHotUnplug;
            DiskType = diskType;
            ImagePassword = imagePassword;
            LicenceType = licenceType;
            Name = name;
            NicHotPlug = nicHotPlug;
            NicHotUnplug = nicHotUnplug;
            PciSlot = pciSlot;
            RamHotPlug = ramHotPlug;
            Size = size;
            SshKeyPaths = sshKeyPaths;
            SshKeys = sshKeys;
            UserData = userData;
        }
    }
}
