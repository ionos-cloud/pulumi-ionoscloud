// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud.Compute
{
    public static class GetServer
    {
        public static Task<GetServerResult> InvokeAsync(GetServerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServerResult>("ionoscloud:compute/getServer:getServer", args ?? new GetServerArgs(), options.WithDefaults());

        public static Output<GetServerResult> Invoke(GetServerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerResult>("ionoscloud:compute/getServer:getServer", args ?? new GetServerInvokeArgs(), options.WithDefaults());

        public static Output<GetServerResult> Invoke(GetServerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerResult>("ionoscloud:compute/getServer:getServer", args ?? new GetServerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServerArgs : global::Pulumi.InvokeArgs
    {
        [Input("datacenterId", required: true)]
        public string DatacenterId { get; set; } = null!;

        [Input("id")]
        public string? Id { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("templateUuid")]
        public string? TemplateUuid { get; set; }

        [Input("type")]
        public string? Type { get; set; }

        public GetServerArgs()
        {
        }
        public static new GetServerArgs Empty => new GetServerArgs();
    }

    public sealed class GetServerInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("datacenterId", required: true)]
        public Input<string> DatacenterId { get; set; } = null!;

        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("templateUuid")]
        public Input<string>? TemplateUuid { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetServerInvokeArgs()
        {
        }
        public static new GetServerInvokeArgs Empty => new GetServerInvokeArgs();
    }


    [OutputType]
    public sealed class GetServerResult
    {
        public readonly string AvailabilityZone;
        public readonly string BootCdrom;
        public readonly string BootImage;
        public readonly string BootVolume;
        public readonly ImmutableArray<Outputs.GetServerCdromResult> Cdroms;
        public readonly int Cores;
        public readonly string CpuFamily;
        public readonly string DatacenterId;
        public readonly string? Id;
        public readonly ImmutableArray<Outputs.GetServerLabelResult> Labels;
        public readonly string? Name;
        public readonly ImmutableArray<Outputs.GetServerNicResult> Nics;
        public readonly int Ram;
        public readonly string? TemplateUuid;
        public readonly string Token;
        public readonly string Type;
        public readonly string VmState;
        public readonly ImmutableArray<Outputs.GetServerVolumeResult> Volumes;

        [OutputConstructor]
        private GetServerResult(
            string availabilityZone,

            string bootCdrom,

            string bootImage,

            string bootVolume,

            ImmutableArray<Outputs.GetServerCdromResult> cdroms,

            int cores,

            string cpuFamily,

            string datacenterId,

            string? id,

            ImmutableArray<Outputs.GetServerLabelResult> labels,

            string? name,

            ImmutableArray<Outputs.GetServerNicResult> nics,

            int ram,

            string? templateUuid,

            string token,

            string type,

            string vmState,

            ImmutableArray<Outputs.GetServerVolumeResult> volumes)
        {
            AvailabilityZone = availabilityZone;
            BootCdrom = bootCdrom;
            BootImage = bootImage;
            BootVolume = bootVolume;
            Cdroms = cdroms;
            Cores = cores;
            CpuFamily = cpuFamily;
            DatacenterId = datacenterId;
            Id = id;
            Labels = labels;
            Name = name;
            Nics = nics;
            Ram = ram;
            TemplateUuid = templateUuid;
            Token = token;
            Type = type;
            VmState = vmState;
            Volumes = volumes;
        }
    }
}
