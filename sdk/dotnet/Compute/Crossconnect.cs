// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud.Compute
{
    [IonoscloudResourceType("ionoscloud:compute/crossconnect:Crossconnect")]
    public partial class Crossconnect : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list containing all the connectable datacenters
        /// </summary>
        [Output("connectableDatacenters")]
        public Output<ImmutableArray<Outputs.CrossconnectConnectableDatacenter>> ConnectableDatacenters { get; private set; } = null!;

        /// <summary>
        /// The desired description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The desired name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A list containing the details of all cross-connected datacenters
        /// </summary>
        [Output("peers")]
        public Output<ImmutableArray<Outputs.CrossconnectPeer>> Peers { get; private set; } = null!;


        /// <summary>
        /// Create a Crossconnect resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Crossconnect(string name, CrossconnectArgs? args = null, CustomResourceOptions? options = null)
            : base("ionoscloud:compute/crossconnect:Crossconnect", name, args ?? new CrossconnectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Crossconnect(string name, Input<string> id, CrossconnectState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:compute/crossconnect:Crossconnect", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Crossconnect resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Crossconnect Get(string name, Input<string> id, CrossconnectState? state = null, CustomResourceOptions? options = null)
        {
            return new Crossconnect(name, id, state, options);
        }
    }

    public sealed class CrossconnectArgs : global::Pulumi.ResourceArgs
    {
        [Input("connectableDatacenters")]
        private InputList<Inputs.CrossconnectConnectableDatacenterArgs>? _connectableDatacenters;

        /// <summary>
        /// A list containing all the connectable datacenters
        /// </summary>
        public InputList<Inputs.CrossconnectConnectableDatacenterArgs> ConnectableDatacenters
        {
            get => _connectableDatacenters ?? (_connectableDatacenters = new InputList<Inputs.CrossconnectConnectableDatacenterArgs>());
            set => _connectableDatacenters = value;
        }

        /// <summary>
        /// The desired description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The desired name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("peers")]
        private InputList<Inputs.CrossconnectPeerArgs>? _peers;

        /// <summary>
        /// A list containing the details of all cross-connected datacenters
        /// </summary>
        public InputList<Inputs.CrossconnectPeerArgs> Peers
        {
            get => _peers ?? (_peers = new InputList<Inputs.CrossconnectPeerArgs>());
            set => _peers = value;
        }

        public CrossconnectArgs()
        {
        }
        public static new CrossconnectArgs Empty => new CrossconnectArgs();
    }

    public sealed class CrossconnectState : global::Pulumi.ResourceArgs
    {
        [Input("connectableDatacenters")]
        private InputList<Inputs.CrossconnectConnectableDatacenterGetArgs>? _connectableDatacenters;

        /// <summary>
        /// A list containing all the connectable datacenters
        /// </summary>
        public InputList<Inputs.CrossconnectConnectableDatacenterGetArgs> ConnectableDatacenters
        {
            get => _connectableDatacenters ?? (_connectableDatacenters = new InputList<Inputs.CrossconnectConnectableDatacenterGetArgs>());
            set => _connectableDatacenters = value;
        }

        /// <summary>
        /// The desired description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The desired name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("peers")]
        private InputList<Inputs.CrossconnectPeerGetArgs>? _peers;

        /// <summary>
        /// A list containing the details of all cross-connected datacenters
        /// </summary>
        public InputList<Inputs.CrossconnectPeerGetArgs> Peers
        {
            get => _peers ?? (_peers = new InputList<Inputs.CrossconnectPeerGetArgs>());
            set => _peers = value;
        }

        public CrossconnectState()
        {
        }
        public static new CrossconnectState Empty => new CrossconnectState();
    }
}
