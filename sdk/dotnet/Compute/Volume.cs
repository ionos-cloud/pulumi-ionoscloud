// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud.Compute
{
    [IonoscloudResourceType("ionoscloud:compute/volume:Volume")]
    public partial class Volume : global::Pulumi.CustomResource
    {
        [Output("availabilityZone")]
        public Output<string> AvailabilityZone { get; private set; } = null!;

        [Output("backupUnitId")]
        public Output<string> BackupUnitId { get; private set; } = null!;

        /// <summary>
        /// The UUID of the attached server.
        /// </summary>
        [Output("bootServer")]
        public Output<string> BootServer { get; private set; } = null!;

        [Output("bus")]
        public Output<string> Bus { get; private set; } = null!;

        [Output("cpuHotPlug")]
        public Output<bool> CpuHotPlug { get; private set; } = null!;

        [Output("datacenterId")]
        public Output<string> DatacenterId { get; private set; } = null!;

        [Output("deviceNumber")]
        public Output<int> DeviceNumber { get; private set; } = null!;

        [Output("discVirtioHotPlug")]
        public Output<bool> DiscVirtioHotPlug { get; private set; } = null!;

        [Output("discVirtioHotUnplug")]
        public Output<bool> DiscVirtioHotUnplug { get; private set; } = null!;

        [Output("diskType")]
        public Output<string> DiskType { get; private set; } = null!;

        [Output("image")]
        public Output<string> Image { get; private set; } = null!;

        [Output("imageId")]
        public Output<string> ImageId { get; private set; } = null!;

        [Output("imageName")]
        public Output<string?> ImageName { get; private set; } = null!;

        [Output("imagePassword")]
        public Output<string?> ImagePassword { get; private set; } = null!;

        [Output("licenceType")]
        public Output<string> LicenceType { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("nicHotPlug")]
        public Output<bool> NicHotPlug { get; private set; } = null!;

        [Output("nicHotUnplug")]
        public Output<bool> NicHotUnplug { get; private set; } = null!;

        [Output("pciSlot")]
        public Output<int> PciSlot { get; private set; } = null!;

        [Output("ramHotPlug")]
        public Output<bool> RamHotPlug { get; private set; } = null!;

        [Output("serverId")]
        public Output<string> ServerId { get; private set; } = null!;

        [Output("size")]
        public Output<int> Size { get; private set; } = null!;

        [Output("sshKeyPaths")]
        public Output<ImmutableArray<string>> SshKeyPaths { get; private set; } = null!;

        [Output("sshKeys")]
        public Output<ImmutableArray<string>> SshKeys { get; private set; } = null!;

        [Output("sshkey")]
        public Output<string> Sshkey { get; private set; } = null!;

        [Output("userData")]
        public Output<string> UserData { get; private set; } = null!;


        /// <summary>
        /// Create a Volume resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Volume(string name, VolumeArgs args, CustomResourceOptions? options = null)
            : base("ionoscloud:compute/volume:Volume", name, args ?? new VolumeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Volume(string name, Input<string> id, VolumeState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:compute/volume:Volume", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Volume resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Volume Get(string name, Input<string> id, VolumeState? state = null, CustomResourceOptions? options = null)
        {
            return new Volume(name, id, state, options);
        }
    }

    public sealed class VolumeArgs : global::Pulumi.ResourceArgs
    {
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        [Input("backupUnitId")]
        public Input<string>? BackupUnitId { get; set; }

        [Input("bus")]
        public Input<string>? Bus { get; set; }

        [Input("datacenterId", required: true)]
        public Input<string> DatacenterId { get; set; } = null!;

        [Input("diskType", required: true)]
        public Input<string> DiskType { get; set; } = null!;

        [Input("imageName")]
        public Input<string>? ImageName { get; set; }

        [Input("imagePassword")]
        public Input<string>? ImagePassword { get; set; }

        [Input("licenceType")]
        public Input<string>? LicenceType { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("serverId", required: true)]
        public Input<string> ServerId { get; set; } = null!;

        [Input("size", required: true)]
        public Input<int> Size { get; set; } = null!;

        [Input("sshKeyPaths")]
        private InputList<string>? _sshKeyPaths;
        public InputList<string> SshKeyPaths
        {
            get => _sshKeyPaths ?? (_sshKeyPaths = new InputList<string>());
            set => _sshKeyPaths = value;
        }

        [Input("sshKeys")]
        private InputList<string>? _sshKeys;
        public InputList<string> SshKeys
        {
            get => _sshKeys ?? (_sshKeys = new InputList<string>());
            set => _sshKeys = value;
        }

        [Input("userData")]
        public Input<string>? UserData { get; set; }

        public VolumeArgs()
        {
        }
        public static new VolumeArgs Empty => new VolumeArgs();
    }

    public sealed class VolumeState : global::Pulumi.ResourceArgs
    {
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        [Input("backupUnitId")]
        public Input<string>? BackupUnitId { get; set; }

        /// <summary>
        /// The UUID of the attached server.
        /// </summary>
        [Input("bootServer")]
        public Input<string>? BootServer { get; set; }

        [Input("bus")]
        public Input<string>? Bus { get; set; }

        [Input("cpuHotPlug")]
        public Input<bool>? CpuHotPlug { get; set; }

        [Input("datacenterId")]
        public Input<string>? DatacenterId { get; set; }

        [Input("deviceNumber")]
        public Input<int>? DeviceNumber { get; set; }

        [Input("discVirtioHotPlug")]
        public Input<bool>? DiscVirtioHotPlug { get; set; }

        [Input("discVirtioHotUnplug")]
        public Input<bool>? DiscVirtioHotUnplug { get; set; }

        [Input("diskType")]
        public Input<string>? DiskType { get; set; }

        [Input("image")]
        public Input<string>? Image { get; set; }

        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        [Input("imageName")]
        public Input<string>? ImageName { get; set; }

        [Input("imagePassword")]
        public Input<string>? ImagePassword { get; set; }

        [Input("licenceType")]
        public Input<string>? LicenceType { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nicHotPlug")]
        public Input<bool>? NicHotPlug { get; set; }

        [Input("nicHotUnplug")]
        public Input<bool>? NicHotUnplug { get; set; }

        [Input("pciSlot")]
        public Input<int>? PciSlot { get; set; }

        [Input("ramHotPlug")]
        public Input<bool>? RamHotPlug { get; set; }

        [Input("serverId")]
        public Input<string>? ServerId { get; set; }

        [Input("size")]
        public Input<int>? Size { get; set; }

        [Input("sshKeyPaths")]
        private InputList<string>? _sshKeyPaths;
        public InputList<string> SshKeyPaths
        {
            get => _sshKeyPaths ?? (_sshKeyPaths = new InputList<string>());
            set => _sshKeyPaths = value;
        }

        [Input("sshKeys")]
        private InputList<string>? _sshKeys;
        public InputList<string> SshKeys
        {
            get => _sshKeys ?? (_sshKeys = new InputList<string>());
            set => _sshKeys = value;
        }

        [Input("sshkey")]
        public Input<string>? Sshkey { get; set; }

        [Input("userData")]
        public Input<string>? UserData { get; set; }

        public VolumeState()
        {
        }
        public static new VolumeState Empty => new VolumeState();
    }
}
