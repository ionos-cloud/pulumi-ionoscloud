// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud.Compute
{
    /// <summary>
    /// Manages a **Cube Server** on IonosCloud.
    /// 
    /// ## Example Usage
    /// 
    /// This resource will create an operational server. After this section completes, the provisioner can be called.
    /// 
    /// ### CUBE Server
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ionoscloud = Pulumi.Ionoscloud;
    /// using Random = Pulumi.Random;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = Ionoscloud.Compute.GetTemplate.Invoke(new()
    ///     {
    ///         Name = "Basic Cube XS",
    ///     });
    /// 
    ///     var exampleDatacenter = new Ionoscloud.Compute.Datacenter("example", new()
    ///     {
    ///         Name = "Datacenter Example",
    ///         Location = "de/txl",
    ///     });
    /// 
    ///     var exampleLan = new Ionoscloud.Compute.Lan("example", new()
    ///     {
    ///         DatacenterId = exampleDatacenter.Id,
    ///         Public = true,
    ///         Name = "Lan Example",
    ///     });
    /// 
    ///     var serverImagePassword = new Random.Index.Password("server_image_password", new()
    ///     {
    ///         Length = 16,
    ///         Special = false,
    ///     });
    /// 
    ///     var exampleCubeServer = new Ionoscloud.Compute.CubeServer("example", new()
    ///     {
    ///         Name = "Server Example",
    ///         AvailabilityZone = "ZONE_2",
    ///         ImageName = "ubuntu:latest",
    ///         TemplateUuid = example.Apply(getTemplateResult =&gt; getTemplateResult.Id),
    ///         ImagePassword = serverImagePassword.Result,
    ///         DatacenterId = exampleDatacenter.Id,
    ///         Volume = new Ionoscloud.Compute.Inputs.CubeServerVolumeArgs
    ///         {
    ///             Name = "Volume Example",
    ///             LicenceType = "LINUX",
    ///             DiskType = "DAS",
    ///         },
    ///         Nic = new Ionoscloud.Compute.Inputs.CubeServerNicArgs
    ///         {
    ///             Lan = exampleLan.Id,
    ///             Name = "Nic Example",
    ///             Dhcp = true,
    ///             FirewallActive = true,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### With IPv6 Enabled
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ionoscloud = Pulumi.Ionoscloud;
    /// using Random = Pulumi.Random;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = Ionoscloud.Compute.GetTemplate.Invoke(new()
    ///     {
    ///         Name = "Basic Cube XS",
    ///     });
    /// 
    ///     var exampleDatacenter = new Ionoscloud.Compute.Datacenter("example", new()
    ///     {
    ///         Name = "Datacenter Example",
    ///         Location = "de/txl",
    ///     });
    /// 
    ///     var webserverIpblock = new Ionoscloud.Compute.IPBlock("webserver_ipblock", new()
    ///     {
    ///         Location = "de/txl",
    ///         Size = 4,
    ///         Name = "webserver_ipblock",
    ///     });
    /// 
    ///     var exampleLan = new Ionoscloud.Compute.Lan("example", new()
    ///     {
    ///         DatacenterId = exampleDatacenter.Id,
    ///         Public = true,
    ///         Name = "Lan Example",
    ///         Ipv6CidrBlock = "ipv6_cidr_block_from_dc",
    ///     });
    /// 
    ///     var serverImagePassword = new Random.Index.Password("server_image_password", new()
    ///     {
    ///         Length = 16,
    ///         Special = false,
    ///     });
    /// 
    ///     var exampleCubeServer = new Ionoscloud.Compute.CubeServer("example", new()
    ///     {
    ///         Name = "Server Example",
    ///         AvailabilityZone = "AUTO",
    ///         ImageName = "ubuntu:latest",
    ///         TemplateUuid = example.Apply(getTemplateResult =&gt; getTemplateResult.Id),
    ///         ImagePassword = serverImagePassword.Result,
    ///         DatacenterId = exampleDatacenter.Id,
    ///         Volume = new Ionoscloud.Compute.Inputs.CubeServerVolumeArgs
    ///         {
    ///             Name = "Volume Example",
    ///             LicenceType = "LINUX",
    ///             DiskType = "DAS",
    ///         },
    ///         Nic = new Ionoscloud.Compute.Inputs.CubeServerNicArgs
    ///         {
    ///             Lan = exampleLan.Id,
    ///             Name = "Nic Example",
    ///             Dhcp = true,
    ///             Ips = new[]
    ///             {
    ///                 webserverIpblock.Ips.Apply(ips =&gt; ips[0]),
    ///                 webserverIpblock.Ips.Apply(ips =&gt; ips[1]),
    ///             },
    ///             Dhcpv6 = false,
    ///             Ipv6CidrBlock = "ipv6_cidr_block_from_lan",
    ///             Ipv6Ips = new[]
    ///             {
    ///                 "ipv6_ip1",
    ///                 "ipv6_ip2",
    ///                 "ipv6_ip3",
    ///             },
    ///             FirewallActive = true,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Notes
    /// 
    /// Please note that for any secondary volume, you need to set the **licence_type** property to **UNKNOWN**
    /// 
    /// ## Import
    /// 
    /// Resource Server can be imported using the `resource id` and the `datacenter id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import ionoscloud:compute/cubeServer:CubeServer myserver datacenter uuid/server uuid
    /// ```
    /// </summary>
    [IonoscloudResourceType("ionoscloud:compute/cubeServer:CubeServer")]
    public partial class CubeServer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the server.
        /// 
        /// ⚠️ **_Warning: `allow_replace` - lets you update immutable fields, but it first destroys and then re-creates the server in order to do it. This field should be used with care, understanding the risks._**
        /// 
        /// &gt; **⚠ WARNING**
        /// &gt;
        /// &gt; Image_name under volume level is deprecated, please use image_name under server level
        /// 
        /// 
        /// &gt; **⚠ WARNING**
        /// &gt;
        /// &gt; For creating a **CUBE** server, you can not set `volume.size` argument.
        /// &gt;
        /// </summary>
        [Output("allowReplace")]
        public Output<bool?> AllowReplace { get; private set; } = null!;

        /// <summary>
        /// [string] The availability zone in which the server should exist. This property is immutable.
        /// </summary>
        [Output("availabilityZone")]
        public Output<string> AvailabilityZone { get; private set; } = null!;

        /// <summary>
        /// ***DEPRECATED*** Please refer to ionoscloud.compute.BootDeviceSelection (Optional)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the ionoscloud.compute.getImage data source.
        /// </summary>
        [Output("bootCdrom")]
        public Output<string> BootCdrom { get; private set; } = null!;

        /// <summary>
        /// [string] The image or snapshot UUID / name. May also be an image alias. It is required if `licence_type` is not provided.
        /// </summary>
        [Output("bootImage")]
        public Output<string> BootImage { get; private set; } = null!;

        /// <summary>
        /// The associated boot volume.
        /// </summary>
        [Output("bootVolume")]
        public Output<string> BootVolume { get; private set; } = null!;

        /// <summary>
        /// [string] The ID of a Virtual Data Center.
        /// </summary>
        [Output("datacenterId")]
        public Output<string> DatacenterId { get; private set; } = null!;

        /// <summary>
        /// The associated firewall rule.
        /// </summary>
        [Output("firewallruleId")]
        public Output<string> FirewallruleId { get; private set; } = null!;

        /// <summary>
        /// (Computed) The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
        /// </summary>
        [Output("hostname")]
        public Output<string> Hostname { get; private set; } = null!;

        /// <summary>
        /// [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licence_type` is not provided. Attribute is immutable.
        /// </summary>
        [Output("imageName")]
        public Output<string> ImageName { get; private set; } = null!;

        /// <summary>
        /// [string] Required if `ssh_key_path` is not provided.
        /// </summary>
        [Output("imagePassword")]
        public Output<string> ImagePassword { get; private set; } = null!;

        /// <summary>
        /// A list that contains the IDs for the volumes defined inside the cube server resource.
        /// </summary>
        [Output("inlineVolumeIds")]
        public Output<ImmutableArray<string>> InlineVolumeIds { get; private set; } = null!;

        /// <summary>
        /// [string] The name of the server.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// See the Nic section.
        /// </summary>
        [Output("nic")]
        public Output<Outputs.CubeServerNic> Nic { get; private set; } = null!;

        /// <summary>
        /// The associated IP address.
        /// </summary>
        [Output("primaryIp")]
        public Output<string> PrimaryIp { get; private set; } = null!;

        /// <summary>
        /// The associated NIC.
        /// </summary>
        [Output("primaryNic")]
        public Output<string> PrimaryNic { get; private set; } = null!;

        /// <summary>
        /// The list of Security Group IDs for the resource.
        /// </summary>
        [Output("securityGroupsIds")]
        public Output<ImmutableArray<string>> SecurityGroupsIds { get; private set; } = null!;

        /// <summary>
        /// [list] List of paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Required for IonosCloud Linux images. Required if `image_password` is not provided.
        /// </summary>
        [Output("sshKeyPaths")]
        public Output<ImmutableArray<string>> SshKeyPaths { get; private set; } = null!;

        /// <summary>
        /// [string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
        /// </summary>
        [Output("templateUuid")]
        public Output<string> TemplateUuid { get; private set; } = null!;

        /// <summary>
        /// [string] Sets the power state of the cube server. E.g: `RUNNING` or `SUSPENDED`.
        /// </summary>
        [Output("vmState")]
        public Output<string> VmState { get; private set; } = null!;

        /// <summary>
        /// See the Volume section.
        /// </summary>
        [Output("volume")]
        public Output<Outputs.CubeServerVolume> Volume { get; private set; } = null!;


        /// <summary>
        /// Create a CubeServer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CubeServer(string name, CubeServerArgs args, CustomResourceOptions? options = null)
            : base("ionoscloud:compute/cubeServer:CubeServer", name, args ?? new CubeServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CubeServer(string name, Input<string> id, CubeServerState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:compute/cubeServer:CubeServer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "imagePassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CubeServer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CubeServer Get(string name, Input<string> id, CubeServerState? state = null, CustomResourceOptions? options = null)
        {
            return new CubeServer(name, id, state, options);
        }
    }

    public sealed class CubeServerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the server.
        /// 
        /// ⚠️ **_Warning: `allow_replace` - lets you update immutable fields, but it first destroys and then re-creates the server in order to do it. This field should be used with care, understanding the risks._**
        /// 
        /// &gt; **⚠ WARNING**
        /// &gt;
        /// &gt; Image_name under volume level is deprecated, please use image_name under server level
        /// 
        /// 
        /// &gt; **⚠ WARNING**
        /// &gt;
        /// &gt; For creating a **CUBE** server, you can not set `volume.size` argument.
        /// &gt;
        /// </summary>
        [Input("allowReplace")]
        public Input<bool>? AllowReplace { get; set; }

        /// <summary>
        /// [string] The availability zone in which the server should exist. This property is immutable.
        /// </summary>
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        /// <summary>
        /// ***DEPRECATED*** Please refer to ionoscloud.compute.BootDeviceSelection (Optional)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the ionoscloud.compute.getImage data source.
        /// </summary>
        [Input("bootCdrom")]
        public Input<string>? BootCdrom { get; set; }

        /// <summary>
        /// [string] The image or snapshot UUID / name. May also be an image alias. It is required if `licence_type` is not provided.
        /// </summary>
        [Input("bootImage")]
        public Input<string>? BootImage { get; set; }

        /// <summary>
        /// [string] The ID of a Virtual Data Center.
        /// </summary>
        [Input("datacenterId", required: true)]
        public Input<string> DatacenterId { get; set; } = null!;

        /// <summary>
        /// (Computed) The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licence_type` is not provided. Attribute is immutable.
        /// </summary>
        [Input("imageName")]
        public Input<string>? ImageName { get; set; }

        [Input("imagePassword")]
        private Input<string>? _imagePassword;

        /// <summary>
        /// [string] Required if `ssh_key_path` is not provided.
        /// </summary>
        public Input<string>? ImagePassword
        {
            get => _imagePassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _imagePassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// [string] The name of the server.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// See the Nic section.
        /// </summary>
        [Input("nic", required: true)]
        public Input<Inputs.CubeServerNicArgs> Nic { get; set; } = null!;

        [Input("securityGroupsIds")]
        private InputList<string>? _securityGroupsIds;

        /// <summary>
        /// The list of Security Group IDs for the resource.
        /// </summary>
        public InputList<string> SecurityGroupsIds
        {
            get => _securityGroupsIds ?? (_securityGroupsIds = new InputList<string>());
            set => _securityGroupsIds = value;
        }

        [Input("sshKeyPaths")]
        private InputList<string>? _sshKeyPaths;

        /// <summary>
        /// [list] List of paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Required for IonosCloud Linux images. Required if `image_password` is not provided.
        /// </summary>
        public InputList<string> SshKeyPaths
        {
            get => _sshKeyPaths ?? (_sshKeyPaths = new InputList<string>());
            set => _sshKeyPaths = value;
        }

        /// <summary>
        /// [string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
        /// </summary>
        [Input("templateUuid", required: true)]
        public Input<string> TemplateUuid { get; set; } = null!;

        /// <summary>
        /// [string] Sets the power state of the cube server. E.g: `RUNNING` or `SUSPENDED`.
        /// </summary>
        [Input("vmState")]
        public Input<string>? VmState { get; set; }

        /// <summary>
        /// See the Volume section.
        /// </summary>
        [Input("volume", required: true)]
        public Input<Inputs.CubeServerVolumeArgs> Volume { get; set; } = null!;

        public CubeServerArgs()
        {
        }
        public static new CubeServerArgs Empty => new CubeServerArgs();
    }

    public sealed class CubeServerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the server.
        /// 
        /// ⚠️ **_Warning: `allow_replace` - lets you update immutable fields, but it first destroys and then re-creates the server in order to do it. This field should be used with care, understanding the risks._**
        /// 
        /// &gt; **⚠ WARNING**
        /// &gt;
        /// &gt; Image_name under volume level is deprecated, please use image_name under server level
        /// 
        /// 
        /// &gt; **⚠ WARNING**
        /// &gt;
        /// &gt; For creating a **CUBE** server, you can not set `volume.size` argument.
        /// &gt;
        /// </summary>
        [Input("allowReplace")]
        public Input<bool>? AllowReplace { get; set; }

        /// <summary>
        /// [string] The availability zone in which the server should exist. This property is immutable.
        /// </summary>
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        /// <summary>
        /// ***DEPRECATED*** Please refer to ionoscloud.compute.BootDeviceSelection (Optional)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the ionoscloud.compute.getImage data source.
        /// </summary>
        [Input("bootCdrom")]
        public Input<string>? BootCdrom { get; set; }

        /// <summary>
        /// [string] The image or snapshot UUID / name. May also be an image alias. It is required if `licence_type` is not provided.
        /// </summary>
        [Input("bootImage")]
        public Input<string>? BootImage { get; set; }

        /// <summary>
        /// The associated boot volume.
        /// </summary>
        [Input("bootVolume")]
        public Input<string>? BootVolume { get; set; }

        /// <summary>
        /// [string] The ID of a Virtual Data Center.
        /// </summary>
        [Input("datacenterId")]
        public Input<string>? DatacenterId { get; set; }

        /// <summary>
        /// The associated firewall rule.
        /// </summary>
        [Input("firewallruleId")]
        public Input<string>? FirewallruleId { get; set; }

        /// <summary>
        /// (Computed) The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licence_type` is not provided. Attribute is immutable.
        /// </summary>
        [Input("imageName")]
        public Input<string>? ImageName { get; set; }

        [Input("imagePassword")]
        private Input<string>? _imagePassword;

        /// <summary>
        /// [string] Required if `ssh_key_path` is not provided.
        /// </summary>
        public Input<string>? ImagePassword
        {
            get => _imagePassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _imagePassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("inlineVolumeIds")]
        private InputList<string>? _inlineVolumeIds;

        /// <summary>
        /// A list that contains the IDs for the volumes defined inside the cube server resource.
        /// </summary>
        public InputList<string> InlineVolumeIds
        {
            get => _inlineVolumeIds ?? (_inlineVolumeIds = new InputList<string>());
            set => _inlineVolumeIds = value;
        }

        /// <summary>
        /// [string] The name of the server.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// See the Nic section.
        /// </summary>
        [Input("nic")]
        public Input<Inputs.CubeServerNicGetArgs>? Nic { get; set; }

        /// <summary>
        /// The associated IP address.
        /// </summary>
        [Input("primaryIp")]
        public Input<string>? PrimaryIp { get; set; }

        /// <summary>
        /// The associated NIC.
        /// </summary>
        [Input("primaryNic")]
        public Input<string>? PrimaryNic { get; set; }

        [Input("securityGroupsIds")]
        private InputList<string>? _securityGroupsIds;

        /// <summary>
        /// The list of Security Group IDs for the resource.
        /// </summary>
        public InputList<string> SecurityGroupsIds
        {
            get => _securityGroupsIds ?? (_securityGroupsIds = new InputList<string>());
            set => _securityGroupsIds = value;
        }

        [Input("sshKeyPaths")]
        private InputList<string>? _sshKeyPaths;

        /// <summary>
        /// [list] List of paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Required for IonosCloud Linux images. Required if `image_password` is not provided.
        /// </summary>
        public InputList<string> SshKeyPaths
        {
            get => _sshKeyPaths ?? (_sshKeyPaths = new InputList<string>());
            set => _sshKeyPaths = value;
        }

        /// <summary>
        /// [string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
        /// </summary>
        [Input("templateUuid")]
        public Input<string>? TemplateUuid { get; set; }

        /// <summary>
        /// [string] Sets the power state of the cube server. E.g: `RUNNING` or `SUSPENDED`.
        /// </summary>
        [Input("vmState")]
        public Input<string>? VmState { get; set; }

        /// <summary>
        /// See the Volume section.
        /// </summary>
        [Input("volume")]
        public Input<Inputs.CubeServerVolumeGetArgs>? Volume { get; set; }

        public CubeServerState()
        {
        }
        public static new CubeServerState Empty => new CubeServerState();
    }
}
