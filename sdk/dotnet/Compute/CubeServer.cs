// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud.Compute
{
    [IonoscloudResourceType("ionoscloud:compute/cubeServer:CubeServer")]
    public partial class CubeServer : global::Pulumi.CustomResource
    {
        [Output("availabilityZone")]
        public Output<string> AvailabilityZone { get; private set; } = null!;

        [Output("bootCdrom")]
        public Output<string> BootCdrom { get; private set; } = null!;

        [Output("bootImage")]
        public Output<string> BootImage { get; private set; } = null!;

        [Output("bootVolume")]
        public Output<string> BootVolume { get; private set; } = null!;

        [Output("datacenterId")]
        public Output<string> DatacenterId { get; private set; } = null!;

        [Output("firewallruleId")]
        public Output<string> FirewallruleId { get; private set; } = null!;

        [Output("imageName")]
        public Output<string> ImageName { get; private set; } = null!;

        [Output("imagePassword")]
        public Output<string> ImagePassword { get; private set; } = null!;

        /// <summary>
        /// A list that contains the IDs for the volumes defined inside the cube server resource.
        /// </summary>
        [Output("inlineVolumeIds")]
        public Output<ImmutableArray<string>> InlineVolumeIds { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("nic")]
        public Output<Outputs.CubeServerNic> Nic { get; private set; } = null!;

        [Output("primaryIp")]
        public Output<string> PrimaryIp { get; private set; } = null!;

        [Output("primaryNic")]
        public Output<string> PrimaryNic { get; private set; } = null!;

        [Output("sshKeyPaths")]
        public Output<ImmutableArray<string>> SshKeyPaths { get; private set; } = null!;

        [Output("templateUuid")]
        public Output<string> TemplateUuid { get; private set; } = null!;

        /// <summary>
        /// Sets the power state of the cube server. Possible values: `RUNNING` or `SUSPENDED`.
        /// </summary>
        [Output("vmState")]
        public Output<string> VmState { get; private set; } = null!;

        [Output("volume")]
        public Output<Outputs.CubeServerVolume> Volume { get; private set; } = null!;


        /// <summary>
        /// Create a CubeServer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CubeServer(string name, CubeServerArgs args, CustomResourceOptions? options = null)
            : base("ionoscloud:compute/cubeServer:CubeServer", name, args ?? new CubeServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CubeServer(string name, Input<string> id, CubeServerState? state = null, CustomResourceOptions? options = null)
            : base("ionoscloud:compute/cubeServer:CubeServer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "imagePassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CubeServer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CubeServer Get(string name, Input<string> id, CubeServerState? state = null, CustomResourceOptions? options = null)
        {
            return new CubeServer(name, id, state, options);
        }
    }

    public sealed class CubeServerArgs : global::Pulumi.ResourceArgs
    {
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        [Input("bootCdrom")]
        public Input<string>? BootCdrom { get; set; }

        [Input("bootImage")]
        public Input<string>? BootImage { get; set; }

        [Input("datacenterId", required: true)]
        public Input<string> DatacenterId { get; set; } = null!;

        [Input("imageName")]
        public Input<string>? ImageName { get; set; }

        [Input("imagePassword")]
        private Input<string>? _imagePassword;
        public Input<string>? ImagePassword
        {
            get => _imagePassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _imagePassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nic", required: true)]
        public Input<Inputs.CubeServerNicArgs> Nic { get; set; } = null!;

        [Input("sshKeyPaths")]
        private InputList<string>? _sshKeyPaths;
        public InputList<string> SshKeyPaths
        {
            get => _sshKeyPaths ?? (_sshKeyPaths = new InputList<string>());
            set => _sshKeyPaths = value;
        }

        [Input("templateUuid", required: true)]
        public Input<string> TemplateUuid { get; set; } = null!;

        /// <summary>
        /// Sets the power state of the cube server. Possible values: `RUNNING` or `SUSPENDED`.
        /// </summary>
        [Input("vmState")]
        public Input<string>? VmState { get; set; }

        [Input("volume", required: true)]
        public Input<Inputs.CubeServerVolumeArgs> Volume { get; set; } = null!;

        public CubeServerArgs()
        {
        }
        public static new CubeServerArgs Empty => new CubeServerArgs();
    }

    public sealed class CubeServerState : global::Pulumi.ResourceArgs
    {
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        [Input("bootCdrom")]
        public Input<string>? BootCdrom { get; set; }

        [Input("bootImage")]
        public Input<string>? BootImage { get; set; }

        [Input("bootVolume")]
        public Input<string>? BootVolume { get; set; }

        [Input("datacenterId")]
        public Input<string>? DatacenterId { get; set; }

        [Input("firewallruleId")]
        public Input<string>? FirewallruleId { get; set; }

        [Input("imageName")]
        public Input<string>? ImageName { get; set; }

        [Input("imagePassword")]
        private Input<string>? _imagePassword;
        public Input<string>? ImagePassword
        {
            get => _imagePassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _imagePassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("inlineVolumeIds")]
        private InputList<string>? _inlineVolumeIds;

        /// <summary>
        /// A list that contains the IDs for the volumes defined inside the cube server resource.
        /// </summary>
        public InputList<string> InlineVolumeIds
        {
            get => _inlineVolumeIds ?? (_inlineVolumeIds = new InputList<string>());
            set => _inlineVolumeIds = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nic")]
        public Input<Inputs.CubeServerNicGetArgs>? Nic { get; set; }

        [Input("primaryIp")]
        public Input<string>? PrimaryIp { get; set; }

        [Input("primaryNic")]
        public Input<string>? PrimaryNic { get; set; }

        [Input("sshKeyPaths")]
        private InputList<string>? _sshKeyPaths;
        public InputList<string> SshKeyPaths
        {
            get => _sshKeyPaths ?? (_sshKeyPaths = new InputList<string>());
            set => _sshKeyPaths = value;
        }

        [Input("templateUuid")]
        public Input<string>? TemplateUuid { get; set; }

        /// <summary>
        /// Sets the power state of the cube server. Possible values: `RUNNING` or `SUSPENDED`.
        /// </summary>
        [Input("vmState")]
        public Input<string>? VmState { get; set; }

        [Input("volume")]
        public Input<Inputs.CubeServerVolumeGetArgs>? Volume { get; set; }

        public CubeServerState()
        {
        }
        public static new CubeServerState Empty => new CubeServerState();
    }
}
