// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud.Compute
{
    public static class GetSnapshot
    {
        public static Task<GetSnapshotResult> InvokeAsync(GetSnapshotArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSnapshotResult>("ionoscloud:compute/getSnapshot:getSnapshot", args ?? new GetSnapshotArgs(), options.WithDefaults());

        public static Output<GetSnapshotResult> Invoke(GetSnapshotInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSnapshotResult>("ionoscloud:compute/getSnapshot:getSnapshot", args ?? new GetSnapshotInvokeArgs(), options.WithDefaults());

        public static Output<GetSnapshotResult> Invoke(GetSnapshotInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSnapshotResult>("ionoscloud:compute/getSnapshot:getSnapshot", args ?? new GetSnapshotInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSnapshotArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public string? Id { get; set; }

        [Input("location")]
        public string? Location { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("size")]
        public int? Size { get; set; }

        public GetSnapshotArgs()
        {
        }
        public static new GetSnapshotArgs Empty => new GetSnapshotArgs();
    }

    public sealed class GetSnapshotInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("size")]
        public Input<int>? Size { get; set; }

        public GetSnapshotInvokeArgs()
        {
        }
        public static new GetSnapshotInvokeArgs Empty => new GetSnapshotInvokeArgs();
    }


    [OutputType]
    public sealed class GetSnapshotResult
    {
        public readonly bool CpuHotPlug;
        public readonly bool CpuHotUnplug;
        public readonly string Description;
        public readonly bool DiscScsiHotPlug;
        public readonly bool DiscScsiHotUnplug;
        public readonly bool DiscVirtioHotPlug;
        public readonly bool DiscVirtioHotUnplug;
        public readonly string? Id;
        public readonly string LicenceType;
        public readonly string Location;
        public readonly string Name;
        public readonly bool NicHotPlug;
        public readonly bool NicHotUnplug;
        public readonly bool RamHotPlug;
        public readonly bool RamHotUnplug;
        public readonly bool SecAuthProtection;
        public readonly int Size;

        [OutputConstructor]
        private GetSnapshotResult(
            bool cpuHotPlug,

            bool cpuHotUnplug,

            string description,

            bool discScsiHotPlug,

            bool discScsiHotUnplug,

            bool discVirtioHotPlug,

            bool discVirtioHotUnplug,

            string? id,

            string licenceType,

            string location,

            string name,

            bool nicHotPlug,

            bool nicHotUnplug,

            bool ramHotPlug,

            bool ramHotUnplug,

            bool secAuthProtection,

            int size)
        {
            CpuHotPlug = cpuHotPlug;
            CpuHotUnplug = cpuHotUnplug;
            Description = description;
            DiscScsiHotPlug = discScsiHotPlug;
            DiscScsiHotUnplug = discScsiHotUnplug;
            DiscVirtioHotPlug = discVirtioHotPlug;
            DiscVirtioHotUnplug = discVirtioHotUnplug;
            Id = id;
            LicenceType = licenceType;
            Location = location;
            Name = name;
            NicHotPlug = nicHotPlug;
            NicHotUnplug = nicHotUnplug;
            RamHotPlug = ramHotPlug;
            RamHotUnplug = ramHotUnplug;
            SecAuthProtection = secAuthProtection;
            Size = size;
        }
    }
}
