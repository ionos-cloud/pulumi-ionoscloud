// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ionoscloud.Compute
{
    public static class GetNatGatewayRule
    {
        public static Task<GetNatGatewayRuleResult> InvokeAsync(GetNatGatewayRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNatGatewayRuleResult>("ionoscloud:compute/getNatGatewayRule:getNatGatewayRule", args ?? new GetNatGatewayRuleArgs(), options.WithDefaults());

        public static Output<GetNatGatewayRuleResult> Invoke(GetNatGatewayRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNatGatewayRuleResult>("ionoscloud:compute/getNatGatewayRule:getNatGatewayRule", args ?? new GetNatGatewayRuleInvokeArgs(), options.WithDefaults());

        public static Output<GetNatGatewayRuleResult> Invoke(GetNatGatewayRuleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNatGatewayRuleResult>("ionoscloud:compute/getNatGatewayRule:getNatGatewayRule", args ?? new GetNatGatewayRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNatGatewayRuleArgs : global::Pulumi.InvokeArgs
    {
        [Input("datacenterId", required: true)]
        public string DatacenterId { get; set; } = null!;

        [Input("id")]
        public string? Id { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("natgatewayId", required: true)]
        public string NatgatewayId { get; set; } = null!;

        public GetNatGatewayRuleArgs()
        {
        }
        public static new GetNatGatewayRuleArgs Empty => new GetNatGatewayRuleArgs();
    }

    public sealed class GetNatGatewayRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("datacenterId", required: true)]
        public Input<string> DatacenterId { get; set; } = null!;

        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("natgatewayId", required: true)]
        public Input<string> NatgatewayId { get; set; } = null!;

        public GetNatGatewayRuleInvokeArgs()
        {
        }
        public static new GetNatGatewayRuleInvokeArgs Empty => new GetNatGatewayRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetNatGatewayRuleResult
    {
        public readonly string DatacenterId;
        public readonly string? Id;
        public readonly string? Name;
        public readonly string NatgatewayId;
        public readonly string Protocol;
        public readonly string PublicIp;
        public readonly string SourceSubnet;
        public readonly ImmutableArray<Outputs.GetNatGatewayRuleTargetPortRangeResult> TargetPortRanges;
        public readonly string TargetSubnet;
        public readonly string Type;

        [OutputConstructor]
        private GetNatGatewayRuleResult(
            string datacenterId,

            string? id,

            string? name,

            string natgatewayId,

            string protocol,

            string publicIp,

            string sourceSubnet,

            ImmutableArray<Outputs.GetNatGatewayRuleTargetPortRangeResult> targetPortRanges,

            string targetSubnet,

            string type)
        {
            DatacenterId = datacenterId;
            Id = id;
            Name = name;
            NatgatewayId = natgatewayId;
            Protocol = protocol;
            PublicIp = publicIp;
            SourceSubnet = sourceSubnet;
            TargetPortRanges = targetPortRanges;
            TargetSubnet = targetSubnet;
            Type = type;
        }
    }
}
