// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationLoadbalancerForwardingruleHttpRuleConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationLoadbalancerForwardingruleHttpRuleConditionArgs Empty = new ApplicationLoadbalancerForwardingruleHttpRuleConditionArgs();

    /**
     * [string] Matching rule for the HTTP rule condition attribute; mandatory for HEADER, PATH, QUERY, METHOD, HOST, and COOKIE types; must be null when type is SOURCE_IP.
     * 
     */
    @Import(name="condition")
    private @Nullable Output<String> condition;

    /**
     * @return [string] Matching rule for the HTTP rule condition attribute; mandatory for HEADER, PATH, QUERY, METHOD, HOST, and COOKIE types; must be null when type is SOURCE_IP.
     * 
     */
    public Optional<Output<String>> condition() {
        return Optional.ofNullable(this.condition);
    }

    /**
     * [string] Must be null when type is PATH, METHOD, HOST, or SOURCE_IP. Key can only be set when type is COOKIES, HEADER, or QUERY.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return [string] Must be null when type is PATH, METHOD, HOST, or SOURCE_IP. Key can only be set when type is COOKIES, HEADER, or QUERY.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * [bool] Specifies whether the condition is negated or not; the default is False.
     * 
     */
    @Import(name="negate")
    private @Nullable Output<Boolean> negate;

    /**
     * @return [bool] Specifies whether the condition is negated or not; the default is False.
     * 
     */
    public Optional<Output<Boolean>> negate() {
        return Optional.ofNullable(this.negate);
    }

    /**
     * [string] Type of the Http Rule condition.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return [string] Type of the Http Rule condition.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * [string] Mandatory for conditions CONTAINS, EQUALS, MATCHES, STARTS_WITH, ENDS_WITH; must be null when condition is EXISTS; should be a valid CIDR if provided and if type is SOURCE_IP.
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return [string] Mandatory for conditions CONTAINS, EQUALS, MATCHES, STARTS_WITH, ENDS_WITH; must be null when condition is EXISTS; should be a valid CIDR if provided and if type is SOURCE_IP.
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    private ApplicationLoadbalancerForwardingruleHttpRuleConditionArgs() {}

    private ApplicationLoadbalancerForwardingruleHttpRuleConditionArgs(ApplicationLoadbalancerForwardingruleHttpRuleConditionArgs $) {
        this.condition = $.condition;
        this.key = $.key;
        this.negate = $.negate;
        this.type = $.type;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationLoadbalancerForwardingruleHttpRuleConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationLoadbalancerForwardingruleHttpRuleConditionArgs $;

        public Builder() {
            $ = new ApplicationLoadbalancerForwardingruleHttpRuleConditionArgs();
        }

        public Builder(ApplicationLoadbalancerForwardingruleHttpRuleConditionArgs defaults) {
            $ = new ApplicationLoadbalancerForwardingruleHttpRuleConditionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param condition [string] Matching rule for the HTTP rule condition attribute; mandatory for HEADER, PATH, QUERY, METHOD, HOST, and COOKIE types; must be null when type is SOURCE_IP.
         * 
         * @return builder
         * 
         */
        public Builder condition(@Nullable Output<String> condition) {
            $.condition = condition;
            return this;
        }

        /**
         * @param condition [string] Matching rule for the HTTP rule condition attribute; mandatory for HEADER, PATH, QUERY, METHOD, HOST, and COOKIE types; must be null when type is SOURCE_IP.
         * 
         * @return builder
         * 
         */
        public Builder condition(String condition) {
            return condition(Output.of(condition));
        }

        /**
         * @param key [string] Must be null when type is PATH, METHOD, HOST, or SOURCE_IP. Key can only be set when type is COOKIES, HEADER, or QUERY.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key [string] Must be null when type is PATH, METHOD, HOST, or SOURCE_IP. Key can only be set when type is COOKIES, HEADER, or QUERY.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param negate [bool] Specifies whether the condition is negated or not; the default is False.
         * 
         * @return builder
         * 
         */
        public Builder negate(@Nullable Output<Boolean> negate) {
            $.negate = negate;
            return this;
        }

        /**
         * @param negate [bool] Specifies whether the condition is negated or not; the default is False.
         * 
         * @return builder
         * 
         */
        public Builder negate(Boolean negate) {
            return negate(Output.of(negate));
        }

        /**
         * @param type [string] Type of the Http Rule condition.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type [string] Type of the Http Rule condition.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param value [string] Mandatory for conditions CONTAINS, EQUALS, MATCHES, STARTS_WITH, ENDS_WITH; must be null when condition is EXISTS; should be a valid CIDR if provided and if type is SOURCE_IP.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value [string] Mandatory for conditions CONTAINS, EQUALS, MATCHES, STARTS_WITH, ENDS_WITH; must be null when condition is EXISTS; should be a valid CIDR if provided and if type is SOURCE_IP.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public ApplicationLoadbalancerForwardingruleHttpRuleConditionArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("ApplicationLoadbalancerForwardingruleHttpRuleConditionArgs", "type");
            }
            return $;
        }
    }

}
