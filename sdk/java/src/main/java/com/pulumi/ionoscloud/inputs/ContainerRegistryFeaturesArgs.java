// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerRegistryFeaturesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerRegistryFeaturesArgs Empty = new ContainerRegistryFeaturesArgs();

    /**
     * [bool] Enables or disables the Vulnerability Scanning feature for the Container Registry. To disable this feature, set the attribute to false when creating the CR resource.
     * 
     * &gt; **⚠ WARNING** `Container Registry Vulnerability Scanning` is a paid feature which is enabled by default, and cannot be turned off after activation. To disable this feature for a Container Registry, ensure `vulnerability_scanning` is set to false on resource creation.
     * 
     */
    @Import(name="vulnerabilityScanning")
    private @Nullable Output<Boolean> vulnerabilityScanning;

    /**
     * @return [bool] Enables or disables the Vulnerability Scanning feature for the Container Registry. To disable this feature, set the attribute to false when creating the CR resource.
     * 
     * &gt; **⚠ WARNING** `Container Registry Vulnerability Scanning` is a paid feature which is enabled by default, and cannot be turned off after activation. To disable this feature for a Container Registry, ensure `vulnerability_scanning` is set to false on resource creation.
     * 
     */
    public Optional<Output<Boolean>> vulnerabilityScanning() {
        return Optional.ofNullable(this.vulnerabilityScanning);
    }

    private ContainerRegistryFeaturesArgs() {}

    private ContainerRegistryFeaturesArgs(ContainerRegistryFeaturesArgs $) {
        this.vulnerabilityScanning = $.vulnerabilityScanning;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerRegistryFeaturesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerRegistryFeaturesArgs $;

        public Builder() {
            $ = new ContainerRegistryFeaturesArgs();
        }

        public Builder(ContainerRegistryFeaturesArgs defaults) {
            $ = new ContainerRegistryFeaturesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param vulnerabilityScanning [bool] Enables or disables the Vulnerability Scanning feature for the Container Registry. To disable this feature, set the attribute to false when creating the CR resource.
         * 
         * &gt; **⚠ WARNING** `Container Registry Vulnerability Scanning` is a paid feature which is enabled by default, and cannot be turned off after activation. To disable this feature for a Container Registry, ensure `vulnerability_scanning` is set to false on resource creation.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilityScanning(@Nullable Output<Boolean> vulnerabilityScanning) {
            $.vulnerabilityScanning = vulnerabilityScanning;
            return this;
        }

        /**
         * @param vulnerabilityScanning [bool] Enables or disables the Vulnerability Scanning feature for the Container Registry. To disable this feature, set the attribute to false when creating the CR resource.
         * 
         * &gt; **⚠ WARNING** `Container Registry Vulnerability Scanning` is a paid feature which is enabled by default, and cannot be turned off after activation. To disable this feature for a Container Registry, ensure `vulnerability_scanning` is set to false on resource creation.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilityScanning(Boolean vulnerabilityScanning) {
            return vulnerabilityScanning(Output.of(vulnerabilityScanning));
        }

        public ContainerRegistryFeaturesArgs build() {
            return $;
        }
    }

}
