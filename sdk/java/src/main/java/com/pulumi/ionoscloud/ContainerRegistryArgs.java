// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.inputs.ContainerRegistryFeaturesArgs;
import com.pulumi.ionoscloud.inputs.ContainerRegistryGarbageCollectionScheduleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerRegistryArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerRegistryArgs Empty = new ContainerRegistryArgs();

    /**
     * [list] The subnet CIDRs that are allowed to connect to the registry.  Specify &#34;a.b.c.d/32&#34; for an individual IP address. __Note__: If this list is empty or not set, there are no restrictions.
     * 
     */
    @Import(name="apiSubnetAllowLists")
    private @Nullable Output<List<String>> apiSubnetAllowLists;

    /**
     * @return [list] The subnet CIDRs that are allowed to connect to the registry.  Specify &#34;a.b.c.d/32&#34; for an individual IP address. __Note__: If this list is empty or not set, there are no restrictions.
     * 
     */
    public Optional<Output<List<String>>> apiSubnetAllowLists() {
        return Optional.ofNullable(this.apiSubnetAllowLists);
    }

    /**
     * [Map]
     * 
     */
    @Import(name="features")
    private @Nullable Output<ContainerRegistryFeaturesArgs> features;

    /**
     * @return [Map]
     * 
     */
    public Optional<Output<ContainerRegistryFeaturesArgs>> features() {
        return Optional.ofNullable(this.features);
    }

    /**
     * [Map]
     * 
     */
    @Import(name="garbageCollectionSchedule")
    private @Nullable Output<ContainerRegistryGarbageCollectionScheduleArgs> garbageCollectionSchedule;

    /**
     * @return [Map]
     * 
     */
    public Optional<Output<ContainerRegistryGarbageCollectionScheduleArgs>> garbageCollectionSchedule() {
        return Optional.ofNullable(this.garbageCollectionSchedule);
    }

    /**
     * [string] Immutable, update forces re-creation of the resource.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return [string] Immutable, update forces re-creation of the resource.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The name of the container registry. Immutable, update forces re-creation of the resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the container registry. Immutable, update forces re-creation of the resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private ContainerRegistryArgs() {}

    private ContainerRegistryArgs(ContainerRegistryArgs $) {
        this.apiSubnetAllowLists = $.apiSubnetAllowLists;
        this.features = $.features;
        this.garbageCollectionSchedule = $.garbageCollectionSchedule;
        this.location = $.location;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerRegistryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerRegistryArgs $;

        public Builder() {
            $ = new ContainerRegistryArgs();
        }

        public Builder(ContainerRegistryArgs defaults) {
            $ = new ContainerRegistryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiSubnetAllowLists [list] The subnet CIDRs that are allowed to connect to the registry.  Specify &#34;a.b.c.d/32&#34; for an individual IP address. __Note__: If this list is empty or not set, there are no restrictions.
         * 
         * @return builder
         * 
         */
        public Builder apiSubnetAllowLists(@Nullable Output<List<String>> apiSubnetAllowLists) {
            $.apiSubnetAllowLists = apiSubnetAllowLists;
            return this;
        }

        /**
         * @param apiSubnetAllowLists [list] The subnet CIDRs that are allowed to connect to the registry.  Specify &#34;a.b.c.d/32&#34; for an individual IP address. __Note__: If this list is empty or not set, there are no restrictions.
         * 
         * @return builder
         * 
         */
        public Builder apiSubnetAllowLists(List<String> apiSubnetAllowLists) {
            return apiSubnetAllowLists(Output.of(apiSubnetAllowLists));
        }

        /**
         * @param apiSubnetAllowLists [list] The subnet CIDRs that are allowed to connect to the registry.  Specify &#34;a.b.c.d/32&#34; for an individual IP address. __Note__: If this list is empty or not set, there are no restrictions.
         * 
         * @return builder
         * 
         */
        public Builder apiSubnetAllowLists(String... apiSubnetAllowLists) {
            return apiSubnetAllowLists(List.of(apiSubnetAllowLists));
        }

        /**
         * @param features [Map]
         * 
         * @return builder
         * 
         */
        public Builder features(@Nullable Output<ContainerRegistryFeaturesArgs> features) {
            $.features = features;
            return this;
        }

        /**
         * @param features [Map]
         * 
         * @return builder
         * 
         */
        public Builder features(ContainerRegistryFeaturesArgs features) {
            return features(Output.of(features));
        }

        /**
         * @param garbageCollectionSchedule [Map]
         * 
         * @return builder
         * 
         */
        public Builder garbageCollectionSchedule(@Nullable Output<ContainerRegistryGarbageCollectionScheduleArgs> garbageCollectionSchedule) {
            $.garbageCollectionSchedule = garbageCollectionSchedule;
            return this;
        }

        /**
         * @param garbageCollectionSchedule [Map]
         * 
         * @return builder
         * 
         */
        public Builder garbageCollectionSchedule(ContainerRegistryGarbageCollectionScheduleArgs garbageCollectionSchedule) {
            return garbageCollectionSchedule(Output.of(garbageCollectionSchedule));
        }

        /**
         * @param location [string] Immutable, update forces re-creation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location [string] Immutable, update forces re-creation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name of the container registry. Immutable, update forces re-creation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the container registry. Immutable, update forces re-creation of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public ContainerRegistryArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("ContainerRegistryArgs", "location");
            }
            return $;
        }
    }

}
