// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.ionoscloud.MongoClusterArgs;
import com.pulumi.ionoscloud.Utilities;
import com.pulumi.ionoscloud.inputs.MongoClusterState;
import com.pulumi.ionoscloud.outputs.MongoClusterBackup;
import com.pulumi.ionoscloud.outputs.MongoClusterBiConnector;
import com.pulumi.ionoscloud.outputs.MongoClusterConnections;
import com.pulumi.ionoscloud.outputs.MongoClusterMaintenanceWindow;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="ionoscloud:index/mongoCluster:MongoCluster")
public class MongoCluster extends com.pulumi.resources.CustomResource {
    /**
     * Backup related properties.
     * 
     */
    @Export(name="backup", refs={MongoClusterBackup.class}, tree="[0]")
    private Output</* @Nullable */ MongoClusterBackup> backup;

    /**
     * @return Backup related properties.
     * 
     */
    public Output<Optional<MongoClusterBackup>> backup() {
        return Codegen.optional(this.backup);
    }
    /**
     * The MongoDB Connector for Business Intelligence allows you to query a MongoDB database using SQL commands to aid in data
     * analysis.
     * 
     */
    @Export(name="biConnector", refs={MongoClusterBiConnector.class}, tree="[0]")
    private Output<MongoClusterBiConnector> biConnector;

    /**
     * @return The MongoDB Connector for Business Intelligence allows you to query a MongoDB database using SQL commands to aid in data
     * analysis.
     * 
     */
    public Output<MongoClusterBiConnector> biConnector() {
        return this.biConnector;
    }
    /**
     * The connection string for your cluster.
     * 
     */
    @Export(name="connectionString", refs={String.class}, tree="[0]")
    private Output<String> connectionString;

    /**
     * @return The connection string for your cluster.
     * 
     */
    public Output<String> connectionString() {
        return this.connectionString;
    }
    /**
     * Details about the network connection for your cluster.
     * 
     */
    @Export(name="connections", refs={MongoClusterConnections.class}, tree="[0]")
    private Output<MongoClusterConnections> connections;

    /**
     * @return Details about the network connection for your cluster.
     * 
     */
    public Output<MongoClusterConnections> connections() {
        return this.connections;
    }
    /**
     * The number of CPU cores per instance.
     * 
     */
    @Export(name="cores", refs={Integer.class}, tree="[0]")
    private Output<Integer> cores;

    /**
     * @return The number of CPU cores per instance.
     * 
     */
    public Output<Integer> cores() {
        return this.cores;
    }
    /**
     * The name of your cluster.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return The name of your cluster.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * The cluster edition. Must be one of: playground, business, enterprise
     * 
     */
    @Export(name="edition", refs={String.class}, tree="[0]")
    private Output<String> edition;

    /**
     * @return The cluster edition. Must be one of: playground, business, enterprise
     * 
     */
    public Output<String> edition() {
        return this.edition;
    }
    /**
     * The total number of instances in the cluster (one master and n-1 standbys). Example: 1, 3, 5, 7. For enterprise edition
     * at least 3.
     * 
     */
    @Export(name="instances", refs={Integer.class}, tree="[0]")
    private Output<Integer> instances;

    /**
     * @return The total number of instances in the cluster (one master and n-1 standbys). Example: 1, 3, 5, 7. For enterprise edition
     * at least 3.
     * 
     */
    public Output<Integer> instances() {
        return this.instances;
    }
    /**
     * The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
     * be modified after datacenter creation (disallowed in update requests). Available locations: de/txl, gb/lhr, es/vit.
     * Update forces cluster re-creation.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
     * be modified after datacenter creation (disallowed in update requests). Available locations: de/txl, gb/lhr, es/vit.
     * Update forces cluster re-creation.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * A weekly 4 hour-long window, during which maintenance might occur
     * 
     */
    @Export(name="maintenanceWindow", refs={MongoClusterMaintenanceWindow.class}, tree="[0]")
    private Output<MongoClusterMaintenanceWindow> maintenanceWindow;

    /**
     * @return A weekly 4 hour-long window, during which maintenance might occur
     * 
     */
    public Output<MongoClusterMaintenanceWindow> maintenanceWindow() {
        return this.maintenanceWindow;
    }
    /**
     * The MongoDB version of your cluster. Update forces cluster re-creation.
     * 
     */
    @Export(name="mongodbVersion", refs={String.class}, tree="[0]")
    private Output<String> mongodbVersion;

    /**
     * @return The MongoDB version of your cluster. Update forces cluster re-creation.
     * 
     */
    public Output<String> mongodbVersion() {
        return this.mongodbVersion;
    }
    /**
     * The amount of memory per instance in megabytes. Multiple of 1024
     * 
     */
    @Export(name="ram", refs={Integer.class}, tree="[0]")
    private Output<Integer> ram;

    /**
     * @return The amount of memory per instance in megabytes. Multiple of 1024
     * 
     */
    public Output<Integer> ram() {
        return this.ram;
    }
    /**
     * The total number of shards in the cluster.
     * 
     */
    @Export(name="shards", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> shards;

    /**
     * @return The total number of shards in the cluster.
     * 
     */
    public Output<Optional<Integer>> shards() {
        return Codegen.optional(this.shards);
    }
    /**
     * The amount of storage per instance in megabytes. At least 5120, at most 2097152
     * 
     */
    @Export(name="storageSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> storageSize;

    /**
     * @return The amount of storage per instance in megabytes. At least 5120, at most 2097152
     * 
     */
    public Output<Integer> storageSize() {
        return this.storageSize;
    }
    /**
     * The storage type. One of : HDD, SSD, SSD Standard, SSD Premium
     * 
     */
    @Export(name="storageType", refs={String.class}, tree="[0]")
    private Output<String> storageType;

    /**
     * @return The storage type. One of : HDD, SSD, SSD Standard, SSD Premium
     * 
     */
    public Output<String> storageType() {
        return this.storageType;
    }
    /**
     * The unique ID of the template, which specifies the number of cores, storage size, and memory. You cannot downgrade to a
     * smaller template or minor edition (e.g. from business to playground). To get a list of all templates to confirm the
     * changes use the /templates endpoint.
     * 
     */
    @Export(name="templateId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> templateId;

    /**
     * @return The unique ID of the template, which specifies the number of cores, storage size, and memory. You cannot downgrade to a
     * smaller template or minor edition (e.g. from business to playground). To get a list of all templates to confirm the
     * changes use the /templates endpoint.
     * 
     */
    public Output<Optional<String>> templateId() {
        return Codegen.optional(this.templateId);
    }
    /**
     * The cluster type, either `replicaset` or `sharded-cluster`
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The cluster type, either `replicaset` or `sharded-cluster`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public MongoCluster(java.lang.String name) {
        this(name, MongoClusterArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public MongoCluster(java.lang.String name, MongoClusterArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public MongoCluster(java.lang.String name, MongoClusterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("ionoscloud:index/mongoCluster:MongoCluster", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private MongoCluster(java.lang.String name, Output<java.lang.String> id, @Nullable MongoClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("ionoscloud:index/mongoCluster:MongoCluster", name, state, makeResourceOptions(options, id), false);
    }

    private static MongoClusterArgs makeArgs(MongoClusterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? MongoClusterArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static MongoCluster get(java.lang.String name, Output<java.lang.String> id, @Nullable MongoClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new MongoCluster(name, id, state, options);
    }
}
