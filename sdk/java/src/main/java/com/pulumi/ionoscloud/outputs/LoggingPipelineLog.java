// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.outputs.LoggingPipelineLogDestination;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LoggingPipelineLog {
    /**
     * @return [list] The configuration of the logs datastore, a list that contains elements with the following structure:
     * 
     */
    private @Nullable List<LoggingPipelineLogDestination> destinations;
    /**
     * @return [string] &#34;Protocol to use as intake. Possible values are: http, tcp.&#34;
     * 
     */
    private String protocol;
    /**
     * @return [bool]
     * 
     */
    private @Nullable Boolean public_;
    /**
     * @return [string] The source parser to be used.
     * 
     */
    private String source;
    /**
     * @return [string] The tag is used to distinguish different pipelines. Must be unique amongst the pipeline&#39;s array items.
     * 
     */
    private String tag;

    private LoggingPipelineLog() {}
    /**
     * @return [list] The configuration of the logs datastore, a list that contains elements with the following structure:
     * 
     */
    public List<LoggingPipelineLogDestination> destinations() {
        return this.destinations == null ? List.of() : this.destinations;
    }
    /**
     * @return [string] &#34;Protocol to use as intake. Possible values are: http, tcp.&#34;
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return [bool]
     * 
     */
    public Optional<Boolean> public_() {
        return Optional.ofNullable(this.public_);
    }
    /**
     * @return [string] The source parser to be used.
     * 
     */
    public String source() {
        return this.source;
    }
    /**
     * @return [string] The tag is used to distinguish different pipelines. Must be unique amongst the pipeline&#39;s array items.
     * 
     */
    public String tag() {
        return this.tag;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoggingPipelineLog defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<LoggingPipelineLogDestination> destinations;
        private String protocol;
        private @Nullable Boolean public_;
        private String source;
        private String tag;
        public Builder() {}
        public Builder(LoggingPipelineLog defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destinations = defaults.destinations;
    	      this.protocol = defaults.protocol;
    	      this.public_ = defaults.public_;
    	      this.source = defaults.source;
    	      this.tag = defaults.tag;
        }

        @CustomType.Setter
        public Builder destinations(@Nullable List<LoggingPipelineLogDestination> destinations) {

            this.destinations = destinations;
            return this;
        }
        public Builder destinations(LoggingPipelineLogDestination... destinations) {
            return destinations(List.of(destinations));
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("LoggingPipelineLog", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter("public")
        public Builder public_(@Nullable Boolean public_) {

            this.public_ = public_;
            return this;
        }
        @CustomType.Setter
        public Builder source(String source) {
            if (source == null) {
              throw new MissingRequiredPropertyException("LoggingPipelineLog", "source");
            }
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder tag(String tag) {
            if (tag == null) {
              throw new MissingRequiredPropertyException("LoggingPipelineLog", "tag");
            }
            this.tag = tag;
            return this;
        }
        public LoggingPipelineLog build() {
            final var _resultValue = new LoggingPipelineLog();
            _resultValue.destinations = destinations;
            _resultValue.protocol = protocol;
            _resultValue.public_ = public_;
            _resultValue.source = source;
            _resultValue.tag = tag;
            return _resultValue;
        }
    }
}
