// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatacenterArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatacenterArgs Empty = new DatacenterArgs();

    /**
     * A description for the datacenter, e.g. staging, production
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description for the datacenter, e.g. staging, production
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="location", required=true)
    private Output<String> location;

    public Output<String> location() {
        return this.location;
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="secAuthProtection")
    private @Nullable Output<Boolean> secAuthProtection;

    public Optional<Output<Boolean>> secAuthProtection() {
        return Optional.ofNullable(this.secAuthProtection);
    }

    private DatacenterArgs() {}

    private DatacenterArgs(DatacenterArgs $) {
        this.description = $.description;
        this.location = $.location;
        this.name = $.name;
        this.secAuthProtection = $.secAuthProtection;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatacenterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatacenterArgs $;

        public Builder() {
            $ = new DatacenterArgs();
        }

        public Builder(DatacenterArgs defaults) {
            $ = new DatacenterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A description for the datacenter, e.g. staging, production
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description for the datacenter, e.g. staging, production
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder secAuthProtection(@Nullable Output<Boolean> secAuthProtection) {
            $.secAuthProtection = secAuthProtection;
            return this;
        }

        public Builder secAuthProtection(Boolean secAuthProtection) {
            return secAuthProtection(Output.of(secAuthProtection));
        }

        public DatacenterArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("DatacenterArgs", "location");
            }
            return $;
        }
    }

}
