// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BootDeviceSelectionState extends com.pulumi.resources.ResourceArgs {

    public static final BootDeviceSelectionState Empty = new BootDeviceSelectionState();

    /**
     * [string] The ID of a bootable device such as a volume or an image data source. If this field is omitted from the configuration, the VM will be restarted with no primary boot device, and it will enter the PXE shell for network booting.
     * ***Note***: If the network booting process started by the PXE shell fails, the VM will still boot into the image of the attached storage as a fallback. This behavior imitates the &#34;Boot from Network&#34; option from [DCD](https://dcd.ionos.com/).
     * 
     */
    @Import(name="bootDeviceId")
    private @Nullable Output<String> bootDeviceId;

    /**
     * @return [string] The ID of a bootable device such as a volume or an image data source. If this field is omitted from the configuration, the VM will be restarted with no primary boot device, and it will enter the PXE shell for network booting.
     * ***Note***: If the network booting process started by the PXE shell fails, the VM will still boot into the image of the attached storage as a fallback. This behavior imitates the &#34;Boot from Network&#34; option from [DCD](https://dcd.ionos.com/).
     * 
     */
    public Optional<Output<String>> bootDeviceId() {
        return Optional.ofNullable(this.bootDeviceId);
    }

    /**
     * [string] The ID of a Virtual Data Center.
     * 
     */
    @Import(name="datacenterId")
    private @Nullable Output<String> datacenterId;

    /**
     * @return [string] The ID of a Virtual Data Center.
     * 
     */
    public Optional<Output<String>> datacenterId() {
        return Optional.ofNullable(this.datacenterId);
    }

    /**
     * ID of the first attached volume of the Server, which will be the default boot volume.
     * 
     */
    @Import(name="defaultBootVolumeId")
    private @Nullable Output<String> defaultBootVolumeId;

    /**
     * @return ID of the first attached volume of the Server, which will be the default boot volume.
     * 
     */
    public Optional<Output<String>> defaultBootVolumeId() {
        return Optional.ofNullable(this.defaultBootVolumeId);
    }

    /**
     * [string] The ID of a server.
     * 
     */
    @Import(name="serverId")
    private @Nullable Output<String> serverId;

    /**
     * @return [string] The ID of a server.
     * 
     */
    public Optional<Output<String>> serverId() {
        return Optional.ofNullable(this.serverId);
    }

    private BootDeviceSelectionState() {}

    private BootDeviceSelectionState(BootDeviceSelectionState $) {
        this.bootDeviceId = $.bootDeviceId;
        this.datacenterId = $.datacenterId;
        this.defaultBootVolumeId = $.defaultBootVolumeId;
        this.serverId = $.serverId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BootDeviceSelectionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BootDeviceSelectionState $;

        public Builder() {
            $ = new BootDeviceSelectionState();
        }

        public Builder(BootDeviceSelectionState defaults) {
            $ = new BootDeviceSelectionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param bootDeviceId [string] The ID of a bootable device such as a volume or an image data source. If this field is omitted from the configuration, the VM will be restarted with no primary boot device, and it will enter the PXE shell for network booting.
         * ***Note***: If the network booting process started by the PXE shell fails, the VM will still boot into the image of the attached storage as a fallback. This behavior imitates the &#34;Boot from Network&#34; option from [DCD](https://dcd.ionos.com/).
         * 
         * @return builder
         * 
         */
        public Builder bootDeviceId(@Nullable Output<String> bootDeviceId) {
            $.bootDeviceId = bootDeviceId;
            return this;
        }

        /**
         * @param bootDeviceId [string] The ID of a bootable device such as a volume or an image data source. If this field is omitted from the configuration, the VM will be restarted with no primary boot device, and it will enter the PXE shell for network booting.
         * ***Note***: If the network booting process started by the PXE shell fails, the VM will still boot into the image of the attached storage as a fallback. This behavior imitates the &#34;Boot from Network&#34; option from [DCD](https://dcd.ionos.com/).
         * 
         * @return builder
         * 
         */
        public Builder bootDeviceId(String bootDeviceId) {
            return bootDeviceId(Output.of(bootDeviceId));
        }

        /**
         * @param datacenterId [string] The ID of a Virtual Data Center.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(@Nullable Output<String> datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        /**
         * @param datacenterId [string] The ID of a Virtual Data Center.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(String datacenterId) {
            return datacenterId(Output.of(datacenterId));
        }

        /**
         * @param defaultBootVolumeId ID of the first attached volume of the Server, which will be the default boot volume.
         * 
         * @return builder
         * 
         */
        public Builder defaultBootVolumeId(@Nullable Output<String> defaultBootVolumeId) {
            $.defaultBootVolumeId = defaultBootVolumeId;
            return this;
        }

        /**
         * @param defaultBootVolumeId ID of the first attached volume of the Server, which will be the default boot volume.
         * 
         * @return builder
         * 
         */
        public Builder defaultBootVolumeId(String defaultBootVolumeId) {
            return defaultBootVolumeId(Output.of(defaultBootVolumeId));
        }

        /**
         * @param serverId [string] The ID of a server.
         * 
         * @return builder
         * 
         */
        public Builder serverId(@Nullable Output<String> serverId) {
            $.serverId = serverId;
            return this;
        }

        /**
         * @param serverId [string] The ID of a server.
         * 
         * @return builder
         * 
         */
        public Builder serverId(String serverId) {
            return serverId(Output.of(serverId));
        }

        public BootDeviceSelectionState build() {
            return $;
        }
    }

}
