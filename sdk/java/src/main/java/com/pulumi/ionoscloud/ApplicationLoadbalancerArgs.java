// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.inputs.ApplicationLoadbalancerFlowlogArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationLoadbalancerArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationLoadbalancerArgs Empty = new ApplicationLoadbalancerArgs();

    /**
     * [bool] Turn logging on and off for this product. Default value is &#39;false&#39;.
     * 
     */
    @Import(name="centralLogging")
    private @Nullable Output<Boolean> centralLogging;

    /**
     * @return [bool] Turn logging on and off for this product. Default value is &#39;false&#39;.
     * 
     */
    public Optional<Output<Boolean>> centralLogging() {
        return Optional.ofNullable(this.centralLogging);
    }

    /**
     * [string] ID of the datacenter.
     * 
     */
    @Import(name="datacenterId", required=true)
    private Output<String> datacenterId;

    /**
     * @return [string] ID of the datacenter.
     * 
     */
    public Output<String> datacenterId() {
        return this.datacenterId;
    }

    /**
     * [list] Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.
     * 
     */
    @Import(name="flowlog")
    private @Nullable Output<ApplicationLoadbalancerFlowlogArgs> flowlog;

    /**
     * @return [list] Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.
     * 
     */
    public Optional<Output<ApplicationLoadbalancerFlowlogArgs>> flowlog() {
        return Optional.ofNullable(this.flowlog);
    }

    /**
     * [set] Collection of the Application Load Balancer IP addresses. (Inbound and outbound) IPs of the listenerLan are customer-reserved public IPs for the public Load Balancers, and private IPs for the private Load Balancers.
     * 
     */
    @Import(name="ips")
    private @Nullable Output<List<String>> ips;

    /**
     * @return [set] Collection of the Application Load Balancer IP addresses. (Inbound and outbound) IPs of the listenerLan are customer-reserved public IPs for the public Load Balancers, and private IPs for the private Load Balancers.
     * 
     */
    public Optional<Output<List<String>>> ips() {
        return Optional.ofNullable(this.ips);
    }

    /**
     * [set] Collection of private IP addresses with the subnet mask of the Application Load Balancer. IPs must contain valid a subnet mask. If no IP is provided, the system will generate an IP with /24 subnet.
     * 
     */
    @Import(name="lbPrivateIps")
    private @Nullable Output<List<String>> lbPrivateIps;

    /**
     * @return [set] Collection of private IP addresses with the subnet mask of the Application Load Balancer. IPs must contain valid a subnet mask. If no IP is provided, the system will generate an IP with /24 subnet.
     * 
     */
    public Optional<Output<List<String>>> lbPrivateIps() {
        return Optional.ofNullable(this.lbPrivateIps);
    }

    /**
     * [int] ID of the listening (inbound) LAN.
     * 
     */
    @Import(name="listenerLan", required=true)
    private Output<Integer> listenerLan;

    /**
     * @return [int] ID of the listening (inbound) LAN.
     * 
     */
    public Output<Integer> listenerLan() {
        return this.listenerLan;
    }

    /**
     * Specifies the format of the logs.
     * 
     */
    @Import(name="loggingFormat")
    private @Nullable Output<String> loggingFormat;

    /**
     * @return Specifies the format of the logs.
     * 
     */
    public Optional<Output<String>> loggingFormat() {
        return Optional.ofNullable(this.loggingFormat);
    }

    /**
     * [string] Specifies the name of the flow log.
     * 
     * ⚠️ **Note:**: Removing the `flowlog` forces re-creation of the application load balancer resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return [string] Specifies the name of the flow log.
     * 
     * ⚠️ **Note:**: Removing the `flowlog` forces re-creation of the application load balancer resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * [int] ID of the balanced private target LAN (outbound).
     * 
     */
    @Import(name="targetLan", required=true)
    private Output<Integer> targetLan;

    /**
     * @return [int] ID of the balanced private target LAN (outbound).
     * 
     */
    public Output<Integer> targetLan() {
        return this.targetLan;
    }

    private ApplicationLoadbalancerArgs() {}

    private ApplicationLoadbalancerArgs(ApplicationLoadbalancerArgs $) {
        this.centralLogging = $.centralLogging;
        this.datacenterId = $.datacenterId;
        this.flowlog = $.flowlog;
        this.ips = $.ips;
        this.lbPrivateIps = $.lbPrivateIps;
        this.listenerLan = $.listenerLan;
        this.loggingFormat = $.loggingFormat;
        this.name = $.name;
        this.targetLan = $.targetLan;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationLoadbalancerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationLoadbalancerArgs $;

        public Builder() {
            $ = new ApplicationLoadbalancerArgs();
        }

        public Builder(ApplicationLoadbalancerArgs defaults) {
            $ = new ApplicationLoadbalancerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param centralLogging [bool] Turn logging on and off for this product. Default value is &#39;false&#39;.
         * 
         * @return builder
         * 
         */
        public Builder centralLogging(@Nullable Output<Boolean> centralLogging) {
            $.centralLogging = centralLogging;
            return this;
        }

        /**
         * @param centralLogging [bool] Turn logging on and off for this product. Default value is &#39;false&#39;.
         * 
         * @return builder
         * 
         */
        public Builder centralLogging(Boolean centralLogging) {
            return centralLogging(Output.of(centralLogging));
        }

        /**
         * @param datacenterId [string] ID of the datacenter.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(Output<String> datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        /**
         * @param datacenterId [string] ID of the datacenter.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(String datacenterId) {
            return datacenterId(Output.of(datacenterId));
        }

        /**
         * @param flowlog [list] Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.
         * 
         * @return builder
         * 
         */
        public Builder flowlog(@Nullable Output<ApplicationLoadbalancerFlowlogArgs> flowlog) {
            $.flowlog = flowlog;
            return this;
        }

        /**
         * @param flowlog [list] Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.
         * 
         * @return builder
         * 
         */
        public Builder flowlog(ApplicationLoadbalancerFlowlogArgs flowlog) {
            return flowlog(Output.of(flowlog));
        }

        /**
         * @param ips [set] Collection of the Application Load Balancer IP addresses. (Inbound and outbound) IPs of the listenerLan are customer-reserved public IPs for the public Load Balancers, and private IPs for the private Load Balancers.
         * 
         * @return builder
         * 
         */
        public Builder ips(@Nullable Output<List<String>> ips) {
            $.ips = ips;
            return this;
        }

        /**
         * @param ips [set] Collection of the Application Load Balancer IP addresses. (Inbound and outbound) IPs of the listenerLan are customer-reserved public IPs for the public Load Balancers, and private IPs for the private Load Balancers.
         * 
         * @return builder
         * 
         */
        public Builder ips(List<String> ips) {
            return ips(Output.of(ips));
        }

        /**
         * @param ips [set] Collection of the Application Load Balancer IP addresses. (Inbound and outbound) IPs of the listenerLan are customer-reserved public IPs for the public Load Balancers, and private IPs for the private Load Balancers.
         * 
         * @return builder
         * 
         */
        public Builder ips(String... ips) {
            return ips(List.of(ips));
        }

        /**
         * @param lbPrivateIps [set] Collection of private IP addresses with the subnet mask of the Application Load Balancer. IPs must contain valid a subnet mask. If no IP is provided, the system will generate an IP with /24 subnet.
         * 
         * @return builder
         * 
         */
        public Builder lbPrivateIps(@Nullable Output<List<String>> lbPrivateIps) {
            $.lbPrivateIps = lbPrivateIps;
            return this;
        }

        /**
         * @param lbPrivateIps [set] Collection of private IP addresses with the subnet mask of the Application Load Balancer. IPs must contain valid a subnet mask. If no IP is provided, the system will generate an IP with /24 subnet.
         * 
         * @return builder
         * 
         */
        public Builder lbPrivateIps(List<String> lbPrivateIps) {
            return lbPrivateIps(Output.of(lbPrivateIps));
        }

        /**
         * @param lbPrivateIps [set] Collection of private IP addresses with the subnet mask of the Application Load Balancer. IPs must contain valid a subnet mask. If no IP is provided, the system will generate an IP with /24 subnet.
         * 
         * @return builder
         * 
         */
        public Builder lbPrivateIps(String... lbPrivateIps) {
            return lbPrivateIps(List.of(lbPrivateIps));
        }

        /**
         * @param listenerLan [int] ID of the listening (inbound) LAN.
         * 
         * @return builder
         * 
         */
        public Builder listenerLan(Output<Integer> listenerLan) {
            $.listenerLan = listenerLan;
            return this;
        }

        /**
         * @param listenerLan [int] ID of the listening (inbound) LAN.
         * 
         * @return builder
         * 
         */
        public Builder listenerLan(Integer listenerLan) {
            return listenerLan(Output.of(listenerLan));
        }

        /**
         * @param loggingFormat Specifies the format of the logs.
         * 
         * @return builder
         * 
         */
        public Builder loggingFormat(@Nullable Output<String> loggingFormat) {
            $.loggingFormat = loggingFormat;
            return this;
        }

        /**
         * @param loggingFormat Specifies the format of the logs.
         * 
         * @return builder
         * 
         */
        public Builder loggingFormat(String loggingFormat) {
            return loggingFormat(Output.of(loggingFormat));
        }

        /**
         * @param name [string] Specifies the name of the flow log.
         * 
         * ⚠️ **Note:**: Removing the `flowlog` forces re-creation of the application load balancer resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [string] Specifies the name of the flow log.
         * 
         * ⚠️ **Note:**: Removing the `flowlog` forces re-creation of the application load balancer resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param targetLan [int] ID of the balanced private target LAN (outbound).
         * 
         * @return builder
         * 
         */
        public Builder targetLan(Output<Integer> targetLan) {
            $.targetLan = targetLan;
            return this;
        }

        /**
         * @param targetLan [int] ID of the balanced private target LAN (outbound).
         * 
         * @return builder
         * 
         */
        public Builder targetLan(Integer targetLan) {
            return targetLan(Output.of(targetLan));
        }

        public ApplicationLoadbalancerArgs build() {
            if ($.datacenterId == null) {
                throw new MissingRequiredPropertyException("ApplicationLoadbalancerArgs", "datacenterId");
            }
            if ($.listenerLan == null) {
                throw new MissingRequiredPropertyException("ApplicationLoadbalancerArgs", "listenerLan");
            }
            if ($.targetLan == null) {
                throw new MissingRequiredPropertyException("ApplicationLoadbalancerArgs", "targetLan");
            }
            return $;
        }
    }

}
