// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.inputs.MariadbClusterConnectionsArgs;
import com.pulumi.ionoscloud.inputs.MariadbClusterCredentialsArgs;
import com.pulumi.ionoscloud.inputs.MariadbClusterMaintenanceWindowArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MariadbClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final MariadbClusterArgs Empty = new MariadbClusterArgs();

    /**
     * The network connection for your cluster. Only one connection is allowed.
     * 
     */
    @Import(name="connections", required=true)
    private Output<MariadbClusterConnectionsArgs> connections;

    /**
     * @return The network connection for your cluster. Only one connection is allowed.
     * 
     */
    public Output<MariadbClusterConnectionsArgs> connections() {
        return this.connections;
    }

    /**
     * The number of CPU cores per instance.
     * 
     */
    @Import(name="cores", required=true)
    private Output<Integer> cores;

    /**
     * @return The number of CPU cores per instance.
     * 
     */
    public Output<Integer> cores() {
        return this.cores;
    }

    /**
     * Credentials for the database user to be created.
     * 
     */
    @Import(name="credentials", required=true)
    private Output<MariadbClusterCredentialsArgs> credentials;

    /**
     * @return Credentials for the database user to be created.
     * 
     */
    public Output<MariadbClusterCredentialsArgs> credentials() {
        return this.credentials;
    }

    /**
     * The friendly name of your cluster.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The friendly name of your cluster.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * The total number of instances in the cluster (one primary and n-1 secondary).
     * 
     */
    @Import(name="instances", required=true)
    private Output<Integer> instances;

    /**
     * @return The total number of instances in the cluster (one primary and n-1 secondary).
     * 
     */
    public Output<Integer> instances() {
        return this.instances;
    }

    /**
     * The cluster location
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The cluster location
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * A weekly 4 hour-long window, during which maintenance might occur.
     * 
     */
    @Import(name="maintenanceWindow")
    private @Nullable Output<MariadbClusterMaintenanceWindowArgs> maintenanceWindow;

    /**
     * @return A weekly 4 hour-long window, during which maintenance might occur.
     * 
     */
    public Optional<Output<MariadbClusterMaintenanceWindowArgs>> maintenanceWindow() {
        return Optional.ofNullable(this.maintenanceWindow);
    }

    /**
     * The MariaDB version of your cluster.
     * 
     */
    @Import(name="mariadbVersion", required=true)
    private Output<String> mariadbVersion;

    /**
     * @return The MariaDB version of your cluster.
     * 
     */
    public Output<String> mariadbVersion() {
        return this.mariadbVersion;
    }

    /**
     * The amount of memory per instance in gigabytes (GB).
     * 
     */
    @Import(name="ram", required=true)
    private Output<Integer> ram;

    /**
     * @return The amount of memory per instance in gigabytes (GB).
     * 
     */
    public Output<Integer> ram() {
        return this.ram;
    }

    /**
     * The amount of storage per instance in gigabytes (GB).
     * 
     */
    @Import(name="storageSize", required=true)
    private Output<Integer> storageSize;

    /**
     * @return The amount of storage per instance in gigabytes (GB).
     * 
     */
    public Output<Integer> storageSize() {
        return this.storageSize;
    }

    private MariadbClusterArgs() {}

    private MariadbClusterArgs(MariadbClusterArgs $) {
        this.connections = $.connections;
        this.cores = $.cores;
        this.credentials = $.credentials;
        this.displayName = $.displayName;
        this.instances = $.instances;
        this.location = $.location;
        this.maintenanceWindow = $.maintenanceWindow;
        this.mariadbVersion = $.mariadbVersion;
        this.ram = $.ram;
        this.storageSize = $.storageSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MariadbClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MariadbClusterArgs $;

        public Builder() {
            $ = new MariadbClusterArgs();
        }

        public Builder(MariadbClusterArgs defaults) {
            $ = new MariadbClusterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connections The network connection for your cluster. Only one connection is allowed.
         * 
         * @return builder
         * 
         */
        public Builder connections(Output<MariadbClusterConnectionsArgs> connections) {
            $.connections = connections;
            return this;
        }

        /**
         * @param connections The network connection for your cluster. Only one connection is allowed.
         * 
         * @return builder
         * 
         */
        public Builder connections(MariadbClusterConnectionsArgs connections) {
            return connections(Output.of(connections));
        }

        /**
         * @param cores The number of CPU cores per instance.
         * 
         * @return builder
         * 
         */
        public Builder cores(Output<Integer> cores) {
            $.cores = cores;
            return this;
        }

        /**
         * @param cores The number of CPU cores per instance.
         * 
         * @return builder
         * 
         */
        public Builder cores(Integer cores) {
            return cores(Output.of(cores));
        }

        /**
         * @param credentials Credentials for the database user to be created.
         * 
         * @return builder
         * 
         */
        public Builder credentials(Output<MariadbClusterCredentialsArgs> credentials) {
            $.credentials = credentials;
            return this;
        }

        /**
         * @param credentials Credentials for the database user to be created.
         * 
         * @return builder
         * 
         */
        public Builder credentials(MariadbClusterCredentialsArgs credentials) {
            return credentials(Output.of(credentials));
        }

        /**
         * @param displayName The friendly name of your cluster.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The friendly name of your cluster.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param instances The total number of instances in the cluster (one primary and n-1 secondary).
         * 
         * @return builder
         * 
         */
        public Builder instances(Output<Integer> instances) {
            $.instances = instances;
            return this;
        }

        /**
         * @param instances The total number of instances in the cluster (one primary and n-1 secondary).
         * 
         * @return builder
         * 
         */
        public Builder instances(Integer instances) {
            return instances(Output.of(instances));
        }

        /**
         * @param location The cluster location
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The cluster location
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param maintenanceWindow A weekly 4 hour-long window, during which maintenance might occur.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindow(@Nullable Output<MariadbClusterMaintenanceWindowArgs> maintenanceWindow) {
            $.maintenanceWindow = maintenanceWindow;
            return this;
        }

        /**
         * @param maintenanceWindow A weekly 4 hour-long window, during which maintenance might occur.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindow(MariadbClusterMaintenanceWindowArgs maintenanceWindow) {
            return maintenanceWindow(Output.of(maintenanceWindow));
        }

        /**
         * @param mariadbVersion The MariaDB version of your cluster.
         * 
         * @return builder
         * 
         */
        public Builder mariadbVersion(Output<String> mariadbVersion) {
            $.mariadbVersion = mariadbVersion;
            return this;
        }

        /**
         * @param mariadbVersion The MariaDB version of your cluster.
         * 
         * @return builder
         * 
         */
        public Builder mariadbVersion(String mariadbVersion) {
            return mariadbVersion(Output.of(mariadbVersion));
        }

        /**
         * @param ram The amount of memory per instance in gigabytes (GB).
         * 
         * @return builder
         * 
         */
        public Builder ram(Output<Integer> ram) {
            $.ram = ram;
            return this;
        }

        /**
         * @param ram The amount of memory per instance in gigabytes (GB).
         * 
         * @return builder
         * 
         */
        public Builder ram(Integer ram) {
            return ram(Output.of(ram));
        }

        /**
         * @param storageSize The amount of storage per instance in gigabytes (GB).
         * 
         * @return builder
         * 
         */
        public Builder storageSize(Output<Integer> storageSize) {
            $.storageSize = storageSize;
            return this;
        }

        /**
         * @param storageSize The amount of storage per instance in gigabytes (GB).
         * 
         * @return builder
         * 
         */
        public Builder storageSize(Integer storageSize) {
            return storageSize(Output.of(storageSize));
        }

        public MariadbClusterArgs build() {
            if ($.connections == null) {
                throw new MissingRequiredPropertyException("MariadbClusterArgs", "connections");
            }
            if ($.cores == null) {
                throw new MissingRequiredPropertyException("MariadbClusterArgs", "cores");
            }
            if ($.credentials == null) {
                throw new MissingRequiredPropertyException("MariadbClusterArgs", "credentials");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("MariadbClusterArgs", "displayName");
            }
            if ($.instances == null) {
                throw new MissingRequiredPropertyException("MariadbClusterArgs", "instances");
            }
            if ($.mariadbVersion == null) {
                throw new MissingRequiredPropertyException("MariadbClusterArgs", "mariadbVersion");
            }
            if ($.ram == null) {
                throw new MissingRequiredPropertyException("MariadbClusterArgs", "ram");
            }
            if ($.storageSize == null) {
                throw new MissingRequiredPropertyException("MariadbClusterArgs", "storageSize");
            }
            return $;
        }
    }

}
