// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.nlb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.nlb.inputs.ForwardingRuleHealthCheckArgs;
import com.pulumi.ionoscloud.nlb.inputs.ForwardingRuleTargetArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ForwardingRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ForwardingRuleArgs Empty = new ForwardingRuleArgs();

    /**
     * [string] Algorithm for the balancing.
     * 
     */
    @Import(name="algorithm", required=true)
    private Output<String> algorithm;

    /**
     * @return [string] Algorithm for the balancing.
     * 
     */
    public Output<String> algorithm() {
        return this.algorithm;
    }

    /**
     * [string] A Datacenter&#39;s UUID.
     * 
     */
    @Import(name="datacenterId", required=true)
    private Output<String> datacenterId;

    /**
     * @return [string] A Datacenter&#39;s UUID.
     * 
     */
    public Output<String> datacenterId() {
        return this.datacenterId;
    }

    /**
     * Health check attributes for Network Load Balancer forwarding rule.
     * 
     */
    @Import(name="healthCheck")
    private @Nullable Output<ForwardingRuleHealthCheckArgs> healthCheck;

    /**
     * @return Health check attributes for Network Load Balancer forwarding rule.
     * 
     */
    public Optional<Output<ForwardingRuleHealthCheckArgs>> healthCheck() {
        return Optional.ofNullable(this.healthCheck);
    }

    /**
     * [string] Listening IP. (inbound)
     * 
     */
    @Import(name="listenerIp", required=true)
    private Output<String> listenerIp;

    /**
     * @return [string] Listening IP. (inbound)
     * 
     */
    public Output<String> listenerIp() {
        return this.listenerIp;
    }

    /**
     * [int] Listening port number. (inbound) (range: 1 to 65535)
     * 
     */
    @Import(name="listenerPort", required=true)
    private Output<Integer> listenerPort;

    /**
     * @return [int] Listening port number. (inbound) (range: 1 to 65535)
     * 
     */
    public Output<Integer> listenerPort() {
        return this.listenerPort;
    }

    /**
     * [string] A name of that Network Load Balancer forwarding rule.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return [string] A name of that Network Load Balancer forwarding rule.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="networkloadbalancerId", required=true)
    private Output<String> networkloadbalancerId;

    public Output<String> networkloadbalancerId() {
        return this.networkloadbalancerId;
    }

    /**
     * [string] Protocol of the balancing.
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return [string] Protocol of the balancing.
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * [Set] Array of items in that collection.
     * 
     */
    @Import(name="targets", required=true)
    private Output<List<ForwardingRuleTargetArgs>> targets;

    /**
     * @return [Set] Array of items in that collection.
     * 
     */
    public Output<List<ForwardingRuleTargetArgs>> targets() {
        return this.targets;
    }

    private ForwardingRuleArgs() {}

    private ForwardingRuleArgs(ForwardingRuleArgs $) {
        this.algorithm = $.algorithm;
        this.datacenterId = $.datacenterId;
        this.healthCheck = $.healthCheck;
        this.listenerIp = $.listenerIp;
        this.listenerPort = $.listenerPort;
        this.name = $.name;
        this.networkloadbalancerId = $.networkloadbalancerId;
        this.protocol = $.protocol;
        this.targets = $.targets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ForwardingRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ForwardingRuleArgs $;

        public Builder() {
            $ = new ForwardingRuleArgs();
        }

        public Builder(ForwardingRuleArgs defaults) {
            $ = new ForwardingRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param algorithm [string] Algorithm for the balancing.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(Output<String> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        /**
         * @param algorithm [string] Algorithm for the balancing.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(String algorithm) {
            return algorithm(Output.of(algorithm));
        }

        /**
         * @param datacenterId [string] A Datacenter&#39;s UUID.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(Output<String> datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        /**
         * @param datacenterId [string] A Datacenter&#39;s UUID.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(String datacenterId) {
            return datacenterId(Output.of(datacenterId));
        }

        /**
         * @param healthCheck Health check attributes for Network Load Balancer forwarding rule.
         * 
         * @return builder
         * 
         */
        public Builder healthCheck(@Nullable Output<ForwardingRuleHealthCheckArgs> healthCheck) {
            $.healthCheck = healthCheck;
            return this;
        }

        /**
         * @param healthCheck Health check attributes for Network Load Balancer forwarding rule.
         * 
         * @return builder
         * 
         */
        public Builder healthCheck(ForwardingRuleHealthCheckArgs healthCheck) {
            return healthCheck(Output.of(healthCheck));
        }

        /**
         * @param listenerIp [string] Listening IP. (inbound)
         * 
         * @return builder
         * 
         */
        public Builder listenerIp(Output<String> listenerIp) {
            $.listenerIp = listenerIp;
            return this;
        }

        /**
         * @param listenerIp [string] Listening IP. (inbound)
         * 
         * @return builder
         * 
         */
        public Builder listenerIp(String listenerIp) {
            return listenerIp(Output.of(listenerIp));
        }

        /**
         * @param listenerPort [int] Listening port number. (inbound) (range: 1 to 65535)
         * 
         * @return builder
         * 
         */
        public Builder listenerPort(Output<Integer> listenerPort) {
            $.listenerPort = listenerPort;
            return this;
        }

        /**
         * @param listenerPort [int] Listening port number. (inbound) (range: 1 to 65535)
         * 
         * @return builder
         * 
         */
        public Builder listenerPort(Integer listenerPort) {
            return listenerPort(Output.of(listenerPort));
        }

        /**
         * @param name [string] A name of that Network Load Balancer forwarding rule.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [string] A name of that Network Load Balancer forwarding rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder networkloadbalancerId(Output<String> networkloadbalancerId) {
            $.networkloadbalancerId = networkloadbalancerId;
            return this;
        }

        public Builder networkloadbalancerId(String networkloadbalancerId) {
            return networkloadbalancerId(Output.of(networkloadbalancerId));
        }

        /**
         * @param protocol [string] Protocol of the balancing.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol [string] Protocol of the balancing.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param targets [Set] Array of items in that collection.
         * 
         * @return builder
         * 
         */
        public Builder targets(Output<List<ForwardingRuleTargetArgs>> targets) {
            $.targets = targets;
            return this;
        }

        /**
         * @param targets [Set] Array of items in that collection.
         * 
         * @return builder
         * 
         */
        public Builder targets(List<ForwardingRuleTargetArgs> targets) {
            return targets(Output.of(targets));
        }

        /**
         * @param targets [Set] Array of items in that collection.
         * 
         * @return builder
         * 
         */
        public Builder targets(ForwardingRuleTargetArgs... targets) {
            return targets(List.of(targets));
        }

        public ForwardingRuleArgs build() {
            if ($.algorithm == null) {
                throw new MissingRequiredPropertyException("ForwardingRuleArgs", "algorithm");
            }
            if ($.datacenterId == null) {
                throw new MissingRequiredPropertyException("ForwardingRuleArgs", "datacenterId");
            }
            if ($.listenerIp == null) {
                throw new MissingRequiredPropertyException("ForwardingRuleArgs", "listenerIp");
            }
            if ($.listenerPort == null) {
                throw new MissingRequiredPropertyException("ForwardingRuleArgs", "listenerPort");
            }
            if ($.networkloadbalancerId == null) {
                throw new MissingRequiredPropertyException("ForwardingRuleArgs", "networkloadbalancerId");
            }
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("ForwardingRuleArgs", "protocol");
            }
            if ($.targets == null) {
                throw new MissingRequiredPropertyException("ForwardingRuleArgs", "targets");
            }
            return $;
        }
    }

}
