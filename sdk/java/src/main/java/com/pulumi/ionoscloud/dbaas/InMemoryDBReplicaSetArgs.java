// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.dbaas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.dbaas.inputs.InMemoryDBReplicaSetConnectionsArgs;
import com.pulumi.ionoscloud.dbaas.inputs.InMemoryDBReplicaSetCredentialsArgs;
import com.pulumi.ionoscloud.dbaas.inputs.InMemoryDBReplicaSetMaintenanceWindowArgs;
import com.pulumi.ionoscloud.dbaas.inputs.InMemoryDBReplicaSetResourcesArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InMemoryDBReplicaSetArgs extends com.pulumi.resources.ResourceArgs {

    public static final InMemoryDBReplicaSetArgs Empty = new InMemoryDBReplicaSetArgs();

    /**
     * [object] The network connection for your replica set. Only one connection is allowed. Updates to the value of the fields force the replica set to be re-created.
     * 
     */
    @Import(name="connections", required=true)
    private Output<InMemoryDBReplicaSetConnectionsArgs> connections;

    /**
     * @return [object] The network connection for your replica set. Only one connection is allowed. Updates to the value of the fields force the replica set to be re-created.
     * 
     */
    public Output<InMemoryDBReplicaSetConnectionsArgs> connections() {
        return this.connections;
    }

    /**
     * [object] Credentials for the InMemoryDB replicaset, only one type of password can be used since they are mutually exclusive. These values are used to create the initial InMemoryDB user, updating any of these will force recreation of the replica set resource.
     * 
     */
    @Import(name="credentials", required=true)
    private Output<InMemoryDBReplicaSetCredentialsArgs> credentials;

    /**
     * @return [object] Credentials for the InMemoryDB replicaset, only one type of password can be used since they are mutually exclusive. These values are used to create the initial InMemoryDB user, updating any of these will force recreation of the replica set resource.
     * 
     */
    public Output<InMemoryDBReplicaSetCredentialsArgs> credentials() {
        return this.credentials;
    }

    /**
     * [string] The human-readable name of your replica set.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return [string] The human-readable name of your replica set.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * [string] The eviction policy for the replica set, possible values are:
     * 
     */
    @Import(name="evictionPolicy", required=true)
    private Output<String> evictionPolicy;

    /**
     * @return [string] The eviction policy for the replica set, possible values are:
     * 
     */
    public Output<String> evictionPolicy() {
        return this.evictionPolicy;
    }

    /**
     * [string] The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
     * 
     */
    @Import(name="initialSnapshotId")
    private @Nullable Output<String> initialSnapshotId;

    /**
     * @return [string] The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
     * 
     */
    public Optional<Output<String>> initialSnapshotId() {
        return Optional.ofNullable(this.initialSnapshotId);
    }

    /**
     * [string] The location of your replica set. Updates to the value of the field force the replica set to be re-created. If this is not set and if no value is provided for the `IONOS_API_URL` env var, the default `location` will be: `de/fra`.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return [string] The location of your replica set. Updates to the value of the field force the replica set to be re-created. If this is not set and if no value is provided for the `IONOS_API_URL` env var, the default `location` will be: `de/fra`.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * (Computed) A weekly 4 hour-long window, during which maintenance might occur.
     * 
     */
    @Import(name="maintenanceWindow")
    private @Nullable Output<InMemoryDBReplicaSetMaintenanceWindowArgs> maintenanceWindow;

    /**
     * @return (Computed) A weekly 4 hour-long window, during which maintenance might occur.
     * 
     */
    public Optional<Output<InMemoryDBReplicaSetMaintenanceWindowArgs>> maintenanceWindow() {
        return Optional.ofNullable(this.maintenanceWindow);
    }

    /**
     * [string] Specifies How and If data is persisted, possible values are:
     * * `None` - Data is inMemory only and will not be persisted. Useful for cache only applications.
     * * `AOF` - (Append Only File) AOF persistence logs every write operation received by the server. These operations can then be replayed again at server startup, reconstructing the original dataset. Commands are logged using the same format as the InMemoryDB protocol itself.
     * * `RDB` - RDB persistence performs snapshots of the current in memory state.
     * * `RDB_AOF` - Both RDB and AOF persistence are enabled.
     * 
     */
    @Import(name="persistenceMode", required=true)
    private Output<String> persistenceMode;

    /**
     * @return [string] Specifies How and If data is persisted, possible values are:
     * * `None` - Data is inMemory only and will not be persisted. Useful for cache only applications.
     * * `AOF` - (Append Only File) AOF persistence logs every write operation received by the server. These operations can then be replayed again at server startup, reconstructing the original dataset. Commands are logged using the same format as the InMemoryDB protocol itself.
     * * `RDB` - RDB persistence performs snapshots of the current in memory state.
     * * `RDB_AOF` - Both RDB and AOF persistence are enabled.
     * 
     */
    public Output<String> persistenceMode() {
        return this.persistenceMode;
    }

    /**
     * [int] The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the value is 1. In all other cases, the value is &gt; 1. The replicas will not be available as read replicas, they are only standby for a failure of the active instance.
     * 
     */
    @Import(name="replicas", required=true)
    private Output<Integer> replicas;

    /**
     * @return [int] The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the value is 1. In all other cases, the value is &gt; 1. The replicas will not be available as read replicas, they are only standby for a failure of the active instance.
     * 
     */
    public Output<Integer> replicas() {
        return this.replicas;
    }

    /**
     * [object] The resources of the individual replicas.
     * 
     */
    @Import(name="resources", required=true)
    private Output<InMemoryDBReplicaSetResourcesArgs> resources;

    /**
     * @return [object] The resources of the individual replicas.
     * 
     */
    public Output<InMemoryDBReplicaSetResourcesArgs> resources() {
        return this.resources;
    }

    /**
     * [string] The InMemoryDB version of your replica set.
     * 
     */
    @Import(name="version", required=true)
    private Output<String> version;

    /**
     * @return [string] The InMemoryDB version of your replica set.
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    private InMemoryDBReplicaSetArgs() {}

    private InMemoryDBReplicaSetArgs(InMemoryDBReplicaSetArgs $) {
        this.connections = $.connections;
        this.credentials = $.credentials;
        this.displayName = $.displayName;
        this.evictionPolicy = $.evictionPolicy;
        this.initialSnapshotId = $.initialSnapshotId;
        this.location = $.location;
        this.maintenanceWindow = $.maintenanceWindow;
        this.persistenceMode = $.persistenceMode;
        this.replicas = $.replicas;
        this.resources = $.resources;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InMemoryDBReplicaSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InMemoryDBReplicaSetArgs $;

        public Builder() {
            $ = new InMemoryDBReplicaSetArgs();
        }

        public Builder(InMemoryDBReplicaSetArgs defaults) {
            $ = new InMemoryDBReplicaSetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connections [object] The network connection for your replica set. Only one connection is allowed. Updates to the value of the fields force the replica set to be re-created.
         * 
         * @return builder
         * 
         */
        public Builder connections(Output<InMemoryDBReplicaSetConnectionsArgs> connections) {
            $.connections = connections;
            return this;
        }

        /**
         * @param connections [object] The network connection for your replica set. Only one connection is allowed. Updates to the value of the fields force the replica set to be re-created.
         * 
         * @return builder
         * 
         */
        public Builder connections(InMemoryDBReplicaSetConnectionsArgs connections) {
            return connections(Output.of(connections));
        }

        /**
         * @param credentials [object] Credentials for the InMemoryDB replicaset, only one type of password can be used since they are mutually exclusive. These values are used to create the initial InMemoryDB user, updating any of these will force recreation of the replica set resource.
         * 
         * @return builder
         * 
         */
        public Builder credentials(Output<InMemoryDBReplicaSetCredentialsArgs> credentials) {
            $.credentials = credentials;
            return this;
        }

        /**
         * @param credentials [object] Credentials for the InMemoryDB replicaset, only one type of password can be used since they are mutually exclusive. These values are used to create the initial InMemoryDB user, updating any of these will force recreation of the replica set resource.
         * 
         * @return builder
         * 
         */
        public Builder credentials(InMemoryDBReplicaSetCredentialsArgs credentials) {
            return credentials(Output.of(credentials));
        }

        /**
         * @param displayName [string] The human-readable name of your replica set.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName [string] The human-readable name of your replica set.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param evictionPolicy [string] The eviction policy for the replica set, possible values are:
         * 
         * @return builder
         * 
         */
        public Builder evictionPolicy(Output<String> evictionPolicy) {
            $.evictionPolicy = evictionPolicy;
            return this;
        }

        /**
         * @param evictionPolicy [string] The eviction policy for the replica set, possible values are:
         * 
         * @return builder
         * 
         */
        public Builder evictionPolicy(String evictionPolicy) {
            return evictionPolicy(Output.of(evictionPolicy));
        }

        /**
         * @param initialSnapshotId [string] The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder initialSnapshotId(@Nullable Output<String> initialSnapshotId) {
            $.initialSnapshotId = initialSnapshotId;
            return this;
        }

        /**
         * @param initialSnapshotId [string] The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder initialSnapshotId(String initialSnapshotId) {
            return initialSnapshotId(Output.of(initialSnapshotId));
        }

        /**
         * @param location [string] The location of your replica set. Updates to the value of the field force the replica set to be re-created. If this is not set and if no value is provided for the `IONOS_API_URL` env var, the default `location` will be: `de/fra`.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location [string] The location of your replica set. Updates to the value of the field force the replica set to be re-created. If this is not set and if no value is provided for the `IONOS_API_URL` env var, the default `location` will be: `de/fra`.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param maintenanceWindow (Computed) A weekly 4 hour-long window, during which maintenance might occur.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindow(@Nullable Output<InMemoryDBReplicaSetMaintenanceWindowArgs> maintenanceWindow) {
            $.maintenanceWindow = maintenanceWindow;
            return this;
        }

        /**
         * @param maintenanceWindow (Computed) A weekly 4 hour-long window, during which maintenance might occur.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindow(InMemoryDBReplicaSetMaintenanceWindowArgs maintenanceWindow) {
            return maintenanceWindow(Output.of(maintenanceWindow));
        }

        /**
         * @param persistenceMode [string] Specifies How and If data is persisted, possible values are:
         * * `None` - Data is inMemory only and will not be persisted. Useful for cache only applications.
         * * `AOF` - (Append Only File) AOF persistence logs every write operation received by the server. These operations can then be replayed again at server startup, reconstructing the original dataset. Commands are logged using the same format as the InMemoryDB protocol itself.
         * * `RDB` - RDB persistence performs snapshots of the current in memory state.
         * * `RDB_AOF` - Both RDB and AOF persistence are enabled.
         * 
         * @return builder
         * 
         */
        public Builder persistenceMode(Output<String> persistenceMode) {
            $.persistenceMode = persistenceMode;
            return this;
        }

        /**
         * @param persistenceMode [string] Specifies How and If data is persisted, possible values are:
         * * `None` - Data is inMemory only and will not be persisted. Useful for cache only applications.
         * * `AOF` - (Append Only File) AOF persistence logs every write operation received by the server. These operations can then be replayed again at server startup, reconstructing the original dataset. Commands are logged using the same format as the InMemoryDB protocol itself.
         * * `RDB` - RDB persistence performs snapshots of the current in memory state.
         * * `RDB_AOF` - Both RDB and AOF persistence are enabled.
         * 
         * @return builder
         * 
         */
        public Builder persistenceMode(String persistenceMode) {
            return persistenceMode(Output.of(persistenceMode));
        }

        /**
         * @param replicas [int] The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the value is 1. In all other cases, the value is &gt; 1. The replicas will not be available as read replicas, they are only standby for a failure of the active instance.
         * 
         * @return builder
         * 
         */
        public Builder replicas(Output<Integer> replicas) {
            $.replicas = replicas;
            return this;
        }

        /**
         * @param replicas [int] The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the value is 1. In all other cases, the value is &gt; 1. The replicas will not be available as read replicas, they are only standby for a failure of the active instance.
         * 
         * @return builder
         * 
         */
        public Builder replicas(Integer replicas) {
            return replicas(Output.of(replicas));
        }

        /**
         * @param resources [object] The resources of the individual replicas.
         * 
         * @return builder
         * 
         */
        public Builder resources(Output<InMemoryDBReplicaSetResourcesArgs> resources) {
            $.resources = resources;
            return this;
        }

        /**
         * @param resources [object] The resources of the individual replicas.
         * 
         * @return builder
         * 
         */
        public Builder resources(InMemoryDBReplicaSetResourcesArgs resources) {
            return resources(Output.of(resources));
        }

        /**
         * @param version [string] The InMemoryDB version of your replica set.
         * 
         * @return builder
         * 
         */
        public Builder version(Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version [string] The InMemoryDB version of your replica set.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public InMemoryDBReplicaSetArgs build() {
            if ($.connections == null) {
                throw new MissingRequiredPropertyException("InMemoryDBReplicaSetArgs", "connections");
            }
            if ($.credentials == null) {
                throw new MissingRequiredPropertyException("InMemoryDBReplicaSetArgs", "credentials");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("InMemoryDBReplicaSetArgs", "displayName");
            }
            if ($.evictionPolicy == null) {
                throw new MissingRequiredPropertyException("InMemoryDBReplicaSetArgs", "evictionPolicy");
            }
            if ($.persistenceMode == null) {
                throw new MissingRequiredPropertyException("InMemoryDBReplicaSetArgs", "persistenceMode");
            }
            if ($.replicas == null) {
                throw new MissingRequiredPropertyException("InMemoryDBReplicaSetArgs", "replicas");
            }
            if ($.resources == null) {
                throw new MissingRequiredPropertyException("InMemoryDBReplicaSetArgs", "resources");
            }
            if ($.version == null) {
                throw new MissingRequiredPropertyException("InMemoryDBReplicaSetArgs", "version");
            }
            return $;
        }
    }

}
