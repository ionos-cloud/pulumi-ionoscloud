// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.vpn;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.vpn.inputs.WireguardPeerEndpointArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WireguardPeerArgs extends com.pulumi.resources.ResourceArgs {

    public static final WireguardPeerArgs Empty = new WireguardPeerArgs();

    /**
     * [list, string] A list of subnet CIDRs that are allowed to connect to the WireGuard Gateway.
     * 
     */
    @Import(name="allowedIps", required=true)
    private Output<List<String>> allowedIps;

    /**
     * @return [list, string] A list of subnet CIDRs that are allowed to connect to the WireGuard Gateway.
     * 
     */
    public Output<List<String>> allowedIps() {
        return this.allowedIps;
    }

    /**
     * [string] A description of the WireGuard Gateway.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return [string] A description of the WireGuard Gateway.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * [block] An endpoint configuration block for the WireGuard Gateway. The structure of this block is as follows:
     * 
     */
    @Import(name="endpoint")
    private @Nullable Output<WireguardPeerEndpointArgs> endpoint;

    /**
     * @return [block] An endpoint configuration block for the WireGuard Gateway. The structure of this block is as follows:
     * 
     */
    public Optional<Output<WireguardPeerEndpointArgs>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * [string] The ID of the WireGuard Gateway that the Peer will connect to.
     * 
     */
    @Import(name="gatewayId", required=true)
    private Output<String> gatewayId;

    /**
     * @return [string] The ID of the WireGuard Gateway that the Peer will connect to.
     * 
     */
    public Output<String> gatewayId() {
        return this.gatewayId;
    }

    /**
     * [string] The location of the WireGuard Gateway.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return [string] The location of the WireGuard Gateway.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * [string] The human-readable name of the WireGuard Gateway.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return [string] The human-readable name of the WireGuard Gateway.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * [string] The public key for the WireGuard Gateway.
     * 
     */
    @Import(name="publicKey", required=true)
    private Output<String> publicKey;

    /**
     * @return [string] The public key for the WireGuard Gateway.
     * 
     */
    public Output<String> publicKey() {
        return this.publicKey;
    }

    private WireguardPeerArgs() {}

    private WireguardPeerArgs(WireguardPeerArgs $) {
        this.allowedIps = $.allowedIps;
        this.description = $.description;
        this.endpoint = $.endpoint;
        this.gatewayId = $.gatewayId;
        this.location = $.location;
        this.name = $.name;
        this.publicKey = $.publicKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WireguardPeerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WireguardPeerArgs $;

        public Builder() {
            $ = new WireguardPeerArgs();
        }

        public Builder(WireguardPeerArgs defaults) {
            $ = new WireguardPeerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedIps [list, string] A list of subnet CIDRs that are allowed to connect to the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder allowedIps(Output<List<String>> allowedIps) {
            $.allowedIps = allowedIps;
            return this;
        }

        /**
         * @param allowedIps [list, string] A list of subnet CIDRs that are allowed to connect to the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder allowedIps(List<String> allowedIps) {
            return allowedIps(Output.of(allowedIps));
        }

        /**
         * @param allowedIps [list, string] A list of subnet CIDRs that are allowed to connect to the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder allowedIps(String... allowedIps) {
            return allowedIps(List.of(allowedIps));
        }

        /**
         * @param description [string] A description of the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description [string] A description of the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param endpoint [block] An endpoint configuration block for the WireGuard Gateway. The structure of this block is as follows:
         * 
         * @return builder
         * 
         */
        public Builder endpoint(@Nullable Output<WireguardPeerEndpointArgs> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint [block] An endpoint configuration block for the WireGuard Gateway. The structure of this block is as follows:
         * 
         * @return builder
         * 
         */
        public Builder endpoint(WireguardPeerEndpointArgs endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param gatewayId [string] The ID of the WireGuard Gateway that the Peer will connect to.
         * 
         * @return builder
         * 
         */
        public Builder gatewayId(Output<String> gatewayId) {
            $.gatewayId = gatewayId;
            return this;
        }

        /**
         * @param gatewayId [string] The ID of the WireGuard Gateway that the Peer will connect to.
         * 
         * @return builder
         * 
         */
        public Builder gatewayId(String gatewayId) {
            return gatewayId(Output.of(gatewayId));
        }

        /**
         * @param location [string] The location of the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location [string] The location of the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name [string] The human-readable name of the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [string] The human-readable name of the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param publicKey [string] The public key for the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(Output<String> publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        /**
         * @param publicKey [string] The public key for the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(String publicKey) {
            return publicKey(Output.of(publicKey));
        }

        public WireguardPeerArgs build() {
            if ($.allowedIps == null) {
                throw new MissingRequiredPropertyException("WireguardPeerArgs", "allowedIps");
            }
            if ($.gatewayId == null) {
                throw new MissingRequiredPropertyException("WireguardPeerArgs", "gatewayId");
            }
            if ($.publicKey == null) {
                throw new MissingRequiredPropertyException("WireguardPeerArgs", "publicKey");
            }
            return $;
        }
    }

}
