// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.compute.inputs.ServerLabelArgs;
import com.pulumi.ionoscloud.compute.inputs.ServerNicArgs;
import com.pulumi.ionoscloud.compute.inputs.ServerVolumeArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerArgs Empty = new ServerArgs();

    /**
     * [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the server.
     * 
     * ⚠️ **_Warning: `allow_replace` - lets you update immutable fields, but it first destroys and then re-creates the server in order to do it. This field should be used with care, understanding the risks._**
     * 
     * &gt; **⚠ WARNING**
     * &gt; 
     * &gt; Image_name under volume level is deprecated, please use image_name under server level
     * ssh_key_path and ssh_keys fields are immutable.
     * 
     * &gt; **⚠ WARNING**
     * &gt; 
     * &gt; If you want to create a **CUBE** server, you have to provide the `template_uuid`. In this case you can not set `cores`, `ram` and `volume.size` arguments, these being mutually exclusive with `template_uuid`.
     * &gt; 
     * &gt; In all the other cases (**ENTERPRISE** servers) you have to provide values for `cores`, `ram` and `volume size`.
     * 
     */
    @Import(name="allowReplace")
    private @Nullable Output<Boolean> allowReplace;

    /**
     * @return [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the server.
     * 
     * ⚠️ **_Warning: `allow_replace` - lets you update immutable fields, but it first destroys and then re-creates the server in order to do it. This field should be used with care, understanding the risks._**
     * 
     * &gt; **⚠ WARNING**
     * &gt; 
     * &gt; Image_name under volume level is deprecated, please use image_name under server level
     * ssh_key_path and ssh_keys fields are immutable.
     * 
     * &gt; **⚠ WARNING**
     * &gt; 
     * &gt; If you want to create a **CUBE** server, you have to provide the `template_uuid`. In this case you can not set `cores`, `ram` and `volume.size` arguments, these being mutually exclusive with `template_uuid`.
     * &gt; 
     * &gt; In all the other cases (**ENTERPRISE** servers) you have to provide values for `cores`, `ram` and `volume size`.
     * 
     */
    public Optional<Output<Boolean>> allowReplace() {
        return Optional.ofNullable(this.allowReplace);
    }

    /**
     * [string] The availability zone in which the server should exist. E.g: `AUTO`, `ZONE_1`, `ZONE_2`. This property is immutable.
     * 
     */
    @Import(name="availabilityZone")
    private @Nullable Output<String> availabilityZone;

    /**
     * @return [string] The availability zone in which the server should exist. E.g: `AUTO`, `ZONE_1`, `ZONE_2`. This property is immutable.
     * 
     */
    public Optional<Output<String>> availabilityZone() {
        return Optional.ofNullable(this.availabilityZone);
    }

    /**
     * ***DEPRECATED*** Please refer to ionoscloud.compute.BootDeviceSelection (Optional)(Computed)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the ionoscloud.compute.getImage data source.
     * 
     * @deprecated
     * Please use the &#39;ionoscloud_server_boot_device_selection&#39; resource for managing the boot device of the server.
     * 
     */
    @Deprecated /* Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server. */
    @Import(name="bootCdrom")
    private @Nullable Output<String> bootCdrom;

    /**
     * @return ***DEPRECATED*** Please refer to ionoscloud.compute.BootDeviceSelection (Optional)(Computed)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the ionoscloud.compute.getImage data source.
     * 
     * @deprecated
     * Please use the &#39;ionoscloud_server_boot_device_selection&#39; resource for managing the boot device of the server.
     * 
     */
    @Deprecated /* Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server. */
    public Optional<Output<String>> bootCdrom() {
        return Optional.ofNullable(this.bootCdrom);
    }

    /**
     * [string] The image or snapshot UUID / name. May also be an image alias. It is required if `licence_type` is not provided.
     * 
     */
    @Import(name="bootImage")
    private @Nullable Output<String> bootImage;

    /**
     * @return [string] The image or snapshot UUID / name. May also be an image alias. It is required if `licence_type` is not provided.
     * 
     */
    public Optional<Output<String>> bootImage() {
        return Optional.ofNullable(this.bootImage);
    }

    /**
     * (Computed)[integer] Number of server CPU cores.
     * 
     */
    @Import(name="cores")
    private @Nullable Output<Integer> cores;

    /**
     * @return (Computed)[integer] Number of server CPU cores.
     * 
     */
    public Optional<Output<Integer>> cores() {
        return Optional.ofNullable(this.cores);
    }

    /**
     * [string] CPU architecture on which server gets provisioned; not all CPU architectures are available in all datacenter regions; available CPU architectures can be retrieved from the datacenter resource. E.g.: &#34;INTEL_SKYLAKE&#34; or &#34;INTEL_XEON&#34;.
     * 
     */
    @Import(name="cpuFamily")
    private @Nullable Output<String> cpuFamily;

    /**
     * @return [string] CPU architecture on which server gets provisioned; not all CPU architectures are available in all datacenter regions; available CPU architectures can be retrieved from the datacenter resource. E.g.: &#34;INTEL_SKYLAKE&#34; or &#34;INTEL_XEON&#34;.
     * 
     */
    public Optional<Output<String>> cpuFamily() {
        return Optional.ofNullable(this.cpuFamily);
    }

    /**
     * [string] The ID of a Virtual Data Center.
     * 
     */
    @Import(name="datacenterId", required=true)
    private Output<String> datacenterId;

    /**
     * @return [string] The ID of a Virtual Data Center.
     * 
     */
    public Output<String> datacenterId() {
        return this.datacenterId;
    }

    /**
     * The associated firewall rules.
     * 
     */
    @Import(name="firewallruleIds")
    private @Nullable Output<List<String>> firewallruleIds;

    /**
     * @return The associated firewall rules.
     * 
     */
    public Optional<Output<List<String>>> firewallruleIds() {
        return Optional.ofNullable(this.firewallruleIds);
    }

    /**
     * (Computed)[string] The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return (Computed)[string] The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licence_type` is not provided. Attribute is immutable.
     * 
     */
    @Import(name="imageName")
    private @Nullable Output<String> imageName;

    /**
     * @return [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licence_type` is not provided. Attribute is immutable.
     * 
     */
    public Optional<Output<String>> imageName() {
        return Optional.ofNullable(this.imageName);
    }

    /**
     * [string] Required if `ssh_key_path` is not provided.
     * 
     */
    @Import(name="imagePassword")
    private @Nullable Output<String> imagePassword;

    /**
     * @return [string] Required if `ssh_key_path` is not provided.
     * 
     */
    public Optional<Output<String>> imagePassword() {
        return Optional.ofNullable(this.imagePassword);
    }

    /**
     * [set] A label can be seen as an object with only two required fields: `key` and `value`, both of the `string` type. Please check the example presented above to see how a `label` can be used in the plan. A server can have multiple labels.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<ServerLabelArgs>> labels;

    /**
     * @return [set] A label can be seen as an object with only two required fields: `key` and `value`, both of the `string` type. Please check the example presented above to see how a `label` can be used in the plan. A server can have multiple labels.
     * 
     */
    public Optional<Output<List<ServerLabelArgs>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * [string] The name of the server.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return [string] The name of the server.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * See the Nic section.
     * 
     */
    @Import(name="nic")
    private @Nullable Output<ServerNicArgs> nic;

    /**
     * @return See the Nic section.
     * 
     */
    public Optional<Output<ServerNicArgs>> nic() {
        return Optional.ofNullable(this.nic);
    }

    /**
     * (Computed)[integer] The amount of memory for the server in MB.
     * 
     */
    @Import(name="ram")
    private @Nullable Output<Integer> ram;

    /**
     * @return (Computed)[integer] The amount of memory for the server in MB.
     * 
     */
    public Optional<Output<Integer>> ram() {
        return Optional.ofNullable(this.ram);
    }

    /**
     * The list of Security Group IDs for the
     * 
     */
    @Import(name="securityGroupsIds")
    private @Nullable Output<List<String>> securityGroupsIds;

    /**
     * @return The list of Security Group IDs for the
     * 
     */
    public Optional<Output<List<String>>> securityGroupsIds() {
        return Optional.ofNullable(this.securityGroupsIds);
    }

    /**
     * [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images.  Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. Does not support `~` expansion to homedir in the given path. This property is immutable.
     * 
     * @deprecated
     * Will be renamed to ssh_keys in the future, to allow users to set both the ssh key path or directly the ssh key
     * 
     */
    @Deprecated /* Will be renamed to ssh_keys in the future, to allow users to set both the ssh key path or directly the ssh key */
    @Import(name="sshKeyPaths")
    private @Nullable Output<List<String>> sshKeyPaths;

    /**
     * @return [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images.  Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. Does not support `~` expansion to homedir in the given path. This property is immutable.
     * 
     * @deprecated
     * Will be renamed to ssh_keys in the future, to allow users to set both the ssh key path or directly the ssh key
     * 
     */
    @Deprecated /* Will be renamed to ssh_keys in the future, to allow users to set both the ssh key path or directly the ssh key */
    public Optional<Output<List<String>>> sshKeyPaths() {
        return Optional.ofNullable(this.sshKeyPaths);
    }

    /**
     * [list] Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is used for the volume creation. Does not support `~` expansion to homedir in the given path.
     * 
     */
    @Import(name="sshKeys")
    private @Nullable Output<List<String>> sshKeys;

    /**
     * @return [list] Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is used for the volume creation. Does not support `~` expansion to homedir in the given path.
     * 
     */
    public Optional<Output<List<String>>> sshKeys() {
        return Optional.ofNullable(this.sshKeys);
    }

    /**
     * [string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
     * 
     */
    @Import(name="templateUuid")
    private @Nullable Output<String> templateUuid;

    /**
     * @return [string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
     * 
     */
    public Optional<Output<String>> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    /**
     * (Computed)[string] Server usages: [ENTERPRISE](https://docs.ionos.com/cloud/compute-engine/virtual-servers/virtual-servers) or [CUBE](https://docs.ionos.com/cloud/compute-engine/virtual-servers/cloud-cubes). This property is immutable.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return (Computed)[string] Server usages: [ENTERPRISE](https://docs.ionos.com/cloud/compute-engine/virtual-servers/virtual-servers) or [CUBE](https://docs.ionos.com/cloud/compute-engine/virtual-servers/cloud-cubes). This property is immutable.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * [string] Sets the power state of the server. E.g: `RUNNING`, `SHUTOFF` or `SUSPENDED`. SUSPENDED state is only valid for cube. SHUTOFF state is only valid for enterprise.
     * 
     */
    @Import(name="vmState")
    private @Nullable Output<String> vmState;

    /**
     * @return [string] Sets the power state of the server. E.g: `RUNNING`, `SHUTOFF` or `SUSPENDED`. SUSPENDED state is only valid for cube. SHUTOFF state is only valid for enterprise.
     * 
     */
    public Optional<Output<String>> vmState() {
        return Optional.ofNullable(this.vmState);
    }

    /**
     * See the Volume section.
     * 
     */
    @Import(name="volume", required=true)
    private Output<ServerVolumeArgs> volume;

    /**
     * @return See the Volume section.
     * 
     */
    public Output<ServerVolumeArgs> volume() {
        return this.volume;
    }

    private ServerArgs() {}

    private ServerArgs(ServerArgs $) {
        this.allowReplace = $.allowReplace;
        this.availabilityZone = $.availabilityZone;
        this.bootCdrom = $.bootCdrom;
        this.bootImage = $.bootImage;
        this.cores = $.cores;
        this.cpuFamily = $.cpuFamily;
        this.datacenterId = $.datacenterId;
        this.firewallruleIds = $.firewallruleIds;
        this.hostname = $.hostname;
        this.imageName = $.imageName;
        this.imagePassword = $.imagePassword;
        this.labels = $.labels;
        this.name = $.name;
        this.nic = $.nic;
        this.ram = $.ram;
        this.securityGroupsIds = $.securityGroupsIds;
        this.sshKeyPaths = $.sshKeyPaths;
        this.sshKeys = $.sshKeys;
        this.templateUuid = $.templateUuid;
        this.type = $.type;
        this.vmState = $.vmState;
        this.volume = $.volume;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerArgs $;

        public Builder() {
            $ = new ServerArgs();
        }

        public Builder(ServerArgs defaults) {
            $ = new ServerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowReplace [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the server.
         * 
         * ⚠️ **_Warning: `allow_replace` - lets you update immutable fields, but it first destroys and then re-creates the server in order to do it. This field should be used with care, understanding the risks._**
         * 
         * &gt; **⚠ WARNING**
         * &gt; 
         * &gt; Image_name under volume level is deprecated, please use image_name under server level
         * ssh_key_path and ssh_keys fields are immutable.
         * 
         * &gt; **⚠ WARNING**
         * &gt; 
         * &gt; If you want to create a **CUBE** server, you have to provide the `template_uuid`. In this case you can not set `cores`, `ram` and `volume.size` arguments, these being mutually exclusive with `template_uuid`.
         * &gt; 
         * &gt; In all the other cases (**ENTERPRISE** servers) you have to provide values for `cores`, `ram` and `volume size`.
         * 
         * @return builder
         * 
         */
        public Builder allowReplace(@Nullable Output<Boolean> allowReplace) {
            $.allowReplace = allowReplace;
            return this;
        }

        /**
         * @param allowReplace [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the server.
         * 
         * ⚠️ **_Warning: `allow_replace` - lets you update immutable fields, but it first destroys and then re-creates the server in order to do it. This field should be used with care, understanding the risks._**
         * 
         * &gt; **⚠ WARNING**
         * &gt; 
         * &gt; Image_name under volume level is deprecated, please use image_name under server level
         * ssh_key_path and ssh_keys fields are immutable.
         * 
         * &gt; **⚠ WARNING**
         * &gt; 
         * &gt; If you want to create a **CUBE** server, you have to provide the `template_uuid`. In this case you can not set `cores`, `ram` and `volume.size` arguments, these being mutually exclusive with `template_uuid`.
         * &gt; 
         * &gt; In all the other cases (**ENTERPRISE** servers) you have to provide values for `cores`, `ram` and `volume size`.
         * 
         * @return builder
         * 
         */
        public Builder allowReplace(Boolean allowReplace) {
            return allowReplace(Output.of(allowReplace));
        }

        /**
         * @param availabilityZone [string] The availability zone in which the server should exist. E.g: `AUTO`, `ZONE_1`, `ZONE_2`. This property is immutable.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZone(@Nullable Output<String> availabilityZone) {
            $.availabilityZone = availabilityZone;
            return this;
        }

        /**
         * @param availabilityZone [string] The availability zone in which the server should exist. E.g: `AUTO`, `ZONE_1`, `ZONE_2`. This property is immutable.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZone(String availabilityZone) {
            return availabilityZone(Output.of(availabilityZone));
        }

        /**
         * @param bootCdrom ***DEPRECATED*** Please refer to ionoscloud.compute.BootDeviceSelection (Optional)(Computed)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the ionoscloud.compute.getImage data source.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use the &#39;ionoscloud_server_boot_device_selection&#39; resource for managing the boot device of the server.
         * 
         */
        @Deprecated /* Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server. */
        public Builder bootCdrom(@Nullable Output<String> bootCdrom) {
            $.bootCdrom = bootCdrom;
            return this;
        }

        /**
         * @param bootCdrom ***DEPRECATED*** Please refer to ionoscloud.compute.BootDeviceSelection (Optional)(Computed)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the ionoscloud.compute.getImage data source.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use the &#39;ionoscloud_server_boot_device_selection&#39; resource for managing the boot device of the server.
         * 
         */
        @Deprecated /* Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server. */
        public Builder bootCdrom(String bootCdrom) {
            return bootCdrom(Output.of(bootCdrom));
        }

        /**
         * @param bootImage [string] The image or snapshot UUID / name. May also be an image alias. It is required if `licence_type` is not provided.
         * 
         * @return builder
         * 
         */
        public Builder bootImage(@Nullable Output<String> bootImage) {
            $.bootImage = bootImage;
            return this;
        }

        /**
         * @param bootImage [string] The image or snapshot UUID / name. May also be an image alias. It is required if `licence_type` is not provided.
         * 
         * @return builder
         * 
         */
        public Builder bootImage(String bootImage) {
            return bootImage(Output.of(bootImage));
        }

        /**
         * @param cores (Computed)[integer] Number of server CPU cores.
         * 
         * @return builder
         * 
         */
        public Builder cores(@Nullable Output<Integer> cores) {
            $.cores = cores;
            return this;
        }

        /**
         * @param cores (Computed)[integer] Number of server CPU cores.
         * 
         * @return builder
         * 
         */
        public Builder cores(Integer cores) {
            return cores(Output.of(cores));
        }

        /**
         * @param cpuFamily [string] CPU architecture on which server gets provisioned; not all CPU architectures are available in all datacenter regions; available CPU architectures can be retrieved from the datacenter resource. E.g.: &#34;INTEL_SKYLAKE&#34; or &#34;INTEL_XEON&#34;.
         * 
         * @return builder
         * 
         */
        public Builder cpuFamily(@Nullable Output<String> cpuFamily) {
            $.cpuFamily = cpuFamily;
            return this;
        }

        /**
         * @param cpuFamily [string] CPU architecture on which server gets provisioned; not all CPU architectures are available in all datacenter regions; available CPU architectures can be retrieved from the datacenter resource. E.g.: &#34;INTEL_SKYLAKE&#34; or &#34;INTEL_XEON&#34;.
         * 
         * @return builder
         * 
         */
        public Builder cpuFamily(String cpuFamily) {
            return cpuFamily(Output.of(cpuFamily));
        }

        /**
         * @param datacenterId [string] The ID of a Virtual Data Center.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(Output<String> datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        /**
         * @param datacenterId [string] The ID of a Virtual Data Center.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(String datacenterId) {
            return datacenterId(Output.of(datacenterId));
        }

        /**
         * @param firewallruleIds The associated firewall rules.
         * 
         * @return builder
         * 
         */
        public Builder firewallruleIds(@Nullable Output<List<String>> firewallruleIds) {
            $.firewallruleIds = firewallruleIds;
            return this;
        }

        /**
         * @param firewallruleIds The associated firewall rules.
         * 
         * @return builder
         * 
         */
        public Builder firewallruleIds(List<String> firewallruleIds) {
            return firewallruleIds(Output.of(firewallruleIds));
        }

        /**
         * @param firewallruleIds The associated firewall rules.
         * 
         * @return builder
         * 
         */
        public Builder firewallruleIds(String... firewallruleIds) {
            return firewallruleIds(List.of(firewallruleIds));
        }

        /**
         * @param hostname (Computed)[string] The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname (Computed)[string] The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param imageName [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licence_type` is not provided. Attribute is immutable.
         * 
         * @return builder
         * 
         */
        public Builder imageName(@Nullable Output<String> imageName) {
            $.imageName = imageName;
            return this;
        }

        /**
         * @param imageName [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licence_type` is not provided. Attribute is immutable.
         * 
         * @return builder
         * 
         */
        public Builder imageName(String imageName) {
            return imageName(Output.of(imageName));
        }

        /**
         * @param imagePassword [string] Required if `ssh_key_path` is not provided.
         * 
         * @return builder
         * 
         */
        public Builder imagePassword(@Nullable Output<String> imagePassword) {
            $.imagePassword = imagePassword;
            return this;
        }

        /**
         * @param imagePassword [string] Required if `ssh_key_path` is not provided.
         * 
         * @return builder
         * 
         */
        public Builder imagePassword(String imagePassword) {
            return imagePassword(Output.of(imagePassword));
        }

        /**
         * @param labels [set] A label can be seen as an object with only two required fields: `key` and `value`, both of the `string` type. Please check the example presented above to see how a `label` can be used in the plan. A server can have multiple labels.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<List<ServerLabelArgs>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels [set] A label can be seen as an object with only two required fields: `key` and `value`, both of the `string` type. Please check the example presented above to see how a `label` can be used in the plan. A server can have multiple labels.
         * 
         * @return builder
         * 
         */
        public Builder labels(List<ServerLabelArgs> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param labels [set] A label can be seen as an object with only two required fields: `key` and `value`, both of the `string` type. Please check the example presented above to see how a `label` can be used in the plan. A server can have multiple labels.
         * 
         * @return builder
         * 
         */
        public Builder labels(ServerLabelArgs... labels) {
            return labels(List.of(labels));
        }

        /**
         * @param name [string] The name of the server.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [string] The name of the server.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nic See the Nic section.
         * 
         * @return builder
         * 
         */
        public Builder nic(@Nullable Output<ServerNicArgs> nic) {
            $.nic = nic;
            return this;
        }

        /**
         * @param nic See the Nic section.
         * 
         * @return builder
         * 
         */
        public Builder nic(ServerNicArgs nic) {
            return nic(Output.of(nic));
        }

        /**
         * @param ram (Computed)[integer] The amount of memory for the server in MB.
         * 
         * @return builder
         * 
         */
        public Builder ram(@Nullable Output<Integer> ram) {
            $.ram = ram;
            return this;
        }

        /**
         * @param ram (Computed)[integer] The amount of memory for the server in MB.
         * 
         * @return builder
         * 
         */
        public Builder ram(Integer ram) {
            return ram(Output.of(ram));
        }

        /**
         * @param securityGroupsIds The list of Security Group IDs for the
         * 
         * @return builder
         * 
         */
        public Builder securityGroupsIds(@Nullable Output<List<String>> securityGroupsIds) {
            $.securityGroupsIds = securityGroupsIds;
            return this;
        }

        /**
         * @param securityGroupsIds The list of Security Group IDs for the
         * 
         * @return builder
         * 
         */
        public Builder securityGroupsIds(List<String> securityGroupsIds) {
            return securityGroupsIds(Output.of(securityGroupsIds));
        }

        /**
         * @param securityGroupsIds The list of Security Group IDs for the
         * 
         * @return builder
         * 
         */
        public Builder securityGroupsIds(String... securityGroupsIds) {
            return securityGroupsIds(List.of(securityGroupsIds));
        }

        /**
         * @param sshKeyPaths [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images.  Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. Does not support `~` expansion to homedir in the given path. This property is immutable.
         * 
         * @return builder
         * 
         * @deprecated
         * Will be renamed to ssh_keys in the future, to allow users to set both the ssh key path or directly the ssh key
         * 
         */
        @Deprecated /* Will be renamed to ssh_keys in the future, to allow users to set both the ssh key path or directly the ssh key */
        public Builder sshKeyPaths(@Nullable Output<List<String>> sshKeyPaths) {
            $.sshKeyPaths = sshKeyPaths;
            return this;
        }

        /**
         * @param sshKeyPaths [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images.  Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. Does not support `~` expansion to homedir in the given path. This property is immutable.
         * 
         * @return builder
         * 
         * @deprecated
         * Will be renamed to ssh_keys in the future, to allow users to set both the ssh key path or directly the ssh key
         * 
         */
        @Deprecated /* Will be renamed to ssh_keys in the future, to allow users to set both the ssh key path or directly the ssh key */
        public Builder sshKeyPaths(List<String> sshKeyPaths) {
            return sshKeyPaths(Output.of(sshKeyPaths));
        }

        /**
         * @param sshKeyPaths [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images.  Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. Does not support `~` expansion to homedir in the given path. This property is immutable.
         * 
         * @return builder
         * 
         * @deprecated
         * Will be renamed to ssh_keys in the future, to allow users to set both the ssh key path or directly the ssh key
         * 
         */
        @Deprecated /* Will be renamed to ssh_keys in the future, to allow users to set both the ssh key path or directly the ssh key */
        public Builder sshKeyPaths(String... sshKeyPaths) {
            return sshKeyPaths(List.of(sshKeyPaths));
        }

        /**
         * @param sshKeys [list] Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is used for the volume creation. Does not support `~` expansion to homedir in the given path.
         * 
         * @return builder
         * 
         */
        public Builder sshKeys(@Nullable Output<List<String>> sshKeys) {
            $.sshKeys = sshKeys;
            return this;
        }

        /**
         * @param sshKeys [list] Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is used for the volume creation. Does not support `~` expansion to homedir in the given path.
         * 
         * @return builder
         * 
         */
        public Builder sshKeys(List<String> sshKeys) {
            return sshKeys(Output.of(sshKeys));
        }

        /**
         * @param sshKeys [list] Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is used for the volume creation. Does not support `~` expansion to homedir in the given path.
         * 
         * @return builder
         * 
         */
        public Builder sshKeys(String... sshKeys) {
            return sshKeys(List.of(sshKeys));
        }

        /**
         * @param templateUuid [string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(@Nullable Output<String> templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        /**
         * @param templateUuid [string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(String templateUuid) {
            return templateUuid(Output.of(templateUuid));
        }

        /**
         * @param type (Computed)[string] Server usages: [ENTERPRISE](https://docs.ionos.com/cloud/compute-engine/virtual-servers/virtual-servers) or [CUBE](https://docs.ionos.com/cloud/compute-engine/virtual-servers/cloud-cubes). This property is immutable.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Computed)[string] Server usages: [ENTERPRISE](https://docs.ionos.com/cloud/compute-engine/virtual-servers/virtual-servers) or [CUBE](https://docs.ionos.com/cloud/compute-engine/virtual-servers/cloud-cubes). This property is immutable.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param vmState [string] Sets the power state of the server. E.g: `RUNNING`, `SHUTOFF` or `SUSPENDED`. SUSPENDED state is only valid for cube. SHUTOFF state is only valid for enterprise.
         * 
         * @return builder
         * 
         */
        public Builder vmState(@Nullable Output<String> vmState) {
            $.vmState = vmState;
            return this;
        }

        /**
         * @param vmState [string] Sets the power state of the server. E.g: `RUNNING`, `SHUTOFF` or `SUSPENDED`. SUSPENDED state is only valid for cube. SHUTOFF state is only valid for enterprise.
         * 
         * @return builder
         * 
         */
        public Builder vmState(String vmState) {
            return vmState(Output.of(vmState));
        }

        /**
         * @param volume See the Volume section.
         * 
         * @return builder
         * 
         */
        public Builder volume(Output<ServerVolumeArgs> volume) {
            $.volume = volume;
            return this;
        }

        /**
         * @param volume See the Volume section.
         * 
         * @return builder
         * 
         */
        public Builder volume(ServerVolumeArgs volume) {
            return volume(Output.of(volume));
        }

        public ServerArgs build() {
            if ($.datacenterId == null) {
                throw new MissingRequiredPropertyException("ServerArgs", "datacenterId");
            }
            if ($.volume == null) {
                throw new MissingRequiredPropertyException("ServerArgs", "volume");
            }
            return $;
        }
    }

}
