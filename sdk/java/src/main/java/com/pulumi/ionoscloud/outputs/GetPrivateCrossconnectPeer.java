// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetPrivateCrossconnectPeer {
    /**
     * @return The id of the cross-connected datacenter
     * 
     */
    private String datacenterId;
    /**
     * @return The name of the cross-connected datacenter
     * 
     */
    private String datacenterName;
    /**
     * @return The id of the cross-connected LAN
     * 
     */
    private String lanId;
    /**
     * @return The name of the cross-connected LAN
     * 
     */
    private String lanName;
    /**
     * @return The physical location of the connectable datacenter
     * 
     */
    private String location;

    private GetPrivateCrossconnectPeer() {}
    /**
     * @return The id of the cross-connected datacenter
     * 
     */
    public String datacenterId() {
        return this.datacenterId;
    }
    /**
     * @return The name of the cross-connected datacenter
     * 
     */
    public String datacenterName() {
        return this.datacenterName;
    }
    /**
     * @return The id of the cross-connected LAN
     * 
     */
    public String lanId() {
        return this.lanId;
    }
    /**
     * @return The name of the cross-connected LAN
     * 
     */
    public String lanName() {
        return this.lanName;
    }
    /**
     * @return The physical location of the connectable datacenter
     * 
     */
    public String location() {
        return this.location;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPrivateCrossconnectPeer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String datacenterId;
        private String datacenterName;
        private String lanId;
        private String lanName;
        private String location;
        public Builder() {}
        public Builder(GetPrivateCrossconnectPeer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datacenterId = defaults.datacenterId;
    	      this.datacenterName = defaults.datacenterName;
    	      this.lanId = defaults.lanId;
    	      this.lanName = defaults.lanName;
    	      this.location = defaults.location;
        }

        @CustomType.Setter
        public Builder datacenterId(String datacenterId) {
            if (datacenterId == null) {
              throw new MissingRequiredPropertyException("GetPrivateCrossconnectPeer", "datacenterId");
            }
            this.datacenterId = datacenterId;
            return this;
        }
        @CustomType.Setter
        public Builder datacenterName(String datacenterName) {
            if (datacenterName == null) {
              throw new MissingRequiredPropertyException("GetPrivateCrossconnectPeer", "datacenterName");
            }
            this.datacenterName = datacenterName;
            return this;
        }
        @CustomType.Setter
        public Builder lanId(String lanId) {
            if (lanId == null) {
              throw new MissingRequiredPropertyException("GetPrivateCrossconnectPeer", "lanId");
            }
            this.lanId = lanId;
            return this;
        }
        @CustomType.Setter
        public Builder lanName(String lanName) {
            if (lanName == null) {
              throw new MissingRequiredPropertyException("GetPrivateCrossconnectPeer", "lanName");
            }
            this.lanName = lanName;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetPrivateCrossconnectPeer", "location");
            }
            this.location = location;
            return this;
        }
        public GetPrivateCrossconnectPeer build() {
            final var _resultValue = new GetPrivateCrossconnectPeer();
            _resultValue.datacenterId = datacenterId;
            _resultValue.datacenterName = datacenterName;
            _resultValue.lanId = lanId;
            _resultValue.lanName = lanName;
            _resultValue.location = location;
            return _resultValue;
        }
    }
}
