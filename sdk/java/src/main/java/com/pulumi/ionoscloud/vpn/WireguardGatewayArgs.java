// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.vpn;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.vpn.inputs.WireguardGatewayConnectionArgs;
import com.pulumi.ionoscloud.vpn.inputs.WireguardGatewayMaintenanceWindowArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WireguardGatewayArgs extends com.pulumi.resources.ResourceArgs {

    public static final WireguardGatewayArgs Empty = new WireguardGatewayArgs();

    /**
     * [Block] The connection configuration for the WireGuard Gateway. This block supports fields documented below.
     * 
     */
    @Import(name="connections", required=true)
    private Output<List<WireguardGatewayConnectionArgs>> connections;

    /**
     * @return [Block] The connection configuration for the WireGuard Gateway. This block supports fields documented below.
     * 
     */
    public Output<List<WireguardGatewayConnectionArgs>> connections() {
        return this.connections;
    }

    /**
     * [String] A description of the WireGuard Gateway.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return [String] A description of the WireGuard Gateway.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * [String] The IP address of the WireGuard Gateway.
     * 
     */
    @Import(name="gatewayIp", required=true)
    private Output<String> gatewayIp;

    /**
     * @return [String] The IP address of the WireGuard Gateway.
     * 
     */
    public Output<String> gatewayIp() {
        return this.gatewayIp;
    }

    /**
     * [String] The IPv4 CIDR for the WireGuard Gateway interface.
     * 
     */
    @Import(name="interfaceIpv4Cidr")
    private @Nullable Output<String> interfaceIpv4Cidr;

    /**
     * @return [String] The IPv4 CIDR for the WireGuard Gateway interface.
     * 
     */
    public Optional<Output<String>> interfaceIpv4Cidr() {
        return Optional.ofNullable(this.interfaceIpv4Cidr);
    }

    /**
     * [String] The IPv6 CIDR for the WireGuard Gateway interface.
     * 
     */
    @Import(name="interfaceIpv6Cidr")
    private @Nullable Output<String> interfaceIpv6Cidr;

    /**
     * @return [String] The IPv6 CIDR for the WireGuard Gateway interface.
     * 
     */
    public Optional<Output<String>> interfaceIpv6Cidr() {
        return Optional.ofNullable(this.interfaceIpv6Cidr);
    }

    @Import(name="listenPort")
    private @Nullable Output<Integer> listenPort;

    public Optional<Output<Integer>> listenPort() {
        return Optional.ofNullable(this.listenPort);
    }

    /**
     * [String] The location of the WireGuard Gateway. Supported locations: de/fra, de/txl, es/vit,
     * gb/bhx, gb/lhr, us/ewr, us/las, us/mci, fr/par.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return [String] The location of the WireGuard Gateway. Supported locations: de/fra, de/txl, es/vit,
     * gb/bhx, gb/lhr, us/ewr, us/las, us/mci, fr/par.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * (Computed) A weekly 4 hour-long window, during which maintenance might occur.
     * 
     */
    @Import(name="maintenanceWindow")
    private @Nullable Output<WireguardGatewayMaintenanceWindowArgs> maintenanceWindow;

    /**
     * @return (Computed) A weekly 4 hour-long window, during which maintenance might occur.
     * 
     */
    public Optional<Output<WireguardGatewayMaintenanceWindowArgs>> maintenanceWindow() {
        return Optional.ofNullable(this.maintenanceWindow);
    }

    /**
     * [String] The name of the WireGuard Gateway.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return [String] The name of the WireGuard Gateway.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * [String] The private key for the WireGuard Gateway. To be created with the wg utility.
     * 
     */
    @Import(name="privateKey", required=true)
    private Output<String> privateKey;

    /**
     * @return [String] The private key for the WireGuard Gateway. To be created with the wg utility.
     * 
     */
    public Output<String> privateKey() {
        return this.privateKey;
    }

    /**
     * (Computed)[string] Gateway performance options.  See product documentation for full details. Options: STANDARD, STANDARD_HA, ENHANCED, ENHANCED_HA, PREMIUM, PREMIUM_HA.
     * 
     */
    @Import(name="tier")
    private @Nullable Output<String> tier;

    /**
     * @return (Computed)[string] Gateway performance options.  See product documentation for full details. Options: STANDARD, STANDARD_HA, ENHANCED, ENHANCED_HA, PREMIUM, PREMIUM_HA.
     * 
     */
    public Optional<Output<String>> tier() {
        return Optional.ofNullable(this.tier);
    }

    private WireguardGatewayArgs() {}

    private WireguardGatewayArgs(WireguardGatewayArgs $) {
        this.connections = $.connections;
        this.description = $.description;
        this.gatewayIp = $.gatewayIp;
        this.interfaceIpv4Cidr = $.interfaceIpv4Cidr;
        this.interfaceIpv6Cidr = $.interfaceIpv6Cidr;
        this.listenPort = $.listenPort;
        this.location = $.location;
        this.maintenanceWindow = $.maintenanceWindow;
        this.name = $.name;
        this.privateKey = $.privateKey;
        this.tier = $.tier;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WireguardGatewayArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WireguardGatewayArgs $;

        public Builder() {
            $ = new WireguardGatewayArgs();
        }

        public Builder(WireguardGatewayArgs defaults) {
            $ = new WireguardGatewayArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connections [Block] The connection configuration for the WireGuard Gateway. This block supports fields documented below.
         * 
         * @return builder
         * 
         */
        public Builder connections(Output<List<WireguardGatewayConnectionArgs>> connections) {
            $.connections = connections;
            return this;
        }

        /**
         * @param connections [Block] The connection configuration for the WireGuard Gateway. This block supports fields documented below.
         * 
         * @return builder
         * 
         */
        public Builder connections(List<WireguardGatewayConnectionArgs> connections) {
            return connections(Output.of(connections));
        }

        /**
         * @param connections [Block] The connection configuration for the WireGuard Gateway. This block supports fields documented below.
         * 
         * @return builder
         * 
         */
        public Builder connections(WireguardGatewayConnectionArgs... connections) {
            return connections(List.of(connections));
        }

        /**
         * @param description [String] A description of the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description [String] A description of the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param gatewayIp [String] The IP address of the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder gatewayIp(Output<String> gatewayIp) {
            $.gatewayIp = gatewayIp;
            return this;
        }

        /**
         * @param gatewayIp [String] The IP address of the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder gatewayIp(String gatewayIp) {
            return gatewayIp(Output.of(gatewayIp));
        }

        /**
         * @param interfaceIpv4Cidr [String] The IPv4 CIDR for the WireGuard Gateway interface.
         * 
         * @return builder
         * 
         */
        public Builder interfaceIpv4Cidr(@Nullable Output<String> interfaceIpv4Cidr) {
            $.interfaceIpv4Cidr = interfaceIpv4Cidr;
            return this;
        }

        /**
         * @param interfaceIpv4Cidr [String] The IPv4 CIDR for the WireGuard Gateway interface.
         * 
         * @return builder
         * 
         */
        public Builder interfaceIpv4Cidr(String interfaceIpv4Cidr) {
            return interfaceIpv4Cidr(Output.of(interfaceIpv4Cidr));
        }

        /**
         * @param interfaceIpv6Cidr [String] The IPv6 CIDR for the WireGuard Gateway interface.
         * 
         * @return builder
         * 
         */
        public Builder interfaceIpv6Cidr(@Nullable Output<String> interfaceIpv6Cidr) {
            $.interfaceIpv6Cidr = interfaceIpv6Cidr;
            return this;
        }

        /**
         * @param interfaceIpv6Cidr [String] The IPv6 CIDR for the WireGuard Gateway interface.
         * 
         * @return builder
         * 
         */
        public Builder interfaceIpv6Cidr(String interfaceIpv6Cidr) {
            return interfaceIpv6Cidr(Output.of(interfaceIpv6Cidr));
        }

        public Builder listenPort(@Nullable Output<Integer> listenPort) {
            $.listenPort = listenPort;
            return this;
        }

        public Builder listenPort(Integer listenPort) {
            return listenPort(Output.of(listenPort));
        }

        /**
         * @param location [String] The location of the WireGuard Gateway. Supported locations: de/fra, de/txl, es/vit,
         * gb/bhx, gb/lhr, us/ewr, us/las, us/mci, fr/par.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location [String] The location of the WireGuard Gateway. Supported locations: de/fra, de/txl, es/vit,
         * gb/bhx, gb/lhr, us/ewr, us/las, us/mci, fr/par.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param maintenanceWindow (Computed) A weekly 4 hour-long window, during which maintenance might occur.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindow(@Nullable Output<WireguardGatewayMaintenanceWindowArgs> maintenanceWindow) {
            $.maintenanceWindow = maintenanceWindow;
            return this;
        }

        /**
         * @param maintenanceWindow (Computed) A weekly 4 hour-long window, during which maintenance might occur.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindow(WireguardGatewayMaintenanceWindowArgs maintenanceWindow) {
            return maintenanceWindow(Output.of(maintenanceWindow));
        }

        /**
         * @param name [String] The name of the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [String] The name of the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param privateKey [String] The private key for the WireGuard Gateway. To be created with the wg utility.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey [String] The private key for the WireGuard Gateway. To be created with the wg utility.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param tier (Computed)[string] Gateway performance options.  See product documentation for full details. Options: STANDARD, STANDARD_HA, ENHANCED, ENHANCED_HA, PREMIUM, PREMIUM_HA.
         * 
         * @return builder
         * 
         */
        public Builder tier(@Nullable Output<String> tier) {
            $.tier = tier;
            return this;
        }

        /**
         * @param tier (Computed)[string] Gateway performance options.  See product documentation for full details. Options: STANDARD, STANDARD_HA, ENHANCED, ENHANCED_HA, PREMIUM, PREMIUM_HA.
         * 
         * @return builder
         * 
         */
        public Builder tier(String tier) {
            return tier(Output.of(tier));
        }

        public WireguardGatewayArgs build() {
            if ($.connections == null) {
                throw new MissingRequiredPropertyException("WireguardGatewayArgs", "connections");
            }
            if ($.gatewayIp == null) {
                throw new MissingRequiredPropertyException("WireguardGatewayArgs", "gatewayIp");
            }
            if ($.privateKey == null) {
                throw new MissingRequiredPropertyException("WireguardGatewayArgs", "privateKey");
            }
            return $;
        }
    }

}
