// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.ionoscloud.KafkaClusterArgs;
import com.pulumi.ionoscloud.Utilities;
import com.pulumi.ionoscloud.inputs.KafkaClusterState;
import com.pulumi.ionoscloud.outputs.KafkaClusterConnections;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Manages a **Kafka Cluster** on IonosCloud.
 * 
 * ## Example Usage
 * 
 * This resource will create an operational Kafka Cluster. After this section completes, the provisioner can be called.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.ionoscloud.compute.Datacenter;
 * import com.pulumi.ionoscloud.compute.DatacenterArgs;
 * import com.pulumi.ionoscloud.Lan;
 * import com.pulumi.ionoscloud.LanArgs;
 * import com.pulumi.ionoscloud.KafkaCluster;
 * import com.pulumi.ionoscloud.KafkaClusterArgs;
 * import com.pulumi.ionoscloud.inputs.KafkaClusterConnectionsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Basic example
 *         var exampleDatacenter = new Datacenter("exampleDatacenter", DatacenterArgs.builder()        
 *             .location("de/fra")
 *             .build());
 * 
 *         var exampleLan = new Lan("exampleLan", LanArgs.builder()        
 *             .datacenterId(exampleDatacenter.id())
 *             .public_(false)
 *             .build());
 * 
 *         var exampleKafkaCluster = new KafkaCluster("exampleKafkaCluster", KafkaClusterArgs.builder()        
 *             .location("de/fra")
 *             .version("3.7.0")
 *             .size("S")
 *             .connections(KafkaClusterConnectionsArgs.builder()
 *                 .datacenterId(exampleDatacenter.id())
 *                 .lanId(exampleLan.id())
 *                 .brokerAddresses(                
 *                     "192.168.1.101/24",
 *                     "192.168.1.102/24",
 *                     "192.168.1.103/24")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Kafka Cluster can be imported using the `location` and `kafka cluster id`:
 * 
 * ```sh
 * $ pulumi import ionoscloud:index/kafkaCluster:KafkaCluster mycluster {location}:{kafka cluster uuid}
 * ```
 * 
 */
@ResourceType(type="ionoscloud:index/kafkaCluster:KafkaCluster")
public class KafkaCluster extends com.pulumi.resources.CustomResource {
    /**
     * [list] IP address and port of cluster brokers.
     * 
     */
    @Export(name="brokerAddresses", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> brokerAddresses;

    /**
     * @return [list] IP address and port of cluster brokers.
     * 
     */
    public Output<List<String>> brokerAddresses() {
        return this.brokerAddresses;
    }
    /**
     * Connection information of the Kafka Cluster. Minimum items: 1, maximum items: 1.
     * 
     */
    @Export(name="connections", refs={KafkaClusterConnections.class}, tree="[0]")
    private Output<KafkaClusterConnections> connections;

    /**
     * @return Connection information of the Kafka Cluster. Minimum items: 1, maximum items: 1.
     * 
     */
    public Output<KafkaClusterConnections> connections() {
        return this.connections;
    }
    /**
     * [string] The location of the Kafka Cluster. Possible values: `de/fra`, `de/txl`
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return [string] The location of the Kafka Cluster. Possible values: `de/fra`, `de/txl`
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * [string] Name of the Kafka Cluster.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return [string] Name of the Kafka Cluster.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * [string] Size of the Kafka Cluster. Possible values: `XS`, `S`
     * 
     */
    @Export(name="size", refs={String.class}, tree="[0]")
    private Output<String> size;

    /**
     * @return [string] Size of the Kafka Cluster. Possible values: `XS`, `S`
     * 
     */
    public Output<String> size() {
        return this.size;
    }
    /**
     * [string] Version of the Kafka Cluster. Possible values: `3.7.0`
     * 
     */
    @Export(name="version", refs={String.class}, tree="[0]")
    private Output<String> version;

    /**
     * @return [string] Version of the Kafka Cluster. Possible values: `3.7.0`
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public KafkaCluster(java.lang.String name) {
        this(name, KafkaClusterArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public KafkaCluster(java.lang.String name, KafkaClusterArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public KafkaCluster(java.lang.String name, KafkaClusterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("ionoscloud:index/kafkaCluster:KafkaCluster", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private KafkaCluster(java.lang.String name, Output<java.lang.String> id, @Nullable KafkaClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("ionoscloud:index/kafkaCluster:KafkaCluster", name, state, makeResourceOptions(options, id), false);
    }

    private static KafkaClusterArgs makeArgs(KafkaClusterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? KafkaClusterArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static KafkaCluster get(java.lang.String name, Output<java.lang.String> id, @Nullable KafkaClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new KafkaCluster(name, id, state, options);
    }
}
