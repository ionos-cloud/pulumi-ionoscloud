// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.outputs.GetNfsShareClientGroupNf;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetNfsShareClientGroup {
    /**
     * @return Optional description for the clients groups.
     * 
     */
    private String description;
    /**
     * @return A singular host allowed to connect to the share. The host can be specified as IP address and can be either IPv4 or IPv6.
     * 
     */
    private List<String> hosts;
    /**
     * @return The allowed host or network to which the export is being shared. The IP address can be either IPv4 or IPv6 and has to be given with CIDR notation.
     * 
     */
    private List<String> ipNetworks;
    /**
     * @return The NFS configuration for the client group. Each NFS configuration supports the following:
     * 
     */
    private List<GetNfsShareClientGroupNf> nfs;

    private GetNfsShareClientGroup() {}
    /**
     * @return Optional description for the clients groups.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A singular host allowed to connect to the share. The host can be specified as IP address and can be either IPv4 or IPv6.
     * 
     */
    public List<String> hosts() {
        return this.hosts;
    }
    /**
     * @return The allowed host or network to which the export is being shared. The IP address can be either IPv4 or IPv6 and has to be given with CIDR notation.
     * 
     */
    public List<String> ipNetworks() {
        return this.ipNetworks;
    }
    /**
     * @return The NFS configuration for the client group. Each NFS configuration supports the following:
     * 
     */
    public List<GetNfsShareClientGroupNf> nfs() {
        return this.nfs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNfsShareClientGroup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private List<String> hosts;
        private List<String> ipNetworks;
        private List<GetNfsShareClientGroupNf> nfs;
        public Builder() {}
        public Builder(GetNfsShareClientGroup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.hosts = defaults.hosts;
    	      this.ipNetworks = defaults.ipNetworks;
    	      this.nfs = defaults.nfs;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetNfsShareClientGroup", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder hosts(List<String> hosts) {
            if (hosts == null) {
              throw new MissingRequiredPropertyException("GetNfsShareClientGroup", "hosts");
            }
            this.hosts = hosts;
            return this;
        }
        public Builder hosts(String... hosts) {
            return hosts(List.of(hosts));
        }
        @CustomType.Setter
        public Builder ipNetworks(List<String> ipNetworks) {
            if (ipNetworks == null) {
              throw new MissingRequiredPropertyException("GetNfsShareClientGroup", "ipNetworks");
            }
            this.ipNetworks = ipNetworks;
            return this;
        }
        public Builder ipNetworks(String... ipNetworks) {
            return ipNetworks(List.of(ipNetworks));
        }
        @CustomType.Setter
        public Builder nfs(List<GetNfsShareClientGroupNf> nfs) {
            if (nfs == null) {
              throw new MissingRequiredPropertyException("GetNfsShareClientGroup", "nfs");
            }
            this.nfs = nfs;
            return this;
        }
        public Builder nfs(GetNfsShareClientGroupNf... nfs) {
            return nfs(List.of(nfs));
        }
        public GetNfsShareClientGroup build() {
            final var _resultValue = new GetNfsShareClientGroup();
            _resultValue.description = description;
            _resultValue.hosts = hosts;
            _resultValue.ipNetworks = ipNetworks;
            _resultValue.nfs = nfs;
            return _resultValue;
        }
    }
}
