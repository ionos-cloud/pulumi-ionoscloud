// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.ionoscloud.compute.inputs.CrossconnectConnectableDatacenterArgs;
import com.pulumi.ionoscloud.compute.inputs.CrossconnectPeerArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CrossconnectState extends com.pulumi.resources.ResourceArgs {

    public static final CrossconnectState Empty = new CrossconnectState();

    /**
     * A list containing all the connectable datacenters
     * 
     */
    @Import(name="connectableDatacenters")
    private @Nullable Output<List<CrossconnectConnectableDatacenterArgs>> connectableDatacenters;

    /**
     * @return A list containing all the connectable datacenters
     * 
     */
    public Optional<Output<List<CrossconnectConnectableDatacenterArgs>>> connectableDatacenters() {
        return Optional.ofNullable(this.connectableDatacenters);
    }

    /**
     * [string] A short description for the cross-connection.
     * - `connectable datacenters` - (Computed) A list containing all the connectable datacenters
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return [string] A short description for the cross-connection.
     * - `connectable datacenters` - (Computed) A list containing all the connectable datacenters
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * [string] The name of the cross-connection.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return [string] The name of the cross-connection.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Lists LAN&#39;s joined to this cross connect
     * 
     */
    @Import(name="peers")
    private @Nullable Output<List<CrossconnectPeerArgs>> peers;

    /**
     * @return Lists LAN&#39;s joined to this cross connect
     * 
     */
    public Optional<Output<List<CrossconnectPeerArgs>>> peers() {
        return Optional.ofNullable(this.peers);
    }

    private CrossconnectState() {}

    private CrossconnectState(CrossconnectState $) {
        this.connectableDatacenters = $.connectableDatacenters;
        this.description = $.description;
        this.name = $.name;
        this.peers = $.peers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CrossconnectState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CrossconnectState $;

        public Builder() {
            $ = new CrossconnectState();
        }

        public Builder(CrossconnectState defaults) {
            $ = new CrossconnectState(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectableDatacenters A list containing all the connectable datacenters
         * 
         * @return builder
         * 
         */
        public Builder connectableDatacenters(@Nullable Output<List<CrossconnectConnectableDatacenterArgs>> connectableDatacenters) {
            $.connectableDatacenters = connectableDatacenters;
            return this;
        }

        /**
         * @param connectableDatacenters A list containing all the connectable datacenters
         * 
         * @return builder
         * 
         */
        public Builder connectableDatacenters(List<CrossconnectConnectableDatacenterArgs> connectableDatacenters) {
            return connectableDatacenters(Output.of(connectableDatacenters));
        }

        /**
         * @param connectableDatacenters A list containing all the connectable datacenters
         * 
         * @return builder
         * 
         */
        public Builder connectableDatacenters(CrossconnectConnectableDatacenterArgs... connectableDatacenters) {
            return connectableDatacenters(List.of(connectableDatacenters));
        }

        /**
         * @param description [string] A short description for the cross-connection.
         * - `connectable datacenters` - (Computed) A list containing all the connectable datacenters
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description [string] A short description for the cross-connection.
         * - `connectable datacenters` - (Computed) A list containing all the connectable datacenters
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name [string] The name of the cross-connection.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [string] The name of the cross-connection.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param peers Lists LAN&#39;s joined to this cross connect
         * 
         * @return builder
         * 
         */
        public Builder peers(@Nullable Output<List<CrossconnectPeerArgs>> peers) {
            $.peers = peers;
            return this;
        }

        /**
         * @param peers Lists LAN&#39;s joined to this cross connect
         * 
         * @return builder
         * 
         */
        public Builder peers(List<CrossconnectPeerArgs> peers) {
            return peers(Output.of(peers));
        }

        /**
         * @param peers Lists LAN&#39;s joined to this cross connect
         * 
         * @return builder
         * 
         */
        public Builder peers(CrossconnectPeerArgs... peers) {
            return peers(List.of(peers));
        }

        public CrossconnectState build() {
            return $;
        }
    }

}
