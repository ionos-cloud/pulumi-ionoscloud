// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.outputs.GetMongoClusterBackup;
import com.pulumi.ionoscloud.outputs.GetMongoClusterBiConnector;
import com.pulumi.ionoscloud.outputs.GetMongoClusterConnection;
import com.pulumi.ionoscloud.outputs.GetMongoClusterMaintenanceWindow;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetMongoClusterResult {
    private List<GetMongoClusterBackup> backups;
    private List<GetMongoClusterBiConnector> biConnectors;
    private String connectionString;
    private List<GetMongoClusterConnection> connections;
    private Integer cores;
    private @Nullable String displayName;
    private String edition;
    private @Nullable String id;
    private Integer instances;
    private String location;
    private List<GetMongoClusterMaintenanceWindow> maintenanceWindows;
    private String mongodbVersion;
    private Integer ram;
    private Integer shards;
    private Integer storageSize;
    private String storageType;
    private String templateId;
    private String type;

    private GetMongoClusterResult() {}
    public List<GetMongoClusterBackup> backups() {
        return this.backups;
    }
    public List<GetMongoClusterBiConnector> biConnectors() {
        return this.biConnectors;
    }
    public String connectionString() {
        return this.connectionString;
    }
    public List<GetMongoClusterConnection> connections() {
        return this.connections;
    }
    public Integer cores() {
        return this.cores;
    }
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    public String edition() {
        return this.edition;
    }
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public Integer instances() {
        return this.instances;
    }
    public String location() {
        return this.location;
    }
    public List<GetMongoClusterMaintenanceWindow> maintenanceWindows() {
        return this.maintenanceWindows;
    }
    public String mongodbVersion() {
        return this.mongodbVersion;
    }
    public Integer ram() {
        return this.ram;
    }
    public Integer shards() {
        return this.shards;
    }
    public Integer storageSize() {
        return this.storageSize;
    }
    public String storageType() {
        return this.storageType;
    }
    public String templateId() {
        return this.templateId;
    }
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMongoClusterResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetMongoClusterBackup> backups;
        private List<GetMongoClusterBiConnector> biConnectors;
        private String connectionString;
        private List<GetMongoClusterConnection> connections;
        private Integer cores;
        private @Nullable String displayName;
        private String edition;
        private @Nullable String id;
        private Integer instances;
        private String location;
        private List<GetMongoClusterMaintenanceWindow> maintenanceWindows;
        private String mongodbVersion;
        private Integer ram;
        private Integer shards;
        private Integer storageSize;
        private String storageType;
        private String templateId;
        private String type;
        public Builder() {}
        public Builder(GetMongoClusterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backups = defaults.backups;
    	      this.biConnectors = defaults.biConnectors;
    	      this.connectionString = defaults.connectionString;
    	      this.connections = defaults.connections;
    	      this.cores = defaults.cores;
    	      this.displayName = defaults.displayName;
    	      this.edition = defaults.edition;
    	      this.id = defaults.id;
    	      this.instances = defaults.instances;
    	      this.location = defaults.location;
    	      this.maintenanceWindows = defaults.maintenanceWindows;
    	      this.mongodbVersion = defaults.mongodbVersion;
    	      this.ram = defaults.ram;
    	      this.shards = defaults.shards;
    	      this.storageSize = defaults.storageSize;
    	      this.storageType = defaults.storageType;
    	      this.templateId = defaults.templateId;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder backups(List<GetMongoClusterBackup> backups) {
            if (backups == null) {
              throw new MissingRequiredPropertyException("GetMongoClusterResult", "backups");
            }
            this.backups = backups;
            return this;
        }
        public Builder backups(GetMongoClusterBackup... backups) {
            return backups(List.of(backups));
        }
        @CustomType.Setter
        public Builder biConnectors(List<GetMongoClusterBiConnector> biConnectors) {
            if (biConnectors == null) {
              throw new MissingRequiredPropertyException("GetMongoClusterResult", "biConnectors");
            }
            this.biConnectors = biConnectors;
            return this;
        }
        public Builder biConnectors(GetMongoClusterBiConnector... biConnectors) {
            return biConnectors(List.of(biConnectors));
        }
        @CustomType.Setter
        public Builder connectionString(String connectionString) {
            if (connectionString == null) {
              throw new MissingRequiredPropertyException("GetMongoClusterResult", "connectionString");
            }
            this.connectionString = connectionString;
            return this;
        }
        @CustomType.Setter
        public Builder connections(List<GetMongoClusterConnection> connections) {
            if (connections == null) {
              throw new MissingRequiredPropertyException("GetMongoClusterResult", "connections");
            }
            this.connections = connections;
            return this;
        }
        public Builder connections(GetMongoClusterConnection... connections) {
            return connections(List.of(connections));
        }
        @CustomType.Setter
        public Builder cores(Integer cores) {
            if (cores == null) {
              throw new MissingRequiredPropertyException("GetMongoClusterResult", "cores");
            }
            this.cores = cores;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {

            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder edition(String edition) {
            if (edition == null) {
              throw new MissingRequiredPropertyException("GetMongoClusterResult", "edition");
            }
            this.edition = edition;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instances(Integer instances) {
            if (instances == null) {
              throw new MissingRequiredPropertyException("GetMongoClusterResult", "instances");
            }
            this.instances = instances;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetMongoClusterResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceWindows(List<GetMongoClusterMaintenanceWindow> maintenanceWindows) {
            if (maintenanceWindows == null) {
              throw new MissingRequiredPropertyException("GetMongoClusterResult", "maintenanceWindows");
            }
            this.maintenanceWindows = maintenanceWindows;
            return this;
        }
        public Builder maintenanceWindows(GetMongoClusterMaintenanceWindow... maintenanceWindows) {
            return maintenanceWindows(List.of(maintenanceWindows));
        }
        @CustomType.Setter
        public Builder mongodbVersion(String mongodbVersion) {
            if (mongodbVersion == null) {
              throw new MissingRequiredPropertyException("GetMongoClusterResult", "mongodbVersion");
            }
            this.mongodbVersion = mongodbVersion;
            return this;
        }
        @CustomType.Setter
        public Builder ram(Integer ram) {
            if (ram == null) {
              throw new MissingRequiredPropertyException("GetMongoClusterResult", "ram");
            }
            this.ram = ram;
            return this;
        }
        @CustomType.Setter
        public Builder shards(Integer shards) {
            if (shards == null) {
              throw new MissingRequiredPropertyException("GetMongoClusterResult", "shards");
            }
            this.shards = shards;
            return this;
        }
        @CustomType.Setter
        public Builder storageSize(Integer storageSize) {
            if (storageSize == null) {
              throw new MissingRequiredPropertyException("GetMongoClusterResult", "storageSize");
            }
            this.storageSize = storageSize;
            return this;
        }
        @CustomType.Setter
        public Builder storageType(String storageType) {
            if (storageType == null) {
              throw new MissingRequiredPropertyException("GetMongoClusterResult", "storageType");
            }
            this.storageType = storageType;
            return this;
        }
        @CustomType.Setter
        public Builder templateId(String templateId) {
            if (templateId == null) {
              throw new MissingRequiredPropertyException("GetMongoClusterResult", "templateId");
            }
            this.templateId = templateId;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetMongoClusterResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetMongoClusterResult build() {
            final var _resultValue = new GetMongoClusterResult();
            _resultValue.backups = backups;
            _resultValue.biConnectors = biConnectors;
            _resultValue.connectionString = connectionString;
            _resultValue.connections = connections;
            _resultValue.cores = cores;
            _resultValue.displayName = displayName;
            _resultValue.edition = edition;
            _resultValue.id = id;
            _resultValue.instances = instances;
            _resultValue.location = location;
            _resultValue.maintenanceWindows = maintenanceWindows;
            _resultValue.mongodbVersion = mongodbVersion;
            _resultValue.ram = ram;
            _resultValue.shards = shards;
            _resultValue.storageSize = storageSize;
            _resultValue.storageType = storageType;
            _resultValue.templateId = templateId;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
