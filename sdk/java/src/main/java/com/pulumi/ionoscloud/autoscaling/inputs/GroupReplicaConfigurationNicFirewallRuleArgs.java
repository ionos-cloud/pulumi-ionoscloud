// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.autoscaling.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupReplicaConfigurationNicFirewallRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final GroupReplicaConfigurationNicFirewallRuleArgs Empty = new GroupReplicaConfigurationNicFirewallRuleArgs();

    /**
     * Sets the allowed code (from 0 to 254) when ICMP protocol is selected. The value &#39;null&#39; allows all codes.
     * 
     */
    @Import(name="icmpCode")
    private @Nullable Output<Integer> icmpCode;

    /**
     * @return Sets the allowed code (from 0 to 254) when ICMP protocol is selected. The value &#39;null&#39; allows all codes.
     * 
     */
    public Optional<Output<Integer>> icmpCode() {
        return Optional.ofNullable(this.icmpCode);
    }

    /**
     * Sets the allowed type (from 0 to 254) if the protocol ICMP is selected. The value &#39;null&#39; allows all types.
     * 
     */
    @Import(name="icmpType")
    private @Nullable Output<Integer> icmpType;

    /**
     * @return Sets the allowed type (from 0 to 254) if the protocol ICMP is selected. The value &#39;null&#39; allows all types.
     * 
     */
    public Optional<Output<Integer>> icmpType() {
        return Optional.ofNullable(this.icmpType);
    }

    /**
     * [string] User-defined name for the Autoscaling Group.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return [string] User-defined name for the Autoscaling Group.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Sets the end range of the allowed port (from 1 to 65535) if the protocol TCP or UDP is selected. The value &#39;null&#39; for &#39;port_range_start&#39; and &#39;port_range_end&#39; allows all ports.
     * 
     */
    @Import(name="portRangeEnd")
    private @Nullable Output<Integer> portRangeEnd;

    /**
     * @return Sets the end range of the allowed port (from 1 to 65535) if the protocol TCP or UDP is selected. The value &#39;null&#39; for &#39;port_range_start&#39; and &#39;port_range_end&#39; allows all ports.
     * 
     */
    public Optional<Output<Integer>> portRangeEnd() {
        return Optional.ofNullable(this.portRangeEnd);
    }

    /**
     * Sets the initial range of the allowed port (from 1 to 65535) if the protocol TCP or UDP is selected. The value &#39;null&#39; for &#39;port_range_start&#39; and &#39;port_range_end&#39; allows all ports.
     * 
     */
    @Import(name="portRangeStart")
    private @Nullable Output<Integer> portRangeStart;

    /**
     * @return Sets the initial range of the allowed port (from 1 to 65535) if the protocol TCP or UDP is selected. The value &#39;null&#39; for &#39;port_range_start&#39; and &#39;port_range_end&#39; allows all ports.
     * 
     */
    public Optional<Output<Integer>> portRangeStart() {
        return Optional.ofNullable(this.portRangeStart);
    }

    /**
     * The protocol for the rule. The property cannot be modified after its creation (not allowed in update requests).
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return The protocol for the rule. The property cannot be modified after its creation (not allowed in update requests).
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * Only traffic originating from the respective IPv4 address is permitted. The value &#39;null&#39; allows traffic from any IP address.
     * 
     */
    @Import(name="sourceIp")
    private @Nullable Output<String> sourceIp;

    /**
     * @return Only traffic originating from the respective IPv4 address is permitted. The value &#39;null&#39; allows traffic from any IP address.
     * 
     */
    public Optional<Output<String>> sourceIp() {
        return Optional.ofNullable(this.sourceIp);
    }

    /**
     * Only traffic originating from the respective MAC address is permitted. Valid format: &#39;aa:bb:cc:dd:ee:ff&#39;. The value &#39;null&#39; allows traffic from any MAC address.
     * 
     */
    @Import(name="sourceMac")
    private @Nullable Output<String> sourceMac;

    /**
     * @return Only traffic originating from the respective MAC address is permitted. Valid format: &#39;aa:bb:cc:dd:ee:ff&#39;. The value &#39;null&#39; allows traffic from any MAC address.
     * 
     */
    public Optional<Output<String>> sourceMac() {
        return Optional.ofNullable(this.sourceMac);
    }

    /**
     * If the target NIC has multiple IP addresses, only the traffic directed to the respective IP address of the NIC is allowed. The value &#39;null&#39; allows traffic to any target IP address.
     * 
     */
    @Import(name="targetIp")
    private @Nullable Output<String> targetIp;

    /**
     * @return If the target NIC has multiple IP addresses, only the traffic directed to the respective IP address of the NIC is allowed. The value &#39;null&#39; allows traffic to any target IP address.
     * 
     */
    public Optional<Output<String>> targetIp() {
        return Optional.ofNullable(this.targetIp);
    }

    /**
     * The firewall rule type. If not specified, the default value &#39;INGRESS&#39; is used.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The firewall rule type. If not specified, the default value &#39;INGRESS&#39; is used.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private GroupReplicaConfigurationNicFirewallRuleArgs() {}

    private GroupReplicaConfigurationNicFirewallRuleArgs(GroupReplicaConfigurationNicFirewallRuleArgs $) {
        this.icmpCode = $.icmpCode;
        this.icmpType = $.icmpType;
        this.name = $.name;
        this.portRangeEnd = $.portRangeEnd;
        this.portRangeStart = $.portRangeStart;
        this.protocol = $.protocol;
        this.sourceIp = $.sourceIp;
        this.sourceMac = $.sourceMac;
        this.targetIp = $.targetIp;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupReplicaConfigurationNicFirewallRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupReplicaConfigurationNicFirewallRuleArgs $;

        public Builder() {
            $ = new GroupReplicaConfigurationNicFirewallRuleArgs();
        }

        public Builder(GroupReplicaConfigurationNicFirewallRuleArgs defaults) {
            $ = new GroupReplicaConfigurationNicFirewallRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param icmpCode Sets the allowed code (from 0 to 254) when ICMP protocol is selected. The value &#39;null&#39; allows all codes.
         * 
         * @return builder
         * 
         */
        public Builder icmpCode(@Nullable Output<Integer> icmpCode) {
            $.icmpCode = icmpCode;
            return this;
        }

        /**
         * @param icmpCode Sets the allowed code (from 0 to 254) when ICMP protocol is selected. The value &#39;null&#39; allows all codes.
         * 
         * @return builder
         * 
         */
        public Builder icmpCode(Integer icmpCode) {
            return icmpCode(Output.of(icmpCode));
        }

        /**
         * @param icmpType Sets the allowed type (from 0 to 254) if the protocol ICMP is selected. The value &#39;null&#39; allows all types.
         * 
         * @return builder
         * 
         */
        public Builder icmpType(@Nullable Output<Integer> icmpType) {
            $.icmpType = icmpType;
            return this;
        }

        /**
         * @param icmpType Sets the allowed type (from 0 to 254) if the protocol ICMP is selected. The value &#39;null&#39; allows all types.
         * 
         * @return builder
         * 
         */
        public Builder icmpType(Integer icmpType) {
            return icmpType(Output.of(icmpType));
        }

        /**
         * @param name [string] User-defined name for the Autoscaling Group.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [string] User-defined name for the Autoscaling Group.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param portRangeEnd Sets the end range of the allowed port (from 1 to 65535) if the protocol TCP or UDP is selected. The value &#39;null&#39; for &#39;port_range_start&#39; and &#39;port_range_end&#39; allows all ports.
         * 
         * @return builder
         * 
         */
        public Builder portRangeEnd(@Nullable Output<Integer> portRangeEnd) {
            $.portRangeEnd = portRangeEnd;
            return this;
        }

        /**
         * @param portRangeEnd Sets the end range of the allowed port (from 1 to 65535) if the protocol TCP or UDP is selected. The value &#39;null&#39; for &#39;port_range_start&#39; and &#39;port_range_end&#39; allows all ports.
         * 
         * @return builder
         * 
         */
        public Builder portRangeEnd(Integer portRangeEnd) {
            return portRangeEnd(Output.of(portRangeEnd));
        }

        /**
         * @param portRangeStart Sets the initial range of the allowed port (from 1 to 65535) if the protocol TCP or UDP is selected. The value &#39;null&#39; for &#39;port_range_start&#39; and &#39;port_range_end&#39; allows all ports.
         * 
         * @return builder
         * 
         */
        public Builder portRangeStart(@Nullable Output<Integer> portRangeStart) {
            $.portRangeStart = portRangeStart;
            return this;
        }

        /**
         * @param portRangeStart Sets the initial range of the allowed port (from 1 to 65535) if the protocol TCP or UDP is selected. The value &#39;null&#39; for &#39;port_range_start&#39; and &#39;port_range_end&#39; allows all ports.
         * 
         * @return builder
         * 
         */
        public Builder portRangeStart(Integer portRangeStart) {
            return portRangeStart(Output.of(portRangeStart));
        }

        /**
         * @param protocol The protocol for the rule. The property cannot be modified after its creation (not allowed in update requests).
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The protocol for the rule. The property cannot be modified after its creation (not allowed in update requests).
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param sourceIp Only traffic originating from the respective IPv4 address is permitted. The value &#39;null&#39; allows traffic from any IP address.
         * 
         * @return builder
         * 
         */
        public Builder sourceIp(@Nullable Output<String> sourceIp) {
            $.sourceIp = sourceIp;
            return this;
        }

        /**
         * @param sourceIp Only traffic originating from the respective IPv4 address is permitted. The value &#39;null&#39; allows traffic from any IP address.
         * 
         * @return builder
         * 
         */
        public Builder sourceIp(String sourceIp) {
            return sourceIp(Output.of(sourceIp));
        }

        /**
         * @param sourceMac Only traffic originating from the respective MAC address is permitted. Valid format: &#39;aa:bb:cc:dd:ee:ff&#39;. The value &#39;null&#39; allows traffic from any MAC address.
         * 
         * @return builder
         * 
         */
        public Builder sourceMac(@Nullable Output<String> sourceMac) {
            $.sourceMac = sourceMac;
            return this;
        }

        /**
         * @param sourceMac Only traffic originating from the respective MAC address is permitted. Valid format: &#39;aa:bb:cc:dd:ee:ff&#39;. The value &#39;null&#39; allows traffic from any MAC address.
         * 
         * @return builder
         * 
         */
        public Builder sourceMac(String sourceMac) {
            return sourceMac(Output.of(sourceMac));
        }

        /**
         * @param targetIp If the target NIC has multiple IP addresses, only the traffic directed to the respective IP address of the NIC is allowed. The value &#39;null&#39; allows traffic to any target IP address.
         * 
         * @return builder
         * 
         */
        public Builder targetIp(@Nullable Output<String> targetIp) {
            $.targetIp = targetIp;
            return this;
        }

        /**
         * @param targetIp If the target NIC has multiple IP addresses, only the traffic directed to the respective IP address of the NIC is allowed. The value &#39;null&#39; allows traffic to any target IP address.
         * 
         * @return builder
         * 
         */
        public Builder targetIp(String targetIp) {
            return targetIp(Output.of(targetIp));
        }

        /**
         * @param type The firewall rule type. If not specified, the default value &#39;INGRESS&#39; is used.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The firewall rule type. If not specified, the default value &#39;INGRESS&#39; is used.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public GroupReplicaConfigurationNicFirewallRuleArgs build() {
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("GroupReplicaConfigurationNicFirewallRuleArgs", "protocol");
            }
            return $;
        }
    }

}
