// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.outputs.GetApplicationLoadbalancerFlowlog;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetApplicationLoadbalancerResult {
    /**
     * @return Turn logging on and off for this product. Default value is &#39;false&#39;.
     * 
     */
    private Boolean centralLogging;
    private String datacenterId;
    /**
     * @return Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.
     * 
     */
    private List<GetApplicationLoadbalancerFlowlog> flowlogs;
    /**
     * @return Id of the application load balancer.
     * 
     */
    private @Nullable String id;
    /**
     * @return Collection of the Application Load Balancer IP addresses. (Inbound and outbound) IPs of the listenerLan are customer-reserved public IPs for the public Load Balancers, and private IPs for the private Load Balancers.
     * 
     */
    private List<String> ips;
    /**
     * @return Collection of private IP addresses with the subnet mask of the Application Load Balancer. IPs must contain valid a subnet mask. If no IP is provided, the system will generate an IP with /24 subnet.
     * 
     */
    private List<String> lbPrivateIps;
    /**
     * @return ID of the listening (inbound) LAN.
     * 
     */
    private Integer listenerLan;
    private String loggingFormat;
    /**
     * @return Specifies the name of the flow log.
     * 
     */
    private @Nullable String name;
    private @Nullable Boolean partialMatch;
    /**
     * @return ID of the balanced private target LAN (outbound).
     * 
     */
    private Integer targetLan;

    private GetApplicationLoadbalancerResult() {}
    /**
     * @return Turn logging on and off for this product. Default value is &#39;false&#39;.
     * 
     */
    public Boolean centralLogging() {
        return this.centralLogging;
    }
    public String datacenterId() {
        return this.datacenterId;
    }
    /**
     * @return Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.
     * 
     */
    public List<GetApplicationLoadbalancerFlowlog> flowlogs() {
        return this.flowlogs;
    }
    /**
     * @return Id of the application load balancer.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Collection of the Application Load Balancer IP addresses. (Inbound and outbound) IPs of the listenerLan are customer-reserved public IPs for the public Load Balancers, and private IPs for the private Load Balancers.
     * 
     */
    public List<String> ips() {
        return this.ips;
    }
    /**
     * @return Collection of private IP addresses with the subnet mask of the Application Load Balancer. IPs must contain valid a subnet mask. If no IP is provided, the system will generate an IP with /24 subnet.
     * 
     */
    public List<String> lbPrivateIps() {
        return this.lbPrivateIps;
    }
    /**
     * @return ID of the listening (inbound) LAN.
     * 
     */
    public Integer listenerLan() {
        return this.listenerLan;
    }
    public String loggingFormat() {
        return this.loggingFormat;
    }
    /**
     * @return Specifies the name of the flow log.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public Optional<Boolean> partialMatch() {
        return Optional.ofNullable(this.partialMatch);
    }
    /**
     * @return ID of the balanced private target LAN (outbound).
     * 
     */
    public Integer targetLan() {
        return this.targetLan;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplicationLoadbalancerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean centralLogging;
        private String datacenterId;
        private List<GetApplicationLoadbalancerFlowlog> flowlogs;
        private @Nullable String id;
        private List<String> ips;
        private List<String> lbPrivateIps;
        private Integer listenerLan;
        private String loggingFormat;
        private @Nullable String name;
        private @Nullable Boolean partialMatch;
        private Integer targetLan;
        public Builder() {}
        public Builder(GetApplicationLoadbalancerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.centralLogging = defaults.centralLogging;
    	      this.datacenterId = defaults.datacenterId;
    	      this.flowlogs = defaults.flowlogs;
    	      this.id = defaults.id;
    	      this.ips = defaults.ips;
    	      this.lbPrivateIps = defaults.lbPrivateIps;
    	      this.listenerLan = defaults.listenerLan;
    	      this.loggingFormat = defaults.loggingFormat;
    	      this.name = defaults.name;
    	      this.partialMatch = defaults.partialMatch;
    	      this.targetLan = defaults.targetLan;
        }

        @CustomType.Setter
        public Builder centralLogging(Boolean centralLogging) {
            if (centralLogging == null) {
              throw new MissingRequiredPropertyException("GetApplicationLoadbalancerResult", "centralLogging");
            }
            this.centralLogging = centralLogging;
            return this;
        }
        @CustomType.Setter
        public Builder datacenterId(String datacenterId) {
            if (datacenterId == null) {
              throw new MissingRequiredPropertyException("GetApplicationLoadbalancerResult", "datacenterId");
            }
            this.datacenterId = datacenterId;
            return this;
        }
        @CustomType.Setter
        public Builder flowlogs(List<GetApplicationLoadbalancerFlowlog> flowlogs) {
            if (flowlogs == null) {
              throw new MissingRequiredPropertyException("GetApplicationLoadbalancerResult", "flowlogs");
            }
            this.flowlogs = flowlogs;
            return this;
        }
        public Builder flowlogs(GetApplicationLoadbalancerFlowlog... flowlogs) {
            return flowlogs(List.of(flowlogs));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ips(List<String> ips) {
            if (ips == null) {
              throw new MissingRequiredPropertyException("GetApplicationLoadbalancerResult", "ips");
            }
            this.ips = ips;
            return this;
        }
        public Builder ips(String... ips) {
            return ips(List.of(ips));
        }
        @CustomType.Setter
        public Builder lbPrivateIps(List<String> lbPrivateIps) {
            if (lbPrivateIps == null) {
              throw new MissingRequiredPropertyException("GetApplicationLoadbalancerResult", "lbPrivateIps");
            }
            this.lbPrivateIps = lbPrivateIps;
            return this;
        }
        public Builder lbPrivateIps(String... lbPrivateIps) {
            return lbPrivateIps(List.of(lbPrivateIps));
        }
        @CustomType.Setter
        public Builder listenerLan(Integer listenerLan) {
            if (listenerLan == null) {
              throw new MissingRequiredPropertyException("GetApplicationLoadbalancerResult", "listenerLan");
            }
            this.listenerLan = listenerLan;
            return this;
        }
        @CustomType.Setter
        public Builder loggingFormat(String loggingFormat) {
            if (loggingFormat == null) {
              throw new MissingRequiredPropertyException("GetApplicationLoadbalancerResult", "loggingFormat");
            }
            this.loggingFormat = loggingFormat;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder partialMatch(@Nullable Boolean partialMatch) {

            this.partialMatch = partialMatch;
            return this;
        }
        @CustomType.Setter
        public Builder targetLan(Integer targetLan) {
            if (targetLan == null) {
              throw new MissingRequiredPropertyException("GetApplicationLoadbalancerResult", "targetLan");
            }
            this.targetLan = targetLan;
            return this;
        }
        public GetApplicationLoadbalancerResult build() {
            final var _resultValue = new GetApplicationLoadbalancerResult();
            _resultValue.centralLogging = centralLogging;
            _resultValue.datacenterId = datacenterId;
            _resultValue.flowlogs = flowlogs;
            _resultValue.id = id;
            _resultValue.ips = ips;
            _resultValue.lbPrivateIps = lbPrivateIps;
            _resultValue.listenerLan = listenerLan;
            _resultValue.loggingFormat = loggingFormat;
            _resultValue.name = name;
            _resultValue.partialMatch = partialMatch;
            _resultValue.targetLan = targetLan;
            return _resultValue;
        }
    }
}
