// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.inputs.GetNfsShareClientGroupNf;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetNfsShareClientGroup extends com.pulumi.resources.InvokeArgs {

    public static final GetNfsShareClientGroup Empty = new GetNfsShareClientGroup();

    /**
     * Optional description for the clients groups.
     * 
     */
    @Import(name="description", required=true)
    private String description;

    /**
     * @return Optional description for the clients groups.
     * 
     */
    public String description() {
        return this.description;
    }

    /**
     * A singular host allowed to connect to the share. The host can be specified as IP address and can be either IPv4 or IPv6.
     * 
     */
    @Import(name="hosts", required=true)
    private List<String> hosts;

    /**
     * @return A singular host allowed to connect to the share. The host can be specified as IP address and can be either IPv4 or IPv6.
     * 
     */
    public List<String> hosts() {
        return this.hosts;
    }

    /**
     * The allowed host or network to which the export is being shared. The IP address can be either IPv4 or IPv6 and has to be given with CIDR notation.
     * 
     */
    @Import(name="ipNetworks", required=true)
    private List<String> ipNetworks;

    /**
     * @return The allowed host or network to which the export is being shared. The IP address can be either IPv4 or IPv6 and has to be given with CIDR notation.
     * 
     */
    public List<String> ipNetworks() {
        return this.ipNetworks;
    }

    /**
     * The NFS configuration for the client group. Each NFS configuration supports the following:
     * 
     */
    @Import(name="nfs", required=true)
    private List<GetNfsShareClientGroupNf> nfs;

    /**
     * @return The NFS configuration for the client group. Each NFS configuration supports the following:
     * 
     */
    public List<GetNfsShareClientGroupNf> nfs() {
        return this.nfs;
    }

    private GetNfsShareClientGroup() {}

    private GetNfsShareClientGroup(GetNfsShareClientGroup $) {
        this.description = $.description;
        this.hosts = $.hosts;
        this.ipNetworks = $.ipNetworks;
        this.nfs = $.nfs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNfsShareClientGroup defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNfsShareClientGroup $;

        public Builder() {
            $ = new GetNfsShareClientGroup();
        }

        public Builder(GetNfsShareClientGroup defaults) {
            $ = new GetNfsShareClientGroup(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Optional description for the clients groups.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            $.description = description;
            return this;
        }

        /**
         * @param hosts A singular host allowed to connect to the share. The host can be specified as IP address and can be either IPv4 or IPv6.
         * 
         * @return builder
         * 
         */
        public Builder hosts(List<String> hosts) {
            $.hosts = hosts;
            return this;
        }

        /**
         * @param hosts A singular host allowed to connect to the share. The host can be specified as IP address and can be either IPv4 or IPv6.
         * 
         * @return builder
         * 
         */
        public Builder hosts(String... hosts) {
            return hosts(List.of(hosts));
        }

        /**
         * @param ipNetworks The allowed host or network to which the export is being shared. The IP address can be either IPv4 or IPv6 and has to be given with CIDR notation.
         * 
         * @return builder
         * 
         */
        public Builder ipNetworks(List<String> ipNetworks) {
            $.ipNetworks = ipNetworks;
            return this;
        }

        /**
         * @param ipNetworks The allowed host or network to which the export is being shared. The IP address can be either IPv4 or IPv6 and has to be given with CIDR notation.
         * 
         * @return builder
         * 
         */
        public Builder ipNetworks(String... ipNetworks) {
            return ipNetworks(List.of(ipNetworks));
        }

        /**
         * @param nfs The NFS configuration for the client group. Each NFS configuration supports the following:
         * 
         * @return builder
         * 
         */
        public Builder nfs(List<GetNfsShareClientGroupNf> nfs) {
            $.nfs = nfs;
            return this;
        }

        /**
         * @param nfs The NFS configuration for the client group. Each NFS configuration supports the following:
         * 
         * @return builder
         * 
         */
        public Builder nfs(GetNfsShareClientGroupNf... nfs) {
            return nfs(List.of(nfs));
        }

        public GetNfsShareClientGroup build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("GetNfsShareClientGroup", "description");
            }
            if ($.hosts == null) {
                throw new MissingRequiredPropertyException("GetNfsShareClientGroup", "hosts");
            }
            if ($.ipNetworks == null) {
                throw new MissingRequiredPropertyException("GetNfsShareClientGroup", "ipNetworks");
            }
            if ($.nfs == null) {
                throw new MissingRequiredPropertyException("GetNfsShareClientGroup", "nfs");
            }
            return $;
        }
    }

}
