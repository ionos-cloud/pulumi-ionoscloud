// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutoCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutoCertificateArgs Empty = new AutoCertificateArgs();

    /**
     * The common name (DNS) of the certificate to issue. The common name needs to be part of a zone in IONOS Cloud DNS
     * 
     */
    @Import(name="commonName", required=true)
    private Output<String> commonName;

    /**
     * @return The common name (DNS) of the certificate to issue. The common name needs to be part of a zone in IONOS Cloud DNS
     * 
     */
    public Output<String> commonName() {
        return this.commonName;
    }

    /**
     * The key algorithm used to generate the certificate
     * 
     */
    @Import(name="keyAlgorithm", required=true)
    private Output<String> keyAlgorithm;

    /**
     * @return The key algorithm used to generate the certificate
     * 
     */
    public Output<String> keyAlgorithm() {
        return this.keyAlgorithm;
    }

    /**
     * The location of the auto-certificate
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location of the auto-certificate
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * A certificate name used for management purposes
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A certificate name used for management purposes
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The certificate provider used to issue the certificates
     * 
     */
    @Import(name="providerId", required=true)
    private Output<String> providerId;

    /**
     * @return The certificate provider used to issue the certificates
     * 
     */
    public Output<String> providerId() {
        return this.providerId;
    }

    /**
     * Optional additional names to be added to the issued certificate. The additional names needs to be part of a zone in
     * IONOS Cloud DNS
     * 
     */
    @Import(name="subjectAlternativeNames")
    private @Nullable Output<List<String>> subjectAlternativeNames;

    /**
     * @return Optional additional names to be added to the issued certificate. The additional names needs to be part of a zone in
     * IONOS Cloud DNS
     * 
     */
    public Optional<Output<List<String>>> subjectAlternativeNames() {
        return Optional.ofNullable(this.subjectAlternativeNames);
    }

    private AutoCertificateArgs() {}

    private AutoCertificateArgs(AutoCertificateArgs $) {
        this.commonName = $.commonName;
        this.keyAlgorithm = $.keyAlgorithm;
        this.location = $.location;
        this.name = $.name;
        this.providerId = $.providerId;
        this.subjectAlternativeNames = $.subjectAlternativeNames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutoCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutoCertificateArgs $;

        public Builder() {
            $ = new AutoCertificateArgs();
        }

        public Builder(AutoCertificateArgs defaults) {
            $ = new AutoCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param commonName The common name (DNS) of the certificate to issue. The common name needs to be part of a zone in IONOS Cloud DNS
         * 
         * @return builder
         * 
         */
        public Builder commonName(Output<String> commonName) {
            $.commonName = commonName;
            return this;
        }

        /**
         * @param commonName The common name (DNS) of the certificate to issue. The common name needs to be part of a zone in IONOS Cloud DNS
         * 
         * @return builder
         * 
         */
        public Builder commonName(String commonName) {
            return commonName(Output.of(commonName));
        }

        /**
         * @param keyAlgorithm The key algorithm used to generate the certificate
         * 
         * @return builder
         * 
         */
        public Builder keyAlgorithm(Output<String> keyAlgorithm) {
            $.keyAlgorithm = keyAlgorithm;
            return this;
        }

        /**
         * @param keyAlgorithm The key algorithm used to generate the certificate
         * 
         * @return builder
         * 
         */
        public Builder keyAlgorithm(String keyAlgorithm) {
            return keyAlgorithm(Output.of(keyAlgorithm));
        }

        /**
         * @param location The location of the auto-certificate
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the auto-certificate
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name A certificate name used for management purposes
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A certificate name used for management purposes
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param providerId The certificate provider used to issue the certificates
         * 
         * @return builder
         * 
         */
        public Builder providerId(Output<String> providerId) {
            $.providerId = providerId;
            return this;
        }

        /**
         * @param providerId The certificate provider used to issue the certificates
         * 
         * @return builder
         * 
         */
        public Builder providerId(String providerId) {
            return providerId(Output.of(providerId));
        }

        /**
         * @param subjectAlternativeNames Optional additional names to be added to the issued certificate. The additional names needs to be part of a zone in
         * IONOS Cloud DNS
         * 
         * @return builder
         * 
         */
        public Builder subjectAlternativeNames(@Nullable Output<List<String>> subjectAlternativeNames) {
            $.subjectAlternativeNames = subjectAlternativeNames;
            return this;
        }

        /**
         * @param subjectAlternativeNames Optional additional names to be added to the issued certificate. The additional names needs to be part of a zone in
         * IONOS Cloud DNS
         * 
         * @return builder
         * 
         */
        public Builder subjectAlternativeNames(List<String> subjectAlternativeNames) {
            return subjectAlternativeNames(Output.of(subjectAlternativeNames));
        }

        /**
         * @param subjectAlternativeNames Optional additional names to be added to the issued certificate. The additional names needs to be part of a zone in
         * IONOS Cloud DNS
         * 
         * @return builder
         * 
         */
        public Builder subjectAlternativeNames(String... subjectAlternativeNames) {
            return subjectAlternativeNames(List.of(subjectAlternativeNames));
        }

        public AutoCertificateArgs build() {
            if ($.commonName == null) {
                throw new MissingRequiredPropertyException("AutoCertificateArgs", "commonName");
            }
            if ($.keyAlgorithm == null) {
                throw new MissingRequiredPropertyException("AutoCertificateArgs", "keyAlgorithm");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("AutoCertificateArgs", "location");
            }
            if ($.providerId == null) {
                throw new MissingRequiredPropertyException("AutoCertificateArgs", "providerId");
            }
            return $;
        }
    }

}
