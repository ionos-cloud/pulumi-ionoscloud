// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MongoClusterBackupArgs extends com.pulumi.resources.ResourceArgs {

    public static final MongoClusterBackupArgs Empty = new MongoClusterBackupArgs();

    /**
     * The location where the cluster backups will be stored. If not set, the backup is stored in the nearest location of the cluster. Examples: de, eu-sounth-2, eu-central-2
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location where the cluster backups will be stored. If not set, the backup is stored in the nearest location of the cluster. Examples: de, eu-sounth-2, eu-central-2
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Number of hours in the past for which a point-in-time snapshot can be created.
     * 
     */
    @Import(name="pointInTimeWindowHours")
    private @Nullable Output<Integer> pointInTimeWindowHours;

    /**
     * @return Number of hours in the past for which a point-in-time snapshot can be created.
     * 
     */
    public Optional<Output<Integer>> pointInTimeWindowHours() {
        return Optional.ofNullable(this.pointInTimeWindowHours);
    }

    /**
     * Number of hours between snapshots.
     * 
     */
    @Import(name="snapshotIntervalHours")
    private @Nullable Output<Integer> snapshotIntervalHours;

    /**
     * @return Number of hours between snapshots.
     * 
     */
    public Optional<Output<Integer>> snapshotIntervalHours() {
        return Optional.ofNullable(this.snapshotIntervalHours);
    }

    private MongoClusterBackupArgs() {}

    private MongoClusterBackupArgs(MongoClusterBackupArgs $) {
        this.location = $.location;
        this.pointInTimeWindowHours = $.pointInTimeWindowHours;
        this.snapshotIntervalHours = $.snapshotIntervalHours;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MongoClusterBackupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MongoClusterBackupArgs $;

        public Builder() {
            $ = new MongoClusterBackupArgs();
        }

        public Builder(MongoClusterBackupArgs defaults) {
            $ = new MongoClusterBackupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param location The location where the cluster backups will be stored. If not set, the backup is stored in the nearest location of the cluster. Examples: de, eu-sounth-2, eu-central-2
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location where the cluster backups will be stored. If not set, the backup is stored in the nearest location of the cluster. Examples: de, eu-sounth-2, eu-central-2
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param pointInTimeWindowHours Number of hours in the past for which a point-in-time snapshot can be created.
         * 
         * @return builder
         * 
         */
        public Builder pointInTimeWindowHours(@Nullable Output<Integer> pointInTimeWindowHours) {
            $.pointInTimeWindowHours = pointInTimeWindowHours;
            return this;
        }

        /**
         * @param pointInTimeWindowHours Number of hours in the past for which a point-in-time snapshot can be created.
         * 
         * @return builder
         * 
         */
        public Builder pointInTimeWindowHours(Integer pointInTimeWindowHours) {
            return pointInTimeWindowHours(Output.of(pointInTimeWindowHours));
        }

        /**
         * @param snapshotIntervalHours Number of hours between snapshots.
         * 
         * @return builder
         * 
         */
        public Builder snapshotIntervalHours(@Nullable Output<Integer> snapshotIntervalHours) {
            $.snapshotIntervalHours = snapshotIntervalHours;
            return this;
        }

        /**
         * @param snapshotIntervalHours Number of hours between snapshots.
         * 
         * @return builder
         * 
         */
        public Builder snapshotIntervalHours(Integer snapshotIntervalHours) {
            return snapshotIntervalHours(Output.of(snapshotIntervalHours));
        }

        public MongoClusterBackupArgs build() {
            return $;
        }
    }

}
