// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class IpfailoverArgs extends com.pulumi.resources.ResourceArgs {

    public static final IpfailoverArgs Empty = new IpfailoverArgs();

    /**
     * [string] The ID of a Virtual Data Center.
     * 
     */
    @Import(name="datacenterId", required=true)
    private Output<String> datacenterId;

    /**
     * @return [string] The ID of a Virtual Data Center.
     * 
     */
    public Output<String> datacenterId() {
        return this.datacenterId;
    }

    /**
     * [string] The reserved IP address to be used in the IP failover group.
     * 
     */
    @Import(name="ip", required=true)
    private Output<String> ip;

    /**
     * @return [string] The reserved IP address to be used in the IP failover group.
     * 
     */
    public Output<String> ip() {
        return this.ip;
    }

    /**
     * [string] The ID of a LAN.
     * 
     */
    @Import(name="lanId", required=true)
    private Output<String> lanId;

    /**
     * @return [string] The ID of a LAN.
     * 
     */
    public Output<String> lanId() {
        return this.lanId;
    }

    /**
     * The UUID of the master NIC
     * 
     */
    @Import(name="nicuuid", required=true)
    private Output<String> nicuuid;

    /**
     * @return The UUID of the master NIC
     * 
     */
    public Output<String> nicuuid() {
        return this.nicuuid;
    }

    private IpfailoverArgs() {}

    private IpfailoverArgs(IpfailoverArgs $) {
        this.datacenterId = $.datacenterId;
        this.ip = $.ip;
        this.lanId = $.lanId;
        this.nicuuid = $.nicuuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IpfailoverArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IpfailoverArgs $;

        public Builder() {
            $ = new IpfailoverArgs();
        }

        public Builder(IpfailoverArgs defaults) {
            $ = new IpfailoverArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param datacenterId [string] The ID of a Virtual Data Center.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(Output<String> datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        /**
         * @param datacenterId [string] The ID of a Virtual Data Center.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(String datacenterId) {
            return datacenterId(Output.of(datacenterId));
        }

        /**
         * @param ip [string] The reserved IP address to be used in the IP failover group.
         * 
         * @return builder
         * 
         */
        public Builder ip(Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip [string] The reserved IP address to be used in the IP failover group.
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param lanId [string] The ID of a LAN.
         * 
         * @return builder
         * 
         */
        public Builder lanId(Output<String> lanId) {
            $.lanId = lanId;
            return this;
        }

        /**
         * @param lanId [string] The ID of a LAN.
         * 
         * @return builder
         * 
         */
        public Builder lanId(String lanId) {
            return lanId(Output.of(lanId));
        }

        /**
         * @param nicuuid The UUID of the master NIC
         * 
         * @return builder
         * 
         */
        public Builder nicuuid(Output<String> nicuuid) {
            $.nicuuid = nicuuid;
            return this;
        }

        /**
         * @param nicuuid The UUID of the master NIC
         * 
         * @return builder
         * 
         */
        public Builder nicuuid(String nicuuid) {
            return nicuuid(Output.of(nicuuid));
        }

        public IpfailoverArgs build() {
            if ($.datacenterId == null) {
                throw new MissingRequiredPropertyException("IpfailoverArgs", "datacenterId");
            }
            if ($.ip == null) {
                throw new MissingRequiredPropertyException("IpfailoverArgs", "ip");
            }
            if ($.lanId == null) {
                throw new MissingRequiredPropertyException("IpfailoverArgs", "lanId");
            }
            if ($.nicuuid == null) {
                throw new MissingRequiredPropertyException("IpfailoverArgs", "nicuuid");
            }
            return $;
        }
    }

}
