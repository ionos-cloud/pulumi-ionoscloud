// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.cdn.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.cdn.outputs.DistributionRoutingRuleUpstreamGeoRestrictions;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DistributionRoutingRuleUpstream {
    /**
     * @return [bool] Enable or disable caching. If enabled, the CDN will cache the responses from the upstream host. Subsequent requests for the same resource will be served from the cache.
     * 
     */
    private Boolean caching;
    /**
     * @return [map] - A map of geo_restrictions
     * 
     */
    private @Nullable DistributionRoutingRuleUpstreamGeoRestrictions geoRestrictions;
    /**
     * @return [string] The upstream host that handles the requests if not already cached. This host will be protected by the WAF if the option is enabled.
     * 
     */
    private String host;
    /**
     * @return [string] Rate limit class that will be applied to limit the number of incoming requests per IP.
     * 
     */
    private String rateLimitClass;
    /**
     * @return [string] The SNI (Server Name Indication) mode of the upstream. It supports two modes: 1) `distribution`: for outgoing connections to the upstream host, the CDN requires the upstream host to present a valid certificate that matches the configured domain of the CDN distribution; 2) `origin`: for outgoing connections to the upstream host, the CDN requires the upstream host to present a valid certificate that matches the configured upstream/origin hostname.
     * 
     */
    private String sniMode;
    /**
     * @return [bool] Enable or disable WAF to protect the upstream host.
     * 
     */
    private Boolean waf;

    private DistributionRoutingRuleUpstream() {}
    /**
     * @return [bool] Enable or disable caching. If enabled, the CDN will cache the responses from the upstream host. Subsequent requests for the same resource will be served from the cache.
     * 
     */
    public Boolean caching() {
        return this.caching;
    }
    /**
     * @return [map] - A map of geo_restrictions
     * 
     */
    public Optional<DistributionRoutingRuleUpstreamGeoRestrictions> geoRestrictions() {
        return Optional.ofNullable(this.geoRestrictions);
    }
    /**
     * @return [string] The upstream host that handles the requests if not already cached. This host will be protected by the WAF if the option is enabled.
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return [string] Rate limit class that will be applied to limit the number of incoming requests per IP.
     * 
     */
    public String rateLimitClass() {
        return this.rateLimitClass;
    }
    /**
     * @return [string] The SNI (Server Name Indication) mode of the upstream. It supports two modes: 1) `distribution`: for outgoing connections to the upstream host, the CDN requires the upstream host to present a valid certificate that matches the configured domain of the CDN distribution; 2) `origin`: for outgoing connections to the upstream host, the CDN requires the upstream host to present a valid certificate that matches the configured upstream/origin hostname.
     * 
     */
    public String sniMode() {
        return this.sniMode;
    }
    /**
     * @return [bool] Enable or disable WAF to protect the upstream host.
     * 
     */
    public Boolean waf() {
        return this.waf;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DistributionRoutingRuleUpstream defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean caching;
        private @Nullable DistributionRoutingRuleUpstreamGeoRestrictions geoRestrictions;
        private String host;
        private String rateLimitClass;
        private String sniMode;
        private Boolean waf;
        public Builder() {}
        public Builder(DistributionRoutingRuleUpstream defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caching = defaults.caching;
    	      this.geoRestrictions = defaults.geoRestrictions;
    	      this.host = defaults.host;
    	      this.rateLimitClass = defaults.rateLimitClass;
    	      this.sniMode = defaults.sniMode;
    	      this.waf = defaults.waf;
        }

        @CustomType.Setter
        public Builder caching(Boolean caching) {
            if (caching == null) {
              throw new MissingRequiredPropertyException("DistributionRoutingRuleUpstream", "caching");
            }
            this.caching = caching;
            return this;
        }
        @CustomType.Setter
        public Builder geoRestrictions(@Nullable DistributionRoutingRuleUpstreamGeoRestrictions geoRestrictions) {

            this.geoRestrictions = geoRestrictions;
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("DistributionRoutingRuleUpstream", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder rateLimitClass(String rateLimitClass) {
            if (rateLimitClass == null) {
              throw new MissingRequiredPropertyException("DistributionRoutingRuleUpstream", "rateLimitClass");
            }
            this.rateLimitClass = rateLimitClass;
            return this;
        }
        @CustomType.Setter
        public Builder sniMode(String sniMode) {
            if (sniMode == null) {
              throw new MissingRequiredPropertyException("DistributionRoutingRuleUpstream", "sniMode");
            }
            this.sniMode = sniMode;
            return this;
        }
        @CustomType.Setter
        public Builder waf(Boolean waf) {
            if (waf == null) {
              throw new MissingRequiredPropertyException("DistributionRoutingRuleUpstream", "waf");
            }
            this.waf = waf;
            return this;
        }
        public DistributionRoutingRuleUpstream build() {
            final var _resultValue = new DistributionRoutingRuleUpstream();
            _resultValue.caching = caching;
            _resultValue.geoRestrictions = geoRestrictions;
            _resultValue.host = host;
            _resultValue.rateLimitClass = rateLimitClass;
            _resultValue.sniMode = sniMode;
            _resultValue.waf = waf;
            return _resultValue;
        }
    }
}
