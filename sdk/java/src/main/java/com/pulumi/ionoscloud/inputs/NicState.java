// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.ionoscloud.inputs.NicFlowlogArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NicState extends com.pulumi.resources.ResourceArgs {

    public static final NicState Empty = new NicState();

    /**
     * [string] The ID of a Virtual Data Center.
     * 
     */
    @Import(name="datacenterId")
    private @Nullable Output<String> datacenterId;

    /**
     * @return [string] The ID of a Virtual Data Center.
     * 
     */
    public Optional<Output<String>> datacenterId() {
        return Optional.ofNullable(this.datacenterId);
    }

    /**
     * The Logical Unit Number (LUN) of the storage volume. Null if this NIC was created from CloudAPI and no DCD changes were done on the Datacenter.
     * 
     */
    @Import(name="deviceNumber")
    private @Nullable Output<Integer> deviceNumber;

    /**
     * @return The Logical Unit Number (LUN) of the storage volume. Null if this NIC was created from CloudAPI and no DCD changes were done on the Datacenter.
     * 
     */
    public Optional<Output<Integer>> deviceNumber() {
        return Optional.ofNullable(this.deviceNumber);
    }

    /**
     * [Boolean] Indicates if the NIC should get an IP address using DHCP (true) or not (false).
     * 
     */
    @Import(name="dhcp")
    private @Nullable Output<Boolean> dhcp;

    /**
     * @return [Boolean] Indicates if the NIC should get an IP address using DHCP (true) or not (false).
     * 
     */
    public Optional<Output<Boolean>> dhcp() {
        return Optional.ofNullable(this.dhcp);
    }

    /**
     * [Boolean] Indicates if the NIC should get an IPv6 address using DHCP (true) or not (false).
     * 
     */
    @Import(name="dhcpv6")
    private @Nullable Output<Boolean> dhcpv6;

    /**
     * @return [Boolean] Indicates if the NIC should get an IPv6 address using DHCP (true) or not (false).
     * 
     */
    public Optional<Output<Boolean>> dhcpv6() {
        return Optional.ofNullable(this.dhcpv6);
    }

    /**
     * [Boolean] If this resource is set to true and is nested under a server resource firewall, with open SSH port, resource must be nested under the NIC.
     * 
     */
    @Import(name="firewallActive")
    private @Nullable Output<Boolean> firewallActive;

    /**
     * @return [Boolean] If this resource is set to true and is nested under a server resource firewall, with open SSH port, resource must be nested under the NIC.
     * 
     */
    public Optional<Output<Boolean>> firewallActive() {
        return Optional.ofNullable(this.firewallActive);
    }

    /**
     * [String] The type of firewall rules that will be allowed on the NIC. If it is not specified it will take the default value INGRESS
     * 
     */
    @Import(name="firewallType")
    private @Nullable Output<String> firewallType;

    /**
     * @return [String] The type of firewall rules that will be allowed on the NIC. If it is not specified it will take the default value INGRESS
     * 
     */
    public Optional<Output<String>> firewallType() {
        return Optional.ofNullable(this.firewallType);
    }

    /**
     * Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.
     * 
     */
    @Import(name="flowlog")
    private @Nullable Output<NicFlowlogArgs> flowlog;

    /**
     * @return Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.
     * 
     */
    public Optional<Output<NicFlowlogArgs>> flowlog() {
        return Optional.ofNullable(this.flowlog);
    }

    /**
     * [list] Collection of IP addresses assigned to a NIC. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
     * 
     */
    @Import(name="ips")
    private @Nullable Output<List<String>> ips;

    /**
     * @return [list] Collection of IP addresses assigned to a NIC. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
     * 
     */
    public Optional<Output<List<String>>> ips() {
        return Optional.ofNullable(this.ips);
    }

    /**
     * Automatically assigned /80 IPv6 CIDR block if the NIC is connected to an IPv6 enabled LAN. You can also specify an /80 IPv6 CIDR block for the NIC on your own, which must be inside the /64 IPv6 CIDR block of the LAN and unique.
     * 
     */
    @Import(name="ipv6CidrBlock")
    private @Nullable Output<String> ipv6CidrBlock;

    /**
     * @return Automatically assigned /80 IPv6 CIDR block if the NIC is connected to an IPv6 enabled LAN. You can also specify an /80 IPv6 CIDR block for the NIC on your own, which must be inside the /64 IPv6 CIDR block of the LAN and unique.
     * 
     */
    public Optional<Output<String>> ipv6CidrBlock() {
        return Optional.ofNullable(this.ipv6CidrBlock);
    }

    /**
     * [list] Collection of IPv6 addresses assigned to a NIC. Explicitly assigned public IPs need to come from the NIC&#39;s Ipv6 CIDR block, Passing value null or empty array will assign an IPv6 address automatically from the NIC&#39;s CIDR block.
     * 
     */
    @Import(name="ipv6Ips")
    private @Nullable Output<List<String>> ipv6Ips;

    /**
     * @return [list] Collection of IPv6 addresses assigned to a NIC. Explicitly assigned public IPs need to come from the NIC&#39;s Ipv6 CIDR block, Passing value null or empty array will assign an IPv6 address automatically from the NIC&#39;s CIDR block.
     * 
     */
    public Optional<Output<List<String>>> ipv6Ips() {
        return Optional.ofNullable(this.ipv6Ips);
    }

    /**
     * [integer] The LAN ID the NIC will sit on.
     * 
     */
    @Import(name="lan")
    private @Nullable Output<Integer> lan;

    /**
     * @return [integer] The LAN ID the NIC will sit on.
     * 
     */
    public Optional<Output<Integer>> lan() {
        return Optional.ofNullable(this.lan);
    }

    /**
     * The MAC address of the NIC.
     * 
     */
    @Import(name="mac")
    private @Nullable Output<String> mac;

    /**
     * @return The MAC address of the NIC.
     * 
     */
    public Optional<Output<String>> mac() {
        return Optional.ofNullable(this.mac);
    }

    /**
     * Specifies the name of the flow log.
     * 
     * ⚠️ **Note:**: Removing the `flowlog` forces re-creation of the NIC resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the flow log.
     * 
     * ⚠️ **Note:**: Removing the `flowlog` forces re-creation of the NIC resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The PCI slot number of the Nic.
     * 
     */
    @Import(name="pciSlot")
    private @Nullable Output<Integer> pciSlot;

    /**
     * @return The PCI slot number of the Nic.
     * 
     */
    public Optional<Output<Integer>> pciSlot() {
        return Optional.ofNullable(this.pciSlot);
    }

    /**
     * [string] The ID of a server.
     * 
     */
    @Import(name="serverId")
    private @Nullable Output<String> serverId;

    /**
     * @return [string] The ID of a server.
     * 
     */
    public Optional<Output<String>> serverId() {
        return Optional.ofNullable(this.serverId);
    }

    private NicState() {}

    private NicState(NicState $) {
        this.datacenterId = $.datacenterId;
        this.deviceNumber = $.deviceNumber;
        this.dhcp = $.dhcp;
        this.dhcpv6 = $.dhcpv6;
        this.firewallActive = $.firewallActive;
        this.firewallType = $.firewallType;
        this.flowlog = $.flowlog;
        this.ips = $.ips;
        this.ipv6CidrBlock = $.ipv6CidrBlock;
        this.ipv6Ips = $.ipv6Ips;
        this.lan = $.lan;
        this.mac = $.mac;
        this.name = $.name;
        this.pciSlot = $.pciSlot;
        this.serverId = $.serverId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NicState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NicState $;

        public Builder() {
            $ = new NicState();
        }

        public Builder(NicState defaults) {
            $ = new NicState(Objects.requireNonNull(defaults));
        }

        /**
         * @param datacenterId [string] The ID of a Virtual Data Center.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(@Nullable Output<String> datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        /**
         * @param datacenterId [string] The ID of a Virtual Data Center.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(String datacenterId) {
            return datacenterId(Output.of(datacenterId));
        }

        /**
         * @param deviceNumber The Logical Unit Number (LUN) of the storage volume. Null if this NIC was created from CloudAPI and no DCD changes were done on the Datacenter.
         * 
         * @return builder
         * 
         */
        public Builder deviceNumber(@Nullable Output<Integer> deviceNumber) {
            $.deviceNumber = deviceNumber;
            return this;
        }

        /**
         * @param deviceNumber The Logical Unit Number (LUN) of the storage volume. Null if this NIC was created from CloudAPI and no DCD changes were done on the Datacenter.
         * 
         * @return builder
         * 
         */
        public Builder deviceNumber(Integer deviceNumber) {
            return deviceNumber(Output.of(deviceNumber));
        }

        /**
         * @param dhcp [Boolean] Indicates if the NIC should get an IP address using DHCP (true) or not (false).
         * 
         * @return builder
         * 
         */
        public Builder dhcp(@Nullable Output<Boolean> dhcp) {
            $.dhcp = dhcp;
            return this;
        }

        /**
         * @param dhcp [Boolean] Indicates if the NIC should get an IP address using DHCP (true) or not (false).
         * 
         * @return builder
         * 
         */
        public Builder dhcp(Boolean dhcp) {
            return dhcp(Output.of(dhcp));
        }

        /**
         * @param dhcpv6 [Boolean] Indicates if the NIC should get an IPv6 address using DHCP (true) or not (false).
         * 
         * @return builder
         * 
         */
        public Builder dhcpv6(@Nullable Output<Boolean> dhcpv6) {
            $.dhcpv6 = dhcpv6;
            return this;
        }

        /**
         * @param dhcpv6 [Boolean] Indicates if the NIC should get an IPv6 address using DHCP (true) or not (false).
         * 
         * @return builder
         * 
         */
        public Builder dhcpv6(Boolean dhcpv6) {
            return dhcpv6(Output.of(dhcpv6));
        }

        /**
         * @param firewallActive [Boolean] If this resource is set to true and is nested under a server resource firewall, with open SSH port, resource must be nested under the NIC.
         * 
         * @return builder
         * 
         */
        public Builder firewallActive(@Nullable Output<Boolean> firewallActive) {
            $.firewallActive = firewallActive;
            return this;
        }

        /**
         * @param firewallActive [Boolean] If this resource is set to true and is nested under a server resource firewall, with open SSH port, resource must be nested under the NIC.
         * 
         * @return builder
         * 
         */
        public Builder firewallActive(Boolean firewallActive) {
            return firewallActive(Output.of(firewallActive));
        }

        /**
         * @param firewallType [String] The type of firewall rules that will be allowed on the NIC. If it is not specified it will take the default value INGRESS
         * 
         * @return builder
         * 
         */
        public Builder firewallType(@Nullable Output<String> firewallType) {
            $.firewallType = firewallType;
            return this;
        }

        /**
         * @param firewallType [String] The type of firewall rules that will be allowed on the NIC. If it is not specified it will take the default value INGRESS
         * 
         * @return builder
         * 
         */
        public Builder firewallType(String firewallType) {
            return firewallType(Output.of(firewallType));
        }

        /**
         * @param flowlog Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.
         * 
         * @return builder
         * 
         */
        public Builder flowlog(@Nullable Output<NicFlowlogArgs> flowlog) {
            $.flowlog = flowlog;
            return this;
        }

        /**
         * @param flowlog Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.
         * 
         * @return builder
         * 
         */
        public Builder flowlog(NicFlowlogArgs flowlog) {
            return flowlog(Output.of(flowlog));
        }

        /**
         * @param ips [list] Collection of IP addresses assigned to a NIC. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
         * 
         * @return builder
         * 
         */
        public Builder ips(@Nullable Output<List<String>> ips) {
            $.ips = ips;
            return this;
        }

        /**
         * @param ips [list] Collection of IP addresses assigned to a NIC. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
         * 
         * @return builder
         * 
         */
        public Builder ips(List<String> ips) {
            return ips(Output.of(ips));
        }

        /**
         * @param ips [list] Collection of IP addresses assigned to a NIC. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
         * 
         * @return builder
         * 
         */
        public Builder ips(String... ips) {
            return ips(List.of(ips));
        }

        /**
         * @param ipv6CidrBlock Automatically assigned /80 IPv6 CIDR block if the NIC is connected to an IPv6 enabled LAN. You can also specify an /80 IPv6 CIDR block for the NIC on your own, which must be inside the /64 IPv6 CIDR block of the LAN and unique.
         * 
         * @return builder
         * 
         */
        public Builder ipv6CidrBlock(@Nullable Output<String> ipv6CidrBlock) {
            $.ipv6CidrBlock = ipv6CidrBlock;
            return this;
        }

        /**
         * @param ipv6CidrBlock Automatically assigned /80 IPv6 CIDR block if the NIC is connected to an IPv6 enabled LAN. You can also specify an /80 IPv6 CIDR block for the NIC on your own, which must be inside the /64 IPv6 CIDR block of the LAN and unique.
         * 
         * @return builder
         * 
         */
        public Builder ipv6CidrBlock(String ipv6CidrBlock) {
            return ipv6CidrBlock(Output.of(ipv6CidrBlock));
        }

        /**
         * @param ipv6Ips [list] Collection of IPv6 addresses assigned to a NIC. Explicitly assigned public IPs need to come from the NIC&#39;s Ipv6 CIDR block, Passing value null or empty array will assign an IPv6 address automatically from the NIC&#39;s CIDR block.
         * 
         * @return builder
         * 
         */
        public Builder ipv6Ips(@Nullable Output<List<String>> ipv6Ips) {
            $.ipv6Ips = ipv6Ips;
            return this;
        }

        /**
         * @param ipv6Ips [list] Collection of IPv6 addresses assigned to a NIC. Explicitly assigned public IPs need to come from the NIC&#39;s Ipv6 CIDR block, Passing value null or empty array will assign an IPv6 address automatically from the NIC&#39;s CIDR block.
         * 
         * @return builder
         * 
         */
        public Builder ipv6Ips(List<String> ipv6Ips) {
            return ipv6Ips(Output.of(ipv6Ips));
        }

        /**
         * @param ipv6Ips [list] Collection of IPv6 addresses assigned to a NIC. Explicitly assigned public IPs need to come from the NIC&#39;s Ipv6 CIDR block, Passing value null or empty array will assign an IPv6 address automatically from the NIC&#39;s CIDR block.
         * 
         * @return builder
         * 
         */
        public Builder ipv6Ips(String... ipv6Ips) {
            return ipv6Ips(List.of(ipv6Ips));
        }

        /**
         * @param lan [integer] The LAN ID the NIC will sit on.
         * 
         * @return builder
         * 
         */
        public Builder lan(@Nullable Output<Integer> lan) {
            $.lan = lan;
            return this;
        }

        /**
         * @param lan [integer] The LAN ID the NIC will sit on.
         * 
         * @return builder
         * 
         */
        public Builder lan(Integer lan) {
            return lan(Output.of(lan));
        }

        /**
         * @param mac The MAC address of the NIC.
         * 
         * @return builder
         * 
         */
        public Builder mac(@Nullable Output<String> mac) {
            $.mac = mac;
            return this;
        }

        /**
         * @param mac The MAC address of the NIC.
         * 
         * @return builder
         * 
         */
        public Builder mac(String mac) {
            return mac(Output.of(mac));
        }

        /**
         * @param name Specifies the name of the flow log.
         * 
         * ⚠️ **Note:**: Removing the `flowlog` forces re-creation of the NIC resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the flow log.
         * 
         * ⚠️ **Note:**: Removing the `flowlog` forces re-creation of the NIC resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param pciSlot The PCI slot number of the Nic.
         * 
         * @return builder
         * 
         */
        public Builder pciSlot(@Nullable Output<Integer> pciSlot) {
            $.pciSlot = pciSlot;
            return this;
        }

        /**
         * @param pciSlot The PCI slot number of the Nic.
         * 
         * @return builder
         * 
         */
        public Builder pciSlot(Integer pciSlot) {
            return pciSlot(Output.of(pciSlot));
        }

        /**
         * @param serverId [string] The ID of a server.
         * 
         * @return builder
         * 
         */
        public Builder serverId(@Nullable Output<String> serverId) {
            $.serverId = serverId;
            return this;
        }

        /**
         * @param serverId [string] The ID of a server.
         * 
         * @return builder
         * 
         */
        public Builder serverId(String serverId) {
            return serverId(Output.of(serverId));
        }

        public NicState build() {
            return $;
        }
    }

}
