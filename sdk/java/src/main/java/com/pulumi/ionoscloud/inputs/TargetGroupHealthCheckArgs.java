// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TargetGroupHealthCheckArgs extends com.pulumi.resources.ResourceArgs {

    public static final TargetGroupHealthCheckArgs Empty = new TargetGroupHealthCheckArgs();

    /**
     * [int] The interval in milliseconds between consecutive health checks; default is 2000.
     * 
     */
    @Import(name="checkInterval")
    private @Nullable Output<Integer> checkInterval;

    /**
     * @return [int] The interval in milliseconds between consecutive health checks; default is 2000.
     * 
     */
    public Optional<Output<Integer>> checkInterval() {
        return Optional.ofNullable(this.checkInterval);
    }

    /**
     * [int] The maximum time in milliseconds to wait for a target to respond to a check. For target VMs with &#39;Check Interval&#39; set, the lesser of the two  values is used once the TCP connection is established.
     * 
     */
    @Import(name="checkTimeout")
    private @Nullable Output<Integer> checkTimeout;

    /**
     * @return [int] The maximum time in milliseconds to wait for a target to respond to a check. For target VMs with &#39;Check Interval&#39; set, the lesser of the two  values is used once the TCP connection is established.
     * 
     */
    public Optional<Output<Integer>> checkTimeout() {
        return Optional.ofNullable(this.checkTimeout);
    }

    /**
     * [int] The maximum number of attempts to reconnect to a target after a connection failure. Valid range is 0 to 65535, and default is three reconnection.
     * 
     */
    @Import(name="retries")
    private @Nullable Output<Integer> retries;

    /**
     * @return [int] The maximum number of attempts to reconnect to a target after a connection failure. Valid range is 0 to 65535, and default is three reconnection.
     * 
     */
    public Optional<Output<Integer>> retries() {
        return Optional.ofNullable(this.retries);
    }

    private TargetGroupHealthCheckArgs() {}

    private TargetGroupHealthCheckArgs(TargetGroupHealthCheckArgs $) {
        this.checkInterval = $.checkInterval;
        this.checkTimeout = $.checkTimeout;
        this.retries = $.retries;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TargetGroupHealthCheckArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TargetGroupHealthCheckArgs $;

        public Builder() {
            $ = new TargetGroupHealthCheckArgs();
        }

        public Builder(TargetGroupHealthCheckArgs defaults) {
            $ = new TargetGroupHealthCheckArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param checkInterval [int] The interval in milliseconds between consecutive health checks; default is 2000.
         * 
         * @return builder
         * 
         */
        public Builder checkInterval(@Nullable Output<Integer> checkInterval) {
            $.checkInterval = checkInterval;
            return this;
        }

        /**
         * @param checkInterval [int] The interval in milliseconds between consecutive health checks; default is 2000.
         * 
         * @return builder
         * 
         */
        public Builder checkInterval(Integer checkInterval) {
            return checkInterval(Output.of(checkInterval));
        }

        /**
         * @param checkTimeout [int] The maximum time in milliseconds to wait for a target to respond to a check. For target VMs with &#39;Check Interval&#39; set, the lesser of the two  values is used once the TCP connection is established.
         * 
         * @return builder
         * 
         */
        public Builder checkTimeout(@Nullable Output<Integer> checkTimeout) {
            $.checkTimeout = checkTimeout;
            return this;
        }

        /**
         * @param checkTimeout [int] The maximum time in milliseconds to wait for a target to respond to a check. For target VMs with &#39;Check Interval&#39; set, the lesser of the two  values is used once the TCP connection is established.
         * 
         * @return builder
         * 
         */
        public Builder checkTimeout(Integer checkTimeout) {
            return checkTimeout(Output.of(checkTimeout));
        }

        /**
         * @param retries [int] The maximum number of attempts to reconnect to a target after a connection failure. Valid range is 0 to 65535, and default is three reconnection.
         * 
         * @return builder
         * 
         */
        public Builder retries(@Nullable Output<Integer> retries) {
            $.retries = retries;
            return this;
        }

        /**
         * @param retries [int] The maximum number of attempts to reconnect to a target after a connection failure. Valid range is 0 to 65535, and default is three reconnection.
         * 
         * @return builder
         * 
         */
        public Builder retries(Integer retries) {
            return retries(Output.of(retries));
        }

        public TargetGroupHealthCheckArgs build() {
            return $;
        }
    }

}
