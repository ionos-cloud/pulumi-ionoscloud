// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetKafkaClusterTopicResult {
    private String clusterId;
    private String id;
    private String location;
    private String name;
    private Integer numberOfPartitions;
    private @Nullable Boolean partialMatch;
    private Integer replicationFactor;
    private Integer retentionTime;
    private Integer segmentBytes;

    private GetKafkaClusterTopicResult() {}
    public String clusterId() {
        return this.clusterId;
    }
    public String id() {
        return this.id;
    }
    public String location() {
        return this.location;
    }
    public String name() {
        return this.name;
    }
    public Integer numberOfPartitions() {
        return this.numberOfPartitions;
    }
    public Optional<Boolean> partialMatch() {
        return Optional.ofNullable(this.partialMatch);
    }
    public Integer replicationFactor() {
        return this.replicationFactor;
    }
    public Integer retentionTime() {
        return this.retentionTime;
    }
    public Integer segmentBytes() {
        return this.segmentBytes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKafkaClusterTopicResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clusterId;
        private String id;
        private String location;
        private String name;
        private Integer numberOfPartitions;
        private @Nullable Boolean partialMatch;
        private Integer replicationFactor;
        private Integer retentionTime;
        private Integer segmentBytes;
        public Builder() {}
        public Builder(GetKafkaClusterTopicResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterId = defaults.clusterId;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.numberOfPartitions = defaults.numberOfPartitions;
    	      this.partialMatch = defaults.partialMatch;
    	      this.replicationFactor = defaults.replicationFactor;
    	      this.retentionTime = defaults.retentionTime;
    	      this.segmentBytes = defaults.segmentBytes;
        }

        @CustomType.Setter
        public Builder clusterId(String clusterId) {
            if (clusterId == null) {
              throw new MissingRequiredPropertyException("GetKafkaClusterTopicResult", "clusterId");
            }
            this.clusterId = clusterId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetKafkaClusterTopicResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetKafkaClusterTopicResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetKafkaClusterTopicResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder numberOfPartitions(Integer numberOfPartitions) {
            if (numberOfPartitions == null) {
              throw new MissingRequiredPropertyException("GetKafkaClusterTopicResult", "numberOfPartitions");
            }
            this.numberOfPartitions = numberOfPartitions;
            return this;
        }
        @CustomType.Setter
        public Builder partialMatch(@Nullable Boolean partialMatch) {

            this.partialMatch = partialMatch;
            return this;
        }
        @CustomType.Setter
        public Builder replicationFactor(Integer replicationFactor) {
            if (replicationFactor == null) {
              throw new MissingRequiredPropertyException("GetKafkaClusterTopicResult", "replicationFactor");
            }
            this.replicationFactor = replicationFactor;
            return this;
        }
        @CustomType.Setter
        public Builder retentionTime(Integer retentionTime) {
            if (retentionTime == null) {
              throw new MissingRequiredPropertyException("GetKafkaClusterTopicResult", "retentionTime");
            }
            this.retentionTime = retentionTime;
            return this;
        }
        @CustomType.Setter
        public Builder segmentBytes(Integer segmentBytes) {
            if (segmentBytes == null) {
              throw new MissingRequiredPropertyException("GetKafkaClusterTopicResult", "segmentBytes");
            }
            this.segmentBytes = segmentBytes;
            return this;
        }
        public GetKafkaClusterTopicResult build() {
            final var _resultValue = new GetKafkaClusterTopicResult();
            _resultValue.clusterId = clusterId;
            _resultValue.id = id;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.numberOfPartitions = numberOfPartitions;
            _resultValue.partialMatch = partialMatch;
            _resultValue.replicationFactor = replicationFactor;
            _resultValue.retentionTime = retentionTime;
            _resultValue.segmentBytes = segmentBytes;
            return _resultValue;
        }
    }
}
