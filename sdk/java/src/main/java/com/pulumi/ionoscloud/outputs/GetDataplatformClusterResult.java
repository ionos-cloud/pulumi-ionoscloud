// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.outputs.GetDataplatformClusterConfig;
import com.pulumi.ionoscloud.outputs.GetDataplatformClusterLan;
import com.pulumi.ionoscloud.outputs.GetDataplatformClusterMaintenanceWindow;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDataplatformClusterResult {
    /**
     * @return base64 decoded cluster certificate authority data (provided as an attribute for direct use)
     * 
     */
    private String caCrt;
    /**
     * @return structured kubernetes config consisting of a list with 1 item with the following fields:
     * * api_version - Kubernetes API Version
     * * kind - &#34;Config&#34;
     * * current-context - string
     * * clusters - list of
     * * name - name of cluster
     * * cluster - map of
     * * certificate-authority-data - **base64 decoded** cluster CA data
     * * server -  server address in the form `https://host:port`
     * * contexts - list of
     * * name - context name
     * * context - map of
     * * cluster - cluster name
     * * user - cluster user
     * * users - list of
     * * name - user name
     * * user - map of
     * * token - user token used for authentication
     * 
     */
    private List<GetDataplatformClusterConfig> configs;
    /**
     * @return The UUID of the virtual data center (VDC) in which the cluster is provisioned.
     * 
     */
    private String datacenterId;
    /**
     * @return The UUID of the cluster.
     * 
     */
    private @Nullable String id;
    /**
     * @return Kubernetes configuration
     * 
     */
    private String kubeConfig;
    /**
     * @return A list of LANs you want this node pool to be part of
     * 
     */
    private List<GetDataplatformClusterLan> lans;
    /**
     * @return Starting time of a weekly 4 hour-long window, during which maintenance might occur in hh:mm:ss format
     * 
     */
    private List<GetDataplatformClusterMaintenanceWindow> maintenanceWindows;
    /**
     * @return The name of your cluster.
     * 
     */
    private @Nullable String name;
    private @Nullable Boolean partialMatch;
    /**
     * @return cluster server (same as `config[0].clusters[0].cluster.server` but provided as an attribute for ease of use)
     * 
     */
    private String server;
    /**
     * @return a convenience map to be search the token of a specific user
     * * key - is the user name
     * * value - is the token
     * 
     */
    private Map<String,String> userTokens;
    /**
     * @return The version of the Data Platform.
     * 
     */
    private String version;

    private GetDataplatformClusterResult() {}
    /**
     * @return base64 decoded cluster certificate authority data (provided as an attribute for direct use)
     * 
     */
    public String caCrt() {
        return this.caCrt;
    }
    /**
     * @return structured kubernetes config consisting of a list with 1 item with the following fields:
     * * api_version - Kubernetes API Version
     * * kind - &#34;Config&#34;
     * * current-context - string
     * * clusters - list of
     * * name - name of cluster
     * * cluster - map of
     * * certificate-authority-data - **base64 decoded** cluster CA data
     * * server -  server address in the form `https://host:port`
     * * contexts - list of
     * * name - context name
     * * context - map of
     * * cluster - cluster name
     * * user - cluster user
     * * users - list of
     * * name - user name
     * * user - map of
     * * token - user token used for authentication
     * 
     */
    public List<GetDataplatformClusterConfig> configs() {
        return this.configs;
    }
    /**
     * @return The UUID of the virtual data center (VDC) in which the cluster is provisioned.
     * 
     */
    public String datacenterId() {
        return this.datacenterId;
    }
    /**
     * @return The UUID of the cluster.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Kubernetes configuration
     * 
     */
    public String kubeConfig() {
        return this.kubeConfig;
    }
    /**
     * @return A list of LANs you want this node pool to be part of
     * 
     */
    public List<GetDataplatformClusterLan> lans() {
        return this.lans;
    }
    /**
     * @return Starting time of a weekly 4 hour-long window, during which maintenance might occur in hh:mm:ss format
     * 
     */
    public List<GetDataplatformClusterMaintenanceWindow> maintenanceWindows() {
        return this.maintenanceWindows;
    }
    /**
     * @return The name of your cluster.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public Optional<Boolean> partialMatch() {
        return Optional.ofNullable(this.partialMatch);
    }
    /**
     * @return cluster server (same as `config[0].clusters[0].cluster.server` but provided as an attribute for ease of use)
     * 
     */
    public String server() {
        return this.server;
    }
    /**
     * @return a convenience map to be search the token of a specific user
     * * key - is the user name
     * * value - is the token
     * 
     */
    public Map<String,String> userTokens() {
        return this.userTokens;
    }
    /**
     * @return The version of the Data Platform.
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataplatformClusterResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String caCrt;
        private List<GetDataplatformClusterConfig> configs;
        private String datacenterId;
        private @Nullable String id;
        private String kubeConfig;
        private List<GetDataplatformClusterLan> lans;
        private List<GetDataplatformClusterMaintenanceWindow> maintenanceWindows;
        private @Nullable String name;
        private @Nullable Boolean partialMatch;
        private String server;
        private Map<String,String> userTokens;
        private String version;
        public Builder() {}
        public Builder(GetDataplatformClusterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caCrt = defaults.caCrt;
    	      this.configs = defaults.configs;
    	      this.datacenterId = defaults.datacenterId;
    	      this.id = defaults.id;
    	      this.kubeConfig = defaults.kubeConfig;
    	      this.lans = defaults.lans;
    	      this.maintenanceWindows = defaults.maintenanceWindows;
    	      this.name = defaults.name;
    	      this.partialMatch = defaults.partialMatch;
    	      this.server = defaults.server;
    	      this.userTokens = defaults.userTokens;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder caCrt(String caCrt) {
            if (caCrt == null) {
              throw new MissingRequiredPropertyException("GetDataplatformClusterResult", "caCrt");
            }
            this.caCrt = caCrt;
            return this;
        }
        @CustomType.Setter
        public Builder configs(List<GetDataplatformClusterConfig> configs) {
            if (configs == null) {
              throw new MissingRequiredPropertyException("GetDataplatformClusterResult", "configs");
            }
            this.configs = configs;
            return this;
        }
        public Builder configs(GetDataplatformClusterConfig... configs) {
            return configs(List.of(configs));
        }
        @CustomType.Setter
        public Builder datacenterId(String datacenterId) {
            if (datacenterId == null) {
              throw new MissingRequiredPropertyException("GetDataplatformClusterResult", "datacenterId");
            }
            this.datacenterId = datacenterId;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder kubeConfig(String kubeConfig) {
            if (kubeConfig == null) {
              throw new MissingRequiredPropertyException("GetDataplatformClusterResult", "kubeConfig");
            }
            this.kubeConfig = kubeConfig;
            return this;
        }
        @CustomType.Setter
        public Builder lans(List<GetDataplatformClusterLan> lans) {
            if (lans == null) {
              throw new MissingRequiredPropertyException("GetDataplatformClusterResult", "lans");
            }
            this.lans = lans;
            return this;
        }
        public Builder lans(GetDataplatformClusterLan... lans) {
            return lans(List.of(lans));
        }
        @CustomType.Setter
        public Builder maintenanceWindows(List<GetDataplatformClusterMaintenanceWindow> maintenanceWindows) {
            if (maintenanceWindows == null) {
              throw new MissingRequiredPropertyException("GetDataplatformClusterResult", "maintenanceWindows");
            }
            this.maintenanceWindows = maintenanceWindows;
            return this;
        }
        public Builder maintenanceWindows(GetDataplatformClusterMaintenanceWindow... maintenanceWindows) {
            return maintenanceWindows(List.of(maintenanceWindows));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder partialMatch(@Nullable Boolean partialMatch) {

            this.partialMatch = partialMatch;
            return this;
        }
        @CustomType.Setter
        public Builder server(String server) {
            if (server == null) {
              throw new MissingRequiredPropertyException("GetDataplatformClusterResult", "server");
            }
            this.server = server;
            return this;
        }
        @CustomType.Setter
        public Builder userTokens(Map<String,String> userTokens) {
            if (userTokens == null) {
              throw new MissingRequiredPropertyException("GetDataplatformClusterResult", "userTokens");
            }
            this.userTokens = userTokens;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetDataplatformClusterResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetDataplatformClusterResult build() {
            final var _resultValue = new GetDataplatformClusterResult();
            _resultValue.caCrt = caCrt;
            _resultValue.configs = configs;
            _resultValue.datacenterId = datacenterId;
            _resultValue.id = id;
            _resultValue.kubeConfig = kubeConfig;
            _resultValue.lans = lans;
            _resultValue.maintenanceWindows = maintenanceWindows;
            _resultValue.name = name;
            _resultValue.partialMatch = partialMatch;
            _resultValue.server = server;
            _resultValue.userTokens = userTokens;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
