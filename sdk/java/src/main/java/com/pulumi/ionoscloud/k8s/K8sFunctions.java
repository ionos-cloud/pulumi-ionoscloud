// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.k8s;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import com.pulumi.ionoscloud.Utilities;
import com.pulumi.ionoscloud.k8s.inputs.GetClusterArgs;
import com.pulumi.ionoscloud.k8s.inputs.GetClusterPlainArgs;
import com.pulumi.ionoscloud.k8s.inputs.GetClustersArgs;
import com.pulumi.ionoscloud.k8s.inputs.GetClustersPlainArgs;
import com.pulumi.ionoscloud.k8s.inputs.GetNodePoolArgs;
import com.pulumi.ionoscloud.k8s.inputs.GetNodePoolNodesArgs;
import com.pulumi.ionoscloud.k8s.inputs.GetNodePoolNodesPlainArgs;
import com.pulumi.ionoscloud.k8s.inputs.GetNodePoolPlainArgs;
import com.pulumi.ionoscloud.k8s.outputs.GetClusterResult;
import com.pulumi.ionoscloud.k8s.outputs.GetClustersResult;
import com.pulumi.ionoscloud.k8s.outputs.GetNodePoolNodesResult;
import com.pulumi.ionoscloud.k8s.outputs.GetNodePoolResult;
import java.util.concurrent.CompletableFuture;

public final class K8sFunctions {
    /**
     * The **k8s Cluster data source** can be used to search for and return existing k8s clusters.
     * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
     * When this happens, please refine your search string so that it is specific enough to return only one result.
     * 
     * ## Example Usage
     * 
     * ### By ID
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getCluster(GetClusterArgs.builder()
     *             .id("cluster_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By Name
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getCluster(GetClusterArgs.builder()
     *             .name("K8s Cluster Example")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Example of accessing a kubernetes cluster using the user&#39;s token
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.Cluster;
     * import com.pulumi.ionoscloud.k8s.ClusterArgs;
     * import com.pulumi.ionoscloud.k8s.inputs.ClusterMaintenanceWindowArgs;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCluster = new Cluster("testCluster", ClusterArgs.builder()
     *             .name("test_cluster")
     *             .maintenanceWindow(ClusterMaintenanceWindowArgs.builder()
     *                 .dayOfTheWeek("Saturday")
     *                 .time("03:58:25Z")
     *                 .build())
     *             .build());
     * 
     *         final var test = K8sFunctions.getCluster(GetClusterArgs.builder()
     *             .name("test_cluster")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Example of accessing a kubernetes cluster using the token from the config
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.Cluster;
     * import com.pulumi.ionoscloud.k8s.ClusterArgs;
     * import com.pulumi.ionoscloud.k8s.inputs.ClusterMaintenanceWindowArgs;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCluster = new Cluster("testCluster", ClusterArgs.builder()
     *             .name("test_cluster")
     *             .maintenanceWindow(ClusterMaintenanceWindowArgs.builder()
     *                 .dayOfTheWeek("Saturday")
     *                 .time("03:58:25Z")
     *                 .build())
     *             .build());
     * 
     *         final var test = K8sFunctions.getCluster(GetClusterArgs.builder()
     *             .name("test_cluster")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClusterResult> getCluster() {
        return getCluster(GetClusterArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The **k8s Cluster data source** can be used to search for and return existing k8s clusters.
     * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
     * When this happens, please refine your search string so that it is specific enough to return only one result.
     * 
     * ## Example Usage
     * 
     * ### By ID
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getCluster(GetClusterArgs.builder()
     *             .id("cluster_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By Name
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getCluster(GetClusterArgs.builder()
     *             .name("K8s Cluster Example")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Example of accessing a kubernetes cluster using the user&#39;s token
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.Cluster;
     * import com.pulumi.ionoscloud.k8s.ClusterArgs;
     * import com.pulumi.ionoscloud.k8s.inputs.ClusterMaintenanceWindowArgs;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCluster = new Cluster("testCluster", ClusterArgs.builder()
     *             .name("test_cluster")
     *             .maintenanceWindow(ClusterMaintenanceWindowArgs.builder()
     *                 .dayOfTheWeek("Saturday")
     *                 .time("03:58:25Z")
     *                 .build())
     *             .build());
     * 
     *         final var test = K8sFunctions.getCluster(GetClusterArgs.builder()
     *             .name("test_cluster")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Example of accessing a kubernetes cluster using the token from the config
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.Cluster;
     * import com.pulumi.ionoscloud.k8s.ClusterArgs;
     * import com.pulumi.ionoscloud.k8s.inputs.ClusterMaintenanceWindowArgs;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCluster = new Cluster("testCluster", ClusterArgs.builder()
     *             .name("test_cluster")
     *             .maintenanceWindow(ClusterMaintenanceWindowArgs.builder()
     *                 .dayOfTheWeek("Saturday")
     *                 .time("03:58:25Z")
     *                 .build())
     *             .build());
     * 
     *         final var test = K8sFunctions.getCluster(GetClusterArgs.builder()
     *             .name("test_cluster")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClusterResult> getClusterPlain() {
        return getClusterPlain(GetClusterPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The **k8s Cluster data source** can be used to search for and return existing k8s clusters.
     * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
     * When this happens, please refine your search string so that it is specific enough to return only one result.
     * 
     * ## Example Usage
     * 
     * ### By ID
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getCluster(GetClusterArgs.builder()
     *             .id("cluster_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By Name
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getCluster(GetClusterArgs.builder()
     *             .name("K8s Cluster Example")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Example of accessing a kubernetes cluster using the user&#39;s token
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.Cluster;
     * import com.pulumi.ionoscloud.k8s.ClusterArgs;
     * import com.pulumi.ionoscloud.k8s.inputs.ClusterMaintenanceWindowArgs;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCluster = new Cluster("testCluster", ClusterArgs.builder()
     *             .name("test_cluster")
     *             .maintenanceWindow(ClusterMaintenanceWindowArgs.builder()
     *                 .dayOfTheWeek("Saturday")
     *                 .time("03:58:25Z")
     *                 .build())
     *             .build());
     * 
     *         final var test = K8sFunctions.getCluster(GetClusterArgs.builder()
     *             .name("test_cluster")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Example of accessing a kubernetes cluster using the token from the config
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.Cluster;
     * import com.pulumi.ionoscloud.k8s.ClusterArgs;
     * import com.pulumi.ionoscloud.k8s.inputs.ClusterMaintenanceWindowArgs;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCluster = new Cluster("testCluster", ClusterArgs.builder()
     *             .name("test_cluster")
     *             .maintenanceWindow(ClusterMaintenanceWindowArgs.builder()
     *                 .dayOfTheWeek("Saturday")
     *                 .time("03:58:25Z")
     *                 .build())
     *             .build());
     * 
     *         final var test = K8sFunctions.getCluster(GetClusterArgs.builder()
     *             .name("test_cluster")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClusterResult> getCluster(GetClusterArgs args) {
        return getCluster(args, InvokeOptions.Empty);
    }
    /**
     * The **k8s Cluster data source** can be used to search for and return existing k8s clusters.
     * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
     * When this happens, please refine your search string so that it is specific enough to return only one result.
     * 
     * ## Example Usage
     * 
     * ### By ID
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getCluster(GetClusterArgs.builder()
     *             .id("cluster_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By Name
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getCluster(GetClusterArgs.builder()
     *             .name("K8s Cluster Example")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Example of accessing a kubernetes cluster using the user&#39;s token
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.Cluster;
     * import com.pulumi.ionoscloud.k8s.ClusterArgs;
     * import com.pulumi.ionoscloud.k8s.inputs.ClusterMaintenanceWindowArgs;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCluster = new Cluster("testCluster", ClusterArgs.builder()
     *             .name("test_cluster")
     *             .maintenanceWindow(ClusterMaintenanceWindowArgs.builder()
     *                 .dayOfTheWeek("Saturday")
     *                 .time("03:58:25Z")
     *                 .build())
     *             .build());
     * 
     *         final var test = K8sFunctions.getCluster(GetClusterArgs.builder()
     *             .name("test_cluster")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Example of accessing a kubernetes cluster using the token from the config
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.Cluster;
     * import com.pulumi.ionoscloud.k8s.ClusterArgs;
     * import com.pulumi.ionoscloud.k8s.inputs.ClusterMaintenanceWindowArgs;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCluster = new Cluster("testCluster", ClusterArgs.builder()
     *             .name("test_cluster")
     *             .maintenanceWindow(ClusterMaintenanceWindowArgs.builder()
     *                 .dayOfTheWeek("Saturday")
     *                 .time("03:58:25Z")
     *                 .build())
     *             .build());
     * 
     *         final var test = K8sFunctions.getCluster(GetClusterArgs.builder()
     *             .name("test_cluster")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClusterResult> getClusterPlain(GetClusterPlainArgs args) {
        return getClusterPlain(args, InvokeOptions.Empty);
    }
    /**
     * The **k8s Cluster data source** can be used to search for and return existing k8s clusters.
     * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
     * When this happens, please refine your search string so that it is specific enough to return only one result.
     * 
     * ## Example Usage
     * 
     * ### By ID
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getCluster(GetClusterArgs.builder()
     *             .id("cluster_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By Name
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getCluster(GetClusterArgs.builder()
     *             .name("K8s Cluster Example")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Example of accessing a kubernetes cluster using the user&#39;s token
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.Cluster;
     * import com.pulumi.ionoscloud.k8s.ClusterArgs;
     * import com.pulumi.ionoscloud.k8s.inputs.ClusterMaintenanceWindowArgs;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCluster = new Cluster("testCluster", ClusterArgs.builder()
     *             .name("test_cluster")
     *             .maintenanceWindow(ClusterMaintenanceWindowArgs.builder()
     *                 .dayOfTheWeek("Saturday")
     *                 .time("03:58:25Z")
     *                 .build())
     *             .build());
     * 
     *         final var test = K8sFunctions.getCluster(GetClusterArgs.builder()
     *             .name("test_cluster")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Example of accessing a kubernetes cluster using the token from the config
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.Cluster;
     * import com.pulumi.ionoscloud.k8s.ClusterArgs;
     * import com.pulumi.ionoscloud.k8s.inputs.ClusterMaintenanceWindowArgs;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCluster = new Cluster("testCluster", ClusterArgs.builder()
     *             .name("test_cluster")
     *             .maintenanceWindow(ClusterMaintenanceWindowArgs.builder()
     *                 .dayOfTheWeek("Saturday")
     *                 .time("03:58:25Z")
     *                 .build())
     *             .build());
     * 
     *         final var test = K8sFunctions.getCluster(GetClusterArgs.builder()
     *             .name("test_cluster")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClusterResult> getCluster(GetClusterArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("ionoscloud:k8s/getCluster:getCluster", TypeShape.of(GetClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The **k8s Cluster data source** can be used to search for and return existing k8s clusters.
     * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
     * When this happens, please refine your search string so that it is specific enough to return only one result.
     * 
     * ## Example Usage
     * 
     * ### By ID
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getCluster(GetClusterArgs.builder()
     *             .id("cluster_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By Name
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getCluster(GetClusterArgs.builder()
     *             .name("K8s Cluster Example")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Example of accessing a kubernetes cluster using the user&#39;s token
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.Cluster;
     * import com.pulumi.ionoscloud.k8s.ClusterArgs;
     * import com.pulumi.ionoscloud.k8s.inputs.ClusterMaintenanceWindowArgs;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCluster = new Cluster("testCluster", ClusterArgs.builder()
     *             .name("test_cluster")
     *             .maintenanceWindow(ClusterMaintenanceWindowArgs.builder()
     *                 .dayOfTheWeek("Saturday")
     *                 .time("03:58:25Z")
     *                 .build())
     *             .build());
     * 
     *         final var test = K8sFunctions.getCluster(GetClusterArgs.builder()
     *             .name("test_cluster")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Example of accessing a kubernetes cluster using the token from the config
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.Cluster;
     * import com.pulumi.ionoscloud.k8s.ClusterArgs;
     * import com.pulumi.ionoscloud.k8s.inputs.ClusterMaintenanceWindowArgs;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCluster = new Cluster("testCluster", ClusterArgs.builder()
     *             .name("test_cluster")
     *             .maintenanceWindow(ClusterMaintenanceWindowArgs.builder()
     *                 .dayOfTheWeek("Saturday")
     *                 .time("03:58:25Z")
     *                 .build())
     *             .build());
     * 
     *         final var test = K8sFunctions.getCluster(GetClusterArgs.builder()
     *             .name("test_cluster")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClusterResult> getCluster(GetClusterArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("ionoscloud:k8s/getCluster:getCluster", TypeShape.of(GetClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The **k8s Cluster data source** can be used to search for and return existing k8s clusters.
     * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
     * When this happens, please refine your search string so that it is specific enough to return only one result.
     * 
     * ## Example Usage
     * 
     * ### By ID
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getCluster(GetClusterArgs.builder()
     *             .id("cluster_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By Name
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getCluster(GetClusterArgs.builder()
     *             .name("K8s Cluster Example")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Example of accessing a kubernetes cluster using the user&#39;s token
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.Cluster;
     * import com.pulumi.ionoscloud.k8s.ClusterArgs;
     * import com.pulumi.ionoscloud.k8s.inputs.ClusterMaintenanceWindowArgs;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCluster = new Cluster("testCluster", ClusterArgs.builder()
     *             .name("test_cluster")
     *             .maintenanceWindow(ClusterMaintenanceWindowArgs.builder()
     *                 .dayOfTheWeek("Saturday")
     *                 .time("03:58:25Z")
     *                 .build())
     *             .build());
     * 
     *         final var test = K8sFunctions.getCluster(GetClusterArgs.builder()
     *             .name("test_cluster")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Example of accessing a kubernetes cluster using the token from the config
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.Cluster;
     * import com.pulumi.ionoscloud.k8s.ClusterArgs;
     * import com.pulumi.ionoscloud.k8s.inputs.ClusterMaintenanceWindowArgs;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCluster = new Cluster("testCluster", ClusterArgs.builder()
     *             .name("test_cluster")
     *             .maintenanceWindow(ClusterMaintenanceWindowArgs.builder()
     *                 .dayOfTheWeek("Saturday")
     *                 .time("03:58:25Z")
     *                 .build())
     *             .build());
     * 
     *         final var test = K8sFunctions.getCluster(GetClusterArgs.builder()
     *             .name("test_cluster")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClusterResult> getClusterPlain(GetClusterPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("ionoscloud:k8s/getCluster:getCluster", TypeShape.of(GetClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The **k8s_clusters data source** can be used to search for and return existing kubernetes clusters based on filters used.
     * 
     * ## Example Usage
     * 
     * ### By Name
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getClusters(GetClustersArgs.builder()
     *             .filters(GetClustersFilterArgs.builder()
     *                 .name("name")
     *                 .value("k8sClusterExample")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By Name and k8s version Family
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example2 = K8sFunctions.getClusters(GetClustersArgs.builder()
     *             .filters(            
     *                 GetClustersFilterArgs.builder()
     *                     .name("name")
     *                     .value("k8sClusterExample")
     *                     .build(),
     *                 GetClustersFilterArgs.builder()
     *                     .name("k8s_version")
     *                     .value("1.27")
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Retrieve private clusters only, by Name and Cluster State
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.compute.ComputeFunctions;
     * import com.pulumi.ionoscloud.compute.inputs.GetServersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = ComputeFunctions.getServers(GetServersArgs.builder()
     *             .filters(            
     *                 GetServersFilterArgs.builder()
     *                     .name("name")
     *                     .value("k8sClusterExample")
     *                     .build(),
     *                 GetServersFilterArgs.builder()
     *                     .name("state")
     *                     .value("ACTIVE")
     *                     .build(),
     *                 GetServersFilterArgs.builder()
     *                     .name("public")
     *                     .value("false")
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClustersResult> getClusters() {
        return getClusters(GetClustersArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The **k8s_clusters data source** can be used to search for and return existing kubernetes clusters based on filters used.
     * 
     * ## Example Usage
     * 
     * ### By Name
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getClusters(GetClustersArgs.builder()
     *             .filters(GetClustersFilterArgs.builder()
     *                 .name("name")
     *                 .value("k8sClusterExample")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By Name and k8s version Family
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example2 = K8sFunctions.getClusters(GetClustersArgs.builder()
     *             .filters(            
     *                 GetClustersFilterArgs.builder()
     *                     .name("name")
     *                     .value("k8sClusterExample")
     *                     .build(),
     *                 GetClustersFilterArgs.builder()
     *                     .name("k8s_version")
     *                     .value("1.27")
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Retrieve private clusters only, by Name and Cluster State
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.compute.ComputeFunctions;
     * import com.pulumi.ionoscloud.compute.inputs.GetServersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = ComputeFunctions.getServers(GetServersArgs.builder()
     *             .filters(            
     *                 GetServersFilterArgs.builder()
     *                     .name("name")
     *                     .value("k8sClusterExample")
     *                     .build(),
     *                 GetServersFilterArgs.builder()
     *                     .name("state")
     *                     .value("ACTIVE")
     *                     .build(),
     *                 GetServersFilterArgs.builder()
     *                     .name("public")
     *                     .value("false")
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClustersResult> getClustersPlain() {
        return getClustersPlain(GetClustersPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The **k8s_clusters data source** can be used to search for and return existing kubernetes clusters based on filters used.
     * 
     * ## Example Usage
     * 
     * ### By Name
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getClusters(GetClustersArgs.builder()
     *             .filters(GetClustersFilterArgs.builder()
     *                 .name("name")
     *                 .value("k8sClusterExample")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By Name and k8s version Family
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example2 = K8sFunctions.getClusters(GetClustersArgs.builder()
     *             .filters(            
     *                 GetClustersFilterArgs.builder()
     *                     .name("name")
     *                     .value("k8sClusterExample")
     *                     .build(),
     *                 GetClustersFilterArgs.builder()
     *                     .name("k8s_version")
     *                     .value("1.27")
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Retrieve private clusters only, by Name and Cluster State
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.compute.ComputeFunctions;
     * import com.pulumi.ionoscloud.compute.inputs.GetServersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = ComputeFunctions.getServers(GetServersArgs.builder()
     *             .filters(            
     *                 GetServersFilterArgs.builder()
     *                     .name("name")
     *                     .value("k8sClusterExample")
     *                     .build(),
     *                 GetServersFilterArgs.builder()
     *                     .name("state")
     *                     .value("ACTIVE")
     *                     .build(),
     *                 GetServersFilterArgs.builder()
     *                     .name("public")
     *                     .value("false")
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClustersResult> getClusters(GetClustersArgs args) {
        return getClusters(args, InvokeOptions.Empty);
    }
    /**
     * The **k8s_clusters data source** can be used to search for and return existing kubernetes clusters based on filters used.
     * 
     * ## Example Usage
     * 
     * ### By Name
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getClusters(GetClustersArgs.builder()
     *             .filters(GetClustersFilterArgs.builder()
     *                 .name("name")
     *                 .value("k8sClusterExample")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By Name and k8s version Family
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example2 = K8sFunctions.getClusters(GetClustersArgs.builder()
     *             .filters(            
     *                 GetClustersFilterArgs.builder()
     *                     .name("name")
     *                     .value("k8sClusterExample")
     *                     .build(),
     *                 GetClustersFilterArgs.builder()
     *                     .name("k8s_version")
     *                     .value("1.27")
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Retrieve private clusters only, by Name and Cluster State
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.compute.ComputeFunctions;
     * import com.pulumi.ionoscloud.compute.inputs.GetServersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = ComputeFunctions.getServers(GetServersArgs.builder()
     *             .filters(            
     *                 GetServersFilterArgs.builder()
     *                     .name("name")
     *                     .value("k8sClusterExample")
     *                     .build(),
     *                 GetServersFilterArgs.builder()
     *                     .name("state")
     *                     .value("ACTIVE")
     *                     .build(),
     *                 GetServersFilterArgs.builder()
     *                     .name("public")
     *                     .value("false")
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClustersResult> getClustersPlain(GetClustersPlainArgs args) {
        return getClustersPlain(args, InvokeOptions.Empty);
    }
    /**
     * The **k8s_clusters data source** can be used to search for and return existing kubernetes clusters based on filters used.
     * 
     * ## Example Usage
     * 
     * ### By Name
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getClusters(GetClustersArgs.builder()
     *             .filters(GetClustersFilterArgs.builder()
     *                 .name("name")
     *                 .value("k8sClusterExample")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By Name and k8s version Family
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example2 = K8sFunctions.getClusters(GetClustersArgs.builder()
     *             .filters(            
     *                 GetClustersFilterArgs.builder()
     *                     .name("name")
     *                     .value("k8sClusterExample")
     *                     .build(),
     *                 GetClustersFilterArgs.builder()
     *                     .name("k8s_version")
     *                     .value("1.27")
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Retrieve private clusters only, by Name and Cluster State
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.compute.ComputeFunctions;
     * import com.pulumi.ionoscloud.compute.inputs.GetServersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = ComputeFunctions.getServers(GetServersArgs.builder()
     *             .filters(            
     *                 GetServersFilterArgs.builder()
     *                     .name("name")
     *                     .value("k8sClusterExample")
     *                     .build(),
     *                 GetServersFilterArgs.builder()
     *                     .name("state")
     *                     .value("ACTIVE")
     *                     .build(),
     *                 GetServersFilterArgs.builder()
     *                     .name("public")
     *                     .value("false")
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClustersResult> getClusters(GetClustersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("ionoscloud:k8s/getClusters:getClusters", TypeShape.of(GetClustersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The **k8s_clusters data source** can be used to search for and return existing kubernetes clusters based on filters used.
     * 
     * ## Example Usage
     * 
     * ### By Name
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getClusters(GetClustersArgs.builder()
     *             .filters(GetClustersFilterArgs.builder()
     *                 .name("name")
     *                 .value("k8sClusterExample")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By Name and k8s version Family
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example2 = K8sFunctions.getClusters(GetClustersArgs.builder()
     *             .filters(            
     *                 GetClustersFilterArgs.builder()
     *                     .name("name")
     *                     .value("k8sClusterExample")
     *                     .build(),
     *                 GetClustersFilterArgs.builder()
     *                     .name("k8s_version")
     *                     .value("1.27")
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Retrieve private clusters only, by Name and Cluster State
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.compute.ComputeFunctions;
     * import com.pulumi.ionoscloud.compute.inputs.GetServersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = ComputeFunctions.getServers(GetServersArgs.builder()
     *             .filters(            
     *                 GetServersFilterArgs.builder()
     *                     .name("name")
     *                     .value("k8sClusterExample")
     *                     .build(),
     *                 GetServersFilterArgs.builder()
     *                     .name("state")
     *                     .value("ACTIVE")
     *                     .build(),
     *                 GetServersFilterArgs.builder()
     *                     .name("public")
     *                     .value("false")
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClustersResult> getClusters(GetClustersArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("ionoscloud:k8s/getClusters:getClusters", TypeShape.of(GetClustersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The **k8s_clusters data source** can be used to search for and return existing kubernetes clusters based on filters used.
     * 
     * ## Example Usage
     * 
     * ### By Name
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getClusters(GetClustersArgs.builder()
     *             .filters(GetClustersFilterArgs.builder()
     *                 .name("name")
     *                 .value("k8sClusterExample")
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By Name and k8s version Family
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example2 = K8sFunctions.getClusters(GetClustersArgs.builder()
     *             .filters(            
     *                 GetClustersFilterArgs.builder()
     *                     .name("name")
     *                     .value("k8sClusterExample")
     *                     .build(),
     *                 GetClustersFilterArgs.builder()
     *                     .name("k8s_version")
     *                     .value("1.27")
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Retrieve private clusters only, by Name and Cluster State
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.compute.ComputeFunctions;
     * import com.pulumi.ionoscloud.compute.inputs.GetServersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = ComputeFunctions.getServers(GetServersArgs.builder()
     *             .filters(            
     *                 GetServersFilterArgs.builder()
     *                     .name("name")
     *                     .value("k8sClusterExample")
     *                     .build(),
     *                 GetServersFilterArgs.builder()
     *                     .name("state")
     *                     .value("ACTIVE")
     *                     .build(),
     *                 GetServersFilterArgs.builder()
     *                     .name("public")
     *                     .value("false")
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClustersResult> getClustersPlain(GetClustersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("ionoscloud:k8s/getClusters:getClusters", TypeShape.of(GetClustersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The **k8s Node Pool** data source can be used to search for and return existing k8s Node Pools.
     * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
     * When this happens, please refine your search string so that it is specific enough to return only one result.
     * 
     * ## Example Usage
     * 
     * ### By ID
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetNodePoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getNodePool(GetNodePoolArgs.builder()
     *             .id("k8s_nodepool_id")
     *             .k8sClusterId("k8s_cluster_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By Name
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetNodePoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getNodePool(GetNodePoolArgs.builder()
     *             .name("k8s NodePool Example")
     *             .k8sClusterId("k8s_cluster_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNodePoolResult> getNodePool(GetNodePoolArgs args) {
        return getNodePool(args, InvokeOptions.Empty);
    }
    /**
     * The **k8s Node Pool** data source can be used to search for and return existing k8s Node Pools.
     * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
     * When this happens, please refine your search string so that it is specific enough to return only one result.
     * 
     * ## Example Usage
     * 
     * ### By ID
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetNodePoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getNodePool(GetNodePoolArgs.builder()
     *             .id("k8s_nodepool_id")
     *             .k8sClusterId("k8s_cluster_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By Name
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetNodePoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getNodePool(GetNodePoolArgs.builder()
     *             .name("k8s NodePool Example")
     *             .k8sClusterId("k8s_cluster_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNodePoolResult> getNodePoolPlain(GetNodePoolPlainArgs args) {
        return getNodePoolPlain(args, InvokeOptions.Empty);
    }
    /**
     * The **k8s Node Pool** data source can be used to search for and return existing k8s Node Pools.
     * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
     * When this happens, please refine your search string so that it is specific enough to return only one result.
     * 
     * ## Example Usage
     * 
     * ### By ID
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetNodePoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getNodePool(GetNodePoolArgs.builder()
     *             .id("k8s_nodepool_id")
     *             .k8sClusterId("k8s_cluster_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By Name
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetNodePoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getNodePool(GetNodePoolArgs.builder()
     *             .name("k8s NodePool Example")
     *             .k8sClusterId("k8s_cluster_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNodePoolResult> getNodePool(GetNodePoolArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("ionoscloud:k8s/getNodePool:getNodePool", TypeShape.of(GetNodePoolResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The **k8s Node Pool** data source can be used to search for and return existing k8s Node Pools.
     * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
     * When this happens, please refine your search string so that it is specific enough to return only one result.
     * 
     * ## Example Usage
     * 
     * ### By ID
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetNodePoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getNodePool(GetNodePoolArgs.builder()
     *             .id("k8s_nodepool_id")
     *             .k8sClusterId("k8s_cluster_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By Name
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetNodePoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getNodePool(GetNodePoolArgs.builder()
     *             .name("k8s NodePool Example")
     *             .k8sClusterId("k8s_cluster_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNodePoolResult> getNodePool(GetNodePoolArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("ionoscloud:k8s/getNodePool:getNodePool", TypeShape.of(GetNodePoolResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The **k8s Node Pool** data source can be used to search for and return existing k8s Node Pools.
     * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
     * When this happens, please refine your search string so that it is specific enough to return only one result.
     * 
     * ## Example Usage
     * 
     * ### By ID
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetNodePoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getNodePool(GetNodePoolArgs.builder()
     *             .id("k8s_nodepool_id")
     *             .k8sClusterId("k8s_cluster_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By Name
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetNodePoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getNodePool(GetNodePoolArgs.builder()
     *             .name("k8s NodePool Example")
     *             .k8sClusterId("k8s_cluster_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNodePoolResult> getNodePoolPlain(GetNodePoolPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("ionoscloud:k8s/getNodePool:getNodePool", TypeShape.of(GetNodePoolResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The **k8s Node Pool Nodes** data source can be used to search for and return a list of existing k8s Node Pool nodes.
     * ## Example Usage
     * 
     * ### By IDs
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetNodePoolNodesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getNodePoolNodes(GetNodePoolNodesArgs.builder()
     *             .nodePoolId("k8s_nodepool_id")
     *             .k8sClusterId("k8s_cluster_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNodePoolNodesResult> getNodePoolNodes(GetNodePoolNodesArgs args) {
        return getNodePoolNodes(args, InvokeOptions.Empty);
    }
    /**
     * The **k8s Node Pool Nodes** data source can be used to search for and return a list of existing k8s Node Pool nodes.
     * ## Example Usage
     * 
     * ### By IDs
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetNodePoolNodesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getNodePoolNodes(GetNodePoolNodesArgs.builder()
     *             .nodePoolId("k8s_nodepool_id")
     *             .k8sClusterId("k8s_cluster_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNodePoolNodesResult> getNodePoolNodesPlain(GetNodePoolNodesPlainArgs args) {
        return getNodePoolNodesPlain(args, InvokeOptions.Empty);
    }
    /**
     * The **k8s Node Pool Nodes** data source can be used to search for and return a list of existing k8s Node Pool nodes.
     * ## Example Usage
     * 
     * ### By IDs
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetNodePoolNodesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getNodePoolNodes(GetNodePoolNodesArgs.builder()
     *             .nodePoolId("k8s_nodepool_id")
     *             .k8sClusterId("k8s_cluster_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNodePoolNodesResult> getNodePoolNodes(GetNodePoolNodesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("ionoscloud:k8s/getNodePoolNodes:getNodePoolNodes", TypeShape.of(GetNodePoolNodesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The **k8s Node Pool Nodes** data source can be used to search for and return a list of existing k8s Node Pool nodes.
     * ## Example Usage
     * 
     * ### By IDs
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetNodePoolNodesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getNodePoolNodes(GetNodePoolNodesArgs.builder()
     *             .nodePoolId("k8s_nodepool_id")
     *             .k8sClusterId("k8s_cluster_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNodePoolNodesResult> getNodePoolNodes(GetNodePoolNodesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("ionoscloud:k8s/getNodePoolNodes:getNodePoolNodes", TypeShape.of(GetNodePoolNodesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The **k8s Node Pool Nodes** data source can be used to search for and return a list of existing k8s Node Pool nodes.
     * ## Example Usage
     * 
     * ### By IDs
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.k8s.K8sFunctions;
     * import com.pulumi.ionoscloud.k8s.inputs.GetNodePoolNodesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = K8sFunctions.getNodePoolNodes(GetNodePoolNodesArgs.builder()
     *             .nodePoolId("k8s_nodepool_id")
     *             .k8sClusterId("k8s_cluster_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNodePoolNodesResult> getNodePoolNodesPlain(GetNodePoolNodesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("ionoscloud:k8s/getNodePoolNodes:getNodePoolNodes", TypeShape.of(GetNodePoolNodesResult.class), args, Utilities.withVersion(options));
    }
}
