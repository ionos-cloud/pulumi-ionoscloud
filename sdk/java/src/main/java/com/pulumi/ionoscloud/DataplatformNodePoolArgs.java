// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.inputs.DataplatformNodePoolMaintenanceWindowArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataplatformNodePoolArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataplatformNodePoolArgs Empty = new DataplatformNodePoolArgs();

    /**
     * [map] Key-value pairs attached to node pool resource as [Kubernetes annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/).
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return [map] Key-value pairs attached to node pool resource as [Kubernetes annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/).
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * [string] The availability zone of the virtual datacenter region where the node pool resources should be provisioned. Must be set with one of the values `AUTO`, `ZONE_1` or `ZONE_2`. The default value is `AUTO`.
     * 
     */
    @Import(name="availabilityZone")
    private @Nullable Output<String> availabilityZone;

    /**
     * @return [string] The availability zone of the virtual datacenter region where the node pool resources should be provisioned. Must be set with one of the values `AUTO`, `ZONE_1` or `ZONE_2`. The default value is `AUTO`.
     * 
     */
    public Optional<Output<String>> availabilityZone() {
        return Optional.ofNullable(this.availabilityZone);
    }

    /**
     * [string] The UUID of an existing Dataplatform cluster.
     * 
     */
    @Import(name="clusterId", required=true)
    private Output<String> clusterId;

    /**
     * @return [string] The UUID of an existing Dataplatform cluster.
     * 
     */
    public Output<String> clusterId() {
        return this.clusterId;
    }

    /**
     * [int] The number of CPU cores per node. Must be set with a minimum value of 1. The default value is `4`.
     * 
     */
    @Import(name="coresCount")
    private @Nullable Output<Integer> coresCount;

    /**
     * @return [int] The number of CPU cores per node. Must be set with a minimum value of 1. The default value is `4`.
     * 
     */
    public Optional<Output<Integer>> coresCount() {
        return Optional.ofNullable(this.coresCount);
    }

    /**
     * [string] A valid CPU family name or `AUTO` if the platform shall choose the best fitting option. Available CPU architectures can be retrieved from the datacenter resource. The default value is `AUTO`.
     * 
     */
    @Import(name="cpuFamily")
    private @Nullable Output<String> cpuFamily;

    /**
     * @return [string] A valid CPU family name or `AUTO` if the platform shall choose the best fitting option. Available CPU architectures can be retrieved from the datacenter resource. The default value is `AUTO`.
     * 
     */
    public Optional<Output<String>> cpuFamily() {
        return Optional.ofNullable(this.cpuFamily);
    }

    /**
     * [map] Key-value pairs attached to the node pool resource as [Kubernetes labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/).
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return [map] Key-value pairs attached to the node pool resource as [Kubernetes labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/).
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * [string] Starting time of a weekly 4 hour-long window, during which maintenance might occur in hh:mm:ss format
     * 
     */
    @Import(name="maintenanceWindows")
    private @Nullable Output<List<DataplatformNodePoolMaintenanceWindowArgs>> maintenanceWindows;

    /**
     * @return [string] Starting time of a weekly 4 hour-long window, during which maintenance might occur in hh:mm:ss format
     * 
     */
    public Optional<Output<List<DataplatformNodePoolMaintenanceWindowArgs>>> maintenanceWindows() {
        return Optional.ofNullable(this.maintenanceWindows);
    }

    /**
     * [string] The name of your node pool. Must be 63 characters or less and must be empty or begin and end with an alphanumeric character ([a-z0-9A-Z]). It can contain dashes (-), underscores (_), dots (.), and alphanumerics in-between.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return [string] The name of your node pool. Must be 63 characters or less and must be empty or begin and end with an alphanumeric character ([a-z0-9A-Z]). It can contain dashes (-), underscores (_), dots (.), and alphanumerics in-between.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * [int] The number of nodes that make up the node pool. Must be set with a minimum value of 1.
     * 
     */
    @Import(name="nodeCount", required=true)
    private Output<Integer> nodeCount;

    /**
     * @return [int] The number of nodes that make up the node pool. Must be set with a minimum value of 1.
     * 
     */
    public Output<Integer> nodeCount() {
        return this.nodeCount;
    }

    /**
     * [int] The RAM size for one node in MB. Must be set in multiples of `1024`MB, with a minimum size is of `2048`MB. The default value is `4096`.
     * 
     */
    @Import(name="ramSize")
    private @Nullable Output<Integer> ramSize;

    /**
     * @return [int] The RAM size for one node in MB. Must be set in multiples of `1024`MB, with a minimum size is of `2048`MB. The default value is `4096`.
     * 
     */
    public Optional<Output<Integer>> ramSize() {
        return Optional.ofNullable(this.ramSize);
    }

    /**
     * [int] The size of the volume in GB. The size must be greater than `10`GB. The default value is `20`.
     * 
     */
    @Import(name="storageSize")
    private @Nullable Output<Integer> storageSize;

    /**
     * @return [int] The size of the volume in GB. The size must be greater than `10`GB. The default value is `20`.
     * 
     */
    public Optional<Output<Integer>> storageSize() {
        return Optional.ofNullable(this.storageSize);
    }

    /**
     * [int] The type of hardware for the volume. Must be set with one of the values `HDD` or `SSD`. The default value is `SSD`.
     * 
     */
    @Import(name="storageType")
    private @Nullable Output<String> storageType;

    /**
     * @return [int] The type of hardware for the volume. Must be set with one of the values `HDD` or `SSD`. The default value is `SSD`.
     * 
     */
    public Optional<Output<String>> storageType() {
        return Optional.ofNullable(this.storageType);
    }

    private DataplatformNodePoolArgs() {}

    private DataplatformNodePoolArgs(DataplatformNodePoolArgs $) {
        this.annotations = $.annotations;
        this.availabilityZone = $.availabilityZone;
        this.clusterId = $.clusterId;
        this.coresCount = $.coresCount;
        this.cpuFamily = $.cpuFamily;
        this.labels = $.labels;
        this.maintenanceWindows = $.maintenanceWindows;
        this.name = $.name;
        this.nodeCount = $.nodeCount;
        this.ramSize = $.ramSize;
        this.storageSize = $.storageSize;
        this.storageType = $.storageType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataplatformNodePoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataplatformNodePoolArgs $;

        public Builder() {
            $ = new DataplatformNodePoolArgs();
        }

        public Builder(DataplatformNodePoolArgs defaults) {
            $ = new DataplatformNodePoolArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations [map] Key-value pairs attached to node pool resource as [Kubernetes annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/).
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations [map] Key-value pairs attached to node pool resource as [Kubernetes annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/).
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param availabilityZone [string] The availability zone of the virtual datacenter region where the node pool resources should be provisioned. Must be set with one of the values `AUTO`, `ZONE_1` or `ZONE_2`. The default value is `AUTO`.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZone(@Nullable Output<String> availabilityZone) {
            $.availabilityZone = availabilityZone;
            return this;
        }

        /**
         * @param availabilityZone [string] The availability zone of the virtual datacenter region where the node pool resources should be provisioned. Must be set with one of the values `AUTO`, `ZONE_1` or `ZONE_2`. The default value is `AUTO`.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZone(String availabilityZone) {
            return availabilityZone(Output.of(availabilityZone));
        }

        /**
         * @param clusterId [string] The UUID of an existing Dataplatform cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId [string] The UUID of an existing Dataplatform cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param coresCount [int] The number of CPU cores per node. Must be set with a minimum value of 1. The default value is `4`.
         * 
         * @return builder
         * 
         */
        public Builder coresCount(@Nullable Output<Integer> coresCount) {
            $.coresCount = coresCount;
            return this;
        }

        /**
         * @param coresCount [int] The number of CPU cores per node. Must be set with a minimum value of 1. The default value is `4`.
         * 
         * @return builder
         * 
         */
        public Builder coresCount(Integer coresCount) {
            return coresCount(Output.of(coresCount));
        }

        /**
         * @param cpuFamily [string] A valid CPU family name or `AUTO` if the platform shall choose the best fitting option. Available CPU architectures can be retrieved from the datacenter resource. The default value is `AUTO`.
         * 
         * @return builder
         * 
         */
        public Builder cpuFamily(@Nullable Output<String> cpuFamily) {
            $.cpuFamily = cpuFamily;
            return this;
        }

        /**
         * @param cpuFamily [string] A valid CPU family name or `AUTO` if the platform shall choose the best fitting option. Available CPU architectures can be retrieved from the datacenter resource. The default value is `AUTO`.
         * 
         * @return builder
         * 
         */
        public Builder cpuFamily(String cpuFamily) {
            return cpuFamily(Output.of(cpuFamily));
        }

        /**
         * @param labels [map] Key-value pairs attached to the node pool resource as [Kubernetes labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/).
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels [map] Key-value pairs attached to the node pool resource as [Kubernetes labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/).
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param maintenanceWindows [string] Starting time of a weekly 4 hour-long window, during which maintenance might occur in hh:mm:ss format
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindows(@Nullable Output<List<DataplatformNodePoolMaintenanceWindowArgs>> maintenanceWindows) {
            $.maintenanceWindows = maintenanceWindows;
            return this;
        }

        /**
         * @param maintenanceWindows [string] Starting time of a weekly 4 hour-long window, during which maintenance might occur in hh:mm:ss format
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindows(List<DataplatformNodePoolMaintenanceWindowArgs> maintenanceWindows) {
            return maintenanceWindows(Output.of(maintenanceWindows));
        }

        /**
         * @param maintenanceWindows [string] Starting time of a weekly 4 hour-long window, during which maintenance might occur in hh:mm:ss format
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindows(DataplatformNodePoolMaintenanceWindowArgs... maintenanceWindows) {
            return maintenanceWindows(List.of(maintenanceWindows));
        }

        /**
         * @param name [string] The name of your node pool. Must be 63 characters or less and must be empty or begin and end with an alphanumeric character ([a-z0-9A-Z]). It can contain dashes (-), underscores (_), dots (.), and alphanumerics in-between.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [string] The name of your node pool. Must be 63 characters or less and must be empty or begin and end with an alphanumeric character ([a-z0-9A-Z]). It can contain dashes (-), underscores (_), dots (.), and alphanumerics in-between.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nodeCount [int] The number of nodes that make up the node pool. Must be set with a minimum value of 1.
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(Output<Integer> nodeCount) {
            $.nodeCount = nodeCount;
            return this;
        }

        /**
         * @param nodeCount [int] The number of nodes that make up the node pool. Must be set with a minimum value of 1.
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(Integer nodeCount) {
            return nodeCount(Output.of(nodeCount));
        }

        /**
         * @param ramSize [int] The RAM size for one node in MB. Must be set in multiples of `1024`MB, with a minimum size is of `2048`MB. The default value is `4096`.
         * 
         * @return builder
         * 
         */
        public Builder ramSize(@Nullable Output<Integer> ramSize) {
            $.ramSize = ramSize;
            return this;
        }

        /**
         * @param ramSize [int] The RAM size for one node in MB. Must be set in multiples of `1024`MB, with a minimum size is of `2048`MB. The default value is `4096`.
         * 
         * @return builder
         * 
         */
        public Builder ramSize(Integer ramSize) {
            return ramSize(Output.of(ramSize));
        }

        /**
         * @param storageSize [int] The size of the volume in GB. The size must be greater than `10`GB. The default value is `20`.
         * 
         * @return builder
         * 
         */
        public Builder storageSize(@Nullable Output<Integer> storageSize) {
            $.storageSize = storageSize;
            return this;
        }

        /**
         * @param storageSize [int] The size of the volume in GB. The size must be greater than `10`GB. The default value is `20`.
         * 
         * @return builder
         * 
         */
        public Builder storageSize(Integer storageSize) {
            return storageSize(Output.of(storageSize));
        }

        /**
         * @param storageType [int] The type of hardware for the volume. Must be set with one of the values `HDD` or `SSD`. The default value is `SSD`.
         * 
         * @return builder
         * 
         */
        public Builder storageType(@Nullable Output<String> storageType) {
            $.storageType = storageType;
            return this;
        }

        /**
         * @param storageType [int] The type of hardware for the volume. Must be set with one of the values `HDD` or `SSD`. The default value is `SSD`.
         * 
         * @return builder
         * 
         */
        public Builder storageType(String storageType) {
            return storageType(Output.of(storageType));
        }

        public DataplatformNodePoolArgs build() {
            if ($.clusterId == null) {
                throw new MissingRequiredPropertyException("DataplatformNodePoolArgs", "clusterId");
            }
            if ($.nodeCount == null) {
                throw new MissingRequiredPropertyException("DataplatformNodePoolArgs", "nodeCount");
            }
            return $;
        }
    }

}
