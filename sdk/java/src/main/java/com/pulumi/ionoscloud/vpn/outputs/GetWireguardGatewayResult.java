// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.vpn.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.vpn.outputs.GetWireguardGatewayConnection;
import com.pulumi.ionoscloud.vpn.outputs.GetWireguardGatewayMaintenanceWindow;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetWireguardGatewayResult {
    /**
     * @return A list of connection configurations for the WireGuard Gateway. Each `connections` block contains:
     * 
     */
    private List<GetWireguardGatewayConnection> connections;
    /**
     * @return The description of the WireGuard Gateway.
     * 
     */
    private @Nullable String description;
    /**
     * @return The IP address of the WireGuard Gateway.
     * 
     */
    private String gatewayIp;
    private String id;
    /**
     * @return The IPv4 CIDR for the WireGuard Gateway interface.
     * 
     */
    private String interfaceIpv4Cidr;
    /**
     * @return The IPv6 CIDR for the WireGuard Gateway interface.
     * 
     */
    private String interfaceIpv6Cidr;
    private Integer listenPort;
    private @Nullable String location;
    /**
     * @return A weekly 4 hour-long window, during which maintenance might occur.
     * 
     */
    private List<GetWireguardGatewayMaintenanceWindow> maintenanceWindows;
    private String name;
    /**
     * @return The public key for the WireGuard Gateway.
     * 
     */
    private String publicKey;
    /**
     * @return The current status of the WireGuard Gateway.
     * 
     */
    private String status;
    /**
     * @return Gateway performance options.
     * 
     */
    private String tier;

    private GetWireguardGatewayResult() {}
    /**
     * @return A list of connection configurations for the WireGuard Gateway. Each `connections` block contains:
     * 
     */
    public List<GetWireguardGatewayConnection> connections() {
        return this.connections;
    }
    /**
     * @return The description of the WireGuard Gateway.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The IP address of the WireGuard Gateway.
     * 
     */
    public String gatewayIp() {
        return this.gatewayIp;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return The IPv4 CIDR for the WireGuard Gateway interface.
     * 
     */
    public String interfaceIpv4Cidr() {
        return this.interfaceIpv4Cidr;
    }
    /**
     * @return The IPv6 CIDR for the WireGuard Gateway interface.
     * 
     */
    public String interfaceIpv6Cidr() {
        return this.interfaceIpv6Cidr;
    }
    public Integer listenPort() {
        return this.listenPort;
    }
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return A weekly 4 hour-long window, during which maintenance might occur.
     * 
     */
    public List<GetWireguardGatewayMaintenanceWindow> maintenanceWindows() {
        return this.maintenanceWindows;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The public key for the WireGuard Gateway.
     * 
     */
    public String publicKey() {
        return this.publicKey;
    }
    /**
     * @return The current status of the WireGuard Gateway.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Gateway performance options.
     * 
     */
    public String tier() {
        return this.tier;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWireguardGatewayResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetWireguardGatewayConnection> connections;
        private @Nullable String description;
        private String gatewayIp;
        private String id;
        private String interfaceIpv4Cidr;
        private String interfaceIpv6Cidr;
        private Integer listenPort;
        private @Nullable String location;
        private List<GetWireguardGatewayMaintenanceWindow> maintenanceWindows;
        private String name;
        private String publicKey;
        private String status;
        private String tier;
        public Builder() {}
        public Builder(GetWireguardGatewayResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connections = defaults.connections;
    	      this.description = defaults.description;
    	      this.gatewayIp = defaults.gatewayIp;
    	      this.id = defaults.id;
    	      this.interfaceIpv4Cidr = defaults.interfaceIpv4Cidr;
    	      this.interfaceIpv6Cidr = defaults.interfaceIpv6Cidr;
    	      this.listenPort = defaults.listenPort;
    	      this.location = defaults.location;
    	      this.maintenanceWindows = defaults.maintenanceWindows;
    	      this.name = defaults.name;
    	      this.publicKey = defaults.publicKey;
    	      this.status = defaults.status;
    	      this.tier = defaults.tier;
        }

        @CustomType.Setter
        public Builder connections(List<GetWireguardGatewayConnection> connections) {
            if (connections == null) {
              throw new MissingRequiredPropertyException("GetWireguardGatewayResult", "connections");
            }
            this.connections = connections;
            return this;
        }
        public Builder connections(GetWireguardGatewayConnection... connections) {
            return connections(List.of(connections));
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder gatewayIp(String gatewayIp) {
            if (gatewayIp == null) {
              throw new MissingRequiredPropertyException("GetWireguardGatewayResult", "gatewayIp");
            }
            this.gatewayIp = gatewayIp;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetWireguardGatewayResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceIpv4Cidr(String interfaceIpv4Cidr) {
            if (interfaceIpv4Cidr == null) {
              throw new MissingRequiredPropertyException("GetWireguardGatewayResult", "interfaceIpv4Cidr");
            }
            this.interfaceIpv4Cidr = interfaceIpv4Cidr;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceIpv6Cidr(String interfaceIpv6Cidr) {
            if (interfaceIpv6Cidr == null) {
              throw new MissingRequiredPropertyException("GetWireguardGatewayResult", "interfaceIpv6Cidr");
            }
            this.interfaceIpv6Cidr = interfaceIpv6Cidr;
            return this;
        }
        @CustomType.Setter
        public Builder listenPort(Integer listenPort) {
            if (listenPort == null) {
              throw new MissingRequiredPropertyException("GetWireguardGatewayResult", "listenPort");
            }
            this.listenPort = listenPort;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {

            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceWindows(List<GetWireguardGatewayMaintenanceWindow> maintenanceWindows) {
            if (maintenanceWindows == null) {
              throw new MissingRequiredPropertyException("GetWireguardGatewayResult", "maintenanceWindows");
            }
            this.maintenanceWindows = maintenanceWindows;
            return this;
        }
        public Builder maintenanceWindows(GetWireguardGatewayMaintenanceWindow... maintenanceWindows) {
            return maintenanceWindows(List.of(maintenanceWindows));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetWireguardGatewayResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder publicKey(String publicKey) {
            if (publicKey == null) {
              throw new MissingRequiredPropertyException("GetWireguardGatewayResult", "publicKey");
            }
            this.publicKey = publicKey;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetWireguardGatewayResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tier(String tier) {
            if (tier == null) {
              throw new MissingRequiredPropertyException("GetWireguardGatewayResult", "tier");
            }
            this.tier = tier;
            return this;
        }
        public GetWireguardGatewayResult build() {
            final var _resultValue = new GetWireguardGatewayResult();
            _resultValue.connections = connections;
            _resultValue.description = description;
            _resultValue.gatewayIp = gatewayIp;
            _resultValue.id = id;
            _resultValue.interfaceIpv4Cidr = interfaceIpv4Cidr;
            _resultValue.interfaceIpv6Cidr = interfaceIpv6Cidr;
            _resultValue.listenPort = listenPort;
            _resultValue.location = location;
            _resultValue.maintenanceWindows = maintenanceWindows;
            _resultValue.name = name;
            _resultValue.publicKey = publicKey;
            _resultValue.status = status;
            _resultValue.tier = tier;
            return _resultValue;
        }
    }
}
