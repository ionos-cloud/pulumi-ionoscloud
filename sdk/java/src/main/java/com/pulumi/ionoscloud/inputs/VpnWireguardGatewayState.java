// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.ionoscloud.inputs.VpnWireguardGatewayConnectionArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpnWireguardGatewayState extends com.pulumi.resources.ResourceArgs {

    public static final VpnWireguardGatewayState Empty = new VpnWireguardGatewayState();

    /**
     * [Block] The connection configuration for the WireGuard Gateway. This block supports fields documented below.
     * 
     */
    @Import(name="connections")
    private @Nullable Output<List<VpnWireguardGatewayConnectionArgs>> connections;

    /**
     * @return [Block] The connection configuration for the WireGuard Gateway. This block supports fields documented below.
     * 
     */
    public Optional<Output<List<VpnWireguardGatewayConnectionArgs>>> connections() {
        return Optional.ofNullable(this.connections);
    }

    /**
     * [String] A description of the WireGuard Gateway.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return [String] A description of the WireGuard Gateway.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * [String] The IP address of the WireGuard Gateway.
     * 
     */
    @Import(name="gatewayIp")
    private @Nullable Output<String> gatewayIp;

    /**
     * @return [String] The IP address of the WireGuard Gateway.
     * 
     */
    public Optional<Output<String>> gatewayIp() {
        return Optional.ofNullable(this.gatewayIp);
    }

    /**
     * [String] The IPv4 CIDR for the WireGuard Gateway interface.
     * 
     */
    @Import(name="interfaceIpv4Cidr")
    private @Nullable Output<String> interfaceIpv4Cidr;

    /**
     * @return [String] The IPv4 CIDR for the WireGuard Gateway interface.
     * 
     */
    public Optional<Output<String>> interfaceIpv4Cidr() {
        return Optional.ofNullable(this.interfaceIpv4Cidr);
    }

    /**
     * [String] The IPv6 CIDR for the WireGuard Gateway interface.
     * 
     */
    @Import(name="interfaceIpv6Cidr")
    private @Nullable Output<String> interfaceIpv6Cidr;

    /**
     * @return [String] The IPv6 CIDR for the WireGuard Gateway interface.
     * 
     */
    public Optional<Output<String>> interfaceIpv6Cidr() {
        return Optional.ofNullable(this.interfaceIpv6Cidr);
    }

    @Import(name="listenPort")
    private @Nullable Output<Integer> listenPort;

    public Optional<Output<Integer>> listenPort() {
        return Optional.ofNullable(this.listenPort);
    }

    /**
     * [String] The location of the WireGuard Gateway.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return [String] The location of the WireGuard Gateway.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * [String] The name of the WireGuard Gateway.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return [String] The name of the WireGuard Gateway.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * [String] The private key for the WireGuard Gateway. To be created with the wg utility.
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return [String] The private key for the WireGuard Gateway. To be created with the wg utility.
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * (Computed)[String] The public key for the WireGuard Gateway.
     * 
     */
    @Import(name="publicKey")
    private @Nullable Output<String> publicKey;

    /**
     * @return (Computed)[String] The public key for the WireGuard Gateway.
     * 
     */
    public Optional<Output<String>> publicKey() {
        return Optional.ofNullable(this.publicKey);
    }

    /**
     * (Computed)[String] The current status of the WireGuard Gateway.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return (Computed)[String] The current status of the WireGuard Gateway.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private VpnWireguardGatewayState() {}

    private VpnWireguardGatewayState(VpnWireguardGatewayState $) {
        this.connections = $.connections;
        this.description = $.description;
        this.gatewayIp = $.gatewayIp;
        this.interfaceIpv4Cidr = $.interfaceIpv4Cidr;
        this.interfaceIpv6Cidr = $.interfaceIpv6Cidr;
        this.listenPort = $.listenPort;
        this.location = $.location;
        this.name = $.name;
        this.privateKey = $.privateKey;
        this.publicKey = $.publicKey;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpnWireguardGatewayState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpnWireguardGatewayState $;

        public Builder() {
            $ = new VpnWireguardGatewayState();
        }

        public Builder(VpnWireguardGatewayState defaults) {
            $ = new VpnWireguardGatewayState(Objects.requireNonNull(defaults));
        }

        /**
         * @param connections [Block] The connection configuration for the WireGuard Gateway. This block supports fields documented below.
         * 
         * @return builder
         * 
         */
        public Builder connections(@Nullable Output<List<VpnWireguardGatewayConnectionArgs>> connections) {
            $.connections = connections;
            return this;
        }

        /**
         * @param connections [Block] The connection configuration for the WireGuard Gateway. This block supports fields documented below.
         * 
         * @return builder
         * 
         */
        public Builder connections(List<VpnWireguardGatewayConnectionArgs> connections) {
            return connections(Output.of(connections));
        }

        /**
         * @param connections [Block] The connection configuration for the WireGuard Gateway. This block supports fields documented below.
         * 
         * @return builder
         * 
         */
        public Builder connections(VpnWireguardGatewayConnectionArgs... connections) {
            return connections(List.of(connections));
        }

        /**
         * @param description [String] A description of the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description [String] A description of the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param gatewayIp [String] The IP address of the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder gatewayIp(@Nullable Output<String> gatewayIp) {
            $.gatewayIp = gatewayIp;
            return this;
        }

        /**
         * @param gatewayIp [String] The IP address of the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder gatewayIp(String gatewayIp) {
            return gatewayIp(Output.of(gatewayIp));
        }

        /**
         * @param interfaceIpv4Cidr [String] The IPv4 CIDR for the WireGuard Gateway interface.
         * 
         * @return builder
         * 
         */
        public Builder interfaceIpv4Cidr(@Nullable Output<String> interfaceIpv4Cidr) {
            $.interfaceIpv4Cidr = interfaceIpv4Cidr;
            return this;
        }

        /**
         * @param interfaceIpv4Cidr [String] The IPv4 CIDR for the WireGuard Gateway interface.
         * 
         * @return builder
         * 
         */
        public Builder interfaceIpv4Cidr(String interfaceIpv4Cidr) {
            return interfaceIpv4Cidr(Output.of(interfaceIpv4Cidr));
        }

        /**
         * @param interfaceIpv6Cidr [String] The IPv6 CIDR for the WireGuard Gateway interface.
         * 
         * @return builder
         * 
         */
        public Builder interfaceIpv6Cidr(@Nullable Output<String> interfaceIpv6Cidr) {
            $.interfaceIpv6Cidr = interfaceIpv6Cidr;
            return this;
        }

        /**
         * @param interfaceIpv6Cidr [String] The IPv6 CIDR for the WireGuard Gateway interface.
         * 
         * @return builder
         * 
         */
        public Builder interfaceIpv6Cidr(String interfaceIpv6Cidr) {
            return interfaceIpv6Cidr(Output.of(interfaceIpv6Cidr));
        }

        public Builder listenPort(@Nullable Output<Integer> listenPort) {
            $.listenPort = listenPort;
            return this;
        }

        public Builder listenPort(Integer listenPort) {
            return listenPort(Output.of(listenPort));
        }

        /**
         * @param location [String] The location of the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location [String] The location of the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name [String] The name of the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [String] The name of the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param privateKey [String] The private key for the WireGuard Gateway. To be created with the wg utility.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey [String] The private key for the WireGuard Gateway. To be created with the wg utility.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param publicKey (Computed)[String] The public key for the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(@Nullable Output<String> publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        /**
         * @param publicKey (Computed)[String] The public key for the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(String publicKey) {
            return publicKey(Output.of(publicKey));
        }

        /**
         * @param status (Computed)[String] The current status of the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status (Computed)[String] The current status of the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public VpnWireguardGatewayState build() {
            return $;
        }
    }

}
