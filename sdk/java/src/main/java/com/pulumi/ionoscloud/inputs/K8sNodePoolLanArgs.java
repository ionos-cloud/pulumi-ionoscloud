// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.inputs.K8sNodePoolLanRouteArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class K8sNodePoolLanArgs extends com.pulumi.resources.ResourceArgs {

    public static final K8sNodePoolLanArgs Empty = new K8sNodePoolLanArgs();

    /**
     * [boolean] Indicates if the Kubernetes Node Pool LAN will reserve an IP using DHCP. Default value is `true`
     * 
     */
    @Import(name="dhcp")
    private @Nullable Output<Boolean> dhcp;

    /**
     * @return [boolean] Indicates if the Kubernetes Node Pool LAN will reserve an IP using DHCP. Default value is `true`
     * 
     */
    public Optional<Output<Boolean>> dhcp() {
        return Optional.ofNullable(this.dhcp);
    }

    /**
     * [int] The LAN ID of an existing LAN at the related datacenter
     * 
     */
    @Import(name="id", required=true)
    private Output<Integer> id;

    /**
     * @return [int] The LAN ID of an existing LAN at the related datacenter
     * 
     */
    public Output<Integer> id() {
        return this.id;
    }

    /**
     * An array of additional LANs attached to worker nodes
     * 
     */
    @Import(name="routes")
    private @Nullable Output<List<K8sNodePoolLanRouteArgs>> routes;

    /**
     * @return An array of additional LANs attached to worker nodes
     * 
     */
    public Optional<Output<List<K8sNodePoolLanRouteArgs>>> routes() {
        return Optional.ofNullable(this.routes);
    }

    private K8sNodePoolLanArgs() {}

    private K8sNodePoolLanArgs(K8sNodePoolLanArgs $) {
        this.dhcp = $.dhcp;
        this.id = $.id;
        this.routes = $.routes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(K8sNodePoolLanArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private K8sNodePoolLanArgs $;

        public Builder() {
            $ = new K8sNodePoolLanArgs();
        }

        public Builder(K8sNodePoolLanArgs defaults) {
            $ = new K8sNodePoolLanArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dhcp [boolean] Indicates if the Kubernetes Node Pool LAN will reserve an IP using DHCP. Default value is `true`
         * 
         * @return builder
         * 
         */
        public Builder dhcp(@Nullable Output<Boolean> dhcp) {
            $.dhcp = dhcp;
            return this;
        }

        /**
         * @param dhcp [boolean] Indicates if the Kubernetes Node Pool LAN will reserve an IP using DHCP. Default value is `true`
         * 
         * @return builder
         * 
         */
        public Builder dhcp(Boolean dhcp) {
            return dhcp(Output.of(dhcp));
        }

        /**
         * @param id [int] The LAN ID of an existing LAN at the related datacenter
         * 
         * @return builder
         * 
         */
        public Builder id(Output<Integer> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id [int] The LAN ID of an existing LAN at the related datacenter
         * 
         * @return builder
         * 
         */
        public Builder id(Integer id) {
            return id(Output.of(id));
        }

        /**
         * @param routes An array of additional LANs attached to worker nodes
         * 
         * @return builder
         * 
         */
        public Builder routes(@Nullable Output<List<K8sNodePoolLanRouteArgs>> routes) {
            $.routes = routes;
            return this;
        }

        /**
         * @param routes An array of additional LANs attached to worker nodes
         * 
         * @return builder
         * 
         */
        public Builder routes(List<K8sNodePoolLanRouteArgs> routes) {
            return routes(Output.of(routes));
        }

        /**
         * @param routes An array of additional LANs attached to worker nodes
         * 
         * @return builder
         * 
         */
        public Builder routes(K8sNodePoolLanRouteArgs... routes) {
            return routes(List.of(routes));
        }

        public K8sNodePoolLanArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("K8sNodePoolLanArgs", "id");
            }
            return $;
        }
    }

}
