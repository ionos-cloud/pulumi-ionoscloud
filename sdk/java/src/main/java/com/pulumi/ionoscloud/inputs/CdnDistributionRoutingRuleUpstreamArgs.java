// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.inputs.CdnDistributionRoutingRuleUpstreamGeoRestrictionsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CdnDistributionRoutingRuleUpstreamArgs extends com.pulumi.resources.ResourceArgs {

    public static final CdnDistributionRoutingRuleUpstreamArgs Empty = new CdnDistributionRoutingRuleUpstreamArgs();

    /**
     * [bool] Enable or disable caching. If enabled, the CDN will cache the responses from the upstream host. Subsequent requests for the same resource will be served from the cache.
     * 
     */
    @Import(name="caching", required=true)
    private Output<Boolean> caching;

    /**
     * @return [bool] Enable or disable caching. If enabled, the CDN will cache the responses from the upstream host. Subsequent requests for the same resource will be served from the cache.
     * 
     */
    public Output<Boolean> caching() {
        return this.caching;
    }

    /**
     * [map] - A map of geo_restrictions
     * 
     */
    @Import(name="geoRestrictions")
    private @Nullable Output<CdnDistributionRoutingRuleUpstreamGeoRestrictionsArgs> geoRestrictions;

    /**
     * @return [map] - A map of geo_restrictions
     * 
     */
    public Optional<Output<CdnDistributionRoutingRuleUpstreamGeoRestrictionsArgs>> geoRestrictions() {
        return Optional.ofNullable(this.geoRestrictions);
    }

    /**
     * [string] The upstream host that handles the requests if not already cached. This host will be protected by the WAF if the option is enabled.
     * 
     */
    @Import(name="host", required=true)
    private Output<String> host;

    /**
     * @return [string] The upstream host that handles the requests if not already cached. This host will be protected by the WAF if the option is enabled.
     * 
     */
    public Output<String> host() {
        return this.host;
    }

    /**
     * [string] Rate limit class that will be applied to limit the number of incoming requests per IP.
     * 
     */
    @Import(name="rateLimitClass", required=true)
    private Output<String> rateLimitClass;

    /**
     * @return [string] Rate limit class that will be applied to limit the number of incoming requests per IP.
     * 
     */
    public Output<String> rateLimitClass() {
        return this.rateLimitClass;
    }

    /**
     * [bool] Enable or disable WAF to protect the upstream host.
     * 
     */
    @Import(name="waf", required=true)
    private Output<Boolean> waf;

    /**
     * @return [bool] Enable or disable WAF to protect the upstream host.
     * 
     */
    public Output<Boolean> waf() {
        return this.waf;
    }

    private CdnDistributionRoutingRuleUpstreamArgs() {}

    private CdnDistributionRoutingRuleUpstreamArgs(CdnDistributionRoutingRuleUpstreamArgs $) {
        this.caching = $.caching;
        this.geoRestrictions = $.geoRestrictions;
        this.host = $.host;
        this.rateLimitClass = $.rateLimitClass;
        this.waf = $.waf;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CdnDistributionRoutingRuleUpstreamArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CdnDistributionRoutingRuleUpstreamArgs $;

        public Builder() {
            $ = new CdnDistributionRoutingRuleUpstreamArgs();
        }

        public Builder(CdnDistributionRoutingRuleUpstreamArgs defaults) {
            $ = new CdnDistributionRoutingRuleUpstreamArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param caching [bool] Enable or disable caching. If enabled, the CDN will cache the responses from the upstream host. Subsequent requests for the same resource will be served from the cache.
         * 
         * @return builder
         * 
         */
        public Builder caching(Output<Boolean> caching) {
            $.caching = caching;
            return this;
        }

        /**
         * @param caching [bool] Enable or disable caching. If enabled, the CDN will cache the responses from the upstream host. Subsequent requests for the same resource will be served from the cache.
         * 
         * @return builder
         * 
         */
        public Builder caching(Boolean caching) {
            return caching(Output.of(caching));
        }

        /**
         * @param geoRestrictions [map] - A map of geo_restrictions
         * 
         * @return builder
         * 
         */
        public Builder geoRestrictions(@Nullable Output<CdnDistributionRoutingRuleUpstreamGeoRestrictionsArgs> geoRestrictions) {
            $.geoRestrictions = geoRestrictions;
            return this;
        }

        /**
         * @param geoRestrictions [map] - A map of geo_restrictions
         * 
         * @return builder
         * 
         */
        public Builder geoRestrictions(CdnDistributionRoutingRuleUpstreamGeoRestrictionsArgs geoRestrictions) {
            return geoRestrictions(Output.of(geoRestrictions));
        }

        /**
         * @param host [string] The upstream host that handles the requests if not already cached. This host will be protected by the WAF if the option is enabled.
         * 
         * @return builder
         * 
         */
        public Builder host(Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host [string] The upstream host that handles the requests if not already cached. This host will be protected by the WAF if the option is enabled.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param rateLimitClass [string] Rate limit class that will be applied to limit the number of incoming requests per IP.
         * 
         * @return builder
         * 
         */
        public Builder rateLimitClass(Output<String> rateLimitClass) {
            $.rateLimitClass = rateLimitClass;
            return this;
        }

        /**
         * @param rateLimitClass [string] Rate limit class that will be applied to limit the number of incoming requests per IP.
         * 
         * @return builder
         * 
         */
        public Builder rateLimitClass(String rateLimitClass) {
            return rateLimitClass(Output.of(rateLimitClass));
        }

        /**
         * @param waf [bool] Enable or disable WAF to protect the upstream host.
         * 
         * @return builder
         * 
         */
        public Builder waf(Output<Boolean> waf) {
            $.waf = waf;
            return this;
        }

        /**
         * @param waf [bool] Enable or disable WAF to protect the upstream host.
         * 
         * @return builder
         * 
         */
        public Builder waf(Boolean waf) {
            return waf(Output.of(waf));
        }

        public CdnDistributionRoutingRuleUpstreamArgs build() {
            if ($.caching == null) {
                throw new MissingRequiredPropertyException("CdnDistributionRoutingRuleUpstreamArgs", "caching");
            }
            if ($.host == null) {
                throw new MissingRequiredPropertyException("CdnDistributionRoutingRuleUpstreamArgs", "host");
            }
            if ($.rateLimitClass == null) {
                throw new MissingRequiredPropertyException("CdnDistributionRoutingRuleUpstreamArgs", "rateLimitClass");
            }
            if ($.waf == null) {
                throw new MissingRequiredPropertyException("CdnDistributionRoutingRuleUpstreamArgs", "waf");
            }
            return $;
        }
    }

}
