// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.autoscaling.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GroupReplicaConfigurationNicFirewallRule {
    /**
     * @return Sets the allowed code (from 0 to 254) when ICMP protocol is selected. The value &#39;null&#39; allows all codes.
     * 
     */
    private @Nullable Integer icmpCode;
    /**
     * @return Sets the allowed type (from 0 to 254) if the protocol ICMP is selected. The value &#39;null&#39; allows all types.
     * 
     */
    private @Nullable Integer icmpType;
    /**
     * @return [string] User-defined name for the Autoscaling Group.
     * 
     */
    private @Nullable String name;
    /**
     * @return Sets the end range of the allowed port (from 1 to 65535) if the protocol TCP or UDP is selected. The value &#39;null&#39; for &#39;port_range_start&#39; and &#39;port_range_end&#39; allows all ports.
     * 
     */
    private @Nullable Integer portRangeEnd;
    /**
     * @return Sets the initial range of the allowed port (from 1 to 65535) if the protocol TCP or UDP is selected. The value &#39;null&#39; for &#39;port_range_start&#39; and &#39;port_range_end&#39; allows all ports.
     * 
     */
    private @Nullable Integer portRangeStart;
    /**
     * @return The protocol for the rule. The property cannot be modified after its creation (not allowed in update requests).
     * 
     */
    private String protocol;
    /**
     * @return Only traffic originating from the respective IPv4 address is permitted. The value &#39;null&#39; allows traffic from any IP address.
     * 
     */
    private @Nullable String sourceIp;
    /**
     * @return Only traffic originating from the respective MAC address is permitted. Valid format: &#39;aa:bb:cc:dd:ee:ff&#39;. The value &#39;null&#39; allows traffic from any MAC address.
     * 
     */
    private @Nullable String sourceMac;
    /**
     * @return If the target NIC has multiple IP addresses, only the traffic directed to the respective IP address of the NIC is allowed. The value &#39;null&#39; allows traffic to any target IP address.
     * 
     */
    private @Nullable String targetIp;
    /**
     * @return The firewall rule type. If not specified, the default value &#39;INGRESS&#39; is used.
     * 
     */
    private @Nullable String type;

    private GroupReplicaConfigurationNicFirewallRule() {}
    /**
     * @return Sets the allowed code (from 0 to 254) when ICMP protocol is selected. The value &#39;null&#39; allows all codes.
     * 
     */
    public Optional<Integer> icmpCode() {
        return Optional.ofNullable(this.icmpCode);
    }
    /**
     * @return Sets the allowed type (from 0 to 254) if the protocol ICMP is selected. The value &#39;null&#39; allows all types.
     * 
     */
    public Optional<Integer> icmpType() {
        return Optional.ofNullable(this.icmpType);
    }
    /**
     * @return [string] User-defined name for the Autoscaling Group.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Sets the end range of the allowed port (from 1 to 65535) if the protocol TCP or UDP is selected. The value &#39;null&#39; for &#39;port_range_start&#39; and &#39;port_range_end&#39; allows all ports.
     * 
     */
    public Optional<Integer> portRangeEnd() {
        return Optional.ofNullable(this.portRangeEnd);
    }
    /**
     * @return Sets the initial range of the allowed port (from 1 to 65535) if the protocol TCP or UDP is selected. The value &#39;null&#39; for &#39;port_range_start&#39; and &#39;port_range_end&#39; allows all ports.
     * 
     */
    public Optional<Integer> portRangeStart() {
        return Optional.ofNullable(this.portRangeStart);
    }
    /**
     * @return The protocol for the rule. The property cannot be modified after its creation (not allowed in update requests).
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return Only traffic originating from the respective IPv4 address is permitted. The value &#39;null&#39; allows traffic from any IP address.
     * 
     */
    public Optional<String> sourceIp() {
        return Optional.ofNullable(this.sourceIp);
    }
    /**
     * @return Only traffic originating from the respective MAC address is permitted. Valid format: &#39;aa:bb:cc:dd:ee:ff&#39;. The value &#39;null&#39; allows traffic from any MAC address.
     * 
     */
    public Optional<String> sourceMac() {
        return Optional.ofNullable(this.sourceMac);
    }
    /**
     * @return If the target NIC has multiple IP addresses, only the traffic directed to the respective IP address of the NIC is allowed. The value &#39;null&#39; allows traffic to any target IP address.
     * 
     */
    public Optional<String> targetIp() {
        return Optional.ofNullable(this.targetIp);
    }
    /**
     * @return The firewall rule type. If not specified, the default value &#39;INGRESS&#39; is used.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GroupReplicaConfigurationNicFirewallRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer icmpCode;
        private @Nullable Integer icmpType;
        private @Nullable String name;
        private @Nullable Integer portRangeEnd;
        private @Nullable Integer portRangeStart;
        private String protocol;
        private @Nullable String sourceIp;
        private @Nullable String sourceMac;
        private @Nullable String targetIp;
        private @Nullable String type;
        public Builder() {}
        public Builder(GroupReplicaConfigurationNicFirewallRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.icmpCode = defaults.icmpCode;
    	      this.icmpType = defaults.icmpType;
    	      this.name = defaults.name;
    	      this.portRangeEnd = defaults.portRangeEnd;
    	      this.portRangeStart = defaults.portRangeStart;
    	      this.protocol = defaults.protocol;
    	      this.sourceIp = defaults.sourceIp;
    	      this.sourceMac = defaults.sourceMac;
    	      this.targetIp = defaults.targetIp;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder icmpCode(@Nullable Integer icmpCode) {

            this.icmpCode = icmpCode;
            return this;
        }
        @CustomType.Setter
        public Builder icmpType(@Nullable Integer icmpType) {

            this.icmpType = icmpType;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder portRangeEnd(@Nullable Integer portRangeEnd) {

            this.portRangeEnd = portRangeEnd;
            return this;
        }
        @CustomType.Setter
        public Builder portRangeStart(@Nullable Integer portRangeStart) {

            this.portRangeStart = portRangeStart;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GroupReplicaConfigurationNicFirewallRule", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder sourceIp(@Nullable String sourceIp) {

            this.sourceIp = sourceIp;
            return this;
        }
        @CustomType.Setter
        public Builder sourceMac(@Nullable String sourceMac) {

            this.sourceMac = sourceMac;
            return this;
        }
        @CustomType.Setter
        public Builder targetIp(@Nullable String targetIp) {

            this.targetIp = targetIp;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        public GroupReplicaConfigurationNicFirewallRule build() {
            final var _resultValue = new GroupReplicaConfigurationNicFirewallRule();
            _resultValue.icmpCode = icmpCode;
            _resultValue.icmpType = icmpType;
            _resultValue.name = name;
            _resultValue.portRangeEnd = portRangeEnd;
            _resultValue.portRangeStart = portRangeStart;
            _resultValue.protocol = protocol;
            _resultValue.sourceIp = sourceIp;
            _resultValue.sourceMac = sourceMac;
            _resultValue.targetIp = targetIp;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
