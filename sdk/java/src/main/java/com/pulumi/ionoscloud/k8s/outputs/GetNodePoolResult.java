// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.k8s.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.k8s.outputs.GetNodePoolAutoScaling;
import com.pulumi.ionoscloud.k8s.outputs.GetNodePoolLan;
import com.pulumi.ionoscloud.k8s.outputs.GetNodePoolMaintenanceWindow;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetNodePoolResult {
    /**
     * @return A map of annotations in the form of key &gt; value
     * 
     */
    private Map<String,String> annotations;
    /**
     * @return The range defining the minimum and maximum number of worker nodes that the managed node group can scale in
     * 
     */
    private List<GetNodePoolAutoScaling> autoScalings;
    /**
     * @return The compute availability zone in which the nodes should exist
     * 
     */
    private String availabilityZone;
    /**
     * @return A list of kubernetes versions available for upgrade
     * 
     */
    private List<String> availableUpgradeVersions;
    /**
     * @return CPU cores count
     * 
     */
    private Integer coresCount;
    /**
     * @return CPU Family
     * 
     */
    private String cpuFamily;
    /**
     * @return The UUID of the VDC
     * 
     */
    private String datacenterId;
    /**
     * @return The LAN ID of an existing LAN at the related datacenter
     * 
     */
    private String id;
    /**
     * @return ID of the cluster this node pool is part of
     * 
     */
    private String k8sClusterId;
    /**
     * @return The kubernetes version
     * 
     */
    private String k8sVersion;
    /**
     * @return A map of labels in the form of key &gt; value
     * 
     */
    private Map<String,String> labels;
    /**
     * @return A list of Local Area Networks the node pool is a part of
     * 
     */
    private List<GetNodePoolLan> lans;
    /**
     * @return A maintenance window comprise of a day of the week and a time for maintenance to be allowed
     * 
     */
    private List<GetNodePoolMaintenanceWindow> maintenanceWindows;
    /**
     * @return name of the node pool
     * 
     */
    private String name;
    /**
     * @return The number of nodes in this node pool
     * 
     */
    private Integer nodeCount;
    /**
     * @return The list of fixed IPs associated with this node pool
     * 
     */
    private List<String> publicIps;
    /**
     * @return The amount of RAM in MB
     * 
     */
    private Integer ramSize;
    /**
     * @return one of &#34;AVAILABLE&#34;,
     * &#34;INACTIVE&#34;,
     * &#34;BUSY&#34;,
     * &#34;DEPLOYING&#34;,
     * &#34;ACTIVE&#34;,
     * &#34;FAILED&#34;,
     * &#34;SUSPENDED&#34;,
     * &#34;FAILED_SUSPENDED&#34;,
     * &#34;UPDATING&#34;,
     * &#34;FAILED_UPDATING&#34;,
     * &#34;DESTROYING&#34;,
     * &#34;FAILED_DESTROYING&#34;,
     * &#34;TERMINATED&#34;
     * 
     */
    private String state;
    /**
     * @return The size of the volume in GB. The size should be greater than 10GB.
     * 
     */
    private Integer storageSize;
    /**
     * @return HDD or SDD
     * 
     */
    private String storageType;

    private GetNodePoolResult() {}
    /**
     * @return A map of annotations in the form of key &gt; value
     * 
     */
    public Map<String,String> annotations() {
        return this.annotations;
    }
    /**
     * @return The range defining the minimum and maximum number of worker nodes that the managed node group can scale in
     * 
     */
    public List<GetNodePoolAutoScaling> autoScalings() {
        return this.autoScalings;
    }
    /**
     * @return The compute availability zone in which the nodes should exist
     * 
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }
    /**
     * @return A list of kubernetes versions available for upgrade
     * 
     */
    public List<String> availableUpgradeVersions() {
        return this.availableUpgradeVersions;
    }
    /**
     * @return CPU cores count
     * 
     */
    public Integer coresCount() {
        return this.coresCount;
    }
    /**
     * @return CPU Family
     * 
     */
    public String cpuFamily() {
        return this.cpuFamily;
    }
    /**
     * @return The UUID of the VDC
     * 
     */
    public String datacenterId() {
        return this.datacenterId;
    }
    /**
     * @return The LAN ID of an existing LAN at the related datacenter
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return ID of the cluster this node pool is part of
     * 
     */
    public String k8sClusterId() {
        return this.k8sClusterId;
    }
    /**
     * @return The kubernetes version
     * 
     */
    public String k8sVersion() {
        return this.k8sVersion;
    }
    /**
     * @return A map of labels in the form of key &gt; value
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return A list of Local Area Networks the node pool is a part of
     * 
     */
    public List<GetNodePoolLan> lans() {
        return this.lans;
    }
    /**
     * @return A maintenance window comprise of a day of the week and a time for maintenance to be allowed
     * 
     */
    public List<GetNodePoolMaintenanceWindow> maintenanceWindows() {
        return this.maintenanceWindows;
    }
    /**
     * @return name of the node pool
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The number of nodes in this node pool
     * 
     */
    public Integer nodeCount() {
        return this.nodeCount;
    }
    /**
     * @return The list of fixed IPs associated with this node pool
     * 
     */
    public List<String> publicIps() {
        return this.publicIps;
    }
    /**
     * @return The amount of RAM in MB
     * 
     */
    public Integer ramSize() {
        return this.ramSize;
    }
    /**
     * @return one of &#34;AVAILABLE&#34;,
     * &#34;INACTIVE&#34;,
     * &#34;BUSY&#34;,
     * &#34;DEPLOYING&#34;,
     * &#34;ACTIVE&#34;,
     * &#34;FAILED&#34;,
     * &#34;SUSPENDED&#34;,
     * &#34;FAILED_SUSPENDED&#34;,
     * &#34;UPDATING&#34;,
     * &#34;FAILED_UPDATING&#34;,
     * &#34;DESTROYING&#34;,
     * &#34;FAILED_DESTROYING&#34;,
     * &#34;TERMINATED&#34;
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The size of the volume in GB. The size should be greater than 10GB.
     * 
     */
    public Integer storageSize() {
        return this.storageSize;
    }
    /**
     * @return HDD or SDD
     * 
     */
    public String storageType() {
        return this.storageType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNodePoolResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> annotations;
        private List<GetNodePoolAutoScaling> autoScalings;
        private String availabilityZone;
        private List<String> availableUpgradeVersions;
        private Integer coresCount;
        private String cpuFamily;
        private String datacenterId;
        private String id;
        private String k8sClusterId;
        private String k8sVersion;
        private Map<String,String> labels;
        private List<GetNodePoolLan> lans;
        private List<GetNodePoolMaintenanceWindow> maintenanceWindows;
        private String name;
        private Integer nodeCount;
        private List<String> publicIps;
        private Integer ramSize;
        private String state;
        private Integer storageSize;
        private String storageType;
        public Builder() {}
        public Builder(GetNodePoolResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.autoScalings = defaults.autoScalings;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.availableUpgradeVersions = defaults.availableUpgradeVersions;
    	      this.coresCount = defaults.coresCount;
    	      this.cpuFamily = defaults.cpuFamily;
    	      this.datacenterId = defaults.datacenterId;
    	      this.id = defaults.id;
    	      this.k8sClusterId = defaults.k8sClusterId;
    	      this.k8sVersion = defaults.k8sVersion;
    	      this.labels = defaults.labels;
    	      this.lans = defaults.lans;
    	      this.maintenanceWindows = defaults.maintenanceWindows;
    	      this.name = defaults.name;
    	      this.nodeCount = defaults.nodeCount;
    	      this.publicIps = defaults.publicIps;
    	      this.ramSize = defaults.ramSize;
    	      this.state = defaults.state;
    	      this.storageSize = defaults.storageSize;
    	      this.storageType = defaults.storageType;
        }

        @CustomType.Setter
        public Builder annotations(Map<String,String> annotations) {
            if (annotations == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "annotations");
            }
            this.annotations = annotations;
            return this;
        }
        @CustomType.Setter
        public Builder autoScalings(List<GetNodePoolAutoScaling> autoScalings) {
            if (autoScalings == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "autoScalings");
            }
            this.autoScalings = autoScalings;
            return this;
        }
        public Builder autoScalings(GetNodePoolAutoScaling... autoScalings) {
            return autoScalings(List.of(autoScalings));
        }
        @CustomType.Setter
        public Builder availabilityZone(String availabilityZone) {
            if (availabilityZone == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "availabilityZone");
            }
            this.availabilityZone = availabilityZone;
            return this;
        }
        @CustomType.Setter
        public Builder availableUpgradeVersions(List<String> availableUpgradeVersions) {
            if (availableUpgradeVersions == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "availableUpgradeVersions");
            }
            this.availableUpgradeVersions = availableUpgradeVersions;
            return this;
        }
        public Builder availableUpgradeVersions(String... availableUpgradeVersions) {
            return availableUpgradeVersions(List.of(availableUpgradeVersions));
        }
        @CustomType.Setter
        public Builder coresCount(Integer coresCount) {
            if (coresCount == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "coresCount");
            }
            this.coresCount = coresCount;
            return this;
        }
        @CustomType.Setter
        public Builder cpuFamily(String cpuFamily) {
            if (cpuFamily == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "cpuFamily");
            }
            this.cpuFamily = cpuFamily;
            return this;
        }
        @CustomType.Setter
        public Builder datacenterId(String datacenterId) {
            if (datacenterId == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "datacenterId");
            }
            this.datacenterId = datacenterId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder k8sClusterId(String k8sClusterId) {
            if (k8sClusterId == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "k8sClusterId");
            }
            this.k8sClusterId = k8sClusterId;
            return this;
        }
        @CustomType.Setter
        public Builder k8sVersion(String k8sVersion) {
            if (k8sVersion == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "k8sVersion");
            }
            this.k8sVersion = k8sVersion;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder lans(List<GetNodePoolLan> lans) {
            if (lans == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "lans");
            }
            this.lans = lans;
            return this;
        }
        public Builder lans(GetNodePoolLan... lans) {
            return lans(List.of(lans));
        }
        @CustomType.Setter
        public Builder maintenanceWindows(List<GetNodePoolMaintenanceWindow> maintenanceWindows) {
            if (maintenanceWindows == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "maintenanceWindows");
            }
            this.maintenanceWindows = maintenanceWindows;
            return this;
        }
        public Builder maintenanceWindows(GetNodePoolMaintenanceWindow... maintenanceWindows) {
            return maintenanceWindows(List.of(maintenanceWindows));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nodeCount(Integer nodeCount) {
            if (nodeCount == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "nodeCount");
            }
            this.nodeCount = nodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder publicIps(List<String> publicIps) {
            if (publicIps == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "publicIps");
            }
            this.publicIps = publicIps;
            return this;
        }
        public Builder publicIps(String... publicIps) {
            return publicIps(List.of(publicIps));
        }
        @CustomType.Setter
        public Builder ramSize(Integer ramSize) {
            if (ramSize == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "ramSize");
            }
            this.ramSize = ramSize;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder storageSize(Integer storageSize) {
            if (storageSize == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "storageSize");
            }
            this.storageSize = storageSize;
            return this;
        }
        @CustomType.Setter
        public Builder storageType(String storageType) {
            if (storageType == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "storageType");
            }
            this.storageType = storageType;
            return this;
        }
        public GetNodePoolResult build() {
            final var _resultValue = new GetNodePoolResult();
            _resultValue.annotations = annotations;
            _resultValue.autoScalings = autoScalings;
            _resultValue.availabilityZone = availabilityZone;
            _resultValue.availableUpgradeVersions = availableUpgradeVersions;
            _resultValue.coresCount = coresCount;
            _resultValue.cpuFamily = cpuFamily;
            _resultValue.datacenterId = datacenterId;
            _resultValue.id = id;
            _resultValue.k8sClusterId = k8sClusterId;
            _resultValue.k8sVersion = k8sVersion;
            _resultValue.labels = labels;
            _resultValue.lans = lans;
            _resultValue.maintenanceWindows = maintenanceWindows;
            _resultValue.name = name;
            _resultValue.nodeCount = nodeCount;
            _resultValue.publicIps = publicIps;
            _resultValue.ramSize = ramSize;
            _resultValue.state = state;
            _resultValue.storageSize = storageSize;
            _resultValue.storageType = storageType;
            return _resultValue;
        }
    }
}
