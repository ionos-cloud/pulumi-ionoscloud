// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.cert.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCertificatePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetCertificatePlainArgs Empty = new GetCertificatePlainArgs();

    /**
     * Certificate body.
     * 
     */
    @Import(name="certificate")
    private @Nullable String certificate;

    /**
     * @return Certificate body.
     * 
     */
    public Optional<String> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * Certificate chain.
     * 
     */
    @Import(name="certificateChain")
    private @Nullable String certificateChain;

    /**
     * @return Certificate chain.
     * 
     */
    public Optional<String> certificateChain() {
        return Optional.ofNullable(this.certificateChain);
    }

    /**
     * ID of the certificate you want to search for.
     * 
     * Either `name` or `id` must be provided, or both. If none are provided, the datasource will return an error.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return ID of the certificate you want to search for.
     * 
     * Either `name` or `id` must be provided, or both. If none are provided, the datasource will return an error.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Name of an existing certificate that you want to search for.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Name of an existing certificate that you want to search for.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    private GetCertificatePlainArgs() {}

    private GetCertificatePlainArgs(GetCertificatePlainArgs $) {
        this.certificate = $.certificate;
        this.certificateChain = $.certificateChain;
        this.id = $.id;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCertificatePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCertificatePlainArgs $;

        public Builder() {
            $ = new GetCertificatePlainArgs();
        }

        public Builder(GetCertificatePlainArgs defaults) {
            $ = new GetCertificatePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificate Certificate body.
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable String certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificateChain Certificate chain.
         * 
         * @return builder
         * 
         */
        public Builder certificateChain(@Nullable String certificateChain) {
            $.certificateChain = certificateChain;
            return this;
        }

        /**
         * @param id ID of the certificate you want to search for.
         * 
         * Either `name` or `id` must be provided, or both. If none are provided, the datasource will return an error.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param name Name of an existing certificate that you want to search for.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public GetCertificatePlainArgs build() {
            return $;
        }
    }

}
