// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.outputs.GetDataplatformNodePoolsNodePoolMaintenanceWindow;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDataplatformNodePoolsNodePool {
    /**
     * @return Key-value pairs attached to node pool resource as kubernetes annotations
     * 
     */
    private Map<String,String> annotations;
    /**
     * @return The availability zone of the virtual datacenter region where the node pool resources should be provisioned.
     * 
     */
    private String availabilityZone;
    /**
     * @return The number of CPU cores per node.
     * 
     */
    private Integer coresCount;
    /**
     * @return A valid CPU family name or `AUTO` if the platform shall choose the best fitting option. Available CPU architectures can be retrieved from the datacenter resource.
     * 
     */
    private String cpuFamily;
    /**
     * @return The UUID of the virtual data center (VDC) in which the node pool is provisioned
     * 
     */
    private String datacenterId;
    private String id;
    /**
     * @return Key-value pairs attached to the node pool resource as kubernetes labels
     * 
     */
    private Map<String,String> labels;
    /**
     * @return Starting time of a weekly 4 hour-long window, during which maintenance might occur in hh:mm:ss format
     * 
     */
    private List<GetDataplatformNodePoolsNodePoolMaintenanceWindow> maintenanceWindows;
    /**
     * @return Name of an existing cluster that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partial_match` parameter is not set to true.
     * 
     */
    private String name;
    /**
     * @return The number of nodes that make up the node pool.
     * 
     */
    private Integer nodeCount;
    /**
     * @return The RAM size for one node in MB. Must be set in multiples of 1024 MB, with a minimum size is of 2048 MB.
     * 
     */
    private Integer ramSize;
    /**
     * @return The size of the volume in GB. The size must be greater than 10GB.
     * 
     */
    private Integer storageSize;
    /**
     * @return The type of hardware for the volume.
     * 
     */
    private String storageType;
    /**
     * @return The version of the Data Platform.
     * 
     */
    private String version;

    private GetDataplatformNodePoolsNodePool() {}
    /**
     * @return Key-value pairs attached to node pool resource as kubernetes annotations
     * 
     */
    public Map<String,String> annotations() {
        return this.annotations;
    }
    /**
     * @return The availability zone of the virtual datacenter region where the node pool resources should be provisioned.
     * 
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }
    /**
     * @return The number of CPU cores per node.
     * 
     */
    public Integer coresCount() {
        return this.coresCount;
    }
    /**
     * @return A valid CPU family name or `AUTO` if the platform shall choose the best fitting option. Available CPU architectures can be retrieved from the datacenter resource.
     * 
     */
    public String cpuFamily() {
        return this.cpuFamily;
    }
    /**
     * @return The UUID of the virtual data center (VDC) in which the node pool is provisioned
     * 
     */
    public String datacenterId() {
        return this.datacenterId;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return Key-value pairs attached to the node pool resource as kubernetes labels
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return Starting time of a weekly 4 hour-long window, during which maintenance might occur in hh:mm:ss format
     * 
     */
    public List<GetDataplatformNodePoolsNodePoolMaintenanceWindow> maintenanceWindows() {
        return this.maintenanceWindows;
    }
    /**
     * @return Name of an existing cluster that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partial_match` parameter is not set to true.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The number of nodes that make up the node pool.
     * 
     */
    public Integer nodeCount() {
        return this.nodeCount;
    }
    /**
     * @return The RAM size for one node in MB. Must be set in multiples of 1024 MB, with a minimum size is of 2048 MB.
     * 
     */
    public Integer ramSize() {
        return this.ramSize;
    }
    /**
     * @return The size of the volume in GB. The size must be greater than 10GB.
     * 
     */
    public Integer storageSize() {
        return this.storageSize;
    }
    /**
     * @return The type of hardware for the volume.
     * 
     */
    public String storageType() {
        return this.storageType;
    }
    /**
     * @return The version of the Data Platform.
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataplatformNodePoolsNodePool defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> annotations;
        private String availabilityZone;
        private Integer coresCount;
        private String cpuFamily;
        private String datacenterId;
        private String id;
        private Map<String,String> labels;
        private List<GetDataplatformNodePoolsNodePoolMaintenanceWindow> maintenanceWindows;
        private String name;
        private Integer nodeCount;
        private Integer ramSize;
        private Integer storageSize;
        private String storageType;
        private String version;
        public Builder() {}
        public Builder(GetDataplatformNodePoolsNodePool defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.coresCount = defaults.coresCount;
    	      this.cpuFamily = defaults.cpuFamily;
    	      this.datacenterId = defaults.datacenterId;
    	      this.id = defaults.id;
    	      this.labels = defaults.labels;
    	      this.maintenanceWindows = defaults.maintenanceWindows;
    	      this.name = defaults.name;
    	      this.nodeCount = defaults.nodeCount;
    	      this.ramSize = defaults.ramSize;
    	      this.storageSize = defaults.storageSize;
    	      this.storageType = defaults.storageType;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder annotations(Map<String,String> annotations) {
            if (annotations == null) {
              throw new MissingRequiredPropertyException("GetDataplatformNodePoolsNodePool", "annotations");
            }
            this.annotations = annotations;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityZone(String availabilityZone) {
            if (availabilityZone == null) {
              throw new MissingRequiredPropertyException("GetDataplatformNodePoolsNodePool", "availabilityZone");
            }
            this.availabilityZone = availabilityZone;
            return this;
        }
        @CustomType.Setter
        public Builder coresCount(Integer coresCount) {
            if (coresCount == null) {
              throw new MissingRequiredPropertyException("GetDataplatformNodePoolsNodePool", "coresCount");
            }
            this.coresCount = coresCount;
            return this;
        }
        @CustomType.Setter
        public Builder cpuFamily(String cpuFamily) {
            if (cpuFamily == null) {
              throw new MissingRequiredPropertyException("GetDataplatformNodePoolsNodePool", "cpuFamily");
            }
            this.cpuFamily = cpuFamily;
            return this;
        }
        @CustomType.Setter
        public Builder datacenterId(String datacenterId) {
            if (datacenterId == null) {
              throw new MissingRequiredPropertyException("GetDataplatformNodePoolsNodePool", "datacenterId");
            }
            this.datacenterId = datacenterId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDataplatformNodePoolsNodePool", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetDataplatformNodePoolsNodePool", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceWindows(List<GetDataplatformNodePoolsNodePoolMaintenanceWindow> maintenanceWindows) {
            if (maintenanceWindows == null) {
              throw new MissingRequiredPropertyException("GetDataplatformNodePoolsNodePool", "maintenanceWindows");
            }
            this.maintenanceWindows = maintenanceWindows;
            return this;
        }
        public Builder maintenanceWindows(GetDataplatformNodePoolsNodePoolMaintenanceWindow... maintenanceWindows) {
            return maintenanceWindows(List.of(maintenanceWindows));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDataplatformNodePoolsNodePool", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nodeCount(Integer nodeCount) {
            if (nodeCount == null) {
              throw new MissingRequiredPropertyException("GetDataplatformNodePoolsNodePool", "nodeCount");
            }
            this.nodeCount = nodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder ramSize(Integer ramSize) {
            if (ramSize == null) {
              throw new MissingRequiredPropertyException("GetDataplatformNodePoolsNodePool", "ramSize");
            }
            this.ramSize = ramSize;
            return this;
        }
        @CustomType.Setter
        public Builder storageSize(Integer storageSize) {
            if (storageSize == null) {
              throw new MissingRequiredPropertyException("GetDataplatformNodePoolsNodePool", "storageSize");
            }
            this.storageSize = storageSize;
            return this;
        }
        @CustomType.Setter
        public Builder storageType(String storageType) {
            if (storageType == null) {
              throw new MissingRequiredPropertyException("GetDataplatformNodePoolsNodePool", "storageType");
            }
            this.storageType = storageType;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetDataplatformNodePoolsNodePool", "version");
            }
            this.version = version;
            return this;
        }
        public GetDataplatformNodePoolsNodePool build() {
            final var _resultValue = new GetDataplatformNodePoolsNodePool();
            _resultValue.annotations = annotations;
            _resultValue.availabilityZone = availabilityZone;
            _resultValue.coresCount = coresCount;
            _resultValue.cpuFamily = cpuFamily;
            _resultValue.datacenterId = datacenterId;
            _resultValue.id = id;
            _resultValue.labels = labels;
            _resultValue.maintenanceWindows = maintenanceWindows;
            _resultValue.name = name;
            _resultValue.nodeCount = nodeCount;
            _resultValue.ramSize = ramSize;
            _resultValue.storageSize = storageSize;
            _resultValue.storageType = storageType;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
