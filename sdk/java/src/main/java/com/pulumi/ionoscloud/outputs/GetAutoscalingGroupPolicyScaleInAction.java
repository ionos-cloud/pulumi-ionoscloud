// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetAutoscalingGroupPolicyScaleInAction {
    /**
     * @return When `amountType == ABSOLUTE`, this is the number of VMs added or removed in one step. When `amountType == PERCENTAGE`, this is a percentage value, which will be applied to the Autoscaling Group&#39;s current `targetReplicaCount` in order to derive the number of VMs that will be added or removed in one step. There will always be at least one VM added or removed.
     * 
     */
    private Integer amount;
    /**
     * @return The type for the given amount. Possible values are: [ABSOLUTE, PERCENTAGE].
     * 
     */
    private String amountType;
    /**
     * @return Minimum time to pass after this Scaling Action has started, until the next Scaling Action will be started. Additionally, if a Scaling Action is currently in progress, no second Scaling Action will be started for the same Autoscaling Group. Instead, the Metric will be re-evaluated after the current Scaling Action completed (either successful or with failures).
     * *Note that when you set it to values like 5m the API will automatically transform it in PT5M, so the plan will show you a diff in state that should be ignored.*
     * 
     */
    private String cooldownPeriod;
    /**
     * @return If set to &#39;true&#39;, when deleting an replica during scale in, any attached volume will also be deleted. When set to &#39;false&#39;, all volumes remain in the datacenter and must be deleted manually. Note that every scale-out creates new volumes. When they are not deleted, they will eventually use all of your contracts resource limits. At this point, scaling out would not be possible anymore.
     * 
     */
    private Boolean deleteVolumes;
    /**
     * @return The type of the termination policy for the autoscaling group so that a specific pattern is followed for Scaling-In instances. Default termination policy is OLDEST_SERVER_FIRST.
     * 
     */
    private String terminationPolicyType;

    private GetAutoscalingGroupPolicyScaleInAction() {}
    /**
     * @return When `amountType == ABSOLUTE`, this is the number of VMs added or removed in one step. When `amountType == PERCENTAGE`, this is a percentage value, which will be applied to the Autoscaling Group&#39;s current `targetReplicaCount` in order to derive the number of VMs that will be added or removed in one step. There will always be at least one VM added or removed.
     * 
     */
    public Integer amount() {
        return this.amount;
    }
    /**
     * @return The type for the given amount. Possible values are: [ABSOLUTE, PERCENTAGE].
     * 
     */
    public String amountType() {
        return this.amountType;
    }
    /**
     * @return Minimum time to pass after this Scaling Action has started, until the next Scaling Action will be started. Additionally, if a Scaling Action is currently in progress, no second Scaling Action will be started for the same Autoscaling Group. Instead, the Metric will be re-evaluated after the current Scaling Action completed (either successful or with failures).
     * *Note that when you set it to values like 5m the API will automatically transform it in PT5M, so the plan will show you a diff in state that should be ignored.*
     * 
     */
    public String cooldownPeriod() {
        return this.cooldownPeriod;
    }
    /**
     * @return If set to &#39;true&#39;, when deleting an replica during scale in, any attached volume will also be deleted. When set to &#39;false&#39;, all volumes remain in the datacenter and must be deleted manually. Note that every scale-out creates new volumes. When they are not deleted, they will eventually use all of your contracts resource limits. At this point, scaling out would not be possible anymore.
     * 
     */
    public Boolean deleteVolumes() {
        return this.deleteVolumes;
    }
    /**
     * @return The type of the termination policy for the autoscaling group so that a specific pattern is followed for Scaling-In instances. Default termination policy is OLDEST_SERVER_FIRST.
     * 
     */
    public String terminationPolicyType() {
        return this.terminationPolicyType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAutoscalingGroupPolicyScaleInAction defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer amount;
        private String amountType;
        private String cooldownPeriod;
        private Boolean deleteVolumes;
        private String terminationPolicyType;
        public Builder() {}
        public Builder(GetAutoscalingGroupPolicyScaleInAction defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.amount = defaults.amount;
    	      this.amountType = defaults.amountType;
    	      this.cooldownPeriod = defaults.cooldownPeriod;
    	      this.deleteVolumes = defaults.deleteVolumes;
    	      this.terminationPolicyType = defaults.terminationPolicyType;
        }

        @CustomType.Setter
        public Builder amount(Integer amount) {
            if (amount == null) {
              throw new MissingRequiredPropertyException("GetAutoscalingGroupPolicyScaleInAction", "amount");
            }
            this.amount = amount;
            return this;
        }
        @CustomType.Setter
        public Builder amountType(String amountType) {
            if (amountType == null) {
              throw new MissingRequiredPropertyException("GetAutoscalingGroupPolicyScaleInAction", "amountType");
            }
            this.amountType = amountType;
            return this;
        }
        @CustomType.Setter
        public Builder cooldownPeriod(String cooldownPeriod) {
            if (cooldownPeriod == null) {
              throw new MissingRequiredPropertyException("GetAutoscalingGroupPolicyScaleInAction", "cooldownPeriod");
            }
            this.cooldownPeriod = cooldownPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder deleteVolumes(Boolean deleteVolumes) {
            if (deleteVolumes == null) {
              throw new MissingRequiredPropertyException("GetAutoscalingGroupPolicyScaleInAction", "deleteVolumes");
            }
            this.deleteVolumes = deleteVolumes;
            return this;
        }
        @CustomType.Setter
        public Builder terminationPolicyType(String terminationPolicyType) {
            if (terminationPolicyType == null) {
              throw new MissingRequiredPropertyException("GetAutoscalingGroupPolicyScaleInAction", "terminationPolicyType");
            }
            this.terminationPolicyType = terminationPolicyType;
            return this;
        }
        public GetAutoscalingGroupPolicyScaleInAction build() {
            final var _resultValue = new GetAutoscalingGroupPolicyScaleInAction();
            _resultValue.amount = amount;
            _resultValue.amountType = amountType;
            _resultValue.cooldownPeriod = cooldownPeriod;
            _resultValue.deleteVolumes = deleteVolumes;
            _resultValue.terminationPolicyType = terminationPolicyType;
            return _resultValue;
        }
    }
}
