// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.creg;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.creg.inputs.RegistryTokenScopeArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistryTokenArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistryTokenArgs Empty = new RegistryTokenArgs();

    @Import(name="expiryDate")
    private @Nullable Output<String> expiryDate;

    public Optional<Output<String>> expiryDate() {
        return Optional.ofNullable(this.expiryDate);
    }

    /**
     * [string] The name of the container registry token. Immutable, update forces re-creation of the resource.
     * * `expiry-date`           - (Optional)[string] The value must be supplied as ISO 8601 timestamp
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return [string] The name of the container registry token. Immutable, update forces re-creation of the resource.
     * * `expiry-date`           - (Optional)[string] The value must be supplied as ISO 8601 timestamp
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="registryId", required=true)
    private Output<String> registryId;

    public Output<String> registryId() {
        return this.registryId;
    }

    /**
     * [string] Saves token password to file. Only works on create. Takes as argument a file name, or a file path
     * 
     * &gt; **⚠ WARNING** `save_password_to_file` must be used with caution.
     * It will save the password(token) returned on create to a file. This is the only way to get the token.
     * 
     */
    @Import(name="savePasswordToFile")
    private @Nullable Output<String> savePasswordToFile;

    /**
     * @return [string] Saves token password to file. Only works on create. Takes as argument a file name, or a file path
     * 
     * &gt; **⚠ WARNING** `save_password_to_file` must be used with caution.
     * It will save the password(token) returned on create to a file. This is the only way to get the token.
     * 
     */
    public Optional<Output<String>> savePasswordToFile() {
        return Optional.ofNullable(this.savePasswordToFile);
    }

    /**
     * [map]
     * 
     */
    @Import(name="scopes")
    private @Nullable Output<List<RegistryTokenScopeArgs>> scopes;

    /**
     * @return [map]
     * 
     */
    public Optional<Output<List<RegistryTokenScopeArgs>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * [string] Must have on of the values: `enabled`, `disabled`
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return [string] Must have on of the values: `enabled`, `disabled`
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private RegistryTokenArgs() {}

    private RegistryTokenArgs(RegistryTokenArgs $) {
        this.expiryDate = $.expiryDate;
        this.name = $.name;
        this.registryId = $.registryId;
        this.savePasswordToFile = $.savePasswordToFile;
        this.scopes = $.scopes;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistryTokenArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistryTokenArgs $;

        public Builder() {
            $ = new RegistryTokenArgs();
        }

        public Builder(RegistryTokenArgs defaults) {
            $ = new RegistryTokenArgs(Objects.requireNonNull(defaults));
        }

        public Builder expiryDate(@Nullable Output<String> expiryDate) {
            $.expiryDate = expiryDate;
            return this;
        }

        public Builder expiryDate(String expiryDate) {
            return expiryDate(Output.of(expiryDate));
        }

        /**
         * @param name [string] The name of the container registry token. Immutable, update forces re-creation of the resource.
         * * `expiry-date`           - (Optional)[string] The value must be supplied as ISO 8601 timestamp
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [string] The name of the container registry token. Immutable, update forces re-creation of the resource.
         * * `expiry-date`           - (Optional)[string] The value must be supplied as ISO 8601 timestamp
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder registryId(Output<String> registryId) {
            $.registryId = registryId;
            return this;
        }

        public Builder registryId(String registryId) {
            return registryId(Output.of(registryId));
        }

        /**
         * @param savePasswordToFile [string] Saves token password to file. Only works on create. Takes as argument a file name, or a file path
         * 
         * &gt; **⚠ WARNING** `save_password_to_file` must be used with caution.
         * It will save the password(token) returned on create to a file. This is the only way to get the token.
         * 
         * @return builder
         * 
         */
        public Builder savePasswordToFile(@Nullable Output<String> savePasswordToFile) {
            $.savePasswordToFile = savePasswordToFile;
            return this;
        }

        /**
         * @param savePasswordToFile [string] Saves token password to file. Only works on create. Takes as argument a file name, or a file path
         * 
         * &gt; **⚠ WARNING** `save_password_to_file` must be used with caution.
         * It will save the password(token) returned on create to a file. This is the only way to get the token.
         * 
         * @return builder
         * 
         */
        public Builder savePasswordToFile(String savePasswordToFile) {
            return savePasswordToFile(Output.of(savePasswordToFile));
        }

        /**
         * @param scopes [map]
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable Output<List<RegistryTokenScopeArgs>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes [map]
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<RegistryTokenScopeArgs> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes [map]
         * 
         * @return builder
         * 
         */
        public Builder scopes(RegistryTokenScopeArgs... scopes) {
            return scopes(List.of(scopes));
        }

        /**
         * @param status [string] Must have on of the values: `enabled`, `disabled`
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status [string] Must have on of the values: `enabled`, `disabled`
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public RegistryTokenArgs build() {
            if ($.registryId == null) {
                throw new MissingRequiredPropertyException("RegistryTokenArgs", "registryId");
            }
            return $;
        }
    }

}
