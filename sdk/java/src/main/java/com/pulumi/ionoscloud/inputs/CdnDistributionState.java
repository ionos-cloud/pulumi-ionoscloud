// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.ionoscloud.inputs.CdnDistributionRoutingRuleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CdnDistributionState extends com.pulumi.resources.ResourceArgs {

    public static final CdnDistributionState Empty = new CdnDistributionState();

    /**
     * [string] The ID of the certificate to use for the distribution. You can create certificates with the certificate resource.
     * 
     */
    @Import(name="certificateId")
    private @Nullable Output<String> certificateId;

    /**
     * @return [string] The ID of the certificate to use for the distribution. You can create certificates with the certificate resource.
     * 
     */
    public Optional<Output<String>> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }

    /**
     * [string] The domain of the distribution.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return [string] The domain of the distribution.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * IP of the distribution, it has to be included on the domain DNS Zone as A record.
     * 
     */
    @Import(name="publicEndpointV4")
    private @Nullable Output<String> publicEndpointV4;

    /**
     * @return IP of the distribution, it has to be included on the domain DNS Zone as A record.
     * 
     */
    public Optional<Output<String>> publicEndpointV4() {
        return Optional.ofNullable(this.publicEndpointV4);
    }

    /**
     * IP of the distribution, it has to be included on the domain DNS Zone as AAAA record.
     * 
     */
    @Import(name="publicEndpointV6")
    private @Nullable Output<String> publicEndpointV6;

    /**
     * @return IP of the distribution, it has to be included on the domain DNS Zone as AAAA record.
     * 
     */
    public Optional<Output<String>> publicEndpointV6() {
        return Optional.ofNullable(this.publicEndpointV6);
    }

    /**
     * Unique resource indentifier.
     * 
     */
    @Import(name="resourceUrn")
    private @Nullable Output<String> resourceUrn;

    /**
     * @return Unique resource indentifier.
     * 
     */
    public Optional<Output<String>> resourceUrn() {
        return Optional.ofNullable(this.resourceUrn);
    }

    /**
     * [list] The routing rules for the distribution.
     * 
     */
    @Import(name="routingRules")
    private @Nullable Output<List<CdnDistributionRoutingRuleArgs>> routingRules;

    /**
     * @return [list] The routing rules for the distribution.
     * 
     */
    public Optional<Output<List<CdnDistributionRoutingRuleArgs>>> routingRules() {
        return Optional.ofNullable(this.routingRules);
    }

    private CdnDistributionState() {}

    private CdnDistributionState(CdnDistributionState $) {
        this.certificateId = $.certificateId;
        this.domain = $.domain;
        this.publicEndpointV4 = $.publicEndpointV4;
        this.publicEndpointV6 = $.publicEndpointV6;
        this.resourceUrn = $.resourceUrn;
        this.routingRules = $.routingRules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CdnDistributionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CdnDistributionState $;

        public Builder() {
            $ = new CdnDistributionState();
        }

        public Builder(CdnDistributionState defaults) {
            $ = new CdnDistributionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateId [string] The ID of the certificate to use for the distribution. You can create certificates with the certificate resource.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(@Nullable Output<String> certificateId) {
            $.certificateId = certificateId;
            return this;
        }

        /**
         * @param certificateId [string] The ID of the certificate to use for the distribution. You can create certificates with the certificate resource.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(String certificateId) {
            return certificateId(Output.of(certificateId));
        }

        /**
         * @param domain [string] The domain of the distribution.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain [string] The domain of the distribution.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param publicEndpointV4 IP of the distribution, it has to be included on the domain DNS Zone as A record.
         * 
         * @return builder
         * 
         */
        public Builder publicEndpointV4(@Nullable Output<String> publicEndpointV4) {
            $.publicEndpointV4 = publicEndpointV4;
            return this;
        }

        /**
         * @param publicEndpointV4 IP of the distribution, it has to be included on the domain DNS Zone as A record.
         * 
         * @return builder
         * 
         */
        public Builder publicEndpointV4(String publicEndpointV4) {
            return publicEndpointV4(Output.of(publicEndpointV4));
        }

        /**
         * @param publicEndpointV6 IP of the distribution, it has to be included on the domain DNS Zone as AAAA record.
         * 
         * @return builder
         * 
         */
        public Builder publicEndpointV6(@Nullable Output<String> publicEndpointV6) {
            $.publicEndpointV6 = publicEndpointV6;
            return this;
        }

        /**
         * @param publicEndpointV6 IP of the distribution, it has to be included on the domain DNS Zone as AAAA record.
         * 
         * @return builder
         * 
         */
        public Builder publicEndpointV6(String publicEndpointV6) {
            return publicEndpointV6(Output.of(publicEndpointV6));
        }

        /**
         * @param resourceUrn Unique resource indentifier.
         * 
         * @return builder
         * 
         */
        public Builder resourceUrn(@Nullable Output<String> resourceUrn) {
            $.resourceUrn = resourceUrn;
            return this;
        }

        /**
         * @param resourceUrn Unique resource indentifier.
         * 
         * @return builder
         * 
         */
        public Builder resourceUrn(String resourceUrn) {
            return resourceUrn(Output.of(resourceUrn));
        }

        /**
         * @param routingRules [list] The routing rules for the distribution.
         * 
         * @return builder
         * 
         */
        public Builder routingRules(@Nullable Output<List<CdnDistributionRoutingRuleArgs>> routingRules) {
            $.routingRules = routingRules;
            return this;
        }

        /**
         * @param routingRules [list] The routing rules for the distribution.
         * 
         * @return builder
         * 
         */
        public Builder routingRules(List<CdnDistributionRoutingRuleArgs> routingRules) {
            return routingRules(Output.of(routingRules));
        }

        /**
         * @param routingRules [list] The routing rules for the distribution.
         * 
         * @return builder
         * 
         */
        public Builder routingRules(CdnDistributionRoutingRuleArgs... routingRules) {
            return routingRules(List.of(routingRules));
        }

        public CdnDistributionState build() {
            return $;
        }
    }

}
