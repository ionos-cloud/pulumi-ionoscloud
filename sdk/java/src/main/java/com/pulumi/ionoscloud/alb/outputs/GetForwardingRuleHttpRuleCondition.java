// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.alb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetForwardingRuleHttpRuleCondition {
    /**
     * @return Matching rule for the HTTP rule condition attribute; mandatory for HEADER, PATH, QUERY, METHOD, HOST, and COOKIE types; must be null when type is SOURCE_IP.
     * 
     */
    private String condition;
    /**
     * @return Must be null when type is PATH, METHOD, HOST, or SOURCE_IP. Key can only be set when type is COOKIES, HEADER, or QUERY.
     * 
     */
    private String key;
    /**
     * @return Specifies whether the condition is negated or not; the default is False.
     * 
     */
    private Boolean negate;
    /**
     * @return Type of the Http Rule condition.
     * 
     */
    private String type;
    /**
     * @return Mandatory for conditions CONTAINS, EQUALS, MATCHES, STARTS_WITH, ENDS_WITH; must be null when condition is EXISTS; should be a valid CIDR if provided and if type is SOURCE_IP.
     * 
     */
    private String value;

    private GetForwardingRuleHttpRuleCondition() {}
    /**
     * @return Matching rule for the HTTP rule condition attribute; mandatory for HEADER, PATH, QUERY, METHOD, HOST, and COOKIE types; must be null when type is SOURCE_IP.
     * 
     */
    public String condition() {
        return this.condition;
    }
    /**
     * @return Must be null when type is PATH, METHOD, HOST, or SOURCE_IP. Key can only be set when type is COOKIES, HEADER, or QUERY.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return Specifies whether the condition is negated or not; the default is False.
     * 
     */
    public Boolean negate() {
        return this.negate;
    }
    /**
     * @return Type of the Http Rule condition.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Mandatory for conditions CONTAINS, EQUALS, MATCHES, STARTS_WITH, ENDS_WITH; must be null when condition is EXISTS; should be a valid CIDR if provided and if type is SOURCE_IP.
     * 
     */
    public String value() {
        return this.value;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetForwardingRuleHttpRuleCondition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String condition;
        private String key;
        private Boolean negate;
        private String type;
        private String value;
        public Builder() {}
        public Builder(GetForwardingRuleHttpRuleCondition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.condition = defaults.condition;
    	      this.key = defaults.key;
    	      this.negate = defaults.negate;
    	      this.type = defaults.type;
    	      this.value = defaults.value;
        }

        @CustomType.Setter
        public Builder condition(String condition) {
            if (condition == null) {
              throw new MissingRequiredPropertyException("GetForwardingRuleHttpRuleCondition", "condition");
            }
            this.condition = condition;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetForwardingRuleHttpRuleCondition", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder negate(Boolean negate) {
            if (negate == null) {
              throw new MissingRequiredPropertyException("GetForwardingRuleHttpRuleCondition", "negate");
            }
            this.negate = negate;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetForwardingRuleHttpRuleCondition", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder value(String value) {
            if (value == null) {
              throw new MissingRequiredPropertyException("GetForwardingRuleHttpRuleCondition", "value");
            }
            this.value = value;
            return this;
        }
        public GetForwardingRuleHttpRuleCondition build() {
            final var _resultValue = new GetForwardingRuleHttpRuleCondition();
            _resultValue.condition = condition;
            _resultValue.key = key;
            _resultValue.negate = negate;
            _resultValue.type = type;
            _resultValue.value = value;
            return _resultValue;
        }
    }
}
