// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.outputs.GetNatgatewayLan;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetNatgatewayResult {
    private String datacenterId;
    /**
     * @return Id for the LAN connected to the NAT gateway
     * 
     */
    private @Nullable String id;
    /**
     * @return Collection of LANs connected to the NAT gateway. IPs must contain valid subnet mask. If user will not provide any IP then system will generate an IP with /24 subnet.
     * 
     */
    private List<GetNatgatewayLan> lans;
    /**
     * @return Name of that natgateway
     * 
     */
    private @Nullable String name;
    /**
     * @return Collection of public IP addresses of the NAT gateway. Should be customer reserved IP addresses in that location
     * 
     */
    private List<String> publicIps;

    private GetNatgatewayResult() {}
    public String datacenterId() {
        return this.datacenterId;
    }
    /**
     * @return Id for the LAN connected to the NAT gateway
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Collection of LANs connected to the NAT gateway. IPs must contain valid subnet mask. If user will not provide any IP then system will generate an IP with /24 subnet.
     * 
     */
    public List<GetNatgatewayLan> lans() {
        return this.lans;
    }
    /**
     * @return Name of that natgateway
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Collection of public IP addresses of the NAT gateway. Should be customer reserved IP addresses in that location
     * 
     */
    public List<String> publicIps() {
        return this.publicIps;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNatgatewayResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String datacenterId;
        private @Nullable String id;
        private List<GetNatgatewayLan> lans;
        private @Nullable String name;
        private List<String> publicIps;
        public Builder() {}
        public Builder(GetNatgatewayResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datacenterId = defaults.datacenterId;
    	      this.id = defaults.id;
    	      this.lans = defaults.lans;
    	      this.name = defaults.name;
    	      this.publicIps = defaults.publicIps;
        }

        @CustomType.Setter
        public Builder datacenterId(String datacenterId) {
            if (datacenterId == null) {
              throw new MissingRequiredPropertyException("GetNatgatewayResult", "datacenterId");
            }
            this.datacenterId = datacenterId;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lans(List<GetNatgatewayLan> lans) {
            if (lans == null) {
              throw new MissingRequiredPropertyException("GetNatgatewayResult", "lans");
            }
            this.lans = lans;
            return this;
        }
        public Builder lans(GetNatgatewayLan... lans) {
            return lans(List.of(lans));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder publicIps(List<String> publicIps) {
            if (publicIps == null) {
              throw new MissingRequiredPropertyException("GetNatgatewayResult", "publicIps");
            }
            this.publicIps = publicIps;
            return this;
        }
        public Builder publicIps(String... publicIps) {
            return publicIps(List.of(publicIps));
        }
        public GetNatgatewayResult build() {
            final var _resultValue = new GetNatgatewayResult();
            _resultValue.datacenterId = datacenterId;
            _resultValue.id = id;
            _resultValue.lans = lans;
            _resultValue.name = name;
            _resultValue.publicIps = publicIps;
            return _resultValue;
        }
    }
}
