// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.inputs.LoggingPipelineLogDestinationArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoggingPipelineLogArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoggingPipelineLogArgs Empty = new LoggingPipelineLogArgs();

    /**
     * [list] The configuration of the logs datastore, a list that contains elements with the following structure:
     * 
     */
    @Import(name="destinations")
    private @Nullable Output<List<LoggingPipelineLogDestinationArgs>> destinations;

    /**
     * @return [list] The configuration of the logs datastore, a list that contains elements with the following structure:
     * 
     */
    public Optional<Output<List<LoggingPipelineLogDestinationArgs>>> destinations() {
        return Optional.ofNullable(this.destinations);
    }

    /**
     * [string] &#34;Protocol to use as intake. Possible values are: http, tcp.&#34;
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return [string] &#34;Protocol to use as intake. Possible values are: http, tcp.&#34;
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * [bool]
     * 
     */
    @Import(name="public")
    private @Nullable Output<Boolean> public_;

    /**
     * @return [bool]
     * 
     */
    public Optional<Output<Boolean>> public_() {
        return Optional.ofNullable(this.public_);
    }

    /**
     * [string] The source parser to be used.
     * 
     */
    @Import(name="source", required=true)
    private Output<String> source;

    /**
     * @return [string] The source parser to be used.
     * 
     */
    public Output<String> source() {
        return this.source;
    }

    /**
     * [string] The tag is used to distinguish different pipelines. Must be unique amongst the pipeline&#39;s array items.
     * 
     */
    @Import(name="tag", required=true)
    private Output<String> tag;

    /**
     * @return [string] The tag is used to distinguish different pipelines. Must be unique amongst the pipeline&#39;s array items.
     * 
     */
    public Output<String> tag() {
        return this.tag;
    }

    private LoggingPipelineLogArgs() {}

    private LoggingPipelineLogArgs(LoggingPipelineLogArgs $) {
        this.destinations = $.destinations;
        this.protocol = $.protocol;
        this.public_ = $.public_;
        this.source = $.source;
        this.tag = $.tag;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoggingPipelineLogArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoggingPipelineLogArgs $;

        public Builder() {
            $ = new LoggingPipelineLogArgs();
        }

        public Builder(LoggingPipelineLogArgs defaults) {
            $ = new LoggingPipelineLogArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinations [list] The configuration of the logs datastore, a list that contains elements with the following structure:
         * 
         * @return builder
         * 
         */
        public Builder destinations(@Nullable Output<List<LoggingPipelineLogDestinationArgs>> destinations) {
            $.destinations = destinations;
            return this;
        }

        /**
         * @param destinations [list] The configuration of the logs datastore, a list that contains elements with the following structure:
         * 
         * @return builder
         * 
         */
        public Builder destinations(List<LoggingPipelineLogDestinationArgs> destinations) {
            return destinations(Output.of(destinations));
        }

        /**
         * @param destinations [list] The configuration of the logs datastore, a list that contains elements with the following structure:
         * 
         * @return builder
         * 
         */
        public Builder destinations(LoggingPipelineLogDestinationArgs... destinations) {
            return destinations(List.of(destinations));
        }

        /**
         * @param protocol [string] &#34;Protocol to use as intake. Possible values are: http, tcp.&#34;
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol [string] &#34;Protocol to use as intake. Possible values are: http, tcp.&#34;
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param public_ [bool]
         * 
         * @return builder
         * 
         */
        public Builder public_(@Nullable Output<Boolean> public_) {
            $.public_ = public_;
            return this;
        }

        /**
         * @param public_ [bool]
         * 
         * @return builder
         * 
         */
        public Builder public_(Boolean public_) {
            return public_(Output.of(public_));
        }

        /**
         * @param source [string] The source parser to be used.
         * 
         * @return builder
         * 
         */
        public Builder source(Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source [string] The source parser to be used.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param tag [string] The tag is used to distinguish different pipelines. Must be unique amongst the pipeline&#39;s array items.
         * 
         * @return builder
         * 
         */
        public Builder tag(Output<String> tag) {
            $.tag = tag;
            return this;
        }

        /**
         * @param tag [string] The tag is used to distinguish different pipelines. Must be unique amongst the pipeline&#39;s array items.
         * 
         * @return builder
         * 
         */
        public Builder tag(String tag) {
            return tag(Output.of(tag));
        }

        public LoggingPipelineLogArgs build() {
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("LoggingPipelineLogArgs", "protocol");
            }
            if ($.source == null) {
                throw new MissingRequiredPropertyException("LoggingPipelineLogArgs", "source");
            }
            if ($.tag == null) {
                throw new MissingRequiredPropertyException("LoggingPipelineLogArgs", "tag");
            }
            return $;
        }
    }

}
