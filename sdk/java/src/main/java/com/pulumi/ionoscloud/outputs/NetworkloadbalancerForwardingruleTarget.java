// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.outputs.NetworkloadbalancerForwardingruleTargetHealthCheck;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NetworkloadbalancerForwardingruleTarget {
    /**
     * @return Health check attributes for Network Load Balancer forwarding rule target.
     * 
     */
    private @Nullable NetworkloadbalancerForwardingruleTargetHealthCheck healthCheck;
    /**
     * @return [string] IP of a balanced target VM.
     * 
     */
    private String ip;
    /**
     * @return [int] Port of the balanced target service. (range: 1 to 65535).
     * 
     */
    private Integer port;
    /**
     * @return [string] The proxy protocol version. Accepted values are `none`, `v1`, `v2`, `v2ssl`. If unspecified, the default value of `none` is used.
     * 
     */
    private @Nullable String proxyProtocol;
    /**
     * @return [int] Weight parameter is used to adjust the target VM&#39;s weight relative to other target VMs.
     * 
     */
    private Integer weight;

    private NetworkloadbalancerForwardingruleTarget() {}
    /**
     * @return Health check attributes for Network Load Balancer forwarding rule target.
     * 
     */
    public Optional<NetworkloadbalancerForwardingruleTargetHealthCheck> healthCheck() {
        return Optional.ofNullable(this.healthCheck);
    }
    /**
     * @return [string] IP of a balanced target VM.
     * 
     */
    public String ip() {
        return this.ip;
    }
    /**
     * @return [int] Port of the balanced target service. (range: 1 to 65535).
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return [string] The proxy protocol version. Accepted values are `none`, `v1`, `v2`, `v2ssl`. If unspecified, the default value of `none` is used.
     * 
     */
    public Optional<String> proxyProtocol() {
        return Optional.ofNullable(this.proxyProtocol);
    }
    /**
     * @return [int] Weight parameter is used to adjust the target VM&#39;s weight relative to other target VMs.
     * 
     */
    public Integer weight() {
        return this.weight;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkloadbalancerForwardingruleTarget defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable NetworkloadbalancerForwardingruleTargetHealthCheck healthCheck;
        private String ip;
        private Integer port;
        private @Nullable String proxyProtocol;
        private Integer weight;
        public Builder() {}
        public Builder(NetworkloadbalancerForwardingruleTarget defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.healthCheck = defaults.healthCheck;
    	      this.ip = defaults.ip;
    	      this.port = defaults.port;
    	      this.proxyProtocol = defaults.proxyProtocol;
    	      this.weight = defaults.weight;
        }

        @CustomType.Setter
        public Builder healthCheck(@Nullable NetworkloadbalancerForwardingruleTargetHealthCheck healthCheck) {

            this.healthCheck = healthCheck;
            return this;
        }
        @CustomType.Setter
        public Builder ip(String ip) {
            if (ip == null) {
              throw new MissingRequiredPropertyException("NetworkloadbalancerForwardingruleTarget", "ip");
            }
            this.ip = ip;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("NetworkloadbalancerForwardingruleTarget", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder proxyProtocol(@Nullable String proxyProtocol) {

            this.proxyProtocol = proxyProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder weight(Integer weight) {
            if (weight == null) {
              throw new MissingRequiredPropertyException("NetworkloadbalancerForwardingruleTarget", "weight");
            }
            this.weight = weight;
            return this;
        }
        public NetworkloadbalancerForwardingruleTarget build() {
            final var _resultValue = new NetworkloadbalancerForwardingruleTarget();
            _resultValue.healthCheck = healthCheck;
            _resultValue.ip = ip;
            _resultValue.port = port;
            _resultValue.proxyProtocol = proxyProtocol;
            _resultValue.weight = weight;
            return _resultValue;
        }
    }
}
