// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.inputs.ServerNicFirewallArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerNicArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerNicArgs Empty = new ServerNicArgs();

    @Import(name="deviceNumber")
    private @Nullable Output<Integer> deviceNumber;

    public Optional<Output<Integer>> deviceNumber() {
        return Optional.ofNullable(this.deviceNumber);
    }

    @Import(name="dhcp")
    private @Nullable Output<Boolean> dhcp;

    public Optional<Output<Boolean>> dhcp() {
        return Optional.ofNullable(this.dhcp);
    }

    /**
     * Indicates whether this NIC receives an IPv6 address through DHCP.
     * 
     */
    @Import(name="dhcpv6")
    private @Nullable Output<Boolean> dhcpv6;

    /**
     * @return Indicates whether this NIC receives an IPv6 address through DHCP.
     * 
     */
    public Optional<Output<Boolean>> dhcpv6() {
        return Optional.ofNullable(this.dhcpv6);
    }

    @Import(name="firewallActive")
    private @Nullable Output<Boolean> firewallActive;

    public Optional<Output<Boolean>> firewallActive() {
        return Optional.ofNullable(this.firewallActive);
    }

    @Import(name="firewallType")
    private @Nullable Output<String> firewallType;

    public Optional<Output<String>> firewallType() {
        return Optional.ofNullable(this.firewallType);
    }

    /**
     * Allows to define firewall rules inline in the server. See the Firewall section.
     * 
     */
    @Import(name="firewalls")
    private @Nullable Output<List<ServerNicFirewallArgs>> firewalls;

    /**
     * @return Allows to define firewall rules inline in the server. See the Firewall section.
     * 
     */
    public Optional<Output<List<ServerNicFirewallArgs>>> firewalls() {
        return Optional.ofNullable(this.firewalls);
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
     * 
     */
    @Import(name="ips")
    private @Nullable Output<List<String>> ips;

    /**
     * @return Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
     * 
     */
    public Optional<Output<List<String>>> ips() {
        return Optional.ofNullable(this.ips);
    }

    /**
     * IPv6 CIDR block assigned to the NIC.
     * 
     */
    @Import(name="ipv6CidrBlock")
    private @Nullable Output<String> ipv6CidrBlock;

    /**
     * @return IPv6 CIDR block assigned to the NIC.
     * 
     */
    public Optional<Output<String>> ipv6CidrBlock() {
        return Optional.ofNullable(this.ipv6CidrBlock);
    }

    /**
     * Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6 CIDR block assigned to the nic.
     * 
     */
    @Import(name="ipv6Ips")
    private @Nullable Output<List<String>> ipv6Ips;

    /**
     * @return Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6 CIDR block assigned to the nic.
     * 
     */
    public Optional<Output<List<String>>> ipv6Ips() {
        return Optional.ofNullable(this.ipv6Ips);
    }

    @Import(name="lan", required=true)
    private Output<Integer> lan;

    public Output<Integer> lan() {
        return this.lan;
    }

    @Import(name="mac")
    private @Nullable Output<String> mac;

    public Optional<Output<String>> mac() {
        return Optional.ofNullable(this.mac);
    }

    /**
     * [string] The name of the server.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return [string] The name of the server.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="pciSlot")
    private @Nullable Output<Integer> pciSlot;

    public Optional<Output<Integer>> pciSlot() {
        return Optional.ofNullable(this.pciSlot);
    }

    private ServerNicArgs() {}

    private ServerNicArgs(ServerNicArgs $) {
        this.deviceNumber = $.deviceNumber;
        this.dhcp = $.dhcp;
        this.dhcpv6 = $.dhcpv6;
        this.firewallActive = $.firewallActive;
        this.firewallType = $.firewallType;
        this.firewalls = $.firewalls;
        this.id = $.id;
        this.ips = $.ips;
        this.ipv6CidrBlock = $.ipv6CidrBlock;
        this.ipv6Ips = $.ipv6Ips;
        this.lan = $.lan;
        this.mac = $.mac;
        this.name = $.name;
        this.pciSlot = $.pciSlot;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerNicArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerNicArgs $;

        public Builder() {
            $ = new ServerNicArgs();
        }

        public Builder(ServerNicArgs defaults) {
            $ = new ServerNicArgs(Objects.requireNonNull(defaults));
        }

        public Builder deviceNumber(@Nullable Output<Integer> deviceNumber) {
            $.deviceNumber = deviceNumber;
            return this;
        }

        public Builder deviceNumber(Integer deviceNumber) {
            return deviceNumber(Output.of(deviceNumber));
        }

        public Builder dhcp(@Nullable Output<Boolean> dhcp) {
            $.dhcp = dhcp;
            return this;
        }

        public Builder dhcp(Boolean dhcp) {
            return dhcp(Output.of(dhcp));
        }

        /**
         * @param dhcpv6 Indicates whether this NIC receives an IPv6 address through DHCP.
         * 
         * @return builder
         * 
         */
        public Builder dhcpv6(@Nullable Output<Boolean> dhcpv6) {
            $.dhcpv6 = dhcpv6;
            return this;
        }

        /**
         * @param dhcpv6 Indicates whether this NIC receives an IPv6 address through DHCP.
         * 
         * @return builder
         * 
         */
        public Builder dhcpv6(Boolean dhcpv6) {
            return dhcpv6(Output.of(dhcpv6));
        }

        public Builder firewallActive(@Nullable Output<Boolean> firewallActive) {
            $.firewallActive = firewallActive;
            return this;
        }

        public Builder firewallActive(Boolean firewallActive) {
            return firewallActive(Output.of(firewallActive));
        }

        public Builder firewallType(@Nullable Output<String> firewallType) {
            $.firewallType = firewallType;
            return this;
        }

        public Builder firewallType(String firewallType) {
            return firewallType(Output.of(firewallType));
        }

        /**
         * @param firewalls Allows to define firewall rules inline in the server. See the Firewall section.
         * 
         * @return builder
         * 
         */
        public Builder firewalls(@Nullable Output<List<ServerNicFirewallArgs>> firewalls) {
            $.firewalls = firewalls;
            return this;
        }

        /**
         * @param firewalls Allows to define firewall rules inline in the server. See the Firewall section.
         * 
         * @return builder
         * 
         */
        public Builder firewalls(List<ServerNicFirewallArgs> firewalls) {
            return firewalls(Output.of(firewalls));
        }

        /**
         * @param firewalls Allows to define firewall rules inline in the server. See the Firewall section.
         * 
         * @return builder
         * 
         */
        public Builder firewalls(ServerNicFirewallArgs... firewalls) {
            return firewalls(List.of(firewalls));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param ips Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
         * 
         * @return builder
         * 
         */
        public Builder ips(@Nullable Output<List<String>> ips) {
            $.ips = ips;
            return this;
        }

        /**
         * @param ips Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
         * 
         * @return builder
         * 
         */
        public Builder ips(List<String> ips) {
            return ips(Output.of(ips));
        }

        /**
         * @param ips Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
         * 
         * @return builder
         * 
         */
        public Builder ips(String... ips) {
            return ips(List.of(ips));
        }

        /**
         * @param ipv6CidrBlock IPv6 CIDR block assigned to the NIC.
         * 
         * @return builder
         * 
         */
        public Builder ipv6CidrBlock(@Nullable Output<String> ipv6CidrBlock) {
            $.ipv6CidrBlock = ipv6CidrBlock;
            return this;
        }

        /**
         * @param ipv6CidrBlock IPv6 CIDR block assigned to the NIC.
         * 
         * @return builder
         * 
         */
        public Builder ipv6CidrBlock(String ipv6CidrBlock) {
            return ipv6CidrBlock(Output.of(ipv6CidrBlock));
        }

        /**
         * @param ipv6Ips Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6 CIDR block assigned to the nic.
         * 
         * @return builder
         * 
         */
        public Builder ipv6Ips(@Nullable Output<List<String>> ipv6Ips) {
            $.ipv6Ips = ipv6Ips;
            return this;
        }

        /**
         * @param ipv6Ips Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6 CIDR block assigned to the nic.
         * 
         * @return builder
         * 
         */
        public Builder ipv6Ips(List<String> ipv6Ips) {
            return ipv6Ips(Output.of(ipv6Ips));
        }

        /**
         * @param ipv6Ips Collection for IPv6 addresses assigned to a nic. Explicitly assigned IPv6 addresses need to come from inside the IPv6 CIDR block assigned to the nic.
         * 
         * @return builder
         * 
         */
        public Builder ipv6Ips(String... ipv6Ips) {
            return ipv6Ips(List.of(ipv6Ips));
        }

        public Builder lan(Output<Integer> lan) {
            $.lan = lan;
            return this;
        }

        public Builder lan(Integer lan) {
            return lan(Output.of(lan));
        }

        public Builder mac(@Nullable Output<String> mac) {
            $.mac = mac;
            return this;
        }

        public Builder mac(String mac) {
            return mac(Output.of(mac));
        }

        /**
         * @param name [string] The name of the server.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [string] The name of the server.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder pciSlot(@Nullable Output<Integer> pciSlot) {
            $.pciSlot = pciSlot;
            return this;
        }

        public Builder pciSlot(Integer pciSlot) {
            return pciSlot(Output.of(pciSlot));
        }

        public ServerNicArgs build() {
            if ($.lan == null) {
                throw new MissingRequiredPropertyException("ServerNicArgs", "lan");
            }
            return $;
        }
    }

}
