// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetVpnIpsecTunnelArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetVpnIpsecTunnelArgs Empty = new GetVpnIpsecTunnelArgs();

    /**
     * The ID of the IPSec Gateway that the tunnel belongs to.
     * 
     */
    @Import(name="gatewayId", required=true)
    private Output<String> gatewayId;

    /**
     * @return The ID of the IPSec Gateway that the tunnel belongs to.
     * 
     */
    public Output<String> gatewayId() {
        return this.gatewayId;
    }

    /**
     * ID of an existing IPSec Gateway Tunnel that you want to search for.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return ID of an existing IPSec Gateway Tunnel that you want to search for.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The location of the IPSec Gateway Tunnel.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location of the IPSec Gateway Tunnel.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * Name of an existing IPSec Gateway Tunnel that you want to search for.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of an existing IPSec Gateway Tunnel that you want to search for.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private GetVpnIpsecTunnelArgs() {}

    private GetVpnIpsecTunnelArgs(GetVpnIpsecTunnelArgs $) {
        this.gatewayId = $.gatewayId;
        this.id = $.id;
        this.location = $.location;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetVpnIpsecTunnelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetVpnIpsecTunnelArgs $;

        public Builder() {
            $ = new GetVpnIpsecTunnelArgs();
        }

        public Builder(GetVpnIpsecTunnelArgs defaults) {
            $ = new GetVpnIpsecTunnelArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param gatewayId The ID of the IPSec Gateway that the tunnel belongs to.
         * 
         * @return builder
         * 
         */
        public Builder gatewayId(Output<String> gatewayId) {
            $.gatewayId = gatewayId;
            return this;
        }

        /**
         * @param gatewayId The ID of the IPSec Gateway that the tunnel belongs to.
         * 
         * @return builder
         * 
         */
        public Builder gatewayId(String gatewayId) {
            return gatewayId(Output.of(gatewayId));
        }

        /**
         * @param id ID of an existing IPSec Gateway Tunnel that you want to search for.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id ID of an existing IPSec Gateway Tunnel that you want to search for.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param location The location of the IPSec Gateway Tunnel.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the IPSec Gateway Tunnel.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Name of an existing IPSec Gateway Tunnel that you want to search for.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of an existing IPSec Gateway Tunnel that you want to search for.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public GetVpnIpsecTunnelArgs build() {
            if ($.gatewayId == null) {
                throw new MissingRequiredPropertyException("GetVpnIpsecTunnelArgs", "gatewayId");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("GetVpnIpsecTunnelArgs", "location");
            }
            return $;
        }
    }

}
