// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserState extends com.pulumi.resources.ResourceArgs {

    public static final UserState Empty = new UserState();

    /**
     * [Boolean] Indicates if the user is active
     * 
     */
    @Import(name="active")
    private @Nullable Output<Boolean> active;

    /**
     * @return [Boolean] Indicates if the user is active
     * 
     */
    public Optional<Output<Boolean>> active() {
        return Optional.ofNullable(this.active);
    }

    /**
     * [Boolean] Indicates if the user has administrative rights. Administrators do not need to be managed in groups, as they automatically have access to all resources associated with the contract.
     * 
     */
    @Import(name="administrator")
    private @Nullable Output<Boolean> administrator;

    /**
     * @return [Boolean] Indicates if the user has administrative rights. Administrators do not need to be managed in groups, as they automatically have access to all resources associated with the contract.
     * 
     */
    public Optional<Output<Boolean>> administrator() {
        return Optional.ofNullable(this.administrator);
    }

    /**
     * [string] An e-mail address for the user.
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return [string] An e-mail address for the user.
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * [string] A first name for the user.
     * 
     */
    @Import(name="firstName")
    private @Nullable Output<String> firstName;

    /**
     * @return [string] A first name for the user.
     * 
     */
    public Optional<Output<String>> firstName() {
        return Optional.ofNullable(this.firstName);
    }

    /**
     * [Boolean] Indicates if secure (two-factor) authentication should be forced for the user (true) or not (false).
     * 
     */
    @Import(name="forceSecAuth")
    private @Nullable Output<Boolean> forceSecAuth;

    /**
     * @return [Boolean] Indicates if secure (two-factor) authentication should be forced for the user (true) or not (false).
     * 
     */
    public Optional<Output<Boolean>> forceSecAuth() {
        return Optional.ofNullable(this.forceSecAuth);
    }

    /**
     * [Set] The groups that this user will be a member of
     * 
     * **NOTE:** Group_ids field cannot be used at the same time with user_ids field in group resource. Trying to add the same user to the same group in both ways in the same plan will result in a cyclic dependency error.
     * 
     */
    @Import(name="groupIds")
    private @Nullable Output<List<String>> groupIds;

    /**
     * @return [Set] The groups that this user will be a member of
     * 
     * **NOTE:** Group_ids field cannot be used at the same time with user_ids field in group resource. Trying to add the same user to the same group in both ways in the same plan will result in a cyclic dependency error.
     * 
     */
    public Optional<Output<List<String>>> groupIds() {
        return Optional.ofNullable(this.groupIds);
    }

    /**
     * [string] A last name for the user.
     * 
     */
    @Import(name="lastName")
    private @Nullable Output<String> lastName;

    /**
     * @return [string] A last name for the user.
     * 
     */
    public Optional<Output<String>> lastName() {
        return Optional.ofNullable(this.lastName);
    }

    /**
     * [string] A password for the user.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return [string] A password for the user.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Canonical (S3) id of the user for a given identity
     * 
     */
    @Import(name="s3CanonicalUserId")
    private @Nullable Output<String> s3CanonicalUserId;

    /**
     * @return Canonical (S3) id of the user for a given identity
     * 
     */
    public Optional<Output<String>> s3CanonicalUserId() {
        return Optional.ofNullable(this.s3CanonicalUserId);
    }

    /**
     * [Boolean] Indicates if secure authentication is active for the user or not. *it can not be used in create requests - can be used in update*
     * 
     */
    @Import(name="secAuthActive")
    private @Nullable Output<Boolean> secAuthActive;

    /**
     * @return [Boolean] Indicates if secure authentication is active for the user or not. *it can not be used in create requests - can be used in update*
     * 
     */
    public Optional<Output<Boolean>> secAuthActive() {
        return Optional.ofNullable(this.secAuthActive);
    }

    private UserState() {}

    private UserState(UserState $) {
        this.active = $.active;
        this.administrator = $.administrator;
        this.email = $.email;
        this.firstName = $.firstName;
        this.forceSecAuth = $.forceSecAuth;
        this.groupIds = $.groupIds;
        this.lastName = $.lastName;
        this.password = $.password;
        this.s3CanonicalUserId = $.s3CanonicalUserId;
        this.secAuthActive = $.secAuthActive;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserState $;

        public Builder() {
            $ = new UserState();
        }

        public Builder(UserState defaults) {
            $ = new UserState(Objects.requireNonNull(defaults));
        }

        /**
         * @param active [Boolean] Indicates if the user is active
         * 
         * @return builder
         * 
         */
        public Builder active(@Nullable Output<Boolean> active) {
            $.active = active;
            return this;
        }

        /**
         * @param active [Boolean] Indicates if the user is active
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        /**
         * @param administrator [Boolean] Indicates if the user has administrative rights. Administrators do not need to be managed in groups, as they automatically have access to all resources associated with the contract.
         * 
         * @return builder
         * 
         */
        public Builder administrator(@Nullable Output<Boolean> administrator) {
            $.administrator = administrator;
            return this;
        }

        /**
         * @param administrator [Boolean] Indicates if the user has administrative rights. Administrators do not need to be managed in groups, as they automatically have access to all resources associated with the contract.
         * 
         * @return builder
         * 
         */
        public Builder administrator(Boolean administrator) {
            return administrator(Output.of(administrator));
        }

        /**
         * @param email [string] An e-mail address for the user.
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email [string] An e-mail address for the user.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param firstName [string] A first name for the user.
         * 
         * @return builder
         * 
         */
        public Builder firstName(@Nullable Output<String> firstName) {
            $.firstName = firstName;
            return this;
        }

        /**
         * @param firstName [string] A first name for the user.
         * 
         * @return builder
         * 
         */
        public Builder firstName(String firstName) {
            return firstName(Output.of(firstName));
        }

        /**
         * @param forceSecAuth [Boolean] Indicates if secure (two-factor) authentication should be forced for the user (true) or not (false).
         * 
         * @return builder
         * 
         */
        public Builder forceSecAuth(@Nullable Output<Boolean> forceSecAuth) {
            $.forceSecAuth = forceSecAuth;
            return this;
        }

        /**
         * @param forceSecAuth [Boolean] Indicates if secure (two-factor) authentication should be forced for the user (true) or not (false).
         * 
         * @return builder
         * 
         */
        public Builder forceSecAuth(Boolean forceSecAuth) {
            return forceSecAuth(Output.of(forceSecAuth));
        }

        /**
         * @param groupIds [Set] The groups that this user will be a member of
         * 
         * **NOTE:** Group_ids field cannot be used at the same time with user_ids field in group resource. Trying to add the same user to the same group in both ways in the same plan will result in a cyclic dependency error.
         * 
         * @return builder
         * 
         */
        public Builder groupIds(@Nullable Output<List<String>> groupIds) {
            $.groupIds = groupIds;
            return this;
        }

        /**
         * @param groupIds [Set] The groups that this user will be a member of
         * 
         * **NOTE:** Group_ids field cannot be used at the same time with user_ids field in group resource. Trying to add the same user to the same group in both ways in the same plan will result in a cyclic dependency error.
         * 
         * @return builder
         * 
         */
        public Builder groupIds(List<String> groupIds) {
            return groupIds(Output.of(groupIds));
        }

        /**
         * @param groupIds [Set] The groups that this user will be a member of
         * 
         * **NOTE:** Group_ids field cannot be used at the same time with user_ids field in group resource. Trying to add the same user to the same group in both ways in the same plan will result in a cyclic dependency error.
         * 
         * @return builder
         * 
         */
        public Builder groupIds(String... groupIds) {
            return groupIds(List.of(groupIds));
        }

        /**
         * @param lastName [string] A last name for the user.
         * 
         * @return builder
         * 
         */
        public Builder lastName(@Nullable Output<String> lastName) {
            $.lastName = lastName;
            return this;
        }

        /**
         * @param lastName [string] A last name for the user.
         * 
         * @return builder
         * 
         */
        public Builder lastName(String lastName) {
            return lastName(Output.of(lastName));
        }

        /**
         * @param password [string] A password for the user.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password [string] A password for the user.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param s3CanonicalUserId Canonical (S3) id of the user for a given identity
         * 
         * @return builder
         * 
         */
        public Builder s3CanonicalUserId(@Nullable Output<String> s3CanonicalUserId) {
            $.s3CanonicalUserId = s3CanonicalUserId;
            return this;
        }

        /**
         * @param s3CanonicalUserId Canonical (S3) id of the user for a given identity
         * 
         * @return builder
         * 
         */
        public Builder s3CanonicalUserId(String s3CanonicalUserId) {
            return s3CanonicalUserId(Output.of(s3CanonicalUserId));
        }

        /**
         * @param secAuthActive [Boolean] Indicates if secure authentication is active for the user or not. *it can not be used in create requests - can be used in update*
         * 
         * @return builder
         * 
         */
        public Builder secAuthActive(@Nullable Output<Boolean> secAuthActive) {
            $.secAuthActive = secAuthActive;
            return this;
        }

        /**
         * @param secAuthActive [Boolean] Indicates if secure authentication is active for the user or not. *it can not be used in create requests - can be used in update*
         * 
         * @return builder
         * 
         */
        public Builder secAuthActive(Boolean secAuthActive) {
            return secAuthActive(Output.of(secAuthActive));
        }

        public UserState build() {
            return $;
        }
    }

}
