// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.outputs.GetApigatewayRouteUpstream;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetApigatewayRouteResult {
    private String gatewayId;
    /**
     * @return ID of the API Gateway Route.
     * 
     */
    private String id;
    /**
     * @return The HTTP methods that the route should match.
     * 
     */
    private List<String> methods;
    /**
     * @return The name of the API Gateway Route.
     * 
     */
    private String name;
    private @Nullable Boolean partialMatch;
    /**
     * @return The paths that the route should match.
     * 
     */
    private List<String> paths;
    /**
     * @return This field specifies the protocol used by the ingress to route traffic to the backend service.
     * 
     */
    private String type;
    private List<GetApigatewayRouteUpstream> upstreams;
    /**
     * @return Shows whether websocket support is enabled or disabled.
     * 
     */
    private Boolean websocket;

    private GetApigatewayRouteResult() {}
    public String gatewayId() {
        return this.gatewayId;
    }
    /**
     * @return ID of the API Gateway Route.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The HTTP methods that the route should match.
     * 
     */
    public List<String> methods() {
        return this.methods;
    }
    /**
     * @return The name of the API Gateway Route.
     * 
     */
    public String name() {
        return this.name;
    }
    public Optional<Boolean> partialMatch() {
        return Optional.ofNullable(this.partialMatch);
    }
    /**
     * @return The paths that the route should match.
     * 
     */
    public List<String> paths() {
        return this.paths;
    }
    /**
     * @return This field specifies the protocol used by the ingress to route traffic to the backend service.
     * 
     */
    public String type() {
        return this.type;
    }
    public List<GetApigatewayRouteUpstream> upstreams() {
        return this.upstreams;
    }
    /**
     * @return Shows whether websocket support is enabled or disabled.
     * 
     */
    public Boolean websocket() {
        return this.websocket;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApigatewayRouteResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String gatewayId;
        private String id;
        private List<String> methods;
        private String name;
        private @Nullable Boolean partialMatch;
        private List<String> paths;
        private String type;
        private List<GetApigatewayRouteUpstream> upstreams;
        private Boolean websocket;
        public Builder() {}
        public Builder(GetApigatewayRouteResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.gatewayId = defaults.gatewayId;
    	      this.id = defaults.id;
    	      this.methods = defaults.methods;
    	      this.name = defaults.name;
    	      this.partialMatch = defaults.partialMatch;
    	      this.paths = defaults.paths;
    	      this.type = defaults.type;
    	      this.upstreams = defaults.upstreams;
    	      this.websocket = defaults.websocket;
        }

        @CustomType.Setter
        public Builder gatewayId(String gatewayId) {
            if (gatewayId == null) {
              throw new MissingRequiredPropertyException("GetApigatewayRouteResult", "gatewayId");
            }
            this.gatewayId = gatewayId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetApigatewayRouteResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder methods(List<String> methods) {
            if (methods == null) {
              throw new MissingRequiredPropertyException("GetApigatewayRouteResult", "methods");
            }
            this.methods = methods;
            return this;
        }
        public Builder methods(String... methods) {
            return methods(List.of(methods));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetApigatewayRouteResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder partialMatch(@Nullable Boolean partialMatch) {

            this.partialMatch = partialMatch;
            return this;
        }
        @CustomType.Setter
        public Builder paths(List<String> paths) {
            if (paths == null) {
              throw new MissingRequiredPropertyException("GetApigatewayRouteResult", "paths");
            }
            this.paths = paths;
            return this;
        }
        public Builder paths(String... paths) {
            return paths(List.of(paths));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetApigatewayRouteResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder upstreams(List<GetApigatewayRouteUpstream> upstreams) {
            if (upstreams == null) {
              throw new MissingRequiredPropertyException("GetApigatewayRouteResult", "upstreams");
            }
            this.upstreams = upstreams;
            return this;
        }
        public Builder upstreams(GetApigatewayRouteUpstream... upstreams) {
            return upstreams(List.of(upstreams));
        }
        @CustomType.Setter
        public Builder websocket(Boolean websocket) {
            if (websocket == null) {
              throw new MissingRequiredPropertyException("GetApigatewayRouteResult", "websocket");
            }
            this.websocket = websocket;
            return this;
        }
        public GetApigatewayRouteResult build() {
            final var _resultValue = new GetApigatewayRouteResult();
            _resultValue.gatewayId = gatewayId;
            _resultValue.id = id;
            _resultValue.methods = methods;
            _resultValue.name = name;
            _resultValue.partialMatch = partialMatch;
            _resultValue.paths = paths;
            _resultValue.type = type;
            _resultValue.upstreams = upstreams;
            _resultValue.websocket = websocket;
            return _resultValue;
        }
    }
}
