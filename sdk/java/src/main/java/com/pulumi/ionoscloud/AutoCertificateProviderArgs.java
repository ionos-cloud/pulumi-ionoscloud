// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.inputs.AutoCertificateProviderExternalAccountBindingArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutoCertificateProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutoCertificateProviderArgs Empty = new AutoCertificateProviderArgs();

    /**
     * The email address of the certificate requester
     * 
     */
    @Import(name="email", required=true)
    private Output<String> email;

    /**
     * @return The email address of the certificate requester
     * 
     */
    public Output<String> email() {
        return this.email;
    }

    @Import(name="externalAccountBinding")
    private @Nullable Output<AutoCertificateProviderExternalAccountBindingArgs> externalAccountBinding;

    public Optional<Output<AutoCertificateProviderExternalAccountBindingArgs>> externalAccountBinding() {
        return Optional.ofNullable(this.externalAccountBinding);
    }

    /**
     * The location of the certificate provider
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location of the certificate provider
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The name of the certificate provider
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the certificate provider
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The URL of the certificate provider
     * 
     */
    @Import(name="server", required=true)
    private Output<String> server;

    /**
     * @return The URL of the certificate provider
     * 
     */
    public Output<String> server() {
        return this.server;
    }

    private AutoCertificateProviderArgs() {}

    private AutoCertificateProviderArgs(AutoCertificateProviderArgs $) {
        this.email = $.email;
        this.externalAccountBinding = $.externalAccountBinding;
        this.location = $.location;
        this.name = $.name;
        this.server = $.server;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutoCertificateProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutoCertificateProviderArgs $;

        public Builder() {
            $ = new AutoCertificateProviderArgs();
        }

        public Builder(AutoCertificateProviderArgs defaults) {
            $ = new AutoCertificateProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param email The email address of the certificate requester
         * 
         * @return builder
         * 
         */
        public Builder email(Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email The email address of the certificate requester
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        public Builder externalAccountBinding(@Nullable Output<AutoCertificateProviderExternalAccountBindingArgs> externalAccountBinding) {
            $.externalAccountBinding = externalAccountBinding;
            return this;
        }

        public Builder externalAccountBinding(AutoCertificateProviderExternalAccountBindingArgs externalAccountBinding) {
            return externalAccountBinding(Output.of(externalAccountBinding));
        }

        /**
         * @param location The location of the certificate provider
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the certificate provider
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name of the certificate provider
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the certificate provider
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param server The URL of the certificate provider
         * 
         * @return builder
         * 
         */
        public Builder server(Output<String> server) {
            $.server = server;
            return this;
        }

        /**
         * @param server The URL of the certificate provider
         * 
         * @return builder
         * 
         */
        public Builder server(String server) {
            return server(Output.of(server));
        }

        public AutoCertificateProviderArgs build() {
            if ($.email == null) {
                throw new MissingRequiredPropertyException("AutoCertificateProviderArgs", "email");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("AutoCertificateProviderArgs", "location");
            }
            if ($.server == null) {
                throw new MissingRequiredPropertyException("AutoCertificateProviderArgs", "server");
            }
            return $;
        }
    }

}
