// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.ionoscloud.Utilities;
import com.pulumi.ionoscloud.VolumeArgs;
import com.pulumi.ionoscloud.inputs.VolumeState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a **Volume** on IonosCloud.
 * 
 * ## Example Usage
 * 
 * A primary volume will be created with the server. If there is a need for additional volumes, this resource handles it.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.ionoscloud.IonoscloudFunctions;
 * import com.pulumi.ionoscloud.inputs.GetImageArgs;
 * import com.pulumi.ionoscloud.compute.Datacenter;
 * import com.pulumi.ionoscloud.compute.DatacenterArgs;
 * import com.pulumi.ionoscloud.Lan;
 * import com.pulumi.ionoscloud.LanArgs;
 * import com.pulumi.ionoscloud.Ipblock;
 * import com.pulumi.ionoscloud.IpblockArgs;
 * import com.pulumi.random.RandomPassword;
 * import com.pulumi.random.RandomPasswordArgs;
 * import com.pulumi.ionoscloud.Server;
 * import com.pulumi.ionoscloud.ServerArgs;
 * import com.pulumi.ionoscloud.inputs.ServerVolumeArgs;
 * import com.pulumi.ionoscloud.inputs.ServerNicArgs;
 * import com.pulumi.ionoscloud.Volume;
 * import com.pulumi.ionoscloud.VolumeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var exampleImage = IonoscloudFunctions.getImage(GetImageArgs.builder()
 *             .type("HDD")
 *             .cloudInit("V1")
 *             .imageAlias("ubuntu:latest")
 *             .location("us/las")
 *             .build());
 * 
 *         var exampleDatacenter = new Datacenter("exampleDatacenter", DatacenterArgs.builder()        
 *             .location("us/las")
 *             .description("Datacenter Description")
 *             .secAuthProtection(false)
 *             .build());
 * 
 *         var exampleLan = new Lan("exampleLan", LanArgs.builder()        
 *             .datacenterId(exampleDatacenter.id())
 *             .public_(true)
 *             .build());
 * 
 *         var exampleIpblock = new Ipblock("exampleIpblock", IpblockArgs.builder()        
 *             .location(exampleDatacenter.location())
 *             .size(4)
 *             .build());
 * 
 *         var serverImagePassword = new RandomPassword("serverImagePassword", RandomPasswordArgs.builder()        
 *             .length(16)
 *             .special(false)
 *             .build());
 * 
 *         var exampleServer = new Server("exampleServer", ServerArgs.builder()        
 *             .datacenterId(exampleDatacenter.id())
 *             .cores(1)
 *             .ram(1024)
 *             .availabilityZone("ZONE_1")
 *             .cpuFamily("INTEL_XEON")
 *             .imageName(exampleImage.applyValue(getImageResult -> getImageResult.name()))
 *             .imagePassword(serverImagePassword.result())
 *             .type("ENTERPRISE")
 *             .volume(ServerVolumeArgs.builder()
 *                 .name("system")
 *                 .size(5)
 *                 .diskType("SSD Standard")
 *                 .userData("foo")
 *                 .bus("VIRTIO")
 *                 .availabilityZone("ZONE_1")
 *                 .build())
 *             .nic(ServerNicArgs.builder()
 *                 .lan(exampleLan.id())
 *                 .name("system")
 *                 .dhcp(true)
 *                 .firewallActive(true)
 *                 .firewallType("BIDIRECTIONAL")
 *                 .ips(                
 *                     exampleIpblock.ips().applyValue(ips -> ips[0]),
 *                     exampleIpblock.ips().applyValue(ips -> ips[1]))
 *                 .firewalls(ServerNicFirewallArgs.builder()
 *                     .protocol("TCP")
 *                     .name("SSH")
 *                     .portRangeStart(22)
 *                     .portRangeEnd(22)
 *                     .sourceMac("00:0a:95:9d:68:17")
 *                     .sourceIp(exampleIpblock.ips().applyValue(ips -> ips[2]))
 *                     .targetIp(exampleIpblock.ips().applyValue(ips -> ips[3]))
 *                     .type("EGRESS")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var volumeImagePassword = new RandomPassword("volumeImagePassword", RandomPasswordArgs.builder()        
 *             .length(16)
 *             .special(false)
 *             .build());
 * 
 *         var exampleVolume = new Volume("exampleVolume", VolumeArgs.builder()        
 *             .datacenterId(exampleDatacenter.id())
 *             .serverId(exampleServer.id())
 *             .availabilityZone("ZONE_1")
 *             .size(5)
 *             .diskType("SSD Standard")
 *             .bus("VIRTIO")
 *             .imageName(exampleImage.applyValue(getImageResult -> getImageResult.name()))
 *             .imagePassword(volumeImagePassword.result())
 *             .userData("foo")
 *             .build());
 * 
 *         var exampleIndex_volumeVolume = new Volume("exampleIndex/volumeVolume", VolumeArgs.builder()        
 *             .datacenterId(exampleDatacenter.id())
 *             .serverId(exampleServer.id())
 *             .availabilityZone("ZONE_1")
 *             .size(5)
 *             .diskType("SSD Standard")
 *             .bus("VIRTIO")
 *             .licenceType("OTHER")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Resource Volume can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import ionoscloud:index/volume:Volume myvolume {datacenter uuid}/{server uuid}/{volume uuid}
 * ```
 * 
 */
@ResourceType(type="ionoscloud:index/volume:Volume")
public class Volume extends com.pulumi.resources.CustomResource {
    /**
     * [string] The storage availability zone assigned to the volume: AUTO, ZONE_1, ZONE_2, or ZONE_3. This property is immutable
     * 
     */
    @Export(name="availabilityZone", refs={String.class}, tree="[0]")
    private Output<String> availabilityZone;

    /**
     * @return [string] The storage availability zone assigned to the volume: AUTO, ZONE_1, ZONE_2, or ZONE_3. This property is immutable
     * 
     */
    public Output<String> availabilityZone() {
        return this.availabilityZone;
    }
    /**
     * [string] The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either &#39;public image&#39; or &#39;imageAlias&#39; in conjunction with this property.
     * 
     */
    @Export(name="backupUnitId", refs={String.class}, tree="[0]")
    private Output<String> backupUnitId;

    /**
     * @return [string] The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either &#39;public image&#39; or &#39;imageAlias&#39; in conjunction with this property.
     * 
     */
    public Output<String> backupUnitId() {
        return this.backupUnitId;
    }
    /**
     * [string] The UUID of the attached server.
     * &gt; **⚠ WARNING**
     * &gt; 
     * &gt; ssh_key_path and ssh_keys fields are immutable.
     * If you want to create a **CUBE** server, the type of the inline volume must be set to **DAS**. In this case, you can not set the `size` argument since it is taken from the `template_uuid` you set in the server.
     * 
     */
    @Export(name="bootServer", refs={String.class}, tree="[0]")
    private Output<String> bootServer;

    /**
     * @return [string] The UUID of the attached server.
     * &gt; **⚠ WARNING**
     * &gt; 
     * &gt; ssh_key_path and ssh_keys fields are immutable.
     * If you want to create a **CUBE** server, the type of the inline volume must be set to **DAS**. In this case, you can not set the `size` argument since it is taken from the `template_uuid` you set in the server.
     * 
     */
    public Output<String> bootServer() {
        return this.bootServer;
    }
    /**
     * [Boolean] The bus type of the volume: VIRTIO or IDE.
     * 
     */
    @Export(name="bus", refs={String.class}, tree="[0]")
    private Output<String> bus;

    /**
     * @return [Boolean] The bus type of the volume: VIRTIO or IDE.
     * 
     */
    public Output<String> bus() {
        return this.bus;
    }
    /**
     * [string] Is capable of CPU hot plug (no reboot required)
     * 
     */
    @Export(name="cpuHotPlug", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> cpuHotPlug;

    /**
     * @return [string] Is capable of CPU hot plug (no reboot required)
     * 
     */
    public Output<Boolean> cpuHotPlug() {
        return this.cpuHotPlug;
    }
    /**
     * [string] The ID of a Virtual Data Center.
     * 
     */
    @Export(name="datacenterId", refs={String.class}, tree="[0]")
    private Output<String> datacenterId;

    /**
     * @return [string] The ID of a Virtual Data Center.
     * 
     */
    public Output<String> datacenterId() {
        return this.datacenterId;
    }
    /**
     * The Logical Unit Number of the storage volume. Null for volumes not mounted to any VM.
     * 
     */
    @Export(name="deviceNumber", refs={Integer.class}, tree="[0]")
    private Output<Integer> deviceNumber;

    /**
     * @return The Logical Unit Number of the storage volume. Null for volumes not mounted to any VM.
     * 
     */
    public Output<Integer> deviceNumber() {
        return this.deviceNumber;
    }
    /**
     * [string] Is capable of Virt-IO drive hot plug (no reboot required)
     * 
     */
    @Export(name="discVirtioHotPlug", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> discVirtioHotPlug;

    /**
     * @return [string] Is capable of Virt-IO drive hot plug (no reboot required)
     * 
     */
    public Output<Boolean> discVirtioHotPlug() {
        return this.discVirtioHotPlug;
    }
    /**
     * [string] Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.
     * 
     */
    @Export(name="discVirtioHotUnplug", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> discVirtioHotUnplug;

    /**
     * @return [string] Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.
     * 
     */
    public Output<Boolean> discVirtioHotUnplug() {
        return this.discVirtioHotUnplug;
    }
    /**
     * [string] The volume type: HDD or SSD. This property is immutable.
     * 
     */
    @Export(name="diskType", refs={String.class}, tree="[0]")
    private Output<String> diskType;

    /**
     * @return [string] The volume type: HDD or SSD. This property is immutable.
     * 
     */
    public Output<String> diskType() {
        return this.diskType;
    }
    /**
     * The image or snapshot UUID.
     * 
     */
    @Export(name="image", refs={String.class}, tree="[0]")
    private Output<String> image;

    /**
     * @return The image or snapshot UUID.
     * 
     */
    public Output<String> image() {
        return this.image;
    }
    @Export(name="imageId", refs={String.class}, tree="[0]")
    private Output<String> imageId;

    public Output<String> imageId() {
        return this.imageId;
    }
    /**
     * [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licence_type` is not provided. Attribute is immutable.
     * 
     */
    @Export(name="imageName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> imageName;

    /**
     * @return [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licence_type` is not provided. Attribute is immutable.
     * 
     */
    public Output<Optional<String>> imageName() {
        return Codegen.optional(this.imageName);
    }
    /**
     * [string] Required if `sshkey_path` is not provided.
     * 
     */
    @Export(name="imagePassword", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> imagePassword;

    /**
     * @return [string] Required if `sshkey_path` is not provided.
     * 
     */
    public Output<Optional<String>> imagePassword() {
        return Codegen.optional(this.imagePassword);
    }
    /**
     * [string] Required if `image_name` is not provided.
     * 
     */
    @Export(name="licenceType", refs={String.class}, tree="[0]")
    private Output<String> licenceType;

    /**
     * @return [string] Required if `image_name` is not provided.
     * 
     */
    public Output<String> licenceType() {
        return this.licenceType;
    }
    /**
     * [string] The name of the volume.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return [string] The name of the volume.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * [string] Is capable of nic hot plug (no reboot required)
     * 
     */
    @Export(name="nicHotPlug", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> nicHotPlug;

    /**
     * @return [string] Is capable of nic hot plug (no reboot required)
     * 
     */
    public Output<Boolean> nicHotPlug() {
        return this.nicHotPlug;
    }
    /**
     * [string] Is capable of nic hot unplug (no reboot required)
     * 
     */
    @Export(name="nicHotUnplug", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> nicHotUnplug;

    /**
     * @return [string] Is capable of nic hot unplug (no reboot required)
     * 
     */
    public Output<Boolean> nicHotUnplug() {
        return this.nicHotUnplug;
    }
    /**
     * The PCI slot number of the storage volume. Null for volumes not mounted to any VM.
     * 
     */
    @Export(name="pciSlot", refs={Integer.class}, tree="[0]")
    private Output<Integer> pciSlot;

    /**
     * @return The PCI slot number of the storage volume. Null for volumes not mounted to any VM.
     * 
     */
    public Output<Integer> pciSlot() {
        return this.pciSlot;
    }
    /**
     * [string] Is capable of memory hot plug (no reboot required)
     * 
     */
    @Export(name="ramHotPlug", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> ramHotPlug;

    /**
     * @return [string] Is capable of memory hot plug (no reboot required)
     * 
     */
    public Output<Boolean> ramHotPlug() {
        return this.ramHotPlug;
    }
    /**
     * [string] The ID of a server.
     * 
     */
    @Export(name="serverId", refs={String.class}, tree="[0]")
    private Output<String> serverId;

    /**
     * @return [string] The ID of a server.
     * 
     */
    public Output<String> serverId() {
        return this.serverId;
    }
    /**
     * [integer] The size of the volume in GB.
     * 
     */
    @Export(name="size", refs={Integer.class}, tree="[0]")
    private Output<Integer> size;

    /**
     * @return [integer] The size of the volume in GB.
     * 
     */
    public Output<Integer> size() {
        return this.size;
    }
    /**
     * [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. This property is immutable.
     * 
     */
    @Export(name="sshKeyPaths", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> sshKeyPaths;

    /**
     * @return [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. This property is immutable.
     * 
     */
    public Output<Optional<List<String>>> sshKeyPaths() {
        return Codegen.optional(this.sshKeyPaths);
    }
    /**
     * [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. This property is immutable.
     * 
     */
    @Export(name="sshKeys", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> sshKeys;

    /**
     * @return [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. This property is immutable.
     * 
     */
    public Output<Optional<List<String>>> sshKeys() {
        return Codegen.optional(this.sshKeys);
    }
    /**
     * The associated public SSH key.
     * 
     */
    @Export(name="sshkey", refs={String.class}, tree="[0]")
    private Output<String> sshkey;

    /**
     * @return The associated public SSH key.
     * 
     */
    public Output<String> sshkey() {
        return this.sshkey;
    }
    /**
     * [string] The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. This option will work only with cloud-init compatible images.
     * 
     */
    @Export(name="userData", refs={String.class}, tree="[0]")
    private Output<String> userData;

    /**
     * @return [string] The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. This option will work only with cloud-init compatible images.
     * 
     */
    public Output<String> userData() {
        return this.userData;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Volume(java.lang.String name) {
        this(name, VolumeArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Volume(java.lang.String name, VolumeArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Volume(java.lang.String name, VolumeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("ionoscloud:index/volume:Volume", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Volume(java.lang.String name, Output<java.lang.String> id, @Nullable VolumeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("ionoscloud:index/volume:Volume", name, state, makeResourceOptions(options, id), false);
    }

    private static VolumeArgs makeArgs(VolumeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? VolumeArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Volume get(java.lang.String name, Output<java.lang.String> id, @Nullable VolumeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Volume(name, id, state, options);
    }
}
