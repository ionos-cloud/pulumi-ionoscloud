// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class MongoClusterConnectionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final MongoClusterConnectionsArgs Empty = new MongoClusterConnectionsArgs();

    /**
     * The list of IPs and subnet for your cluster. Note the following unavailable IP ranges:10.233.64.0/18, 10.233.0.0/18, 10.233.114.0/24. example: [192.168.1.100/24, 192.168.1.101/24]
     * 
     */
    @Import(name="cidrLists", required=true)
    private Output<List<String>> cidrLists;

    /**
     * @return The list of IPs and subnet for your cluster. Note the following unavailable IP ranges:10.233.64.0/18, 10.233.0.0/18, 10.233.114.0/24. example: [192.168.1.100/24, 192.168.1.101/24]
     * 
     */
    public Output<List<String>> cidrLists() {
        return this.cidrLists;
    }

    /**
     * The datacenter to connect your cluster to.
     * 
     */
    @Import(name="datacenterId", required=true)
    private Output<String> datacenterId;

    /**
     * @return The datacenter to connect your cluster to.
     * 
     */
    public Output<String> datacenterId() {
        return this.datacenterId;
    }

    /**
     * The LAN to connect your cluster to.
     * 
     */
    @Import(name="lanId", required=true)
    private Output<String> lanId;

    /**
     * @return The LAN to connect your cluster to.
     * 
     */
    public Output<String> lanId() {
        return this.lanId;
    }

    private MongoClusterConnectionsArgs() {}

    private MongoClusterConnectionsArgs(MongoClusterConnectionsArgs $) {
        this.cidrLists = $.cidrLists;
        this.datacenterId = $.datacenterId;
        this.lanId = $.lanId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MongoClusterConnectionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MongoClusterConnectionsArgs $;

        public Builder() {
            $ = new MongoClusterConnectionsArgs();
        }

        public Builder(MongoClusterConnectionsArgs defaults) {
            $ = new MongoClusterConnectionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cidrLists The list of IPs and subnet for your cluster. Note the following unavailable IP ranges:10.233.64.0/18, 10.233.0.0/18, 10.233.114.0/24. example: [192.168.1.100/24, 192.168.1.101/24]
         * 
         * @return builder
         * 
         */
        public Builder cidrLists(Output<List<String>> cidrLists) {
            $.cidrLists = cidrLists;
            return this;
        }

        /**
         * @param cidrLists The list of IPs and subnet for your cluster. Note the following unavailable IP ranges:10.233.64.0/18, 10.233.0.0/18, 10.233.114.0/24. example: [192.168.1.100/24, 192.168.1.101/24]
         * 
         * @return builder
         * 
         */
        public Builder cidrLists(List<String> cidrLists) {
            return cidrLists(Output.of(cidrLists));
        }

        /**
         * @param cidrLists The list of IPs and subnet for your cluster. Note the following unavailable IP ranges:10.233.64.0/18, 10.233.0.0/18, 10.233.114.0/24. example: [192.168.1.100/24, 192.168.1.101/24]
         * 
         * @return builder
         * 
         */
        public Builder cidrLists(String... cidrLists) {
            return cidrLists(List.of(cidrLists));
        }

        /**
         * @param datacenterId The datacenter to connect your cluster to.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(Output<String> datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        /**
         * @param datacenterId The datacenter to connect your cluster to.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(String datacenterId) {
            return datacenterId(Output.of(datacenterId));
        }

        /**
         * @param lanId The LAN to connect your cluster to.
         * 
         * @return builder
         * 
         */
        public Builder lanId(Output<String> lanId) {
            $.lanId = lanId;
            return this;
        }

        /**
         * @param lanId The LAN to connect your cluster to.
         * 
         * @return builder
         * 
         */
        public Builder lanId(String lanId) {
            return lanId(Output.of(lanId));
        }

        public MongoClusterConnectionsArgs build() {
            if ($.cidrLists == null) {
                throw new MissingRequiredPropertyException("MongoClusterConnectionsArgs", "cidrLists");
            }
            if ($.datacenterId == null) {
                throw new MissingRequiredPropertyException("MongoClusterConnectionsArgs", "datacenterId");
            }
            if ($.lanId == null) {
                throw new MissingRequiredPropertyException("MongoClusterConnectionsArgs", "lanId");
            }
            return $;
        }
    }

}
