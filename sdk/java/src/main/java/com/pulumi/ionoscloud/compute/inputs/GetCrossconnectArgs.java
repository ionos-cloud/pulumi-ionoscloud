// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCrossconnectArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetCrossconnectArgs Empty = new GetCrossconnectArgs();

    /**
     * Description of cross connect
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of cross connect
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * ID of the cross connect you want to search for.
     * 
     * Either `name` or `id` must be provided. If none, or both are provided, the datasource will return an error.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return ID of the cross connect you want to search for.
     * 
     * Either `name` or `id` must be provided. If none, or both are provided, the datasource will return an error.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Name of an existing cross connect that you want to search for.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of an existing cross connect that you want to search for.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private GetCrossconnectArgs() {}

    private GetCrossconnectArgs(GetCrossconnectArgs $) {
        this.description = $.description;
        this.id = $.id;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCrossconnectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCrossconnectArgs $;

        public Builder() {
            $ = new GetCrossconnectArgs();
        }

        public Builder(GetCrossconnectArgs defaults) {
            $ = new GetCrossconnectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of cross connect
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of cross connect
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param id ID of the cross connect you want to search for.
         * 
         * Either `name` or `id` must be provided. If none, or both are provided, the datasource will return an error.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id ID of the cross connect you want to search for.
         * 
         * Either `name` or `id` must be provided. If none, or both are provided, the datasource will return an error.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name Name of an existing cross connect that you want to search for.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of an existing cross connect that you want to search for.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public GetCrossconnectArgs build() {
            return $;
        }
    }

}
