// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class NfsClusterConnectionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final NfsClusterConnectionsArgs Empty = new NfsClusterConnectionsArgs();

    /**
     * The ID of the datacenter where the Network File Storage cluster is located.
     * 
     */
    @Import(name="datacenterId", required=true)
    private Output<String> datacenterId;

    /**
     * @return The ID of the datacenter where the Network File Storage cluster is located.
     * 
     */
    public Output<String> datacenterId() {
        return this.datacenterId;
    }

    /**
     * The IP address and prefix of the Network File Storage cluster. The IP address can be either IPv4 or IPv6. The IP address has to be given with CIDR notation.
     * 
     */
    @Import(name="ipAddress", required=true)
    private Output<String> ipAddress;

    /**
     * @return The IP address and prefix of the Network File Storage cluster. The IP address can be either IPv4 or IPv6. The IP address has to be given with CIDR notation.
     * 
     */
    public Output<String> ipAddress() {
        return this.ipAddress;
    }

    /**
     * The Private LAN to which the Network File Storage cluster must be connected.
     * 
     */
    @Import(name="lan", required=true)
    private Output<String> lan;

    /**
     * @return The Private LAN to which the Network File Storage cluster must be connected.
     * 
     */
    public Output<String> lan() {
        return this.lan;
    }

    private NfsClusterConnectionsArgs() {}

    private NfsClusterConnectionsArgs(NfsClusterConnectionsArgs $) {
        this.datacenterId = $.datacenterId;
        this.ipAddress = $.ipAddress;
        this.lan = $.lan;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NfsClusterConnectionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NfsClusterConnectionsArgs $;

        public Builder() {
            $ = new NfsClusterConnectionsArgs();
        }

        public Builder(NfsClusterConnectionsArgs defaults) {
            $ = new NfsClusterConnectionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param datacenterId The ID of the datacenter where the Network File Storage cluster is located.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(Output<String> datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        /**
         * @param datacenterId The ID of the datacenter where the Network File Storage cluster is located.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(String datacenterId) {
            return datacenterId(Output.of(datacenterId));
        }

        /**
         * @param ipAddress The IP address and prefix of the Network File Storage cluster. The IP address can be either IPv4 or IPv6. The IP address has to be given with CIDR notation.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress The IP address and prefix of the Network File Storage cluster. The IP address can be either IPv4 or IPv6. The IP address has to be given with CIDR notation.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param lan The Private LAN to which the Network File Storage cluster must be connected.
         * 
         * @return builder
         * 
         */
        public Builder lan(Output<String> lan) {
            $.lan = lan;
            return this;
        }

        /**
         * @param lan The Private LAN to which the Network File Storage cluster must be connected.
         * 
         * @return builder
         * 
         */
        public Builder lan(String lan) {
            return lan(Output.of(lan));
        }

        public NfsClusterConnectionsArgs build() {
            if ($.datacenterId == null) {
                throw new MissingRequiredPropertyException("NfsClusterConnectionsArgs", "datacenterId");
            }
            if ($.ipAddress == null) {
                throw new MissingRequiredPropertyException("NfsClusterConnectionsArgs", "ipAddress");
            }
            if ($.lan == null) {
                throw new MissingRequiredPropertyException("NfsClusterConnectionsArgs", "lan");
            }
            return $;
        }
    }

}
