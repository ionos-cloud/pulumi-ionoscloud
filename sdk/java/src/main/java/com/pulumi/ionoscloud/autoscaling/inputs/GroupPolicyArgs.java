// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.autoscaling.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.autoscaling.inputs.GroupPolicyScaleInActionArgs;
import com.pulumi.ionoscloud.autoscaling.inputs.GroupPolicyScaleOutActionArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final GroupPolicyArgs Empty = new GroupPolicyArgs();

    /**
     * [string] The Metric that should trigger the scaling actions. Metric values are checked at fixed intervals. Possible values: `INSTANCE_CPU_UTILIZATION_AVERAGE`, `INSTANCE_NETWORK_IN_BYTES`, `INSTANCE_NETWORK_IN_PACKETS`, `INSTANCE_NETWORK_OUT_BYTES`, `INSTANCE_NETWORK_OUT_PACKETS`
     * 
     */
    @Import(name="metric", required=true)
    private Output<String> metric;

    /**
     * @return [string] The Metric that should trigger the scaling actions. Metric values are checked at fixed intervals. Possible values: `INSTANCE_CPU_UTILIZATION_AVERAGE`, `INSTANCE_NETWORK_IN_BYTES`, `INSTANCE_NETWORK_IN_PACKETS`, `INSTANCE_NETWORK_OUT_BYTES`, `INSTANCE_NETWORK_OUT_PACKETS`
     * 
     */
    public Output<String> metric() {
        return this.metric;
    }

    /**
     * [string] Defines the time range, for which the samples will be aggregated. Default is 120s. *Note that when you set it to values like 5m the API will automatically transform it in PT5M, so the plan will show you a diff in state that should be ignored.*
     * 
     */
    @Import(name="range")
    private @Nullable Output<String> range;

    /**
     * @return [string] Defines the time range, for which the samples will be aggregated. Default is 120s. *Note that when you set it to values like 5m the API will automatically transform it in PT5M, so the plan will show you a diff in state that should be ignored.*
     * 
     */
    public Optional<Output<String>> range() {
        return Optional.ofNullable(this.range);
    }

    /**
     * [list] Specifies the action to take when the `scaleInThreshold` is exceeded. Hereby, scaling in is always about removing VMs that are currently associated with this autoscaling group. Default termination policy is OLDEST_SERVER_FIRST.
     * 
     */
    @Import(name="scaleInAction", required=true)
    private Output<GroupPolicyScaleInActionArgs> scaleInAction;

    /**
     * @return [list] Specifies the action to take when the `scaleInThreshold` is exceeded. Hereby, scaling in is always about removing VMs that are currently associated with this autoscaling group. Default termination policy is OLDEST_SERVER_FIRST.
     * 
     */
    public Output<GroupPolicyScaleInActionArgs> scaleInAction() {
        return this.scaleInAction;
    }

    /**
     * [int] A lower threshold on the value of `metric`. Will be used with `less than` (&lt;) operator. Exceeding this will start a Scale-In Action as specified by the `scaleInAction` property. The value must have a higher minimum delta to the `scaleOutThreshold` depending on the `metric` to avoid competitive actions at the same time.
     * 
     */
    @Import(name="scaleInThreshold", required=true)
    private Output<Integer> scaleInThreshold;

    /**
     * @return [int] A lower threshold on the value of `metric`. Will be used with `less than` (&lt;) operator. Exceeding this will start a Scale-In Action as specified by the `scaleInAction` property. The value must have a higher minimum delta to the `scaleOutThreshold` depending on the `metric` to avoid competitive actions at the same time.
     * 
     */
    public Output<Integer> scaleInThreshold() {
        return this.scaleInThreshold;
    }

    /**
     * [list] Specifies the action to take when the `scaleOutThreshold` is exceeded. Hereby, scaling out is always about adding new VMs to this autoscaling group.
     * 
     */
    @Import(name="scaleOutAction", required=true)
    private Output<GroupPolicyScaleOutActionArgs> scaleOutAction;

    /**
     * @return [list] Specifies the action to take when the `scaleOutThreshold` is exceeded. Hereby, scaling out is always about adding new VMs to this autoscaling group.
     * 
     */
    public Output<GroupPolicyScaleOutActionArgs> scaleOutAction() {
        return this.scaleOutAction;
    }

    /**
     * [int] The upper threshold for the value of the `metric`. Used with the `greater than` (&gt;) operator. A scale-out action is triggered when this value is exceeded, specified by the `scaleOutAction` property. The value must have a lower minimum delta to the `scaleInThreshold`, depending on the metric, to avoid competing for actions simultaneously. If `properties.policy.unit=TOTAL`, a value &gt;= 40 must be chosen.
     * 
     */
    @Import(name="scaleOutThreshold", required=true)
    private Output<Integer> scaleOutThreshold;

    /**
     * @return [int] The upper threshold for the value of the `metric`. Used with the `greater than` (&gt;) operator. A scale-out action is triggered when this value is exceeded, specified by the `scaleOutAction` property. The value must have a lower minimum delta to the `scaleInThreshold`, depending on the metric, to avoid competing for actions simultaneously. If `properties.policy.unit=TOTAL`, a value &gt;= 40 must be chosen.
     * 
     */
    public Output<Integer> scaleOutThreshold() {
        return this.scaleOutThreshold;
    }

    /**
     * [string] Units of the applied Metric. Possible values are: `PER_HOUR`, `PER_MINUTE`, `PER_SECOND`, `TOTAL`.
     * 
     */
    @Import(name="unit", required=true)
    private Output<String> unit;

    /**
     * @return [string] Units of the applied Metric. Possible values are: `PER_HOUR`, `PER_MINUTE`, `PER_SECOND`, `TOTAL`.
     * 
     */
    public Output<String> unit() {
        return this.unit;
    }

    private GroupPolicyArgs() {}

    private GroupPolicyArgs(GroupPolicyArgs $) {
        this.metric = $.metric;
        this.range = $.range;
        this.scaleInAction = $.scaleInAction;
        this.scaleInThreshold = $.scaleInThreshold;
        this.scaleOutAction = $.scaleOutAction;
        this.scaleOutThreshold = $.scaleOutThreshold;
        this.unit = $.unit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupPolicyArgs $;

        public Builder() {
            $ = new GroupPolicyArgs();
        }

        public Builder(GroupPolicyArgs defaults) {
            $ = new GroupPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param metric [string] The Metric that should trigger the scaling actions. Metric values are checked at fixed intervals. Possible values: `INSTANCE_CPU_UTILIZATION_AVERAGE`, `INSTANCE_NETWORK_IN_BYTES`, `INSTANCE_NETWORK_IN_PACKETS`, `INSTANCE_NETWORK_OUT_BYTES`, `INSTANCE_NETWORK_OUT_PACKETS`
         * 
         * @return builder
         * 
         */
        public Builder metric(Output<String> metric) {
            $.metric = metric;
            return this;
        }

        /**
         * @param metric [string] The Metric that should trigger the scaling actions. Metric values are checked at fixed intervals. Possible values: `INSTANCE_CPU_UTILIZATION_AVERAGE`, `INSTANCE_NETWORK_IN_BYTES`, `INSTANCE_NETWORK_IN_PACKETS`, `INSTANCE_NETWORK_OUT_BYTES`, `INSTANCE_NETWORK_OUT_PACKETS`
         * 
         * @return builder
         * 
         */
        public Builder metric(String metric) {
            return metric(Output.of(metric));
        }

        /**
         * @param range [string] Defines the time range, for which the samples will be aggregated. Default is 120s. *Note that when you set it to values like 5m the API will automatically transform it in PT5M, so the plan will show you a diff in state that should be ignored.*
         * 
         * @return builder
         * 
         */
        public Builder range(@Nullable Output<String> range) {
            $.range = range;
            return this;
        }

        /**
         * @param range [string] Defines the time range, for which the samples will be aggregated. Default is 120s. *Note that when you set it to values like 5m the API will automatically transform it in PT5M, so the plan will show you a diff in state that should be ignored.*
         * 
         * @return builder
         * 
         */
        public Builder range(String range) {
            return range(Output.of(range));
        }

        /**
         * @param scaleInAction [list] Specifies the action to take when the `scaleInThreshold` is exceeded. Hereby, scaling in is always about removing VMs that are currently associated with this autoscaling group. Default termination policy is OLDEST_SERVER_FIRST.
         * 
         * @return builder
         * 
         */
        public Builder scaleInAction(Output<GroupPolicyScaleInActionArgs> scaleInAction) {
            $.scaleInAction = scaleInAction;
            return this;
        }

        /**
         * @param scaleInAction [list] Specifies the action to take when the `scaleInThreshold` is exceeded. Hereby, scaling in is always about removing VMs that are currently associated with this autoscaling group. Default termination policy is OLDEST_SERVER_FIRST.
         * 
         * @return builder
         * 
         */
        public Builder scaleInAction(GroupPolicyScaleInActionArgs scaleInAction) {
            return scaleInAction(Output.of(scaleInAction));
        }

        /**
         * @param scaleInThreshold [int] A lower threshold on the value of `metric`. Will be used with `less than` (&lt;) operator. Exceeding this will start a Scale-In Action as specified by the `scaleInAction` property. The value must have a higher minimum delta to the `scaleOutThreshold` depending on the `metric` to avoid competitive actions at the same time.
         * 
         * @return builder
         * 
         */
        public Builder scaleInThreshold(Output<Integer> scaleInThreshold) {
            $.scaleInThreshold = scaleInThreshold;
            return this;
        }

        /**
         * @param scaleInThreshold [int] A lower threshold on the value of `metric`. Will be used with `less than` (&lt;) operator. Exceeding this will start a Scale-In Action as specified by the `scaleInAction` property. The value must have a higher minimum delta to the `scaleOutThreshold` depending on the `metric` to avoid competitive actions at the same time.
         * 
         * @return builder
         * 
         */
        public Builder scaleInThreshold(Integer scaleInThreshold) {
            return scaleInThreshold(Output.of(scaleInThreshold));
        }

        /**
         * @param scaleOutAction [list] Specifies the action to take when the `scaleOutThreshold` is exceeded. Hereby, scaling out is always about adding new VMs to this autoscaling group.
         * 
         * @return builder
         * 
         */
        public Builder scaleOutAction(Output<GroupPolicyScaleOutActionArgs> scaleOutAction) {
            $.scaleOutAction = scaleOutAction;
            return this;
        }

        /**
         * @param scaleOutAction [list] Specifies the action to take when the `scaleOutThreshold` is exceeded. Hereby, scaling out is always about adding new VMs to this autoscaling group.
         * 
         * @return builder
         * 
         */
        public Builder scaleOutAction(GroupPolicyScaleOutActionArgs scaleOutAction) {
            return scaleOutAction(Output.of(scaleOutAction));
        }

        /**
         * @param scaleOutThreshold [int] The upper threshold for the value of the `metric`. Used with the `greater than` (&gt;) operator. A scale-out action is triggered when this value is exceeded, specified by the `scaleOutAction` property. The value must have a lower minimum delta to the `scaleInThreshold`, depending on the metric, to avoid competing for actions simultaneously. If `properties.policy.unit=TOTAL`, a value &gt;= 40 must be chosen.
         * 
         * @return builder
         * 
         */
        public Builder scaleOutThreshold(Output<Integer> scaleOutThreshold) {
            $.scaleOutThreshold = scaleOutThreshold;
            return this;
        }

        /**
         * @param scaleOutThreshold [int] The upper threshold for the value of the `metric`. Used with the `greater than` (&gt;) operator. A scale-out action is triggered when this value is exceeded, specified by the `scaleOutAction` property. The value must have a lower minimum delta to the `scaleInThreshold`, depending on the metric, to avoid competing for actions simultaneously. If `properties.policy.unit=TOTAL`, a value &gt;= 40 must be chosen.
         * 
         * @return builder
         * 
         */
        public Builder scaleOutThreshold(Integer scaleOutThreshold) {
            return scaleOutThreshold(Output.of(scaleOutThreshold));
        }

        /**
         * @param unit [string] Units of the applied Metric. Possible values are: `PER_HOUR`, `PER_MINUTE`, `PER_SECOND`, `TOTAL`.
         * 
         * @return builder
         * 
         */
        public Builder unit(Output<String> unit) {
            $.unit = unit;
            return this;
        }

        /**
         * @param unit [string] Units of the applied Metric. Possible values are: `PER_HOUR`, `PER_MINUTE`, `PER_SECOND`, `TOTAL`.
         * 
         * @return builder
         * 
         */
        public Builder unit(String unit) {
            return unit(Output.of(unit));
        }

        public GroupPolicyArgs build() {
            if ($.metric == null) {
                throw new MissingRequiredPropertyException("GroupPolicyArgs", "metric");
            }
            if ($.scaleInAction == null) {
                throw new MissingRequiredPropertyException("GroupPolicyArgs", "scaleInAction");
            }
            if ($.scaleInThreshold == null) {
                throw new MissingRequiredPropertyException("GroupPolicyArgs", "scaleInThreshold");
            }
            if ($.scaleOutAction == null) {
                throw new MissingRequiredPropertyException("GroupPolicyArgs", "scaleOutAction");
            }
            if ($.scaleOutThreshold == null) {
                throw new MissingRequiredPropertyException("GroupPolicyArgs", "scaleOutThreshold");
            }
            if ($.unit == null) {
                throw new MissingRequiredPropertyException("GroupPolicyArgs", "unit");
            }
            return $;
        }
    }

}
