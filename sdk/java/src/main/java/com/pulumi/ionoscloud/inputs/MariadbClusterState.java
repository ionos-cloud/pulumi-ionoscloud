// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.ionoscloud.inputs.MariadbClusterConnectionsArgs;
import com.pulumi.ionoscloud.inputs.MariadbClusterCredentialsArgs;
import com.pulumi.ionoscloud.inputs.MariadbClusterMaintenanceWindowArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MariadbClusterState extends com.pulumi.resources.ResourceArgs {

    public static final MariadbClusterState Empty = new MariadbClusterState();

    /**
     * The network connection for your cluster. Only one connection is allowed.
     * 
     */
    @Import(name="connections")
    private @Nullable Output<MariadbClusterConnectionsArgs> connections;

    /**
     * @return The network connection for your cluster. Only one connection is allowed.
     * 
     */
    public Optional<Output<MariadbClusterConnectionsArgs>> connections() {
        return Optional.ofNullable(this.connections);
    }

    /**
     * The number of CPU cores per instance.
     * 
     */
    @Import(name="cores")
    private @Nullable Output<Integer> cores;

    /**
     * @return The number of CPU cores per instance.
     * 
     */
    public Optional<Output<Integer>> cores() {
        return Optional.ofNullable(this.cores);
    }

    /**
     * Credentials for the database user to be created.
     * 
     */
    @Import(name="credentials")
    private @Nullable Output<MariadbClusterCredentialsArgs> credentials;

    /**
     * @return Credentials for the database user to be created.
     * 
     */
    public Optional<Output<MariadbClusterCredentialsArgs>> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    /**
     * The friendly name of your cluster.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The friendly name of your cluster.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The DNS name pointing to your cluster.
     * 
     */
    @Import(name="dnsName")
    private @Nullable Output<String> dnsName;

    /**
     * @return The DNS name pointing to your cluster.
     * 
     */
    public Optional<Output<String>> dnsName() {
        return Optional.ofNullable(this.dnsName);
    }

    /**
     * The total number of instances in the cluster (one primary and n-1 secondary).
     * 
     */
    @Import(name="instances")
    private @Nullable Output<Integer> instances;

    /**
     * @return The total number of instances in the cluster (one primary and n-1 secondary).
     * 
     */
    public Optional<Output<Integer>> instances() {
        return Optional.ofNullable(this.instances);
    }

    /**
     * The cluster location
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The cluster location
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * A weekly 4 hour-long window, during which maintenance might occur.
     * 
     */
    @Import(name="maintenanceWindow")
    private @Nullable Output<MariadbClusterMaintenanceWindowArgs> maintenanceWindow;

    /**
     * @return A weekly 4 hour-long window, during which maintenance might occur.
     * 
     */
    public Optional<Output<MariadbClusterMaintenanceWindowArgs>> maintenanceWindow() {
        return Optional.ofNullable(this.maintenanceWindow);
    }

    /**
     * The MariaDB version of your cluster.
     * 
     */
    @Import(name="mariadbVersion")
    private @Nullable Output<String> mariadbVersion;

    /**
     * @return The MariaDB version of your cluster.
     * 
     */
    public Optional<Output<String>> mariadbVersion() {
        return Optional.ofNullable(this.mariadbVersion);
    }

    /**
     * The amount of memory per instance in gigabytes (GB).
     * 
     */
    @Import(name="ram")
    private @Nullable Output<Integer> ram;

    /**
     * @return The amount of memory per instance in gigabytes (GB).
     * 
     */
    public Optional<Output<Integer>> ram() {
        return Optional.ofNullable(this.ram);
    }

    /**
     * The amount of storage per instance in gigabytes (GB).
     * 
     */
    @Import(name="storageSize")
    private @Nullable Output<Integer> storageSize;

    /**
     * @return The amount of storage per instance in gigabytes (GB).
     * 
     */
    public Optional<Output<Integer>> storageSize() {
        return Optional.ofNullable(this.storageSize);
    }

    private MariadbClusterState() {}

    private MariadbClusterState(MariadbClusterState $) {
        this.connections = $.connections;
        this.cores = $.cores;
        this.credentials = $.credentials;
        this.displayName = $.displayName;
        this.dnsName = $.dnsName;
        this.instances = $.instances;
        this.location = $.location;
        this.maintenanceWindow = $.maintenanceWindow;
        this.mariadbVersion = $.mariadbVersion;
        this.ram = $.ram;
        this.storageSize = $.storageSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MariadbClusterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MariadbClusterState $;

        public Builder() {
            $ = new MariadbClusterState();
        }

        public Builder(MariadbClusterState defaults) {
            $ = new MariadbClusterState(Objects.requireNonNull(defaults));
        }

        /**
         * @param connections The network connection for your cluster. Only one connection is allowed.
         * 
         * @return builder
         * 
         */
        public Builder connections(@Nullable Output<MariadbClusterConnectionsArgs> connections) {
            $.connections = connections;
            return this;
        }

        /**
         * @param connections The network connection for your cluster. Only one connection is allowed.
         * 
         * @return builder
         * 
         */
        public Builder connections(MariadbClusterConnectionsArgs connections) {
            return connections(Output.of(connections));
        }

        /**
         * @param cores The number of CPU cores per instance.
         * 
         * @return builder
         * 
         */
        public Builder cores(@Nullable Output<Integer> cores) {
            $.cores = cores;
            return this;
        }

        /**
         * @param cores The number of CPU cores per instance.
         * 
         * @return builder
         * 
         */
        public Builder cores(Integer cores) {
            return cores(Output.of(cores));
        }

        /**
         * @param credentials Credentials for the database user to be created.
         * 
         * @return builder
         * 
         */
        public Builder credentials(@Nullable Output<MariadbClusterCredentialsArgs> credentials) {
            $.credentials = credentials;
            return this;
        }

        /**
         * @param credentials Credentials for the database user to be created.
         * 
         * @return builder
         * 
         */
        public Builder credentials(MariadbClusterCredentialsArgs credentials) {
            return credentials(Output.of(credentials));
        }

        /**
         * @param displayName The friendly name of your cluster.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The friendly name of your cluster.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param dnsName The DNS name pointing to your cluster.
         * 
         * @return builder
         * 
         */
        public Builder dnsName(@Nullable Output<String> dnsName) {
            $.dnsName = dnsName;
            return this;
        }

        /**
         * @param dnsName The DNS name pointing to your cluster.
         * 
         * @return builder
         * 
         */
        public Builder dnsName(String dnsName) {
            return dnsName(Output.of(dnsName));
        }

        /**
         * @param instances The total number of instances in the cluster (one primary and n-1 secondary).
         * 
         * @return builder
         * 
         */
        public Builder instances(@Nullable Output<Integer> instances) {
            $.instances = instances;
            return this;
        }

        /**
         * @param instances The total number of instances in the cluster (one primary and n-1 secondary).
         * 
         * @return builder
         * 
         */
        public Builder instances(Integer instances) {
            return instances(Output.of(instances));
        }

        /**
         * @param location The cluster location
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The cluster location
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param maintenanceWindow A weekly 4 hour-long window, during which maintenance might occur.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindow(@Nullable Output<MariadbClusterMaintenanceWindowArgs> maintenanceWindow) {
            $.maintenanceWindow = maintenanceWindow;
            return this;
        }

        /**
         * @param maintenanceWindow A weekly 4 hour-long window, during which maintenance might occur.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindow(MariadbClusterMaintenanceWindowArgs maintenanceWindow) {
            return maintenanceWindow(Output.of(maintenanceWindow));
        }

        /**
         * @param mariadbVersion The MariaDB version of your cluster.
         * 
         * @return builder
         * 
         */
        public Builder mariadbVersion(@Nullable Output<String> mariadbVersion) {
            $.mariadbVersion = mariadbVersion;
            return this;
        }

        /**
         * @param mariadbVersion The MariaDB version of your cluster.
         * 
         * @return builder
         * 
         */
        public Builder mariadbVersion(String mariadbVersion) {
            return mariadbVersion(Output.of(mariadbVersion));
        }

        /**
         * @param ram The amount of memory per instance in gigabytes (GB).
         * 
         * @return builder
         * 
         */
        public Builder ram(@Nullable Output<Integer> ram) {
            $.ram = ram;
            return this;
        }

        /**
         * @param ram The amount of memory per instance in gigabytes (GB).
         * 
         * @return builder
         * 
         */
        public Builder ram(Integer ram) {
            return ram(Output.of(ram));
        }

        /**
         * @param storageSize The amount of storage per instance in gigabytes (GB).
         * 
         * @return builder
         * 
         */
        public Builder storageSize(@Nullable Output<Integer> storageSize) {
            $.storageSize = storageSize;
            return this;
        }

        /**
         * @param storageSize The amount of storage per instance in gigabytes (GB).
         * 
         * @return builder
         * 
         */
        public Builder storageSize(Integer storageSize) {
            return storageSize(Output.of(storageSize));
        }

        public MariadbClusterState build() {
            return $;
        }
    }

}
