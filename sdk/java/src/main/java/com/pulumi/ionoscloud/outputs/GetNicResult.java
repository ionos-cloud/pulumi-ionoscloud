// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.outputs.GetNicFlowlog;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetNicResult {
    /**
     * @return The ID of a Virtual Data Center.
     * 
     */
    private String datacenterId;
    /**
     * @return The Logical Unit Number (LUN) of the storage volume. Null if this NIC was created from CloudAPI and no DCD changes were done on the Datacenter.
     * 
     */
    private Integer deviceNumber;
    /**
     * @return Indicates if the NIC should get an IP address using DHCP (true) or not (false).
     * 
     */
    private @Nullable Boolean dhcp;
    private @Nullable Boolean dhcpv6;
    /**
     * @return If this resource is set to true and is nested under a server resource firewall, with open SSH port, resource must be nested under the NIC.
     * 
     */
    private @Nullable Boolean firewallActive;
    /**
     * @return The type of firewall rules that will be allowed on the NIC. If it is not specified it will take the default value INGRESS
     * 
     */
    private String firewallType;
    /**
     * @return Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.
     * 
     */
    private List<GetNicFlowlog> flowlogs;
    /**
     * @return The id of the NIC.
     * 
     */
    private @Nullable String id;
    /**
     * @return Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
     * 
     */
    private List<String> ips;
    private String ipv6CidrBlock;
    private List<String> ipv6Ips;
    /**
     * @return The LAN ID the NIC will sit on.
     * 
     */
    private @Nullable Integer lan;
    /**
     * @return The MAC address of the NIC.
     * 
     */
    private String mac;
    /**
     * @return Specifies the name of the flow log.
     * 
     */
    private @Nullable String name;
    /**
     * @return The PCI slot number of the Nic.
     * 
     */
    private Integer pciSlot;
    /**
     * @return The ID of a server.
     * 
     */
    private String serverId;

    private GetNicResult() {}
    /**
     * @return The ID of a Virtual Data Center.
     * 
     */
    public String datacenterId() {
        return this.datacenterId;
    }
    /**
     * @return The Logical Unit Number (LUN) of the storage volume. Null if this NIC was created from CloudAPI and no DCD changes were done on the Datacenter.
     * 
     */
    public Integer deviceNumber() {
        return this.deviceNumber;
    }
    /**
     * @return Indicates if the NIC should get an IP address using DHCP (true) or not (false).
     * 
     */
    public Optional<Boolean> dhcp() {
        return Optional.ofNullable(this.dhcp);
    }
    public Optional<Boolean> dhcpv6() {
        return Optional.ofNullable(this.dhcpv6);
    }
    /**
     * @return If this resource is set to true and is nested under a server resource firewall, with open SSH port, resource must be nested under the NIC.
     * 
     */
    public Optional<Boolean> firewallActive() {
        return Optional.ofNullable(this.firewallActive);
    }
    /**
     * @return The type of firewall rules that will be allowed on the NIC. If it is not specified it will take the default value INGRESS
     * 
     */
    public String firewallType() {
        return this.firewallType;
    }
    /**
     * @return Only 1 flow log can be configured. Only the name field can change as part of an update. Flow logs holistically capture network information such as source and destination IP addresses, source and destination ports, number of packets, amount of bytes, the start and end time of the recording, and the type of protocol – and log the extent to which your instances are being accessed.
     * 
     */
    public List<GetNicFlowlog> flowlogs() {
        return this.flowlogs;
    }
    /**
     * @return The id of the NIC.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Collection of IP addresses assigned to a nic. Explicitly assigned public IPs need to come from reserved IP blocks, Passing value null or empty array will assign an IP address automatically.
     * 
     */
    public List<String> ips() {
        return this.ips;
    }
    public String ipv6CidrBlock() {
        return this.ipv6CidrBlock;
    }
    public List<String> ipv6Ips() {
        return this.ipv6Ips;
    }
    /**
     * @return The LAN ID the NIC will sit on.
     * 
     */
    public Optional<Integer> lan() {
        return Optional.ofNullable(this.lan);
    }
    /**
     * @return The MAC address of the NIC.
     * 
     */
    public String mac() {
        return this.mac;
    }
    /**
     * @return Specifies the name of the flow log.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The PCI slot number of the Nic.
     * 
     */
    public Integer pciSlot() {
        return this.pciSlot;
    }
    /**
     * @return The ID of a server.
     * 
     */
    public String serverId() {
        return this.serverId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNicResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String datacenterId;
        private Integer deviceNumber;
        private @Nullable Boolean dhcp;
        private @Nullable Boolean dhcpv6;
        private @Nullable Boolean firewallActive;
        private String firewallType;
        private List<GetNicFlowlog> flowlogs;
        private @Nullable String id;
        private List<String> ips;
        private String ipv6CidrBlock;
        private List<String> ipv6Ips;
        private @Nullable Integer lan;
        private String mac;
        private @Nullable String name;
        private Integer pciSlot;
        private String serverId;
        public Builder() {}
        public Builder(GetNicResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datacenterId = defaults.datacenterId;
    	      this.deviceNumber = defaults.deviceNumber;
    	      this.dhcp = defaults.dhcp;
    	      this.dhcpv6 = defaults.dhcpv6;
    	      this.firewallActive = defaults.firewallActive;
    	      this.firewallType = defaults.firewallType;
    	      this.flowlogs = defaults.flowlogs;
    	      this.id = defaults.id;
    	      this.ips = defaults.ips;
    	      this.ipv6CidrBlock = defaults.ipv6CidrBlock;
    	      this.ipv6Ips = defaults.ipv6Ips;
    	      this.lan = defaults.lan;
    	      this.mac = defaults.mac;
    	      this.name = defaults.name;
    	      this.pciSlot = defaults.pciSlot;
    	      this.serverId = defaults.serverId;
        }

        @CustomType.Setter
        public Builder datacenterId(String datacenterId) {
            if (datacenterId == null) {
              throw new MissingRequiredPropertyException("GetNicResult", "datacenterId");
            }
            this.datacenterId = datacenterId;
            return this;
        }
        @CustomType.Setter
        public Builder deviceNumber(Integer deviceNumber) {
            if (deviceNumber == null) {
              throw new MissingRequiredPropertyException("GetNicResult", "deviceNumber");
            }
            this.deviceNumber = deviceNumber;
            return this;
        }
        @CustomType.Setter
        public Builder dhcp(@Nullable Boolean dhcp) {

            this.dhcp = dhcp;
            return this;
        }
        @CustomType.Setter
        public Builder dhcpv6(@Nullable Boolean dhcpv6) {

            this.dhcpv6 = dhcpv6;
            return this;
        }
        @CustomType.Setter
        public Builder firewallActive(@Nullable Boolean firewallActive) {

            this.firewallActive = firewallActive;
            return this;
        }
        @CustomType.Setter
        public Builder firewallType(String firewallType) {
            if (firewallType == null) {
              throw new MissingRequiredPropertyException("GetNicResult", "firewallType");
            }
            this.firewallType = firewallType;
            return this;
        }
        @CustomType.Setter
        public Builder flowlogs(List<GetNicFlowlog> flowlogs) {
            if (flowlogs == null) {
              throw new MissingRequiredPropertyException("GetNicResult", "flowlogs");
            }
            this.flowlogs = flowlogs;
            return this;
        }
        public Builder flowlogs(GetNicFlowlog... flowlogs) {
            return flowlogs(List.of(flowlogs));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ips(List<String> ips) {
            if (ips == null) {
              throw new MissingRequiredPropertyException("GetNicResult", "ips");
            }
            this.ips = ips;
            return this;
        }
        public Builder ips(String... ips) {
            return ips(List.of(ips));
        }
        @CustomType.Setter
        public Builder ipv6CidrBlock(String ipv6CidrBlock) {
            if (ipv6CidrBlock == null) {
              throw new MissingRequiredPropertyException("GetNicResult", "ipv6CidrBlock");
            }
            this.ipv6CidrBlock = ipv6CidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6Ips(List<String> ipv6Ips) {
            if (ipv6Ips == null) {
              throw new MissingRequiredPropertyException("GetNicResult", "ipv6Ips");
            }
            this.ipv6Ips = ipv6Ips;
            return this;
        }
        public Builder ipv6Ips(String... ipv6Ips) {
            return ipv6Ips(List.of(ipv6Ips));
        }
        @CustomType.Setter
        public Builder lan(@Nullable Integer lan) {

            this.lan = lan;
            return this;
        }
        @CustomType.Setter
        public Builder mac(String mac) {
            if (mac == null) {
              throw new MissingRequiredPropertyException("GetNicResult", "mac");
            }
            this.mac = mac;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder pciSlot(Integer pciSlot) {
            if (pciSlot == null) {
              throw new MissingRequiredPropertyException("GetNicResult", "pciSlot");
            }
            this.pciSlot = pciSlot;
            return this;
        }
        @CustomType.Setter
        public Builder serverId(String serverId) {
            if (serverId == null) {
              throw new MissingRequiredPropertyException("GetNicResult", "serverId");
            }
            this.serverId = serverId;
            return this;
        }
        public GetNicResult build() {
            final var _resultValue = new GetNicResult();
            _resultValue.datacenterId = datacenterId;
            _resultValue.deviceNumber = deviceNumber;
            _resultValue.dhcp = dhcp;
            _resultValue.dhcpv6 = dhcpv6;
            _resultValue.firewallActive = firewallActive;
            _resultValue.firewallType = firewallType;
            _resultValue.flowlogs = flowlogs;
            _resultValue.id = id;
            _resultValue.ips = ips;
            _resultValue.ipv6CidrBlock = ipv6CidrBlock;
            _resultValue.ipv6Ips = ipv6Ips;
            _resultValue.lan = lan;
            _resultValue.mac = mac;
            _resultValue.name = name;
            _resultValue.pciSlot = pciSlot;
            _resultValue.serverId = serverId;
            return _resultValue;
        }
    }
}
