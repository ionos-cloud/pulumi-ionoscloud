// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.k8s.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class GetNodePoolAutoScaling {
    /**
     * @return The maximum number of worker nodes that the node pool can scale to
     * 
     */
    private Integer maxNodeCount;
    /**
     * @return The minimum number of worker nodes the node pool can scale down to
     * 
     */
    private Integer minNodeCount;

    private GetNodePoolAutoScaling() {}
    /**
     * @return The maximum number of worker nodes that the node pool can scale to
     * 
     */
    public Integer maxNodeCount() {
        return this.maxNodeCount;
    }
    /**
     * @return The minimum number of worker nodes the node pool can scale down to
     * 
     */
    public Integer minNodeCount() {
        return this.minNodeCount;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNodePoolAutoScaling defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer maxNodeCount;
        private Integer minNodeCount;
        public Builder() {}
        public Builder(GetNodePoolAutoScaling defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxNodeCount = defaults.maxNodeCount;
    	      this.minNodeCount = defaults.minNodeCount;
        }

        @CustomType.Setter
        public Builder maxNodeCount(Integer maxNodeCount) {
            if (maxNodeCount == null) {
              throw new MissingRequiredPropertyException("GetNodePoolAutoScaling", "maxNodeCount");
            }
            this.maxNodeCount = maxNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder minNodeCount(Integer minNodeCount) {
            if (minNodeCount == null) {
              throw new MissingRequiredPropertyException("GetNodePoolAutoScaling", "minNodeCount");
            }
            this.minNodeCount = minNodeCount;
            return this;
        }
        public GetNodePoolAutoScaling build() {
            final var _resultValue = new GetNodePoolAutoScaling();
            _resultValue.maxNodeCount = maxNodeCount;
            _resultValue.minNodeCount = minNodeCount;
            return _resultValue;
        }
    }
}
