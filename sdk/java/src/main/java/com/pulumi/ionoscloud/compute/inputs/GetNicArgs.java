// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetNicArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetNicArgs Empty = new GetNicArgs();

    /**
     * [string] The ID of a Virtual Data Center.
     * 
     */
    @Import(name="datacenterId", required=true)
    private Output<String> datacenterId;

    /**
     * @return [string] The ID of a Virtual Data Center.
     * 
     */
    public Output<String> datacenterId() {
        return this.datacenterId;
    }

    /**
     * ID of the nic you want to search for.
     * 
     * `datacenter_id` and either `name` or `id` must be provided.
     * If none, are provided, the datasource will return an error.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return ID of the nic you want to search for.
     * 
     * `datacenter_id` and either `name` or `id` must be provided.
     * If none, are provided, the datasource will return an error.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * [string] The name of the LAN.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return [string] The name of the LAN.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * [string] The ID of a server.
     * 
     */
    @Import(name="serverId", required=true)
    private Output<String> serverId;

    /**
     * @return [string] The ID of a server.
     * 
     */
    public Output<String> serverId() {
        return this.serverId;
    }

    private GetNicArgs() {}

    private GetNicArgs(GetNicArgs $) {
        this.datacenterId = $.datacenterId;
        this.id = $.id;
        this.name = $.name;
        this.serverId = $.serverId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNicArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNicArgs $;

        public Builder() {
            $ = new GetNicArgs();
        }

        public Builder(GetNicArgs defaults) {
            $ = new GetNicArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param datacenterId [string] The ID of a Virtual Data Center.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(Output<String> datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        /**
         * @param datacenterId [string] The ID of a Virtual Data Center.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(String datacenterId) {
            return datacenterId(Output.of(datacenterId));
        }

        /**
         * @param id ID of the nic you want to search for.
         * 
         * `datacenter_id` and either `name` or `id` must be provided.
         * If none, are provided, the datasource will return an error.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id ID of the nic you want to search for.
         * 
         * `datacenter_id` and either `name` or `id` must be provided.
         * If none, are provided, the datasource will return an error.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name [string] The name of the LAN.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [string] The name of the LAN.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param serverId [string] The ID of a server.
         * 
         * @return builder
         * 
         */
        public Builder serverId(Output<String> serverId) {
            $.serverId = serverId;
            return this;
        }

        /**
         * @param serverId [string] The ID of a server.
         * 
         * @return builder
         * 
         */
        public Builder serverId(String serverId) {
            return serverId(Output.of(serverId));
        }

        public GetNicArgs build() {
            if ($.datacenterId == null) {
                throw new MissingRequiredPropertyException("GetNicArgs", "datacenterId");
            }
            if ($.serverId == null) {
                throw new MissingRequiredPropertyException("GetNicArgs", "serverId");
            }
            return $;
        }
    }

}
