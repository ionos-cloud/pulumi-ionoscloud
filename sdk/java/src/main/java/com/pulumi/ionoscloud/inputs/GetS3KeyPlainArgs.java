// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetS3KeyPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetS3KeyPlainArgs Empty = new GetS3KeyPlainArgs();

    /**
     * The state of the s3 key
     * 
     */
    @Import(name="active")
    private @Nullable Boolean active;

    /**
     * @return The state of the s3 key
     * 
     */
    public Optional<Boolean> active() {
        return Optional.ofNullable(this.active);
    }

    /**
     * ID of the s3 key you want to search for.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return ID of the s3 key you want to search for.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * [string] The UUID of the user owning the S3 Key.
     * 
     */
    @Import(name="userId", required=true)
    private String userId;

    /**
     * @return [string] The UUID of the user owning the S3 Key.
     * 
     */
    public String userId() {
        return this.userId;
    }

    private GetS3KeyPlainArgs() {}

    private GetS3KeyPlainArgs(GetS3KeyPlainArgs $) {
        this.active = $.active;
        this.id = $.id;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetS3KeyPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetS3KeyPlainArgs $;

        public Builder() {
            $ = new GetS3KeyPlainArgs();
        }

        public Builder(GetS3KeyPlainArgs defaults) {
            $ = new GetS3KeyPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param active The state of the s3 key
         * 
         * @return builder
         * 
         */
        public Builder active(@Nullable Boolean active) {
            $.active = active;
            return this;
        }

        /**
         * @param id ID of the s3 key you want to search for.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param userId [string] The UUID of the user owning the S3 Key.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            $.userId = userId;
            return this;
        }

        public GetS3KeyPlainArgs build() {
            if ($.userId == null) {
                throw new MissingRequiredPropertyException("GetS3KeyPlainArgs", "userId");
            }
            return $;
        }
    }

}
