// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCubeServerPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetCubeServerPlainArgs Empty = new GetCubeServerPlainArgs();

    /**
     * Datacenter&#39;s UUID.
     * 
     */
    @Import(name="datacenterId", required=true)
    private String datacenterId;

    /**
     * @return Datacenter&#39;s UUID.
     * 
     */
    public String datacenterId() {
        return this.datacenterId;
    }

    /**
     * ID of the server you want to search for.
     * 
     * `datacenter_id` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return ID of the server you want to search for.
     * 
     * `datacenter_id` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Name of an existing server that you want to search for.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Name of an existing server that you want to search for.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
     * 
     */
    @Import(name="templateUuid")
    private @Nullable String templateUuid;

    /**
     * @return The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
     * 
     */
    public Optional<String> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    private GetCubeServerPlainArgs() {}

    private GetCubeServerPlainArgs(GetCubeServerPlainArgs $) {
        this.datacenterId = $.datacenterId;
        this.id = $.id;
        this.name = $.name;
        this.templateUuid = $.templateUuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCubeServerPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCubeServerPlainArgs $;

        public Builder() {
            $ = new GetCubeServerPlainArgs();
        }

        public Builder(GetCubeServerPlainArgs defaults) {
            $ = new GetCubeServerPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param datacenterId Datacenter&#39;s UUID.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(String datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        /**
         * @param id ID of the server you want to search for.
         * 
         * `datacenter_id` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param name Name of an existing server that you want to search for.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param templateUuid The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(@Nullable String templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        public GetCubeServerPlainArgs build() {
            if ($.datacenterId == null) {
                throw new MissingRequiredPropertyException("GetCubeServerPlainArgs", "datacenterId");
            }
            return $;
        }
    }

}
