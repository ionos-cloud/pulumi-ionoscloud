// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutoscalingGroupReplicaConfigurationVolumeArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutoscalingGroupReplicaConfigurationVolumeArgs Empty = new AutoscalingGroupReplicaConfigurationVolumeArgs();

    /**
     * [string] The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either `public image` or `imageAlias` in conjunction with this property.
     * 
     */
    @Import(name="backupUnitId")
    private @Nullable Output<String> backupUnitId;

    /**
     * @return [string] The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either `public image` or `imageAlias` in conjunction with this property.
     * 
     */
    public Optional<Output<String>> backupUnitId() {
        return Optional.ofNullable(this.backupUnitId);
    }

    /**
     * [string] Determines whether the volume will be used as a boot volume. Set to NONE, the volume will not be used as boot volume. Set to PRIMARY, the volume will be used as boot volume and set to AUTO will delegate the decision to the provisioning engine to decide whether to use the volume as boot volume.
     * Notice that exactly one volume can be set to PRIMARY or all of them set to AUTO.
     * 
     */
    @Import(name="bootOrder", required=true)
    private Output<String> bootOrder;

    /**
     * @return [string] Determines whether the volume will be used as a boot volume. Set to NONE, the volume will not be used as boot volume. Set to PRIMARY, the volume will be used as boot volume and set to AUTO will delegate the decision to the provisioning engine to decide whether to use the volume as boot volume.
     * Notice that exactly one volume can be set to PRIMARY or all of them set to AUTO.
     * 
     */
    public Output<String> bootOrder() {
        return this.bootOrder;
    }

    /**
     * [string] The bus type of the volume. Default setting is `VIRTIO`. The bus type `IDE` is also supported.
     * 
     */
    @Import(name="bus")
    private @Nullable Output<String> bus;

    /**
     * @return [string] The bus type of the volume. Default setting is `VIRTIO`. The bus type `IDE` is also supported.
     * 
     */
    public Optional<Output<String>> bus() {
        return Optional.ofNullable(this.bus);
    }

    /**
     * [string] The image installed on the volume. Only the UUID of the image is presently supported.
     * 
     */
    @Import(name="image")
    private @Nullable Output<String> image;

    /**
     * @return [string] The image installed on the volume. Only the UUID of the image is presently supported.
     * 
     */
    public Optional<Output<String>> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * [string] The image installed on the volume. Must be an `imageAlias` as specified via the images API. Note that one of `image` or `imageAlias` must be set, but not both.
     * 
     */
    @Import(name="imageAlias")
    private @Nullable Output<String> imageAlias;

    /**
     * @return [string] The image installed on the volume. Must be an `imageAlias` as specified via the images API. Note that one of `image` or `imageAlias` must be set, but not both.
     * 
     */
    public Optional<Output<String>> imageAlias() {
        return Optional.ofNullable(this.imageAlias);
    }

    /**
     * [string] Image password for this replica volume.
     * 
     */
    @Import(name="imagePassword")
    private @Nullable Output<String> imagePassword;

    /**
     * @return [string] Image password for this replica volume.
     * 
     */
    public Optional<Output<String>> imagePassword() {
        return Optional.ofNullable(this.imagePassword);
    }

    /**
     * [string] Name for this replica volume.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return [string] Name for this replica volume.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * [int] Name for this replica volume.
     * 
     */
    @Import(name="size", required=true)
    private Output<Integer> size;

    /**
     * @return [int] Name for this replica volume.
     * 
     */
    public Output<Integer> size() {
        return this.size;
    }

    /**
     * List of ssh keys, supports values or paths to files. Cannot be changed at update.
     * 
     */
    @Import(name="sshKeys")
    private @Nullable Output<List<String>> sshKeys;

    /**
     * @return List of ssh keys, supports values or paths to files. Cannot be changed at update.
     * 
     */
    public Optional<Output<List<String>>> sshKeys() {
        return Optional.ofNullable(this.sshKeys);
    }

    /**
     * [string] Storage Type for this replica volume. Possible values: `SSD`, `HDD`, `SSD_STANDARD` or `SSD_PREMIUM`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return [string] Storage Type for this replica volume. Possible values: `SSD`, `HDD`, `SSD_STANDARD` or `SSD_PREMIUM`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * [string] User-data (Cloud Init) for this replica volume. Make sure you provide a Cloud Init compatible image in conjunction with this parameter.
     * 
     */
    @Import(name="userData")
    private @Nullable Output<String> userData;

    /**
     * @return [string] User-data (Cloud Init) for this replica volume. Make sure you provide a Cloud Init compatible image in conjunction with this parameter.
     * 
     */
    public Optional<Output<String>> userData() {
        return Optional.ofNullable(this.userData);
    }

    private AutoscalingGroupReplicaConfigurationVolumeArgs() {}

    private AutoscalingGroupReplicaConfigurationVolumeArgs(AutoscalingGroupReplicaConfigurationVolumeArgs $) {
        this.backupUnitId = $.backupUnitId;
        this.bootOrder = $.bootOrder;
        this.bus = $.bus;
        this.image = $.image;
        this.imageAlias = $.imageAlias;
        this.imagePassword = $.imagePassword;
        this.name = $.name;
        this.size = $.size;
        this.sshKeys = $.sshKeys;
        this.type = $.type;
        this.userData = $.userData;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutoscalingGroupReplicaConfigurationVolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutoscalingGroupReplicaConfigurationVolumeArgs $;

        public Builder() {
            $ = new AutoscalingGroupReplicaConfigurationVolumeArgs();
        }

        public Builder(AutoscalingGroupReplicaConfigurationVolumeArgs defaults) {
            $ = new AutoscalingGroupReplicaConfigurationVolumeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupUnitId [string] The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either `public image` or `imageAlias` in conjunction with this property.
         * 
         * @return builder
         * 
         */
        public Builder backupUnitId(@Nullable Output<String> backupUnitId) {
            $.backupUnitId = backupUnitId;
            return this;
        }

        /**
         * @param backupUnitId [string] The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either `public image` or `imageAlias` in conjunction with this property.
         * 
         * @return builder
         * 
         */
        public Builder backupUnitId(String backupUnitId) {
            return backupUnitId(Output.of(backupUnitId));
        }

        /**
         * @param bootOrder [string] Determines whether the volume will be used as a boot volume. Set to NONE, the volume will not be used as boot volume. Set to PRIMARY, the volume will be used as boot volume and set to AUTO will delegate the decision to the provisioning engine to decide whether to use the volume as boot volume.
         * Notice that exactly one volume can be set to PRIMARY or all of them set to AUTO.
         * 
         * @return builder
         * 
         */
        public Builder bootOrder(Output<String> bootOrder) {
            $.bootOrder = bootOrder;
            return this;
        }

        /**
         * @param bootOrder [string] Determines whether the volume will be used as a boot volume. Set to NONE, the volume will not be used as boot volume. Set to PRIMARY, the volume will be used as boot volume and set to AUTO will delegate the decision to the provisioning engine to decide whether to use the volume as boot volume.
         * Notice that exactly one volume can be set to PRIMARY or all of them set to AUTO.
         * 
         * @return builder
         * 
         */
        public Builder bootOrder(String bootOrder) {
            return bootOrder(Output.of(bootOrder));
        }

        /**
         * @param bus [string] The bus type of the volume. Default setting is `VIRTIO`. The bus type `IDE` is also supported.
         * 
         * @return builder
         * 
         */
        public Builder bus(@Nullable Output<String> bus) {
            $.bus = bus;
            return this;
        }

        /**
         * @param bus [string] The bus type of the volume. Default setting is `VIRTIO`. The bus type `IDE` is also supported.
         * 
         * @return builder
         * 
         */
        public Builder bus(String bus) {
            return bus(Output.of(bus));
        }

        /**
         * @param image [string] The image installed on the volume. Only the UUID of the image is presently supported.
         * 
         * @return builder
         * 
         */
        public Builder image(@Nullable Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image [string] The image installed on the volume. Only the UUID of the image is presently supported.
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param imageAlias [string] The image installed on the volume. Must be an `imageAlias` as specified via the images API. Note that one of `image` or `imageAlias` must be set, but not both.
         * 
         * @return builder
         * 
         */
        public Builder imageAlias(@Nullable Output<String> imageAlias) {
            $.imageAlias = imageAlias;
            return this;
        }

        /**
         * @param imageAlias [string] The image installed on the volume. Must be an `imageAlias` as specified via the images API. Note that one of `image` or `imageAlias` must be set, but not both.
         * 
         * @return builder
         * 
         */
        public Builder imageAlias(String imageAlias) {
            return imageAlias(Output.of(imageAlias));
        }

        /**
         * @param imagePassword [string] Image password for this replica volume.
         * 
         * @return builder
         * 
         */
        public Builder imagePassword(@Nullable Output<String> imagePassword) {
            $.imagePassword = imagePassword;
            return this;
        }

        /**
         * @param imagePassword [string] Image password for this replica volume.
         * 
         * @return builder
         * 
         */
        public Builder imagePassword(String imagePassword) {
            return imagePassword(Output.of(imagePassword));
        }

        /**
         * @param name [string] Name for this replica volume.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [string] Name for this replica volume.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param size [int] Name for this replica volume.
         * 
         * @return builder
         * 
         */
        public Builder size(Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size [int] Name for this replica volume.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param sshKeys List of ssh keys, supports values or paths to files. Cannot be changed at update.
         * 
         * @return builder
         * 
         */
        public Builder sshKeys(@Nullable Output<List<String>> sshKeys) {
            $.sshKeys = sshKeys;
            return this;
        }

        /**
         * @param sshKeys List of ssh keys, supports values or paths to files. Cannot be changed at update.
         * 
         * @return builder
         * 
         */
        public Builder sshKeys(List<String> sshKeys) {
            return sshKeys(Output.of(sshKeys));
        }

        /**
         * @param sshKeys List of ssh keys, supports values or paths to files. Cannot be changed at update.
         * 
         * @return builder
         * 
         */
        public Builder sshKeys(String... sshKeys) {
            return sshKeys(List.of(sshKeys));
        }

        /**
         * @param type [string] Storage Type for this replica volume. Possible values: `SSD`, `HDD`, `SSD_STANDARD` or `SSD_PREMIUM`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type [string] Storage Type for this replica volume. Possible values: `SSD`, `HDD`, `SSD_STANDARD` or `SSD_PREMIUM`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param userData [string] User-data (Cloud Init) for this replica volume. Make sure you provide a Cloud Init compatible image in conjunction with this parameter.
         * 
         * @return builder
         * 
         */
        public Builder userData(@Nullable Output<String> userData) {
            $.userData = userData;
            return this;
        }

        /**
         * @param userData [string] User-data (Cloud Init) for this replica volume. Make sure you provide a Cloud Init compatible image in conjunction with this parameter.
         * 
         * @return builder
         * 
         */
        public Builder userData(String userData) {
            return userData(Output.of(userData));
        }

        public AutoscalingGroupReplicaConfigurationVolumeArgs build() {
            if ($.bootOrder == null) {
                throw new MissingRequiredPropertyException("AutoscalingGroupReplicaConfigurationVolumeArgs", "bootOrder");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("AutoscalingGroupReplicaConfigurationVolumeArgs", "name");
            }
            if ($.size == null) {
                throw new MissingRequiredPropertyException("AutoscalingGroupReplicaConfigurationVolumeArgs", "size");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("AutoscalingGroupReplicaConfigurationVolumeArgs", "type");
            }
            return $;
        }
    }

}
