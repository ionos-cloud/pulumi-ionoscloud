// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.ionoscloud.Utilities;
import com.pulumi.ionoscloud.compute.CrossconnectArgs;
import com.pulumi.ionoscloud.compute.inputs.CrossconnectState;
import com.pulumi.ionoscloud.compute.outputs.CrossconnectConnectableDatacenter;
import com.pulumi.ionoscloud.compute.outputs.CrossconnectPeer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a **Cross Connect** on IonosCloud.
 * Cross Connect allows you to connect virtual data centers (VDC) with each other using a private LAN.
 * The VDCs to be connected need to belong to the same IONOS Cloud contract and location.
 * You can only use private LANs for a Cross Connect connection. A LAN can only be a part of one Cross Connect.
 * 
 * The IP addresses of the NICs used for the Cross Connect connection may not be used in more than one NIC and they need to belong to the same IP range.
 * 
 * ## Example Usage
 * 
 * To connect two datacenters we need 2 lans defined, one in each datacenter. After, we reference the cross-connect through which we want the connection to be established.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.ionoscloud.compute.Crossconnect;
 * import com.pulumi.ionoscloud.compute.CrossconnectArgs;
 * import com.pulumi.ionoscloud.compute.Datacenter;
 * import com.pulumi.ionoscloud.compute.DatacenterArgs;
 * import com.pulumi.ionoscloud.compute.Lan;
 * import com.pulumi.ionoscloud.compute.LanArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var crossConnectTestResource = new Crossconnect("crossConnectTestResource", CrossconnectArgs.builder()
 *             .name("CrossConnectTestResource")
 *             .description("CrossConnectTestResource")
 *             .build());
 * 
 *         var dc1 = new Datacenter("dc1", DatacenterArgs.builder()
 *             .location("de/txl")
 *             .name("dc1")
 *             .build());
 * 
 *         var dc2 = new Datacenter("dc2", DatacenterArgs.builder()
 *             .location("de/txl")
 *             .name("dc2")
 *             .build());
 * 
 *         var dc1lan = new Lan("dc1lan", LanArgs.builder()
 *             .datacenterId(dc1.id())
 *             .public_(false)
 *             .name("dc1lan")
 *             .pcc(crossConnectTestResource.id())
 *             .build());
 * 
 *         var dc2lan = new Lan("dc2lan", LanArgs.builder()
 *             .datacenterId(dc2.id())
 *             .public_(false)
 *             .name("dc2lan")
 *             .pcc(crossConnectTestResource.id())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * A Cross Connect resource can be imported using its `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import ionoscloud:compute/crossconnect:Crossconnect demo ionoscloud_private_crossconnect_uuid
 * ```
 * 
 * This can be helpful when you want to import cross-connects which you have already created manually or using other means, outside of terraform.
 * 
 */
@ResourceType(type="ionoscloud:compute/crossconnect:Crossconnect")
public class Crossconnect extends com.pulumi.resources.CustomResource {
    /**
     * A list containing all the connectable datacenters
     * 
     */
    @Export(name="connectableDatacenters", refs={List.class,CrossconnectConnectableDatacenter.class}, tree="[0,1]")
    private Output<List<CrossconnectConnectableDatacenter>> connectableDatacenters;

    /**
     * @return A list containing all the connectable datacenters
     * 
     */
    public Output<List<CrossconnectConnectableDatacenter>> connectableDatacenters() {
        return this.connectableDatacenters;
    }
    /**
     * [string] A short description for the cross-connection.
     * - `connectable datacenters` - (Computed) A list containing all the connectable datacenters
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return [string] A short description for the cross-connection.
     * - `connectable datacenters` - (Computed) A list containing all the connectable datacenters
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * [string] The name of the cross-connection.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return [string] The name of the cross-connection.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Lists LAN&#39;s joined to this cross connect
     * 
     */
    @Export(name="peers", refs={List.class,CrossconnectPeer.class}, tree="[0,1]")
    private Output<List<CrossconnectPeer>> peers;

    /**
     * @return Lists LAN&#39;s joined to this cross connect
     * 
     */
    public Output<List<CrossconnectPeer>> peers() {
        return this.peers;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Crossconnect(java.lang.String name) {
        this(name, CrossconnectArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Crossconnect(java.lang.String name, @Nullable CrossconnectArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Crossconnect(java.lang.String name, @Nullable CrossconnectArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("ionoscloud:compute/crossconnect:Crossconnect", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Crossconnect(java.lang.String name, Output<java.lang.String> id, @Nullable CrossconnectState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("ionoscloud:compute/crossconnect:Crossconnect", name, state, makeResourceOptions(options, id), false);
    }

    private static CrossconnectArgs makeArgs(@Nullable CrossconnectArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? CrossconnectArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Crossconnect get(java.lang.String name, Output<java.lang.String> id, @Nullable CrossconnectState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Crossconnect(name, id, state, options);
    }
}
