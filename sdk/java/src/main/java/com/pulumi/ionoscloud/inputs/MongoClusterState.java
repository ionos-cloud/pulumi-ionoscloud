// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.ionoscloud.inputs.MongoClusterBackupArgs;
import com.pulumi.ionoscloud.inputs.MongoClusterBiConnectorArgs;
import com.pulumi.ionoscloud.inputs.MongoClusterConnectionsArgs;
import com.pulumi.ionoscloud.inputs.MongoClusterMaintenanceWindowArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MongoClusterState extends com.pulumi.resources.ResourceArgs {

    public static final MongoClusterState Empty = new MongoClusterState();

    /**
     * Backup related properties.
     * 
     */
    @Import(name="backup")
    private @Nullable Output<MongoClusterBackupArgs> backup;

    /**
     * @return Backup related properties.
     * 
     */
    public Optional<Output<MongoClusterBackupArgs>> backup() {
        return Optional.ofNullable(this.backup);
    }

    /**
     * The MongoDB Connector for Business Intelligence allows you to query a MongoDB database using SQL commands to aid in data
     * analysis.
     * 
     */
    @Import(name="biConnector")
    private @Nullable Output<MongoClusterBiConnectorArgs> biConnector;

    /**
     * @return The MongoDB Connector for Business Intelligence allows you to query a MongoDB database using SQL commands to aid in data
     * analysis.
     * 
     */
    public Optional<Output<MongoClusterBiConnectorArgs>> biConnector() {
        return Optional.ofNullable(this.biConnector);
    }

    /**
     * The connection string for your cluster.
     * 
     */
    @Import(name="connectionString")
    private @Nullable Output<String> connectionString;

    /**
     * @return The connection string for your cluster.
     * 
     */
    public Optional<Output<String>> connectionString() {
        return Optional.ofNullable(this.connectionString);
    }

    /**
     * Details about the network connection for your cluster.
     * 
     */
    @Import(name="connections")
    private @Nullable Output<MongoClusterConnectionsArgs> connections;

    /**
     * @return Details about the network connection for your cluster.
     * 
     */
    public Optional<Output<MongoClusterConnectionsArgs>> connections() {
        return Optional.ofNullable(this.connections);
    }

    /**
     * The number of CPU cores per instance.
     * 
     */
    @Import(name="cores")
    private @Nullable Output<Integer> cores;

    /**
     * @return The number of CPU cores per instance.
     * 
     */
    public Optional<Output<Integer>> cores() {
        return Optional.ofNullable(this.cores);
    }

    /**
     * The name of your cluster.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The name of your cluster.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The cluster edition. Must be one of: playground, business, enterprise
     * 
     */
    @Import(name="edition")
    private @Nullable Output<String> edition;

    /**
     * @return The cluster edition. Must be one of: playground, business, enterprise
     * 
     */
    public Optional<Output<String>> edition() {
        return Optional.ofNullable(this.edition);
    }

    /**
     * The total number of instances in the cluster (one master and n-1 standbys). Example: 1, 3, 5, 7. For enterprise edition
     * at least 3.
     * 
     */
    @Import(name="instances")
    private @Nullable Output<Integer> instances;

    /**
     * @return The total number of instances in the cluster (one master and n-1 standbys). Example: 1, 3, 5, 7. For enterprise edition
     * at least 3.
     * 
     */
    public Optional<Output<Integer>> instances() {
        return Optional.ofNullable(this.instances);
    }

    /**
     * The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
     * be modified after datacenter creation (disallowed in update requests). Available locations: de/txl, gb/lhr, es/vit.
     * Update forces cluster re-creation.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
     * be modified after datacenter creation (disallowed in update requests). Available locations: de/txl, gb/lhr, es/vit.
     * Update forces cluster re-creation.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * A weekly 4 hour-long window, during which maintenance might occur
     * 
     */
    @Import(name="maintenanceWindow")
    private @Nullable Output<MongoClusterMaintenanceWindowArgs> maintenanceWindow;

    /**
     * @return A weekly 4 hour-long window, during which maintenance might occur
     * 
     */
    public Optional<Output<MongoClusterMaintenanceWindowArgs>> maintenanceWindow() {
        return Optional.ofNullable(this.maintenanceWindow);
    }

    /**
     * The MongoDB version of your cluster. Update forces cluster re-creation.
     * 
     */
    @Import(name="mongodbVersion")
    private @Nullable Output<String> mongodbVersion;

    /**
     * @return The MongoDB version of your cluster. Update forces cluster re-creation.
     * 
     */
    public Optional<Output<String>> mongodbVersion() {
        return Optional.ofNullable(this.mongodbVersion);
    }

    /**
     * The amount of memory per instance in megabytes. Multiple of 1024
     * 
     */
    @Import(name="ram")
    private @Nullable Output<Integer> ram;

    /**
     * @return The amount of memory per instance in megabytes. Multiple of 1024
     * 
     */
    public Optional<Output<Integer>> ram() {
        return Optional.ofNullable(this.ram);
    }

    /**
     * The total number of shards in the cluster.
     * 
     */
    @Import(name="shards")
    private @Nullable Output<Integer> shards;

    /**
     * @return The total number of shards in the cluster.
     * 
     */
    public Optional<Output<Integer>> shards() {
        return Optional.ofNullable(this.shards);
    }

    /**
     * The amount of storage per instance in megabytes. At least 5120, at most 2097152
     * 
     */
    @Import(name="storageSize")
    private @Nullable Output<Integer> storageSize;

    /**
     * @return The amount of storage per instance in megabytes. At least 5120, at most 2097152
     * 
     */
    public Optional<Output<Integer>> storageSize() {
        return Optional.ofNullable(this.storageSize);
    }

    /**
     * The storage type. One of : HDD, SSD, SSD Standard, SSD Premium
     * 
     */
    @Import(name="storageType")
    private @Nullable Output<String> storageType;

    /**
     * @return The storage type. One of : HDD, SSD, SSD Standard, SSD Premium
     * 
     */
    public Optional<Output<String>> storageType() {
        return Optional.ofNullable(this.storageType);
    }

    /**
     * The unique ID of the template, which specifies the number of cores, storage size, and memory. You cannot downgrade to a
     * smaller template or minor edition (e.g. from business to playground). To get a list of all templates to confirm the
     * changes use the /templates endpoint.
     * 
     */
    @Import(name="templateId")
    private @Nullable Output<String> templateId;

    /**
     * @return The unique ID of the template, which specifies the number of cores, storage size, and memory. You cannot downgrade to a
     * smaller template or minor edition (e.g. from business to playground). To get a list of all templates to confirm the
     * changes use the /templates endpoint.
     * 
     */
    public Optional<Output<String>> templateId() {
        return Optional.ofNullable(this.templateId);
    }

    /**
     * The cluster type, either `replicaset` or `sharded-cluster`
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The cluster type, either `replicaset` or `sharded-cluster`
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private MongoClusterState() {}

    private MongoClusterState(MongoClusterState $) {
        this.backup = $.backup;
        this.biConnector = $.biConnector;
        this.connectionString = $.connectionString;
        this.connections = $.connections;
        this.cores = $.cores;
        this.displayName = $.displayName;
        this.edition = $.edition;
        this.instances = $.instances;
        this.location = $.location;
        this.maintenanceWindow = $.maintenanceWindow;
        this.mongodbVersion = $.mongodbVersion;
        this.ram = $.ram;
        this.shards = $.shards;
        this.storageSize = $.storageSize;
        this.storageType = $.storageType;
        this.templateId = $.templateId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MongoClusterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MongoClusterState $;

        public Builder() {
            $ = new MongoClusterState();
        }

        public Builder(MongoClusterState defaults) {
            $ = new MongoClusterState(Objects.requireNonNull(defaults));
        }

        /**
         * @param backup Backup related properties.
         * 
         * @return builder
         * 
         */
        public Builder backup(@Nullable Output<MongoClusterBackupArgs> backup) {
            $.backup = backup;
            return this;
        }

        /**
         * @param backup Backup related properties.
         * 
         * @return builder
         * 
         */
        public Builder backup(MongoClusterBackupArgs backup) {
            return backup(Output.of(backup));
        }

        /**
         * @param biConnector The MongoDB Connector for Business Intelligence allows you to query a MongoDB database using SQL commands to aid in data
         * analysis.
         * 
         * @return builder
         * 
         */
        public Builder biConnector(@Nullable Output<MongoClusterBiConnectorArgs> biConnector) {
            $.biConnector = biConnector;
            return this;
        }

        /**
         * @param biConnector The MongoDB Connector for Business Intelligence allows you to query a MongoDB database using SQL commands to aid in data
         * analysis.
         * 
         * @return builder
         * 
         */
        public Builder biConnector(MongoClusterBiConnectorArgs biConnector) {
            return biConnector(Output.of(biConnector));
        }

        /**
         * @param connectionString The connection string for your cluster.
         * 
         * @return builder
         * 
         */
        public Builder connectionString(@Nullable Output<String> connectionString) {
            $.connectionString = connectionString;
            return this;
        }

        /**
         * @param connectionString The connection string for your cluster.
         * 
         * @return builder
         * 
         */
        public Builder connectionString(String connectionString) {
            return connectionString(Output.of(connectionString));
        }

        /**
         * @param connections Details about the network connection for your cluster.
         * 
         * @return builder
         * 
         */
        public Builder connections(@Nullable Output<MongoClusterConnectionsArgs> connections) {
            $.connections = connections;
            return this;
        }

        /**
         * @param connections Details about the network connection for your cluster.
         * 
         * @return builder
         * 
         */
        public Builder connections(MongoClusterConnectionsArgs connections) {
            return connections(Output.of(connections));
        }

        /**
         * @param cores The number of CPU cores per instance.
         * 
         * @return builder
         * 
         */
        public Builder cores(@Nullable Output<Integer> cores) {
            $.cores = cores;
            return this;
        }

        /**
         * @param cores The number of CPU cores per instance.
         * 
         * @return builder
         * 
         */
        public Builder cores(Integer cores) {
            return cores(Output.of(cores));
        }

        /**
         * @param displayName The name of your cluster.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The name of your cluster.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param edition The cluster edition. Must be one of: playground, business, enterprise
         * 
         * @return builder
         * 
         */
        public Builder edition(@Nullable Output<String> edition) {
            $.edition = edition;
            return this;
        }

        /**
         * @param edition The cluster edition. Must be one of: playground, business, enterprise
         * 
         * @return builder
         * 
         */
        public Builder edition(String edition) {
            return edition(Output.of(edition));
        }

        /**
         * @param instances The total number of instances in the cluster (one master and n-1 standbys). Example: 1, 3, 5, 7. For enterprise edition
         * at least 3.
         * 
         * @return builder
         * 
         */
        public Builder instances(@Nullable Output<Integer> instances) {
            $.instances = instances;
            return this;
        }

        /**
         * @param instances The total number of instances in the cluster (one master and n-1 standbys). Example: 1, 3, 5, 7. For enterprise edition
         * at least 3.
         * 
         * @return builder
         * 
         */
        public Builder instances(Integer instances) {
            return instances(Output.of(instances));
        }

        /**
         * @param location The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
         * be modified after datacenter creation (disallowed in update requests). Available locations: de/txl, gb/lhr, es/vit.
         * Update forces cluster re-creation.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
         * be modified after datacenter creation (disallowed in update requests). Available locations: de/txl, gb/lhr, es/vit.
         * Update forces cluster re-creation.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param maintenanceWindow A weekly 4 hour-long window, during which maintenance might occur
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindow(@Nullable Output<MongoClusterMaintenanceWindowArgs> maintenanceWindow) {
            $.maintenanceWindow = maintenanceWindow;
            return this;
        }

        /**
         * @param maintenanceWindow A weekly 4 hour-long window, during which maintenance might occur
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindow(MongoClusterMaintenanceWindowArgs maintenanceWindow) {
            return maintenanceWindow(Output.of(maintenanceWindow));
        }

        /**
         * @param mongodbVersion The MongoDB version of your cluster. Update forces cluster re-creation.
         * 
         * @return builder
         * 
         */
        public Builder mongodbVersion(@Nullable Output<String> mongodbVersion) {
            $.mongodbVersion = mongodbVersion;
            return this;
        }

        /**
         * @param mongodbVersion The MongoDB version of your cluster. Update forces cluster re-creation.
         * 
         * @return builder
         * 
         */
        public Builder mongodbVersion(String mongodbVersion) {
            return mongodbVersion(Output.of(mongodbVersion));
        }

        /**
         * @param ram The amount of memory per instance in megabytes. Multiple of 1024
         * 
         * @return builder
         * 
         */
        public Builder ram(@Nullable Output<Integer> ram) {
            $.ram = ram;
            return this;
        }

        /**
         * @param ram The amount of memory per instance in megabytes. Multiple of 1024
         * 
         * @return builder
         * 
         */
        public Builder ram(Integer ram) {
            return ram(Output.of(ram));
        }

        /**
         * @param shards The total number of shards in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder shards(@Nullable Output<Integer> shards) {
            $.shards = shards;
            return this;
        }

        /**
         * @param shards The total number of shards in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder shards(Integer shards) {
            return shards(Output.of(shards));
        }

        /**
         * @param storageSize The amount of storage per instance in megabytes. At least 5120, at most 2097152
         * 
         * @return builder
         * 
         */
        public Builder storageSize(@Nullable Output<Integer> storageSize) {
            $.storageSize = storageSize;
            return this;
        }

        /**
         * @param storageSize The amount of storage per instance in megabytes. At least 5120, at most 2097152
         * 
         * @return builder
         * 
         */
        public Builder storageSize(Integer storageSize) {
            return storageSize(Output.of(storageSize));
        }

        /**
         * @param storageType The storage type. One of : HDD, SSD, SSD Standard, SSD Premium
         * 
         * @return builder
         * 
         */
        public Builder storageType(@Nullable Output<String> storageType) {
            $.storageType = storageType;
            return this;
        }

        /**
         * @param storageType The storage type. One of : HDD, SSD, SSD Standard, SSD Premium
         * 
         * @return builder
         * 
         */
        public Builder storageType(String storageType) {
            return storageType(Output.of(storageType));
        }

        /**
         * @param templateId The unique ID of the template, which specifies the number of cores, storage size, and memory. You cannot downgrade to a
         * smaller template or minor edition (e.g. from business to playground). To get a list of all templates to confirm the
         * changes use the /templates endpoint.
         * 
         * @return builder
         * 
         */
        public Builder templateId(@Nullable Output<String> templateId) {
            $.templateId = templateId;
            return this;
        }

        /**
         * @param templateId The unique ID of the template, which specifies the number of cores, storage size, and memory. You cannot downgrade to a
         * smaller template or minor edition (e.g. from business to playground). To get a list of all templates to confirm the
         * changes use the /templates endpoint.
         * 
         * @return builder
         * 
         */
        public Builder templateId(String templateId) {
            return templateId(Output.of(templateId));
        }

        /**
         * @param type The cluster type, either `replicaset` or `sharded-cluster`
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The cluster type, either `replicaset` or `sharded-cluster`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public MongoClusterState build() {
            return $;
        }
    }

}
