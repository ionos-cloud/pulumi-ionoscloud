// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.ionoscloud.inputs.PgClusterConnectionPoolerArgs;
import com.pulumi.ionoscloud.inputs.PgClusterConnectionsArgs;
import com.pulumi.ionoscloud.inputs.PgClusterCredentialsArgs;
import com.pulumi.ionoscloud.inputs.PgClusterFromBackupArgs;
import com.pulumi.ionoscloud.inputs.PgClusterMaintenanceWindowArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PgClusterState extends com.pulumi.resources.ResourceArgs {

    public static final PgClusterState Empty = new PgClusterState();

    /**
     * The S3 location where the backups will be stored.
     * 
     */
    @Import(name="backupLocation")
    private @Nullable Output<String> backupLocation;

    /**
     * @return The S3 location where the backups will be stored.
     * 
     */
    public Optional<Output<String>> backupLocation() {
        return Optional.ofNullable(this.backupLocation);
    }

    /**
     * Configuration options for the connection pooler
     * 
     */
    @Import(name="connectionPooler")
    private @Nullable Output<PgClusterConnectionPoolerArgs> connectionPooler;

    /**
     * @return Configuration options for the connection pooler
     * 
     */
    public Optional<Output<PgClusterConnectionPoolerArgs>> connectionPooler() {
        return Optional.ofNullable(this.connectionPooler);
    }

    /**
     * Details about the network connection for your cluster.
     * 
     */
    @Import(name="connections")
    private @Nullable Output<PgClusterConnectionsArgs> connections;

    /**
     * @return Details about the network connection for your cluster.
     * 
     */
    public Optional<Output<PgClusterConnectionsArgs>> connections() {
        return Optional.ofNullable(this.connections);
    }

    /**
     * The number of CPU cores per replica.
     * 
     */
    @Import(name="cores")
    private @Nullable Output<Integer> cores;

    /**
     * @return The number of CPU cores per replica.
     * 
     */
    public Optional<Output<Integer>> cores() {
        return Optional.ofNullable(this.cores);
    }

    /**
     * Credentials for the database user to be created.
     * 
     */
    @Import(name="credentials")
    private @Nullable Output<PgClusterCredentialsArgs> credentials;

    /**
     * @return Credentials for the database user to be created.
     * 
     */
    public Optional<Output<PgClusterCredentialsArgs>> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    /**
     * The friendly name of your cluster.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The friendly name of your cluster.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The DNS name pointing to your cluster
     * 
     */
    @Import(name="dnsName")
    private @Nullable Output<String> dnsName;

    /**
     * @return The DNS name pointing to your cluster
     * 
     */
    public Optional<Output<String>> dnsName() {
        return Optional.ofNullable(this.dnsName);
    }

    /**
     * Creates the cluster based on the existing backup.
     * 
     */
    @Import(name="fromBackup")
    private @Nullable Output<PgClusterFromBackupArgs> fromBackup;

    /**
     * @return Creates the cluster based on the existing backup.
     * 
     */
    public Optional<Output<PgClusterFromBackupArgs>> fromBackup() {
        return Optional.ofNullable(this.fromBackup);
    }

    /**
     * The total number of instances in the cluster (one master and n-1 standbys)
     * 
     */
    @Import(name="instances")
    private @Nullable Output<Integer> instances;

    /**
     * @return The total number of instances in the cluster (one master and n-1 standbys)
     * 
     */
    public Optional<Output<Integer>> instances() {
        return Optional.ofNullable(this.instances);
    }

    /**
     * The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
     * be modified after datacenter creation (disallowed in update requests)
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
     * be modified after datacenter creation (disallowed in update requests)
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * a weekly 4 hour-long window, during which maintenance might occur
     * 
     */
    @Import(name="maintenanceWindow")
    private @Nullable Output<PgClusterMaintenanceWindowArgs> maintenanceWindow;

    /**
     * @return a weekly 4 hour-long window, during which maintenance might occur
     * 
     */
    public Optional<Output<PgClusterMaintenanceWindowArgs>> maintenanceWindow() {
        return Optional.ofNullable(this.maintenanceWindow);
    }

    /**
     * The PostgreSQL version of your cluster.
     * 
     */
    @Import(name="postgresVersion")
    private @Nullable Output<String> postgresVersion;

    /**
     * @return The PostgreSQL version of your cluster.
     * 
     */
    public Optional<Output<String>> postgresVersion() {
        return Optional.ofNullable(this.postgresVersion);
    }

    /**
     * The amount of memory per instance in megabytes. Has to be a multiple of 1024.
     * 
     */
    @Import(name="ram")
    private @Nullable Output<Integer> ram;

    /**
     * @return The amount of memory per instance in megabytes. Has to be a multiple of 1024.
     * 
     */
    public Optional<Output<Integer>> ram() {
        return Optional.ofNullable(this.ram);
    }

    /**
     * The amount of storage per instance in megabytes. Has to be a multiple of 2048.
     * 
     */
    @Import(name="storageSize")
    private @Nullable Output<Integer> storageSize;

    /**
     * @return The amount of storage per instance in megabytes. Has to be a multiple of 2048.
     * 
     */
    public Optional<Output<Integer>> storageSize() {
        return Optional.ofNullable(this.storageSize);
    }

    /**
     * The storage type used in your cluster.
     * 
     */
    @Import(name="storageType")
    private @Nullable Output<String> storageType;

    /**
     * @return The storage type used in your cluster.
     * 
     */
    public Optional<Output<String>> storageType() {
        return Optional.ofNullable(this.storageType);
    }

    /**
     * Represents different modes of replication.
     * 
     */
    @Import(name="synchronizationMode")
    private @Nullable Output<String> synchronizationMode;

    /**
     * @return Represents different modes of replication.
     * 
     */
    public Optional<Output<String>> synchronizationMode() {
        return Optional.ofNullable(this.synchronizationMode);
    }

    private PgClusterState() {}

    private PgClusterState(PgClusterState $) {
        this.backupLocation = $.backupLocation;
        this.connectionPooler = $.connectionPooler;
        this.connections = $.connections;
        this.cores = $.cores;
        this.credentials = $.credentials;
        this.displayName = $.displayName;
        this.dnsName = $.dnsName;
        this.fromBackup = $.fromBackup;
        this.instances = $.instances;
        this.location = $.location;
        this.maintenanceWindow = $.maintenanceWindow;
        this.postgresVersion = $.postgresVersion;
        this.ram = $.ram;
        this.storageSize = $.storageSize;
        this.storageType = $.storageType;
        this.synchronizationMode = $.synchronizationMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PgClusterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PgClusterState $;

        public Builder() {
            $ = new PgClusterState();
        }

        public Builder(PgClusterState defaults) {
            $ = new PgClusterState(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupLocation The S3 location where the backups will be stored.
         * 
         * @return builder
         * 
         */
        public Builder backupLocation(@Nullable Output<String> backupLocation) {
            $.backupLocation = backupLocation;
            return this;
        }

        /**
         * @param backupLocation The S3 location where the backups will be stored.
         * 
         * @return builder
         * 
         */
        public Builder backupLocation(String backupLocation) {
            return backupLocation(Output.of(backupLocation));
        }

        /**
         * @param connectionPooler Configuration options for the connection pooler
         * 
         * @return builder
         * 
         */
        public Builder connectionPooler(@Nullable Output<PgClusterConnectionPoolerArgs> connectionPooler) {
            $.connectionPooler = connectionPooler;
            return this;
        }

        /**
         * @param connectionPooler Configuration options for the connection pooler
         * 
         * @return builder
         * 
         */
        public Builder connectionPooler(PgClusterConnectionPoolerArgs connectionPooler) {
            return connectionPooler(Output.of(connectionPooler));
        }

        /**
         * @param connections Details about the network connection for your cluster.
         * 
         * @return builder
         * 
         */
        public Builder connections(@Nullable Output<PgClusterConnectionsArgs> connections) {
            $.connections = connections;
            return this;
        }

        /**
         * @param connections Details about the network connection for your cluster.
         * 
         * @return builder
         * 
         */
        public Builder connections(PgClusterConnectionsArgs connections) {
            return connections(Output.of(connections));
        }

        /**
         * @param cores The number of CPU cores per replica.
         * 
         * @return builder
         * 
         */
        public Builder cores(@Nullable Output<Integer> cores) {
            $.cores = cores;
            return this;
        }

        /**
         * @param cores The number of CPU cores per replica.
         * 
         * @return builder
         * 
         */
        public Builder cores(Integer cores) {
            return cores(Output.of(cores));
        }

        /**
         * @param credentials Credentials for the database user to be created.
         * 
         * @return builder
         * 
         */
        public Builder credentials(@Nullable Output<PgClusterCredentialsArgs> credentials) {
            $.credentials = credentials;
            return this;
        }

        /**
         * @param credentials Credentials for the database user to be created.
         * 
         * @return builder
         * 
         */
        public Builder credentials(PgClusterCredentialsArgs credentials) {
            return credentials(Output.of(credentials));
        }

        /**
         * @param displayName The friendly name of your cluster.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The friendly name of your cluster.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param dnsName The DNS name pointing to your cluster
         * 
         * @return builder
         * 
         */
        public Builder dnsName(@Nullable Output<String> dnsName) {
            $.dnsName = dnsName;
            return this;
        }

        /**
         * @param dnsName The DNS name pointing to your cluster
         * 
         * @return builder
         * 
         */
        public Builder dnsName(String dnsName) {
            return dnsName(Output.of(dnsName));
        }

        /**
         * @param fromBackup Creates the cluster based on the existing backup.
         * 
         * @return builder
         * 
         */
        public Builder fromBackup(@Nullable Output<PgClusterFromBackupArgs> fromBackup) {
            $.fromBackup = fromBackup;
            return this;
        }

        /**
         * @param fromBackup Creates the cluster based on the existing backup.
         * 
         * @return builder
         * 
         */
        public Builder fromBackup(PgClusterFromBackupArgs fromBackup) {
            return fromBackup(Output.of(fromBackup));
        }

        /**
         * @param instances The total number of instances in the cluster (one master and n-1 standbys)
         * 
         * @return builder
         * 
         */
        public Builder instances(@Nullable Output<Integer> instances) {
            $.instances = instances;
            return this;
        }

        /**
         * @param instances The total number of instances in the cluster (one master and n-1 standbys)
         * 
         * @return builder
         * 
         */
        public Builder instances(Integer instances) {
            return instances(Output.of(instances));
        }

        /**
         * @param location The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
         * be modified after datacenter creation (disallowed in update requests)
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
         * be modified after datacenter creation (disallowed in update requests)
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param maintenanceWindow a weekly 4 hour-long window, during which maintenance might occur
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindow(@Nullable Output<PgClusterMaintenanceWindowArgs> maintenanceWindow) {
            $.maintenanceWindow = maintenanceWindow;
            return this;
        }

        /**
         * @param maintenanceWindow a weekly 4 hour-long window, during which maintenance might occur
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindow(PgClusterMaintenanceWindowArgs maintenanceWindow) {
            return maintenanceWindow(Output.of(maintenanceWindow));
        }

        /**
         * @param postgresVersion The PostgreSQL version of your cluster.
         * 
         * @return builder
         * 
         */
        public Builder postgresVersion(@Nullable Output<String> postgresVersion) {
            $.postgresVersion = postgresVersion;
            return this;
        }

        /**
         * @param postgresVersion The PostgreSQL version of your cluster.
         * 
         * @return builder
         * 
         */
        public Builder postgresVersion(String postgresVersion) {
            return postgresVersion(Output.of(postgresVersion));
        }

        /**
         * @param ram The amount of memory per instance in megabytes. Has to be a multiple of 1024.
         * 
         * @return builder
         * 
         */
        public Builder ram(@Nullable Output<Integer> ram) {
            $.ram = ram;
            return this;
        }

        /**
         * @param ram The amount of memory per instance in megabytes. Has to be a multiple of 1024.
         * 
         * @return builder
         * 
         */
        public Builder ram(Integer ram) {
            return ram(Output.of(ram));
        }

        /**
         * @param storageSize The amount of storage per instance in megabytes. Has to be a multiple of 2048.
         * 
         * @return builder
         * 
         */
        public Builder storageSize(@Nullable Output<Integer> storageSize) {
            $.storageSize = storageSize;
            return this;
        }

        /**
         * @param storageSize The amount of storage per instance in megabytes. Has to be a multiple of 2048.
         * 
         * @return builder
         * 
         */
        public Builder storageSize(Integer storageSize) {
            return storageSize(Output.of(storageSize));
        }

        /**
         * @param storageType The storage type used in your cluster.
         * 
         * @return builder
         * 
         */
        public Builder storageType(@Nullable Output<String> storageType) {
            $.storageType = storageType;
            return this;
        }

        /**
         * @param storageType The storage type used in your cluster.
         * 
         * @return builder
         * 
         */
        public Builder storageType(String storageType) {
            return storageType(Output.of(storageType));
        }

        /**
         * @param synchronizationMode Represents different modes of replication.
         * 
         * @return builder
         * 
         */
        public Builder synchronizationMode(@Nullable Output<String> synchronizationMode) {
            $.synchronizationMode = synchronizationMode;
            return this;
        }

        /**
         * @param synchronizationMode Represents different modes of replication.
         * 
         * @return builder
         * 
         */
        public Builder synchronizationMode(String synchronizationMode) {
            return synchronizationMode(Output.of(synchronizationMode));
        }

        public PgClusterState build() {
            return $;
        }
    }

}
