// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.ionoscloud.CubeServerArgs;
import com.pulumi.ionoscloud.Utilities;
import com.pulumi.ionoscloud.inputs.CubeServerState;
import com.pulumi.ionoscloud.outputs.CubeServerNic;
import com.pulumi.ionoscloud.outputs.CubeServerVolume;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * Manages a **Cube Server** on IonosCloud.
 * 
 * ## Example Usage
 * 
 * This resource will create an operational server. After this section completes, the provisioner can be called.
 * 
 * ### CUBE Server
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.ionoscloud.IonoscloudFunctions;
 * import com.pulumi.ionoscloud.inputs.GetTemplateArgs;
 * import com.pulumi.ionoscloud.compute.Datacenter;
 * import com.pulumi.ionoscloud.compute.DatacenterArgs;
 * import com.pulumi.ionoscloud.Lan;
 * import com.pulumi.ionoscloud.LanArgs;
 * import com.pulumi.random.RandomPassword;
 * import com.pulumi.random.RandomPasswordArgs;
 * import com.pulumi.ionoscloud.CubeServer;
 * import com.pulumi.ionoscloud.CubeServerArgs;
 * import com.pulumi.ionoscloud.inputs.CubeServerVolumeArgs;
 * import com.pulumi.ionoscloud.inputs.CubeServerNicArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var exampleTemplate = IonoscloudFunctions.getTemplate(GetTemplateArgs.builder()
 *             .name("CUBES XS")
 *             .build());
 * 
 *         var exampleDatacenter = new Datacenter("exampleDatacenter", DatacenterArgs.builder()        
 *             .location("de/txl")
 *             .build());
 * 
 *         var exampleLan = new Lan("exampleLan", LanArgs.builder()        
 *             .datacenterId(exampleDatacenter.id())
 *             .public_(true)
 *             .build());
 * 
 *         var serverImagePassword = new RandomPassword("serverImagePassword", RandomPasswordArgs.builder()        
 *             .length(16)
 *             .special(false)
 *             .build());
 * 
 *         var exampleCubeServer = new CubeServer("exampleCubeServer", CubeServerArgs.builder()        
 *             .availabilityZone("ZONE_2")
 *             .imageName("ubuntu:latest")
 *             .templateUuid(exampleTemplate.applyValue(getTemplateResult -> getTemplateResult.id()))
 *             .imagePassword(serverImagePassword.result())
 *             .datacenterId(exampleDatacenter.id())
 *             .volume(CubeServerVolumeArgs.builder()
 *                 .name("Volume Example")
 *                 .licenceType("LINUX")
 *                 .diskType("DAS")
 *                 .build())
 *             .nic(CubeServerNicArgs.builder()
 *                 .lan(exampleLan.id())
 *                 .name("Nic Example")
 *                 .dhcp(true)
 *                 .firewallActive(true)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Resource Server can be imported using the `resource id` and the `datacenter id`, e.g.
 * 
 * ```sh
 * $ pulumi import ionoscloud:index/cubeServer:CubeServer myserver {datacenter uuid}/{server uuid}
 * ```
 * 
 */
@ResourceType(type="ionoscloud:index/cubeServer:CubeServer")
public class CubeServer extends com.pulumi.resources.CustomResource {
    /**
     * [string] The availability zone in which the server should exist. This property is immutable.
     * 
     */
    @Export(name="availabilityZone", refs={String.class}, tree="[0]")
    private Output<String> availabilityZone;

    /**
     * @return [string] The availability zone in which the server should exist. This property is immutable.
     * 
     */
    public Output<String> availabilityZone() {
        return this.availabilityZone;
    }
    /**
     * ***DEPRECATED*** Please refer to ionoscloud.ServerBootDeviceSelection (Optional)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the ionoscloud.getImage data source.
     * 
     * @deprecated
     * Please use the &#39;ionoscloud_server_boot_device_selection&#39; resource for managing the boot device of the server.
     * 
     */
    @Deprecated /* Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server. */
    @Export(name="bootCdrom", refs={String.class}, tree="[0]")
    private Output<String> bootCdrom;

    /**
     * @return ***DEPRECATED*** Please refer to ionoscloud.ServerBootDeviceSelection (Optional)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the ionoscloud.getImage data source.
     * 
     */
    public Output<String> bootCdrom() {
        return this.bootCdrom;
    }
    /**
     * [string] The image or snapshot UUID / name. May also be an image alias. It is required if `licence_type` is not provided.
     * 
     */
    @Export(name="bootImage", refs={String.class}, tree="[0]")
    private Output<String> bootImage;

    /**
     * @return [string] The image or snapshot UUID / name. May also be an image alias. It is required if `licence_type` is not provided.
     * 
     */
    public Output<String> bootImage() {
        return this.bootImage;
    }
    /**
     * The associated boot volume.
     * 
     */
    @Export(name="bootVolume", refs={String.class}, tree="[0]")
    private Output<String> bootVolume;

    /**
     * @return The associated boot volume.
     * 
     */
    public Output<String> bootVolume() {
        return this.bootVolume;
    }
    /**
     * [string] The ID of a Virtual Data Center.
     * 
     */
    @Export(name="datacenterId", refs={String.class}, tree="[0]")
    private Output<String> datacenterId;

    /**
     * @return [string] The ID of a Virtual Data Center.
     * 
     */
    public Output<String> datacenterId() {
        return this.datacenterId;
    }
    /**
     * The associated firewall rule.
     * 
     */
    @Export(name="firewallruleId", refs={String.class}, tree="[0]")
    private Output<String> firewallruleId;

    /**
     * @return The associated firewall rule.
     * 
     */
    public Output<String> firewallruleId() {
        return this.firewallruleId;
    }
    /**
     * [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licence_type` is not provided. Attribute is immutable.
     * 
     */
    @Export(name="imageName", refs={String.class}, tree="[0]")
    private Output<String> imageName;

    /**
     * @return [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licence_type` is not provided. Attribute is immutable.
     * 
     */
    public Output<String> imageName() {
        return this.imageName;
    }
    /**
     * [string] Required if `ssh_key_path` is not provided.
     * 
     * &gt; **⚠ WARNING**
     * &gt; 
     * &gt; Image_name under volume level is deprecated, please use image_name under server level
     * 
     * &gt; **⚠ WARNING**
     * &gt; 
     * &gt; For creating a **CUBE** server, you can not set `volume.size` argument.
     * 
     */
    @Export(name="imagePassword", refs={String.class}, tree="[0]")
    private Output<String> imagePassword;

    /**
     * @return [string] Required if `ssh_key_path` is not provided.
     * 
     * &gt; **⚠ WARNING**
     * &gt; 
     * &gt; Image_name under volume level is deprecated, please use image_name under server level
     * 
     * &gt; **⚠ WARNING**
     * &gt; 
     * &gt; For creating a **CUBE** server, you can not set `volume.size` argument.
     * 
     */
    public Output<String> imagePassword() {
        return this.imagePassword;
    }
    /**
     * A list that contains the IDs for the volumes defined inside the cube server resource.
     * 
     */
    @Export(name="inlineVolumeIds", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> inlineVolumeIds;

    /**
     * @return A list that contains the IDs for the volumes defined inside the cube server resource.
     * 
     */
    public Output<List<String>> inlineVolumeIds() {
        return this.inlineVolumeIds;
    }
    /**
     * [string] The name of the server.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return [string] The name of the server.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * See the Nic section.
     * 
     */
    @Export(name="nic", refs={CubeServerNic.class}, tree="[0]")
    private Output<CubeServerNic> nic;

    /**
     * @return See the Nic section.
     * 
     */
    public Output<CubeServerNic> nic() {
        return this.nic;
    }
    /**
     * The associated IP address.
     * 
     */
    @Export(name="primaryIp", refs={String.class}, tree="[0]")
    private Output<String> primaryIp;

    /**
     * @return The associated IP address.
     * 
     */
    public Output<String> primaryIp() {
        return this.primaryIp;
    }
    /**
     * The associated NIC.
     * 
     */
    @Export(name="primaryNic", refs={String.class}, tree="[0]")
    private Output<String> primaryNic;

    /**
     * @return The associated NIC.
     * 
     */
    public Output<String> primaryNic() {
        return this.primaryNic;
    }
    /**
     * [list] List of paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Required for IonosCloud Linux images. Required if `image_password` is not provided.
     * 
     */
    @Export(name="sshKeyPaths", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> sshKeyPaths;

    /**
     * @return [list] List of paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Required for IonosCloud Linux images. Required if `image_password` is not provided.
     * 
     */
    public Output<List<String>> sshKeyPaths() {
        return this.sshKeyPaths;
    }
    /**
     * [string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
     * 
     */
    @Export(name="templateUuid", refs={String.class}, tree="[0]")
    private Output<String> templateUuid;

    /**
     * @return [string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
     * 
     */
    public Output<String> templateUuid() {
        return this.templateUuid;
    }
    /**
     * [string] Sets the power state of the cube server. E.g: `RUNNING` or `SUSPENDED`.
     * 
     */
    @Export(name="vmState", refs={String.class}, tree="[0]")
    private Output<String> vmState;

    /**
     * @return [string] Sets the power state of the cube server. E.g: `RUNNING` or `SUSPENDED`.
     * 
     */
    public Output<String> vmState() {
        return this.vmState;
    }
    /**
     * See the Volume section.
     * 
     */
    @Export(name="volume", refs={CubeServerVolume.class}, tree="[0]")
    private Output<CubeServerVolume> volume;

    /**
     * @return See the Volume section.
     * 
     */
    public Output<CubeServerVolume> volume() {
        return this.volume;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CubeServer(java.lang.String name) {
        this(name, CubeServerArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CubeServer(java.lang.String name, CubeServerArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CubeServer(java.lang.String name, CubeServerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("ionoscloud:index/cubeServer:CubeServer", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private CubeServer(java.lang.String name, Output<java.lang.String> id, @Nullable CubeServerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("ionoscloud:index/cubeServer:CubeServer", name, state, makeResourceOptions(options, id), false);
    }

    private static CubeServerArgs makeArgs(CubeServerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? CubeServerArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "imagePassword"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CubeServer get(java.lang.String name, Output<java.lang.String> id, @Nullable CubeServerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CubeServer(name, id, state, options);
    }
}
