// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.autoscaling.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.autoscaling.outputs.GetGroupPolicy;
import com.pulumi.ionoscloud.autoscaling.outputs.GetGroupReplicaConfiguration;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGroupResult {
    private String datacenterId;
    /**
     * @return Unique identifier for the resource
     * 
     */
    private String id;
    /**
     * @return Location of the datacenter. This location is the same as the one from the selected template.
     * 
     */
    private String location;
    /**
     * @return Maximum replica count value for `targetReplicaCount`. Will be enforced for both automatic and manual changes.
     * 
     */
    private Integer maxReplicaCount;
    /**
     * @return Minimum replica count value for `targetReplicaCount`. Will be enforced for both automatic and manual changes.
     * 
     */
    private Integer minReplicaCount;
    /**
     * @return The name of the Autoscaling Group.
     * 
     */
    private String name;
    /**
     * @return Specifies the behavior of this Autoscaling Group. A policy consists of Triggers and Actions, whereby an Action is some kind of automated behavior, and a Trigger is defined by the circumstances under which the Action is triggered. Currently, two separate Actions, namely Scaling In and Out are supported, triggered through Thresholds defined on a given Metric.
     * 
     */
    private List<GetGroupPolicy> policies;
    private List<GetGroupReplicaConfiguration> replicaConfigurations;
    private Integer targetReplicaCount;

    private GetGroupResult() {}
    public String datacenterId() {
        return this.datacenterId;
    }
    /**
     * @return Unique identifier for the resource
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Location of the datacenter. This location is the same as the one from the selected template.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Maximum replica count value for `targetReplicaCount`. Will be enforced for both automatic and manual changes.
     * 
     */
    public Integer maxReplicaCount() {
        return this.maxReplicaCount;
    }
    /**
     * @return Minimum replica count value for `targetReplicaCount`. Will be enforced for both automatic and manual changes.
     * 
     */
    public Integer minReplicaCount() {
        return this.minReplicaCount;
    }
    /**
     * @return The name of the Autoscaling Group.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Specifies the behavior of this Autoscaling Group. A policy consists of Triggers and Actions, whereby an Action is some kind of automated behavior, and a Trigger is defined by the circumstances under which the Action is triggered. Currently, two separate Actions, namely Scaling In and Out are supported, triggered through Thresholds defined on a given Metric.
     * 
     */
    public List<GetGroupPolicy> policies() {
        return this.policies;
    }
    public List<GetGroupReplicaConfiguration> replicaConfigurations() {
        return this.replicaConfigurations;
    }
    public Integer targetReplicaCount() {
        return this.targetReplicaCount;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGroupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String datacenterId;
        private String id;
        private String location;
        private Integer maxReplicaCount;
        private Integer minReplicaCount;
        private String name;
        private List<GetGroupPolicy> policies;
        private List<GetGroupReplicaConfiguration> replicaConfigurations;
        private Integer targetReplicaCount;
        public Builder() {}
        public Builder(GetGroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datacenterId = defaults.datacenterId;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.maxReplicaCount = defaults.maxReplicaCount;
    	      this.minReplicaCount = defaults.minReplicaCount;
    	      this.name = defaults.name;
    	      this.policies = defaults.policies;
    	      this.replicaConfigurations = defaults.replicaConfigurations;
    	      this.targetReplicaCount = defaults.targetReplicaCount;
        }

        @CustomType.Setter
        public Builder datacenterId(String datacenterId) {
            if (datacenterId == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "datacenterId");
            }
            this.datacenterId = datacenterId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder maxReplicaCount(Integer maxReplicaCount) {
            if (maxReplicaCount == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "maxReplicaCount");
            }
            this.maxReplicaCount = maxReplicaCount;
            return this;
        }
        @CustomType.Setter
        public Builder minReplicaCount(Integer minReplicaCount) {
            if (minReplicaCount == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "minReplicaCount");
            }
            this.minReplicaCount = minReplicaCount;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder policies(List<GetGroupPolicy> policies) {
            if (policies == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "policies");
            }
            this.policies = policies;
            return this;
        }
        public Builder policies(GetGroupPolicy... policies) {
            return policies(List.of(policies));
        }
        @CustomType.Setter
        public Builder replicaConfigurations(List<GetGroupReplicaConfiguration> replicaConfigurations) {
            if (replicaConfigurations == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "replicaConfigurations");
            }
            this.replicaConfigurations = replicaConfigurations;
            return this;
        }
        public Builder replicaConfigurations(GetGroupReplicaConfiguration... replicaConfigurations) {
            return replicaConfigurations(List.of(replicaConfigurations));
        }
        @CustomType.Setter
        public Builder targetReplicaCount(Integer targetReplicaCount) {
            if (targetReplicaCount == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "targetReplicaCount");
            }
            this.targetReplicaCount = targetReplicaCount;
            return this;
        }
        public GetGroupResult build() {
            final var _resultValue = new GetGroupResult();
            _resultValue.datacenterId = datacenterId;
            _resultValue.id = id;
            _resultValue.location = location;
            _resultValue.maxReplicaCount = maxReplicaCount;
            _resultValue.minReplicaCount = minReplicaCount;
            _resultValue.name = name;
            _resultValue.policies = policies;
            _resultValue.replicaConfigurations = replicaConfigurations;
            _resultValue.targetReplicaCount = targetReplicaCount;
            return _resultValue;
        }
    }
}
