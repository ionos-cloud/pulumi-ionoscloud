// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.k8s.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.k8s.outputs.GetNodePoolLanRoute;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetNodePoolLan {
    /**
     * @return Indicates if the Kubernetes Node Pool LAN will reserve an IP using DHCP
     * 
     */
    private Boolean dhcp;
    /**
     * @return ID of the node pool you want to search for.
     * 
     * `k8s_cluster_id` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
     * 
     */
    private Integer id;
    /**
     * @return An array of additional LANs attached to worker nodes
     * 
     */
    private @Nullable List<GetNodePoolLanRoute> routes;

    private GetNodePoolLan() {}
    /**
     * @return Indicates if the Kubernetes Node Pool LAN will reserve an IP using DHCP
     * 
     */
    public Boolean dhcp() {
        return this.dhcp;
    }
    /**
     * @return ID of the node pool you want to search for.
     * 
     * `k8s_cluster_id` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
     * 
     */
    public Integer id() {
        return this.id;
    }
    /**
     * @return An array of additional LANs attached to worker nodes
     * 
     */
    public List<GetNodePoolLanRoute> routes() {
        return this.routes == null ? List.of() : this.routes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNodePoolLan defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean dhcp;
        private Integer id;
        private @Nullable List<GetNodePoolLanRoute> routes;
        public Builder() {}
        public Builder(GetNodePoolLan defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dhcp = defaults.dhcp;
    	      this.id = defaults.id;
    	      this.routes = defaults.routes;
        }

        @CustomType.Setter
        public Builder dhcp(Boolean dhcp) {
            if (dhcp == null) {
              throw new MissingRequiredPropertyException("GetNodePoolLan", "dhcp");
            }
            this.dhcp = dhcp;
            return this;
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNodePoolLan", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder routes(@Nullable List<GetNodePoolLanRoute> routes) {

            this.routes = routes;
            return this;
        }
        public Builder routes(GetNodePoolLanRoute... routes) {
            return routes(List.of(routes));
        }
        public GetNodePoolLan build() {
            final var _resultValue = new GetNodePoolLan();
            _resultValue.dhcp = dhcp;
            _resultValue.id = id;
            _resultValue.routes = routes;
            return _resultValue;
        }
    }
}
