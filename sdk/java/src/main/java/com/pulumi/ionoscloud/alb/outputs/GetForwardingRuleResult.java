// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.alb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.alb.outputs.GetForwardingRuleHttpRule;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetForwardingRuleResult {
    private String applicationLoadbalancerId;
    /**
     * @return The maximum time in milliseconds to wait for the client to acknowledge or send data; default is 50,000 (50 seconds).
     * - `server certificates` - Array of items in that collection.
     * 
     */
    private Integer clientTimeout;
    private String datacenterId;
    /**
     * @return Array of items in that collection
     * 
     */
    private List<GetForwardingRuleHttpRule> httpRules;
    /**
     * @return Id of Application Load Balancer Forwarding Rule
     * 
     */
    private String id;
    /**
     * @return Listening (inbound) IP.
     * 
     */
    private String listenerIp;
    /**
     * @return Listening (inbound) port number; valid range is 1 to 65535.
     * 
     */
    private Integer listenerPort;
    /**
     * @return The unique name of the Application Load Balancer HTTP rule.
     * 
     */
    private String name;
    private @Nullable Boolean partialMatch;
    /**
     * @return Balancing protocol.
     * 
     */
    private String protocol;
    private List<String> serverCertificates;

    private GetForwardingRuleResult() {}
    public String applicationLoadbalancerId() {
        return this.applicationLoadbalancerId;
    }
    /**
     * @return The maximum time in milliseconds to wait for the client to acknowledge or send data; default is 50,000 (50 seconds).
     * - `server certificates` - Array of items in that collection.
     * 
     */
    public Integer clientTimeout() {
        return this.clientTimeout;
    }
    public String datacenterId() {
        return this.datacenterId;
    }
    /**
     * @return Array of items in that collection
     * 
     */
    public List<GetForwardingRuleHttpRule> httpRules() {
        return this.httpRules;
    }
    /**
     * @return Id of Application Load Balancer Forwarding Rule
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Listening (inbound) IP.
     * 
     */
    public String listenerIp() {
        return this.listenerIp;
    }
    /**
     * @return Listening (inbound) port number; valid range is 1 to 65535.
     * 
     */
    public Integer listenerPort() {
        return this.listenerPort;
    }
    /**
     * @return The unique name of the Application Load Balancer HTTP rule.
     * 
     */
    public String name() {
        return this.name;
    }
    public Optional<Boolean> partialMatch() {
        return Optional.ofNullable(this.partialMatch);
    }
    /**
     * @return Balancing protocol.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    public List<String> serverCertificates() {
        return this.serverCertificates;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetForwardingRuleResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String applicationLoadbalancerId;
        private Integer clientTimeout;
        private String datacenterId;
        private List<GetForwardingRuleHttpRule> httpRules;
        private String id;
        private String listenerIp;
        private Integer listenerPort;
        private String name;
        private @Nullable Boolean partialMatch;
        private String protocol;
        private List<String> serverCertificates;
        public Builder() {}
        public Builder(GetForwardingRuleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationLoadbalancerId = defaults.applicationLoadbalancerId;
    	      this.clientTimeout = defaults.clientTimeout;
    	      this.datacenterId = defaults.datacenterId;
    	      this.httpRules = defaults.httpRules;
    	      this.id = defaults.id;
    	      this.listenerIp = defaults.listenerIp;
    	      this.listenerPort = defaults.listenerPort;
    	      this.name = defaults.name;
    	      this.partialMatch = defaults.partialMatch;
    	      this.protocol = defaults.protocol;
    	      this.serverCertificates = defaults.serverCertificates;
        }

        @CustomType.Setter
        public Builder applicationLoadbalancerId(String applicationLoadbalancerId) {
            if (applicationLoadbalancerId == null) {
              throw new MissingRequiredPropertyException("GetForwardingRuleResult", "applicationLoadbalancerId");
            }
            this.applicationLoadbalancerId = applicationLoadbalancerId;
            return this;
        }
        @CustomType.Setter
        public Builder clientTimeout(Integer clientTimeout) {
            if (clientTimeout == null) {
              throw new MissingRequiredPropertyException("GetForwardingRuleResult", "clientTimeout");
            }
            this.clientTimeout = clientTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder datacenterId(String datacenterId) {
            if (datacenterId == null) {
              throw new MissingRequiredPropertyException("GetForwardingRuleResult", "datacenterId");
            }
            this.datacenterId = datacenterId;
            return this;
        }
        @CustomType.Setter
        public Builder httpRules(List<GetForwardingRuleHttpRule> httpRules) {
            if (httpRules == null) {
              throw new MissingRequiredPropertyException("GetForwardingRuleResult", "httpRules");
            }
            this.httpRules = httpRules;
            return this;
        }
        public Builder httpRules(GetForwardingRuleHttpRule... httpRules) {
            return httpRules(List.of(httpRules));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetForwardingRuleResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder listenerIp(String listenerIp) {
            if (listenerIp == null) {
              throw new MissingRequiredPropertyException("GetForwardingRuleResult", "listenerIp");
            }
            this.listenerIp = listenerIp;
            return this;
        }
        @CustomType.Setter
        public Builder listenerPort(Integer listenerPort) {
            if (listenerPort == null) {
              throw new MissingRequiredPropertyException("GetForwardingRuleResult", "listenerPort");
            }
            this.listenerPort = listenerPort;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetForwardingRuleResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder partialMatch(@Nullable Boolean partialMatch) {

            this.partialMatch = partialMatch;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetForwardingRuleResult", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder serverCertificates(List<String> serverCertificates) {
            if (serverCertificates == null) {
              throw new MissingRequiredPropertyException("GetForwardingRuleResult", "serverCertificates");
            }
            this.serverCertificates = serverCertificates;
            return this;
        }
        public Builder serverCertificates(String... serverCertificates) {
            return serverCertificates(List.of(serverCertificates));
        }
        public GetForwardingRuleResult build() {
            final var _resultValue = new GetForwardingRuleResult();
            _resultValue.applicationLoadbalancerId = applicationLoadbalancerId;
            _resultValue.clientTimeout = clientTimeout;
            _resultValue.datacenterId = datacenterId;
            _resultValue.httpRules = httpRules;
            _resultValue.id = id;
            _resultValue.listenerIp = listenerIp;
            _resultValue.listenerPort = listenerPort;
            _resultValue.name = name;
            _resultValue.partialMatch = partialMatch;
            _resultValue.protocol = protocol;
            _resultValue.serverCertificates = serverCertificates;
            return _resultValue;
        }
    }
}
