// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.ionoscloud.inputs.VpnWireguardPeerEndpointArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpnWireguardPeerState extends com.pulumi.resources.ResourceArgs {

    public static final VpnWireguardPeerState Empty = new VpnWireguardPeerState();

    /**
     * [list, string] A list of subnet CIDRs that are allowed to connect to the WireGuard Gateway.
     * 
     */
    @Import(name="allowedIps")
    private @Nullable Output<List<String>> allowedIps;

    /**
     * @return [list, string] A list of subnet CIDRs that are allowed to connect to the WireGuard Gateway.
     * 
     */
    public Optional<Output<List<String>>> allowedIps() {
        return Optional.ofNullable(this.allowedIps);
    }

    /**
     * [string] A description of the WireGuard Gateway.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return [string] A description of the WireGuard Gateway.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * [block] An endpoint configuration block for the WireGuard Gateway. The structure of this block is as follows:
     * 
     */
    @Import(name="endpoint")
    private @Nullable Output<VpnWireguardPeerEndpointArgs> endpoint;

    /**
     * @return [block] An endpoint configuration block for the WireGuard Gateway. The structure of this block is as follows:
     * 
     */
    public Optional<Output<VpnWireguardPeerEndpointArgs>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * [string] The ID of the WireGuard Gateway that the Peer will connect to.
     * 
     */
    @Import(name="gatewayId")
    private @Nullable Output<String> gatewayId;

    /**
     * @return [string] The ID of the WireGuard Gateway that the Peer will connect to.
     * 
     */
    public Optional<Output<String>> gatewayId() {
        return Optional.ofNullable(this.gatewayId);
    }

    /**
     * [string] The location of the WireGuard Gateway.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return [string] The location of the WireGuard Gateway.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * [string] The human-readable name of the WireGuard Gateway.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return [string] The human-readable name of the WireGuard Gateway.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * [string] The public key for the WireGuard Gateway.
     * 
     */
    @Import(name="publicKey")
    private @Nullable Output<String> publicKey;

    /**
     * @return [string] The public key for the WireGuard Gateway.
     * 
     */
    public Optional<Output<String>> publicKey() {
        return Optional.ofNullable(this.publicKey);
    }

    /**
     * The current status of the WireGuard Gateway Peer.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The current status of the WireGuard Gateway Peer.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private VpnWireguardPeerState() {}

    private VpnWireguardPeerState(VpnWireguardPeerState $) {
        this.allowedIps = $.allowedIps;
        this.description = $.description;
        this.endpoint = $.endpoint;
        this.gatewayId = $.gatewayId;
        this.location = $.location;
        this.name = $.name;
        this.publicKey = $.publicKey;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpnWireguardPeerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpnWireguardPeerState $;

        public Builder() {
            $ = new VpnWireguardPeerState();
        }

        public Builder(VpnWireguardPeerState defaults) {
            $ = new VpnWireguardPeerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedIps [list, string] A list of subnet CIDRs that are allowed to connect to the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder allowedIps(@Nullable Output<List<String>> allowedIps) {
            $.allowedIps = allowedIps;
            return this;
        }

        /**
         * @param allowedIps [list, string] A list of subnet CIDRs that are allowed to connect to the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder allowedIps(List<String> allowedIps) {
            return allowedIps(Output.of(allowedIps));
        }

        /**
         * @param allowedIps [list, string] A list of subnet CIDRs that are allowed to connect to the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder allowedIps(String... allowedIps) {
            return allowedIps(List.of(allowedIps));
        }

        /**
         * @param description [string] A description of the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description [string] A description of the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param endpoint [block] An endpoint configuration block for the WireGuard Gateway. The structure of this block is as follows:
         * 
         * @return builder
         * 
         */
        public Builder endpoint(@Nullable Output<VpnWireguardPeerEndpointArgs> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint [block] An endpoint configuration block for the WireGuard Gateway. The structure of this block is as follows:
         * 
         * @return builder
         * 
         */
        public Builder endpoint(VpnWireguardPeerEndpointArgs endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param gatewayId [string] The ID of the WireGuard Gateway that the Peer will connect to.
         * 
         * @return builder
         * 
         */
        public Builder gatewayId(@Nullable Output<String> gatewayId) {
            $.gatewayId = gatewayId;
            return this;
        }

        /**
         * @param gatewayId [string] The ID of the WireGuard Gateway that the Peer will connect to.
         * 
         * @return builder
         * 
         */
        public Builder gatewayId(String gatewayId) {
            return gatewayId(Output.of(gatewayId));
        }

        /**
         * @param location [string] The location of the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location [string] The location of the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name [string] The human-readable name of the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [string] The human-readable name of the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param publicKey [string] The public key for the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(@Nullable Output<String> publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        /**
         * @param publicKey [string] The public key for the WireGuard Gateway.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(String publicKey) {
            return publicKey(Output.of(publicKey));
        }

        /**
         * @param status The current status of the WireGuard Gateway Peer.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The current status of the WireGuard Gateway Peer.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public VpnWireguardPeerState build() {
            return $;
        }
    }

}
