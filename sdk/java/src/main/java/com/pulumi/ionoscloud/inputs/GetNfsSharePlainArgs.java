// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.inputs.GetNfsShareClientGroup;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetNfsSharePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetNfsSharePlainArgs Empty = new GetNfsSharePlainArgs();

    /**
     * The groups of clients are the systems connecting to the Network File Storage cluster. Each client group supports the following:
     * 
     */
    @Import(name="clientGroups")
    private @Nullable List<GetNfsShareClientGroup> clientGroups;

    /**
     * @return The groups of clients are the systems connecting to the Network File Storage cluster. Each client group supports the following:
     * 
     */
    public Optional<List<GetNfsShareClientGroup>> clientGroups() {
        return Optional.ofNullable(this.clientGroups);
    }

    /**
     * The ID of the Network File Storage cluster.
     * 
     */
    @Import(name="clusterId", required=true)
    private String clusterId;

    /**
     * @return The ID of the Network File Storage cluster.
     * 
     */
    public String clusterId() {
        return this.clusterId;
    }

    /**
     * The group ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
     * 
     */
    @Import(name="gid")
    private @Nullable Integer gid;

    /**
     * @return The group ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
     * 
     */
    public Optional<Integer> gid() {
        return Optional.ofNullable(this.gid);
    }

    /**
     * ID of the Network File Storage share.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return ID of the Network File Storage share.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The location where the Network File Storage share is located.
     * 
     */
    @Import(name="location", required=true)
    private String location;

    /**
     * @return The location where the Network File Storage share is located.
     * 
     */
    public String location() {
        return this.location;
    }

    /**
     * Name of the Network File Storage share.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Name of the Network File Storage share.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Whether partial matching is allowed or not when using the name filter. Defaults to `false`.
     * 
     */
    @Import(name="partialMatch")
    private @Nullable Boolean partialMatch;

    /**
     * @return Whether partial matching is allowed or not when using the name filter. Defaults to `false`.
     * 
     */
    public Optional<Boolean> partialMatch() {
        return Optional.ofNullable(this.partialMatch);
    }

    /**
     * The quota in MiB for the export. The quota can restrict the amount of data that can be stored within the export. The quota can be disabled using `0`.
     * 
     */
    @Import(name="quota")
    private @Nullable Integer quota;

    /**
     * @return The quota in MiB for the export. The quota can restrict the amount of data that can be stored within the export. The quota can be disabled using `0`.
     * 
     */
    public Optional<Integer> quota() {
        return Optional.ofNullable(this.quota);
    }

    /**
     * The user ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
     * 
     */
    @Import(name="uid")
    private @Nullable Integer uid;

    /**
     * @return The user ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
     * 
     */
    public Optional<Integer> uid() {
        return Optional.ofNullable(this.uid);
    }

    private GetNfsSharePlainArgs() {}

    private GetNfsSharePlainArgs(GetNfsSharePlainArgs $) {
        this.clientGroups = $.clientGroups;
        this.clusterId = $.clusterId;
        this.gid = $.gid;
        this.id = $.id;
        this.location = $.location;
        this.name = $.name;
        this.partialMatch = $.partialMatch;
        this.quota = $.quota;
        this.uid = $.uid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNfsSharePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNfsSharePlainArgs $;

        public Builder() {
            $ = new GetNfsSharePlainArgs();
        }

        public Builder(GetNfsSharePlainArgs defaults) {
            $ = new GetNfsSharePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientGroups The groups of clients are the systems connecting to the Network File Storage cluster. Each client group supports the following:
         * 
         * @return builder
         * 
         */
        public Builder clientGroups(@Nullable List<GetNfsShareClientGroup> clientGroups) {
            $.clientGroups = clientGroups;
            return this;
        }

        /**
         * @param clientGroups The groups of clients are the systems connecting to the Network File Storage cluster. Each client group supports the following:
         * 
         * @return builder
         * 
         */
        public Builder clientGroups(GetNfsShareClientGroup... clientGroups) {
            return clientGroups(List.of(clientGroups));
        }

        /**
         * @param clusterId The ID of the Network File Storage cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param gid The group ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
         * 
         * @return builder
         * 
         */
        public Builder gid(@Nullable Integer gid) {
            $.gid = gid;
            return this;
        }

        /**
         * @param id ID of the Network File Storage share.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param location The location where the Network File Storage share is located.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            $.location = location;
            return this;
        }

        /**
         * @param name Name of the Network File Storage share.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param partialMatch Whether partial matching is allowed or not when using the name filter. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder partialMatch(@Nullable Boolean partialMatch) {
            $.partialMatch = partialMatch;
            return this;
        }

        /**
         * @param quota The quota in MiB for the export. The quota can restrict the amount of data that can be stored within the export. The quota can be disabled using `0`.
         * 
         * @return builder
         * 
         */
        public Builder quota(@Nullable Integer quota) {
            $.quota = quota;
            return this;
        }

        /**
         * @param uid The user ID that will own the exported directory. If not set, **anonymous** (`512`) will be used.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Integer uid) {
            $.uid = uid;
            return this;
        }

        public GetNfsSharePlainArgs build() {
            if ($.clusterId == null) {
                throw new MissingRequiredPropertyException("GetNfsSharePlainArgs", "clusterId");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("GetNfsSharePlainArgs", "location");
            }
            return $;
        }
    }

}
