// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.inputs.TargetGroupHealthCheckArgs;
import com.pulumi.ionoscloud.inputs.TargetGroupHttpHealthCheckArgs;
import com.pulumi.ionoscloud.inputs.TargetGroupTargetArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TargetGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final TargetGroupArgs Empty = new TargetGroupArgs();

    /**
     * [string] Balancing algorithm.
     * 
     */
    @Import(name="algorithm", required=true)
    private Output<String> algorithm;

    /**
     * @return [string] Balancing algorithm.
     * 
     */
    public Output<String> algorithm() {
        return this.algorithm;
    }

    /**
     * Health check attributes for Target Group.
     * 
     */
    @Import(name="healthCheck")
    private @Nullable Output<TargetGroupHealthCheckArgs> healthCheck;

    /**
     * @return Health check attributes for Target Group.
     * 
     */
    public Optional<Output<TargetGroupHealthCheckArgs>> healthCheck() {
        return Optional.ofNullable(this.healthCheck);
    }

    /**
     * Http health check attributes for Target Group
     * 
     */
    @Import(name="httpHealthCheck")
    private @Nullable Output<TargetGroupHttpHealthCheckArgs> httpHealthCheck;

    /**
     * @return Http health check attributes for Target Group
     * 
     */
    public Optional<Output<TargetGroupHttpHealthCheckArgs>> httpHealthCheck() {
        return Optional.ofNullable(this.httpHealthCheck);
    }

    /**
     * [string] The name of the target group.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return [string] The name of the target group.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * [string] Balancing protocol.
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return [string] Balancing protocol.
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * [string] The forwarding protocol version. Value is ignored when protocol is not &#39;HTTP&#39;.
     * 
     */
    @Import(name="protocolVersion", required=true)
    private Output<String> protocolVersion;

    /**
     * @return [string] The forwarding protocol version. Value is ignored when protocol is not &#39;HTTP&#39;.
     * 
     */
    public Output<String> protocolVersion() {
        return this.protocolVersion;
    }

    /**
     * [list] Array of items in the collection
     * 
     */
    @Import(name="targets")
    private @Nullable Output<List<TargetGroupTargetArgs>> targets;

    /**
     * @return [list] Array of items in the collection
     * 
     */
    public Optional<Output<List<TargetGroupTargetArgs>>> targets() {
        return Optional.ofNullable(this.targets);
    }

    private TargetGroupArgs() {}

    private TargetGroupArgs(TargetGroupArgs $) {
        this.algorithm = $.algorithm;
        this.healthCheck = $.healthCheck;
        this.httpHealthCheck = $.httpHealthCheck;
        this.name = $.name;
        this.protocol = $.protocol;
        this.protocolVersion = $.protocolVersion;
        this.targets = $.targets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TargetGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TargetGroupArgs $;

        public Builder() {
            $ = new TargetGroupArgs();
        }

        public Builder(TargetGroupArgs defaults) {
            $ = new TargetGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param algorithm [string] Balancing algorithm.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(Output<String> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        /**
         * @param algorithm [string] Balancing algorithm.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(String algorithm) {
            return algorithm(Output.of(algorithm));
        }

        /**
         * @param healthCheck Health check attributes for Target Group.
         * 
         * @return builder
         * 
         */
        public Builder healthCheck(@Nullable Output<TargetGroupHealthCheckArgs> healthCheck) {
            $.healthCheck = healthCheck;
            return this;
        }

        /**
         * @param healthCheck Health check attributes for Target Group.
         * 
         * @return builder
         * 
         */
        public Builder healthCheck(TargetGroupHealthCheckArgs healthCheck) {
            return healthCheck(Output.of(healthCheck));
        }

        /**
         * @param httpHealthCheck Http health check attributes for Target Group
         * 
         * @return builder
         * 
         */
        public Builder httpHealthCheck(@Nullable Output<TargetGroupHttpHealthCheckArgs> httpHealthCheck) {
            $.httpHealthCheck = httpHealthCheck;
            return this;
        }

        /**
         * @param httpHealthCheck Http health check attributes for Target Group
         * 
         * @return builder
         * 
         */
        public Builder httpHealthCheck(TargetGroupHttpHealthCheckArgs httpHealthCheck) {
            return httpHealthCheck(Output.of(httpHealthCheck));
        }

        /**
         * @param name [string] The name of the target group.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [string] The name of the target group.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param protocol [string] Balancing protocol.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol [string] Balancing protocol.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param protocolVersion [string] The forwarding protocol version. Value is ignored when protocol is not &#39;HTTP&#39;.
         * 
         * @return builder
         * 
         */
        public Builder protocolVersion(Output<String> protocolVersion) {
            $.protocolVersion = protocolVersion;
            return this;
        }

        /**
         * @param protocolVersion [string] The forwarding protocol version. Value is ignored when protocol is not &#39;HTTP&#39;.
         * 
         * @return builder
         * 
         */
        public Builder protocolVersion(String protocolVersion) {
            return protocolVersion(Output.of(protocolVersion));
        }

        /**
         * @param targets [list] Array of items in the collection
         * 
         * @return builder
         * 
         */
        public Builder targets(@Nullable Output<List<TargetGroupTargetArgs>> targets) {
            $.targets = targets;
            return this;
        }

        /**
         * @param targets [list] Array of items in the collection
         * 
         * @return builder
         * 
         */
        public Builder targets(List<TargetGroupTargetArgs> targets) {
            return targets(Output.of(targets));
        }

        /**
         * @param targets [list] Array of items in the collection
         * 
         * @return builder
         * 
         */
        public Builder targets(TargetGroupTargetArgs... targets) {
            return targets(List.of(targets));
        }

        public TargetGroupArgs build() {
            if ($.algorithm == null) {
                throw new MissingRequiredPropertyException("TargetGroupArgs", "algorithm");
            }
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("TargetGroupArgs", "protocol");
            }
            if ($.protocolVersion == null) {
                throw new MissingRequiredPropertyException("TargetGroupArgs", "protocolVersion");
            }
            return $;
        }
    }

}
