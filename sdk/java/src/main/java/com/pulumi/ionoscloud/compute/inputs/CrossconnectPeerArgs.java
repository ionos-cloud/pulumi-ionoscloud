// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CrossconnectPeerArgs extends com.pulumi.resources.ResourceArgs {

    public static final CrossconnectPeerArgs Empty = new CrossconnectPeerArgs();

    /**
     * The id of the cross-connected datacenter
     * 
     */
    @Import(name="datacenterId")
    private @Nullable Output<String> datacenterId;

    /**
     * @return The id of the cross-connected datacenter
     * 
     */
    public Optional<Output<String>> datacenterId() {
        return Optional.ofNullable(this.datacenterId);
    }

    /**
     * The name of the cross-connected datacenter
     * 
     */
    @Import(name="datacenterName")
    private @Nullable Output<String> datacenterName;

    /**
     * @return The name of the cross-connected datacenter
     * 
     */
    public Optional<Output<String>> datacenterName() {
        return Optional.ofNullable(this.datacenterName);
    }

    /**
     * The id of the cross-connected LAN
     * 
     */
    @Import(name="lanId")
    private @Nullable Output<String> lanId;

    /**
     * @return The id of the cross-connected LAN
     * 
     */
    public Optional<Output<String>> lanId() {
        return Optional.ofNullable(this.lanId);
    }

    /**
     * The name of the cross-connected LAN
     * 
     */
    @Import(name="lanName")
    private @Nullable Output<String> lanName;

    /**
     * @return The name of the cross-connected LAN
     * 
     */
    public Optional<Output<String>> lanName() {
        return Optional.ofNullable(this.lanName);
    }

    /**
     * The location of the cross-connected datacenter
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location of the cross-connected datacenter
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    private CrossconnectPeerArgs() {}

    private CrossconnectPeerArgs(CrossconnectPeerArgs $) {
        this.datacenterId = $.datacenterId;
        this.datacenterName = $.datacenterName;
        this.lanId = $.lanId;
        this.lanName = $.lanName;
        this.location = $.location;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CrossconnectPeerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CrossconnectPeerArgs $;

        public Builder() {
            $ = new CrossconnectPeerArgs();
        }

        public Builder(CrossconnectPeerArgs defaults) {
            $ = new CrossconnectPeerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param datacenterId The id of the cross-connected datacenter
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(@Nullable Output<String> datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        /**
         * @param datacenterId The id of the cross-connected datacenter
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(String datacenterId) {
            return datacenterId(Output.of(datacenterId));
        }

        /**
         * @param datacenterName The name of the cross-connected datacenter
         * 
         * @return builder
         * 
         */
        public Builder datacenterName(@Nullable Output<String> datacenterName) {
            $.datacenterName = datacenterName;
            return this;
        }

        /**
         * @param datacenterName The name of the cross-connected datacenter
         * 
         * @return builder
         * 
         */
        public Builder datacenterName(String datacenterName) {
            return datacenterName(Output.of(datacenterName));
        }

        /**
         * @param lanId The id of the cross-connected LAN
         * 
         * @return builder
         * 
         */
        public Builder lanId(@Nullable Output<String> lanId) {
            $.lanId = lanId;
            return this;
        }

        /**
         * @param lanId The id of the cross-connected LAN
         * 
         * @return builder
         * 
         */
        public Builder lanId(String lanId) {
            return lanId(Output.of(lanId));
        }

        /**
         * @param lanName The name of the cross-connected LAN
         * 
         * @return builder
         * 
         */
        public Builder lanName(@Nullable Output<String> lanName) {
            $.lanName = lanName;
            return this;
        }

        /**
         * @param lanName The name of the cross-connected LAN
         * 
         * @return builder
         * 
         */
        public Builder lanName(String lanName) {
            return lanName(Output.of(lanName));
        }

        /**
         * @param location The location of the cross-connected datacenter
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the cross-connected datacenter
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        public CrossconnectPeerArgs build() {
            return $;
        }
    }

}
