// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.compute.outputs.GetUserGroup;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetUserResult {
    /**
     * @return Indicates if the user is active
     * 
     */
    private Boolean active;
    /**
     * @return Indicates if the user has administrative rights. Administrators do not need to be managed in groups, as they automatically have access to all resources associated with the contract.
     * 
     */
    private Boolean administrator;
    /**
     * @return The e-mail address for the user.
     * 
     */
    private @Nullable String email;
    /**
     * @return The first name for the user.
     * 
     */
    private String firstName;
    /**
     * @return Indicates if secure (two-factor) authentication should be forced for the user (true) or not (false).
     * 
     */
    private Boolean forceSecAuth;
    /**
     * @return Shows the id and name of the groups that the user is a member of
     * 
     */
    private List<GetUserGroup> groups;
    /**
     * @return The id of the user.
     * 
     */
    private String id;
    /**
     * @return The last name for the user.
     * 
     */
    private String lastName;
    /**
     * @return Canonical (S3) id of the user for a given identity
     * 
     */
    private String s3CanonicalUserId;
    /**
     * @return Indicates if secure authentication is active for the user or not
     * 
     */
    private Boolean secAuthActive;

    private GetUserResult() {}
    /**
     * @return Indicates if the user is active
     * 
     */
    public Boolean active() {
        return this.active;
    }
    /**
     * @return Indicates if the user has administrative rights. Administrators do not need to be managed in groups, as they automatically have access to all resources associated with the contract.
     * 
     */
    public Boolean administrator() {
        return this.administrator;
    }
    /**
     * @return The e-mail address for the user.
     * 
     */
    public Optional<String> email() {
        return Optional.ofNullable(this.email);
    }
    /**
     * @return The first name for the user.
     * 
     */
    public String firstName() {
        return this.firstName;
    }
    /**
     * @return Indicates if secure (two-factor) authentication should be forced for the user (true) or not (false).
     * 
     */
    public Boolean forceSecAuth() {
        return this.forceSecAuth;
    }
    /**
     * @return Shows the id and name of the groups that the user is a member of
     * 
     */
    public List<GetUserGroup> groups() {
        return this.groups;
    }
    /**
     * @return The id of the user.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The last name for the user.
     * 
     */
    public String lastName() {
        return this.lastName;
    }
    /**
     * @return Canonical (S3) id of the user for a given identity
     * 
     */
    public String s3CanonicalUserId() {
        return this.s3CanonicalUserId;
    }
    /**
     * @return Indicates if secure authentication is active for the user or not
     * 
     */
    public Boolean secAuthActive() {
        return this.secAuthActive;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean active;
        private Boolean administrator;
        private @Nullable String email;
        private String firstName;
        private Boolean forceSecAuth;
        private List<GetUserGroup> groups;
        private String id;
        private String lastName;
        private String s3CanonicalUserId;
        private Boolean secAuthActive;
        public Builder() {}
        public Builder(GetUserResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.active = defaults.active;
    	      this.administrator = defaults.administrator;
    	      this.email = defaults.email;
    	      this.firstName = defaults.firstName;
    	      this.forceSecAuth = defaults.forceSecAuth;
    	      this.groups = defaults.groups;
    	      this.id = defaults.id;
    	      this.lastName = defaults.lastName;
    	      this.s3CanonicalUserId = defaults.s3CanonicalUserId;
    	      this.secAuthActive = defaults.secAuthActive;
        }

        @CustomType.Setter
        public Builder active(Boolean active) {
            if (active == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "active");
            }
            this.active = active;
            return this;
        }
        @CustomType.Setter
        public Builder administrator(Boolean administrator) {
            if (administrator == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "administrator");
            }
            this.administrator = administrator;
            return this;
        }
        @CustomType.Setter
        public Builder email(@Nullable String email) {

            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder firstName(String firstName) {
            if (firstName == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "firstName");
            }
            this.firstName = firstName;
            return this;
        }
        @CustomType.Setter
        public Builder forceSecAuth(Boolean forceSecAuth) {
            if (forceSecAuth == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "forceSecAuth");
            }
            this.forceSecAuth = forceSecAuth;
            return this;
        }
        @CustomType.Setter
        public Builder groups(List<GetUserGroup> groups) {
            if (groups == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "groups");
            }
            this.groups = groups;
            return this;
        }
        public Builder groups(GetUserGroup... groups) {
            return groups(List.of(groups));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lastName(String lastName) {
            if (lastName == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "lastName");
            }
            this.lastName = lastName;
            return this;
        }
        @CustomType.Setter
        public Builder s3CanonicalUserId(String s3CanonicalUserId) {
            if (s3CanonicalUserId == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "s3CanonicalUserId");
            }
            this.s3CanonicalUserId = s3CanonicalUserId;
            return this;
        }
        @CustomType.Setter
        public Builder secAuthActive(Boolean secAuthActive) {
            if (secAuthActive == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "secAuthActive");
            }
            this.secAuthActive = secAuthActive;
            return this;
        }
        public GetUserResult build() {
            final var _resultValue = new GetUserResult();
            _resultValue.active = active;
            _resultValue.administrator = administrator;
            _resultValue.email = email;
            _resultValue.firstName = firstName;
            _resultValue.forceSecAuth = forceSecAuth;
            _resultValue.groups = groups;
            _resultValue.id = id;
            _resultValue.lastName = lastName;
            _resultValue.s3CanonicalUserId = s3CanonicalUserId;
            _resultValue.secAuthActive = secAuthActive;
            return _resultValue;
        }
    }
}
