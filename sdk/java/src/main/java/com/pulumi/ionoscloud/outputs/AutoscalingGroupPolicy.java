// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.outputs.AutoscalingGroupPolicyScaleInAction;
import com.pulumi.ionoscloud.outputs.AutoscalingGroupPolicyScaleOutAction;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AutoscalingGroupPolicy {
    /**
     * @return [string] The Metric that should trigger the scaling actions. Metric values are checked at fixed intervals. Possible values: `INSTANCE_CPU_UTILIZATION_AVERAGE`, `INSTANCE_NETWORK_IN_BYTES`, `INSTANCE_NETWORK_IN_PACKETS`, `INSTANCE_NETWORK_OUT_BYTES`, `INSTANCE_NETWORK_OUT_PACKETS`
     * 
     */
    private String metric;
    /**
     * @return [string] Defines the time range, for which the samples will be aggregated. Default is 120s. *Note that when you set it to values like 5m the API will automatically transform it in PT5M, so the plan will show you a diff in state that should be ignored.*
     * 
     */
    private @Nullable String range;
    /**
     * @return [list] Specifies the action to take when the `scaleInThreshold` is exceeded. Hereby, scaling in is always about removing VMs that are currently associated with this autoscaling group. Default termination policy is OLDEST_SERVER_FIRST.
     * 
     */
    private AutoscalingGroupPolicyScaleInAction scaleInAction;
    /**
     * @return [int] A lower threshold on the value of `metric`. Will be used with `less than` (&lt;) operator. Exceeding this will start a Scale-In Action as specified by the `scaleInAction` property. The value must have a higher minimum delta to the `scaleOutThreshold` depending on the `metric` to avoid competitive actions at the same time.
     * 
     */
    private Integer scaleInThreshold;
    /**
     * @return [list] Specifies the action to take when the `scaleOutThreshold` is exceeded. Hereby, scaling out is always about adding new VMs to this autoscaling group.
     * 
     */
    private AutoscalingGroupPolicyScaleOutAction scaleOutAction;
    /**
     * @return [int] The upper threshold for the value of the `metric`. Used with the `greater than` (&gt;) operator. A scale-out action is triggered when this value is exceeded, specified by the `scaleOutAction` property. The value must have a lower minimum delta to the `scaleInThreshold`, depending on the metric, to avoid competing for actions simultaneously. If `properties.policy.unit=TOTAL`, a value &gt;= 40 must be chosen.
     * 
     */
    private Integer scaleOutThreshold;
    /**
     * @return [string] Units of the applied Metric. Possible values are: `PER_HOUR`, `PER_MINUTE`, `PER_SECOND`, `TOTAL`.
     * 
     */
    private String unit;

    private AutoscalingGroupPolicy() {}
    /**
     * @return [string] The Metric that should trigger the scaling actions. Metric values are checked at fixed intervals. Possible values: `INSTANCE_CPU_UTILIZATION_AVERAGE`, `INSTANCE_NETWORK_IN_BYTES`, `INSTANCE_NETWORK_IN_PACKETS`, `INSTANCE_NETWORK_OUT_BYTES`, `INSTANCE_NETWORK_OUT_PACKETS`
     * 
     */
    public String metric() {
        return this.metric;
    }
    /**
     * @return [string] Defines the time range, for which the samples will be aggregated. Default is 120s. *Note that when you set it to values like 5m the API will automatically transform it in PT5M, so the plan will show you a diff in state that should be ignored.*
     * 
     */
    public Optional<String> range() {
        return Optional.ofNullable(this.range);
    }
    /**
     * @return [list] Specifies the action to take when the `scaleInThreshold` is exceeded. Hereby, scaling in is always about removing VMs that are currently associated with this autoscaling group. Default termination policy is OLDEST_SERVER_FIRST.
     * 
     */
    public AutoscalingGroupPolicyScaleInAction scaleInAction() {
        return this.scaleInAction;
    }
    /**
     * @return [int] A lower threshold on the value of `metric`. Will be used with `less than` (&lt;) operator. Exceeding this will start a Scale-In Action as specified by the `scaleInAction` property. The value must have a higher minimum delta to the `scaleOutThreshold` depending on the `metric` to avoid competitive actions at the same time.
     * 
     */
    public Integer scaleInThreshold() {
        return this.scaleInThreshold;
    }
    /**
     * @return [list] Specifies the action to take when the `scaleOutThreshold` is exceeded. Hereby, scaling out is always about adding new VMs to this autoscaling group.
     * 
     */
    public AutoscalingGroupPolicyScaleOutAction scaleOutAction() {
        return this.scaleOutAction;
    }
    /**
     * @return [int] The upper threshold for the value of the `metric`. Used with the `greater than` (&gt;) operator. A scale-out action is triggered when this value is exceeded, specified by the `scaleOutAction` property. The value must have a lower minimum delta to the `scaleInThreshold`, depending on the metric, to avoid competing for actions simultaneously. If `properties.policy.unit=TOTAL`, a value &gt;= 40 must be chosen.
     * 
     */
    public Integer scaleOutThreshold() {
        return this.scaleOutThreshold;
    }
    /**
     * @return [string] Units of the applied Metric. Possible values are: `PER_HOUR`, `PER_MINUTE`, `PER_SECOND`, `TOTAL`.
     * 
     */
    public String unit() {
        return this.unit;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AutoscalingGroupPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String metric;
        private @Nullable String range;
        private AutoscalingGroupPolicyScaleInAction scaleInAction;
        private Integer scaleInThreshold;
        private AutoscalingGroupPolicyScaleOutAction scaleOutAction;
        private Integer scaleOutThreshold;
        private String unit;
        public Builder() {}
        public Builder(AutoscalingGroupPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.metric = defaults.metric;
    	      this.range = defaults.range;
    	      this.scaleInAction = defaults.scaleInAction;
    	      this.scaleInThreshold = defaults.scaleInThreshold;
    	      this.scaleOutAction = defaults.scaleOutAction;
    	      this.scaleOutThreshold = defaults.scaleOutThreshold;
    	      this.unit = defaults.unit;
        }

        @CustomType.Setter
        public Builder metric(String metric) {
            if (metric == null) {
              throw new MissingRequiredPropertyException("AutoscalingGroupPolicy", "metric");
            }
            this.metric = metric;
            return this;
        }
        @CustomType.Setter
        public Builder range(@Nullable String range) {

            this.range = range;
            return this;
        }
        @CustomType.Setter
        public Builder scaleInAction(AutoscalingGroupPolicyScaleInAction scaleInAction) {
            if (scaleInAction == null) {
              throw new MissingRequiredPropertyException("AutoscalingGroupPolicy", "scaleInAction");
            }
            this.scaleInAction = scaleInAction;
            return this;
        }
        @CustomType.Setter
        public Builder scaleInThreshold(Integer scaleInThreshold) {
            if (scaleInThreshold == null) {
              throw new MissingRequiredPropertyException("AutoscalingGroupPolicy", "scaleInThreshold");
            }
            this.scaleInThreshold = scaleInThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder scaleOutAction(AutoscalingGroupPolicyScaleOutAction scaleOutAction) {
            if (scaleOutAction == null) {
              throw new MissingRequiredPropertyException("AutoscalingGroupPolicy", "scaleOutAction");
            }
            this.scaleOutAction = scaleOutAction;
            return this;
        }
        @CustomType.Setter
        public Builder scaleOutThreshold(Integer scaleOutThreshold) {
            if (scaleOutThreshold == null) {
              throw new MissingRequiredPropertyException("AutoscalingGroupPolicy", "scaleOutThreshold");
            }
            this.scaleOutThreshold = scaleOutThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder unit(String unit) {
            if (unit == null) {
              throw new MissingRequiredPropertyException("AutoscalingGroupPolicy", "unit");
            }
            this.unit = unit;
            return this;
        }
        public AutoscalingGroupPolicy build() {
            final var _resultValue = new AutoscalingGroupPolicy();
            _resultValue.metric = metric;
            _resultValue.range = range;
            _resultValue.scaleInAction = scaleInAction;
            _resultValue.scaleInThreshold = scaleInThreshold;
            _resultValue.scaleOutAction = scaleOutAction;
            _resultValue.scaleOutThreshold = scaleOutThreshold;
            _resultValue.unit = unit;
            return _resultValue;
        }
    }
}
