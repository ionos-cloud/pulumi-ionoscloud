// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.ionoscloud.PgClusterArgs;
import com.pulumi.ionoscloud.Utilities;
import com.pulumi.ionoscloud.inputs.PgClusterState;
import com.pulumi.ionoscloud.outputs.PgClusterConnectionPooler;
import com.pulumi.ionoscloud.outputs.PgClusterConnections;
import com.pulumi.ionoscloud.outputs.PgClusterCredentials;
import com.pulumi.ionoscloud.outputs.PgClusterFromBackup;
import com.pulumi.ionoscloud.outputs.PgClusterMaintenanceWindow;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="ionoscloud:index/pgCluster:PgCluster")
public class PgCluster extends com.pulumi.resources.CustomResource {
    /**
     * The S3 location where the backups will be stored.
     * 
     */
    @Export(name="backupLocation", refs={String.class}, tree="[0]")
    private Output<String> backupLocation;

    /**
     * @return The S3 location where the backups will be stored.
     * 
     */
    public Output<String> backupLocation() {
        return this.backupLocation;
    }
    /**
     * Configuration options for the connection pooler
     * 
     */
    @Export(name="connectionPooler", refs={PgClusterConnectionPooler.class}, tree="[0]")
    private Output<PgClusterConnectionPooler> connectionPooler;

    /**
     * @return Configuration options for the connection pooler
     * 
     */
    public Output<PgClusterConnectionPooler> connectionPooler() {
        return this.connectionPooler;
    }
    /**
     * Details about the network connection for your cluster.
     * 
     */
    @Export(name="connections", refs={PgClusterConnections.class}, tree="[0]")
    private Output</* @Nullable */ PgClusterConnections> connections;

    /**
     * @return Details about the network connection for your cluster.
     * 
     */
    public Output<Optional<PgClusterConnections>> connections() {
        return Codegen.optional(this.connections);
    }
    /**
     * The number of CPU cores per replica.
     * 
     */
    @Export(name="cores", refs={Integer.class}, tree="[0]")
    private Output<Integer> cores;

    /**
     * @return The number of CPU cores per replica.
     * 
     */
    public Output<Integer> cores() {
        return this.cores;
    }
    /**
     * Credentials for the database user to be created.
     * 
     */
    @Export(name="credentials", refs={PgClusterCredentials.class}, tree="[0]")
    private Output<PgClusterCredentials> credentials;

    /**
     * @return Credentials for the database user to be created.
     * 
     */
    public Output<PgClusterCredentials> credentials() {
        return this.credentials;
    }
    /**
     * The friendly name of your cluster.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return The friendly name of your cluster.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * The DNS name pointing to your cluster
     * 
     */
    @Export(name="dnsName", refs={String.class}, tree="[0]")
    private Output<String> dnsName;

    /**
     * @return The DNS name pointing to your cluster
     * 
     */
    public Output<String> dnsName() {
        return this.dnsName;
    }
    /**
     * Creates the cluster based on the existing backup.
     * 
     */
    @Export(name="fromBackup", refs={PgClusterFromBackup.class}, tree="[0]")
    private Output</* @Nullable */ PgClusterFromBackup> fromBackup;

    /**
     * @return Creates the cluster based on the existing backup.
     * 
     */
    public Output<Optional<PgClusterFromBackup>> fromBackup() {
        return Codegen.optional(this.fromBackup);
    }
    /**
     * The total number of instances in the cluster (one master and n-1 standbys)
     * 
     */
    @Export(name="instances", refs={Integer.class}, tree="[0]")
    private Output<Integer> instances;

    /**
     * @return The total number of instances in the cluster (one master and n-1 standbys)
     * 
     */
    public Output<Integer> instances() {
        return this.instances;
    }
    /**
     * The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
     * be modified after datacenter creation (disallowed in update requests)
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The physical location where the cluster will be created. This will be where all of your instances live. Property cannot
     * be modified after datacenter creation (disallowed in update requests)
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * a weekly 4 hour-long window, during which maintenance might occur
     * 
     */
    @Export(name="maintenanceWindow", refs={PgClusterMaintenanceWindow.class}, tree="[0]")
    private Output<PgClusterMaintenanceWindow> maintenanceWindow;

    /**
     * @return a weekly 4 hour-long window, during which maintenance might occur
     * 
     */
    public Output<PgClusterMaintenanceWindow> maintenanceWindow() {
        return this.maintenanceWindow;
    }
    /**
     * The PostgreSQL version of your cluster.
     * 
     */
    @Export(name="postgresVersion", refs={String.class}, tree="[0]")
    private Output<String> postgresVersion;

    /**
     * @return The PostgreSQL version of your cluster.
     * 
     */
    public Output<String> postgresVersion() {
        return this.postgresVersion;
    }
    /**
     * The amount of memory per instance in megabytes. Has to be a multiple of 1024.
     * 
     */
    @Export(name="ram", refs={Integer.class}, tree="[0]")
    private Output<Integer> ram;

    /**
     * @return The amount of memory per instance in megabytes. Has to be a multiple of 1024.
     * 
     */
    public Output<Integer> ram() {
        return this.ram;
    }
    /**
     * The amount of storage per instance in megabytes. Has to be a multiple of 2048.
     * 
     */
    @Export(name="storageSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> storageSize;

    /**
     * @return The amount of storage per instance in megabytes. Has to be a multiple of 2048.
     * 
     */
    public Output<Integer> storageSize() {
        return this.storageSize;
    }
    /**
     * The storage type used in your cluster.
     * 
     */
    @Export(name="storageType", refs={String.class}, tree="[0]")
    private Output<String> storageType;

    /**
     * @return The storage type used in your cluster.
     * 
     */
    public Output<String> storageType() {
        return this.storageType;
    }
    /**
     * Represents different modes of replication.
     * 
     */
    @Export(name="synchronizationMode", refs={String.class}, tree="[0]")
    private Output<String> synchronizationMode;

    /**
     * @return Represents different modes of replication.
     * 
     */
    public Output<String> synchronizationMode() {
        return this.synchronizationMode;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PgCluster(java.lang.String name) {
        this(name, PgClusterArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PgCluster(java.lang.String name, PgClusterArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PgCluster(java.lang.String name, PgClusterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("ionoscloud:index/pgCluster:PgCluster", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private PgCluster(java.lang.String name, Output<java.lang.String> id, @Nullable PgClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("ionoscloud:index/pgCluster:PgCluster", name, state, makeResourceOptions(options, id), false);
    }

    private static PgClusterArgs makeArgs(PgClusterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? PgClusterArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PgCluster get(java.lang.String name, Output<java.lang.String> id, @Nullable PgClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new PgCluster(name, id, state, options);
    }
}
