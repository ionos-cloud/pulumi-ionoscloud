// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.dbaas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetMariaDBClusterArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetMariaDBClusterArgs Empty = new GetMariaDBClusterArgs();

    /**
     * [string] Display Name of an existing cluster that you want to search for.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return [string] Display Name of an existing cluster that you want to search for.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * [string] ID of the cluster you want to search for.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return [string] ID of the cluster you want to search for.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * [string] The location of the cluster. Different service endpoints are used based on location, possible options are: &#34;de/fra&#34;, &#34;de/txl&#34;, &#34;es/vit&#34;, &#34;fr/par&#34;, &#34;gb/lhr&#34;, &#34;us/ewr&#34;, &#34;us/las&#34;, &#34;us/mci&#34;. If not set, the endpoint will be the one corresponding to &#34;de/txl&#34;.
     * 
     * &gt; **⚠ WARNING:** `Location` attribute will become required in the future.
     * 
     * Either `display_name` or `id` must be provided. If none or both are provided, the datasource will return an error.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return [string] The location of the cluster. Different service endpoints are used based on location, possible options are: &#34;de/fra&#34;, &#34;de/txl&#34;, &#34;es/vit&#34;, &#34;fr/par&#34;, &#34;gb/lhr&#34;, &#34;us/ewr&#34;, &#34;us/las&#34;, &#34;us/mci&#34;. If not set, the endpoint will be the one corresponding to &#34;de/txl&#34;.
     * 
     * &gt; **⚠ WARNING:** `Location` attribute will become required in the future.
     * 
     * Either `display_name` or `id` must be provided. If none or both are provided, the datasource will return an error.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    private GetMariaDBClusterArgs() {}

    private GetMariaDBClusterArgs(GetMariaDBClusterArgs $) {
        this.displayName = $.displayName;
        this.id = $.id;
        this.location = $.location;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetMariaDBClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetMariaDBClusterArgs $;

        public Builder() {
            $ = new GetMariaDBClusterArgs();
        }

        public Builder(GetMariaDBClusterArgs defaults) {
            $ = new GetMariaDBClusterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName [string] Display Name of an existing cluster that you want to search for.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName [string] Display Name of an existing cluster that you want to search for.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param id [string] ID of the cluster you want to search for.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id [string] ID of the cluster you want to search for.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param location [string] The location of the cluster. Different service endpoints are used based on location, possible options are: &#34;de/fra&#34;, &#34;de/txl&#34;, &#34;es/vit&#34;, &#34;fr/par&#34;, &#34;gb/lhr&#34;, &#34;us/ewr&#34;, &#34;us/las&#34;, &#34;us/mci&#34;. If not set, the endpoint will be the one corresponding to &#34;de/txl&#34;.
         * 
         * &gt; **⚠ WARNING:** `Location` attribute will become required in the future.
         * 
         * Either `display_name` or `id` must be provided. If none or both are provided, the datasource will return an error.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location [string] The location of the cluster. Different service endpoints are used based on location, possible options are: &#34;de/fra&#34;, &#34;de/txl&#34;, &#34;es/vit&#34;, &#34;fr/par&#34;, &#34;gb/lhr&#34;, &#34;us/ewr&#34;, &#34;us/las&#34;, &#34;us/mci&#34;. If not set, the endpoint will be the one corresponding to &#34;de/txl&#34;.
         * 
         * &gt; **⚠ WARNING:** `Location` attribute will become required in the future.
         * 
         * Either `display_name` or `id` must be provided. If none or both are provided, the datasource will return an error.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        public GetMariaDBClusterArgs build() {
            return $;
        }
    }

}
