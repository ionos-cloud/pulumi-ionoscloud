// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.outputs.GetGroupUser;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetGroupResult {
    /**
     * @return The group will be allowed to access the activity log.
     * 
     */
    private Boolean accessActivityLog;
    /**
     * @return The group will be allowed to access and manage certificates.
     * 
     */
    private Boolean accessAndManageCertificates;
    /**
     * @return The group will be allowed to access and manage monitoring.
     * 
     */
    private Boolean accessAndManageMonitoring;
    /**
     * @return The group will be allowed to create backup unit privilege.
     * 
     */
    private Boolean createBackupUnit;
    /**
     * @return The group will be allowed to create virtual data centers.
     * 
     */
    private Boolean createDatacenter;
    /**
     * @return The group will be allowed to create flow log.
     * 
     */
    private Boolean createFlowLog;
    /**
     * @return The group will be allowed to create internet access privilege.
     * 
     */
    private Boolean createInternetAccess;
    /**
     * @return The group will be allowed to create kubernetes cluster privilege.
     * 
     */
    private Boolean createK8sCluster;
    /**
     * @return The group will be allowed to create Cross Connects privilege.
     * 
     */
    private Boolean createPcc;
    /**
     * @return The group will be allowed to create snapshots.
     * 
     */
    private Boolean createSnapshot;
    /**
     * @return The id of the group.
     * 
     */
    private @Nullable String id;
    /**
     * @return Privilege for a group to manage DBaaS related functionality.
     * 
     */
    private Boolean manageDbaas;
    /**
     * @return A name for the group.
     * 
     */
    private @Nullable String name;
    /**
     * @return The group will be allowed to reserve IP addresses.
     * 
     */
    private Boolean reserveIp;
    /**
     * @return The group will have S3 privilege.
     * 
     */
    private Boolean s3Privilege;
    /**
     * @return List of users in group.
     * 
     */
    private List<GetGroupUser> users;

    private GetGroupResult() {}
    /**
     * @return The group will be allowed to access the activity log.
     * 
     */
    public Boolean accessActivityLog() {
        return this.accessActivityLog;
    }
    /**
     * @return The group will be allowed to access and manage certificates.
     * 
     */
    public Boolean accessAndManageCertificates() {
        return this.accessAndManageCertificates;
    }
    /**
     * @return The group will be allowed to access and manage monitoring.
     * 
     */
    public Boolean accessAndManageMonitoring() {
        return this.accessAndManageMonitoring;
    }
    /**
     * @return The group will be allowed to create backup unit privilege.
     * 
     */
    public Boolean createBackupUnit() {
        return this.createBackupUnit;
    }
    /**
     * @return The group will be allowed to create virtual data centers.
     * 
     */
    public Boolean createDatacenter() {
        return this.createDatacenter;
    }
    /**
     * @return The group will be allowed to create flow log.
     * 
     */
    public Boolean createFlowLog() {
        return this.createFlowLog;
    }
    /**
     * @return The group will be allowed to create internet access privilege.
     * 
     */
    public Boolean createInternetAccess() {
        return this.createInternetAccess;
    }
    /**
     * @return The group will be allowed to create kubernetes cluster privilege.
     * 
     */
    public Boolean createK8sCluster() {
        return this.createK8sCluster;
    }
    /**
     * @return The group will be allowed to create Cross Connects privilege.
     * 
     */
    public Boolean createPcc() {
        return this.createPcc;
    }
    /**
     * @return The group will be allowed to create snapshots.
     * 
     */
    public Boolean createSnapshot() {
        return this.createSnapshot;
    }
    /**
     * @return The id of the group.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Privilege for a group to manage DBaaS related functionality.
     * 
     */
    public Boolean manageDbaas() {
        return this.manageDbaas;
    }
    /**
     * @return A name for the group.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The group will be allowed to reserve IP addresses.
     * 
     */
    public Boolean reserveIp() {
        return this.reserveIp;
    }
    /**
     * @return The group will have S3 privilege.
     * 
     */
    public Boolean s3Privilege() {
        return this.s3Privilege;
    }
    /**
     * @return List of users in group.
     * 
     */
    public List<GetGroupUser> users() {
        return this.users;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGroupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean accessActivityLog;
        private Boolean accessAndManageCertificates;
        private Boolean accessAndManageMonitoring;
        private Boolean createBackupUnit;
        private Boolean createDatacenter;
        private Boolean createFlowLog;
        private Boolean createInternetAccess;
        private Boolean createK8sCluster;
        private Boolean createPcc;
        private Boolean createSnapshot;
        private @Nullable String id;
        private Boolean manageDbaas;
        private @Nullable String name;
        private Boolean reserveIp;
        private Boolean s3Privilege;
        private List<GetGroupUser> users;
        public Builder() {}
        public Builder(GetGroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessActivityLog = defaults.accessActivityLog;
    	      this.accessAndManageCertificates = defaults.accessAndManageCertificates;
    	      this.accessAndManageMonitoring = defaults.accessAndManageMonitoring;
    	      this.createBackupUnit = defaults.createBackupUnit;
    	      this.createDatacenter = defaults.createDatacenter;
    	      this.createFlowLog = defaults.createFlowLog;
    	      this.createInternetAccess = defaults.createInternetAccess;
    	      this.createK8sCluster = defaults.createK8sCluster;
    	      this.createPcc = defaults.createPcc;
    	      this.createSnapshot = defaults.createSnapshot;
    	      this.id = defaults.id;
    	      this.manageDbaas = defaults.manageDbaas;
    	      this.name = defaults.name;
    	      this.reserveIp = defaults.reserveIp;
    	      this.s3Privilege = defaults.s3Privilege;
    	      this.users = defaults.users;
        }

        @CustomType.Setter
        public Builder accessActivityLog(Boolean accessActivityLog) {
            if (accessActivityLog == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "accessActivityLog");
            }
            this.accessActivityLog = accessActivityLog;
            return this;
        }
        @CustomType.Setter
        public Builder accessAndManageCertificates(Boolean accessAndManageCertificates) {
            if (accessAndManageCertificates == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "accessAndManageCertificates");
            }
            this.accessAndManageCertificates = accessAndManageCertificates;
            return this;
        }
        @CustomType.Setter
        public Builder accessAndManageMonitoring(Boolean accessAndManageMonitoring) {
            if (accessAndManageMonitoring == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "accessAndManageMonitoring");
            }
            this.accessAndManageMonitoring = accessAndManageMonitoring;
            return this;
        }
        @CustomType.Setter
        public Builder createBackupUnit(Boolean createBackupUnit) {
            if (createBackupUnit == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "createBackupUnit");
            }
            this.createBackupUnit = createBackupUnit;
            return this;
        }
        @CustomType.Setter
        public Builder createDatacenter(Boolean createDatacenter) {
            if (createDatacenter == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "createDatacenter");
            }
            this.createDatacenter = createDatacenter;
            return this;
        }
        @CustomType.Setter
        public Builder createFlowLog(Boolean createFlowLog) {
            if (createFlowLog == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "createFlowLog");
            }
            this.createFlowLog = createFlowLog;
            return this;
        }
        @CustomType.Setter
        public Builder createInternetAccess(Boolean createInternetAccess) {
            if (createInternetAccess == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "createInternetAccess");
            }
            this.createInternetAccess = createInternetAccess;
            return this;
        }
        @CustomType.Setter
        public Builder createK8sCluster(Boolean createK8sCluster) {
            if (createK8sCluster == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "createK8sCluster");
            }
            this.createK8sCluster = createK8sCluster;
            return this;
        }
        @CustomType.Setter
        public Builder createPcc(Boolean createPcc) {
            if (createPcc == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "createPcc");
            }
            this.createPcc = createPcc;
            return this;
        }
        @CustomType.Setter
        public Builder createSnapshot(Boolean createSnapshot) {
            if (createSnapshot == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "createSnapshot");
            }
            this.createSnapshot = createSnapshot;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder manageDbaas(Boolean manageDbaas) {
            if (manageDbaas == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "manageDbaas");
            }
            this.manageDbaas = manageDbaas;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder reserveIp(Boolean reserveIp) {
            if (reserveIp == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "reserveIp");
            }
            this.reserveIp = reserveIp;
            return this;
        }
        @CustomType.Setter
        public Builder s3Privilege(Boolean s3Privilege) {
            if (s3Privilege == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "s3Privilege");
            }
            this.s3Privilege = s3Privilege;
            return this;
        }
        @CustomType.Setter
        public Builder users(List<GetGroupUser> users) {
            if (users == null) {
              throw new MissingRequiredPropertyException("GetGroupResult", "users");
            }
            this.users = users;
            return this;
        }
        public Builder users(GetGroupUser... users) {
            return users(List.of(users));
        }
        public GetGroupResult build() {
            final var _resultValue = new GetGroupResult();
            _resultValue.accessActivityLog = accessActivityLog;
            _resultValue.accessAndManageCertificates = accessAndManageCertificates;
            _resultValue.accessAndManageMonitoring = accessAndManageMonitoring;
            _resultValue.createBackupUnit = createBackupUnit;
            _resultValue.createDatacenter = createDatacenter;
            _resultValue.createFlowLog = createFlowLog;
            _resultValue.createInternetAccess = createInternetAccess;
            _resultValue.createK8sCluster = createK8sCluster;
            _resultValue.createPcc = createPcc;
            _resultValue.createSnapshot = createSnapshot;
            _resultValue.id = id;
            _resultValue.manageDbaas = manageDbaas;
            _resultValue.name = name;
            _resultValue.reserveIp = reserveIp;
            _resultValue.s3Privilege = s3Privilege;
            _resultValue.users = users;
            return _resultValue;
        }
    }
}
