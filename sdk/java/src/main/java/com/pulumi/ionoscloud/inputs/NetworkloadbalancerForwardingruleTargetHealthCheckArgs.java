// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkloadbalancerForwardingruleTargetHealthCheckArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkloadbalancerForwardingruleTargetHealthCheckArgs Empty = new NetworkloadbalancerForwardingruleTargetHealthCheckArgs();

    /**
     * [boolean] Check specifies whether the target VM&#39;s health is checked.
     * 
     */
    @Import(name="check")
    private @Nullable Output<Boolean> check;

    /**
     * @return [boolean] Check specifies whether the target VM&#39;s health is checked.
     * 
     */
    public Optional<Output<Boolean>> check() {
        return Optional.ofNullable(this.check);
    }

    /**
     * [int] CheckInterval determines the duration (in milliseconds) between consecutive health checks. If unspecified a default of 2000 ms is used.
     * 
     */
    @Import(name="checkInterval")
    private @Nullable Output<Integer> checkInterval;

    /**
     * @return [int] CheckInterval determines the duration (in milliseconds) between consecutive health checks. If unspecified a default of 2000 ms is used.
     * 
     */
    public Optional<Output<Integer>> checkInterval() {
        return Optional.ofNullable(this.checkInterval);
    }

    /**
     * [boolean] Maintenance specifies if a target VM should be marked as down, even if it is not.
     * 
     */
    @Import(name="maintenance")
    private @Nullable Output<Boolean> maintenance;

    /**
     * @return [boolean] Maintenance specifies if a target VM should be marked as down, even if it is not.
     * 
     */
    public Optional<Output<Boolean>> maintenance() {
        return Optional.ofNullable(this.maintenance);
    }

    private NetworkloadbalancerForwardingruleTargetHealthCheckArgs() {}

    private NetworkloadbalancerForwardingruleTargetHealthCheckArgs(NetworkloadbalancerForwardingruleTargetHealthCheckArgs $) {
        this.check = $.check;
        this.checkInterval = $.checkInterval;
        this.maintenance = $.maintenance;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkloadbalancerForwardingruleTargetHealthCheckArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkloadbalancerForwardingruleTargetHealthCheckArgs $;

        public Builder() {
            $ = new NetworkloadbalancerForwardingruleTargetHealthCheckArgs();
        }

        public Builder(NetworkloadbalancerForwardingruleTargetHealthCheckArgs defaults) {
            $ = new NetworkloadbalancerForwardingruleTargetHealthCheckArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param check [boolean] Check specifies whether the target VM&#39;s health is checked.
         * 
         * @return builder
         * 
         */
        public Builder check(@Nullable Output<Boolean> check) {
            $.check = check;
            return this;
        }

        /**
         * @param check [boolean] Check specifies whether the target VM&#39;s health is checked.
         * 
         * @return builder
         * 
         */
        public Builder check(Boolean check) {
            return check(Output.of(check));
        }

        /**
         * @param checkInterval [int] CheckInterval determines the duration (in milliseconds) between consecutive health checks. If unspecified a default of 2000 ms is used.
         * 
         * @return builder
         * 
         */
        public Builder checkInterval(@Nullable Output<Integer> checkInterval) {
            $.checkInterval = checkInterval;
            return this;
        }

        /**
         * @param checkInterval [int] CheckInterval determines the duration (in milliseconds) between consecutive health checks. If unspecified a default of 2000 ms is used.
         * 
         * @return builder
         * 
         */
        public Builder checkInterval(Integer checkInterval) {
            return checkInterval(Output.of(checkInterval));
        }

        /**
         * @param maintenance [boolean] Maintenance specifies if a target VM should be marked as down, even if it is not.
         * 
         * @return builder
         * 
         */
        public Builder maintenance(@Nullable Output<Boolean> maintenance) {
            $.maintenance = maintenance;
            return this;
        }

        /**
         * @param maintenance [boolean] Maintenance specifies if a target VM should be marked as down, even if it is not.
         * 
         * @return builder
         * 
         */
        public Builder maintenance(Boolean maintenance) {
            return maintenance(Output.of(maintenance));
        }

        public NetworkloadbalancerForwardingruleTargetHealthCheckArgs build() {
            return $;
        }
    }

}
