// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.inputs.CdnDistributionRoutingRuleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CdnDistributionArgs extends com.pulumi.resources.ResourceArgs {

    public static final CdnDistributionArgs Empty = new CdnDistributionArgs();

    /**
     * [string] The ID of the certificate to use for the distribution. You can create certificates with the certificate resource.
     * 
     */
    @Import(name="certificateId")
    private @Nullable Output<String> certificateId;

    /**
     * @return [string] The ID of the certificate to use for the distribution. You can create certificates with the certificate resource.
     * 
     */
    public Optional<Output<String>> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }

    /**
     * [string] The domain of the distribution.
     * 
     */
    @Import(name="domain", required=true)
    private Output<String> domain;

    /**
     * @return [string] The domain of the distribution.
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }

    /**
     * [list] The routing rules for the distribution.
     * 
     */
    @Import(name="routingRules", required=true)
    private Output<List<CdnDistributionRoutingRuleArgs>> routingRules;

    /**
     * @return [list] The routing rules for the distribution.
     * 
     */
    public Output<List<CdnDistributionRoutingRuleArgs>> routingRules() {
        return this.routingRules;
    }

    private CdnDistributionArgs() {}

    private CdnDistributionArgs(CdnDistributionArgs $) {
        this.certificateId = $.certificateId;
        this.domain = $.domain;
        this.routingRules = $.routingRules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CdnDistributionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CdnDistributionArgs $;

        public Builder() {
            $ = new CdnDistributionArgs();
        }

        public Builder(CdnDistributionArgs defaults) {
            $ = new CdnDistributionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateId [string] The ID of the certificate to use for the distribution. You can create certificates with the certificate resource.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(@Nullable Output<String> certificateId) {
            $.certificateId = certificateId;
            return this;
        }

        /**
         * @param certificateId [string] The ID of the certificate to use for the distribution. You can create certificates with the certificate resource.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(String certificateId) {
            return certificateId(Output.of(certificateId));
        }

        /**
         * @param domain [string] The domain of the distribution.
         * 
         * @return builder
         * 
         */
        public Builder domain(Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain [string] The domain of the distribution.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param routingRules [list] The routing rules for the distribution.
         * 
         * @return builder
         * 
         */
        public Builder routingRules(Output<List<CdnDistributionRoutingRuleArgs>> routingRules) {
            $.routingRules = routingRules;
            return this;
        }

        /**
         * @param routingRules [list] The routing rules for the distribution.
         * 
         * @return builder
         * 
         */
        public Builder routingRules(List<CdnDistributionRoutingRuleArgs> routingRules) {
            return routingRules(Output.of(routingRules));
        }

        /**
         * @param routingRules [list] The routing rules for the distribution.
         * 
         * @return builder
         * 
         */
        public Builder routingRules(CdnDistributionRoutingRuleArgs... routingRules) {
            return routingRules(List.of(routingRules));
        }

        public CdnDistributionArgs build() {
            if ($.domain == null) {
                throw new MissingRequiredPropertyException("CdnDistributionArgs", "domain");
            }
            if ($.routingRules == null) {
                throw new MissingRequiredPropertyException("CdnDistributionArgs", "routingRules");
            }
            return $;
        }
    }

}
