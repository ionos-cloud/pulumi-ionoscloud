// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.dbaas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.dbaas.outputs.GetInMemoryDBReplicaSetConnection;
import com.pulumi.ionoscloud.dbaas.outputs.GetInMemoryDBReplicaSetCredential;
import com.pulumi.ionoscloud.dbaas.outputs.GetInMemoryDBReplicaSetMaintenanceWindow;
import com.pulumi.ionoscloud.dbaas.outputs.GetInMemoryDBReplicaSetResource;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInMemoryDBReplicaSetResult {
    /**
     * @return [object] The network connection for your replica set. Only one connection is allowed. It includes:
     * 
     */
    private List<GetInMemoryDBReplicaSetConnection> connections;
    /**
     * @return [object] Credentials for the InMemoryDB replicaset, only one type of password can be used since they are mutually exclusive. It includes:
     * 
     */
    private List<GetInMemoryDBReplicaSetCredential> credentials;
    private String displayName;
    /**
     * @return [string] The DNS name pointing to your replica set. Will be used to connect to the active/standalone instance.
     * 
     */
    private String dnsName;
    /**
     * @return [string] The eviction policy for the replica set, possible values are:
     * 
     */
    private String evictionPolicy;
    private String id;
    private @Nullable String location;
    /**
     * @return A weekly 4 hour-long window, during which maintenance might occur. It includes:
     * 
     */
    private List<GetInMemoryDBReplicaSetMaintenanceWindow> maintenanceWindows;
    /**
     * @return [string] Specifies How and If data is persisted, possible values are:
     * * `None` - Data is inMemory only and will not be persisted. Useful for cache only applications.
     * * `AOF` - (Append Only File) AOF persistence logs every write operation received by the server. These operations can then be replayed again at server startup, reconstructing the original dataset. Commands are logged using the same format as the InMemoryDB protocol itself.
     * * `RDB` - RDB persistence performs snapshots of the current in memory state.
     * * `RDB_AOF` - Both, RDB and AOF persistence are enabled.
     * 
     */
    private String persistenceMode;
    /**
     * @return [int] The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the value is 1. In all other cases, the value is &gt; 1. The replicas will not be available as read replicas, they are only standby for a failure of the active instance.
     * 
     */
    private Integer replicas;
    /**
     * @return [object] The resources of the individual replicas. It includes:
     * 
     */
    private List<GetInMemoryDBReplicaSetResource> resources;
    /**
     * @return [string] The InMemoryDB version of your replica set.
     * 
     */
    private String version;

    private GetInMemoryDBReplicaSetResult() {}
    /**
     * @return [object] The network connection for your replica set. Only one connection is allowed. It includes:
     * 
     */
    public List<GetInMemoryDBReplicaSetConnection> connections() {
        return this.connections;
    }
    /**
     * @return [object] Credentials for the InMemoryDB replicaset, only one type of password can be used since they are mutually exclusive. It includes:
     * 
     */
    public List<GetInMemoryDBReplicaSetCredential> credentials() {
        return this.credentials;
    }
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return [string] The DNS name pointing to your replica set. Will be used to connect to the active/standalone instance.
     * 
     */
    public String dnsName() {
        return this.dnsName;
    }
    /**
     * @return [string] The eviction policy for the replica set, possible values are:
     * 
     */
    public String evictionPolicy() {
        return this.evictionPolicy;
    }
    public String id() {
        return this.id;
    }
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return A weekly 4 hour-long window, during which maintenance might occur. It includes:
     * 
     */
    public List<GetInMemoryDBReplicaSetMaintenanceWindow> maintenanceWindows() {
        return this.maintenanceWindows;
    }
    /**
     * @return [string] Specifies How and If data is persisted, possible values are:
     * * `None` - Data is inMemory only and will not be persisted. Useful for cache only applications.
     * * `AOF` - (Append Only File) AOF persistence logs every write operation received by the server. These operations can then be replayed again at server startup, reconstructing the original dataset. Commands are logged using the same format as the InMemoryDB protocol itself.
     * * `RDB` - RDB persistence performs snapshots of the current in memory state.
     * * `RDB_AOF` - Both, RDB and AOF persistence are enabled.
     * 
     */
    public String persistenceMode() {
        return this.persistenceMode;
    }
    /**
     * @return [int] The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the value is 1. In all other cases, the value is &gt; 1. The replicas will not be available as read replicas, they are only standby for a failure of the active instance.
     * 
     */
    public Integer replicas() {
        return this.replicas;
    }
    /**
     * @return [object] The resources of the individual replicas. It includes:
     * 
     */
    public List<GetInMemoryDBReplicaSetResource> resources() {
        return this.resources;
    }
    /**
     * @return [string] The InMemoryDB version of your replica set.
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInMemoryDBReplicaSetResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetInMemoryDBReplicaSetConnection> connections;
        private List<GetInMemoryDBReplicaSetCredential> credentials;
        private String displayName;
        private String dnsName;
        private String evictionPolicy;
        private String id;
        private @Nullable String location;
        private List<GetInMemoryDBReplicaSetMaintenanceWindow> maintenanceWindows;
        private String persistenceMode;
        private Integer replicas;
        private List<GetInMemoryDBReplicaSetResource> resources;
        private String version;
        public Builder() {}
        public Builder(GetInMemoryDBReplicaSetResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connections = defaults.connections;
    	      this.credentials = defaults.credentials;
    	      this.displayName = defaults.displayName;
    	      this.dnsName = defaults.dnsName;
    	      this.evictionPolicy = defaults.evictionPolicy;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.maintenanceWindows = defaults.maintenanceWindows;
    	      this.persistenceMode = defaults.persistenceMode;
    	      this.replicas = defaults.replicas;
    	      this.resources = defaults.resources;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder connections(List<GetInMemoryDBReplicaSetConnection> connections) {
            if (connections == null) {
              throw new MissingRequiredPropertyException("GetInMemoryDBReplicaSetResult", "connections");
            }
            this.connections = connections;
            return this;
        }
        public Builder connections(GetInMemoryDBReplicaSetConnection... connections) {
            return connections(List.of(connections));
        }
        @CustomType.Setter
        public Builder credentials(List<GetInMemoryDBReplicaSetCredential> credentials) {
            if (credentials == null) {
              throw new MissingRequiredPropertyException("GetInMemoryDBReplicaSetResult", "credentials");
            }
            this.credentials = credentials;
            return this;
        }
        public Builder credentials(GetInMemoryDBReplicaSetCredential... credentials) {
            return credentials(List.of(credentials));
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetInMemoryDBReplicaSetResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder dnsName(String dnsName) {
            if (dnsName == null) {
              throw new MissingRequiredPropertyException("GetInMemoryDBReplicaSetResult", "dnsName");
            }
            this.dnsName = dnsName;
            return this;
        }
        @CustomType.Setter
        public Builder evictionPolicy(String evictionPolicy) {
            if (evictionPolicy == null) {
              throw new MissingRequiredPropertyException("GetInMemoryDBReplicaSetResult", "evictionPolicy");
            }
            this.evictionPolicy = evictionPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInMemoryDBReplicaSetResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {

            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceWindows(List<GetInMemoryDBReplicaSetMaintenanceWindow> maintenanceWindows) {
            if (maintenanceWindows == null) {
              throw new MissingRequiredPropertyException("GetInMemoryDBReplicaSetResult", "maintenanceWindows");
            }
            this.maintenanceWindows = maintenanceWindows;
            return this;
        }
        public Builder maintenanceWindows(GetInMemoryDBReplicaSetMaintenanceWindow... maintenanceWindows) {
            return maintenanceWindows(List.of(maintenanceWindows));
        }
        @CustomType.Setter
        public Builder persistenceMode(String persistenceMode) {
            if (persistenceMode == null) {
              throw new MissingRequiredPropertyException("GetInMemoryDBReplicaSetResult", "persistenceMode");
            }
            this.persistenceMode = persistenceMode;
            return this;
        }
        @CustomType.Setter
        public Builder replicas(Integer replicas) {
            if (replicas == null) {
              throw new MissingRequiredPropertyException("GetInMemoryDBReplicaSetResult", "replicas");
            }
            this.replicas = replicas;
            return this;
        }
        @CustomType.Setter
        public Builder resources(List<GetInMemoryDBReplicaSetResource> resources) {
            if (resources == null) {
              throw new MissingRequiredPropertyException("GetInMemoryDBReplicaSetResult", "resources");
            }
            this.resources = resources;
            return this;
        }
        public Builder resources(GetInMemoryDBReplicaSetResource... resources) {
            return resources(List.of(resources));
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetInMemoryDBReplicaSetResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetInMemoryDBReplicaSetResult build() {
            final var _resultValue = new GetInMemoryDBReplicaSetResult();
            _resultValue.connections = connections;
            _resultValue.credentials = credentials;
            _resultValue.displayName = displayName;
            _resultValue.dnsName = dnsName;
            _resultValue.evictionPolicy = evictionPolicy;
            _resultValue.id = id;
            _resultValue.location = location;
            _resultValue.maintenanceWindows = maintenanceWindows;
            _resultValue.persistenceMode = persistenceMode;
            _resultValue.replicas = replicas;
            _resultValue.resources = resources;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
