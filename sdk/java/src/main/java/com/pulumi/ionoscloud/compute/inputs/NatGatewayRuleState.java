// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.ionoscloud.compute.inputs.NatGatewayRuleTargetPortRangeArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NatGatewayRuleState extends com.pulumi.resources.ResourceArgs {

    public static final NatGatewayRuleState Empty = new NatGatewayRuleState();

    /**
     * [string] A Datacenter&#39;s UUID.
     * 
     */
    @Import(name="datacenterId")
    private @Nullable Output<String> datacenterId;

    /**
     * @return [string] A Datacenter&#39;s UUID.
     * 
     */
    public Optional<Output<String>> datacenterId() {
        return Optional.ofNullable(this.datacenterId);
    }

    /**
     * [string] Name of the NAT gateway rule.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return [string] Name of the NAT gateway rule.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * [string] Nat Gateway&#39;s UUID.
     * 
     */
    @Import(name="natgatewayId")
    private @Nullable Output<String> natgatewayId;

    /**
     * @return [string] Nat Gateway&#39;s UUID.
     * 
     */
    public Optional<Output<String>> natgatewayId() {
        return Optional.ofNullable(this.natgatewayId);
    }

    /**
     * [string] Protocol of the NAT gateway rule. Defaults to ALL. If protocol is &#39;ICMP&#39; then targetPortRange start and end cannot be set.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return [string] Protocol of the NAT gateway rule. Defaults to ALL. If protocol is &#39;ICMP&#39; then targetPortRange start and end cannot be set.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * [string] Public IP address of the NAT gateway rule. Specifies the address used for masking outgoing packets source address field. Should be one of the customer reserved IP address already configured on the NAT gateway resource.
     * 
     */
    @Import(name="publicIp")
    private @Nullable Output<String> publicIp;

    /**
     * @return [string] Public IP address of the NAT gateway rule. Specifies the address used for masking outgoing packets source address field. Should be one of the customer reserved IP address already configured on the NAT gateway resource.
     * 
     */
    public Optional<Output<String>> publicIp() {
        return Optional.ofNullable(this.publicIp);
    }

    /**
     * [string] Source subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on the packets source IP address.
     * 
     */
    @Import(name="sourceSubnet")
    private @Nullable Output<String> sourceSubnet;

    /**
     * @return [string] Source subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on the packets source IP address.
     * 
     */
    public Optional<Output<String>> sourceSubnet() {
        return Optional.ofNullable(this.sourceSubnet);
    }

    /**
     * Target port range of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on destination port. If none is provided, rule will match any port.
     * 
     */
    @Import(name="targetPortRange")
    private @Nullable Output<NatGatewayRuleTargetPortRangeArgs> targetPortRange;

    /**
     * @return Target port range of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on destination port. If none is provided, rule will match any port.
     * 
     */
    public Optional<Output<NatGatewayRuleTargetPortRangeArgs>> targetPortRange() {
        return Optional.ofNullable(this.targetPortRange);
    }

    /**
     * [string] Target or destination subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on the packets destination IP address. If none is provided, rule will match any address.
     * 
     */
    @Import(name="targetSubnet")
    private @Nullable Output<String> targetSubnet;

    /**
     * @return [string] Target or destination subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on the packets destination IP address. If none is provided, rule will match any address.
     * 
     */
    public Optional<Output<String>> targetSubnet() {
        return Optional.ofNullable(this.targetSubnet);
    }

    /**
     * [string] Type of the NAT gateway rule.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return [string] Type of the NAT gateway rule.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private NatGatewayRuleState() {}

    private NatGatewayRuleState(NatGatewayRuleState $) {
        this.datacenterId = $.datacenterId;
        this.name = $.name;
        this.natgatewayId = $.natgatewayId;
        this.protocol = $.protocol;
        this.publicIp = $.publicIp;
        this.sourceSubnet = $.sourceSubnet;
        this.targetPortRange = $.targetPortRange;
        this.targetSubnet = $.targetSubnet;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NatGatewayRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NatGatewayRuleState $;

        public Builder() {
            $ = new NatGatewayRuleState();
        }

        public Builder(NatGatewayRuleState defaults) {
            $ = new NatGatewayRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param datacenterId [string] A Datacenter&#39;s UUID.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(@Nullable Output<String> datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        /**
         * @param datacenterId [string] A Datacenter&#39;s UUID.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(String datacenterId) {
            return datacenterId(Output.of(datacenterId));
        }

        /**
         * @param name [string] Name of the NAT gateway rule.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [string] Name of the NAT gateway rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param natgatewayId [string] Nat Gateway&#39;s UUID.
         * 
         * @return builder
         * 
         */
        public Builder natgatewayId(@Nullable Output<String> natgatewayId) {
            $.natgatewayId = natgatewayId;
            return this;
        }

        /**
         * @param natgatewayId [string] Nat Gateway&#39;s UUID.
         * 
         * @return builder
         * 
         */
        public Builder natgatewayId(String natgatewayId) {
            return natgatewayId(Output.of(natgatewayId));
        }

        /**
         * @param protocol [string] Protocol of the NAT gateway rule. Defaults to ALL. If protocol is &#39;ICMP&#39; then targetPortRange start and end cannot be set.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol [string] Protocol of the NAT gateway rule. Defaults to ALL. If protocol is &#39;ICMP&#39; then targetPortRange start and end cannot be set.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param publicIp [string] Public IP address of the NAT gateway rule. Specifies the address used for masking outgoing packets source address field. Should be one of the customer reserved IP address already configured on the NAT gateway resource.
         * 
         * @return builder
         * 
         */
        public Builder publicIp(@Nullable Output<String> publicIp) {
            $.publicIp = publicIp;
            return this;
        }

        /**
         * @param publicIp [string] Public IP address of the NAT gateway rule. Specifies the address used for masking outgoing packets source address field. Should be one of the customer reserved IP address already configured on the NAT gateway resource.
         * 
         * @return builder
         * 
         */
        public Builder publicIp(String publicIp) {
            return publicIp(Output.of(publicIp));
        }

        /**
         * @param sourceSubnet [string] Source subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on the packets source IP address.
         * 
         * @return builder
         * 
         */
        public Builder sourceSubnet(@Nullable Output<String> sourceSubnet) {
            $.sourceSubnet = sourceSubnet;
            return this;
        }

        /**
         * @param sourceSubnet [string] Source subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on the packets source IP address.
         * 
         * @return builder
         * 
         */
        public Builder sourceSubnet(String sourceSubnet) {
            return sourceSubnet(Output.of(sourceSubnet));
        }

        /**
         * @param targetPortRange Target port range of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on destination port. If none is provided, rule will match any port.
         * 
         * @return builder
         * 
         */
        public Builder targetPortRange(@Nullable Output<NatGatewayRuleTargetPortRangeArgs> targetPortRange) {
            $.targetPortRange = targetPortRange;
            return this;
        }

        /**
         * @param targetPortRange Target port range of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on destination port. If none is provided, rule will match any port.
         * 
         * @return builder
         * 
         */
        public Builder targetPortRange(NatGatewayRuleTargetPortRangeArgs targetPortRange) {
            return targetPortRange(Output.of(targetPortRange));
        }

        /**
         * @param targetSubnet [string] Target or destination subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on the packets destination IP address. If none is provided, rule will match any address.
         * 
         * @return builder
         * 
         */
        public Builder targetSubnet(@Nullable Output<String> targetSubnet) {
            $.targetSubnet = targetSubnet;
            return this;
        }

        /**
         * @param targetSubnet [string] Target or destination subnet of the NAT gateway rule. For SNAT rules it specifies which packets this translation rule applies to based on the packets destination IP address. If none is provided, rule will match any address.
         * 
         * @return builder
         * 
         */
        public Builder targetSubnet(String targetSubnet) {
            return targetSubnet(Output.of(targetSubnet));
        }

        /**
         * @param type [string] Type of the NAT gateway rule.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type [string] Type of the NAT gateway rule.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public NatGatewayRuleState build() {
            return $;
        }
    }

}
