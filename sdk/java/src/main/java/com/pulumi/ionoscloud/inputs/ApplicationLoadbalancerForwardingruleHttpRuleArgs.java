// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.inputs.ApplicationLoadbalancerForwardingruleHttpRuleConditionArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationLoadbalancerForwardingruleHttpRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationLoadbalancerForwardingruleHttpRuleArgs Empty = new ApplicationLoadbalancerForwardingruleHttpRuleArgs();

    /**
     * [list] - An array of items in the collection.The action is only performed if each and every condition is met; if no conditions are set, the rule will always be performed.
     * 
     */
    @Import(name="conditions")
    private @Nullable Output<List<ApplicationLoadbalancerForwardingruleHttpRuleConditionArgs>> conditions;

    /**
     * @return [list] - An array of items in the collection.The action is only performed if each and every condition is met; if no conditions are set, the rule will always be performed.
     * 
     */
    public Optional<Output<List<ApplicationLoadbalancerForwardingruleHttpRuleConditionArgs>>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * [string] Valid only for STATIC actions.
     * 
     */
    @Import(name="contentType")
    private @Nullable Output<String> contentType;

    /**
     * @return [string] Valid only for STATIC actions.
     * 
     */
    public Optional<Output<String>> contentType() {
        return Optional.ofNullable(this.contentType);
    }

    /**
     * [bool] Default is false; valid only for REDIRECT actions.
     * 
     */
    @Import(name="dropQuery")
    private @Nullable Output<Boolean> dropQuery;

    /**
     * @return [bool] Default is false; valid only for REDIRECT actions.
     * 
     */
    public Optional<Output<Boolean>> dropQuery() {
        return Optional.ofNullable(this.dropQuery);
    }

    /**
     * [string] The location for redirecting; mandatory and valid only for REDIRECT actions.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return [string] The location for redirecting; mandatory and valid only for REDIRECT actions.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * [string] The unique name of the Application Load Balancer HTTP rule.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return [string] The unique name of the Application Load Balancer HTTP rule.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * [string] The response message of the request; mandatory for STATIC action.
     * 
     */
    @Import(name="responseMessage")
    private @Nullable Output<String> responseMessage;

    /**
     * @return [string] The response message of the request; mandatory for STATIC action.
     * 
     */
    public Optional<Output<String>> responseMessage() {
        return Optional.ofNullable(this.responseMessage);
    }

    /**
     * [int] Valid only for REDIRECT and STATIC actions. For REDIRECT actions, default is 301 and possible values are 301, 302, 303, 307, and 308. For STATIC actions, default is 503 and valid range is 200 to 599.
     * 
     */
    @Import(name="statusCode")
    private @Nullable Output<Integer> statusCode;

    /**
     * @return [int] Valid only for REDIRECT and STATIC actions. For REDIRECT actions, default is 301 and possible values are 301, 302, 303, 307, and 308. For STATIC actions, default is 503 and valid range is 200 to 599.
     * 
     */
    public Optional<Output<Integer>> statusCode() {
        return Optional.ofNullable(this.statusCode);
    }

    /**
     * [string] The UUID of the target group; mandatory for FORWARD action.
     * 
     */
    @Import(name="targetGroup")
    private @Nullable Output<String> targetGroup;

    /**
     * @return [string] The UUID of the target group; mandatory for FORWARD action.
     * 
     */
    public Optional<Output<String>> targetGroup() {
        return Optional.ofNullable(this.targetGroup);
    }

    /**
     * [string] Type of the Http Rule condition.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return [string] Type of the Http Rule condition.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private ApplicationLoadbalancerForwardingruleHttpRuleArgs() {}

    private ApplicationLoadbalancerForwardingruleHttpRuleArgs(ApplicationLoadbalancerForwardingruleHttpRuleArgs $) {
        this.conditions = $.conditions;
        this.contentType = $.contentType;
        this.dropQuery = $.dropQuery;
        this.location = $.location;
        this.name = $.name;
        this.responseMessage = $.responseMessage;
        this.statusCode = $.statusCode;
        this.targetGroup = $.targetGroup;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationLoadbalancerForwardingruleHttpRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationLoadbalancerForwardingruleHttpRuleArgs $;

        public Builder() {
            $ = new ApplicationLoadbalancerForwardingruleHttpRuleArgs();
        }

        public Builder(ApplicationLoadbalancerForwardingruleHttpRuleArgs defaults) {
            $ = new ApplicationLoadbalancerForwardingruleHttpRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param conditions [list] - An array of items in the collection.The action is only performed if each and every condition is met; if no conditions are set, the rule will always be performed.
         * 
         * @return builder
         * 
         */
        public Builder conditions(@Nullable Output<List<ApplicationLoadbalancerForwardingruleHttpRuleConditionArgs>> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions [list] - An array of items in the collection.The action is only performed if each and every condition is met; if no conditions are set, the rule will always be performed.
         * 
         * @return builder
         * 
         */
        public Builder conditions(List<ApplicationLoadbalancerForwardingruleHttpRuleConditionArgs> conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param conditions [list] - An array of items in the collection.The action is only performed if each and every condition is met; if no conditions are set, the rule will always be performed.
         * 
         * @return builder
         * 
         */
        public Builder conditions(ApplicationLoadbalancerForwardingruleHttpRuleConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }

        /**
         * @param contentType [string] Valid only for STATIC actions.
         * 
         * @return builder
         * 
         */
        public Builder contentType(@Nullable Output<String> contentType) {
            $.contentType = contentType;
            return this;
        }

        /**
         * @param contentType [string] Valid only for STATIC actions.
         * 
         * @return builder
         * 
         */
        public Builder contentType(String contentType) {
            return contentType(Output.of(contentType));
        }

        /**
         * @param dropQuery [bool] Default is false; valid only for REDIRECT actions.
         * 
         * @return builder
         * 
         */
        public Builder dropQuery(@Nullable Output<Boolean> dropQuery) {
            $.dropQuery = dropQuery;
            return this;
        }

        /**
         * @param dropQuery [bool] Default is false; valid only for REDIRECT actions.
         * 
         * @return builder
         * 
         */
        public Builder dropQuery(Boolean dropQuery) {
            return dropQuery(Output.of(dropQuery));
        }

        /**
         * @param location [string] The location for redirecting; mandatory and valid only for REDIRECT actions.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location [string] The location for redirecting; mandatory and valid only for REDIRECT actions.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name [string] The unique name of the Application Load Balancer HTTP rule.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [string] The unique name of the Application Load Balancer HTTP rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param responseMessage [string] The response message of the request; mandatory for STATIC action.
         * 
         * @return builder
         * 
         */
        public Builder responseMessage(@Nullable Output<String> responseMessage) {
            $.responseMessage = responseMessage;
            return this;
        }

        /**
         * @param responseMessage [string] The response message of the request; mandatory for STATIC action.
         * 
         * @return builder
         * 
         */
        public Builder responseMessage(String responseMessage) {
            return responseMessage(Output.of(responseMessage));
        }

        /**
         * @param statusCode [int] Valid only for REDIRECT and STATIC actions. For REDIRECT actions, default is 301 and possible values are 301, 302, 303, 307, and 308. For STATIC actions, default is 503 and valid range is 200 to 599.
         * 
         * @return builder
         * 
         */
        public Builder statusCode(@Nullable Output<Integer> statusCode) {
            $.statusCode = statusCode;
            return this;
        }

        /**
         * @param statusCode [int] Valid only for REDIRECT and STATIC actions. For REDIRECT actions, default is 301 and possible values are 301, 302, 303, 307, and 308. For STATIC actions, default is 503 and valid range is 200 to 599.
         * 
         * @return builder
         * 
         */
        public Builder statusCode(Integer statusCode) {
            return statusCode(Output.of(statusCode));
        }

        /**
         * @param targetGroup [string] The UUID of the target group; mandatory for FORWARD action.
         * 
         * @return builder
         * 
         */
        public Builder targetGroup(@Nullable Output<String> targetGroup) {
            $.targetGroup = targetGroup;
            return this;
        }

        /**
         * @param targetGroup [string] The UUID of the target group; mandatory for FORWARD action.
         * 
         * @return builder
         * 
         */
        public Builder targetGroup(String targetGroup) {
            return targetGroup(Output.of(targetGroup));
        }

        /**
         * @param type [string] Type of the Http Rule condition.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type [string] Type of the Http Rule condition.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ApplicationLoadbalancerForwardingruleHttpRuleArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ApplicationLoadbalancerForwardingruleHttpRuleArgs", "name");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("ApplicationLoadbalancerForwardingruleHttpRuleArgs", "type");
            }
            return $;
        }
    }

}
