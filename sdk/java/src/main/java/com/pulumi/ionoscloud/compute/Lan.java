// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.ionoscloud.Utilities;
import com.pulumi.ionoscloud.compute.LanArgs;
import com.pulumi.ionoscloud.compute.inputs.LanState;
import com.pulumi.ionoscloud.compute.outputs.LanIpFailover;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a **LAN** on IonosCloud.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.ionoscloud.compute.Datacenter;
 * import com.pulumi.ionoscloud.compute.DatacenterArgs;
 * import com.pulumi.ionoscloud.compute.Crossconnect;
 * import com.pulumi.ionoscloud.compute.CrossconnectArgs;
 * import com.pulumi.ionoscloud.compute.Lan;
 * import com.pulumi.ionoscloud.compute.LanArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Datacenter("example", DatacenterArgs.builder()
 *             .name("Datacenter Example")
 *             .location("us/las")
 *             .description("Datacenter Description")
 *             .secAuthProtection(false)
 *             .build());
 * 
 *         var exampleCrossconnect = new Crossconnect("exampleCrossconnect", CrossconnectArgs.builder()
 *             .name("Cross Connect Example")
 *             .description("Cross Connect Description")
 *             .build());
 * 
 *         var exampleLan = new Lan("exampleLan", LanArgs.builder()
 *             .datacenterId(example.id())
 *             .public_(false)
 *             .name("Lan Example")
 *             .pcc(exampleCrossconnect.id())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### With IPv6 Enabled
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.ionoscloud.compute.Datacenter;
 * import com.pulumi.ionoscloud.compute.DatacenterArgs;
 * import com.pulumi.ionoscloud.compute.Lan;
 * import com.pulumi.ionoscloud.compute.LanArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Datacenter("example", DatacenterArgs.builder()
 *             .name("Datacenter Example")
 *             .location("de/txl")
 *             .description("Datacenter Description")
 *             .secAuthProtection(false)
 *             .build());
 * 
 *         var exampleLan = new Lan("exampleLan", LanArgs.builder()
 *             .datacenterId(example.id())
 *             .public_(true)
 *             .name("Lan IPv6 Example")
 *             .ipv6CidrBlock("AUTO")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Important Notes
 * 
 * - Please note that only LANs datacenters found in the same physical location can be connected through a Cross-connect
 * - A LAN cannot be a part of two Cross-connects
 * 
 * ## Import
 * 
 * Resource Lan can be imported using the `resource id`, e.g.
 * 
 * ```sh
 * $ pulumi import ionoscloud:compute/lan:Lan mylandatacenter uuid/lan id
 * ```
 * 
 */
@ResourceType(type="ionoscloud:compute/lan:Lan")
public class Lan extends com.pulumi.resources.CustomResource {
    /**
     * [string] The ID of a Virtual Data Center.
     * 
     */
    @Export(name="datacenterId", refs={String.class}, tree="[0]")
    private Output<String> datacenterId;

    /**
     * @return [string] The ID of a Virtual Data Center.
     * 
     */
    public Output<String> datacenterId() {
        return this.datacenterId;
    }
    /**
     * IP failover configurations for lan
     * 
     */
    @Export(name="ipFailovers", refs={List.class,LanIpFailover.class}, tree="[0,1]")
    private Output<List<LanIpFailover>> ipFailovers;

    /**
     * @return IP failover configurations for lan
     * 
     */
    public Output<List<LanIpFailover>> ipFailovers() {
        return this.ipFailovers;
    }
    /**
     * [String] For public LANs this property is null, for private LANs it contains the private IPv4 CIDR range. This property is a read only property.
     * 
     */
    @Export(name="ipv4CidrBlock", refs={String.class}, tree="[0]")
    private Output<String> ipv4CidrBlock;

    /**
     * @return [String] For public LANs this property is null, for private LANs it contains the private IPv4 CIDR range. This property is a read only property.
     * 
     */
    public Output<String> ipv4CidrBlock() {
        return this.ipv4CidrBlock;
    }
    /**
     * Contains the LAN&#39;s /64 IPv6 CIDR block if this LAN is IPv6 enabled. &#39;AUTO&#39; will result in enabling this LAN for IPv6 and automatically assign a /64 IPv6 CIDR block to this LAN. If you specify your own IPv6 CIDR block then you must provide a unique /64 block, which is inside the IPv6 CIDR block of the virtual datacenter and unique inside all LANs from this virtual datacenter.
     * 
     */
    @Export(name="ipv6CidrBlock", refs={String.class}, tree="[0]")
    private Output<String> ipv6CidrBlock;

    /**
     * @return Contains the LAN&#39;s /64 IPv6 CIDR block if this LAN is IPv6 enabled. &#39;AUTO&#39; will result in enabling this LAN for IPv6 and automatically assign a /64 IPv6 CIDR block to this LAN. If you specify your own IPv6 CIDR block then you must provide a unique /64 block, which is inside the IPv6 CIDR block of the virtual datacenter and unique inside all LANs from this virtual datacenter.
     * 
     */
    public Output<String> ipv6CidrBlock() {
        return this.ipv6CidrBlock;
    }
    /**
     * [string] The name of the LAN.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return [string] The name of the LAN.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * [String] The unique id of a `ionoscloud.compute.Crossconnect` resource, in order. It needs to be ensured that IP addresses of the NICs of all LANs connected to a given Cross Connect is not duplicated and belongs to the same subnet range
     * 
     */
    @Export(name="pcc", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> pcc;

    /**
     * @return [String] The unique id of a `ionoscloud.compute.Crossconnect` resource, in order. It needs to be ensured that IP addresses of the NICs of all LANs connected to a given Cross Connect is not duplicated and belongs to the same subnet range
     * 
     */
    public Output<Optional<String>> pcc() {
        return Codegen.optional(this.pcc);
    }
    /**
     * [Boolean] Indicates if the LAN faces the public Internet (true) or not (false).
     * 
     */
    @Export(name="public", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> public_;

    /**
     * @return [Boolean] Indicates if the LAN faces the public Internet (true) or not (false).
     * 
     */
    public Output<Optional<Boolean>> public_() {
        return Codegen.optional(this.public_);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Lan(java.lang.String name) {
        this(name, LanArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Lan(java.lang.String name, LanArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Lan(java.lang.String name, LanArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("ionoscloud:compute/lan:Lan", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Lan(java.lang.String name, Output<java.lang.String> id, @Nullable LanState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("ionoscloud:compute/lan:Lan", name, state, makeResourceOptions(options, id), false);
    }

    private static LanArgs makeArgs(LanArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? LanArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Lan get(java.lang.String name, Output<java.lang.String> id, @Nullable LanState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Lan(name, id, state, options);
    }
}
