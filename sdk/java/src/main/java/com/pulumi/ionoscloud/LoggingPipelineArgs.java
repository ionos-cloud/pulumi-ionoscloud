// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.ionoscloud.inputs.LoggingPipelineLogArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoggingPipelineArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoggingPipelineArgs Empty = new LoggingPipelineArgs();

    /**
     * [string] The location of the Logging pipeline. Default: `de/txl` One of `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `fr/par`.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return [string] The location of the Logging pipeline. Default: `de/txl` One of `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `fr/par`.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * [list] Pipeline logs, a list that contains elements with the following structure:
     * 
     */
    @Import(name="logs", required=true)
    private Output<List<LoggingPipelineLogArgs>> logs;

    /**
     * @return [list] Pipeline logs, a list that contains elements with the following structure:
     * 
     */
    public Output<List<LoggingPipelineLogArgs>> logs() {
        return this.logs;
    }

    /**
     * [string] The name of the Logging pipeline.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return [string] The name of the Logging pipeline.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private LoggingPipelineArgs() {}

    private LoggingPipelineArgs(LoggingPipelineArgs $) {
        this.location = $.location;
        this.logs = $.logs;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoggingPipelineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoggingPipelineArgs $;

        public Builder() {
            $ = new LoggingPipelineArgs();
        }

        public Builder(LoggingPipelineArgs defaults) {
            $ = new LoggingPipelineArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param location [string] The location of the Logging pipeline. Default: `de/txl` One of `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `fr/par`.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location [string] The location of the Logging pipeline. Default: `de/txl` One of `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `fr/par`.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param logs [list] Pipeline logs, a list that contains elements with the following structure:
         * 
         * @return builder
         * 
         */
        public Builder logs(Output<List<LoggingPipelineLogArgs>> logs) {
            $.logs = logs;
            return this;
        }

        /**
         * @param logs [list] Pipeline logs, a list that contains elements with the following structure:
         * 
         * @return builder
         * 
         */
        public Builder logs(List<LoggingPipelineLogArgs> logs) {
            return logs(Output.of(logs));
        }

        /**
         * @param logs [list] Pipeline logs, a list that contains elements with the following structure:
         * 
         * @return builder
         * 
         */
        public Builder logs(LoggingPipelineLogArgs... logs) {
            return logs(List.of(logs));
        }

        /**
         * @param name [string] The name of the Logging pipeline.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [string] The name of the Logging pipeline.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public LoggingPipelineArgs build() {
            if ($.logs == null) {
                throw new MissingRequiredPropertyException("LoggingPipelineArgs", "logs");
            }
            return $;
        }
    }

}
