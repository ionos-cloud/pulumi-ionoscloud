// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.dbaas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.ionoscloud.Utilities;
import com.pulumi.ionoscloud.dbaas.MongoUserArgs;
import com.pulumi.ionoscloud.dbaas.inputs.MongoUserState;
import com.pulumi.ionoscloud.dbaas.outputs.MongoUserRole;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a **DbaaS Mongo User**. .
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.ionoscloud.compute.Datacenter;
 * import com.pulumi.ionoscloud.compute.DatacenterArgs;
 * import com.pulumi.ionoscloud.compute.Lan;
 * import com.pulumi.ionoscloud.compute.LanArgs;
 * import com.pulumi.ionoscloud.dbaas.MongoCluster;
 * import com.pulumi.ionoscloud.dbaas.MongoClusterArgs;
 * import com.pulumi.ionoscloud.dbaas.inputs.MongoClusterMaintenanceWindowArgs;
 * import com.pulumi.ionoscloud.dbaas.inputs.MongoClusterConnectionsArgs;
 * import com.pulumi.ionoscloud.dbaas.MongoUser;
 * import com.pulumi.ionoscloud.dbaas.MongoUserArgs;
 * import com.pulumi.ionoscloud.dbaas.inputs.MongoUserRoleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Basic example
 *         var datacenterExample = new Datacenter("datacenterExample", DatacenterArgs.builder()
 *             .name("example")
 *             .location("de/txl")
 *             .description("Datacenter for testing dbaas cluster")
 *             .build());
 * 
 *         var lanExample = new Lan("lanExample", LanArgs.builder()
 *             .datacenterId(datacenterExample.id())
 *             .public_(false)
 *             .name("example")
 *             .build());
 * 
 *         var exampleMongoCluster = new MongoCluster("exampleMongoCluster", MongoClusterArgs.builder()
 *             .maintenanceWindow(MongoClusterMaintenanceWindowArgs.builder()
 *                 .dayOfTheWeek("Sunday")
 *                 .time("09:00:00")
 *                 .build())
 *             .mongodbVersion("5.0")
 *             .instances(1)
 *             .displayName("example_mongo_cluster")
 *             .location(datacenterExample.location())
 *             .connections(MongoClusterConnectionsArgs.builder()
 *                 .datacenterId(datacenterExample.id())
 *                 .lanId(lanExample.id())
 *                 .cidrLists("192.168.1.108/24")
 *                 .build())
 *             .templateId("6b78ea06-ee0e-4689-998c-fc9c46e781f6")
 *             .build());
 * 
 *         var exampleMongoUser = new MongoUser("exampleMongoUser", MongoUserArgs.builder()
 *             .clusterId(exampleMongoCluster.id())
 *             .username("myUser")
 *             .password("strongPassword")
 *             .roles(            
 *                 MongoUserRoleArgs.builder()
 *                     .role("read")
 *                     .database("db1")
 *                     .build(),
 *                 MongoUserRoleArgs.builder()
 *                     .role("readWrite")
 *                     .database("db2")
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.ionoscloud.compute.Datacenter;
 * import com.pulumi.ionoscloud.compute.DatacenterArgs;
 * import com.pulumi.ionoscloud.compute.Lan;
 * import com.pulumi.ionoscloud.compute.LanArgs;
 * import com.pulumi.ionoscloud.dbaas.MongoCluster;
 * import com.pulumi.ionoscloud.dbaas.MongoClusterArgs;
 * import com.pulumi.ionoscloud.dbaas.inputs.MongoClusterMaintenanceWindowArgs;
 * import com.pulumi.ionoscloud.dbaas.inputs.MongoClusterConnectionsArgs;
 * import com.pulumi.random.password;
 * import com.pulumi.random.PasswordArgs;
 * import com.pulumi.ionoscloud.dbaas.MongoUser;
 * import com.pulumi.ionoscloud.dbaas.MongoUserArgs;
 * import com.pulumi.ionoscloud.dbaas.inputs.MongoUserRoleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Complete example
 *         var datacenterExample = new Datacenter("datacenterExample", DatacenterArgs.builder()
 *             .name("example")
 *             .location("de/txl")
 *             .description("Datacenter for testing dbaas cluster")
 *             .build());
 * 
 *         var lanExample = new Lan("lanExample", LanArgs.builder()
 *             .datacenterId(datacenterExample.id())
 *             .public_(false)
 *             .name("example")
 *             .build());
 * 
 *         var exampleMongoCluster = new MongoCluster("exampleMongoCluster", MongoClusterArgs.builder()
 *             .maintenanceWindow(MongoClusterMaintenanceWindowArgs.builder()
 *                 .dayOfTheWeek("Sunday")
 *                 .time("09:00:00")
 *                 .build())
 *             .mongodbVersion("5.0")
 *             .instances(1)
 *             .displayName("example_mongo_cluster")
 *             .location(datacenterExample.location())
 *             .connections(MongoClusterConnectionsArgs.builder()
 *                 .datacenterId(datacenterExample.id())
 *                 .lanId(lanExample.id())
 *                 .cidrLists("192.168.1.108/24")
 *                 .build())
 *             .templateId("6b78ea06-ee0e-4689-998c-fc9c46e781f6")
 *             .build());
 * 
 *         var clusterPassword = new Password("clusterPassword", PasswordArgs.builder()
 *             .length(16)
 *             .special(true)
 *             .overrideSpecial("!#$%&*()-_=+[]{}<>:?")
 *             .build());
 * 
 *         var userPassword = new Password("userPassword", PasswordArgs.builder()
 *             .length(16)
 *             .special(true)
 *             .overrideSpecial("!#$%&*()-_=+[]{}<>:?")
 *             .build());
 * 
 *         var exampleMongoUser = new MongoUser("exampleMongoUser", MongoUserArgs.builder()
 *             .clusterId(exampleMongoCluster.id())
 *             .username("myUser")
 *             .password(userPassword.result())
 *             .roles(            
 *                 MongoUserRoleArgs.builder()
 *                     .role("read")
 *                     .database("db1")
 *                     .build(),
 *                 MongoUserRoleArgs.builder()
 *                     .role("readWrite")
 *                     .database("db2")
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Resource DBaaS MongoDB User can be imported using the `clusterID` and the `username`.
 * 
 * First, define an empty resource in the plan:
 * 
 * hcl
 * 
 * resource &#34;ionoscloud_mongo_user&#34; &#34;importeduser&#34; {
 * 
 * }
 * 
 * Then you can import the user using the following command:
 * 
 * ```sh
 * $ pulumi import ionoscloud:dbaas/mongoUser:MongoUser mycluser clusterid/username
 * ```
 * 
 */
@ResourceType(type="ionoscloud:dbaas/mongoUser:MongoUser")
public class MongoUser extends com.pulumi.resources.CustomResource {
    /**
     * [string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.
     * 
     */
    @Export(name="clusterId", refs={String.class}, tree="[0]")
    private Output<String> clusterId;

    /**
     * @return [string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.
     * 
     */
    public Output<String> clusterId() {
        return this.clusterId;
    }
    /**
     * [string] User password. Updates to the value of the field force the cluster to be re-created.
     * 
     */
    @Export(name="password", refs={String.class}, tree="[0]")
    private Output<String> password;

    /**
     * @return [string] User password. Updates to the value of the field force the cluster to be re-created.
     * 
     */
    public Output<String> password() {
        return this.password;
    }
    /**
     * [string] a list of mongodb user roles. Updates to the value of the field force the cluster to be re-created.
     * 
     */
    @Export(name="roles", refs={List.class,MongoUserRole.class}, tree="[0,1]")
    private Output</* @Nullable */ List<MongoUserRole>> roles;

    /**
     * @return [string] a list of mongodb user roles. Updates to the value of the field force the cluster to be re-created.
     * 
     */
    public Output<Optional<List<MongoUserRole>>> roles() {
        return Codegen.optional(this.roles);
    }
    /**
     * [string] Used for authentication. Updates to the value of the field force the cluster to be re-created.
     * 
     */
    @Export(name="username", refs={String.class}, tree="[0]")
    private Output<String> username;

    /**
     * @return [string] Used for authentication. Updates to the value of the field force the cluster to be re-created.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public MongoUser(java.lang.String name) {
        this(name, MongoUserArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public MongoUser(java.lang.String name, MongoUserArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public MongoUser(java.lang.String name, MongoUserArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("ionoscloud:dbaas/mongoUser:MongoUser", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private MongoUser(java.lang.String name, Output<java.lang.String> id, @Nullable MongoUserState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("ionoscloud:dbaas/mongoUser:MongoUser", name, state, makeResourceOptions(options, id), false);
    }

    private static MongoUserArgs makeArgs(MongoUserArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? MongoUserArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "password"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static MongoUser get(java.lang.String name, Output<java.lang.String> id, @Nullable MongoUserState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new MongoUser(name, id, state, options);
    }
}
