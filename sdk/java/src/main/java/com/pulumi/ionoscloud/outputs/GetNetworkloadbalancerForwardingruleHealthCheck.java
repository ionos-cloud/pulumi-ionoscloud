// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class GetNetworkloadbalancerForwardingruleHealthCheck {
    /**
     * @return ClientTimeout is expressed in milliseconds. This inactivity timeout applies when the client is expected to acknowledge or send data. If unset the default of 50 seconds will be used.
     * 
     */
    private Integer clientTimeout;
    /**
     * @return It specifies the maximum time (in milliseconds) to wait for a connection attempt to a target VM to succeed. If unset, the default of 5 seconds will be used.
     * 
     */
    private Integer connectTimeout;
    /**
     * @return Retries specifies the number of retries to perform on a target VM after a connection failure. If unset, the default value of 3 will be used.
     * 
     */
    private Integer retries;
    /**
     * @return TargetTimeout specifies the maximum inactivity time (in milliseconds) on the target VM side. If unset, the default of 50 seconds will be used.
     * 
     */
    private Integer targetTimeout;

    private GetNetworkloadbalancerForwardingruleHealthCheck() {}
    /**
     * @return ClientTimeout is expressed in milliseconds. This inactivity timeout applies when the client is expected to acknowledge or send data. If unset the default of 50 seconds will be used.
     * 
     */
    public Integer clientTimeout() {
        return this.clientTimeout;
    }
    /**
     * @return It specifies the maximum time (in milliseconds) to wait for a connection attempt to a target VM to succeed. If unset, the default of 5 seconds will be used.
     * 
     */
    public Integer connectTimeout() {
        return this.connectTimeout;
    }
    /**
     * @return Retries specifies the number of retries to perform on a target VM after a connection failure. If unset, the default value of 3 will be used.
     * 
     */
    public Integer retries() {
        return this.retries;
    }
    /**
     * @return TargetTimeout specifies the maximum inactivity time (in milliseconds) on the target VM side. If unset, the default of 50 seconds will be used.
     * 
     */
    public Integer targetTimeout() {
        return this.targetTimeout;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkloadbalancerForwardingruleHealthCheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer clientTimeout;
        private Integer connectTimeout;
        private Integer retries;
        private Integer targetTimeout;
        public Builder() {}
        public Builder(GetNetworkloadbalancerForwardingruleHealthCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientTimeout = defaults.clientTimeout;
    	      this.connectTimeout = defaults.connectTimeout;
    	      this.retries = defaults.retries;
    	      this.targetTimeout = defaults.targetTimeout;
        }

        @CustomType.Setter
        public Builder clientTimeout(Integer clientTimeout) {
            if (clientTimeout == null) {
              throw new MissingRequiredPropertyException("GetNetworkloadbalancerForwardingruleHealthCheck", "clientTimeout");
            }
            this.clientTimeout = clientTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder connectTimeout(Integer connectTimeout) {
            if (connectTimeout == null) {
              throw new MissingRequiredPropertyException("GetNetworkloadbalancerForwardingruleHealthCheck", "connectTimeout");
            }
            this.connectTimeout = connectTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder retries(Integer retries) {
            if (retries == null) {
              throw new MissingRequiredPropertyException("GetNetworkloadbalancerForwardingruleHealthCheck", "retries");
            }
            this.retries = retries;
            return this;
        }
        @CustomType.Setter
        public Builder targetTimeout(Integer targetTimeout) {
            if (targetTimeout == null) {
              throw new MissingRequiredPropertyException("GetNetworkloadbalancerForwardingruleHealthCheck", "targetTimeout");
            }
            this.targetTimeout = targetTimeout;
            return this;
        }
        public GetNetworkloadbalancerForwardingruleHealthCheck build() {
            final var _resultValue = new GetNetworkloadbalancerForwardingruleHealthCheck();
            _resultValue.clientTimeout = clientTimeout;
            _resultValue.connectTimeout = connectTimeout;
            _resultValue.retries = retries;
            _resultValue.targetTimeout = targetTimeout;
            return _resultValue;
        }
    }
}
