// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ionoscloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServerVolume {
    /**
     * @return [string] The availability zone in which the server should exist. E.g: `AUTO`, `ZONE_1`, `ZONE_2`. This property is immutable.
     * 
     */
    private @Nullable String availabilityZone;
    /**
     * @return The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either &#39;public image&#39; or &#39;imageAlias&#39; in conjunction with this property.
     * 
     */
    private @Nullable String backupUnitId;
    /**
     * @return The UUID of the attached server.
     * 
     */
    private @Nullable String bootServer;
    private @Nullable String bus;
    private @Nullable Boolean cpuHotPlug;
    private @Nullable Integer deviceNumber;
    private @Nullable Boolean discVirtioHotPlug;
    private @Nullable Boolean discVirtioHotUnplug;
    private String diskType;
    /**
     * @return [string] Required if `ssh_key_path` is not provided.
     * 
     * @deprecated
     * Please use image_password under server level
     * 
     */
    @Deprecated /* Please use image_password under server level */
    private @Nullable String imagePassword;
    /**
     * @return [string] Sets the OS type of the server.
     * 
     */
    private @Nullable String licenceType;
    /**
     * @return [string] The name of the server.
     * 
     */
    private @Nullable String name;
    private @Nullable Boolean nicHotPlug;
    private @Nullable Boolean nicHotUnplug;
    private @Nullable Integer pciSlot;
    private @Nullable Boolean ramHotPlug;
    /**
     * @return The size of the volume in GB.
     * 
     */
    private @Nullable Integer size;
    /**
     * @return [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images.  Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. Does not support `~` expansion to homedir in the given path. This property is immutable.
     * 
     * @deprecated
     * Please use ssh_key_path under server level
     * 
     */
    @Deprecated /* Please use ssh_key_path under server level */
    private @Nullable List<String> sshKeyPaths;
    /**
     * @return [list] Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is used for the volume creation. Does not support `~` expansion to homedir in the given path.
     * 
     * @deprecated
     * Please use ssh_keys under server level
     * 
     */
    @Deprecated /* Please use ssh_keys under server level */
    private @Nullable List<String> sshKeys;
    /**
     * @return The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either &#39;public image&#39; or &#39;imageAlias&#39; that has cloud-init compatibility in conjunction with this property.
     * 
     */
    private @Nullable String userData;

    private ServerVolume() {}
    /**
     * @return [string] The availability zone in which the server should exist. E.g: `AUTO`, `ZONE_1`, `ZONE_2`. This property is immutable.
     * 
     */
    public Optional<String> availabilityZone() {
        return Optional.ofNullable(this.availabilityZone);
    }
    /**
     * @return The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either &#39;public image&#39; or &#39;imageAlias&#39; in conjunction with this property.
     * 
     */
    public Optional<String> backupUnitId() {
        return Optional.ofNullable(this.backupUnitId);
    }
    /**
     * @return The UUID of the attached server.
     * 
     */
    public Optional<String> bootServer() {
        return Optional.ofNullable(this.bootServer);
    }
    public Optional<String> bus() {
        return Optional.ofNullable(this.bus);
    }
    public Optional<Boolean> cpuHotPlug() {
        return Optional.ofNullable(this.cpuHotPlug);
    }
    public Optional<Integer> deviceNumber() {
        return Optional.ofNullable(this.deviceNumber);
    }
    public Optional<Boolean> discVirtioHotPlug() {
        return Optional.ofNullable(this.discVirtioHotPlug);
    }
    public Optional<Boolean> discVirtioHotUnplug() {
        return Optional.ofNullable(this.discVirtioHotUnplug);
    }
    public String diskType() {
        return this.diskType;
    }
    /**
     * @return [string] Required if `ssh_key_path` is not provided.
     * 
     * @deprecated
     * Please use image_password under server level
     * 
     */
    @Deprecated /* Please use image_password under server level */
    public Optional<String> imagePassword() {
        return Optional.ofNullable(this.imagePassword);
    }
    /**
     * @return [string] Sets the OS type of the server.
     * 
     */
    public Optional<String> licenceType() {
        return Optional.ofNullable(this.licenceType);
    }
    /**
     * @return [string] The name of the server.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public Optional<Boolean> nicHotPlug() {
        return Optional.ofNullable(this.nicHotPlug);
    }
    public Optional<Boolean> nicHotUnplug() {
        return Optional.ofNullable(this.nicHotUnplug);
    }
    public Optional<Integer> pciSlot() {
        return Optional.ofNullable(this.pciSlot);
    }
    public Optional<Boolean> ramHotPlug() {
        return Optional.ofNullable(this.ramHotPlug);
    }
    /**
     * @return The size of the volume in GB.
     * 
     */
    public Optional<Integer> size() {
        return Optional.ofNullable(this.size);
    }
    /**
     * @return [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images.  Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. Does not support `~` expansion to homedir in the given path. This property is immutable.
     * 
     * @deprecated
     * Please use ssh_key_path under server level
     * 
     */
    @Deprecated /* Please use ssh_key_path under server level */
    public List<String> sshKeyPaths() {
        return this.sshKeyPaths == null ? List.of() : this.sshKeyPaths;
    }
    /**
     * @return [list] Immutable List of absolute or relative paths to files containing public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Public SSH keys are set on the image as authorized keys for appropriate SSH login to the instance using the corresponding private key. This field may only be set in creation requests. When reading, it always returns null. SSH keys are only supported if a public Linux image is used for the volume creation. Does not support `~` expansion to homedir in the given path.
     * 
     * @deprecated
     * Please use ssh_keys under server level
     * 
     */
    @Deprecated /* Please use ssh_keys under server level */
    public List<String> sshKeys() {
        return this.sshKeys == null ? List.of() : this.sshKeys;
    }
    /**
     * @return The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either &#39;public image&#39; or &#39;imageAlias&#39; that has cloud-init compatibility in conjunction with this property.
     * 
     */
    public Optional<String> userData() {
        return Optional.ofNullable(this.userData);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServerVolume defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String availabilityZone;
        private @Nullable String backupUnitId;
        private @Nullable String bootServer;
        private @Nullable String bus;
        private @Nullable Boolean cpuHotPlug;
        private @Nullable Integer deviceNumber;
        private @Nullable Boolean discVirtioHotPlug;
        private @Nullable Boolean discVirtioHotUnplug;
        private String diskType;
        private @Nullable String imagePassword;
        private @Nullable String licenceType;
        private @Nullable String name;
        private @Nullable Boolean nicHotPlug;
        private @Nullable Boolean nicHotUnplug;
        private @Nullable Integer pciSlot;
        private @Nullable Boolean ramHotPlug;
        private @Nullable Integer size;
        private @Nullable List<String> sshKeyPaths;
        private @Nullable List<String> sshKeys;
        private @Nullable String userData;
        public Builder() {}
        public Builder(ServerVolume defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.backupUnitId = defaults.backupUnitId;
    	      this.bootServer = defaults.bootServer;
    	      this.bus = defaults.bus;
    	      this.cpuHotPlug = defaults.cpuHotPlug;
    	      this.deviceNumber = defaults.deviceNumber;
    	      this.discVirtioHotPlug = defaults.discVirtioHotPlug;
    	      this.discVirtioHotUnplug = defaults.discVirtioHotUnplug;
    	      this.diskType = defaults.diskType;
    	      this.imagePassword = defaults.imagePassword;
    	      this.licenceType = defaults.licenceType;
    	      this.name = defaults.name;
    	      this.nicHotPlug = defaults.nicHotPlug;
    	      this.nicHotUnplug = defaults.nicHotUnplug;
    	      this.pciSlot = defaults.pciSlot;
    	      this.ramHotPlug = defaults.ramHotPlug;
    	      this.size = defaults.size;
    	      this.sshKeyPaths = defaults.sshKeyPaths;
    	      this.sshKeys = defaults.sshKeys;
    	      this.userData = defaults.userData;
        }

        @CustomType.Setter
        public Builder availabilityZone(@Nullable String availabilityZone) {

            this.availabilityZone = availabilityZone;
            return this;
        }
        @CustomType.Setter
        public Builder backupUnitId(@Nullable String backupUnitId) {

            this.backupUnitId = backupUnitId;
            return this;
        }
        @CustomType.Setter
        public Builder bootServer(@Nullable String bootServer) {

            this.bootServer = bootServer;
            return this;
        }
        @CustomType.Setter
        public Builder bus(@Nullable String bus) {

            this.bus = bus;
            return this;
        }
        @CustomType.Setter
        public Builder cpuHotPlug(@Nullable Boolean cpuHotPlug) {

            this.cpuHotPlug = cpuHotPlug;
            return this;
        }
        @CustomType.Setter
        public Builder deviceNumber(@Nullable Integer deviceNumber) {

            this.deviceNumber = deviceNumber;
            return this;
        }
        @CustomType.Setter
        public Builder discVirtioHotPlug(@Nullable Boolean discVirtioHotPlug) {

            this.discVirtioHotPlug = discVirtioHotPlug;
            return this;
        }
        @CustomType.Setter
        public Builder discVirtioHotUnplug(@Nullable Boolean discVirtioHotUnplug) {

            this.discVirtioHotUnplug = discVirtioHotUnplug;
            return this;
        }
        @CustomType.Setter
        public Builder diskType(String diskType) {
            if (diskType == null) {
              throw new MissingRequiredPropertyException("ServerVolume", "diskType");
            }
            this.diskType = diskType;
            return this;
        }
        @CustomType.Setter
        public Builder imagePassword(@Nullable String imagePassword) {

            this.imagePassword = imagePassword;
            return this;
        }
        @CustomType.Setter
        public Builder licenceType(@Nullable String licenceType) {

            this.licenceType = licenceType;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nicHotPlug(@Nullable Boolean nicHotPlug) {

            this.nicHotPlug = nicHotPlug;
            return this;
        }
        @CustomType.Setter
        public Builder nicHotUnplug(@Nullable Boolean nicHotUnplug) {

            this.nicHotUnplug = nicHotUnplug;
            return this;
        }
        @CustomType.Setter
        public Builder pciSlot(@Nullable Integer pciSlot) {

            this.pciSlot = pciSlot;
            return this;
        }
        @CustomType.Setter
        public Builder ramHotPlug(@Nullable Boolean ramHotPlug) {

            this.ramHotPlug = ramHotPlug;
            return this;
        }
        @CustomType.Setter
        public Builder size(@Nullable Integer size) {

            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder sshKeyPaths(@Nullable List<String> sshKeyPaths) {

            this.sshKeyPaths = sshKeyPaths;
            return this;
        }
        public Builder sshKeyPaths(String... sshKeyPaths) {
            return sshKeyPaths(List.of(sshKeyPaths));
        }
        @CustomType.Setter
        public Builder sshKeys(@Nullable List<String> sshKeys) {

            this.sshKeys = sshKeys;
            return this;
        }
        public Builder sshKeys(String... sshKeys) {
            return sshKeys(List.of(sshKeys));
        }
        @CustomType.Setter
        public Builder userData(@Nullable String userData) {

            this.userData = userData;
            return this;
        }
        public ServerVolume build() {
            final var _resultValue = new ServerVolume();
            _resultValue.availabilityZone = availabilityZone;
            _resultValue.backupUnitId = backupUnitId;
            _resultValue.bootServer = bootServer;
            _resultValue.bus = bus;
            _resultValue.cpuHotPlug = cpuHotPlug;
            _resultValue.deviceNumber = deviceNumber;
            _resultValue.discVirtioHotPlug = discVirtioHotPlug;
            _resultValue.discVirtioHotUnplug = discVirtioHotUnplug;
            _resultValue.diskType = diskType;
            _resultValue.imagePassword = imagePassword;
            _resultValue.licenceType = licenceType;
            _resultValue.name = name;
            _resultValue.nicHotPlug = nicHotPlug;
            _resultValue.nicHotUnplug = nicHotUnplug;
            _resultValue.pciSlot = pciSlot;
            _resultValue.ramHotPlug = ramHotPlug;
            _resultValue.size = size;
            _resultValue.sshKeyPaths = sshKeyPaths;
            _resultValue.sshKeys = sshKeys;
            _resultValue.userData = userData;
            return _resultValue;
        }
    }
}
