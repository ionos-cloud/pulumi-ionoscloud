// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeState extends com.pulumi.resources.ResourceArgs {

    public static final VolumeState Empty = new VolumeState();

    /**
     * [string] The storage availability zone assigned to the volume: AUTO, ZONE_1, ZONE_2, or ZONE_3. This property is immutable
     * 
     */
    @Import(name="availabilityZone")
    private @Nullable Output<String> availabilityZone;

    /**
     * @return [string] The storage availability zone assigned to the volume: AUTO, ZONE_1, ZONE_2, or ZONE_3. This property is immutable
     * 
     */
    public Optional<Output<String>> availabilityZone() {
        return Optional.ofNullable(this.availabilityZone);
    }

    /**
     * [string] The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either &#39;public image&#39; or &#39;imageAlias&#39; in conjunction with this property.
     * 
     */
    @Import(name="backupUnitId")
    private @Nullable Output<String> backupUnitId;

    /**
     * @return [string] The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either &#39;public image&#39; or &#39;imageAlias&#39; in conjunction with this property.
     * 
     */
    public Optional<Output<String>> backupUnitId() {
        return Optional.ofNullable(this.backupUnitId);
    }

    /**
     * [string] The UUID of the attached server.
     * &gt; **⚠ WARNING**
     * &gt; 
     * &gt; ssh_key_path and ssh_keys fields are immutable.
     * If you want to create a **CUBE** server, the type of the inline volume must be set to **DAS**. In this case, you can not set the `size` argument since it is taken from the `template_uuid` you set in the server.
     * 
     */
    @Import(name="bootServer")
    private @Nullable Output<String> bootServer;

    /**
     * @return [string] The UUID of the attached server.
     * &gt; **⚠ WARNING**
     * &gt; 
     * &gt; ssh_key_path and ssh_keys fields are immutable.
     * If you want to create a **CUBE** server, the type of the inline volume must be set to **DAS**. In this case, you can not set the `size` argument since it is taken from the `template_uuid` you set in the server.
     * 
     */
    public Optional<Output<String>> bootServer() {
        return Optional.ofNullable(this.bootServer);
    }

    /**
     * [Boolean] The bus type of the volume: VIRTIO or IDE.
     * 
     */
    @Import(name="bus")
    private @Nullable Output<String> bus;

    /**
     * @return [Boolean] The bus type of the volume: VIRTIO or IDE.
     * 
     */
    public Optional<Output<String>> bus() {
        return Optional.ofNullable(this.bus);
    }

    /**
     * [string] Is capable of CPU hot plug (no reboot required)
     * 
     */
    @Import(name="cpuHotPlug")
    private @Nullable Output<Boolean> cpuHotPlug;

    /**
     * @return [string] Is capable of CPU hot plug (no reboot required)
     * 
     */
    public Optional<Output<Boolean>> cpuHotPlug() {
        return Optional.ofNullable(this.cpuHotPlug);
    }

    /**
     * [string] The ID of a Virtual Data Center.
     * 
     */
    @Import(name="datacenterId")
    private @Nullable Output<String> datacenterId;

    /**
     * @return [string] The ID of a Virtual Data Center.
     * 
     */
    public Optional<Output<String>> datacenterId() {
        return Optional.ofNullable(this.datacenterId);
    }

    /**
     * The Logical Unit Number of the storage volume. Null for volumes not mounted to any VM.
     * 
     */
    @Import(name="deviceNumber")
    private @Nullable Output<Integer> deviceNumber;

    /**
     * @return The Logical Unit Number of the storage volume. Null for volumes not mounted to any VM.
     * 
     */
    public Optional<Output<Integer>> deviceNumber() {
        return Optional.ofNullable(this.deviceNumber);
    }

    /**
     * [string] Is capable of Virt-IO drive hot plug (no reboot required)
     * 
     */
    @Import(name="discVirtioHotPlug")
    private @Nullable Output<Boolean> discVirtioHotPlug;

    /**
     * @return [string] Is capable of Virt-IO drive hot plug (no reboot required)
     * 
     */
    public Optional<Output<Boolean>> discVirtioHotPlug() {
        return Optional.ofNullable(this.discVirtioHotPlug);
    }

    /**
     * [string] Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.
     * 
     */
    @Import(name="discVirtioHotUnplug")
    private @Nullable Output<Boolean> discVirtioHotUnplug;

    /**
     * @return [string] Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.
     * 
     */
    public Optional<Output<Boolean>> discVirtioHotUnplug() {
        return Optional.ofNullable(this.discVirtioHotUnplug);
    }

    /**
     * [string] The volume type: HDD or SSD. This property is immutable.
     * 
     */
    @Import(name="diskType")
    private @Nullable Output<String> diskType;

    /**
     * @return [string] The volume type: HDD or SSD. This property is immutable.
     * 
     */
    public Optional<Output<String>> diskType() {
        return Optional.ofNullable(this.diskType);
    }

    /**
     * The image or snapshot UUID.
     * 
     */
    @Import(name="image")
    private @Nullable Output<String> image;

    /**
     * @return The image or snapshot UUID.
     * 
     */
    public Optional<Output<String>> image() {
        return Optional.ofNullable(this.image);
    }

    @Import(name="imageId")
    private @Nullable Output<String> imageId;

    public Optional<Output<String>> imageId() {
        return Optional.ofNullable(this.imageId);
    }

    /**
     * [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licence_type` is not provided. Attribute is immutable.
     * 
     */
    @Import(name="imageName")
    private @Nullable Output<String> imageName;

    /**
     * @return [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licence_type` is not provided. Attribute is immutable.
     * 
     */
    public Optional<Output<String>> imageName() {
        return Optional.ofNullable(this.imageName);
    }

    /**
     * [string] Required if `sshkey_path` is not provided.
     * 
     */
    @Import(name="imagePassword")
    private @Nullable Output<String> imagePassword;

    /**
     * @return [string] Required if `sshkey_path` is not provided.
     * 
     */
    public Optional<Output<String>> imagePassword() {
        return Optional.ofNullable(this.imagePassword);
    }

    /**
     * [string] Required if `image_name` is not provided.
     * 
     */
    @Import(name="licenceType")
    private @Nullable Output<String> licenceType;

    /**
     * @return [string] Required if `image_name` is not provided.
     * 
     */
    public Optional<Output<String>> licenceType() {
        return Optional.ofNullable(this.licenceType);
    }

    /**
     * [string] The name of the volume.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return [string] The name of the volume.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * [string] Is capable of nic hot plug (no reboot required)
     * 
     */
    @Import(name="nicHotPlug")
    private @Nullable Output<Boolean> nicHotPlug;

    /**
     * @return [string] Is capable of nic hot plug (no reboot required)
     * 
     */
    public Optional<Output<Boolean>> nicHotPlug() {
        return Optional.ofNullable(this.nicHotPlug);
    }

    /**
     * [string] Is capable of nic hot unplug (no reboot required)
     * 
     */
    @Import(name="nicHotUnplug")
    private @Nullable Output<Boolean> nicHotUnplug;

    /**
     * @return [string] Is capable of nic hot unplug (no reboot required)
     * 
     */
    public Optional<Output<Boolean>> nicHotUnplug() {
        return Optional.ofNullable(this.nicHotUnplug);
    }

    /**
     * The PCI slot number of the storage volume. Null for volumes not mounted to any VM.
     * 
     */
    @Import(name="pciSlot")
    private @Nullable Output<Integer> pciSlot;

    /**
     * @return The PCI slot number of the storage volume. Null for volumes not mounted to any VM.
     * 
     */
    public Optional<Output<Integer>> pciSlot() {
        return Optional.ofNullable(this.pciSlot);
    }

    /**
     * [string] Is capable of memory hot plug (no reboot required)
     * 
     */
    @Import(name="ramHotPlug")
    private @Nullable Output<Boolean> ramHotPlug;

    /**
     * @return [string] Is capable of memory hot plug (no reboot required)
     * 
     */
    public Optional<Output<Boolean>> ramHotPlug() {
        return Optional.ofNullable(this.ramHotPlug);
    }

    /**
     * [string] The ID of a server.
     * 
     */
    @Import(name="serverId")
    private @Nullable Output<String> serverId;

    /**
     * @return [string] The ID of a server.
     * 
     */
    public Optional<Output<String>> serverId() {
        return Optional.ofNullable(this.serverId);
    }

    /**
     * [integer] The size of the volume in GB.
     * 
     */
    @Import(name="size")
    private @Nullable Output<Integer> size;

    /**
     * @return [integer] The size of the volume in GB.
     * 
     */
    public Optional<Output<Integer>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. This property is immutable.
     * 
     */
    @Import(name="sshKeyPaths")
    private @Nullable Output<List<String>> sshKeyPaths;

    /**
     * @return [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. This property is immutable.
     * 
     */
    public Optional<Output<List<String>>> sshKeyPaths() {
        return Optional.ofNullable(this.sshKeyPaths);
    }

    /**
     * [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. This property is immutable.
     * 
     */
    @Import(name="sshKeys")
    private @Nullable Output<List<String>> sshKeys;

    /**
     * @return [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. This property is immutable.
     * 
     */
    public Optional<Output<List<String>>> sshKeys() {
        return Optional.ofNullable(this.sshKeys);
    }

    /**
     * The associated public SSH key.
     * 
     */
    @Import(name="sshkey")
    private @Nullable Output<String> sshkey;

    /**
     * @return The associated public SSH key.
     * 
     */
    public Optional<Output<String>> sshkey() {
        return Optional.ofNullable(this.sshkey);
    }

    /**
     * [string] The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. This option will work only with cloud-init compatible images.
     * 
     */
    @Import(name="userData")
    private @Nullable Output<String> userData;

    /**
     * @return [string] The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. This option will work only with cloud-init compatible images.
     * 
     */
    public Optional<Output<String>> userData() {
        return Optional.ofNullable(this.userData);
    }

    private VolumeState() {}

    private VolumeState(VolumeState $) {
        this.availabilityZone = $.availabilityZone;
        this.backupUnitId = $.backupUnitId;
        this.bootServer = $.bootServer;
        this.bus = $.bus;
        this.cpuHotPlug = $.cpuHotPlug;
        this.datacenterId = $.datacenterId;
        this.deviceNumber = $.deviceNumber;
        this.discVirtioHotPlug = $.discVirtioHotPlug;
        this.discVirtioHotUnplug = $.discVirtioHotUnplug;
        this.diskType = $.diskType;
        this.image = $.image;
        this.imageId = $.imageId;
        this.imageName = $.imageName;
        this.imagePassword = $.imagePassword;
        this.licenceType = $.licenceType;
        this.name = $.name;
        this.nicHotPlug = $.nicHotPlug;
        this.nicHotUnplug = $.nicHotUnplug;
        this.pciSlot = $.pciSlot;
        this.ramHotPlug = $.ramHotPlug;
        this.serverId = $.serverId;
        this.size = $.size;
        this.sshKeyPaths = $.sshKeyPaths;
        this.sshKeys = $.sshKeys;
        this.sshkey = $.sshkey;
        this.userData = $.userData;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeState $;

        public Builder() {
            $ = new VolumeState();
        }

        public Builder(VolumeState defaults) {
            $ = new VolumeState(Objects.requireNonNull(defaults));
        }

        /**
         * @param availabilityZone [string] The storage availability zone assigned to the volume: AUTO, ZONE_1, ZONE_2, or ZONE_3. This property is immutable
         * 
         * @return builder
         * 
         */
        public Builder availabilityZone(@Nullable Output<String> availabilityZone) {
            $.availabilityZone = availabilityZone;
            return this;
        }

        /**
         * @param availabilityZone [string] The storage availability zone assigned to the volume: AUTO, ZONE_1, ZONE_2, or ZONE_3. This property is immutable
         * 
         * @return builder
         * 
         */
        public Builder availabilityZone(String availabilityZone) {
            return availabilityZone(Output.of(availabilityZone));
        }

        /**
         * @param backupUnitId [string] The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either &#39;public image&#39; or &#39;imageAlias&#39; in conjunction with this property.
         * 
         * @return builder
         * 
         */
        public Builder backupUnitId(@Nullable Output<String> backupUnitId) {
            $.backupUnitId = backupUnitId;
            return this;
        }

        /**
         * @param backupUnitId [string] The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either &#39;public image&#39; or &#39;imageAlias&#39; in conjunction with this property.
         * 
         * @return builder
         * 
         */
        public Builder backupUnitId(String backupUnitId) {
            return backupUnitId(Output.of(backupUnitId));
        }

        /**
         * @param bootServer [string] The UUID of the attached server.
         * &gt; **⚠ WARNING**
         * &gt; 
         * &gt; ssh_key_path and ssh_keys fields are immutable.
         * If you want to create a **CUBE** server, the type of the inline volume must be set to **DAS**. In this case, you can not set the `size` argument since it is taken from the `template_uuid` you set in the server.
         * 
         * @return builder
         * 
         */
        public Builder bootServer(@Nullable Output<String> bootServer) {
            $.bootServer = bootServer;
            return this;
        }

        /**
         * @param bootServer [string] The UUID of the attached server.
         * &gt; **⚠ WARNING**
         * &gt; 
         * &gt; ssh_key_path and ssh_keys fields are immutable.
         * If you want to create a **CUBE** server, the type of the inline volume must be set to **DAS**. In this case, you can not set the `size` argument since it is taken from the `template_uuid` you set in the server.
         * 
         * @return builder
         * 
         */
        public Builder bootServer(String bootServer) {
            return bootServer(Output.of(bootServer));
        }

        /**
         * @param bus [Boolean] The bus type of the volume: VIRTIO or IDE.
         * 
         * @return builder
         * 
         */
        public Builder bus(@Nullable Output<String> bus) {
            $.bus = bus;
            return this;
        }

        /**
         * @param bus [Boolean] The bus type of the volume: VIRTIO or IDE.
         * 
         * @return builder
         * 
         */
        public Builder bus(String bus) {
            return bus(Output.of(bus));
        }

        /**
         * @param cpuHotPlug [string] Is capable of CPU hot plug (no reboot required)
         * 
         * @return builder
         * 
         */
        public Builder cpuHotPlug(@Nullable Output<Boolean> cpuHotPlug) {
            $.cpuHotPlug = cpuHotPlug;
            return this;
        }

        /**
         * @param cpuHotPlug [string] Is capable of CPU hot plug (no reboot required)
         * 
         * @return builder
         * 
         */
        public Builder cpuHotPlug(Boolean cpuHotPlug) {
            return cpuHotPlug(Output.of(cpuHotPlug));
        }

        /**
         * @param datacenterId [string] The ID of a Virtual Data Center.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(@Nullable Output<String> datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        /**
         * @param datacenterId [string] The ID of a Virtual Data Center.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(String datacenterId) {
            return datacenterId(Output.of(datacenterId));
        }

        /**
         * @param deviceNumber The Logical Unit Number of the storage volume. Null for volumes not mounted to any VM.
         * 
         * @return builder
         * 
         */
        public Builder deviceNumber(@Nullable Output<Integer> deviceNumber) {
            $.deviceNumber = deviceNumber;
            return this;
        }

        /**
         * @param deviceNumber The Logical Unit Number of the storage volume. Null for volumes not mounted to any VM.
         * 
         * @return builder
         * 
         */
        public Builder deviceNumber(Integer deviceNumber) {
            return deviceNumber(Output.of(deviceNumber));
        }

        /**
         * @param discVirtioHotPlug [string] Is capable of Virt-IO drive hot plug (no reboot required)
         * 
         * @return builder
         * 
         */
        public Builder discVirtioHotPlug(@Nullable Output<Boolean> discVirtioHotPlug) {
            $.discVirtioHotPlug = discVirtioHotPlug;
            return this;
        }

        /**
         * @param discVirtioHotPlug [string] Is capable of Virt-IO drive hot plug (no reboot required)
         * 
         * @return builder
         * 
         */
        public Builder discVirtioHotPlug(Boolean discVirtioHotPlug) {
            return discVirtioHotPlug(Output.of(discVirtioHotPlug));
        }

        /**
         * @param discVirtioHotUnplug [string] Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.
         * 
         * @return builder
         * 
         */
        public Builder discVirtioHotUnplug(@Nullable Output<Boolean> discVirtioHotUnplug) {
            $.discVirtioHotUnplug = discVirtioHotUnplug;
            return this;
        }

        /**
         * @param discVirtioHotUnplug [string] Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.
         * 
         * @return builder
         * 
         */
        public Builder discVirtioHotUnplug(Boolean discVirtioHotUnplug) {
            return discVirtioHotUnplug(Output.of(discVirtioHotUnplug));
        }

        /**
         * @param diskType [string] The volume type: HDD or SSD. This property is immutable.
         * 
         * @return builder
         * 
         */
        public Builder diskType(@Nullable Output<String> diskType) {
            $.diskType = diskType;
            return this;
        }

        /**
         * @param diskType [string] The volume type: HDD or SSD. This property is immutable.
         * 
         * @return builder
         * 
         */
        public Builder diskType(String diskType) {
            return diskType(Output.of(diskType));
        }

        /**
         * @param image The image or snapshot UUID.
         * 
         * @return builder
         * 
         */
        public Builder image(@Nullable Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image The image or snapshot UUID.
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        public Builder imageId(@Nullable Output<String> imageId) {
            $.imageId = imageId;
            return this;
        }

        public Builder imageId(String imageId) {
            return imageId(Output.of(imageId));
        }

        /**
         * @param imageName [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licence_type` is not provided. Attribute is immutable.
         * 
         * @return builder
         * 
         */
        public Builder imageName(@Nullable Output<String> imageName) {
            $.imageName = imageName;
            return this;
        }

        /**
         * @param imageName [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licence_type` is not provided. Attribute is immutable.
         * 
         * @return builder
         * 
         */
        public Builder imageName(String imageName) {
            return imageName(Output.of(imageName));
        }

        /**
         * @param imagePassword [string] Required if `sshkey_path` is not provided.
         * 
         * @return builder
         * 
         */
        public Builder imagePassword(@Nullable Output<String> imagePassword) {
            $.imagePassword = imagePassword;
            return this;
        }

        /**
         * @param imagePassword [string] Required if `sshkey_path` is not provided.
         * 
         * @return builder
         * 
         */
        public Builder imagePassword(String imagePassword) {
            return imagePassword(Output.of(imagePassword));
        }

        /**
         * @param licenceType [string] Required if `image_name` is not provided.
         * 
         * @return builder
         * 
         */
        public Builder licenceType(@Nullable Output<String> licenceType) {
            $.licenceType = licenceType;
            return this;
        }

        /**
         * @param licenceType [string] Required if `image_name` is not provided.
         * 
         * @return builder
         * 
         */
        public Builder licenceType(String licenceType) {
            return licenceType(Output.of(licenceType));
        }

        /**
         * @param name [string] The name of the volume.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [string] The name of the volume.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nicHotPlug [string] Is capable of nic hot plug (no reboot required)
         * 
         * @return builder
         * 
         */
        public Builder nicHotPlug(@Nullable Output<Boolean> nicHotPlug) {
            $.nicHotPlug = nicHotPlug;
            return this;
        }

        /**
         * @param nicHotPlug [string] Is capable of nic hot plug (no reboot required)
         * 
         * @return builder
         * 
         */
        public Builder nicHotPlug(Boolean nicHotPlug) {
            return nicHotPlug(Output.of(nicHotPlug));
        }

        /**
         * @param nicHotUnplug [string] Is capable of nic hot unplug (no reboot required)
         * 
         * @return builder
         * 
         */
        public Builder nicHotUnplug(@Nullable Output<Boolean> nicHotUnplug) {
            $.nicHotUnplug = nicHotUnplug;
            return this;
        }

        /**
         * @param nicHotUnplug [string] Is capable of nic hot unplug (no reboot required)
         * 
         * @return builder
         * 
         */
        public Builder nicHotUnplug(Boolean nicHotUnplug) {
            return nicHotUnplug(Output.of(nicHotUnplug));
        }

        /**
         * @param pciSlot The PCI slot number of the storage volume. Null for volumes not mounted to any VM.
         * 
         * @return builder
         * 
         */
        public Builder pciSlot(@Nullable Output<Integer> pciSlot) {
            $.pciSlot = pciSlot;
            return this;
        }

        /**
         * @param pciSlot The PCI slot number of the storage volume. Null for volumes not mounted to any VM.
         * 
         * @return builder
         * 
         */
        public Builder pciSlot(Integer pciSlot) {
            return pciSlot(Output.of(pciSlot));
        }

        /**
         * @param ramHotPlug [string] Is capable of memory hot plug (no reboot required)
         * 
         * @return builder
         * 
         */
        public Builder ramHotPlug(@Nullable Output<Boolean> ramHotPlug) {
            $.ramHotPlug = ramHotPlug;
            return this;
        }

        /**
         * @param ramHotPlug [string] Is capable of memory hot plug (no reboot required)
         * 
         * @return builder
         * 
         */
        public Builder ramHotPlug(Boolean ramHotPlug) {
            return ramHotPlug(Output.of(ramHotPlug));
        }

        /**
         * @param serverId [string] The ID of a server.
         * 
         * @return builder
         * 
         */
        public Builder serverId(@Nullable Output<String> serverId) {
            $.serverId = serverId;
            return this;
        }

        /**
         * @param serverId [string] The ID of a server.
         * 
         * @return builder
         * 
         */
        public Builder serverId(String serverId) {
            return serverId(Output.of(serverId));
        }

        /**
         * @param size [integer] The size of the volume in GB.
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size [integer] The size of the volume in GB.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param sshKeyPaths [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. This property is immutable.
         * 
         * @return builder
         * 
         */
        public Builder sshKeyPaths(@Nullable Output<List<String>> sshKeyPaths) {
            $.sshKeyPaths = sshKeyPaths;
            return this;
        }

        /**
         * @param sshKeyPaths [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. This property is immutable.
         * 
         * @return builder
         * 
         */
        public Builder sshKeyPaths(List<String> sshKeyPaths) {
            return sshKeyPaths(Output.of(sshKeyPaths));
        }

        /**
         * @param sshKeyPaths [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. This property is immutable.
         * 
         * @return builder
         * 
         */
        public Builder sshKeyPaths(String... sshKeyPaths) {
            return sshKeyPaths(List.of(sshKeyPaths));
        }

        /**
         * @param sshKeys [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. This property is immutable.
         * 
         * @return builder
         * 
         */
        public Builder sshKeys(@Nullable Output<List<String>> sshKeys) {
            $.sshKeys = sshKeys;
            return this;
        }

        /**
         * @param sshKeys [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. This property is immutable.
         * 
         * @return builder
         * 
         */
        public Builder sshKeys(List<String> sshKeys) {
            return sshKeys(Output.of(sshKeys));
        }

        /**
         * @param sshKeys [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. This property is immutable.
         * 
         * @return builder
         * 
         */
        public Builder sshKeys(String... sshKeys) {
            return sshKeys(List.of(sshKeys));
        }

        /**
         * @param sshkey The associated public SSH key.
         * 
         * @return builder
         * 
         */
        public Builder sshkey(@Nullable Output<String> sshkey) {
            $.sshkey = sshkey;
            return this;
        }

        /**
         * @param sshkey The associated public SSH key.
         * 
         * @return builder
         * 
         */
        public Builder sshkey(String sshkey) {
            return sshkey(Output.of(sshkey));
        }

        /**
         * @param userData [string] The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. This option will work only with cloud-init compatible images.
         * 
         * @return builder
         * 
         */
        public Builder userData(@Nullable Output<String> userData) {
            $.userData = userData;
            return this;
        }

        /**
         * @param userData [string] The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. This option will work only with cloud-init compatible images.
         * 
         * @return builder
         * 
         */
        public Builder userData(String userData) {
            return userData(Output.of(userData));
        }

        public VolumeState build() {
            return $;
        }
    }

}
