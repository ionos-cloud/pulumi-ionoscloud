// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.kafka;

import com.ionoscloud.pulumi.ionoscloud.Utilities;
import com.ionoscloud.pulumi.ionoscloud.kafka.inputs.GetClusterArgs;
import com.ionoscloud.pulumi.ionoscloud.kafka.inputs.GetClusterPlainArgs;
import com.ionoscloud.pulumi.ionoscloud.kafka.inputs.GetTopicArgs;
import com.ionoscloud.pulumi.ionoscloud.kafka.inputs.GetTopicPlainArgs;
import com.ionoscloud.pulumi.ionoscloud.kafka.outputs.GetClusterResult;
import com.ionoscloud.pulumi.ionoscloud.kafka.outputs.GetTopicResult;
import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import java.util.concurrent.CompletableFuture;

public final class KafkaFunctions {
    /**
     * The **Kafka Cluster data source** can be used to search for and return an existing Kafka Cluster.
     * You can provide a string for the name parameter which will be compared with provisioned Kafka Clusters.
     * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
     * When this happens, please refine your search string so that it is specific enough to return only one result.
     * 
     * ## Example Usage
     * 
     * ### By ID
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.kafka.KafkaFunctions;
     * import com.pulumi.ionoscloud.kafka.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = KafkaFunctions.getCluster(GetClusterArgs.builder()
     *             .id("your_kafka_cluster_id")
     *             .location("location_of_kafka_cluster")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By Name
     * 
     * Needs to have the resource be previously created, or a depends_on clause to ensure that the resource is created before
     * this data source is called.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.kafka.KafkaFunctions;
     * import com.pulumi.ionoscloud.kafka.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = KafkaFunctions.getCluster(GetClusterArgs.builder()
     *             .name("kafka-cluster")
     *             .location("location_of_kafka_cluster")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClusterResult> getCluster(GetClusterArgs args) {
        return getCluster(args, InvokeOptions.Empty);
    }
    /**
     * The **Kafka Cluster data source** can be used to search for and return an existing Kafka Cluster.
     * You can provide a string for the name parameter which will be compared with provisioned Kafka Clusters.
     * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
     * When this happens, please refine your search string so that it is specific enough to return only one result.
     * 
     * ## Example Usage
     * 
     * ### By ID
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.kafka.KafkaFunctions;
     * import com.pulumi.ionoscloud.kafka.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = KafkaFunctions.getCluster(GetClusterArgs.builder()
     *             .id("your_kafka_cluster_id")
     *             .location("location_of_kafka_cluster")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By Name
     * 
     * Needs to have the resource be previously created, or a depends_on clause to ensure that the resource is created before
     * this data source is called.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.kafka.KafkaFunctions;
     * import com.pulumi.ionoscloud.kafka.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = KafkaFunctions.getCluster(GetClusterArgs.builder()
     *             .name("kafka-cluster")
     *             .location("location_of_kafka_cluster")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClusterResult> getClusterPlain(GetClusterPlainArgs args) {
        return getClusterPlain(args, InvokeOptions.Empty);
    }
    /**
     * The **Kafka Cluster data source** can be used to search for and return an existing Kafka Cluster.
     * You can provide a string for the name parameter which will be compared with provisioned Kafka Clusters.
     * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
     * When this happens, please refine your search string so that it is specific enough to return only one result.
     * 
     * ## Example Usage
     * 
     * ### By ID
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.kafka.KafkaFunctions;
     * import com.pulumi.ionoscloud.kafka.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = KafkaFunctions.getCluster(GetClusterArgs.builder()
     *             .id("your_kafka_cluster_id")
     *             .location("location_of_kafka_cluster")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By Name
     * 
     * Needs to have the resource be previously created, or a depends_on clause to ensure that the resource is created before
     * this data source is called.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.kafka.KafkaFunctions;
     * import com.pulumi.ionoscloud.kafka.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = KafkaFunctions.getCluster(GetClusterArgs.builder()
     *             .name("kafka-cluster")
     *             .location("location_of_kafka_cluster")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClusterResult> getCluster(GetClusterArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("ionoscloud:kafka/getCluster:getCluster", TypeShape.of(GetClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The **Kafka Cluster data source** can be used to search for and return an existing Kafka Cluster.
     * You can provide a string for the name parameter which will be compared with provisioned Kafka Clusters.
     * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
     * When this happens, please refine your search string so that it is specific enough to return only one result.
     * 
     * ## Example Usage
     * 
     * ### By ID
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.kafka.KafkaFunctions;
     * import com.pulumi.ionoscloud.kafka.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = KafkaFunctions.getCluster(GetClusterArgs.builder()
     *             .id("your_kafka_cluster_id")
     *             .location("location_of_kafka_cluster")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By Name
     * 
     * Needs to have the resource be previously created, or a depends_on clause to ensure that the resource is created before
     * this data source is called.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.kafka.KafkaFunctions;
     * import com.pulumi.ionoscloud.kafka.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = KafkaFunctions.getCluster(GetClusterArgs.builder()
     *             .name("kafka-cluster")
     *             .location("location_of_kafka_cluster")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClusterResult> getCluster(GetClusterArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("ionoscloud:kafka/getCluster:getCluster", TypeShape.of(GetClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The **Kafka Cluster data source** can be used to search for and return an existing Kafka Cluster.
     * You can provide a string for the name parameter which will be compared with provisioned Kafka Clusters.
     * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
     * When this happens, please refine your search string so that it is specific enough to return only one result.
     * 
     * ## Example Usage
     * 
     * ### By ID
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.kafka.KafkaFunctions;
     * import com.pulumi.ionoscloud.kafka.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = KafkaFunctions.getCluster(GetClusterArgs.builder()
     *             .id("your_kafka_cluster_id")
     *             .location("location_of_kafka_cluster")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By Name
     * 
     * Needs to have the resource be previously created, or a depends_on clause to ensure that the resource is created before
     * this data source is called.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.kafka.KafkaFunctions;
     * import com.pulumi.ionoscloud.kafka.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = KafkaFunctions.getCluster(GetClusterArgs.builder()
     *             .name("kafka-cluster")
     *             .location("location_of_kafka_cluster")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClusterResult> getClusterPlain(GetClusterPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("ionoscloud:kafka/getCluster:getCluster", TypeShape.of(GetClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The **Kafka topic data source** can be used to search for and return an existing Kafka Cluster Topic.
     * You can provide a string for the name parameter which will be compared with provisioned Kafka Cluster Topics.
     * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
     * When this happens, please refine your search string so that it is specific enough to return only one result.
     * 
     * ## Example Usage
     * 
     * ### By ID
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.kafka.KafkaFunctions;
     * import com.pulumi.ionoscloud.kafka.inputs.GetTopicArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = KafkaFunctions.getTopic(GetTopicArgs.builder()
     *             .id("your_kafka_cluster_topic_id")
     *             .clusterId("your_kafka_cluster_id")
     *             .location("your_kafka_cluster_location")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By Name
     * 
     * Needs to have the resource be previously created, or a depends_on clause to ensure that the resource is created before
     * this data source is called.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.kafka.KafkaFunctions;
     * import com.pulumi.ionoscloud.kafka.inputs.GetTopicArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = KafkaFunctions.getTopic(GetTopicArgs.builder()
     *             .name("kafka-cluster-topic")
     *             .clusterId("your_kafka_cluster_id")
     *             .location("location_of_kafka_cluster")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetTopicResult> getTopic(GetTopicArgs args) {
        return getTopic(args, InvokeOptions.Empty);
    }
    /**
     * The **Kafka topic data source** can be used to search for and return an existing Kafka Cluster Topic.
     * You can provide a string for the name parameter which will be compared with provisioned Kafka Cluster Topics.
     * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
     * When this happens, please refine your search string so that it is specific enough to return only one result.
     * 
     * ## Example Usage
     * 
     * ### By ID
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.kafka.KafkaFunctions;
     * import com.pulumi.ionoscloud.kafka.inputs.GetTopicArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = KafkaFunctions.getTopic(GetTopicArgs.builder()
     *             .id("your_kafka_cluster_topic_id")
     *             .clusterId("your_kafka_cluster_id")
     *             .location("your_kafka_cluster_location")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By Name
     * 
     * Needs to have the resource be previously created, or a depends_on clause to ensure that the resource is created before
     * this data source is called.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.kafka.KafkaFunctions;
     * import com.pulumi.ionoscloud.kafka.inputs.GetTopicArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = KafkaFunctions.getTopic(GetTopicArgs.builder()
     *             .name("kafka-cluster-topic")
     *             .clusterId("your_kafka_cluster_id")
     *             .location("location_of_kafka_cluster")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetTopicResult> getTopicPlain(GetTopicPlainArgs args) {
        return getTopicPlain(args, InvokeOptions.Empty);
    }
    /**
     * The **Kafka topic data source** can be used to search for and return an existing Kafka Cluster Topic.
     * You can provide a string for the name parameter which will be compared with provisioned Kafka Cluster Topics.
     * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
     * When this happens, please refine your search string so that it is specific enough to return only one result.
     * 
     * ## Example Usage
     * 
     * ### By ID
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.kafka.KafkaFunctions;
     * import com.pulumi.ionoscloud.kafka.inputs.GetTopicArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = KafkaFunctions.getTopic(GetTopicArgs.builder()
     *             .id("your_kafka_cluster_topic_id")
     *             .clusterId("your_kafka_cluster_id")
     *             .location("your_kafka_cluster_location")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By Name
     * 
     * Needs to have the resource be previously created, or a depends_on clause to ensure that the resource is created before
     * this data source is called.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.kafka.KafkaFunctions;
     * import com.pulumi.ionoscloud.kafka.inputs.GetTopicArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = KafkaFunctions.getTopic(GetTopicArgs.builder()
     *             .name("kafka-cluster-topic")
     *             .clusterId("your_kafka_cluster_id")
     *             .location("location_of_kafka_cluster")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetTopicResult> getTopic(GetTopicArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("ionoscloud:kafka/getTopic:getTopic", TypeShape.of(GetTopicResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The **Kafka topic data source** can be used to search for and return an existing Kafka Cluster Topic.
     * You can provide a string for the name parameter which will be compared with provisioned Kafka Cluster Topics.
     * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
     * When this happens, please refine your search string so that it is specific enough to return only one result.
     * 
     * ## Example Usage
     * 
     * ### By ID
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.kafka.KafkaFunctions;
     * import com.pulumi.ionoscloud.kafka.inputs.GetTopicArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = KafkaFunctions.getTopic(GetTopicArgs.builder()
     *             .id("your_kafka_cluster_topic_id")
     *             .clusterId("your_kafka_cluster_id")
     *             .location("your_kafka_cluster_location")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By Name
     * 
     * Needs to have the resource be previously created, or a depends_on clause to ensure that the resource is created before
     * this data source is called.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.kafka.KafkaFunctions;
     * import com.pulumi.ionoscloud.kafka.inputs.GetTopicArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = KafkaFunctions.getTopic(GetTopicArgs.builder()
     *             .name("kafka-cluster-topic")
     *             .clusterId("your_kafka_cluster_id")
     *             .location("location_of_kafka_cluster")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetTopicResult> getTopic(GetTopicArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("ionoscloud:kafka/getTopic:getTopic", TypeShape.of(GetTopicResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The **Kafka topic data source** can be used to search for and return an existing Kafka Cluster Topic.
     * You can provide a string for the name parameter which will be compared with provisioned Kafka Cluster Topics.
     * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
     * When this happens, please refine your search string so that it is specific enough to return only one result.
     * 
     * ## Example Usage
     * 
     * ### By ID
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.kafka.KafkaFunctions;
     * import com.pulumi.ionoscloud.kafka.inputs.GetTopicArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = KafkaFunctions.getTopic(GetTopicArgs.builder()
     *             .id("your_kafka_cluster_topic_id")
     *             .clusterId("your_kafka_cluster_id")
     *             .location("your_kafka_cluster_location")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By Name
     * 
     * Needs to have the resource be previously created, or a depends_on clause to ensure that the resource is created before
     * this data source is called.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.kafka.KafkaFunctions;
     * import com.pulumi.ionoscloud.kafka.inputs.GetTopicArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = KafkaFunctions.getTopic(GetTopicArgs.builder()
     *             .name("kafka-cluster-topic")
     *             .clusterId("your_kafka_cluster_id")
     *             .location("location_of_kafka_cluster")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetTopicResult> getTopicPlain(GetTopicPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("ionoscloud:kafka/getTopic:getTopic", TypeShape.of(GetTopicResult.class), args, Utilities.withVersion(options));
    }
}
