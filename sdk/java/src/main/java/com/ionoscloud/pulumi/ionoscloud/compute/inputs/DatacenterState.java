// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.compute.inputs;

import com.ionoscloud.pulumi.ionoscloud.compute.inputs.DatacenterCpuArchitectureArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatacenterState extends com.pulumi.resources.ResourceArgs {

    public static final DatacenterState Empty = new DatacenterState();

    /**
     * Array of features and CPU families available in a location
     * 
     */
    @Import(name="cpuArchitectures")
    private @Nullable Output<List<DatacenterCpuArchitectureArgs>> cpuArchitectures;

    /**
     * @return Array of features and CPU families available in a location
     * 
     */
    public Optional<Output<List<DatacenterCpuArchitectureArgs>>> cpuArchitectures() {
        return Optional.ofNullable(this.cpuArchitectures);
    }

    /**
     * [string] Description for the Virtual Data Center.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return [string] Description for the Virtual Data Center.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * List of features supported by the location this data center is part of
     * 
     */
    @Import(name="features")
    private @Nullable Output<List<String>> features;

    /**
     * @return List of features supported by the location this data center is part of
     * 
     */
    public Optional<Output<List<String>>> features() {
        return Optional.ofNullable(this.features);
    }

    /**
     * The automatically-assigned /56 IPv6 CIDR block if IPv6 is enabled on this virtual data center
     * 
     */
    @Import(name="ipv6CidrBlock")
    private @Nullable Output<String> ipv6CidrBlock;

    /**
     * @return The automatically-assigned /56 IPv6 CIDR block if IPv6 is enabled on this virtual data center
     * 
     */
    public Optional<Output<String>> ipv6CidrBlock() {
        return Optional.ofNullable(this.ipv6CidrBlock);
    }

    /**
     * [string] The regional location where the Virtual Data Center will be created. This argument is immutable.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return [string] The regional location where the Virtual Data Center will be created. This argument is immutable.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * [string] The name of the Virtual Data Center.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return [string] The name of the Virtual Data Center.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * [bool] Boolean value representing if the data center requires extra protection e.g. two factor protection
     * 
     */
    @Import(name="secAuthProtection")
    private @Nullable Output<Boolean> secAuthProtection;

    /**
     * @return [bool] Boolean value representing if the data center requires extra protection e.g. two factor protection
     * 
     */
    public Optional<Output<Boolean>> secAuthProtection() {
        return Optional.ofNullable(this.secAuthProtection);
    }

    /**
     * The version of that Data Center. Gets incremented with every change
     * 
     */
    @Import(name="version")
    private @Nullable Output<Integer> version;

    /**
     * @return The version of that Data Center. Gets incremented with every change
     * 
     */
    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    private DatacenterState() {}

    private DatacenterState(DatacenterState $) {
        this.cpuArchitectures = $.cpuArchitectures;
        this.description = $.description;
        this.features = $.features;
        this.ipv6CidrBlock = $.ipv6CidrBlock;
        this.location = $.location;
        this.name = $.name;
        this.secAuthProtection = $.secAuthProtection;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatacenterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatacenterState $;

        public Builder() {
            $ = new DatacenterState();
        }

        public Builder(DatacenterState defaults) {
            $ = new DatacenterState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cpuArchitectures Array of features and CPU families available in a location
         * 
         * @return builder
         * 
         */
        public Builder cpuArchitectures(@Nullable Output<List<DatacenterCpuArchitectureArgs>> cpuArchitectures) {
            $.cpuArchitectures = cpuArchitectures;
            return this;
        }

        /**
         * @param cpuArchitectures Array of features and CPU families available in a location
         * 
         * @return builder
         * 
         */
        public Builder cpuArchitectures(List<DatacenterCpuArchitectureArgs> cpuArchitectures) {
            return cpuArchitectures(Output.of(cpuArchitectures));
        }

        /**
         * @param cpuArchitectures Array of features and CPU families available in a location
         * 
         * @return builder
         * 
         */
        public Builder cpuArchitectures(DatacenterCpuArchitectureArgs... cpuArchitectures) {
            return cpuArchitectures(List.of(cpuArchitectures));
        }

        /**
         * @param description [string] Description for the Virtual Data Center.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description [string] Description for the Virtual Data Center.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param features List of features supported by the location this data center is part of
         * 
         * @return builder
         * 
         */
        public Builder features(@Nullable Output<List<String>> features) {
            $.features = features;
            return this;
        }

        /**
         * @param features List of features supported by the location this data center is part of
         * 
         * @return builder
         * 
         */
        public Builder features(List<String> features) {
            return features(Output.of(features));
        }

        /**
         * @param features List of features supported by the location this data center is part of
         * 
         * @return builder
         * 
         */
        public Builder features(String... features) {
            return features(List.of(features));
        }

        /**
         * @param ipv6CidrBlock The automatically-assigned /56 IPv6 CIDR block if IPv6 is enabled on this virtual data center
         * 
         * @return builder
         * 
         */
        public Builder ipv6CidrBlock(@Nullable Output<String> ipv6CidrBlock) {
            $.ipv6CidrBlock = ipv6CidrBlock;
            return this;
        }

        /**
         * @param ipv6CidrBlock The automatically-assigned /56 IPv6 CIDR block if IPv6 is enabled on this virtual data center
         * 
         * @return builder
         * 
         */
        public Builder ipv6CidrBlock(String ipv6CidrBlock) {
            return ipv6CidrBlock(Output.of(ipv6CidrBlock));
        }

        /**
         * @param location [string] The regional location where the Virtual Data Center will be created. This argument is immutable.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location [string] The regional location where the Virtual Data Center will be created. This argument is immutable.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name [string] The name of the Virtual Data Center.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [string] The name of the Virtual Data Center.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param secAuthProtection [bool] Boolean value representing if the data center requires extra protection e.g. two factor protection
         * 
         * @return builder
         * 
         */
        public Builder secAuthProtection(@Nullable Output<Boolean> secAuthProtection) {
            $.secAuthProtection = secAuthProtection;
            return this;
        }

        /**
         * @param secAuthProtection [bool] Boolean value representing if the data center requires extra protection e.g. two factor protection
         * 
         * @return builder
         * 
         */
        public Builder secAuthProtection(Boolean secAuthProtection) {
            return secAuthProtection(Output.of(secAuthProtection));
        }

        /**
         * @param version The version of that Data Center. Gets incremented with every change
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of that Data Center. Gets incremented with every change
         * 
         * @return builder
         * 
         */
        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public DatacenterState build() {
            return $;
        }
    }

}
