// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.autoscaling.inputs;

import com.ionoscloud.pulumi.ionoscloud.autoscaling.inputs.GroupPolicyArgs;
import com.ionoscloud.pulumi.ionoscloud.autoscaling.inputs.GroupReplicaConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupState extends com.pulumi.resources.ResourceArgs {

    public static final GroupState Empty = new GroupState();

    /**
     * [string] Unique identifier for the resource
     * 
     */
    @Import(name="datacenterId")
    private @Nullable Output<String> datacenterId;

    /**
     * @return [string] Unique identifier for the resource
     * 
     */
    public Optional<Output<String>> datacenterId() {
        return Optional.ofNullable(this.datacenterId);
    }

    /**
     * Location of the data center.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Location of the data center.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * [int] The maximum value for the number of replicas on a VM Auto Scaling Group. Must be &gt;= 0 and &lt;= 200. Will be enforced for both automatic and manual changes.
     * 
     */
    @Import(name="maxReplicaCount")
    private @Nullable Output<Integer> maxReplicaCount;

    /**
     * @return [int] The maximum value for the number of replicas on a VM Auto Scaling Group. Must be &gt;= 0 and &lt;= 200. Will be enforced for both automatic and manual changes.
     * 
     */
    public Optional<Output<Integer>> maxReplicaCount() {
        return Optional.ofNullable(this.maxReplicaCount);
    }

    /**
     * [int] The minimum value for the number of replicas on a VM Auto Scaling Group. Must be &gt;= 0 and &lt;= 200. Will be enforced for both automatic and manual changes.
     * 
     */
    @Import(name="minReplicaCount")
    private @Nullable Output<Integer> minReplicaCount;

    /**
     * @return [int] The minimum value for the number of replicas on a VM Auto Scaling Group. Must be &gt;= 0 and &lt;= 200. Will be enforced for both automatic and manual changes.
     * 
     */
    public Optional<Output<Integer>> minReplicaCount() {
        return Optional.ofNullable(this.minReplicaCount);
    }

    /**
     * [string] User-defined name for the Autoscaling Group.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return [string] User-defined name for the Autoscaling Group.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * [List] Specifies the behavior of this Autoscaling Group. A policy consists of Triggers and Actions, whereby an Action is some kind of automated behavior, and a Trigger is defined by the circumstances under which the Action is triggered. Currently, two separate Actions, namely Scaling In and Out are supported, triggered through Thresholds defined on a given Metric.
     * 
     */
    @Import(name="policy")
    private @Nullable Output<GroupPolicyArgs> policy;

    /**
     * @return [List] Specifies the behavior of this Autoscaling Group. A policy consists of Triggers and Actions, whereby an Action is some kind of automated behavior, and a Trigger is defined by the circumstances under which the Action is triggered. Currently, two separate Actions, namely Scaling In and Out are supported, triggered through Thresholds defined on a given Metric.
     * 
     */
    public Optional<Output<GroupPolicyArgs>> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * [List]
     * 
     */
    @Import(name="replicaConfiguration")
    private @Nullable Output<GroupReplicaConfigurationArgs> replicaConfiguration;

    /**
     * @return [List]
     * 
     */
    public Optional<Output<GroupReplicaConfigurationArgs>> replicaConfiguration() {
        return Optional.ofNullable(this.replicaConfiguration);
    }

    private GroupState() {}

    private GroupState(GroupState $) {
        this.datacenterId = $.datacenterId;
        this.location = $.location;
        this.maxReplicaCount = $.maxReplicaCount;
        this.minReplicaCount = $.minReplicaCount;
        this.name = $.name;
        this.policy = $.policy;
        this.replicaConfiguration = $.replicaConfiguration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupState $;

        public Builder() {
            $ = new GroupState();
        }

        public Builder(GroupState defaults) {
            $ = new GroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param datacenterId [string] Unique identifier for the resource
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(@Nullable Output<String> datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        /**
         * @param datacenterId [string] Unique identifier for the resource
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(String datacenterId) {
            return datacenterId(Output.of(datacenterId));
        }

        /**
         * @param location Location of the data center.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Location of the data center.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param maxReplicaCount [int] The maximum value for the number of replicas on a VM Auto Scaling Group. Must be &gt;= 0 and &lt;= 200. Will be enforced for both automatic and manual changes.
         * 
         * @return builder
         * 
         */
        public Builder maxReplicaCount(@Nullable Output<Integer> maxReplicaCount) {
            $.maxReplicaCount = maxReplicaCount;
            return this;
        }

        /**
         * @param maxReplicaCount [int] The maximum value for the number of replicas on a VM Auto Scaling Group. Must be &gt;= 0 and &lt;= 200. Will be enforced for both automatic and manual changes.
         * 
         * @return builder
         * 
         */
        public Builder maxReplicaCount(Integer maxReplicaCount) {
            return maxReplicaCount(Output.of(maxReplicaCount));
        }

        /**
         * @param minReplicaCount [int] The minimum value for the number of replicas on a VM Auto Scaling Group. Must be &gt;= 0 and &lt;= 200. Will be enforced for both automatic and manual changes.
         * 
         * @return builder
         * 
         */
        public Builder minReplicaCount(@Nullable Output<Integer> minReplicaCount) {
            $.minReplicaCount = minReplicaCount;
            return this;
        }

        /**
         * @param minReplicaCount [int] The minimum value for the number of replicas on a VM Auto Scaling Group. Must be &gt;= 0 and &lt;= 200. Will be enforced for both automatic and manual changes.
         * 
         * @return builder
         * 
         */
        public Builder minReplicaCount(Integer minReplicaCount) {
            return minReplicaCount(Output.of(minReplicaCount));
        }

        /**
         * @param name [string] User-defined name for the Autoscaling Group.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [string] User-defined name for the Autoscaling Group.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param policy [List] Specifies the behavior of this Autoscaling Group. A policy consists of Triggers and Actions, whereby an Action is some kind of automated behavior, and a Trigger is defined by the circumstances under which the Action is triggered. Currently, two separate Actions, namely Scaling In and Out are supported, triggered through Thresholds defined on a given Metric.
         * 
         * @return builder
         * 
         */
        public Builder policy(@Nullable Output<GroupPolicyArgs> policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param policy [List] Specifies the behavior of this Autoscaling Group. A policy consists of Triggers and Actions, whereby an Action is some kind of automated behavior, and a Trigger is defined by the circumstances under which the Action is triggered. Currently, two separate Actions, namely Scaling In and Out are supported, triggered through Thresholds defined on a given Metric.
         * 
         * @return builder
         * 
         */
        public Builder policy(GroupPolicyArgs policy) {
            return policy(Output.of(policy));
        }

        /**
         * @param replicaConfiguration [List]
         * 
         * @return builder
         * 
         */
        public Builder replicaConfiguration(@Nullable Output<GroupReplicaConfigurationArgs> replicaConfiguration) {
            $.replicaConfiguration = replicaConfiguration;
            return this;
        }

        /**
         * @param replicaConfiguration [List]
         * 
         * @return builder
         * 
         */
        public Builder replicaConfiguration(GroupReplicaConfigurationArgs replicaConfiguration) {
            return replicaConfiguration(Output.of(replicaConfiguration));
        }

        public GroupState build() {
            return $;
        }
    }

}
