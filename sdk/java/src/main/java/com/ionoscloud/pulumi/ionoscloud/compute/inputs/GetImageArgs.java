// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImageArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetImageArgs Empty = new GetImageArgs();

    /**
     * Cloud init compatibility (&#34;NONE&#34; or &#34;V1&#34;). Exact match.
     * 
     */
    @Import(name="cloudInit")
    private @Nullable Output<String> cloudInit;

    /**
     * @return Cloud init compatibility (&#34;NONE&#34; or &#34;V1&#34;). Exact match.
     * 
     */
    public Optional<Output<String>> cloudInit() {
        return Optional.ofNullable(this.cloudInit);
    }

    /**
     * description of the image
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return description of the image
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Image alias of the image you are searching for. Exact match. E.g. =`centos:latest`, `ubuntu:latest`
     * 
     */
    @Import(name="imageAlias")
    private @Nullable Output<String> imageAlias;

    /**
     * @return Image alias of the image you are searching for. Exact match. E.g. =`centos:latest`, `ubuntu:latest`
     * 
     */
    public Optional<Output<String>> imageAlias() {
        return Optional.ofNullable(this.imageAlias);
    }

    /**
     * Id of the existing image&#39;s location. Exact match. Possible values: `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `us/ewr`, `us/las`
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Id of the existing image&#39;s location. Exact match. Possible values: `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `us/ewr`, `us/las`
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Name of an existing image that you want to search for. It will return an exact match if one exists, otherwise it will retrieve partial matches.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of an existing image that you want to search for. It will return an exact match if one exists, otherwise it will retrieve partial matches.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The image type, HDD or CD-ROM. Exact match.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The image type, HDD or CD-ROM. Exact match.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The version of the image that you want to search for.
     * 
     * If both &#34;name&#34; and &#34;version&#34; are provided the plugin will concatenate the two strings in this format [name]-[version].
     * The resulting string will be used to search for an exact match. An error will be thrown if one is not found.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return The version of the image that you want to search for.
     * 
     * If both &#34;name&#34; and &#34;version&#34; are provided the plugin will concatenate the two strings in this format [name]-[version].
     * The resulting string will be used to search for an exact match. An error will be thrown if one is not found.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private GetImageArgs() {}

    private GetImageArgs(GetImageArgs $) {
        this.cloudInit = $.cloudInit;
        this.description = $.description;
        this.imageAlias = $.imageAlias;
        this.location = $.location;
        this.name = $.name;
        this.type = $.type;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImageArgs $;

        public Builder() {
            $ = new GetImageArgs();
        }

        public Builder(GetImageArgs defaults) {
            $ = new GetImageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cloudInit Cloud init compatibility (&#34;NONE&#34; or &#34;V1&#34;). Exact match.
         * 
         * @return builder
         * 
         */
        public Builder cloudInit(@Nullable Output<String> cloudInit) {
            $.cloudInit = cloudInit;
            return this;
        }

        /**
         * @param cloudInit Cloud init compatibility (&#34;NONE&#34; or &#34;V1&#34;). Exact match.
         * 
         * @return builder
         * 
         */
        public Builder cloudInit(String cloudInit) {
            return cloudInit(Output.of(cloudInit));
        }

        /**
         * @param description description of the image
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description description of the image
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param imageAlias Image alias of the image you are searching for. Exact match. E.g. =`centos:latest`, `ubuntu:latest`
         * 
         * @return builder
         * 
         */
        public Builder imageAlias(@Nullable Output<String> imageAlias) {
            $.imageAlias = imageAlias;
            return this;
        }

        /**
         * @param imageAlias Image alias of the image you are searching for. Exact match. E.g. =`centos:latest`, `ubuntu:latest`
         * 
         * @return builder
         * 
         */
        public Builder imageAlias(String imageAlias) {
            return imageAlias(Output.of(imageAlias));
        }

        /**
         * @param location Id of the existing image&#39;s location. Exact match. Possible values: `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `us/ewr`, `us/las`
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Id of the existing image&#39;s location. Exact match. Possible values: `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `us/ewr`, `us/las`
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Name of an existing image that you want to search for. It will return an exact match if one exists, otherwise it will retrieve partial matches.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of an existing image that you want to search for. It will return an exact match if one exists, otherwise it will retrieve partial matches.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type The image type, HDD or CD-ROM. Exact match.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The image type, HDD or CD-ROM. Exact match.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param version The version of the image that you want to search for.
         * 
         * If both &#34;name&#34; and &#34;version&#34; are provided the plugin will concatenate the two strings in this format [name]-[version].
         * The resulting string will be used to search for an exact match. An error will be thrown if one is not found.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of the image that you want to search for.
         * 
         * If both &#34;name&#34; and &#34;version&#34; are provided the plugin will concatenate the two strings in this format [name]-[version].
         * The resulting string will be used to search for an exact match. An error will be thrown if one is not found.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public GetImageArgs build() {
            return $;
        }
    }

}
