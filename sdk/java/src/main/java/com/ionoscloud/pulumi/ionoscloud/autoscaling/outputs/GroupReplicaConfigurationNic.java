// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.autoscaling.outputs;

import com.ionoscloud.pulumi.ionoscloud.autoscaling.outputs.GroupReplicaConfigurationNicFirewallRule;
import com.ionoscloud.pulumi.ionoscloud.autoscaling.outputs.GroupReplicaConfigurationNicFlowLog;
import com.ionoscloud.pulumi.ionoscloud.autoscaling.outputs.GroupReplicaConfigurationNicTargetGroup;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GroupReplicaConfigurationNic {
    /**
     * @return Dhcp flag for this replica Nic. This is an optional attribute with default value of &#39;true&#39; if not given in the request payload or given as null.
     * 
     */
    private @Nullable Boolean dhcp;
    /**
     * @return Activate or deactivate the firewall. By default, an active firewall without any defined rules will block all incoming network traffic except for the firewall rules that explicitly allows certain protocols, IP addresses and ports.
     * 
     */
    private @Nullable Boolean firewallActive;
    /**
     * @return List of all firewall rules for the specified NIC.
     * 
     */
    private @Nullable List<GroupReplicaConfigurationNicFirewallRule> firewallRules;
    /**
     * @return The type of firewall rules that will be allowed on the NIC. If not specified, the default INGRESS value is used.
     * 
     */
    private @Nullable String firewallType;
    /**
     * @return List of all flow logs for the specified NIC.
     * 
     */
    private @Nullable List<GroupReplicaConfigurationNicFlowLog> flowLogs;
    /**
     * @return Lan ID for this replica Nic.
     * 
     */
    private Integer lan;
    /**
     * @return [string] User-defined name for the Autoscaling Group.
     * 
     */
    private String name;
    /**
     * @return In order to link VM to ALB, target group must be provided.
     * 
     */
    private @Nullable GroupReplicaConfigurationNicTargetGroup targetGroup;

    private GroupReplicaConfigurationNic() {}
    /**
     * @return Dhcp flag for this replica Nic. This is an optional attribute with default value of &#39;true&#39; if not given in the request payload or given as null.
     * 
     */
    public Optional<Boolean> dhcp() {
        return Optional.ofNullable(this.dhcp);
    }
    /**
     * @return Activate or deactivate the firewall. By default, an active firewall without any defined rules will block all incoming network traffic except for the firewall rules that explicitly allows certain protocols, IP addresses and ports.
     * 
     */
    public Optional<Boolean> firewallActive() {
        return Optional.ofNullable(this.firewallActive);
    }
    /**
     * @return List of all firewall rules for the specified NIC.
     * 
     */
    public List<GroupReplicaConfigurationNicFirewallRule> firewallRules() {
        return this.firewallRules == null ? List.of() : this.firewallRules;
    }
    /**
     * @return The type of firewall rules that will be allowed on the NIC. If not specified, the default INGRESS value is used.
     * 
     */
    public Optional<String> firewallType() {
        return Optional.ofNullable(this.firewallType);
    }
    /**
     * @return List of all flow logs for the specified NIC.
     * 
     */
    public List<GroupReplicaConfigurationNicFlowLog> flowLogs() {
        return this.flowLogs == null ? List.of() : this.flowLogs;
    }
    /**
     * @return Lan ID for this replica Nic.
     * 
     */
    public Integer lan() {
        return this.lan;
    }
    /**
     * @return [string] User-defined name for the Autoscaling Group.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return In order to link VM to ALB, target group must be provided.
     * 
     */
    public Optional<GroupReplicaConfigurationNicTargetGroup> targetGroup() {
        return Optional.ofNullable(this.targetGroup);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GroupReplicaConfigurationNic defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean dhcp;
        private @Nullable Boolean firewallActive;
        private @Nullable List<GroupReplicaConfigurationNicFirewallRule> firewallRules;
        private @Nullable String firewallType;
        private @Nullable List<GroupReplicaConfigurationNicFlowLog> flowLogs;
        private Integer lan;
        private String name;
        private @Nullable GroupReplicaConfigurationNicTargetGroup targetGroup;
        public Builder() {}
        public Builder(GroupReplicaConfigurationNic defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dhcp = defaults.dhcp;
    	      this.firewallActive = defaults.firewallActive;
    	      this.firewallRules = defaults.firewallRules;
    	      this.firewallType = defaults.firewallType;
    	      this.flowLogs = defaults.flowLogs;
    	      this.lan = defaults.lan;
    	      this.name = defaults.name;
    	      this.targetGroup = defaults.targetGroup;
        }

        @CustomType.Setter
        public Builder dhcp(@Nullable Boolean dhcp) {

            this.dhcp = dhcp;
            return this;
        }
        @CustomType.Setter
        public Builder firewallActive(@Nullable Boolean firewallActive) {

            this.firewallActive = firewallActive;
            return this;
        }
        @CustomType.Setter
        public Builder firewallRules(@Nullable List<GroupReplicaConfigurationNicFirewallRule> firewallRules) {

            this.firewallRules = firewallRules;
            return this;
        }
        public Builder firewallRules(GroupReplicaConfigurationNicFirewallRule... firewallRules) {
            return firewallRules(List.of(firewallRules));
        }
        @CustomType.Setter
        public Builder firewallType(@Nullable String firewallType) {

            this.firewallType = firewallType;
            return this;
        }
        @CustomType.Setter
        public Builder flowLogs(@Nullable List<GroupReplicaConfigurationNicFlowLog> flowLogs) {

            this.flowLogs = flowLogs;
            return this;
        }
        public Builder flowLogs(GroupReplicaConfigurationNicFlowLog... flowLogs) {
            return flowLogs(List.of(flowLogs));
        }
        @CustomType.Setter
        public Builder lan(Integer lan) {
            if (lan == null) {
              throw new MissingRequiredPropertyException("GroupReplicaConfigurationNic", "lan");
            }
            this.lan = lan;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GroupReplicaConfigurationNic", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder targetGroup(@Nullable GroupReplicaConfigurationNicTargetGroup targetGroup) {

            this.targetGroup = targetGroup;
            return this;
        }
        public GroupReplicaConfigurationNic build() {
            final var _resultValue = new GroupReplicaConfigurationNic();
            _resultValue.dhcp = dhcp;
            _resultValue.firewallActive = firewallActive;
            _resultValue.firewallRules = firewallRules;
            _resultValue.firewallType = firewallType;
            _resultValue.flowLogs = flowLogs;
            _resultValue.lan = lan;
            _resultValue.name = name;
            _resultValue.targetGroup = targetGroup;
            return _resultValue;
        }
    }
}
