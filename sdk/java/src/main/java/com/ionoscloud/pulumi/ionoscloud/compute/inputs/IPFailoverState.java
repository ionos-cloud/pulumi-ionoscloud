// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IPFailoverState extends com.pulumi.resources.ResourceArgs {

    public static final IPFailoverState Empty = new IPFailoverState();

    /**
     * [string] The ID of a Virtual Data Center.
     * 
     */
    @Import(name="datacenterId")
    private @Nullable Output<String> datacenterId;

    /**
     * @return [string] The ID of a Virtual Data Center.
     * 
     */
    public Optional<Output<String>> datacenterId() {
        return Optional.ofNullable(this.datacenterId);
    }

    /**
     * [string] The reserved IP address to be used in the IP failover group.
     * 
     */
    @Import(name="ip")
    private @Nullable Output<String> ip;

    /**
     * @return [string] The reserved IP address to be used in the IP failover group.
     * 
     */
    public Optional<Output<String>> ip() {
        return Optional.ofNullable(this.ip);
    }

    /**
     * [string] The ID of a LAN.
     * 
     */
    @Import(name="lanId")
    private @Nullable Output<String> lanId;

    /**
     * @return [string] The ID of a LAN.
     * 
     */
    public Optional<Output<String>> lanId() {
        return Optional.ofNullable(this.lanId);
    }

    /**
     * [string] The ID of a NIC.
     * 
     * &gt; **⚠ WARNING:** Do not modify the IP for an IP failover group (that was provisioned via Pulumi)
     * using the DCD, the API or other means because it may lead to unexpected behavior. If you provisioned
     * an IP failover group using Pulumi, please use only Pulumi in order to manage the created
     * IP failover group.
     * 
     * &gt; **⚠ WARNING:** For creating multiple IP failover groups at the same time, you can use one of the
     * following options:
     * 1. Create multiple IP failover groups resources and use `depends_on` meta-argument to specify the order
     *    of creation, for example:
     * 2. Define the resources as presented above, but without using the `depends_on` meta-argument and run the apply command using
     *    `-parallelism=1` as presented below:
     * 
     */
    @Import(name="nicuuid")
    private @Nullable Output<String> nicuuid;

    /**
     * @return [string] The ID of a NIC.
     * 
     * &gt; **⚠ WARNING:** Do not modify the IP for an IP failover group (that was provisioned via Pulumi)
     * using the DCD, the API or other means because it may lead to unexpected behavior. If you provisioned
     * an IP failover group using Pulumi, please use only Pulumi in order to manage the created
     * IP failover group.
     * 
     * &gt; **⚠ WARNING:** For creating multiple IP failover groups at the same time, you can use one of the
     * following options:
     * 1. Create multiple IP failover groups resources and use `depends_on` meta-argument to specify the order
     *    of creation, for example:
     * 2. Define the resources as presented above, but without using the `depends_on` meta-argument and run the apply command using
     *    `-parallelism=1` as presented below:
     * 
     */
    public Optional<Output<String>> nicuuid() {
        return Optional.ofNullable(this.nicuuid);
    }

    private IPFailoverState() {}

    private IPFailoverState(IPFailoverState $) {
        this.datacenterId = $.datacenterId;
        this.ip = $.ip;
        this.lanId = $.lanId;
        this.nicuuid = $.nicuuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IPFailoverState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IPFailoverState $;

        public Builder() {
            $ = new IPFailoverState();
        }

        public Builder(IPFailoverState defaults) {
            $ = new IPFailoverState(Objects.requireNonNull(defaults));
        }

        /**
         * @param datacenterId [string] The ID of a Virtual Data Center.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(@Nullable Output<String> datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        /**
         * @param datacenterId [string] The ID of a Virtual Data Center.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(String datacenterId) {
            return datacenterId(Output.of(datacenterId));
        }

        /**
         * @param ip [string] The reserved IP address to be used in the IP failover group.
         * 
         * @return builder
         * 
         */
        public Builder ip(@Nullable Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip [string] The reserved IP address to be used in the IP failover group.
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param lanId [string] The ID of a LAN.
         * 
         * @return builder
         * 
         */
        public Builder lanId(@Nullable Output<String> lanId) {
            $.lanId = lanId;
            return this;
        }

        /**
         * @param lanId [string] The ID of a LAN.
         * 
         * @return builder
         * 
         */
        public Builder lanId(String lanId) {
            return lanId(Output.of(lanId));
        }

        /**
         * @param nicuuid [string] The ID of a NIC.
         * 
         * &gt; **⚠ WARNING:** Do not modify the IP for an IP failover group (that was provisioned via Pulumi)
         * using the DCD, the API or other means because it may lead to unexpected behavior. If you provisioned
         * an IP failover group using Pulumi, please use only Pulumi in order to manage the created
         * IP failover group.
         * 
         * &gt; **⚠ WARNING:** For creating multiple IP failover groups at the same time, you can use one of the
         * following options:
         * 1. Create multiple IP failover groups resources and use `depends_on` meta-argument to specify the order
         *    of creation, for example:
         * 2. Define the resources as presented above, but without using the `depends_on` meta-argument and run the apply command using
         *    `-parallelism=1` as presented below:
         * 
         * @return builder
         * 
         */
        public Builder nicuuid(@Nullable Output<String> nicuuid) {
            $.nicuuid = nicuuid;
            return this;
        }

        /**
         * @param nicuuid [string] The ID of a NIC.
         * 
         * &gt; **⚠ WARNING:** Do not modify the IP for an IP failover group (that was provisioned via Pulumi)
         * using the DCD, the API or other means because it may lead to unexpected behavior. If you provisioned
         * an IP failover group using Pulumi, please use only Pulumi in order to manage the created
         * IP failover group.
         * 
         * &gt; **⚠ WARNING:** For creating multiple IP failover groups at the same time, you can use one of the
         * following options:
         * 1. Create multiple IP failover groups resources and use `depends_on` meta-argument to specify the order
         *    of creation, for example:
         * 2. Define the resources as presented above, but without using the `depends_on` meta-argument and run the apply command using
         *    `-parallelism=1` as presented below:
         * 
         * @return builder
         * 
         */
        public Builder nicuuid(String nicuuid) {
            return nicuuid(Output.of(nicuuid));
        }

        public IPFailoverState build() {
            return $;
        }
    }

}
