// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.alb.inputs;

import com.ionoscloud.pulumi.ionoscloud.alb.inputs.ForwardingRuleHttpRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ForwardingRuleState extends com.pulumi.resources.ResourceArgs {

    public static final ForwardingRuleState Empty = new ForwardingRuleState();

    /**
     * [string] The ID of Application Load Balancer.
     * 
     */
    @Import(name="applicationLoadbalancerId")
    private @Nullable Output<String> applicationLoadbalancerId;

    /**
     * @return [string] The ID of Application Load Balancer.
     * 
     */
    public Optional<Output<String>> applicationLoadbalancerId() {
        return Optional.ofNullable(this.applicationLoadbalancerId);
    }

    /**
     * [int] The maximum time in milliseconds to wait for the client to acknowledge or send data; default is 50,000 (50 seconds).
     * 
     */
    @Import(name="clientTimeout")
    private @Nullable Output<Integer> clientTimeout;

    /**
     * @return [int] The maximum time in milliseconds to wait for the client to acknowledge or send data; default is 50,000 (50 seconds).
     * 
     */
    public Optional<Output<Integer>> clientTimeout() {
        return Optional.ofNullable(this.clientTimeout);
    }

    /**
     * [string] The ID of a Virtual Data Center.
     * 
     */
    @Import(name="datacenterId")
    private @Nullable Output<String> datacenterId;

    /**
     * @return [string] The ID of a Virtual Data Center.
     * 
     */
    public Optional<Output<String>> datacenterId() {
        return Optional.ofNullable(this.datacenterId);
    }

    /**
     * [list] Array of items in that collection
     * 
     */
    @Import(name="httpRules")
    private @Nullable Output<List<ForwardingRuleHttpRuleArgs>> httpRules;

    /**
     * @return [list] Array of items in that collection
     * 
     */
    public Optional<Output<List<ForwardingRuleHttpRuleArgs>>> httpRules() {
        return Optional.ofNullable(this.httpRules);
    }

    /**
     * [string] Listening (inbound) IP.
     * 
     */
    @Import(name="listenerIp")
    private @Nullable Output<String> listenerIp;

    /**
     * @return [string] Listening (inbound) IP.
     * 
     */
    public Optional<Output<String>> listenerIp() {
        return Optional.ofNullable(this.listenerIp);
    }

    /**
     * [int] Listening (inbound) port number; valid range is 1 to 65535.
     * 
     */
    @Import(name="listenerPort")
    private @Nullable Output<Integer> listenerPort;

    /**
     * @return [int] Listening (inbound) port number; valid range is 1 to 65535.
     * 
     */
    public Optional<Output<Integer>> listenerPort() {
        return Optional.ofNullable(this.listenerPort);
    }

    /**
     * [string] The name of the Application Load Balancer forwarding rule.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return [string] The name of the Application Load Balancer forwarding rule.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * [string] Balancing protocol.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return [string] Balancing protocol.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * [list] Array of certificate ids. You can create certificates with the certificate resource.
     * 
     */
    @Import(name="serverCertificates")
    private @Nullable Output<List<String>> serverCertificates;

    /**
     * @return [list] Array of certificate ids. You can create certificates with the certificate resource.
     * 
     */
    public Optional<Output<List<String>>> serverCertificates() {
        return Optional.ofNullable(this.serverCertificates);
    }

    private ForwardingRuleState() {}

    private ForwardingRuleState(ForwardingRuleState $) {
        this.applicationLoadbalancerId = $.applicationLoadbalancerId;
        this.clientTimeout = $.clientTimeout;
        this.datacenterId = $.datacenterId;
        this.httpRules = $.httpRules;
        this.listenerIp = $.listenerIp;
        this.listenerPort = $.listenerPort;
        this.name = $.name;
        this.protocol = $.protocol;
        this.serverCertificates = $.serverCertificates;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ForwardingRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ForwardingRuleState $;

        public Builder() {
            $ = new ForwardingRuleState();
        }

        public Builder(ForwardingRuleState defaults) {
            $ = new ForwardingRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationLoadbalancerId [string] The ID of Application Load Balancer.
         * 
         * @return builder
         * 
         */
        public Builder applicationLoadbalancerId(@Nullable Output<String> applicationLoadbalancerId) {
            $.applicationLoadbalancerId = applicationLoadbalancerId;
            return this;
        }

        /**
         * @param applicationLoadbalancerId [string] The ID of Application Load Balancer.
         * 
         * @return builder
         * 
         */
        public Builder applicationLoadbalancerId(String applicationLoadbalancerId) {
            return applicationLoadbalancerId(Output.of(applicationLoadbalancerId));
        }

        /**
         * @param clientTimeout [int] The maximum time in milliseconds to wait for the client to acknowledge or send data; default is 50,000 (50 seconds).
         * 
         * @return builder
         * 
         */
        public Builder clientTimeout(@Nullable Output<Integer> clientTimeout) {
            $.clientTimeout = clientTimeout;
            return this;
        }

        /**
         * @param clientTimeout [int] The maximum time in milliseconds to wait for the client to acknowledge or send data; default is 50,000 (50 seconds).
         * 
         * @return builder
         * 
         */
        public Builder clientTimeout(Integer clientTimeout) {
            return clientTimeout(Output.of(clientTimeout));
        }

        /**
         * @param datacenterId [string] The ID of a Virtual Data Center.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(@Nullable Output<String> datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        /**
         * @param datacenterId [string] The ID of a Virtual Data Center.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(String datacenterId) {
            return datacenterId(Output.of(datacenterId));
        }

        /**
         * @param httpRules [list] Array of items in that collection
         * 
         * @return builder
         * 
         */
        public Builder httpRules(@Nullable Output<List<ForwardingRuleHttpRuleArgs>> httpRules) {
            $.httpRules = httpRules;
            return this;
        }

        /**
         * @param httpRules [list] Array of items in that collection
         * 
         * @return builder
         * 
         */
        public Builder httpRules(List<ForwardingRuleHttpRuleArgs> httpRules) {
            return httpRules(Output.of(httpRules));
        }

        /**
         * @param httpRules [list] Array of items in that collection
         * 
         * @return builder
         * 
         */
        public Builder httpRules(ForwardingRuleHttpRuleArgs... httpRules) {
            return httpRules(List.of(httpRules));
        }

        /**
         * @param listenerIp [string] Listening (inbound) IP.
         * 
         * @return builder
         * 
         */
        public Builder listenerIp(@Nullable Output<String> listenerIp) {
            $.listenerIp = listenerIp;
            return this;
        }

        /**
         * @param listenerIp [string] Listening (inbound) IP.
         * 
         * @return builder
         * 
         */
        public Builder listenerIp(String listenerIp) {
            return listenerIp(Output.of(listenerIp));
        }

        /**
         * @param listenerPort [int] Listening (inbound) port number; valid range is 1 to 65535.
         * 
         * @return builder
         * 
         */
        public Builder listenerPort(@Nullable Output<Integer> listenerPort) {
            $.listenerPort = listenerPort;
            return this;
        }

        /**
         * @param listenerPort [int] Listening (inbound) port number; valid range is 1 to 65535.
         * 
         * @return builder
         * 
         */
        public Builder listenerPort(Integer listenerPort) {
            return listenerPort(Output.of(listenerPort));
        }

        /**
         * @param name [string] The name of the Application Load Balancer forwarding rule.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [string] The name of the Application Load Balancer forwarding rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param protocol [string] Balancing protocol.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol [string] Balancing protocol.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param serverCertificates [list] Array of certificate ids. You can create certificates with the certificate resource.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificates(@Nullable Output<List<String>> serverCertificates) {
            $.serverCertificates = serverCertificates;
            return this;
        }

        /**
         * @param serverCertificates [list] Array of certificate ids. You can create certificates with the certificate resource.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificates(List<String> serverCertificates) {
            return serverCertificates(Output.of(serverCertificates));
        }

        /**
         * @param serverCertificates [list] Array of certificate ids. You can create certificates with the certificate resource.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificates(String... serverCertificates) {
            return serverCertificates(List.of(serverCertificates));
        }

        public ForwardingRuleState build() {
            return $;
        }
    }

}
