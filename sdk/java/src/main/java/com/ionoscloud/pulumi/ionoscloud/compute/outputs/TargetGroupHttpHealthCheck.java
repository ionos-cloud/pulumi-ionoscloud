// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TargetGroupHttpHealthCheck {
    /**
     * @return [string]
     * 
     */
    private String matchType;
    /**
     * @return [string] The method for the HTTP health check.
     * 
     */
    private @Nullable String method;
    /**
     * @return [bool]
     * 
     */
    private @Nullable Boolean negate;
    /**
     * @return [string] The path (destination URL) for the HTTP health check request; the default is /.
     * 
     */
    private @Nullable String path;
    /**
     * @return [bool]
     * 
     */
    private @Nullable Boolean regex;
    /**
     * @return [string] The response returned by the request, depending on the match type.
     * 
     */
    private String response;

    private TargetGroupHttpHealthCheck() {}
    /**
     * @return [string]
     * 
     */
    public String matchType() {
        return this.matchType;
    }
    /**
     * @return [string] The method for the HTTP health check.
     * 
     */
    public Optional<String> method() {
        return Optional.ofNullable(this.method);
    }
    /**
     * @return [bool]
     * 
     */
    public Optional<Boolean> negate() {
        return Optional.ofNullable(this.negate);
    }
    /**
     * @return [string] The path (destination URL) for the HTTP health check request; the default is /.
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return [bool]
     * 
     */
    public Optional<Boolean> regex() {
        return Optional.ofNullable(this.regex);
    }
    /**
     * @return [string] The response returned by the request, depending on the match type.
     * 
     */
    public String response() {
        return this.response;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TargetGroupHttpHealthCheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String matchType;
        private @Nullable String method;
        private @Nullable Boolean negate;
        private @Nullable String path;
        private @Nullable Boolean regex;
        private String response;
        public Builder() {}
        public Builder(TargetGroupHttpHealthCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.matchType = defaults.matchType;
    	      this.method = defaults.method;
    	      this.negate = defaults.negate;
    	      this.path = defaults.path;
    	      this.regex = defaults.regex;
    	      this.response = defaults.response;
        }

        @CustomType.Setter
        public Builder matchType(String matchType) {
            if (matchType == null) {
              throw new MissingRequiredPropertyException("TargetGroupHttpHealthCheck", "matchType");
            }
            this.matchType = matchType;
            return this;
        }
        @CustomType.Setter
        public Builder method(@Nullable String method) {

            this.method = method;
            return this;
        }
        @CustomType.Setter
        public Builder negate(@Nullable Boolean negate) {

            this.negate = negate;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {

            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder regex(@Nullable Boolean regex) {

            this.regex = regex;
            return this;
        }
        @CustomType.Setter
        public Builder response(String response) {
            if (response == null) {
              throw new MissingRequiredPropertyException("TargetGroupHttpHealthCheck", "response");
            }
            this.response = response;
            return this;
        }
        public TargetGroupHttpHealthCheck build() {
            final var _resultValue = new TargetGroupHttpHealthCheck();
            _resultValue.matchType = matchType;
            _resultValue.method = method;
            _resultValue.negate = negate;
            _resultValue.path = path;
            _resultValue.regex = regex;
            _resultValue.response = response;
            return _resultValue;
        }
    }
}
