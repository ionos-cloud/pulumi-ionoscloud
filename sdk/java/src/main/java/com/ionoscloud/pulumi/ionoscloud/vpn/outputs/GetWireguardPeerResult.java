// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.vpn.outputs;

import com.ionoscloud.pulumi.ionoscloud.vpn.outputs.GetWireguardPeerEndpoint;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetWireguardPeerResult {
    /**
     * @return The subnet CIDRs that are allowed to connect to the WireGuard Gateway.
     * 
     */
    private List<String> allowedIps;
    /**
     * @return The description of the WireGuard Peer.
     * 
     */
    private String description;
    /**
     * @return The endpoint of the WireGuard Peer.
     * 
     */
    private List<GetWireguardPeerEndpoint> endpoints;
    private String gatewayId;
    /**
     * @return The unique ID of the WireGuard Peer.
     * 
     */
    private String id;
    private @Nullable String location;
    /**
     * @return The name of the WireGuard Peer.
     * 
     */
    private String name;
    /**
     * @return WireGuard public key of the connecting peer.
     * 
     */
    private String publicKey;
    /**
     * @return The current status of the WireGuard Peer.
     * 
     */
    private String status;

    private GetWireguardPeerResult() {}
    /**
     * @return The subnet CIDRs that are allowed to connect to the WireGuard Gateway.
     * 
     */
    public List<String> allowedIps() {
        return this.allowedIps;
    }
    /**
     * @return The description of the WireGuard Peer.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The endpoint of the WireGuard Peer.
     * 
     */
    public List<GetWireguardPeerEndpoint> endpoints() {
        return this.endpoints;
    }
    public String gatewayId() {
        return this.gatewayId;
    }
    /**
     * @return The unique ID of the WireGuard Peer.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return The name of the WireGuard Peer.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return WireGuard public key of the connecting peer.
     * 
     */
    public String publicKey() {
        return this.publicKey;
    }
    /**
     * @return The current status of the WireGuard Peer.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWireguardPeerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> allowedIps;
        private String description;
        private List<GetWireguardPeerEndpoint> endpoints;
        private String gatewayId;
        private String id;
        private @Nullable String location;
        private String name;
        private String publicKey;
        private String status;
        public Builder() {}
        public Builder(GetWireguardPeerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedIps = defaults.allowedIps;
    	      this.description = defaults.description;
    	      this.endpoints = defaults.endpoints;
    	      this.gatewayId = defaults.gatewayId;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.publicKey = defaults.publicKey;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder allowedIps(List<String> allowedIps) {
            if (allowedIps == null) {
              throw new MissingRequiredPropertyException("GetWireguardPeerResult", "allowedIps");
            }
            this.allowedIps = allowedIps;
            return this;
        }
        public Builder allowedIps(String... allowedIps) {
            return allowedIps(List.of(allowedIps));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetWireguardPeerResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder endpoints(List<GetWireguardPeerEndpoint> endpoints) {
            if (endpoints == null) {
              throw new MissingRequiredPropertyException("GetWireguardPeerResult", "endpoints");
            }
            this.endpoints = endpoints;
            return this;
        }
        public Builder endpoints(GetWireguardPeerEndpoint... endpoints) {
            return endpoints(List.of(endpoints));
        }
        @CustomType.Setter
        public Builder gatewayId(String gatewayId) {
            if (gatewayId == null) {
              throw new MissingRequiredPropertyException("GetWireguardPeerResult", "gatewayId");
            }
            this.gatewayId = gatewayId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetWireguardPeerResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {

            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetWireguardPeerResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder publicKey(String publicKey) {
            if (publicKey == null) {
              throw new MissingRequiredPropertyException("GetWireguardPeerResult", "publicKey");
            }
            this.publicKey = publicKey;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetWireguardPeerResult", "status");
            }
            this.status = status;
            return this;
        }
        public GetWireguardPeerResult build() {
            final var _resultValue = new GetWireguardPeerResult();
            _resultValue.allowedIps = allowedIps;
            _resultValue.description = description;
            _resultValue.endpoints = endpoints;
            _resultValue.gatewayId = gatewayId;
            _resultValue.id = id;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.publicKey = publicKey;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
