// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.compute.inputs;

import com.ionoscloud.pulumi.ionoscloud.compute.inputs.LanIpFailoverArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LanState extends com.pulumi.resources.ResourceArgs {

    public static final LanState Empty = new LanState();

    /**
     * [string] The ID of a Virtual Data Center.
     * 
     */
    @Import(name="datacenterId")
    private @Nullable Output<String> datacenterId;

    /**
     * @return [string] The ID of a Virtual Data Center.
     * 
     */
    public Optional<Output<String>> datacenterId() {
        return Optional.ofNullable(this.datacenterId);
    }

    /**
     * IP failover configurations for lan
     * 
     */
    @Import(name="ipFailovers")
    private @Nullable Output<List<LanIpFailoverArgs>> ipFailovers;

    /**
     * @return IP failover configurations for lan
     * 
     */
    public Optional<Output<List<LanIpFailoverArgs>>> ipFailovers() {
        return Optional.ofNullable(this.ipFailovers);
    }

    /**
     * [String] For public LANs this property is null, for private LANs it contains the private IPv4 CIDR range. This property is a read only property.
     * 
     */
    @Import(name="ipv4CidrBlock")
    private @Nullable Output<String> ipv4CidrBlock;

    /**
     * @return [String] For public LANs this property is null, for private LANs it contains the private IPv4 CIDR range. This property is a read only property.
     * 
     */
    public Optional<Output<String>> ipv4CidrBlock() {
        return Optional.ofNullable(this.ipv4CidrBlock);
    }

    /**
     * Contains the LAN&#39;s /64 IPv6 CIDR block if this LAN is IPv6 enabled. &#39;AUTO&#39; will result in enabling this LAN for IPv6 and automatically assign a /64 IPv6 CIDR block to this LAN. If you specify your own IPv6 CIDR block then you must provide a unique /64 block, which is inside the IPv6 CIDR block of the virtual datacenter and unique inside all LANs from this virtual datacenter.
     * 
     */
    @Import(name="ipv6CidrBlock")
    private @Nullable Output<String> ipv6CidrBlock;

    /**
     * @return Contains the LAN&#39;s /64 IPv6 CIDR block if this LAN is IPv6 enabled. &#39;AUTO&#39; will result in enabling this LAN for IPv6 and automatically assign a /64 IPv6 CIDR block to this LAN. If you specify your own IPv6 CIDR block then you must provide a unique /64 block, which is inside the IPv6 CIDR block of the virtual datacenter and unique inside all LANs from this virtual datacenter.
     * 
     */
    public Optional<Output<String>> ipv6CidrBlock() {
        return Optional.ofNullable(this.ipv6CidrBlock);
    }

    /**
     * [string] The name of the LAN.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return [string] The name of the LAN.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * [String] The unique id of a `ionoscloud.compute.Crossconnect` resource, in order. It needs to be ensured that IP addresses of the NICs of all LANs connected to a given Cross Connect is not duplicated and belongs to the same subnet range
     * 
     */
    @Import(name="pcc")
    private @Nullable Output<String> pcc;

    /**
     * @return [String] The unique id of a `ionoscloud.compute.Crossconnect` resource, in order. It needs to be ensured that IP addresses of the NICs of all LANs connected to a given Cross Connect is not duplicated and belongs to the same subnet range
     * 
     */
    public Optional<Output<String>> pcc() {
        return Optional.ofNullable(this.pcc);
    }

    /**
     * [Boolean] Indicates if the LAN faces the public Internet (true) or not (false).
     * 
     */
    @Import(name="public")
    private @Nullable Output<Boolean> public_;

    /**
     * @return [Boolean] Indicates if the LAN faces the public Internet (true) or not (false).
     * 
     */
    public Optional<Output<Boolean>> public_() {
        return Optional.ofNullable(this.public_);
    }

    private LanState() {}

    private LanState(LanState $) {
        this.datacenterId = $.datacenterId;
        this.ipFailovers = $.ipFailovers;
        this.ipv4CidrBlock = $.ipv4CidrBlock;
        this.ipv6CidrBlock = $.ipv6CidrBlock;
        this.name = $.name;
        this.pcc = $.pcc;
        this.public_ = $.public_;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LanState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LanState $;

        public Builder() {
            $ = new LanState();
        }

        public Builder(LanState defaults) {
            $ = new LanState(Objects.requireNonNull(defaults));
        }

        /**
         * @param datacenterId [string] The ID of a Virtual Data Center.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(@Nullable Output<String> datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        /**
         * @param datacenterId [string] The ID of a Virtual Data Center.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(String datacenterId) {
            return datacenterId(Output.of(datacenterId));
        }

        /**
         * @param ipFailovers IP failover configurations for lan
         * 
         * @return builder
         * 
         */
        public Builder ipFailovers(@Nullable Output<List<LanIpFailoverArgs>> ipFailovers) {
            $.ipFailovers = ipFailovers;
            return this;
        }

        /**
         * @param ipFailovers IP failover configurations for lan
         * 
         * @return builder
         * 
         */
        public Builder ipFailovers(List<LanIpFailoverArgs> ipFailovers) {
            return ipFailovers(Output.of(ipFailovers));
        }

        /**
         * @param ipFailovers IP failover configurations for lan
         * 
         * @return builder
         * 
         */
        public Builder ipFailovers(LanIpFailoverArgs... ipFailovers) {
            return ipFailovers(List.of(ipFailovers));
        }

        /**
         * @param ipv4CidrBlock [String] For public LANs this property is null, for private LANs it contains the private IPv4 CIDR range. This property is a read only property.
         * 
         * @return builder
         * 
         */
        public Builder ipv4CidrBlock(@Nullable Output<String> ipv4CidrBlock) {
            $.ipv4CidrBlock = ipv4CidrBlock;
            return this;
        }

        /**
         * @param ipv4CidrBlock [String] For public LANs this property is null, for private LANs it contains the private IPv4 CIDR range. This property is a read only property.
         * 
         * @return builder
         * 
         */
        public Builder ipv4CidrBlock(String ipv4CidrBlock) {
            return ipv4CidrBlock(Output.of(ipv4CidrBlock));
        }

        /**
         * @param ipv6CidrBlock Contains the LAN&#39;s /64 IPv6 CIDR block if this LAN is IPv6 enabled. &#39;AUTO&#39; will result in enabling this LAN for IPv6 and automatically assign a /64 IPv6 CIDR block to this LAN. If you specify your own IPv6 CIDR block then you must provide a unique /64 block, which is inside the IPv6 CIDR block of the virtual datacenter and unique inside all LANs from this virtual datacenter.
         * 
         * @return builder
         * 
         */
        public Builder ipv6CidrBlock(@Nullable Output<String> ipv6CidrBlock) {
            $.ipv6CidrBlock = ipv6CidrBlock;
            return this;
        }

        /**
         * @param ipv6CidrBlock Contains the LAN&#39;s /64 IPv6 CIDR block if this LAN is IPv6 enabled. &#39;AUTO&#39; will result in enabling this LAN for IPv6 and automatically assign a /64 IPv6 CIDR block to this LAN. If you specify your own IPv6 CIDR block then you must provide a unique /64 block, which is inside the IPv6 CIDR block of the virtual datacenter and unique inside all LANs from this virtual datacenter.
         * 
         * @return builder
         * 
         */
        public Builder ipv6CidrBlock(String ipv6CidrBlock) {
            return ipv6CidrBlock(Output.of(ipv6CidrBlock));
        }

        /**
         * @param name [string] The name of the LAN.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [string] The name of the LAN.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param pcc [String] The unique id of a `ionoscloud.compute.Crossconnect` resource, in order. It needs to be ensured that IP addresses of the NICs of all LANs connected to a given Cross Connect is not duplicated and belongs to the same subnet range
         * 
         * @return builder
         * 
         */
        public Builder pcc(@Nullable Output<String> pcc) {
            $.pcc = pcc;
            return this;
        }

        /**
         * @param pcc [String] The unique id of a `ionoscloud.compute.Crossconnect` resource, in order. It needs to be ensured that IP addresses of the NICs of all LANs connected to a given Cross Connect is not duplicated and belongs to the same subnet range
         * 
         * @return builder
         * 
         */
        public Builder pcc(String pcc) {
            return pcc(Output.of(pcc));
        }

        /**
         * @param public_ [Boolean] Indicates if the LAN faces the public Internet (true) or not (false).
         * 
         * @return builder
         * 
         */
        public Builder public_(@Nullable Output<Boolean> public_) {
            $.public_ = public_;
            return this;
        }

        /**
         * @param public_ [Boolean] Indicates if the LAN faces the public Internet (true) or not (false).
         * 
         * @return builder
         * 
         */
        public Builder public_(Boolean public_) {
            return public_(Output.of(public_));
        }

        public LanState build() {
            return $;
        }
    }

}
