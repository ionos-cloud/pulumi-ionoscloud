// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.alb.outputs;

import com.ionoscloud.pulumi.ionoscloud.alb.outputs.ForwardingRuleHttpRuleCondition;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ForwardingRuleHttpRule {
    /**
     * @return [list] - An array of items in the collection.The action is only performed if each and every condition is met; if no conditions are set, the rule will always be performed.
     * 
     */
    private @Nullable List<ForwardingRuleHttpRuleCondition> conditions;
    /**
     * @return [string] Valid only for STATIC actions.
     * 
     */
    private @Nullable String contentType;
    /**
     * @return [bool] Default is false; valid only for REDIRECT actions.
     * 
     */
    private @Nullable Boolean dropQuery;
    /**
     * @return [string] The location for redirecting; mandatory and valid only for REDIRECT actions.
     * 
     */
    private @Nullable String location;
    /**
     * @return [string] The unique name of the Application Load Balancer HTTP rule.
     * 
     */
    private String name;
    /**
     * @return [string] The response message of the request; mandatory for STATIC action.
     * 
     */
    private @Nullable String responseMessage;
    /**
     * @return [int] Valid only for REDIRECT and STATIC actions. For REDIRECT actions, default is 301 and possible values are 301, 302, 303, 307, and 308. For STATIC actions, default is 503 and valid range is 200 to 599.
     * 
     */
    private @Nullable Integer statusCode;
    /**
     * @return [string] The UUID of the target group; mandatory for FORWARD action.
     * 
     */
    private @Nullable String targetGroup;
    /**
     * @return [string] Type of the Http Rule.
     * 
     */
    private String type;

    private ForwardingRuleHttpRule() {}
    /**
     * @return [list] - An array of items in the collection.The action is only performed if each and every condition is met; if no conditions are set, the rule will always be performed.
     * 
     */
    public List<ForwardingRuleHttpRuleCondition> conditions() {
        return this.conditions == null ? List.of() : this.conditions;
    }
    /**
     * @return [string] Valid only for STATIC actions.
     * 
     */
    public Optional<String> contentType() {
        return Optional.ofNullable(this.contentType);
    }
    /**
     * @return [bool] Default is false; valid only for REDIRECT actions.
     * 
     */
    public Optional<Boolean> dropQuery() {
        return Optional.ofNullable(this.dropQuery);
    }
    /**
     * @return [string] The location for redirecting; mandatory and valid only for REDIRECT actions.
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return [string] The unique name of the Application Load Balancer HTTP rule.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return [string] The response message of the request; mandatory for STATIC action.
     * 
     */
    public Optional<String> responseMessage() {
        return Optional.ofNullable(this.responseMessage);
    }
    /**
     * @return [int] Valid only for REDIRECT and STATIC actions. For REDIRECT actions, default is 301 and possible values are 301, 302, 303, 307, and 308. For STATIC actions, default is 503 and valid range is 200 to 599.
     * 
     */
    public Optional<Integer> statusCode() {
        return Optional.ofNullable(this.statusCode);
    }
    /**
     * @return [string] The UUID of the target group; mandatory for FORWARD action.
     * 
     */
    public Optional<String> targetGroup() {
        return Optional.ofNullable(this.targetGroup);
    }
    /**
     * @return [string] Type of the Http Rule.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ForwardingRuleHttpRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<ForwardingRuleHttpRuleCondition> conditions;
        private @Nullable String contentType;
        private @Nullable Boolean dropQuery;
        private @Nullable String location;
        private String name;
        private @Nullable String responseMessage;
        private @Nullable Integer statusCode;
        private @Nullable String targetGroup;
        private String type;
        public Builder() {}
        public Builder(ForwardingRuleHttpRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conditions = defaults.conditions;
    	      this.contentType = defaults.contentType;
    	      this.dropQuery = defaults.dropQuery;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.responseMessage = defaults.responseMessage;
    	      this.statusCode = defaults.statusCode;
    	      this.targetGroup = defaults.targetGroup;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder conditions(@Nullable List<ForwardingRuleHttpRuleCondition> conditions) {

            this.conditions = conditions;
            return this;
        }
        public Builder conditions(ForwardingRuleHttpRuleCondition... conditions) {
            return conditions(List.of(conditions));
        }
        @CustomType.Setter
        public Builder contentType(@Nullable String contentType) {

            this.contentType = contentType;
            return this;
        }
        @CustomType.Setter
        public Builder dropQuery(@Nullable Boolean dropQuery) {

            this.dropQuery = dropQuery;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {

            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ForwardingRuleHttpRule", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder responseMessage(@Nullable String responseMessage) {

            this.responseMessage = responseMessage;
            return this;
        }
        @CustomType.Setter
        public Builder statusCode(@Nullable Integer statusCode) {

            this.statusCode = statusCode;
            return this;
        }
        @CustomType.Setter
        public Builder targetGroup(@Nullable String targetGroup) {

            this.targetGroup = targetGroup;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("ForwardingRuleHttpRule", "type");
            }
            this.type = type;
            return this;
        }
        public ForwardingRuleHttpRule build() {
            final var _resultValue = new ForwardingRuleHttpRule();
            _resultValue.conditions = conditions;
            _resultValue.contentType = contentType;
            _resultValue.dropQuery = dropQuery;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.responseMessage = responseMessage;
            _resultValue.statusCode = statusCode;
            _resultValue.targetGroup = targetGroup;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
