// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.compute.outputs;

import com.ionoscloud.pulumi.ionoscloud.compute.outputs.GetVCPUServerNicFirewallRule;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVCPUServerNic {
    /**
     * @return The Logical Unit Number (LUN) of the storage volume
     * 
     */
    private Integer deviceNumber;
    /**
     * @return Indicates if the nic will reserve an IP using DHCP
     * 
     */
    private Boolean dhcp;
    private @Nullable Boolean dhcpv6;
    /**
     * @return Activate or deactivate the firewall
     * 
     */
    private Boolean firewallActive;
    /**
     * @return list of
     * 
     */
    private List<GetVCPUServerNicFirewallRule> firewallRules;
    /**
     * @return The type of firewall rules that will be allowed on the NIC
     * 
     */
    private String firewallType;
    /**
     * @return ID of the server you want to search for.
     * 
     * `datacenter_id` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
     * 
     */
    private String id;
    /**
     * @return Collection of IP addresses assigned to a nic
     * 
     */
    private List<String> ips;
    private String ipv6CidrBlock;
    private List<String> ipv6Ips;
    /**
     * @return The LAN ID the NIC will sit on
     * 
     */
    private Integer lan;
    /**
     * @return The MAC address of the NIC
     * 
     */
    private String mac;
    /**
     * @return Name of an existing server that you want to search for.
     * 
     */
    private String name;
    /**
     * @return The PCI slot number of the Nic
     * 
     */
    private Integer pciSlot;
    /**
     * @return The list of Security Group IDs for the resource.
     * 
     */
    private List<String> securityGroupsIds;

    private GetVCPUServerNic() {}
    /**
     * @return The Logical Unit Number (LUN) of the storage volume
     * 
     */
    public Integer deviceNumber() {
        return this.deviceNumber;
    }
    /**
     * @return Indicates if the nic will reserve an IP using DHCP
     * 
     */
    public Boolean dhcp() {
        return this.dhcp;
    }
    public Optional<Boolean> dhcpv6() {
        return Optional.ofNullable(this.dhcpv6);
    }
    /**
     * @return Activate or deactivate the firewall
     * 
     */
    public Boolean firewallActive() {
        return this.firewallActive;
    }
    /**
     * @return list of
     * 
     */
    public List<GetVCPUServerNicFirewallRule> firewallRules() {
        return this.firewallRules;
    }
    /**
     * @return The type of firewall rules that will be allowed on the NIC
     * 
     */
    public String firewallType() {
        return this.firewallType;
    }
    /**
     * @return ID of the server you want to search for.
     * 
     * `datacenter_id` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Collection of IP addresses assigned to a nic
     * 
     */
    public List<String> ips() {
        return this.ips;
    }
    public String ipv6CidrBlock() {
        return this.ipv6CidrBlock;
    }
    public List<String> ipv6Ips() {
        return this.ipv6Ips;
    }
    /**
     * @return The LAN ID the NIC will sit on
     * 
     */
    public Integer lan() {
        return this.lan;
    }
    /**
     * @return The MAC address of the NIC
     * 
     */
    public String mac() {
        return this.mac;
    }
    /**
     * @return Name of an existing server that you want to search for.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The PCI slot number of the Nic
     * 
     */
    public Integer pciSlot() {
        return this.pciSlot;
    }
    /**
     * @return The list of Security Group IDs for the resource.
     * 
     */
    public List<String> securityGroupsIds() {
        return this.securityGroupsIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVCPUServerNic defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer deviceNumber;
        private Boolean dhcp;
        private @Nullable Boolean dhcpv6;
        private Boolean firewallActive;
        private List<GetVCPUServerNicFirewallRule> firewallRules;
        private String firewallType;
        private String id;
        private List<String> ips;
        private String ipv6CidrBlock;
        private List<String> ipv6Ips;
        private Integer lan;
        private String mac;
        private String name;
        private Integer pciSlot;
        private List<String> securityGroupsIds;
        public Builder() {}
        public Builder(GetVCPUServerNic defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deviceNumber = defaults.deviceNumber;
    	      this.dhcp = defaults.dhcp;
    	      this.dhcpv6 = defaults.dhcpv6;
    	      this.firewallActive = defaults.firewallActive;
    	      this.firewallRules = defaults.firewallRules;
    	      this.firewallType = defaults.firewallType;
    	      this.id = defaults.id;
    	      this.ips = defaults.ips;
    	      this.ipv6CidrBlock = defaults.ipv6CidrBlock;
    	      this.ipv6Ips = defaults.ipv6Ips;
    	      this.lan = defaults.lan;
    	      this.mac = defaults.mac;
    	      this.name = defaults.name;
    	      this.pciSlot = defaults.pciSlot;
    	      this.securityGroupsIds = defaults.securityGroupsIds;
        }

        @CustomType.Setter
        public Builder deviceNumber(Integer deviceNumber) {
            if (deviceNumber == null) {
              throw new MissingRequiredPropertyException("GetVCPUServerNic", "deviceNumber");
            }
            this.deviceNumber = deviceNumber;
            return this;
        }
        @CustomType.Setter
        public Builder dhcp(Boolean dhcp) {
            if (dhcp == null) {
              throw new MissingRequiredPropertyException("GetVCPUServerNic", "dhcp");
            }
            this.dhcp = dhcp;
            return this;
        }
        @CustomType.Setter
        public Builder dhcpv6(@Nullable Boolean dhcpv6) {

            this.dhcpv6 = dhcpv6;
            return this;
        }
        @CustomType.Setter
        public Builder firewallActive(Boolean firewallActive) {
            if (firewallActive == null) {
              throw new MissingRequiredPropertyException("GetVCPUServerNic", "firewallActive");
            }
            this.firewallActive = firewallActive;
            return this;
        }
        @CustomType.Setter
        public Builder firewallRules(List<GetVCPUServerNicFirewallRule> firewallRules) {
            if (firewallRules == null) {
              throw new MissingRequiredPropertyException("GetVCPUServerNic", "firewallRules");
            }
            this.firewallRules = firewallRules;
            return this;
        }
        public Builder firewallRules(GetVCPUServerNicFirewallRule... firewallRules) {
            return firewallRules(List.of(firewallRules));
        }
        @CustomType.Setter
        public Builder firewallType(String firewallType) {
            if (firewallType == null) {
              throw new MissingRequiredPropertyException("GetVCPUServerNic", "firewallType");
            }
            this.firewallType = firewallType;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetVCPUServerNic", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ips(List<String> ips) {
            if (ips == null) {
              throw new MissingRequiredPropertyException("GetVCPUServerNic", "ips");
            }
            this.ips = ips;
            return this;
        }
        public Builder ips(String... ips) {
            return ips(List.of(ips));
        }
        @CustomType.Setter
        public Builder ipv6CidrBlock(String ipv6CidrBlock) {
            if (ipv6CidrBlock == null) {
              throw new MissingRequiredPropertyException("GetVCPUServerNic", "ipv6CidrBlock");
            }
            this.ipv6CidrBlock = ipv6CidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6Ips(List<String> ipv6Ips) {
            if (ipv6Ips == null) {
              throw new MissingRequiredPropertyException("GetVCPUServerNic", "ipv6Ips");
            }
            this.ipv6Ips = ipv6Ips;
            return this;
        }
        public Builder ipv6Ips(String... ipv6Ips) {
            return ipv6Ips(List.of(ipv6Ips));
        }
        @CustomType.Setter
        public Builder lan(Integer lan) {
            if (lan == null) {
              throw new MissingRequiredPropertyException("GetVCPUServerNic", "lan");
            }
            this.lan = lan;
            return this;
        }
        @CustomType.Setter
        public Builder mac(String mac) {
            if (mac == null) {
              throw new MissingRequiredPropertyException("GetVCPUServerNic", "mac");
            }
            this.mac = mac;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetVCPUServerNic", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder pciSlot(Integer pciSlot) {
            if (pciSlot == null) {
              throw new MissingRequiredPropertyException("GetVCPUServerNic", "pciSlot");
            }
            this.pciSlot = pciSlot;
            return this;
        }
        @CustomType.Setter
        public Builder securityGroupsIds(List<String> securityGroupsIds) {
            if (securityGroupsIds == null) {
              throw new MissingRequiredPropertyException("GetVCPUServerNic", "securityGroupsIds");
            }
            this.securityGroupsIds = securityGroupsIds;
            return this;
        }
        public Builder securityGroupsIds(String... securityGroupsIds) {
            return securityGroupsIds(List.of(securityGroupsIds));
        }
        public GetVCPUServerNic build() {
            final var _resultValue = new GetVCPUServerNic();
            _resultValue.deviceNumber = deviceNumber;
            _resultValue.dhcp = dhcp;
            _resultValue.dhcpv6 = dhcpv6;
            _resultValue.firewallActive = firewallActive;
            _resultValue.firewallRules = firewallRules;
            _resultValue.firewallType = firewallType;
            _resultValue.id = id;
            _resultValue.ips = ips;
            _resultValue.ipv6CidrBlock = ipv6CidrBlock;
            _resultValue.ipv6Ips = ipv6Ips;
            _resultValue.lan = lan;
            _resultValue.mac = mac;
            _resultValue.name = name;
            _resultValue.pciSlot = pciSlot;
            _resultValue.securityGroupsIds = securityGroupsIds;
            return _resultValue;
        }
    }
}
