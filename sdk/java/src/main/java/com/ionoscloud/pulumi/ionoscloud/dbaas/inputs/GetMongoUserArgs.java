// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.dbaas.inputs;

import com.ionoscloud.pulumi.ionoscloud.dbaas.inputs.GetMongoUserRoleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetMongoUserArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetMongoUserArgs Empty = new GetMongoUserArgs();

    /**
     * [string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.
     * 
     */
    @Import(name="clusterId", required=true)
    private Output<String> clusterId;

    /**
     * @return [string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.
     * 
     */
    public Output<String> clusterId() {
        return this.clusterId;
    }

    /**
     * [string] The user database to use for authentication. Updates to the value of the field force the cluster to be re-created.
     * 
     */
    @Import(name="database")
    private @Nullable Output<String> database;

    /**
     * @return [string] The user database to use for authentication. Updates to the value of the field force the cluster to be re-created.
     * 
     */
    public Optional<Output<String>> database() {
        return Optional.ofNullable(this.database);
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * [string] a list of mongodb user roles. Updates to the value of the field force the cluster to be re-created.
     * 
     */
    @Import(name="roles")
    private @Nullable Output<List<GetMongoUserRoleArgs>> roles;

    /**
     * @return [string] a list of mongodb user roles. Updates to the value of the field force the cluster to be re-created.
     * 
     */
    public Optional<Output<List<GetMongoUserRoleArgs>>> roles() {
        return Optional.ofNullable(this.roles);
    }

    /**
     * [string] Used for authentication. Updates to the value of the field force the cluster to be re-created.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return [string] Used for authentication. Updates to the value of the field force the cluster to be re-created.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private GetMongoUserArgs() {}

    private GetMongoUserArgs(GetMongoUserArgs $) {
        this.clusterId = $.clusterId;
        this.database = $.database;
        this.id = $.id;
        this.roles = $.roles;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetMongoUserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetMongoUserArgs $;

        public Builder() {
            $ = new GetMongoUserArgs();
        }

        public Builder(GetMongoUserArgs defaults) {
            $ = new GetMongoUserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId [string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId [string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param database [string] The user database to use for authentication. Updates to the value of the field force the cluster to be re-created.
         * 
         * @return builder
         * 
         */
        public Builder database(@Nullable Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database [string] The user database to use for authentication. Updates to the value of the field force the cluster to be re-created.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param roles [string] a list of mongodb user roles. Updates to the value of the field force the cluster to be re-created.
         * 
         * @return builder
         * 
         */
        public Builder roles(@Nullable Output<List<GetMongoUserRoleArgs>> roles) {
            $.roles = roles;
            return this;
        }

        /**
         * @param roles [string] a list of mongodb user roles. Updates to the value of the field force the cluster to be re-created.
         * 
         * @return builder
         * 
         */
        public Builder roles(List<GetMongoUserRoleArgs> roles) {
            return roles(Output.of(roles));
        }

        /**
         * @param roles [string] a list of mongodb user roles. Updates to the value of the field force the cluster to be re-created.
         * 
         * @return builder
         * 
         */
        public Builder roles(GetMongoUserRoleArgs... roles) {
            return roles(List.of(roles));
        }

        /**
         * @param username [string] Used for authentication. Updates to the value of the field force the cluster to be re-created.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username [string] Used for authentication. Updates to the value of the field force the cluster to be re-created.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public GetMongoUserArgs build() {
            if ($.clusterId == null) {
                throw new MissingRequiredPropertyException("GetMongoUserArgs", "clusterId");
            }
            if ($.username == null) {
                throw new MissingRequiredPropertyException("GetMongoUserArgs", "username");
            }
            return $;
        }
    }

}
