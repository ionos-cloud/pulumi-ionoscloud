// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.compute.outputs;

import com.ionoscloud.pulumi.ionoscloud.compute.outputs.GetServersServerCdrom;
import com.ionoscloud.pulumi.ionoscloud.compute.outputs.GetServersServerLabel;
import com.ionoscloud.pulumi.ionoscloud.compute.outputs.GetServersServerNic;
import com.ionoscloud.pulumi.ionoscloud.compute.outputs.GetServersServerVolume;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetServersServer {
    private String availabilityZone;
    private String bootCdrom;
    private String bootImage;
    private String bootVolume;
    private List<GetServersServerCdrom> cdroms;
    private Integer cores;
    private String cpuFamily;
    private String hostname;
    /**
     * @return The unique ID of the server.
     * 
     */
    private String id;
    private List<GetServersServerLabel> labels;
    private @Nullable String name;
    private List<GetServersServerNic> nics;
    private Integer ram;
    private @Nullable String templateUuid;
    private String token;
    private String type;
    private String vmState;
    private List<GetServersServerVolume> volumes;

    private GetServersServer() {}
    public String availabilityZone() {
        return this.availabilityZone;
    }
    public String bootCdrom() {
        return this.bootCdrom;
    }
    public String bootImage() {
        return this.bootImage;
    }
    public String bootVolume() {
        return this.bootVolume;
    }
    public List<GetServersServerCdrom> cdroms() {
        return this.cdroms;
    }
    public Integer cores() {
        return this.cores;
    }
    public String cpuFamily() {
        return this.cpuFamily;
    }
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return The unique ID of the server.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<GetServersServerLabel> labels() {
        return this.labels;
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public List<GetServersServerNic> nics() {
        return this.nics;
    }
    public Integer ram() {
        return this.ram;
    }
    public Optional<String> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }
    public String token() {
        return this.token;
    }
    public String type() {
        return this.type;
    }
    public String vmState() {
        return this.vmState;
    }
    public List<GetServersServerVolume> volumes() {
        return this.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServersServer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String availabilityZone;
        private String bootCdrom;
        private String bootImage;
        private String bootVolume;
        private List<GetServersServerCdrom> cdroms;
        private Integer cores;
        private String cpuFamily;
        private String hostname;
        private String id;
        private List<GetServersServerLabel> labels;
        private @Nullable String name;
        private List<GetServersServerNic> nics;
        private Integer ram;
        private @Nullable String templateUuid;
        private String token;
        private String type;
        private String vmState;
        private List<GetServersServerVolume> volumes;
        public Builder() {}
        public Builder(GetServersServer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.bootCdrom = defaults.bootCdrom;
    	      this.bootImage = defaults.bootImage;
    	      this.bootVolume = defaults.bootVolume;
    	      this.cdroms = defaults.cdroms;
    	      this.cores = defaults.cores;
    	      this.cpuFamily = defaults.cpuFamily;
    	      this.hostname = defaults.hostname;
    	      this.id = defaults.id;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.nics = defaults.nics;
    	      this.ram = defaults.ram;
    	      this.templateUuid = defaults.templateUuid;
    	      this.token = defaults.token;
    	      this.type = defaults.type;
    	      this.vmState = defaults.vmState;
    	      this.volumes = defaults.volumes;
        }

        @CustomType.Setter
        public Builder availabilityZone(String availabilityZone) {
            if (availabilityZone == null) {
              throw new MissingRequiredPropertyException("GetServersServer", "availabilityZone");
            }
            this.availabilityZone = availabilityZone;
            return this;
        }
        @CustomType.Setter
        public Builder bootCdrom(String bootCdrom) {
            if (bootCdrom == null) {
              throw new MissingRequiredPropertyException("GetServersServer", "bootCdrom");
            }
            this.bootCdrom = bootCdrom;
            return this;
        }
        @CustomType.Setter
        public Builder bootImage(String bootImage) {
            if (bootImage == null) {
              throw new MissingRequiredPropertyException("GetServersServer", "bootImage");
            }
            this.bootImage = bootImage;
            return this;
        }
        @CustomType.Setter
        public Builder bootVolume(String bootVolume) {
            if (bootVolume == null) {
              throw new MissingRequiredPropertyException("GetServersServer", "bootVolume");
            }
            this.bootVolume = bootVolume;
            return this;
        }
        @CustomType.Setter
        public Builder cdroms(List<GetServersServerCdrom> cdroms) {
            if (cdroms == null) {
              throw new MissingRequiredPropertyException("GetServersServer", "cdroms");
            }
            this.cdroms = cdroms;
            return this;
        }
        public Builder cdroms(GetServersServerCdrom... cdroms) {
            return cdroms(List.of(cdroms));
        }
        @CustomType.Setter
        public Builder cores(Integer cores) {
            if (cores == null) {
              throw new MissingRequiredPropertyException("GetServersServer", "cores");
            }
            this.cores = cores;
            return this;
        }
        @CustomType.Setter
        public Builder cpuFamily(String cpuFamily) {
            if (cpuFamily == null) {
              throw new MissingRequiredPropertyException("GetServersServer", "cpuFamily");
            }
            this.cpuFamily = cpuFamily;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GetServersServer", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServersServer", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder labels(List<GetServersServerLabel> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetServersServer", "labels");
            }
            this.labels = labels;
            return this;
        }
        public Builder labels(GetServersServerLabel... labels) {
            return labels(List.of(labels));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nics(List<GetServersServerNic> nics) {
            if (nics == null) {
              throw new MissingRequiredPropertyException("GetServersServer", "nics");
            }
            this.nics = nics;
            return this;
        }
        public Builder nics(GetServersServerNic... nics) {
            return nics(List.of(nics));
        }
        @CustomType.Setter
        public Builder ram(Integer ram) {
            if (ram == null) {
              throw new MissingRequiredPropertyException("GetServersServer", "ram");
            }
            this.ram = ram;
            return this;
        }
        @CustomType.Setter
        public Builder templateUuid(@Nullable String templateUuid) {

            this.templateUuid = templateUuid;
            return this;
        }
        @CustomType.Setter
        public Builder token(String token) {
            if (token == null) {
              throw new MissingRequiredPropertyException("GetServersServer", "token");
            }
            this.token = token;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetServersServer", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder vmState(String vmState) {
            if (vmState == null) {
              throw new MissingRequiredPropertyException("GetServersServer", "vmState");
            }
            this.vmState = vmState;
            return this;
        }
        @CustomType.Setter
        public Builder volumes(List<GetServersServerVolume> volumes) {
            if (volumes == null) {
              throw new MissingRequiredPropertyException("GetServersServer", "volumes");
            }
            this.volumes = volumes;
            return this;
        }
        public Builder volumes(GetServersServerVolume... volumes) {
            return volumes(List.of(volumes));
        }
        public GetServersServer build() {
            final var _resultValue = new GetServersServer();
            _resultValue.availabilityZone = availabilityZone;
            _resultValue.bootCdrom = bootCdrom;
            _resultValue.bootImage = bootImage;
            _resultValue.bootVolume = bootVolume;
            _resultValue.cdroms = cdroms;
            _resultValue.cores = cores;
            _resultValue.cpuFamily = cpuFamily;
            _resultValue.hostname = hostname;
            _resultValue.id = id;
            _resultValue.labels = labels;
            _resultValue.name = name;
            _resultValue.nics = nics;
            _resultValue.ram = ram;
            _resultValue.templateUuid = templateUuid;
            _resultValue.token = token;
            _resultValue.type = type;
            _resultValue.vmState = vmState;
            _resultValue.volumes = volumes;
            return _resultValue;
        }
    }
}
