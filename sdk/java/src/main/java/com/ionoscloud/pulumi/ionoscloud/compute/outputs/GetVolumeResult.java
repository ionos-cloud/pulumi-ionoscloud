// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetVolumeResult {
    /**
     * @return The storage availability zone assigned to the volume: AUTO, ZONE_1, ZONE_2, or ZONE_3. This property is immutable.
     * 
     */
    private String availabilityZone;
    /**
     * @return The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either &#39;public image&#39; or &#39;imageAlias&#39; in conjunction with this property.
     * 
     */
    private String backupUnitId;
    /**
     * @return The UUID of the attached server.
     * 
     */
    private String bootServer;
    /**
     * @return The bus type of the volume: VIRTIO or IDE.
     * 
     */
    private String bus;
    /**
     * @return Is capable of CPU hot plug (no reboot required)
     * 
     */
    private Boolean cpuHotPlug;
    private String datacenterId;
    /**
     * @return The LUN ID of the storage volume. Null for volumes not mounted to any VM
     * 
     */
    private Integer deviceNumber;
    /**
     * @return Is capable of Virt-IO drive hot plug (no reboot required)
     * 
     */
    private Boolean discVirtioHotPlug;
    /**
     * @return Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.
     * 
     */
    private Boolean discVirtioHotUnplug;
    /**
     * @return The volume type: HDD or SSD.
     * 
     */
    private String diskType;
    /**
     * @return The id of the volume.
     * 
     */
    private String id;
    /**
     * @return The image or snapshot UUID.
     * 
     */
    private String image;
    /**
     * @return Required if `sshkey_path` is not provided.
     * 
     */
    private String imagePassword;
    /**
     * @return The type of the licence.
     * 
     */
    private String licenceType;
    /**
     * @return The name of the volume.
     * 
     */
    private String name;
    /**
     * @return Is capable of nic hot plug (no reboot required)
     * 
     */
    private Boolean nicHotPlug;
    /**
     * @return Is capable of nic hot unplug (no reboot required)
     * 
     */
    private Boolean nicHotUnplug;
    /**
     * @return Is capable of memory hot plug (no reboot required)
     * 
     */
    private Boolean ramHotPlug;
    /**
     * @return The size of the volume in GB.
     * 
     */
    private Integer size;
    /**
     * @return The associated public SSH key.
     * 
     */
    private String sshkey;
    /**
     * @return The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. This option will work only with cloud-init compatible images.
     * 
     */
    private String userData;

    private GetVolumeResult() {}
    /**
     * @return The storage availability zone assigned to the volume: AUTO, ZONE_1, ZONE_2, or ZONE_3. This property is immutable.
     * 
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }
    /**
     * @return The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either &#39;public image&#39; or &#39;imageAlias&#39; in conjunction with this property.
     * 
     */
    public String backupUnitId() {
        return this.backupUnitId;
    }
    /**
     * @return The UUID of the attached server.
     * 
     */
    public String bootServer() {
        return this.bootServer;
    }
    /**
     * @return The bus type of the volume: VIRTIO or IDE.
     * 
     */
    public String bus() {
        return this.bus;
    }
    /**
     * @return Is capable of CPU hot plug (no reboot required)
     * 
     */
    public Boolean cpuHotPlug() {
        return this.cpuHotPlug;
    }
    public String datacenterId() {
        return this.datacenterId;
    }
    /**
     * @return The LUN ID of the storage volume. Null for volumes not mounted to any VM
     * 
     */
    public Integer deviceNumber() {
        return this.deviceNumber;
    }
    /**
     * @return Is capable of Virt-IO drive hot plug (no reboot required)
     * 
     */
    public Boolean discVirtioHotPlug() {
        return this.discVirtioHotPlug;
    }
    /**
     * @return Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.
     * 
     */
    public Boolean discVirtioHotUnplug() {
        return this.discVirtioHotUnplug;
    }
    /**
     * @return The volume type: HDD or SSD.
     * 
     */
    public String diskType() {
        return this.diskType;
    }
    /**
     * @return The id of the volume.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The image or snapshot UUID.
     * 
     */
    public String image() {
        return this.image;
    }
    /**
     * @return Required if `sshkey_path` is not provided.
     * 
     */
    public String imagePassword() {
        return this.imagePassword;
    }
    /**
     * @return The type of the licence.
     * 
     */
    public String licenceType() {
        return this.licenceType;
    }
    /**
     * @return The name of the volume.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Is capable of nic hot plug (no reboot required)
     * 
     */
    public Boolean nicHotPlug() {
        return this.nicHotPlug;
    }
    /**
     * @return Is capable of nic hot unplug (no reboot required)
     * 
     */
    public Boolean nicHotUnplug() {
        return this.nicHotUnplug;
    }
    /**
     * @return Is capable of memory hot plug (no reboot required)
     * 
     */
    public Boolean ramHotPlug() {
        return this.ramHotPlug;
    }
    /**
     * @return The size of the volume in GB.
     * 
     */
    public Integer size() {
        return this.size;
    }
    /**
     * @return The associated public SSH key.
     * 
     */
    public String sshkey() {
        return this.sshkey;
    }
    /**
     * @return The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. This option will work only with cloud-init compatible images.
     * 
     */
    public String userData() {
        return this.userData;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVolumeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String availabilityZone;
        private String backupUnitId;
        private String bootServer;
        private String bus;
        private Boolean cpuHotPlug;
        private String datacenterId;
        private Integer deviceNumber;
        private Boolean discVirtioHotPlug;
        private Boolean discVirtioHotUnplug;
        private String diskType;
        private String id;
        private String image;
        private String imagePassword;
        private String licenceType;
        private String name;
        private Boolean nicHotPlug;
        private Boolean nicHotUnplug;
        private Boolean ramHotPlug;
        private Integer size;
        private String sshkey;
        private String userData;
        public Builder() {}
        public Builder(GetVolumeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.backupUnitId = defaults.backupUnitId;
    	      this.bootServer = defaults.bootServer;
    	      this.bus = defaults.bus;
    	      this.cpuHotPlug = defaults.cpuHotPlug;
    	      this.datacenterId = defaults.datacenterId;
    	      this.deviceNumber = defaults.deviceNumber;
    	      this.discVirtioHotPlug = defaults.discVirtioHotPlug;
    	      this.discVirtioHotUnplug = defaults.discVirtioHotUnplug;
    	      this.diskType = defaults.diskType;
    	      this.id = defaults.id;
    	      this.image = defaults.image;
    	      this.imagePassword = defaults.imagePassword;
    	      this.licenceType = defaults.licenceType;
    	      this.name = defaults.name;
    	      this.nicHotPlug = defaults.nicHotPlug;
    	      this.nicHotUnplug = defaults.nicHotUnplug;
    	      this.ramHotPlug = defaults.ramHotPlug;
    	      this.size = defaults.size;
    	      this.sshkey = defaults.sshkey;
    	      this.userData = defaults.userData;
        }

        @CustomType.Setter
        public Builder availabilityZone(String availabilityZone) {
            if (availabilityZone == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "availabilityZone");
            }
            this.availabilityZone = availabilityZone;
            return this;
        }
        @CustomType.Setter
        public Builder backupUnitId(String backupUnitId) {
            if (backupUnitId == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "backupUnitId");
            }
            this.backupUnitId = backupUnitId;
            return this;
        }
        @CustomType.Setter
        public Builder bootServer(String bootServer) {
            if (bootServer == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "bootServer");
            }
            this.bootServer = bootServer;
            return this;
        }
        @CustomType.Setter
        public Builder bus(String bus) {
            if (bus == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "bus");
            }
            this.bus = bus;
            return this;
        }
        @CustomType.Setter
        public Builder cpuHotPlug(Boolean cpuHotPlug) {
            if (cpuHotPlug == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "cpuHotPlug");
            }
            this.cpuHotPlug = cpuHotPlug;
            return this;
        }
        @CustomType.Setter
        public Builder datacenterId(String datacenterId) {
            if (datacenterId == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "datacenterId");
            }
            this.datacenterId = datacenterId;
            return this;
        }
        @CustomType.Setter
        public Builder deviceNumber(Integer deviceNumber) {
            if (deviceNumber == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "deviceNumber");
            }
            this.deviceNumber = deviceNumber;
            return this;
        }
        @CustomType.Setter
        public Builder discVirtioHotPlug(Boolean discVirtioHotPlug) {
            if (discVirtioHotPlug == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "discVirtioHotPlug");
            }
            this.discVirtioHotPlug = discVirtioHotPlug;
            return this;
        }
        @CustomType.Setter
        public Builder discVirtioHotUnplug(Boolean discVirtioHotUnplug) {
            if (discVirtioHotUnplug == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "discVirtioHotUnplug");
            }
            this.discVirtioHotUnplug = discVirtioHotUnplug;
            return this;
        }
        @CustomType.Setter
        public Builder diskType(String diskType) {
            if (diskType == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "diskType");
            }
            this.diskType = diskType;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder image(String image) {
            if (image == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "image");
            }
            this.image = image;
            return this;
        }
        @CustomType.Setter
        public Builder imagePassword(String imagePassword) {
            if (imagePassword == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "imagePassword");
            }
            this.imagePassword = imagePassword;
            return this;
        }
        @CustomType.Setter
        public Builder licenceType(String licenceType) {
            if (licenceType == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "licenceType");
            }
            this.licenceType = licenceType;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nicHotPlug(Boolean nicHotPlug) {
            if (nicHotPlug == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "nicHotPlug");
            }
            this.nicHotPlug = nicHotPlug;
            return this;
        }
        @CustomType.Setter
        public Builder nicHotUnplug(Boolean nicHotUnplug) {
            if (nicHotUnplug == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "nicHotUnplug");
            }
            this.nicHotUnplug = nicHotUnplug;
            return this;
        }
        @CustomType.Setter
        public Builder ramHotPlug(Boolean ramHotPlug) {
            if (ramHotPlug == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "ramHotPlug");
            }
            this.ramHotPlug = ramHotPlug;
            return this;
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "size");
            }
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder sshkey(String sshkey) {
            if (sshkey == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "sshkey");
            }
            this.sshkey = sshkey;
            return this;
        }
        @CustomType.Setter
        public Builder userData(String userData) {
            if (userData == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "userData");
            }
            this.userData = userData;
            return this;
        }
        public GetVolumeResult build() {
            final var _resultValue = new GetVolumeResult();
            _resultValue.availabilityZone = availabilityZone;
            _resultValue.backupUnitId = backupUnitId;
            _resultValue.bootServer = bootServer;
            _resultValue.bus = bus;
            _resultValue.cpuHotPlug = cpuHotPlug;
            _resultValue.datacenterId = datacenterId;
            _resultValue.deviceNumber = deviceNumber;
            _resultValue.discVirtioHotPlug = discVirtioHotPlug;
            _resultValue.discVirtioHotUnplug = discVirtioHotUnplug;
            _resultValue.diskType = diskType;
            _resultValue.id = id;
            _resultValue.image = image;
            _resultValue.imagePassword = imagePassword;
            _resultValue.licenceType = licenceType;
            _resultValue.name = name;
            _resultValue.nicHotPlug = nicHotPlug;
            _resultValue.nicHotUnplug = nicHotUnplug;
            _resultValue.ramHotPlug = ramHotPlug;
            _resultValue.size = size;
            _resultValue.sshkey = sshkey;
            _resultValue.userData = userData;
            return _resultValue;
        }
    }
}
