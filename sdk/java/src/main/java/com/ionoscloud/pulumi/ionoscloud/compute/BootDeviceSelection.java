// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.compute;

import com.ionoscloud.pulumi.ionoscloud.Utilities;
import com.ionoscloud.pulumi.ionoscloud.compute.BootDeviceSelectionArgs;
import com.ionoscloud.pulumi.ionoscloud.compute.inputs.BootDeviceSelectionState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages the selection of a boot device for IonosCloud Servers.
 * 
 * ## Example Usage
 * 
 * The boot device of a `ionoscloud.compute.Server`, `ionoscloud.compute.VCPUServer` or `ionoscloud.compute.CubeServer` can be selected with this resource.
 * Deleting this resource will revert the boot device back to the default volume, which is the first inline volume created together with the server.
 * This resource also allows switching between a `volume` and a `ionoscloud.compute.getImage` CDROM. Note that CDROM images are detached after they are no longer set as boot devices.
 * 
 * ### Select an external volume
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.ionoscloud.compute.Server;
 * import com.pulumi.ionoscloud.compute.ServerArgs;
 * import com.pulumi.ionoscloud.compute.inputs.ServerVolumeArgs;
 * import com.pulumi.ionoscloud.compute.inputs.ServerNicArgs;
 * import com.pulumi.ionoscloud.compute.Volume;
 * import com.pulumi.ionoscloud.compute.VolumeArgs;
 * import com.pulumi.ionoscloud.compute.BootDeviceSelection;
 * import com.pulumi.ionoscloud.compute.BootDeviceSelectionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleServer = new Server("exampleServer", ServerArgs.builder()
 *             .name("Server Example")
 *             .availabilityZone("ZONE_2")
 *             .imageName("ubuntu:latest")
 *             .cores(2)
 *             .ram(2048)
 *             .imagePassword(serverImagePassword.result())
 *             .datacenterId(exampleIonoscloudDatacenter.id())
 *             .volume(ServerVolumeArgs.builder()
 *                 .name("Inline Updated")
 *                 .size(20)
 *                 .diskType("SSD Standard")
 *                 .bus("VIRTIO")
 *                 .availabilityZone("AUTO")
 *                 .build())
 *             .nic(ServerNicArgs.builder()
 *                 .lan(exampleIonoscloudLan.id())
 *                 .name("Nic Example")
 *                 .dhcp(true)
 *                 .firewallActive(true)
 *                 .build())
 *             .build());
 * 
 *         var exampleVolume = new Volume("exampleVolume", VolumeArgs.builder()
 *             .serverId(exampleServer.id())
 *             .datacenterId(exampleIonoscloudDatacenter.id())
 *             .name("External 1")
 *             .size(10)
 *             .diskType("HDD")
 *             .availabilityZone("AUTO")
 *             .imageName("debian:latest")
 *             .imagePassword(serverImagePassword.result())
 *             .build());
 * 
 *         var example = new BootDeviceSelection("example", BootDeviceSelectionArgs.builder()
 *             .datacenterId(exampleIonoscloudDatacenter.id())
 *             .serverId(exampleServer.id())
 *             .bootDeviceId(exampleVolume.id())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Select an inline volume again
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.ionoscloud.compute.Server;
 * import com.pulumi.ionoscloud.compute.ServerArgs;
 * import com.pulumi.ionoscloud.compute.inputs.ServerVolumeArgs;
 * import com.pulumi.ionoscloud.compute.inputs.ServerNicArgs;
 * import com.pulumi.ionoscloud.compute.BootDeviceSelection;
 * import com.pulumi.ionoscloud.compute.BootDeviceSelectionArgs;
 * import com.pulumi.ionoscloud.compute.Volume;
 * import com.pulumi.ionoscloud.compute.VolumeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleServer = new Server("exampleServer", ServerArgs.builder()
 *             .name("Server Example")
 *             .availabilityZone("ZONE_2")
 *             .imageName("ubuntu:latest")
 *             .cores(2)
 *             .ram(2048)
 *             .imagePassword(serverImagePassword.result())
 *             .datacenterId(exampleIonoscloudDatacenter.id())
 *             .volume(ServerVolumeArgs.builder()
 *                 .name("Inline Updated")
 *                 .size(20)
 *                 .diskType("SSD Standard")
 *                 .bus("VIRTIO")
 *                 .availabilityZone("AUTO")
 *                 .build())
 *             .nic(ServerNicArgs.builder()
 *                 .lan(exampleIonoscloudLan.id())
 *                 .name("Nic Example")
 *                 .dhcp(true)
 *                 .firewallActive(true)
 *                 .build())
 *             .build());
 * 
 *         var example = new BootDeviceSelection("example", BootDeviceSelectionArgs.builder()
 *             .datacenterId(exampleIonoscloudDatacenter.id())
 *             .serverId(exampleServer.id())
 *             .bootDeviceId(exampleServer.inlineVolumeIds().applyValue(inlineVolumeIds -> inlineVolumeIds[0]))
 *             .build());
 * 
 *         var exampleVolume = new Volume("exampleVolume", VolumeArgs.builder()
 *             .serverId(exampleServer.id())
 *             .datacenterId(exampleIonoscloudDatacenter.id())
 *             .name("External 1")
 *             .size(10)
 *             .diskType("HDD")
 *             .availabilityZone("AUTO")
 *             .imageName("debian:latest")
 *             .imagePassword(serverImagePassword.result())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Select a CDROM image
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.ionoscloud.compute.Server;
 * import com.pulumi.ionoscloud.compute.ServerArgs;
 * import com.pulumi.ionoscloud.compute.inputs.ServerVolumeArgs;
 * import com.pulumi.ionoscloud.compute.inputs.ServerNicArgs;
 * import com.pulumi.ionoscloud.compute.ComputeFunctions;
 * import com.pulumi.ionoscloud.compute.inputs.GetImageArgs;
 * import com.pulumi.ionoscloud.compute.BootDeviceSelection;
 * import com.pulumi.ionoscloud.compute.BootDeviceSelectionArgs;
 * import com.pulumi.ionoscloud.compute.Volume;
 * import com.pulumi.ionoscloud.compute.VolumeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleServer = new Server("exampleServer", ServerArgs.builder()
 *             .name("Server Example")
 *             .availabilityZone("ZONE_2")
 *             .imageName("ubuntu:latest")
 *             .cores(2)
 *             .ram(2048)
 *             .imagePassword(serverImagePassword.result())
 *             .datacenterId(exampleIonoscloudDatacenter.id())
 *             .volume(ServerVolumeArgs.builder()
 *                 .name("Inline Updated")
 *                 .size(20)
 *                 .diskType("SSD Standard")
 *                 .bus("VIRTIO")
 *                 .availabilityZone("AUTO")
 *                 .build())
 *             .nic(ServerNicArgs.builder()
 *                 .lan(exampleIonoscloudLan.id())
 *                 .name("Nic Example")
 *                 .dhcp(true)
 *                 .firewallActive(true)
 *                 .build())
 *             .build());
 * 
 *         final var example = ComputeFunctions.getImage(GetImageArgs.builder()
 *             .name("ubuntu-20.04")
 *             .location("de/txl")
 *             .type("CDROM")
 *             .build());
 * 
 *         var exampleBootDeviceSelection = new BootDeviceSelection("exampleBootDeviceSelection", BootDeviceSelectionArgs.builder()
 *             .datacenterId(exampleIonoscloudDatacenter.id())
 *             .serverId(exampleServer.inlineVolumeIds().applyValue(inlineVolumeIds -> inlineVolumeIds[0]))
 *             .bootDeviceId(example.applyValue(getImageResult -> getImageResult.id()))
 *             .build());
 * 
 *         var exampleVolume = new Volume("exampleVolume", VolumeArgs.builder()
 *             .serverId(exampleServer.id())
 *             .datacenterId(exampleIonoscloudDatacenter.id())
 *             .name("External 1")
 *             .size(10)
 *             .diskType("HDD")
 *             .availabilityZone("AUTO")
 *             .imageName("debian:latest")
 *             .imagePassword(serverImagePassword.result())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Perform a network boot
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.ionoscloud.compute.Server;
 * import com.pulumi.ionoscloud.compute.ServerArgs;
 * import com.pulumi.ionoscloud.compute.inputs.ServerVolumeArgs;
 * import com.pulumi.ionoscloud.compute.inputs.ServerNicArgs;
 * import com.pulumi.ionoscloud.compute.BootDeviceSelection;
 * import com.pulumi.ionoscloud.compute.BootDeviceSelectionArgs;
 * import com.pulumi.ionoscloud.compute.Volume;
 * import com.pulumi.ionoscloud.compute.VolumeArgs;
 * import com.pulumi.ionoscloud.compute.ComputeFunctions;
 * import com.pulumi.ionoscloud.compute.inputs.GetImageArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleServer = new Server("exampleServer", ServerArgs.builder()
 *             .name("Server Example")
 *             .availabilityZone("ZONE_2")
 *             .imageName("ubuntu:latest")
 *             .cores(2)
 *             .ram(2048)
 *             .imagePassword(serverImagePassword.result())
 *             .datacenterId(exampleIonoscloudDatacenter.id())
 *             .volume(ServerVolumeArgs.builder()
 *                 .name("Inline volume")
 *                 .size(20)
 *                 .diskType("SSD Standard")
 *                 .bus("VIRTIO")
 *                 .availabilityZone("AUTO")
 *                 .build())
 *             .nic(ServerNicArgs.builder()
 *                 .lan(exampleIonoscloudLan.id())
 *                 .name("Nic Example")
 *                 .dhcp(true)
 *                 .firewallActive(true)
 *                 .build())
 *             .build());
 * 
 *         var exampleBootDeviceSelection = new BootDeviceSelection("exampleBootDeviceSelection", BootDeviceSelectionArgs.builder()
 *             .datacenterId(exampleIonoscloudDatacenter.id())
 *             .serverId(exampleServer.inlineVolumeIds().applyValue(inlineVolumeIds -> inlineVolumeIds[0]))
 *             .build());
 * 
 *         var exampleVolume = new Volume("exampleVolume", VolumeArgs.builder()
 *             .serverId(exampleServer.id())
 *             .datacenterId(exampleIonoscloudDatacenter.id())
 *             .name("External 1")
 *             .size(10)
 *             .diskType("HDD")
 *             .availabilityZone("AUTO")
 *             .imageName("debian:latest")
 *             .imagePassword(serverImagePassword.result())
 *             .build());
 * 
 *         final var example = ComputeFunctions.getImage(GetImageArgs.builder()
 *             .name("ubuntu-20.04")
 *             .location("de/txl")
 *             .type("CDROM")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="ionoscloud:compute/bootDeviceSelection:BootDeviceSelection")
public class BootDeviceSelection extends com.pulumi.resources.CustomResource {
    /**
     * [string] The ID of a bootable device such as a volume or an image data source. If this field is omitted from the configuration, the VM will be restarted with no primary boot device, and it will enter the PXE shell for network booting.
     * ***Note***: If the network booting process started by the PXE shell fails, the VM will still boot into the image of the attached storage as a fallback. This behavior imitates the &#34;Boot from Network&#34; option from [DCD](https://dcd.ionos.com/).
     * 
     */
    @Export(name="bootDeviceId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> bootDeviceId;

    /**
     * @return [string] The ID of a bootable device such as a volume or an image data source. If this field is omitted from the configuration, the VM will be restarted with no primary boot device, and it will enter the PXE shell for network booting.
     * ***Note***: If the network booting process started by the PXE shell fails, the VM will still boot into the image of the attached storage as a fallback. This behavior imitates the &#34;Boot from Network&#34; option from [DCD](https://dcd.ionos.com/).
     * 
     */
    public Output<Optional<String>> bootDeviceId() {
        return Codegen.optional(this.bootDeviceId);
    }
    /**
     * [string] The ID of a Virtual Data Center.
     * 
     */
    @Export(name="datacenterId", refs={String.class}, tree="[0]")
    private Output<String> datacenterId;

    /**
     * @return [string] The ID of a Virtual Data Center.
     * 
     */
    public Output<String> datacenterId() {
        return this.datacenterId;
    }
    /**
     * ID of the first attached volume of the Server, which will be the default boot volume.
     * 
     */
    @Export(name="defaultBootVolumeId", refs={String.class}, tree="[0]")
    private Output<String> defaultBootVolumeId;

    /**
     * @return ID of the first attached volume of the Server, which will be the default boot volume.
     * 
     */
    public Output<String> defaultBootVolumeId() {
        return this.defaultBootVolumeId;
    }
    /**
     * [string] The ID of a server.
     * 
     */
    @Export(name="serverId", refs={String.class}, tree="[0]")
    private Output<String> serverId;

    /**
     * @return [string] The ID of a server.
     * 
     */
    public Output<String> serverId() {
        return this.serverId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public BootDeviceSelection(java.lang.String name) {
        this(name, BootDeviceSelectionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public BootDeviceSelection(java.lang.String name, BootDeviceSelectionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public BootDeviceSelection(java.lang.String name, BootDeviceSelectionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("ionoscloud:compute/bootDeviceSelection:BootDeviceSelection", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private BootDeviceSelection(java.lang.String name, Output<java.lang.String> id, @Nullable BootDeviceSelectionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("ionoscloud:compute/bootDeviceSelection:BootDeviceSelection", name, state, makeResourceOptions(options, id), false);
    }

    private static BootDeviceSelectionArgs makeArgs(BootDeviceSelectionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? BootDeviceSelectionArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static BootDeviceSelection get(java.lang.String name, Output<java.lang.String> id, @Nullable BootDeviceSelectionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new BootDeviceSelection(name, id, state, options);
    }
}
