// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.creg.outputs;

import com.ionoscloud.pulumi.ionoscloud.creg.outputs.GetRegistryFeature;
import com.ionoscloud.pulumi.ionoscloud.creg.outputs.GetRegistryGarbageCollectionSchedule;
import com.ionoscloud.pulumi.ionoscloud.creg.outputs.GetRegistryMaintenanceWindow;
import com.ionoscloud.pulumi.ionoscloud.creg.outputs.GetRegistryStorageUsage;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRegistryResult {
    /**
     * @return The subnet CIDRs that are allowed to connect to the registry.  Specify &#34;a.b.c.d/32&#34; for an individual IP address. __Note__: If this list is empty or not set, there are no restrictions.
     * 
     */
    private List<String> apiSubnetAllowLists;
    private List<GetRegistryFeature> features;
    private List<GetRegistryGarbageCollectionSchedule> garbageCollectionSchedules;
    private String hostname;
    /**
     * @return Id of the container registry.
     * 
     */
    private String id;
    private @Nullable String location;
    private List<GetRegistryMaintenanceWindow> maintenanceWindows;
    /**
     * @return The name of the container registry.
     * 
     */
    private String name;
    private @Nullable Boolean partialMatch;
    private List<GetRegistryStorageUsage> storageUsages;

    private GetRegistryResult() {}
    /**
     * @return The subnet CIDRs that are allowed to connect to the registry.  Specify &#34;a.b.c.d/32&#34; for an individual IP address. __Note__: If this list is empty or not set, there are no restrictions.
     * 
     */
    public List<String> apiSubnetAllowLists() {
        return this.apiSubnetAllowLists;
    }
    public List<GetRegistryFeature> features() {
        return this.features;
    }
    public List<GetRegistryGarbageCollectionSchedule> garbageCollectionSchedules() {
        return this.garbageCollectionSchedules;
    }
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return Id of the container registry.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    public List<GetRegistryMaintenanceWindow> maintenanceWindows() {
        return this.maintenanceWindows;
    }
    /**
     * @return The name of the container registry.
     * 
     */
    public String name() {
        return this.name;
    }
    public Optional<Boolean> partialMatch() {
        return Optional.ofNullable(this.partialMatch);
    }
    public List<GetRegistryStorageUsage> storageUsages() {
        return this.storageUsages;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegistryResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> apiSubnetAllowLists;
        private List<GetRegistryFeature> features;
        private List<GetRegistryGarbageCollectionSchedule> garbageCollectionSchedules;
        private String hostname;
        private String id;
        private @Nullable String location;
        private List<GetRegistryMaintenanceWindow> maintenanceWindows;
        private String name;
        private @Nullable Boolean partialMatch;
        private List<GetRegistryStorageUsage> storageUsages;
        public Builder() {}
        public Builder(GetRegistryResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiSubnetAllowLists = defaults.apiSubnetAllowLists;
    	      this.features = defaults.features;
    	      this.garbageCollectionSchedules = defaults.garbageCollectionSchedules;
    	      this.hostname = defaults.hostname;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.maintenanceWindows = defaults.maintenanceWindows;
    	      this.name = defaults.name;
    	      this.partialMatch = defaults.partialMatch;
    	      this.storageUsages = defaults.storageUsages;
        }

        @CustomType.Setter
        public Builder apiSubnetAllowLists(List<String> apiSubnetAllowLists) {
            if (apiSubnetAllowLists == null) {
              throw new MissingRequiredPropertyException("GetRegistryResult", "apiSubnetAllowLists");
            }
            this.apiSubnetAllowLists = apiSubnetAllowLists;
            return this;
        }
        public Builder apiSubnetAllowLists(String... apiSubnetAllowLists) {
            return apiSubnetAllowLists(List.of(apiSubnetAllowLists));
        }
        @CustomType.Setter
        public Builder features(List<GetRegistryFeature> features) {
            if (features == null) {
              throw new MissingRequiredPropertyException("GetRegistryResult", "features");
            }
            this.features = features;
            return this;
        }
        public Builder features(GetRegistryFeature... features) {
            return features(List.of(features));
        }
        @CustomType.Setter
        public Builder garbageCollectionSchedules(List<GetRegistryGarbageCollectionSchedule> garbageCollectionSchedules) {
            if (garbageCollectionSchedules == null) {
              throw new MissingRequiredPropertyException("GetRegistryResult", "garbageCollectionSchedules");
            }
            this.garbageCollectionSchedules = garbageCollectionSchedules;
            return this;
        }
        public Builder garbageCollectionSchedules(GetRegistryGarbageCollectionSchedule... garbageCollectionSchedules) {
            return garbageCollectionSchedules(List.of(garbageCollectionSchedules));
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GetRegistryResult", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRegistryResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {

            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceWindows(List<GetRegistryMaintenanceWindow> maintenanceWindows) {
            if (maintenanceWindows == null) {
              throw new MissingRequiredPropertyException("GetRegistryResult", "maintenanceWindows");
            }
            this.maintenanceWindows = maintenanceWindows;
            return this;
        }
        public Builder maintenanceWindows(GetRegistryMaintenanceWindow... maintenanceWindows) {
            return maintenanceWindows(List.of(maintenanceWindows));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetRegistryResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder partialMatch(@Nullable Boolean partialMatch) {

            this.partialMatch = partialMatch;
            return this;
        }
        @CustomType.Setter
        public Builder storageUsages(List<GetRegistryStorageUsage> storageUsages) {
            if (storageUsages == null) {
              throw new MissingRequiredPropertyException("GetRegistryResult", "storageUsages");
            }
            this.storageUsages = storageUsages;
            return this;
        }
        public Builder storageUsages(GetRegistryStorageUsage... storageUsages) {
            return storageUsages(List.of(storageUsages));
        }
        public GetRegistryResult build() {
            final var _resultValue = new GetRegistryResult();
            _resultValue.apiSubnetAllowLists = apiSubnetAllowLists;
            _resultValue.features = features;
            _resultValue.garbageCollectionSchedules = garbageCollectionSchedules;
            _resultValue.hostname = hostname;
            _resultValue.id = id;
            _resultValue.location = location;
            _resultValue.maintenanceWindows = maintenanceWindows;
            _resultValue.name = name;
            _resultValue.partialMatch = partialMatch;
            _resultValue.storageUsages = storageUsages;
            return _resultValue;
        }
    }
}
