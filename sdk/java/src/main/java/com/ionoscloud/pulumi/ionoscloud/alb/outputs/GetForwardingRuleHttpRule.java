// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.alb.outputs;

import com.ionoscloud.pulumi.ionoscloud.alb.outputs.GetForwardingRuleHttpRuleCondition;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetForwardingRuleHttpRule {
    /**
     * @return An array of items in the collection.The action is only performed if each and every condition is met; if no conditions are set, the rule will always be performed.
     * 
     */
    private List<GetForwardingRuleHttpRuleCondition> conditions;
    /**
     * @return Valid only for STATIC actions.
     * 
     */
    private String contentType;
    /**
     * @return Default is false; valid only for REDIRECT actions.
     * 
     */
    private Boolean dropQuery;
    /**
     * @return The location for redirecting; mandatory and valid only for REDIRECT actions.
     * 
     */
    private String location;
    /**
     * @return Name of an existing application load balancer that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partial_match` parameter is not set to true.
     * 
     */
    private String name;
    /**
     * @return The response message of the request; mandatory for STATIC action.
     * 
     */
    private String responseMessage;
    /**
     * @return Valid only for REDIRECT and STATIC actions. For REDIRECT actions, default is 301 and possible values are 301, 302, 303, 307, and 308. For STATIC actions, default is 503 and valid range is 200 to 599.
     * 
     */
    private Integer statusCode;
    /**
     * @return The UUID of the target group; mandatory for FORWARD action.
     * 
     */
    private String targetGroup;
    /**
     * @return Type of the Http Rule condition.
     * 
     */
    private String type;

    private GetForwardingRuleHttpRule() {}
    /**
     * @return An array of items in the collection.The action is only performed if each and every condition is met; if no conditions are set, the rule will always be performed.
     * 
     */
    public List<GetForwardingRuleHttpRuleCondition> conditions() {
        return this.conditions;
    }
    /**
     * @return Valid only for STATIC actions.
     * 
     */
    public String contentType() {
        return this.contentType;
    }
    /**
     * @return Default is false; valid only for REDIRECT actions.
     * 
     */
    public Boolean dropQuery() {
        return this.dropQuery;
    }
    /**
     * @return The location for redirecting; mandatory and valid only for REDIRECT actions.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Name of an existing application load balancer that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partial_match` parameter is not set to true.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The response message of the request; mandatory for STATIC action.
     * 
     */
    public String responseMessage() {
        return this.responseMessage;
    }
    /**
     * @return Valid only for REDIRECT and STATIC actions. For REDIRECT actions, default is 301 and possible values are 301, 302, 303, 307, and 308. For STATIC actions, default is 503 and valid range is 200 to 599.
     * 
     */
    public Integer statusCode() {
        return this.statusCode;
    }
    /**
     * @return The UUID of the target group; mandatory for FORWARD action.
     * 
     */
    public String targetGroup() {
        return this.targetGroup;
    }
    /**
     * @return Type of the Http Rule condition.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetForwardingRuleHttpRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetForwardingRuleHttpRuleCondition> conditions;
        private String contentType;
        private Boolean dropQuery;
        private String location;
        private String name;
        private String responseMessage;
        private Integer statusCode;
        private String targetGroup;
        private String type;
        public Builder() {}
        public Builder(GetForwardingRuleHttpRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conditions = defaults.conditions;
    	      this.contentType = defaults.contentType;
    	      this.dropQuery = defaults.dropQuery;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.responseMessage = defaults.responseMessage;
    	      this.statusCode = defaults.statusCode;
    	      this.targetGroup = defaults.targetGroup;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder conditions(List<GetForwardingRuleHttpRuleCondition> conditions) {
            if (conditions == null) {
              throw new MissingRequiredPropertyException("GetForwardingRuleHttpRule", "conditions");
            }
            this.conditions = conditions;
            return this;
        }
        public Builder conditions(GetForwardingRuleHttpRuleCondition... conditions) {
            return conditions(List.of(conditions));
        }
        @CustomType.Setter
        public Builder contentType(String contentType) {
            if (contentType == null) {
              throw new MissingRequiredPropertyException("GetForwardingRuleHttpRule", "contentType");
            }
            this.contentType = contentType;
            return this;
        }
        @CustomType.Setter
        public Builder dropQuery(Boolean dropQuery) {
            if (dropQuery == null) {
              throw new MissingRequiredPropertyException("GetForwardingRuleHttpRule", "dropQuery");
            }
            this.dropQuery = dropQuery;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetForwardingRuleHttpRule", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetForwardingRuleHttpRule", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder responseMessage(String responseMessage) {
            if (responseMessage == null) {
              throw new MissingRequiredPropertyException("GetForwardingRuleHttpRule", "responseMessage");
            }
            this.responseMessage = responseMessage;
            return this;
        }
        @CustomType.Setter
        public Builder statusCode(Integer statusCode) {
            if (statusCode == null) {
              throw new MissingRequiredPropertyException("GetForwardingRuleHttpRule", "statusCode");
            }
            this.statusCode = statusCode;
            return this;
        }
        @CustomType.Setter
        public Builder targetGroup(String targetGroup) {
            if (targetGroup == null) {
              throw new MissingRequiredPropertyException("GetForwardingRuleHttpRule", "targetGroup");
            }
            this.targetGroup = targetGroup;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetForwardingRuleHttpRule", "type");
            }
            this.type = type;
            return this;
        }
        public GetForwardingRuleHttpRule build() {
            final var _resultValue = new GetForwardingRuleHttpRule();
            _resultValue.conditions = conditions;
            _resultValue.contentType = contentType;
            _resultValue.dropQuery = dropQuery;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.responseMessage = responseMessage;
            _resultValue.statusCode = statusCode;
            _resultValue.targetGroup = targetGroup;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
