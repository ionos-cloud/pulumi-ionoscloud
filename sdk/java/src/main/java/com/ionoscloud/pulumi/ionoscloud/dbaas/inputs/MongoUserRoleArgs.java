// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.dbaas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MongoUserRoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final MongoUserRoleArgs Empty = new MongoUserRoleArgs();

    /**
     * [true] Database on which to apply the role.
     * 
     * **NOTE:** MongoDb users do not support update at the moment. Changing any attribute will result in the user being re-created.
     * 
     */
    @Import(name="database")
    private @Nullable Output<String> database;

    /**
     * @return [true] Database on which to apply the role.
     * 
     * **NOTE:** MongoDb users do not support update at the moment. Changing any attribute will result in the user being re-created.
     * 
     */
    public Optional<Output<String>> database() {
        return Optional.ofNullable(this.database);
    }

    /**
     * [true] Mongodb user role. Examples: read, readWrite, readAnyDatabase, readWriteAnyDatabase, dbAdmin, dbAdminAnyDatabase, clusterMonitor.
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return [true] Mongodb user role. Examples: read, readWrite, readAnyDatabase, readWriteAnyDatabase, dbAdmin, dbAdminAnyDatabase, clusterMonitor.
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    private MongoUserRoleArgs() {}

    private MongoUserRoleArgs(MongoUserRoleArgs $) {
        this.database = $.database;
        this.role = $.role;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MongoUserRoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MongoUserRoleArgs $;

        public Builder() {
            $ = new MongoUserRoleArgs();
        }

        public Builder(MongoUserRoleArgs defaults) {
            $ = new MongoUserRoleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param database [true] Database on which to apply the role.
         * 
         * **NOTE:** MongoDb users do not support update at the moment. Changing any attribute will result in the user being re-created.
         * 
         * @return builder
         * 
         */
        public Builder database(@Nullable Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database [true] Database on which to apply the role.
         * 
         * **NOTE:** MongoDb users do not support update at the moment. Changing any attribute will result in the user being re-created.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param role [true] Mongodb user role. Examples: read, readWrite, readAnyDatabase, readWriteAnyDatabase, dbAdmin, dbAdminAnyDatabase, clusterMonitor.
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role [true] Mongodb user role. Examples: read, readWrite, readAnyDatabase, readWriteAnyDatabase, dbAdmin, dbAdminAnyDatabase, clusterMonitor.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        public MongoUserRoleArgs build() {
            return $;
        }
    }

}
