// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.autoscaling.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupPolicyScaleInActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final GroupPolicyScaleInActionArgs Empty = new GroupPolicyScaleInActionArgs();

    /**
     * [int] When `amountType == ABSOLUTE`, this is the number of VMs removed in one step. When `amountType == PERCENTAGE`, this is a percentage value, which will be applied to the autoscaling group&#39;s current `targetReplicaCount` in order to derive the number of VMs that will be removed in one step. There will always be at least one VM removed. For SCALE_IN operation new volumes are NOT deleted after the server deletion.
     * 
     */
    @Import(name="amount", required=true)
    private Output<Integer> amount;

    /**
     * @return [int] When `amountType == ABSOLUTE`, this is the number of VMs removed in one step. When `amountType == PERCENTAGE`, this is a percentage value, which will be applied to the autoscaling group&#39;s current `targetReplicaCount` in order to derive the number of VMs that will be removed in one step. There will always be at least one VM removed. For SCALE_IN operation new volumes are NOT deleted after the server deletion.
     * 
     */
    public Output<Integer> amount() {
        return this.amount;
    }

    /**
     * [string] The type for the given amount. Possible values are: `ABSOLUTE`, `PERCENTAGE`.
     * 
     */
    @Import(name="amountType", required=true)
    private Output<String> amountType;

    /**
     * @return [string] The type for the given amount. Possible values are: `ABSOLUTE`, `PERCENTAGE`.
     * 
     */
    public Output<String> amountType() {
        return this.amountType;
    }

    /**
     * [string] Minimum time to pass after this Scaling action has started, until the next Scaling action will be started. Additionally, if a Scaling action is currently in progress, no second Scaling action will be started for the same autoscaling group. Instead, the Metric will be re-evaluated after the current Scaling action is completed (either successfully or with failures). This is validated with a minimum value of 2 minutes and a maximum of 24 hours currently. Default value is 5 minutes if not given. *Note that when you set it to values like 5m the API will automatically transform it in PT5M, so the plan will show you a diff in state that should be ignored.*
     * 
     */
    @Import(name="cooldownPeriod")
    private @Nullable Output<String> cooldownPeriod;

    /**
     * @return [string] Minimum time to pass after this Scaling action has started, until the next Scaling action will be started. Additionally, if a Scaling action is currently in progress, no second Scaling action will be started for the same autoscaling group. Instead, the Metric will be re-evaluated after the current Scaling action is completed (either successfully or with failures). This is validated with a minimum value of 2 minutes and a maximum of 24 hours currently. Default value is 5 minutes if not given. *Note that when you set it to values like 5m the API will automatically transform it in PT5M, so the plan will show you a diff in state that should be ignored.*
     * 
     */
    public Optional<Output<String>> cooldownPeriod() {
        return Optional.ofNullable(this.cooldownPeriod);
    }

    /**
     * [bool] If set to `true`, when deleting a replica during scale in, any attached volume will also be deleted. When set to `false`, all volumes remain in the datacenter and must be deleted manually. Note that every scale-out creates new volumes. When they are not deleted, they will eventually use all of your contracts resource limits. At this point, scaling out would not be possible anymore.
     * 
     */
    @Import(name="deleteVolumes", required=true)
    private Output<Boolean> deleteVolumes;

    /**
     * @return [bool] If set to `true`, when deleting a replica during scale in, any attached volume will also be deleted. When set to `false`, all volumes remain in the datacenter and must be deleted manually. Note that every scale-out creates new volumes. When they are not deleted, they will eventually use all of your contracts resource limits. At this point, scaling out would not be possible anymore.
     * 
     */
    public Output<Boolean> deleteVolumes() {
        return this.deleteVolumes;
    }

    /**
     * [string] The type of the termination policy for the autoscaling group so that a specific pattern is followed for Scaling-In replicas. Default termination policy is `OLDEST_SERVER_FIRST`. Possible values are: `OLDEST_SERVER_FIRST`, `NEWEST_SERVER_FIRST`, `RANDOM`
     * 
     */
    @Import(name="terminationPolicyType")
    private @Nullable Output<String> terminationPolicyType;

    /**
     * @return [string] The type of the termination policy for the autoscaling group so that a specific pattern is followed for Scaling-In replicas. Default termination policy is `OLDEST_SERVER_FIRST`. Possible values are: `OLDEST_SERVER_FIRST`, `NEWEST_SERVER_FIRST`, `RANDOM`
     * 
     */
    public Optional<Output<String>> terminationPolicyType() {
        return Optional.ofNullable(this.terminationPolicyType);
    }

    private GroupPolicyScaleInActionArgs() {}

    private GroupPolicyScaleInActionArgs(GroupPolicyScaleInActionArgs $) {
        this.amount = $.amount;
        this.amountType = $.amountType;
        this.cooldownPeriod = $.cooldownPeriod;
        this.deleteVolumes = $.deleteVolumes;
        this.terminationPolicyType = $.terminationPolicyType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupPolicyScaleInActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupPolicyScaleInActionArgs $;

        public Builder() {
            $ = new GroupPolicyScaleInActionArgs();
        }

        public Builder(GroupPolicyScaleInActionArgs defaults) {
            $ = new GroupPolicyScaleInActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param amount [int] When `amountType == ABSOLUTE`, this is the number of VMs removed in one step. When `amountType == PERCENTAGE`, this is a percentage value, which will be applied to the autoscaling group&#39;s current `targetReplicaCount` in order to derive the number of VMs that will be removed in one step. There will always be at least one VM removed. For SCALE_IN operation new volumes are NOT deleted after the server deletion.
         * 
         * @return builder
         * 
         */
        public Builder amount(Output<Integer> amount) {
            $.amount = amount;
            return this;
        }

        /**
         * @param amount [int] When `amountType == ABSOLUTE`, this is the number of VMs removed in one step. When `amountType == PERCENTAGE`, this is a percentage value, which will be applied to the autoscaling group&#39;s current `targetReplicaCount` in order to derive the number of VMs that will be removed in one step. There will always be at least one VM removed. For SCALE_IN operation new volumes are NOT deleted after the server deletion.
         * 
         * @return builder
         * 
         */
        public Builder amount(Integer amount) {
            return amount(Output.of(amount));
        }

        /**
         * @param amountType [string] The type for the given amount. Possible values are: `ABSOLUTE`, `PERCENTAGE`.
         * 
         * @return builder
         * 
         */
        public Builder amountType(Output<String> amountType) {
            $.amountType = amountType;
            return this;
        }

        /**
         * @param amountType [string] The type for the given amount. Possible values are: `ABSOLUTE`, `PERCENTAGE`.
         * 
         * @return builder
         * 
         */
        public Builder amountType(String amountType) {
            return amountType(Output.of(amountType));
        }

        /**
         * @param cooldownPeriod [string] Minimum time to pass after this Scaling action has started, until the next Scaling action will be started. Additionally, if a Scaling action is currently in progress, no second Scaling action will be started for the same autoscaling group. Instead, the Metric will be re-evaluated after the current Scaling action is completed (either successfully or with failures). This is validated with a minimum value of 2 minutes and a maximum of 24 hours currently. Default value is 5 minutes if not given. *Note that when you set it to values like 5m the API will automatically transform it in PT5M, so the plan will show you a diff in state that should be ignored.*
         * 
         * @return builder
         * 
         */
        public Builder cooldownPeriod(@Nullable Output<String> cooldownPeriod) {
            $.cooldownPeriod = cooldownPeriod;
            return this;
        }

        /**
         * @param cooldownPeriod [string] Minimum time to pass after this Scaling action has started, until the next Scaling action will be started. Additionally, if a Scaling action is currently in progress, no second Scaling action will be started for the same autoscaling group. Instead, the Metric will be re-evaluated after the current Scaling action is completed (either successfully or with failures). This is validated with a minimum value of 2 minutes and a maximum of 24 hours currently. Default value is 5 minutes if not given. *Note that when you set it to values like 5m the API will automatically transform it in PT5M, so the plan will show you a diff in state that should be ignored.*
         * 
         * @return builder
         * 
         */
        public Builder cooldownPeriod(String cooldownPeriod) {
            return cooldownPeriod(Output.of(cooldownPeriod));
        }

        /**
         * @param deleteVolumes [bool] If set to `true`, when deleting a replica during scale in, any attached volume will also be deleted. When set to `false`, all volumes remain in the datacenter and must be deleted manually. Note that every scale-out creates new volumes. When they are not deleted, they will eventually use all of your contracts resource limits. At this point, scaling out would not be possible anymore.
         * 
         * @return builder
         * 
         */
        public Builder deleteVolumes(Output<Boolean> deleteVolumes) {
            $.deleteVolumes = deleteVolumes;
            return this;
        }

        /**
         * @param deleteVolumes [bool] If set to `true`, when deleting a replica during scale in, any attached volume will also be deleted. When set to `false`, all volumes remain in the datacenter and must be deleted manually. Note that every scale-out creates new volumes. When they are not deleted, they will eventually use all of your contracts resource limits. At this point, scaling out would not be possible anymore.
         * 
         * @return builder
         * 
         */
        public Builder deleteVolumes(Boolean deleteVolumes) {
            return deleteVolumes(Output.of(deleteVolumes));
        }

        /**
         * @param terminationPolicyType [string] The type of the termination policy for the autoscaling group so that a specific pattern is followed for Scaling-In replicas. Default termination policy is `OLDEST_SERVER_FIRST`. Possible values are: `OLDEST_SERVER_FIRST`, `NEWEST_SERVER_FIRST`, `RANDOM`
         * 
         * @return builder
         * 
         */
        public Builder terminationPolicyType(@Nullable Output<String> terminationPolicyType) {
            $.terminationPolicyType = terminationPolicyType;
            return this;
        }

        /**
         * @param terminationPolicyType [string] The type of the termination policy for the autoscaling group so that a specific pattern is followed for Scaling-In replicas. Default termination policy is `OLDEST_SERVER_FIRST`. Possible values are: `OLDEST_SERVER_FIRST`, `NEWEST_SERVER_FIRST`, `RANDOM`
         * 
         * @return builder
         * 
         */
        public Builder terminationPolicyType(String terminationPolicyType) {
            return terminationPolicyType(Output.of(terminationPolicyType));
        }

        public GroupPolicyScaleInActionArgs build() {
            if ($.amount == null) {
                throw new MissingRequiredPropertyException("GroupPolicyScaleInActionArgs", "amount");
            }
            if ($.amountType == null) {
                throw new MissingRequiredPropertyException("GroupPolicyScaleInActionArgs", "amountType");
            }
            if ($.deleteVolumes == null) {
                throw new MissingRequiredPropertyException("GroupPolicyScaleInActionArgs", "deleteVolumes");
            }
            return $;
        }
    }

}
