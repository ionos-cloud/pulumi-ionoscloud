// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.k8s.outputs;

import com.ionoscloud.pulumi.ionoscloud.k8s.outputs.GetClustersCluster;
import com.ionoscloud.pulumi.ionoscloud.k8s.outputs.GetClustersFilter;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetClustersResult {
    /**
     * @return list of Kubernetes clusters that match the provided filters. The elements of this list are structurally identical to the `k8s_cluster` datasource, which is limited to retrieving only 1 cluster in a single query.
     * 
     */
    private List<GetClustersCluster> clusters;
    /**
     * @return indicates the number of clusters found and added to the list after the query has been performed with the specified filters.
     * For a full reference of all the attributes returned, check out documentation
     * 
     */
    private Integer entries;
    private @Nullable List<GetClustersFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;

    private GetClustersResult() {}
    /**
     * @return list of Kubernetes clusters that match the provided filters. The elements of this list are structurally identical to the `k8s_cluster` datasource, which is limited to retrieving only 1 cluster in a single query.
     * 
     */
    public List<GetClustersCluster> clusters() {
        return this.clusters;
    }
    /**
     * @return indicates the number of clusters found and added to the list after the query has been performed with the specified filters.
     * For a full reference of all the attributes returned, check out documentation
     * 
     */
    public Integer entries() {
        return this.entries;
    }
    public List<GetClustersFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClustersResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetClustersCluster> clusters;
        private Integer entries;
        private @Nullable List<GetClustersFilter> filters;
        private String id;
        public Builder() {}
        public Builder(GetClustersResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusters = defaults.clusters;
    	      this.entries = defaults.entries;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
        }

        @CustomType.Setter
        public Builder clusters(List<GetClustersCluster> clusters) {
            if (clusters == null) {
              throw new MissingRequiredPropertyException("GetClustersResult", "clusters");
            }
            this.clusters = clusters;
            return this;
        }
        public Builder clusters(GetClustersCluster... clusters) {
            return clusters(List.of(clusters));
        }
        @CustomType.Setter
        public Builder entries(Integer entries) {
            if (entries == null) {
              throw new MissingRequiredPropertyException("GetClustersResult", "entries");
            }
            this.entries = entries;
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetClustersFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetClustersFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetClustersResult", "id");
            }
            this.id = id;
            return this;
        }
        public GetClustersResult build() {
            final var _resultValue = new GetClustersResult();
            _resultValue.clusters = clusters;
            _resultValue.entries = entries;
            _resultValue.filters = filters;
            _resultValue.id = id;
            return _resultValue;
        }
    }
}
