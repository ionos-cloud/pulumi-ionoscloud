// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.dbaas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetMongoUserRole {
    /**
     * @return [true] Database on which to apply the role.
     * 
     * **NOTE:** MongoDb users do not support update at the moment. Changing any attribute will result in the user being re-created.
     * 
     */
    private String database;
    /**
     * @return [true] Mongodb user role. Examples: read, readWrite, readAnyDatabase, readWriteAnyDatabase, dbAdmin, dbAdminAnyDatabase, clusterMonitor and enableSharding.
     * 
     */
    private String role;

    private GetMongoUserRole() {}
    /**
     * @return [true] Database on which to apply the role.
     * 
     * **NOTE:** MongoDb users do not support update at the moment. Changing any attribute will result in the user being re-created.
     * 
     */
    public String database() {
        return this.database;
    }
    /**
     * @return [true] Mongodb user role. Examples: read, readWrite, readAnyDatabase, readWriteAnyDatabase, dbAdmin, dbAdminAnyDatabase, clusterMonitor and enableSharding.
     * 
     */
    public String role() {
        return this.role;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMongoUserRole defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String database;
        private String role;
        public Builder() {}
        public Builder(GetMongoUserRole defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.database = defaults.database;
    	      this.role = defaults.role;
        }

        @CustomType.Setter
        public Builder database(String database) {
            if (database == null) {
              throw new MissingRequiredPropertyException("GetMongoUserRole", "database");
            }
            this.database = database;
            return this;
        }
        @CustomType.Setter
        public Builder role(String role) {
            if (role == null) {
              throw new MissingRequiredPropertyException("GetMongoUserRole", "role");
            }
            this.role = role;
            return this;
        }
        public GetMongoUserRole build() {
            final var _resultValue = new GetMongoUserRole();
            _resultValue.database = database;
            _resultValue.role = role;
            return _resultValue;
        }
    }
}
