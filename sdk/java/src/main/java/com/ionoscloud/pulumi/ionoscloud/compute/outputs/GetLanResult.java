// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.compute.outputs;

import com.ionoscloud.pulumi.ionoscloud.compute.outputs.GetLanIpFailover;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetLanResult {
    /**
     * @return The ID of lan&#39;s Virtual Data Center.
     * 
     */
    private String datacenterId;
    /**
     * @return The id of the LAN.
     * 
     */
    private String id;
    /**
     * @return list of
     * 
     */
    private List<GetLanIpFailover> ipFailovers;
    /**
     * @return For public LANs this property is null, for private LANs it contains the private IPv4 CIDR range.
     * 
     */
    private String ipv4CidrBlock;
    /**
     * @return Contains the LAN&#39;s /64 IPv6 CIDR block if this LAN is IPv6 enabled.
     * 
     */
    private String ipv6CidrBlock;
    /**
     * @return The name of the LAN.
     * 
     */
    private String name;
    /**
     * @return The unique id of a `ionoscloud.compute.Crossconnect` resource, in order.
     * 
     */
    private String pcc;
    /**
     * @return Indicates if the LAN faces the public Internet (true) or not (false).
     * 
     */
    private Boolean public_;

    private GetLanResult() {}
    /**
     * @return The ID of lan&#39;s Virtual Data Center.
     * 
     */
    public String datacenterId() {
        return this.datacenterId;
    }
    /**
     * @return The id of the LAN.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return list of
     * 
     */
    public List<GetLanIpFailover> ipFailovers() {
        return this.ipFailovers;
    }
    /**
     * @return For public LANs this property is null, for private LANs it contains the private IPv4 CIDR range.
     * 
     */
    public String ipv4CidrBlock() {
        return this.ipv4CidrBlock;
    }
    /**
     * @return Contains the LAN&#39;s /64 IPv6 CIDR block if this LAN is IPv6 enabled.
     * 
     */
    public String ipv6CidrBlock() {
        return this.ipv6CidrBlock;
    }
    /**
     * @return The name of the LAN.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The unique id of a `ionoscloud.compute.Crossconnect` resource, in order.
     * 
     */
    public String pcc() {
        return this.pcc;
    }
    /**
     * @return Indicates if the LAN faces the public Internet (true) or not (false).
     * 
     */
    public Boolean public_() {
        return this.public_;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLanResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String datacenterId;
        private String id;
        private List<GetLanIpFailover> ipFailovers;
        private String ipv4CidrBlock;
        private String ipv6CidrBlock;
        private String name;
        private String pcc;
        private Boolean public_;
        public Builder() {}
        public Builder(GetLanResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datacenterId = defaults.datacenterId;
    	      this.id = defaults.id;
    	      this.ipFailovers = defaults.ipFailovers;
    	      this.ipv4CidrBlock = defaults.ipv4CidrBlock;
    	      this.ipv6CidrBlock = defaults.ipv6CidrBlock;
    	      this.name = defaults.name;
    	      this.pcc = defaults.pcc;
    	      this.public_ = defaults.public_;
        }

        @CustomType.Setter
        public Builder datacenterId(String datacenterId) {
            if (datacenterId == null) {
              throw new MissingRequiredPropertyException("GetLanResult", "datacenterId");
            }
            this.datacenterId = datacenterId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetLanResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipFailovers(List<GetLanIpFailover> ipFailovers) {
            if (ipFailovers == null) {
              throw new MissingRequiredPropertyException("GetLanResult", "ipFailovers");
            }
            this.ipFailovers = ipFailovers;
            return this;
        }
        public Builder ipFailovers(GetLanIpFailover... ipFailovers) {
            return ipFailovers(List.of(ipFailovers));
        }
        @CustomType.Setter
        public Builder ipv4CidrBlock(String ipv4CidrBlock) {
            if (ipv4CidrBlock == null) {
              throw new MissingRequiredPropertyException("GetLanResult", "ipv4CidrBlock");
            }
            this.ipv4CidrBlock = ipv4CidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6CidrBlock(String ipv6CidrBlock) {
            if (ipv6CidrBlock == null) {
              throw new MissingRequiredPropertyException("GetLanResult", "ipv6CidrBlock");
            }
            this.ipv6CidrBlock = ipv6CidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetLanResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder pcc(String pcc) {
            if (pcc == null) {
              throw new MissingRequiredPropertyException("GetLanResult", "pcc");
            }
            this.pcc = pcc;
            return this;
        }
        @CustomType.Setter("public")
        public Builder public_(Boolean public_) {
            if (public_ == null) {
              throw new MissingRequiredPropertyException("GetLanResult", "public_");
            }
            this.public_ = public_;
            return this;
        }
        public GetLanResult build() {
            final var _resultValue = new GetLanResult();
            _resultValue.datacenterId = datacenterId;
            _resultValue.id = id;
            _resultValue.ipFailovers = ipFailovers;
            _resultValue.ipv4CidrBlock = ipv4CidrBlock;
            _resultValue.ipv6CidrBlock = ipv6CidrBlock;
            _resultValue.name = name;
            _resultValue.pcc = pcc;
            _resultValue.public_ = public_;
            return _resultValue;
        }
    }
}
