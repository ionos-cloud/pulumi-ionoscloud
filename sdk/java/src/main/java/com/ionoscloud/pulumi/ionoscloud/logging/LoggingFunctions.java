// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.logging;

import com.ionoscloud.pulumi.ionoscloud.Utilities;
import com.ionoscloud.pulumi.ionoscloud.logging.inputs.GetPipelineArgs;
import com.ionoscloud.pulumi.ionoscloud.logging.inputs.GetPipelinePlainArgs;
import com.ionoscloud.pulumi.ionoscloud.logging.outputs.GetPipelineResult;
import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import java.util.concurrent.CompletableFuture;

public final class LoggingFunctions {
    /**
     * The **Logging pipeline** datasource can be used to search for and return an existing Logging pipeline.
     * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
     * 
     * &gt; ⚠️  Only tokens are accepted for authorization in the **logging_pipeline** data source. Please ensure you are using tokens as other methods will not be valid.
     * 
     * ## Example Usage
     * 
     * ### By ID
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.logging.LoggingFunctions;
     * import com.pulumi.ionoscloud.logging.inputs.GetPipelineArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LoggingFunctions.getPipeline(GetPipelineArgs.builder()
     *             .location("de/txl")
     *             .id("pipeline_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By name
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.logging.LoggingFunctions;
     * import com.pulumi.ionoscloud.logging.inputs.GetPipelineArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LoggingFunctions.getPipeline(GetPipelineArgs.builder()
     *             .location("de/txl")
     *             .name("pipeline_name")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPipelineResult> getPipeline() {
        return getPipeline(GetPipelineArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The **Logging pipeline** datasource can be used to search for and return an existing Logging pipeline.
     * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
     * 
     * &gt; ⚠️  Only tokens are accepted for authorization in the **logging_pipeline** data source. Please ensure you are using tokens as other methods will not be valid.
     * 
     * ## Example Usage
     * 
     * ### By ID
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.logging.LoggingFunctions;
     * import com.pulumi.ionoscloud.logging.inputs.GetPipelineArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LoggingFunctions.getPipeline(GetPipelineArgs.builder()
     *             .location("de/txl")
     *             .id("pipeline_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By name
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.logging.LoggingFunctions;
     * import com.pulumi.ionoscloud.logging.inputs.GetPipelineArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LoggingFunctions.getPipeline(GetPipelineArgs.builder()
     *             .location("de/txl")
     *             .name("pipeline_name")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPipelineResult> getPipelinePlain() {
        return getPipelinePlain(GetPipelinePlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * The **Logging pipeline** datasource can be used to search for and return an existing Logging pipeline.
     * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
     * 
     * &gt; ⚠️  Only tokens are accepted for authorization in the **logging_pipeline** data source. Please ensure you are using tokens as other methods will not be valid.
     * 
     * ## Example Usage
     * 
     * ### By ID
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.logging.LoggingFunctions;
     * import com.pulumi.ionoscloud.logging.inputs.GetPipelineArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LoggingFunctions.getPipeline(GetPipelineArgs.builder()
     *             .location("de/txl")
     *             .id("pipeline_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By name
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.logging.LoggingFunctions;
     * import com.pulumi.ionoscloud.logging.inputs.GetPipelineArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LoggingFunctions.getPipeline(GetPipelineArgs.builder()
     *             .location("de/txl")
     *             .name("pipeline_name")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPipelineResult> getPipeline(GetPipelineArgs args) {
        return getPipeline(args, InvokeOptions.Empty);
    }
    /**
     * The **Logging pipeline** datasource can be used to search for and return an existing Logging pipeline.
     * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
     * 
     * &gt; ⚠️  Only tokens are accepted for authorization in the **logging_pipeline** data source. Please ensure you are using tokens as other methods will not be valid.
     * 
     * ## Example Usage
     * 
     * ### By ID
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.logging.LoggingFunctions;
     * import com.pulumi.ionoscloud.logging.inputs.GetPipelineArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LoggingFunctions.getPipeline(GetPipelineArgs.builder()
     *             .location("de/txl")
     *             .id("pipeline_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By name
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.logging.LoggingFunctions;
     * import com.pulumi.ionoscloud.logging.inputs.GetPipelineArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LoggingFunctions.getPipeline(GetPipelineArgs.builder()
     *             .location("de/txl")
     *             .name("pipeline_name")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPipelineResult> getPipelinePlain(GetPipelinePlainArgs args) {
        return getPipelinePlain(args, InvokeOptions.Empty);
    }
    /**
     * The **Logging pipeline** datasource can be used to search for and return an existing Logging pipeline.
     * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
     * 
     * &gt; ⚠️  Only tokens are accepted for authorization in the **logging_pipeline** data source. Please ensure you are using tokens as other methods will not be valid.
     * 
     * ## Example Usage
     * 
     * ### By ID
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.logging.LoggingFunctions;
     * import com.pulumi.ionoscloud.logging.inputs.GetPipelineArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LoggingFunctions.getPipeline(GetPipelineArgs.builder()
     *             .location("de/txl")
     *             .id("pipeline_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By name
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.logging.LoggingFunctions;
     * import com.pulumi.ionoscloud.logging.inputs.GetPipelineArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LoggingFunctions.getPipeline(GetPipelineArgs.builder()
     *             .location("de/txl")
     *             .name("pipeline_name")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPipelineResult> getPipeline(GetPipelineArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("ionoscloud:logging/getPipeline:getPipeline", TypeShape.of(GetPipelineResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The **Logging pipeline** datasource can be used to search for and return an existing Logging pipeline.
     * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
     * 
     * &gt; ⚠️  Only tokens are accepted for authorization in the **logging_pipeline** data source. Please ensure you are using tokens as other methods will not be valid.
     * 
     * ## Example Usage
     * 
     * ### By ID
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.logging.LoggingFunctions;
     * import com.pulumi.ionoscloud.logging.inputs.GetPipelineArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LoggingFunctions.getPipeline(GetPipelineArgs.builder()
     *             .location("de/txl")
     *             .id("pipeline_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By name
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.logging.LoggingFunctions;
     * import com.pulumi.ionoscloud.logging.inputs.GetPipelineArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LoggingFunctions.getPipeline(GetPipelineArgs.builder()
     *             .location("de/txl")
     *             .name("pipeline_name")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPipelineResult> getPipeline(GetPipelineArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("ionoscloud:logging/getPipeline:getPipeline", TypeShape.of(GetPipelineResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The **Logging pipeline** datasource can be used to search for and return an existing Logging pipeline.
     * If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
     * 
     * &gt; ⚠️  Only tokens are accepted for authorization in the **logging_pipeline** data source. Please ensure you are using tokens as other methods will not be valid.
     * 
     * ## Example Usage
     * 
     * ### By ID
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.logging.LoggingFunctions;
     * import com.pulumi.ionoscloud.logging.inputs.GetPipelineArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LoggingFunctions.getPipeline(GetPipelineArgs.builder()
     *             .location("de/txl")
     *             .id("pipeline_id")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### By name
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.ionoscloud.logging.LoggingFunctions;
     * import com.pulumi.ionoscloud.logging.inputs.GetPipelineArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = LoggingFunctions.getPipeline(GetPipelineArgs.builder()
     *             .location("de/txl")
     *             .name("pipeline_name")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPipelineResult> getPipelinePlain(GetPipelinePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("ionoscloud:logging/getPipeline:getPipeline", TypeShape.of(GetPipelineResult.class), args, Utilities.withVersion(options));
    }
}
