// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ShareArgs extends com.pulumi.resources.ResourceArgs {

    public static final ShareArgs Empty = new ShareArgs();

    /**
     * [Boolean] The group has permission to edit privileges on this resource.
     * 
     */
    @Import(name="editPrivilege")
    private @Nullable Output<Boolean> editPrivilege;

    /**
     * @return [Boolean] The group has permission to edit privileges on this resource.
     * 
     */
    public Optional<Output<Boolean>> editPrivilege() {
        return Optional.ofNullable(this.editPrivilege);
    }

    /**
     * [string] The ID of the specific group containing the resource to update.
     * 
     */
    @Import(name="groupId", required=true)
    private Output<String> groupId;

    /**
     * @return [string] The ID of the specific group containing the resource to update.
     * 
     */
    public Output<String> groupId() {
        return this.groupId;
    }

    /**
     * [string] The ID of the specific resource to update.
     * 
     */
    @Import(name="resourceId", required=true)
    private Output<String> resourceId;

    /**
     * @return [string] The ID of the specific resource to update.
     * 
     */
    public Output<String> resourceId() {
        return this.resourceId;
    }

    /**
     * [Boolean] The group has permission to share this resource.
     * 
     * ⚠️ **Note:** There is a limitation due to which the creation of several shares at the same time leads
     * to an error. To avoid this, `parallelism=1` can be used when running `pulumi up` command in order
     * to create the resources in a sequential manner. Another solution involves the usage of `depends_on`
     * attributes inside the `ionoscloud.compute.Share` resource to enforce the sequential creation of the shares.
     * 
     */
    @Import(name="sharePrivilege")
    private @Nullable Output<Boolean> sharePrivilege;

    /**
     * @return [Boolean] The group has permission to share this resource.
     * 
     * ⚠️ **Note:** There is a limitation due to which the creation of several shares at the same time leads
     * to an error. To avoid this, `parallelism=1` can be used when running `pulumi up` command in order
     * to create the resources in a sequential manner. Another solution involves the usage of `depends_on`
     * attributes inside the `ionoscloud.compute.Share` resource to enforce the sequential creation of the shares.
     * 
     */
    public Optional<Output<Boolean>> sharePrivilege() {
        return Optional.ofNullable(this.sharePrivilege);
    }

    private ShareArgs() {}

    private ShareArgs(ShareArgs $) {
        this.editPrivilege = $.editPrivilege;
        this.groupId = $.groupId;
        this.resourceId = $.resourceId;
        this.sharePrivilege = $.sharePrivilege;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ShareArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ShareArgs $;

        public Builder() {
            $ = new ShareArgs();
        }

        public Builder(ShareArgs defaults) {
            $ = new ShareArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param editPrivilege [Boolean] The group has permission to edit privileges on this resource.
         * 
         * @return builder
         * 
         */
        public Builder editPrivilege(@Nullable Output<Boolean> editPrivilege) {
            $.editPrivilege = editPrivilege;
            return this;
        }

        /**
         * @param editPrivilege [Boolean] The group has permission to edit privileges on this resource.
         * 
         * @return builder
         * 
         */
        public Builder editPrivilege(Boolean editPrivilege) {
            return editPrivilege(Output.of(editPrivilege));
        }

        /**
         * @param groupId [string] The ID of the specific group containing the resource to update.
         * 
         * @return builder
         * 
         */
        public Builder groupId(Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId [string] The ID of the specific group containing the resource to update.
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param resourceId [string] The ID of the specific resource to update.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId [string] The ID of the specific resource to update.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        /**
         * @param sharePrivilege [Boolean] The group has permission to share this resource.
         * 
         * ⚠️ **Note:** There is a limitation due to which the creation of several shares at the same time leads
         * to an error. To avoid this, `parallelism=1` can be used when running `pulumi up` command in order
         * to create the resources in a sequential manner. Another solution involves the usage of `depends_on`
         * attributes inside the `ionoscloud.compute.Share` resource to enforce the sequential creation of the shares.
         * 
         * @return builder
         * 
         */
        public Builder sharePrivilege(@Nullable Output<Boolean> sharePrivilege) {
            $.sharePrivilege = sharePrivilege;
            return this;
        }

        /**
         * @param sharePrivilege [Boolean] The group has permission to share this resource.
         * 
         * ⚠️ **Note:** There is a limitation due to which the creation of several shares at the same time leads
         * to an error. To avoid this, `parallelism=1` can be used when running `pulumi up` command in order
         * to create the resources in a sequential manner. Another solution involves the usage of `depends_on`
         * attributes inside the `ionoscloud.compute.Share` resource to enforce the sequential creation of the shares.
         * 
         * @return builder
         * 
         */
        public Builder sharePrivilege(Boolean sharePrivilege) {
            return sharePrivilege(Output.of(sharePrivilege));
        }

        public ShareArgs build() {
            if ($.groupId == null) {
                throw new MissingRequiredPropertyException("ShareArgs", "groupId");
            }
            if ($.resourceId == null) {
                throw new MissingRequiredPropertyException("ShareArgs", "resourceId");
            }
            return $;
        }
    }

}
