// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.autoscaling.outputs;

import com.ionoscloud.pulumi.ionoscloud.autoscaling.outputs.GetGroupReplicaConfigurationNic;
import com.ionoscloud.pulumi.ionoscloud.autoscaling.outputs.GetGroupReplicaConfigurationVolume;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGroupReplicaConfiguration {
    /**
     * @return The zone where the VMs are created using this configuration.
     * 
     */
    private String availabilityZone;
    /**
     * @return The total number of cores for the VMs.
     * 
     */
    private Integer cores;
    /**
     * @return The zone where the VMs are created using this configuration.
     * 
     */
    private String cpuFamily;
    /**
     * @return List of NICs associated with this Replica.
     * 
     */
    private List<GetGroupReplicaConfigurationNic> nics;
    /**
     * @return The amount of memory for the VMs in MB, e.g. 2048. Size must be specified in multiples of 256 MB with a minimum of 256 MB; however, if you set ramHotPlug to TRUE then you must use a minimum of 1024 MB. If you set the RAM size more than 240GB, then ramHotPlug will be set to FALSE and can not be set to TRUE unless RAM size not set to less than 240GB.
     * 
     */
    private Integer ram;
    /**
     * @return List of volumes associated with this Replica. Only a single volume is currently supported.
     * 
     */
    private List<GetGroupReplicaConfigurationVolume> volumes;

    private GetGroupReplicaConfiguration() {}
    /**
     * @return The zone where the VMs are created using this configuration.
     * 
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }
    /**
     * @return The total number of cores for the VMs.
     * 
     */
    public Integer cores() {
        return this.cores;
    }
    /**
     * @return The zone where the VMs are created using this configuration.
     * 
     */
    public String cpuFamily() {
        return this.cpuFamily;
    }
    /**
     * @return List of NICs associated with this Replica.
     * 
     */
    public List<GetGroupReplicaConfigurationNic> nics() {
        return this.nics;
    }
    /**
     * @return The amount of memory for the VMs in MB, e.g. 2048. Size must be specified in multiples of 256 MB with a minimum of 256 MB; however, if you set ramHotPlug to TRUE then you must use a minimum of 1024 MB. If you set the RAM size more than 240GB, then ramHotPlug will be set to FALSE and can not be set to TRUE unless RAM size not set to less than 240GB.
     * 
     */
    public Integer ram() {
        return this.ram;
    }
    /**
     * @return List of volumes associated with this Replica. Only a single volume is currently supported.
     * 
     */
    public List<GetGroupReplicaConfigurationVolume> volumes() {
        return this.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGroupReplicaConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String availabilityZone;
        private Integer cores;
        private String cpuFamily;
        private List<GetGroupReplicaConfigurationNic> nics;
        private Integer ram;
        private List<GetGroupReplicaConfigurationVolume> volumes;
        public Builder() {}
        public Builder(GetGroupReplicaConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.cores = defaults.cores;
    	      this.cpuFamily = defaults.cpuFamily;
    	      this.nics = defaults.nics;
    	      this.ram = defaults.ram;
    	      this.volumes = defaults.volumes;
        }

        @CustomType.Setter
        public Builder availabilityZone(String availabilityZone) {
            if (availabilityZone == null) {
              throw new MissingRequiredPropertyException("GetGroupReplicaConfiguration", "availabilityZone");
            }
            this.availabilityZone = availabilityZone;
            return this;
        }
        @CustomType.Setter
        public Builder cores(Integer cores) {
            if (cores == null) {
              throw new MissingRequiredPropertyException("GetGroupReplicaConfiguration", "cores");
            }
            this.cores = cores;
            return this;
        }
        @CustomType.Setter
        public Builder cpuFamily(String cpuFamily) {
            if (cpuFamily == null) {
              throw new MissingRequiredPropertyException("GetGroupReplicaConfiguration", "cpuFamily");
            }
            this.cpuFamily = cpuFamily;
            return this;
        }
        @CustomType.Setter
        public Builder nics(List<GetGroupReplicaConfigurationNic> nics) {
            if (nics == null) {
              throw new MissingRequiredPropertyException("GetGroupReplicaConfiguration", "nics");
            }
            this.nics = nics;
            return this;
        }
        public Builder nics(GetGroupReplicaConfigurationNic... nics) {
            return nics(List.of(nics));
        }
        @CustomType.Setter
        public Builder ram(Integer ram) {
            if (ram == null) {
              throw new MissingRequiredPropertyException("GetGroupReplicaConfiguration", "ram");
            }
            this.ram = ram;
            return this;
        }
        @CustomType.Setter
        public Builder volumes(List<GetGroupReplicaConfigurationVolume> volumes) {
            if (volumes == null) {
              throw new MissingRequiredPropertyException("GetGroupReplicaConfiguration", "volumes");
            }
            this.volumes = volumes;
            return this;
        }
        public Builder volumes(GetGroupReplicaConfigurationVolume... volumes) {
            return volumes(List.of(volumes));
        }
        public GetGroupReplicaConfiguration build() {
            final var _resultValue = new GetGroupReplicaConfiguration();
            _resultValue.availabilityZone = availabilityZone;
            _resultValue.cores = cores;
            _resultValue.cpuFamily = cpuFamily;
            _resultValue.nics = nics;
            _resultValue.ram = ram;
            _resultValue.volumes = volumes;
            return _resultValue;
        }
    }
}
