// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.dbaas.outputs;

import com.ionoscloud.pulumi.ionoscloud.dbaas.outputs.GetPSQLClusterConnection;
import com.ionoscloud.pulumi.ionoscloud.dbaas.outputs.GetPSQLClusterConnectionPooler;
import com.ionoscloud.pulumi.ionoscloud.dbaas.outputs.GetPSQLClusterFromBackup;
import com.ionoscloud.pulumi.ionoscloud.dbaas.outputs.GetPSQLClusterMaintenanceWindow;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetPSQLClusterResult {
    /**
     * @return The IONOS Object Storage location where the backups will be stored.
     * 
     */
    private String backupLocation;
    /**
     * @return Details about the connection pooler.
     * 
     */
    private List<GetPSQLClusterConnectionPooler> connectionPoolers;
    /**
     * @return Details about the network connection for your cluster.
     * 
     */
    private List<GetPSQLClusterConnection> connections;
    /**
     * @return The number of CPU cores per replica.
     * 
     */
    private Integer cores;
    /**
     * @return The friendly name of your cluster.
     * 
     */
    private String displayName;
    /**
     * @return The DNS name pointing to your cluster.
     * 
     */
    private String dnsName;
    /**
     * @return The unique ID of the backup you want to restore.
     * 
     */
    private List<GetPSQLClusterFromBackup> fromBackups;
    private String id;
    /**
     * @return The total number of instances in the cluster (one master and n-1 standbys)
     * 
     */
    private Integer instances;
    /**
     * @return The physical location where the cluster will be created. This will be where all of your instances live.
     * 
     */
    private String location;
    /**
     * @return A weekly 4 hour-long window, during which maintenance might occur
     * 
     */
    private List<GetPSQLClusterMaintenanceWindow> maintenanceWindows;
    /**
     * @return The PostgreSQL version of your cluster.
     * 
     */
    private String postgresVersion;
    /**
     * @return The amount of memory per instance in megabytes.
     * 
     */
    private Integer ram;
    /**
     * @return The amount of storage per instance in MB.
     * 
     */
    private Integer storageSize;
    /**
     * @return The storage type used in your cluster.
     * 
     */
    private String storageType;
    /**
     * @return Represents different modes of replication.
     * 
     */
    private String synchronizationMode;

    private GetPSQLClusterResult() {}
    /**
     * @return The IONOS Object Storage location where the backups will be stored.
     * 
     */
    public String backupLocation() {
        return this.backupLocation;
    }
    /**
     * @return Details about the connection pooler.
     * 
     */
    public List<GetPSQLClusterConnectionPooler> connectionPoolers() {
        return this.connectionPoolers;
    }
    /**
     * @return Details about the network connection for your cluster.
     * 
     */
    public List<GetPSQLClusterConnection> connections() {
        return this.connections;
    }
    /**
     * @return The number of CPU cores per replica.
     * 
     */
    public Integer cores() {
        return this.cores;
    }
    /**
     * @return The friendly name of your cluster.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The DNS name pointing to your cluster.
     * 
     */
    public String dnsName() {
        return this.dnsName;
    }
    /**
     * @return The unique ID of the backup you want to restore.
     * 
     */
    public List<GetPSQLClusterFromBackup> fromBackups() {
        return this.fromBackups;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return The total number of instances in the cluster (one master and n-1 standbys)
     * 
     */
    public Integer instances() {
        return this.instances;
    }
    /**
     * @return The physical location where the cluster will be created. This will be where all of your instances live.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return A weekly 4 hour-long window, during which maintenance might occur
     * 
     */
    public List<GetPSQLClusterMaintenanceWindow> maintenanceWindows() {
        return this.maintenanceWindows;
    }
    /**
     * @return The PostgreSQL version of your cluster.
     * 
     */
    public String postgresVersion() {
        return this.postgresVersion;
    }
    /**
     * @return The amount of memory per instance in megabytes.
     * 
     */
    public Integer ram() {
        return this.ram;
    }
    /**
     * @return The amount of storage per instance in MB.
     * 
     */
    public Integer storageSize() {
        return this.storageSize;
    }
    /**
     * @return The storage type used in your cluster.
     * 
     */
    public String storageType() {
        return this.storageType;
    }
    /**
     * @return Represents different modes of replication.
     * 
     */
    public String synchronizationMode() {
        return this.synchronizationMode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPSQLClusterResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backupLocation;
        private List<GetPSQLClusterConnectionPooler> connectionPoolers;
        private List<GetPSQLClusterConnection> connections;
        private Integer cores;
        private String displayName;
        private String dnsName;
        private List<GetPSQLClusterFromBackup> fromBackups;
        private String id;
        private Integer instances;
        private String location;
        private List<GetPSQLClusterMaintenanceWindow> maintenanceWindows;
        private String postgresVersion;
        private Integer ram;
        private Integer storageSize;
        private String storageType;
        private String synchronizationMode;
        public Builder() {}
        public Builder(GetPSQLClusterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupLocation = defaults.backupLocation;
    	      this.connectionPoolers = defaults.connectionPoolers;
    	      this.connections = defaults.connections;
    	      this.cores = defaults.cores;
    	      this.displayName = defaults.displayName;
    	      this.dnsName = defaults.dnsName;
    	      this.fromBackups = defaults.fromBackups;
    	      this.id = defaults.id;
    	      this.instances = defaults.instances;
    	      this.location = defaults.location;
    	      this.maintenanceWindows = defaults.maintenanceWindows;
    	      this.postgresVersion = defaults.postgresVersion;
    	      this.ram = defaults.ram;
    	      this.storageSize = defaults.storageSize;
    	      this.storageType = defaults.storageType;
    	      this.synchronizationMode = defaults.synchronizationMode;
        }

        @CustomType.Setter
        public Builder backupLocation(String backupLocation) {
            if (backupLocation == null) {
              throw new MissingRequiredPropertyException("GetPSQLClusterResult", "backupLocation");
            }
            this.backupLocation = backupLocation;
            return this;
        }
        @CustomType.Setter
        public Builder connectionPoolers(List<GetPSQLClusterConnectionPooler> connectionPoolers) {
            if (connectionPoolers == null) {
              throw new MissingRequiredPropertyException("GetPSQLClusterResult", "connectionPoolers");
            }
            this.connectionPoolers = connectionPoolers;
            return this;
        }
        public Builder connectionPoolers(GetPSQLClusterConnectionPooler... connectionPoolers) {
            return connectionPoolers(List.of(connectionPoolers));
        }
        @CustomType.Setter
        public Builder connections(List<GetPSQLClusterConnection> connections) {
            if (connections == null) {
              throw new MissingRequiredPropertyException("GetPSQLClusterResult", "connections");
            }
            this.connections = connections;
            return this;
        }
        public Builder connections(GetPSQLClusterConnection... connections) {
            return connections(List.of(connections));
        }
        @CustomType.Setter
        public Builder cores(Integer cores) {
            if (cores == null) {
              throw new MissingRequiredPropertyException("GetPSQLClusterResult", "cores");
            }
            this.cores = cores;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetPSQLClusterResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder dnsName(String dnsName) {
            if (dnsName == null) {
              throw new MissingRequiredPropertyException("GetPSQLClusterResult", "dnsName");
            }
            this.dnsName = dnsName;
            return this;
        }
        @CustomType.Setter
        public Builder fromBackups(List<GetPSQLClusterFromBackup> fromBackups) {
            if (fromBackups == null) {
              throw new MissingRequiredPropertyException("GetPSQLClusterResult", "fromBackups");
            }
            this.fromBackups = fromBackups;
            return this;
        }
        public Builder fromBackups(GetPSQLClusterFromBackup... fromBackups) {
            return fromBackups(List.of(fromBackups));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPSQLClusterResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instances(Integer instances) {
            if (instances == null) {
              throw new MissingRequiredPropertyException("GetPSQLClusterResult", "instances");
            }
            this.instances = instances;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetPSQLClusterResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceWindows(List<GetPSQLClusterMaintenanceWindow> maintenanceWindows) {
            if (maintenanceWindows == null) {
              throw new MissingRequiredPropertyException("GetPSQLClusterResult", "maintenanceWindows");
            }
            this.maintenanceWindows = maintenanceWindows;
            return this;
        }
        public Builder maintenanceWindows(GetPSQLClusterMaintenanceWindow... maintenanceWindows) {
            return maintenanceWindows(List.of(maintenanceWindows));
        }
        @CustomType.Setter
        public Builder postgresVersion(String postgresVersion) {
            if (postgresVersion == null) {
              throw new MissingRequiredPropertyException("GetPSQLClusterResult", "postgresVersion");
            }
            this.postgresVersion = postgresVersion;
            return this;
        }
        @CustomType.Setter
        public Builder ram(Integer ram) {
            if (ram == null) {
              throw new MissingRequiredPropertyException("GetPSQLClusterResult", "ram");
            }
            this.ram = ram;
            return this;
        }
        @CustomType.Setter
        public Builder storageSize(Integer storageSize) {
            if (storageSize == null) {
              throw new MissingRequiredPropertyException("GetPSQLClusterResult", "storageSize");
            }
            this.storageSize = storageSize;
            return this;
        }
        @CustomType.Setter
        public Builder storageType(String storageType) {
            if (storageType == null) {
              throw new MissingRequiredPropertyException("GetPSQLClusterResult", "storageType");
            }
            this.storageType = storageType;
            return this;
        }
        @CustomType.Setter
        public Builder synchronizationMode(String synchronizationMode) {
            if (synchronizationMode == null) {
              throw new MissingRequiredPropertyException("GetPSQLClusterResult", "synchronizationMode");
            }
            this.synchronizationMode = synchronizationMode;
            return this;
        }
        public GetPSQLClusterResult build() {
            final var _resultValue = new GetPSQLClusterResult();
            _resultValue.backupLocation = backupLocation;
            _resultValue.connectionPoolers = connectionPoolers;
            _resultValue.connections = connections;
            _resultValue.cores = cores;
            _resultValue.displayName = displayName;
            _resultValue.dnsName = dnsName;
            _resultValue.fromBackups = fromBackups;
            _resultValue.id = id;
            _resultValue.instances = instances;
            _resultValue.location = location;
            _resultValue.maintenanceWindows = maintenanceWindows;
            _resultValue.postgresVersion = postgresVersion;
            _resultValue.ram = ram;
            _resultValue.storageSize = storageSize;
            _resultValue.storageType = storageType;
            _resultValue.synchronizationMode = synchronizationMode;
            return _resultValue;
        }
    }
}
