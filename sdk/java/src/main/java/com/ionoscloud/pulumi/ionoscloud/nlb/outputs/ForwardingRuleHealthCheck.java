// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.nlb.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ForwardingRuleHealthCheck {
    /**
     * @return [int] ClientTimeout is expressed in milliseconds. This inactivity timeout applies when the client is expected to acknowledge or send data. If unset the default of 50 seconds will be used.
     * 
     */
    private @Nullable Integer clientTimeout;
    /**
     * @return [int] It specifies the maximum time (in milliseconds) to wait for a connection attempt to a target VM to succeed. If unset, the default of 5 seconds will be used.
     * 
     */
    private @Nullable Integer connectTimeout;
    /**
     * @return [int] Retries specifies the number of retries to perform on a target VM after a connection failure. If unset, the default value of 3 will be used.
     * 
     */
    private @Nullable Integer retries;
    /**
     * @return [int] TargetTimeout specifies the maximum inactivity time (in milliseconds) on the target VM side. If unset, the default of 50 seconds will be used.
     * 
     */
    private @Nullable Integer targetTimeout;

    private ForwardingRuleHealthCheck() {}
    /**
     * @return [int] ClientTimeout is expressed in milliseconds. This inactivity timeout applies when the client is expected to acknowledge or send data. If unset the default of 50 seconds will be used.
     * 
     */
    public Optional<Integer> clientTimeout() {
        return Optional.ofNullable(this.clientTimeout);
    }
    /**
     * @return [int] It specifies the maximum time (in milliseconds) to wait for a connection attempt to a target VM to succeed. If unset, the default of 5 seconds will be used.
     * 
     */
    public Optional<Integer> connectTimeout() {
        return Optional.ofNullable(this.connectTimeout);
    }
    /**
     * @return [int] Retries specifies the number of retries to perform on a target VM after a connection failure. If unset, the default value of 3 will be used.
     * 
     */
    public Optional<Integer> retries() {
        return Optional.ofNullable(this.retries);
    }
    /**
     * @return [int] TargetTimeout specifies the maximum inactivity time (in milliseconds) on the target VM side. If unset, the default of 50 seconds will be used.
     * 
     */
    public Optional<Integer> targetTimeout() {
        return Optional.ofNullable(this.targetTimeout);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ForwardingRuleHealthCheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer clientTimeout;
        private @Nullable Integer connectTimeout;
        private @Nullable Integer retries;
        private @Nullable Integer targetTimeout;
        public Builder() {}
        public Builder(ForwardingRuleHealthCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientTimeout = defaults.clientTimeout;
    	      this.connectTimeout = defaults.connectTimeout;
    	      this.retries = defaults.retries;
    	      this.targetTimeout = defaults.targetTimeout;
        }

        @CustomType.Setter
        public Builder clientTimeout(@Nullable Integer clientTimeout) {

            this.clientTimeout = clientTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder connectTimeout(@Nullable Integer connectTimeout) {

            this.connectTimeout = connectTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder retries(@Nullable Integer retries) {

            this.retries = retries;
            return this;
        }
        @CustomType.Setter
        public Builder targetTimeout(@Nullable Integer targetTimeout) {

            this.targetTimeout = targetTimeout;
            return this;
        }
        public ForwardingRuleHealthCheck build() {
            final var _resultValue = new ForwardingRuleHealthCheck();
            _resultValue.clientTimeout = clientTimeout;
            _resultValue.connectTimeout = connectTimeout;
            _resultValue.retries = retries;
            _resultValue.targetTimeout = targetTimeout;
            return _resultValue;
        }
    }
}
