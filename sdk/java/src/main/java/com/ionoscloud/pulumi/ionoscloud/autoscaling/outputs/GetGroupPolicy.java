// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.autoscaling.outputs;

import com.ionoscloud.pulumi.ionoscloud.autoscaling.outputs.GetGroupPolicyScaleInAction;
import com.ionoscloud.pulumi.ionoscloud.autoscaling.outputs.GetGroupPolicyScaleOutAction;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGroupPolicy {
    /**
     * @return The Metric that should trigger Scaling Actions. The values of the Metric are checked in fixed intervals.
     * 
     */
    private String metric;
    /**
     * @return Defines the range of time from which samples will be aggregated. Default is 120s.
     * *Note that when you set it to values like 5m the API will automatically transform it in PT5M, so the plan will show you a diff in state that should be ignored.*
     * 
     */
    private String range;
    /**
     * @return Specifies the Action to take when the `scaleInThreshold`
     * 
     */
    private List<GetGroupPolicyScaleInAction> scaleInActions;
    /**
     * @return A lower threshold on the value of `metric`. Will be used with `less than` (&lt;) operator. Exceeding this will start a Scale-In Action as specified by the `scaleInAction` property. The value must have a higher minimum delta to the `scaleOutThreshold` depending on the `metric` to avoid competitive actions at the same time.
     * 
     */
    private Integer scaleInThreshold;
    /**
     * @return Specifies the action to take when the `scaleOutThreshold` is exceeded. Hereby, scaling out is always about adding new VMs to this autoscaling group
     * 
     */
    private List<GetGroupPolicyScaleOutAction> scaleOutActions;
    /**
     * @return The upper threshold for the value of the `metric`. Used with the `greater than` (&gt;) operator. A scale-out action is triggered when this value is exceeded, specified by the `scaleOutAction` property. The value must have a lower minimum delta to the `scaleInThreshold`, depending on the metric, to avoid competing for actions simultaneously. If `properties.policy.unit=TOTAL`, a value &gt;= 40 must be chosen.
     * 
     */
    private Integer scaleOutThreshold;
    /**
     * @return Specifies the Action to take when the `scaleInThreshold` is exceeded. Hereby, scaling in is always about removing VMs that are currently associated with this Autoscaling Group.
     * 
     */
    private String unit;

    private GetGroupPolicy() {}
    /**
     * @return The Metric that should trigger Scaling Actions. The values of the Metric are checked in fixed intervals.
     * 
     */
    public String metric() {
        return this.metric;
    }
    /**
     * @return Defines the range of time from which samples will be aggregated. Default is 120s.
     * *Note that when you set it to values like 5m the API will automatically transform it in PT5M, so the plan will show you a diff in state that should be ignored.*
     * 
     */
    public String range() {
        return this.range;
    }
    /**
     * @return Specifies the Action to take when the `scaleInThreshold`
     * 
     */
    public List<GetGroupPolicyScaleInAction> scaleInActions() {
        return this.scaleInActions;
    }
    /**
     * @return A lower threshold on the value of `metric`. Will be used with `less than` (&lt;) operator. Exceeding this will start a Scale-In Action as specified by the `scaleInAction` property. The value must have a higher minimum delta to the `scaleOutThreshold` depending on the `metric` to avoid competitive actions at the same time.
     * 
     */
    public Integer scaleInThreshold() {
        return this.scaleInThreshold;
    }
    /**
     * @return Specifies the action to take when the `scaleOutThreshold` is exceeded. Hereby, scaling out is always about adding new VMs to this autoscaling group
     * 
     */
    public List<GetGroupPolicyScaleOutAction> scaleOutActions() {
        return this.scaleOutActions;
    }
    /**
     * @return The upper threshold for the value of the `metric`. Used with the `greater than` (&gt;) operator. A scale-out action is triggered when this value is exceeded, specified by the `scaleOutAction` property. The value must have a lower minimum delta to the `scaleInThreshold`, depending on the metric, to avoid competing for actions simultaneously. If `properties.policy.unit=TOTAL`, a value &gt;= 40 must be chosen.
     * 
     */
    public Integer scaleOutThreshold() {
        return this.scaleOutThreshold;
    }
    /**
     * @return Specifies the Action to take when the `scaleInThreshold` is exceeded. Hereby, scaling in is always about removing VMs that are currently associated with this Autoscaling Group.
     * 
     */
    public String unit() {
        return this.unit;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGroupPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String metric;
        private String range;
        private List<GetGroupPolicyScaleInAction> scaleInActions;
        private Integer scaleInThreshold;
        private List<GetGroupPolicyScaleOutAction> scaleOutActions;
        private Integer scaleOutThreshold;
        private String unit;
        public Builder() {}
        public Builder(GetGroupPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.metric = defaults.metric;
    	      this.range = defaults.range;
    	      this.scaleInActions = defaults.scaleInActions;
    	      this.scaleInThreshold = defaults.scaleInThreshold;
    	      this.scaleOutActions = defaults.scaleOutActions;
    	      this.scaleOutThreshold = defaults.scaleOutThreshold;
    	      this.unit = defaults.unit;
        }

        @CustomType.Setter
        public Builder metric(String metric) {
            if (metric == null) {
              throw new MissingRequiredPropertyException("GetGroupPolicy", "metric");
            }
            this.metric = metric;
            return this;
        }
        @CustomType.Setter
        public Builder range(String range) {
            if (range == null) {
              throw new MissingRequiredPropertyException("GetGroupPolicy", "range");
            }
            this.range = range;
            return this;
        }
        @CustomType.Setter
        public Builder scaleInActions(List<GetGroupPolicyScaleInAction> scaleInActions) {
            if (scaleInActions == null) {
              throw new MissingRequiredPropertyException("GetGroupPolicy", "scaleInActions");
            }
            this.scaleInActions = scaleInActions;
            return this;
        }
        public Builder scaleInActions(GetGroupPolicyScaleInAction... scaleInActions) {
            return scaleInActions(List.of(scaleInActions));
        }
        @CustomType.Setter
        public Builder scaleInThreshold(Integer scaleInThreshold) {
            if (scaleInThreshold == null) {
              throw new MissingRequiredPropertyException("GetGroupPolicy", "scaleInThreshold");
            }
            this.scaleInThreshold = scaleInThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder scaleOutActions(List<GetGroupPolicyScaleOutAction> scaleOutActions) {
            if (scaleOutActions == null) {
              throw new MissingRequiredPropertyException("GetGroupPolicy", "scaleOutActions");
            }
            this.scaleOutActions = scaleOutActions;
            return this;
        }
        public Builder scaleOutActions(GetGroupPolicyScaleOutAction... scaleOutActions) {
            return scaleOutActions(List.of(scaleOutActions));
        }
        @CustomType.Setter
        public Builder scaleOutThreshold(Integer scaleOutThreshold) {
            if (scaleOutThreshold == null) {
              throw new MissingRequiredPropertyException("GetGroupPolicy", "scaleOutThreshold");
            }
            this.scaleOutThreshold = scaleOutThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder unit(String unit) {
            if (unit == null) {
              throw new MissingRequiredPropertyException("GetGroupPolicy", "unit");
            }
            this.unit = unit;
            return this;
        }
        public GetGroupPolicy build() {
            final var _resultValue = new GetGroupPolicy();
            _resultValue.metric = metric;
            _resultValue.range = range;
            _resultValue.scaleInActions = scaleInActions;
            _resultValue.scaleInThreshold = scaleInThreshold;
            _resultValue.scaleOutActions = scaleOutActions;
            _resultValue.scaleOutThreshold = scaleOutThreshold;
            _resultValue.unit = unit;
            return _resultValue;
        }
    }
}
