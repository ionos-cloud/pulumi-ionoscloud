// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.vpn.inputs;

import com.ionoscloud.pulumi.ionoscloud.vpn.inputs.IpsecGatewayConnectionArgs;
import com.ionoscloud.pulumi.ionoscloud.vpn.inputs.IpsecGatewayMaintenanceWindowArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IpsecGatewayState extends com.pulumi.resources.ResourceArgs {

    public static final IpsecGatewayState Empty = new IpsecGatewayState();

    /**
     * [list] The network connection for your gateway. **Note**: all connections must belong to the
     * same datacenter. Minimum items: 1. Maximum items: 10.
     * 
     */
    @Import(name="connections")
    private @Nullable Output<List<IpsecGatewayConnectionArgs>> connections;

    /**
     * @return [list] The network connection for your gateway. **Note**: all connections must belong to the
     * same datacenter. Minimum items: 1. Maximum items: 10.
     * 
     */
    public Optional<Output<List<IpsecGatewayConnectionArgs>>> connections() {
        return Optional.ofNullable(this.connections);
    }

    /**
     * [string] The human-readable description of the IPSec Gateway.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return [string] The human-readable description of the IPSec Gateway.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * [string] Public IP address to be assigned to the gateway. Note: This must be an IP address in
     * the same datacenter as the connections.
     * 
     */
    @Import(name="gatewayIp")
    private @Nullable Output<String> gatewayIp;

    /**
     * @return [string] Public IP address to be assigned to the gateway. Note: This must be an IP address in
     * the same datacenter as the connections.
     * 
     */
    public Optional<Output<String>> gatewayIp() {
        return Optional.ofNullable(this.gatewayIp);
    }

    /**
     * [string] The location of the IPSec Gateway. Supported locations: de/fra, de/txl, es/vit,
     * gb/bhx, gb/lhr, us/ewr, us/las, us/mci, fr/par.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return [string] The location of the IPSec Gateway. Supported locations: de/fra, de/txl, es/vit,
     * gb/bhx, gb/lhr, us/ewr, us/las, us/mci, fr/par.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * (Computed) A weekly 4 hour-long window, during which maintenance might occur.
     * 
     */
    @Import(name="maintenanceWindow")
    private @Nullable Output<IpsecGatewayMaintenanceWindowArgs> maintenanceWindow;

    /**
     * @return (Computed) A weekly 4 hour-long window, during which maintenance might occur.
     * 
     */
    public Optional<Output<IpsecGatewayMaintenanceWindowArgs>> maintenanceWindow() {
        return Optional.ofNullable(this.maintenanceWindow);
    }

    /**
     * [string] The name of the IPSec Gateway.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return [string] The name of the IPSec Gateway.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (Computed)[string] Gateway performance options.  See product documentation for full details. Options: STANDARD, STANDARD_HA, ENHANCED, ENHANCED_HA, PREMIUM, PREMIUM_HA.
     * 
     */
    @Import(name="tier")
    private @Nullable Output<String> tier;

    /**
     * @return (Computed)[string] Gateway performance options.  See product documentation for full details. Options: STANDARD, STANDARD_HA, ENHANCED, ENHANCED_HA, PREMIUM, PREMIUM_HA.
     * 
     */
    public Optional<Output<String>> tier() {
        return Optional.ofNullable(this.tier);
    }

    /**
     * [string] The IKE version that is permitted for the VPN tunnels. Default: `IKEv2`. Possible
     * values: `IKEv2`.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return [string] The IKE version that is permitted for the VPN tunnels. Default: `IKEv2`. Possible
     * values: `IKEv2`.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private IpsecGatewayState() {}

    private IpsecGatewayState(IpsecGatewayState $) {
        this.connections = $.connections;
        this.description = $.description;
        this.gatewayIp = $.gatewayIp;
        this.location = $.location;
        this.maintenanceWindow = $.maintenanceWindow;
        this.name = $.name;
        this.tier = $.tier;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IpsecGatewayState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IpsecGatewayState $;

        public Builder() {
            $ = new IpsecGatewayState();
        }

        public Builder(IpsecGatewayState defaults) {
            $ = new IpsecGatewayState(Objects.requireNonNull(defaults));
        }

        /**
         * @param connections [list] The network connection for your gateway. **Note**: all connections must belong to the
         * same datacenter. Minimum items: 1. Maximum items: 10.
         * 
         * @return builder
         * 
         */
        public Builder connections(@Nullable Output<List<IpsecGatewayConnectionArgs>> connections) {
            $.connections = connections;
            return this;
        }

        /**
         * @param connections [list] The network connection for your gateway. **Note**: all connections must belong to the
         * same datacenter. Minimum items: 1. Maximum items: 10.
         * 
         * @return builder
         * 
         */
        public Builder connections(List<IpsecGatewayConnectionArgs> connections) {
            return connections(Output.of(connections));
        }

        /**
         * @param connections [list] The network connection for your gateway. **Note**: all connections must belong to the
         * same datacenter. Minimum items: 1. Maximum items: 10.
         * 
         * @return builder
         * 
         */
        public Builder connections(IpsecGatewayConnectionArgs... connections) {
            return connections(List.of(connections));
        }

        /**
         * @param description [string] The human-readable description of the IPSec Gateway.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description [string] The human-readable description of the IPSec Gateway.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param gatewayIp [string] Public IP address to be assigned to the gateway. Note: This must be an IP address in
         * the same datacenter as the connections.
         * 
         * @return builder
         * 
         */
        public Builder gatewayIp(@Nullable Output<String> gatewayIp) {
            $.gatewayIp = gatewayIp;
            return this;
        }

        /**
         * @param gatewayIp [string] Public IP address to be assigned to the gateway. Note: This must be an IP address in
         * the same datacenter as the connections.
         * 
         * @return builder
         * 
         */
        public Builder gatewayIp(String gatewayIp) {
            return gatewayIp(Output.of(gatewayIp));
        }

        /**
         * @param location [string] The location of the IPSec Gateway. Supported locations: de/fra, de/txl, es/vit,
         * gb/bhx, gb/lhr, us/ewr, us/las, us/mci, fr/par.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location [string] The location of the IPSec Gateway. Supported locations: de/fra, de/txl, es/vit,
         * gb/bhx, gb/lhr, us/ewr, us/las, us/mci, fr/par.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param maintenanceWindow (Computed) A weekly 4 hour-long window, during which maintenance might occur.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindow(@Nullable Output<IpsecGatewayMaintenanceWindowArgs> maintenanceWindow) {
            $.maintenanceWindow = maintenanceWindow;
            return this;
        }

        /**
         * @param maintenanceWindow (Computed) A weekly 4 hour-long window, during which maintenance might occur.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindow(IpsecGatewayMaintenanceWindowArgs maintenanceWindow) {
            return maintenanceWindow(Output.of(maintenanceWindow));
        }

        /**
         * @param name [string] The name of the IPSec Gateway.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [string] The name of the IPSec Gateway.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tier (Computed)[string] Gateway performance options.  See product documentation for full details. Options: STANDARD, STANDARD_HA, ENHANCED, ENHANCED_HA, PREMIUM, PREMIUM_HA.
         * 
         * @return builder
         * 
         */
        public Builder tier(@Nullable Output<String> tier) {
            $.tier = tier;
            return this;
        }

        /**
         * @param tier (Computed)[string] Gateway performance options.  See product documentation for full details. Options: STANDARD, STANDARD_HA, ENHANCED, ENHANCED_HA, PREMIUM, PREMIUM_HA.
         * 
         * @return builder
         * 
         */
        public Builder tier(String tier) {
            return tier(Output.of(tier));
        }

        /**
         * @param version [string] The IKE version that is permitted for the VPN tunnels. Default: `IKEv2`. Possible
         * values: `IKEv2`.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version [string] The IKE version that is permitted for the VPN tunnels. Default: `IKEv2`. Possible
         * values: `IKEv2`.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public IpsecGatewayState build() {
            return $;
        }
    }

}
