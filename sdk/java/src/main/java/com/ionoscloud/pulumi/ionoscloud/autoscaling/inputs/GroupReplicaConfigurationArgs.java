// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.autoscaling.inputs;

import com.ionoscloud.pulumi.ionoscloud.autoscaling.inputs.GroupReplicaConfigurationNicArgs;
import com.ionoscloud.pulumi.ionoscloud.autoscaling.inputs.GroupReplicaConfigurationVolumeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupReplicaConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final GroupReplicaConfigurationArgs Empty = new GroupReplicaConfigurationArgs();

    /**
     * [string] The zone where the VMs are created using this configuration. Possible values are: `AUTO`, `ZONE_1`, `ZONE_2`.
     * 
     */
    @Import(name="availabilityZone", required=true)
    private Output<String> availabilityZone;

    /**
     * @return [string] The zone where the VMs are created using this configuration. Possible values are: `AUTO`, `ZONE_1`, `ZONE_2`.
     * 
     */
    public Output<String> availabilityZone() {
        return this.availabilityZone;
    }

    /**
     * [int] The total number of cores for the VMs.
     * 
     */
    @Import(name="cores", required=true)
    private Output<Integer> cores;

    /**
     * @return [int] The total number of cores for the VMs.
     * 
     */
    public Output<Integer> cores() {
        return this.cores;
    }

    /**
     * [string] PU family for the VMs created using this configuration. If null, the VM will be created with the default CPU family for the assigned location. Possible values are: `INTEL_SKYLAKE`, `INTEL_XEON`.
     * 
     */
    @Import(name="cpuFamily")
    private @Nullable Output<String> cpuFamily;

    /**
     * @return [string] PU family for the VMs created using this configuration. If null, the VM will be created with the default CPU family for the assigned location. Possible values are: `INTEL_SKYLAKE`, `INTEL_XEON`.
     * 
     */
    public Optional<Output<String>> cpuFamily() {
        return Optional.ofNullable(this.cpuFamily);
    }

    /**
     * Set of NICs associated with this Replica.
     * 
     */
    @Import(name="nics")
    private @Nullable Output<List<GroupReplicaConfigurationNicArgs>> nics;

    /**
     * @return Set of NICs associated with this Replica.
     * 
     */
    public Optional<Output<List<GroupReplicaConfigurationNicArgs>>> nics() {
        return Optional.ofNullable(this.nics);
    }

    /**
     * [int] The amount of memory for the VMs in MB, e.g. 2048. Size must be specified in multiples of 256 MB with a minimum of 256 MB; however, if you set ramHotPlug to TRUE then you must use a minimum of 1024 MB. If you set the RAM size more than 240GB, then ramHotPlug will be set to FALSE and can not be set to TRUE unless RAM size not set to less than 240GB.
     * 
     */
    @Import(name="ram", required=true)
    private Output<Integer> ram;

    /**
     * @return [int] The amount of memory for the VMs in MB, e.g. 2048. Size must be specified in multiples of 256 MB with a minimum of 256 MB; however, if you set ramHotPlug to TRUE then you must use a minimum of 1024 MB. If you set the RAM size more than 240GB, then ramHotPlug will be set to FALSE and can not be set to TRUE unless RAM size not set to less than 240GB.
     * 
     */
    public Output<Integer> ram() {
        return this.ram;
    }

    /**
     * [list] List of volumes associated with this Replica.
     * 
     */
    @Import(name="volumes")
    private @Nullable Output<List<GroupReplicaConfigurationVolumeArgs>> volumes;

    /**
     * @return [list] List of volumes associated with this Replica.
     * 
     */
    public Optional<Output<List<GroupReplicaConfigurationVolumeArgs>>> volumes() {
        return Optional.ofNullable(this.volumes);
    }

    private GroupReplicaConfigurationArgs() {}

    private GroupReplicaConfigurationArgs(GroupReplicaConfigurationArgs $) {
        this.availabilityZone = $.availabilityZone;
        this.cores = $.cores;
        this.cpuFamily = $.cpuFamily;
        this.nics = $.nics;
        this.ram = $.ram;
        this.volumes = $.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupReplicaConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupReplicaConfigurationArgs $;

        public Builder() {
            $ = new GroupReplicaConfigurationArgs();
        }

        public Builder(GroupReplicaConfigurationArgs defaults) {
            $ = new GroupReplicaConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param availabilityZone [string] The zone where the VMs are created using this configuration. Possible values are: `AUTO`, `ZONE_1`, `ZONE_2`.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZone(Output<String> availabilityZone) {
            $.availabilityZone = availabilityZone;
            return this;
        }

        /**
         * @param availabilityZone [string] The zone where the VMs are created using this configuration. Possible values are: `AUTO`, `ZONE_1`, `ZONE_2`.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZone(String availabilityZone) {
            return availabilityZone(Output.of(availabilityZone));
        }

        /**
         * @param cores [int] The total number of cores for the VMs.
         * 
         * @return builder
         * 
         */
        public Builder cores(Output<Integer> cores) {
            $.cores = cores;
            return this;
        }

        /**
         * @param cores [int] The total number of cores for the VMs.
         * 
         * @return builder
         * 
         */
        public Builder cores(Integer cores) {
            return cores(Output.of(cores));
        }

        /**
         * @param cpuFamily [string] PU family for the VMs created using this configuration. If null, the VM will be created with the default CPU family for the assigned location. Possible values are: `INTEL_SKYLAKE`, `INTEL_XEON`.
         * 
         * @return builder
         * 
         */
        public Builder cpuFamily(@Nullable Output<String> cpuFamily) {
            $.cpuFamily = cpuFamily;
            return this;
        }

        /**
         * @param cpuFamily [string] PU family for the VMs created using this configuration. If null, the VM will be created with the default CPU family for the assigned location. Possible values are: `INTEL_SKYLAKE`, `INTEL_XEON`.
         * 
         * @return builder
         * 
         */
        public Builder cpuFamily(String cpuFamily) {
            return cpuFamily(Output.of(cpuFamily));
        }

        /**
         * @param nics Set of NICs associated with this Replica.
         * 
         * @return builder
         * 
         */
        public Builder nics(@Nullable Output<List<GroupReplicaConfigurationNicArgs>> nics) {
            $.nics = nics;
            return this;
        }

        /**
         * @param nics Set of NICs associated with this Replica.
         * 
         * @return builder
         * 
         */
        public Builder nics(List<GroupReplicaConfigurationNicArgs> nics) {
            return nics(Output.of(nics));
        }

        /**
         * @param nics Set of NICs associated with this Replica.
         * 
         * @return builder
         * 
         */
        public Builder nics(GroupReplicaConfigurationNicArgs... nics) {
            return nics(List.of(nics));
        }

        /**
         * @param ram [int] The amount of memory for the VMs in MB, e.g. 2048. Size must be specified in multiples of 256 MB with a minimum of 256 MB; however, if you set ramHotPlug to TRUE then you must use a minimum of 1024 MB. If you set the RAM size more than 240GB, then ramHotPlug will be set to FALSE and can not be set to TRUE unless RAM size not set to less than 240GB.
         * 
         * @return builder
         * 
         */
        public Builder ram(Output<Integer> ram) {
            $.ram = ram;
            return this;
        }

        /**
         * @param ram [int] The amount of memory for the VMs in MB, e.g. 2048. Size must be specified in multiples of 256 MB with a minimum of 256 MB; however, if you set ramHotPlug to TRUE then you must use a minimum of 1024 MB. If you set the RAM size more than 240GB, then ramHotPlug will be set to FALSE and can not be set to TRUE unless RAM size not set to less than 240GB.
         * 
         * @return builder
         * 
         */
        public Builder ram(Integer ram) {
            return ram(Output.of(ram));
        }

        /**
         * @param volumes [list] List of volumes associated with this Replica.
         * 
         * @return builder
         * 
         */
        public Builder volumes(@Nullable Output<List<GroupReplicaConfigurationVolumeArgs>> volumes) {
            $.volumes = volumes;
            return this;
        }

        /**
         * @param volumes [list] List of volumes associated with this Replica.
         * 
         * @return builder
         * 
         */
        public Builder volumes(List<GroupReplicaConfigurationVolumeArgs> volumes) {
            return volumes(Output.of(volumes));
        }

        /**
         * @param volumes [list] List of volumes associated with this Replica.
         * 
         * @return builder
         * 
         */
        public Builder volumes(GroupReplicaConfigurationVolumeArgs... volumes) {
            return volumes(List.of(volumes));
        }

        public GroupReplicaConfigurationArgs build() {
            if ($.availabilityZone == null) {
                throw new MissingRequiredPropertyException("GroupReplicaConfigurationArgs", "availabilityZone");
            }
            if ($.cores == null) {
                throw new MissingRequiredPropertyException("GroupReplicaConfigurationArgs", "cores");
            }
            if ($.ram == null) {
                throw new MissingRequiredPropertyException("GroupReplicaConfigurationArgs", "ram");
            }
            return $;
        }
    }

}
