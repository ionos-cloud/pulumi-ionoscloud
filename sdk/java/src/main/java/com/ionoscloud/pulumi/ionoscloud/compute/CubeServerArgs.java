// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.compute;

import com.ionoscloud.pulumi.ionoscloud.compute.inputs.CubeServerNicArgs;
import com.ionoscloud.pulumi.ionoscloud.compute.inputs.CubeServerVolumeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CubeServerArgs extends com.pulumi.resources.ResourceArgs {

    public static final CubeServerArgs Empty = new CubeServerArgs();

    /**
     * [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the server.
     * 
     * ⚠️ **_Warning: `allow_replace` - lets you update immutable fields, but it first destroys and then re-creates the server in order to do it. This field should be used with care, understanding the risks._**
     * 
     * &gt; **⚠ WARNING**
     * &gt; 
     * &gt; Image_name under volume level is deprecated, please use image_name under server level
     * 
     * &gt; **⚠ WARNING**
     * &gt; 
     * &gt; For creating a **CUBE** server, you can not set `volume.size` argument.
     * 
     */
    @Import(name="allowReplace")
    private @Nullable Output<Boolean> allowReplace;

    /**
     * @return [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the server.
     * 
     * ⚠️ **_Warning: `allow_replace` - lets you update immutable fields, but it first destroys and then re-creates the server in order to do it. This field should be used with care, understanding the risks._**
     * 
     * &gt; **⚠ WARNING**
     * &gt; 
     * &gt; Image_name under volume level is deprecated, please use image_name under server level
     * 
     * &gt; **⚠ WARNING**
     * &gt; 
     * &gt; For creating a **CUBE** server, you can not set `volume.size` argument.
     * 
     */
    public Optional<Output<Boolean>> allowReplace() {
        return Optional.ofNullable(this.allowReplace);
    }

    /**
     * [string] The availability zone in which the server should exist. This property is immutable.
     * 
     */
    @Import(name="availabilityZone")
    private @Nullable Output<String> availabilityZone;

    /**
     * @return [string] The availability zone in which the server should exist. This property is immutable.
     * 
     */
    public Optional<Output<String>> availabilityZone() {
        return Optional.ofNullable(this.availabilityZone);
    }

    /**
     * ***DEPRECATED*** Please refer to ionoscloud.compute.BootDeviceSelection (Optional)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the ionoscloud.compute.getImage data source.
     * 
     * @deprecated
     * Please use the &#39;ionoscloud_server_boot_device_selection&#39; resource for managing the boot device of the server.
     * 
     */
    @Deprecated /* Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server. */
    @Import(name="bootCdrom")
    private @Nullable Output<String> bootCdrom;

    /**
     * @return ***DEPRECATED*** Please refer to ionoscloud.compute.BootDeviceSelection (Optional)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the ionoscloud.compute.getImage data source.
     * 
     * @deprecated
     * Please use the &#39;ionoscloud_server_boot_device_selection&#39; resource for managing the boot device of the server.
     * 
     */
    @Deprecated /* Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server. */
    public Optional<Output<String>> bootCdrom() {
        return Optional.ofNullable(this.bootCdrom);
    }

    /**
     * [string] The image or snapshot UUID / name. May also be an image alias. It is required if `licence_type` is not provided.
     * 
     */
    @Import(name="bootImage")
    private @Nullable Output<String> bootImage;

    /**
     * @return [string] The image or snapshot UUID / name. May also be an image alias. It is required if `licence_type` is not provided.
     * 
     */
    public Optional<Output<String>> bootImage() {
        return Optional.ofNullable(this.bootImage);
    }

    /**
     * [string] The ID of a Virtual Data Center.
     * 
     */
    @Import(name="datacenterId", required=true)
    private Output<String> datacenterId;

    /**
     * @return [string] The ID of a Virtual Data Center.
     * 
     */
    public Output<String> datacenterId() {
        return this.datacenterId;
    }

    /**
     * (Computed) The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return (Computed) The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licence_type` is not provided. Attribute is immutable.
     * 
     */
    @Import(name="imageName")
    private @Nullable Output<String> imageName;

    /**
     * @return [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licence_type` is not provided. Attribute is immutable.
     * 
     */
    public Optional<Output<String>> imageName() {
        return Optional.ofNullable(this.imageName);
    }

    /**
     * [string] Required if `ssh_key_path` is not provided.
     * 
     */
    @Import(name="imagePassword")
    private @Nullable Output<String> imagePassword;

    /**
     * @return [string] Required if `ssh_key_path` is not provided.
     * 
     */
    public Optional<Output<String>> imagePassword() {
        return Optional.ofNullable(this.imagePassword);
    }

    /**
     * [string] The name of the server.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return [string] The name of the server.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * See the Nic section.
     * 
     */
    @Import(name="nic", required=true)
    private Output<CubeServerNicArgs> nic;

    /**
     * @return See the Nic section.
     * 
     */
    public Output<CubeServerNicArgs> nic() {
        return this.nic;
    }

    /**
     * The list of Security Group IDs for the resource.
     * 
     */
    @Import(name="securityGroupsIds")
    private @Nullable Output<List<String>> securityGroupsIds;

    /**
     * @return The list of Security Group IDs for the resource.
     * 
     */
    public Optional<Output<List<String>>> securityGroupsIds() {
        return Optional.ofNullable(this.securityGroupsIds);
    }

    /**
     * [list] List of paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Required for IonosCloud Linux images. Required if `image_password` is not provided.
     * 
     */
    @Import(name="sshKeyPaths")
    private @Nullable Output<List<String>> sshKeyPaths;

    /**
     * @return [list] List of paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Required for IonosCloud Linux images. Required if `image_password` is not provided.
     * 
     */
    public Optional<Output<List<String>>> sshKeyPaths() {
        return Optional.ofNullable(this.sshKeyPaths);
    }

    /**
     * [string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
     * 
     */
    @Import(name="templateUuid", required=true)
    private Output<String> templateUuid;

    /**
     * @return [string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
     * 
     */
    public Output<String> templateUuid() {
        return this.templateUuid;
    }

    /**
     * [string] Sets the power state of the cube server. E.g: `RUNNING` or `SUSPENDED`.
     * 
     */
    @Import(name="vmState")
    private @Nullable Output<String> vmState;

    /**
     * @return [string] Sets the power state of the cube server. E.g: `RUNNING` or `SUSPENDED`.
     * 
     */
    public Optional<Output<String>> vmState() {
        return Optional.ofNullable(this.vmState);
    }

    /**
     * See the Volume section.
     * 
     */
    @Import(name="volume", required=true)
    private Output<CubeServerVolumeArgs> volume;

    /**
     * @return See the Volume section.
     * 
     */
    public Output<CubeServerVolumeArgs> volume() {
        return this.volume;
    }

    private CubeServerArgs() {}

    private CubeServerArgs(CubeServerArgs $) {
        this.allowReplace = $.allowReplace;
        this.availabilityZone = $.availabilityZone;
        this.bootCdrom = $.bootCdrom;
        this.bootImage = $.bootImage;
        this.datacenterId = $.datacenterId;
        this.hostname = $.hostname;
        this.imageName = $.imageName;
        this.imagePassword = $.imagePassword;
        this.name = $.name;
        this.nic = $.nic;
        this.securityGroupsIds = $.securityGroupsIds;
        this.sshKeyPaths = $.sshKeyPaths;
        this.templateUuid = $.templateUuid;
        this.vmState = $.vmState;
        this.volume = $.volume;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CubeServerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CubeServerArgs $;

        public Builder() {
            $ = new CubeServerArgs();
        }

        public Builder(CubeServerArgs defaults) {
            $ = new CubeServerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowReplace [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the server.
         * 
         * ⚠️ **_Warning: `allow_replace` - lets you update immutable fields, but it first destroys and then re-creates the server in order to do it. This field should be used with care, understanding the risks._**
         * 
         * &gt; **⚠ WARNING**
         * &gt; 
         * &gt; Image_name under volume level is deprecated, please use image_name under server level
         * 
         * &gt; **⚠ WARNING**
         * &gt; 
         * &gt; For creating a **CUBE** server, you can not set `volume.size` argument.
         * 
         * @return builder
         * 
         */
        public Builder allowReplace(@Nullable Output<Boolean> allowReplace) {
            $.allowReplace = allowReplace;
            return this;
        }

        /**
         * @param allowReplace [bool] When set to true, allows the update of immutable fields by first destroying and then re-creating the server.
         * 
         * ⚠️ **_Warning: `allow_replace` - lets you update immutable fields, but it first destroys and then re-creates the server in order to do it. This field should be used with care, understanding the risks._**
         * 
         * &gt; **⚠ WARNING**
         * &gt; 
         * &gt; Image_name under volume level is deprecated, please use image_name under server level
         * 
         * &gt; **⚠ WARNING**
         * &gt; 
         * &gt; For creating a **CUBE** server, you can not set `volume.size` argument.
         * 
         * @return builder
         * 
         */
        public Builder allowReplace(Boolean allowReplace) {
            return allowReplace(Output.of(allowReplace));
        }

        /**
         * @param availabilityZone [string] The availability zone in which the server should exist. This property is immutable.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZone(@Nullable Output<String> availabilityZone) {
            $.availabilityZone = availabilityZone;
            return this;
        }

        /**
         * @param availabilityZone [string] The availability zone in which the server should exist. This property is immutable.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZone(String availabilityZone) {
            return availabilityZone(Output.of(availabilityZone));
        }

        /**
         * @param bootCdrom ***DEPRECATED*** Please refer to ionoscloud.compute.BootDeviceSelection (Optional)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the ionoscloud.compute.getImage data source.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use the &#39;ionoscloud_server_boot_device_selection&#39; resource for managing the boot device of the server.
         * 
         */
        @Deprecated /* Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server. */
        public Builder bootCdrom(@Nullable Output<String> bootCdrom) {
            $.bootCdrom = bootCdrom;
            return this;
        }

        /**
         * @param bootCdrom ***DEPRECATED*** Please refer to ionoscloud.compute.BootDeviceSelection (Optional)[string] The associated boot drive, if any. Must be the UUID of a bootable CDROM image that can be retrieved using the ionoscloud.compute.getImage data source.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use the &#39;ionoscloud_server_boot_device_selection&#39; resource for managing the boot device of the server.
         * 
         */
        @Deprecated /* Please use the 'ionoscloud_server_boot_device_selection' resource for managing the boot device of the server. */
        public Builder bootCdrom(String bootCdrom) {
            return bootCdrom(Output.of(bootCdrom));
        }

        /**
         * @param bootImage [string] The image or snapshot UUID / name. May also be an image alias. It is required if `licence_type` is not provided.
         * 
         * @return builder
         * 
         */
        public Builder bootImage(@Nullable Output<String> bootImage) {
            $.bootImage = bootImage;
            return this;
        }

        /**
         * @param bootImage [string] The image or snapshot UUID / name. May also be an image alias. It is required if `licence_type` is not provided.
         * 
         * @return builder
         * 
         */
        public Builder bootImage(String bootImage) {
            return bootImage(Output.of(bootImage));
        }

        /**
         * @param datacenterId [string] The ID of a Virtual Data Center.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(Output<String> datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        /**
         * @param datacenterId [string] The ID of a Virtual Data Center.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(String datacenterId) {
            return datacenterId(Output.of(datacenterId));
        }

        /**
         * @param hostname (Computed) The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname (Computed) The hostname of the resource. Allowed characters are a-z, 0-9 and - (minus). Hostname should not start with minus and should not be longer than 63 characters. If no value provided explicitly, it will be populated with the name of the server
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param imageName [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licence_type` is not provided. Attribute is immutable.
         * 
         * @return builder
         * 
         */
        public Builder imageName(@Nullable Output<String> imageName) {
            $.imageName = imageName;
            return this;
        }

        /**
         * @param imageName [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licence_type` is not provided. Attribute is immutable.
         * 
         * @return builder
         * 
         */
        public Builder imageName(String imageName) {
            return imageName(Output.of(imageName));
        }

        /**
         * @param imagePassword [string] Required if `ssh_key_path` is not provided.
         * 
         * @return builder
         * 
         */
        public Builder imagePassword(@Nullable Output<String> imagePassword) {
            $.imagePassword = imagePassword;
            return this;
        }

        /**
         * @param imagePassword [string] Required if `ssh_key_path` is not provided.
         * 
         * @return builder
         * 
         */
        public Builder imagePassword(String imagePassword) {
            return imagePassword(Output.of(imagePassword));
        }

        /**
         * @param name [string] The name of the server.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [string] The name of the server.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nic See the Nic section.
         * 
         * @return builder
         * 
         */
        public Builder nic(Output<CubeServerNicArgs> nic) {
            $.nic = nic;
            return this;
        }

        /**
         * @param nic See the Nic section.
         * 
         * @return builder
         * 
         */
        public Builder nic(CubeServerNicArgs nic) {
            return nic(Output.of(nic));
        }

        /**
         * @param securityGroupsIds The list of Security Group IDs for the resource.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupsIds(@Nullable Output<List<String>> securityGroupsIds) {
            $.securityGroupsIds = securityGroupsIds;
            return this;
        }

        /**
         * @param securityGroupsIds The list of Security Group IDs for the resource.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupsIds(List<String> securityGroupsIds) {
            return securityGroupsIds(Output.of(securityGroupsIds));
        }

        /**
         * @param securityGroupsIds The list of Security Group IDs for the resource.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupsIds(String... securityGroupsIds) {
            return securityGroupsIds(List.of(securityGroupsIds));
        }

        /**
         * @param sshKeyPaths [list] List of paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Required for IonosCloud Linux images. Required if `image_password` is not provided.
         * 
         * @return builder
         * 
         */
        public Builder sshKeyPaths(@Nullable Output<List<String>> sshKeyPaths) {
            $.sshKeyPaths = sshKeyPaths;
            return this;
        }

        /**
         * @param sshKeyPaths [list] List of paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Required for IonosCloud Linux images. Required if `image_password` is not provided.
         * 
         * @return builder
         * 
         */
        public Builder sshKeyPaths(List<String> sshKeyPaths) {
            return sshKeyPaths(Output.of(sshKeyPaths));
        }

        /**
         * @param sshKeyPaths [list] List of paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Required for IonosCloud Linux images. Required if `image_password` is not provided.
         * 
         * @return builder
         * 
         */
        public Builder sshKeyPaths(String... sshKeyPaths) {
            return sshKeyPaths(List.of(sshKeyPaths));
        }

        /**
         * @param templateUuid [string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(Output<String> templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        /**
         * @param templateUuid [string] The UUID of the template for creating a CUBE server; the available templates for CUBE servers can be found on the templates resource
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(String templateUuid) {
            return templateUuid(Output.of(templateUuid));
        }

        /**
         * @param vmState [string] Sets the power state of the cube server. E.g: `RUNNING` or `SUSPENDED`.
         * 
         * @return builder
         * 
         */
        public Builder vmState(@Nullable Output<String> vmState) {
            $.vmState = vmState;
            return this;
        }

        /**
         * @param vmState [string] Sets the power state of the cube server. E.g: `RUNNING` or `SUSPENDED`.
         * 
         * @return builder
         * 
         */
        public Builder vmState(String vmState) {
            return vmState(Output.of(vmState));
        }

        /**
         * @param volume See the Volume section.
         * 
         * @return builder
         * 
         */
        public Builder volume(Output<CubeServerVolumeArgs> volume) {
            $.volume = volume;
            return this;
        }

        /**
         * @param volume See the Volume section.
         * 
         * @return builder
         * 
         */
        public Builder volume(CubeServerVolumeArgs volume) {
            return volume(Output.of(volume));
        }

        public CubeServerArgs build() {
            if ($.datacenterId == null) {
                throw new MissingRequiredPropertyException("CubeServerArgs", "datacenterId");
            }
            if ($.nic == null) {
                throw new MissingRequiredPropertyException("CubeServerArgs", "nic");
            }
            if ($.templateUuid == null) {
                throw new MissingRequiredPropertyException("CubeServerArgs", "templateUuid");
            }
            if ($.volume == null) {
                throw new MissingRequiredPropertyException("CubeServerArgs", "volume");
            }
            return $;
        }
    }

}
