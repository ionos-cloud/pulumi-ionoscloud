// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.autoscaling.inputs;

import com.ionoscloud.pulumi.ionoscloud.autoscaling.inputs.GroupReplicaConfigurationNicFirewallRuleArgs;
import com.ionoscloud.pulumi.ionoscloud.autoscaling.inputs.GroupReplicaConfigurationNicFlowLogArgs;
import com.ionoscloud.pulumi.ionoscloud.autoscaling.inputs.GroupReplicaConfigurationNicTargetGroupArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupReplicaConfigurationNicArgs extends com.pulumi.resources.ResourceArgs {

    public static final GroupReplicaConfigurationNicArgs Empty = new GroupReplicaConfigurationNicArgs();

    /**
     * Dhcp flag for this replica Nic. This is an optional attribute with default value of &#39;true&#39; if not given in the request payload or given as null.
     * 
     */
    @Import(name="dhcp")
    private @Nullable Output<Boolean> dhcp;

    /**
     * @return Dhcp flag for this replica Nic. This is an optional attribute with default value of &#39;true&#39; if not given in the request payload or given as null.
     * 
     */
    public Optional<Output<Boolean>> dhcp() {
        return Optional.ofNullable(this.dhcp);
    }

    /**
     * Activate or deactivate the firewall. By default, an active firewall without any defined rules will block all incoming network traffic except for the firewall rules that explicitly allows certain protocols, IP addresses and ports.
     * 
     */
    @Import(name="firewallActive")
    private @Nullable Output<Boolean> firewallActive;

    /**
     * @return Activate or deactivate the firewall. By default, an active firewall without any defined rules will block all incoming network traffic except for the firewall rules that explicitly allows certain protocols, IP addresses and ports.
     * 
     */
    public Optional<Output<Boolean>> firewallActive() {
        return Optional.ofNullable(this.firewallActive);
    }

    /**
     * List of all firewall rules for the specified NIC.
     * 
     */
    @Import(name="firewallRules")
    private @Nullable Output<List<GroupReplicaConfigurationNicFirewallRuleArgs>> firewallRules;

    /**
     * @return List of all firewall rules for the specified NIC.
     * 
     */
    public Optional<Output<List<GroupReplicaConfigurationNicFirewallRuleArgs>>> firewallRules() {
        return Optional.ofNullable(this.firewallRules);
    }

    /**
     * The type of firewall rules that will be allowed on the NIC. If not specified, the default INGRESS value is used.
     * 
     */
    @Import(name="firewallType")
    private @Nullable Output<String> firewallType;

    /**
     * @return The type of firewall rules that will be allowed on the NIC. If not specified, the default INGRESS value is used.
     * 
     */
    public Optional<Output<String>> firewallType() {
        return Optional.ofNullable(this.firewallType);
    }

    /**
     * List of all flow logs for the specified NIC.
     * 
     */
    @Import(name="flowLogs")
    private @Nullable Output<List<GroupReplicaConfigurationNicFlowLogArgs>> flowLogs;

    /**
     * @return List of all flow logs for the specified NIC.
     * 
     */
    public Optional<Output<List<GroupReplicaConfigurationNicFlowLogArgs>>> flowLogs() {
        return Optional.ofNullable(this.flowLogs);
    }

    /**
     * Lan ID for this replica Nic.
     * 
     */
    @Import(name="lan", required=true)
    private Output<Integer> lan;

    /**
     * @return Lan ID for this replica Nic.
     * 
     */
    public Output<Integer> lan() {
        return this.lan;
    }

    /**
     * [string] User-defined name for the Autoscaling Group.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return [string] User-defined name for the Autoscaling Group.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * In order to link VM to ALB, target group must be provided.
     * 
     */
    @Import(name="targetGroup")
    private @Nullable Output<GroupReplicaConfigurationNicTargetGroupArgs> targetGroup;

    /**
     * @return In order to link VM to ALB, target group must be provided.
     * 
     */
    public Optional<Output<GroupReplicaConfigurationNicTargetGroupArgs>> targetGroup() {
        return Optional.ofNullable(this.targetGroup);
    }

    private GroupReplicaConfigurationNicArgs() {}

    private GroupReplicaConfigurationNicArgs(GroupReplicaConfigurationNicArgs $) {
        this.dhcp = $.dhcp;
        this.firewallActive = $.firewallActive;
        this.firewallRules = $.firewallRules;
        this.firewallType = $.firewallType;
        this.flowLogs = $.flowLogs;
        this.lan = $.lan;
        this.name = $.name;
        this.targetGroup = $.targetGroup;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupReplicaConfigurationNicArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupReplicaConfigurationNicArgs $;

        public Builder() {
            $ = new GroupReplicaConfigurationNicArgs();
        }

        public Builder(GroupReplicaConfigurationNicArgs defaults) {
            $ = new GroupReplicaConfigurationNicArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dhcp Dhcp flag for this replica Nic. This is an optional attribute with default value of &#39;true&#39; if not given in the request payload or given as null.
         * 
         * @return builder
         * 
         */
        public Builder dhcp(@Nullable Output<Boolean> dhcp) {
            $.dhcp = dhcp;
            return this;
        }

        /**
         * @param dhcp Dhcp flag for this replica Nic. This is an optional attribute with default value of &#39;true&#39; if not given in the request payload or given as null.
         * 
         * @return builder
         * 
         */
        public Builder dhcp(Boolean dhcp) {
            return dhcp(Output.of(dhcp));
        }

        /**
         * @param firewallActive Activate or deactivate the firewall. By default, an active firewall without any defined rules will block all incoming network traffic except for the firewall rules that explicitly allows certain protocols, IP addresses and ports.
         * 
         * @return builder
         * 
         */
        public Builder firewallActive(@Nullable Output<Boolean> firewallActive) {
            $.firewallActive = firewallActive;
            return this;
        }

        /**
         * @param firewallActive Activate or deactivate the firewall. By default, an active firewall without any defined rules will block all incoming network traffic except for the firewall rules that explicitly allows certain protocols, IP addresses and ports.
         * 
         * @return builder
         * 
         */
        public Builder firewallActive(Boolean firewallActive) {
            return firewallActive(Output.of(firewallActive));
        }

        /**
         * @param firewallRules List of all firewall rules for the specified NIC.
         * 
         * @return builder
         * 
         */
        public Builder firewallRules(@Nullable Output<List<GroupReplicaConfigurationNicFirewallRuleArgs>> firewallRules) {
            $.firewallRules = firewallRules;
            return this;
        }

        /**
         * @param firewallRules List of all firewall rules for the specified NIC.
         * 
         * @return builder
         * 
         */
        public Builder firewallRules(List<GroupReplicaConfigurationNicFirewallRuleArgs> firewallRules) {
            return firewallRules(Output.of(firewallRules));
        }

        /**
         * @param firewallRules List of all firewall rules for the specified NIC.
         * 
         * @return builder
         * 
         */
        public Builder firewallRules(GroupReplicaConfigurationNicFirewallRuleArgs... firewallRules) {
            return firewallRules(List.of(firewallRules));
        }

        /**
         * @param firewallType The type of firewall rules that will be allowed on the NIC. If not specified, the default INGRESS value is used.
         * 
         * @return builder
         * 
         */
        public Builder firewallType(@Nullable Output<String> firewallType) {
            $.firewallType = firewallType;
            return this;
        }

        /**
         * @param firewallType The type of firewall rules that will be allowed on the NIC. If not specified, the default INGRESS value is used.
         * 
         * @return builder
         * 
         */
        public Builder firewallType(String firewallType) {
            return firewallType(Output.of(firewallType));
        }

        /**
         * @param flowLogs List of all flow logs for the specified NIC.
         * 
         * @return builder
         * 
         */
        public Builder flowLogs(@Nullable Output<List<GroupReplicaConfigurationNicFlowLogArgs>> flowLogs) {
            $.flowLogs = flowLogs;
            return this;
        }

        /**
         * @param flowLogs List of all flow logs for the specified NIC.
         * 
         * @return builder
         * 
         */
        public Builder flowLogs(List<GroupReplicaConfigurationNicFlowLogArgs> flowLogs) {
            return flowLogs(Output.of(flowLogs));
        }

        /**
         * @param flowLogs List of all flow logs for the specified NIC.
         * 
         * @return builder
         * 
         */
        public Builder flowLogs(GroupReplicaConfigurationNicFlowLogArgs... flowLogs) {
            return flowLogs(List.of(flowLogs));
        }

        /**
         * @param lan Lan ID for this replica Nic.
         * 
         * @return builder
         * 
         */
        public Builder lan(Output<Integer> lan) {
            $.lan = lan;
            return this;
        }

        /**
         * @param lan Lan ID for this replica Nic.
         * 
         * @return builder
         * 
         */
        public Builder lan(Integer lan) {
            return lan(Output.of(lan));
        }

        /**
         * @param name [string] User-defined name for the Autoscaling Group.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [string] User-defined name for the Autoscaling Group.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param targetGroup In order to link VM to ALB, target group must be provided.
         * 
         * @return builder
         * 
         */
        public Builder targetGroup(@Nullable Output<GroupReplicaConfigurationNicTargetGroupArgs> targetGroup) {
            $.targetGroup = targetGroup;
            return this;
        }

        /**
         * @param targetGroup In order to link VM to ALB, target group must be provided.
         * 
         * @return builder
         * 
         */
        public Builder targetGroup(GroupReplicaConfigurationNicTargetGroupArgs targetGroup) {
            return targetGroup(Output.of(targetGroup));
        }

        public GroupReplicaConfigurationNicArgs build() {
            if ($.lan == null) {
                throw new MissingRequiredPropertyException("GroupReplicaConfigurationNicArgs", "lan");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GroupReplicaConfigurationNicArgs", "name");
            }
            return $;
        }
    }

}
