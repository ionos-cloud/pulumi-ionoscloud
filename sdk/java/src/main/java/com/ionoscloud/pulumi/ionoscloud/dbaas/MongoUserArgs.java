// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.dbaas;

import com.ionoscloud.pulumi.ionoscloud.dbaas.inputs.MongoUserRoleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MongoUserArgs extends com.pulumi.resources.ResourceArgs {

    public static final MongoUserArgs Empty = new MongoUserArgs();

    /**
     * [string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.
     * 
     */
    @Import(name="clusterId", required=true)
    private Output<String> clusterId;

    /**
     * @return [string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.
     * 
     */
    public Output<String> clusterId() {
        return this.clusterId;
    }

    /**
     * [string] User password. Updates to the value of the field force the cluster to be re-created.
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    /**
     * @return [string] User password. Updates to the value of the field force the cluster to be re-created.
     * 
     */
    public Output<String> password() {
        return this.password;
    }

    /**
     * [string] a list of mongodb user roles. Updates to the value of the field force the cluster to be re-created.
     * 
     */
    @Import(name="roles")
    private @Nullable Output<List<MongoUserRoleArgs>> roles;

    /**
     * @return [string] a list of mongodb user roles. Updates to the value of the field force the cluster to be re-created.
     * 
     */
    public Optional<Output<List<MongoUserRoleArgs>>> roles() {
        return Optional.ofNullable(this.roles);
    }

    /**
     * [string] Used for authentication. Updates to the value of the field force the cluster to be re-created.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return [string] Used for authentication. Updates to the value of the field force the cluster to be re-created.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private MongoUserArgs() {}

    private MongoUserArgs(MongoUserArgs $) {
        this.clusterId = $.clusterId;
        this.password = $.password;
        this.roles = $.roles;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MongoUserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MongoUserArgs $;

        public Builder() {
            $ = new MongoUserArgs();
        }

        public Builder(MongoUserArgs defaults) {
            $ = new MongoUserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId [string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId [string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param password [string] User password. Updates to the value of the field force the cluster to be re-created.
         * 
         * @return builder
         * 
         */
        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password [string] User password. Updates to the value of the field force the cluster to be re-created.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param roles [string] a list of mongodb user roles. Updates to the value of the field force the cluster to be re-created.
         * 
         * @return builder
         * 
         */
        public Builder roles(@Nullable Output<List<MongoUserRoleArgs>> roles) {
            $.roles = roles;
            return this;
        }

        /**
         * @param roles [string] a list of mongodb user roles. Updates to the value of the field force the cluster to be re-created.
         * 
         * @return builder
         * 
         */
        public Builder roles(List<MongoUserRoleArgs> roles) {
            return roles(Output.of(roles));
        }

        /**
         * @param roles [string] a list of mongodb user roles. Updates to the value of the field force the cluster to be re-created.
         * 
         * @return builder
         * 
         */
        public Builder roles(MongoUserRoleArgs... roles) {
            return roles(List.of(roles));
        }

        /**
         * @param username [string] Used for authentication. Updates to the value of the field force the cluster to be re-created.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username [string] Used for authentication. Updates to the value of the field force the cluster to be re-created.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public MongoUserArgs build() {
            if ($.clusterId == null) {
                throw new MissingRequiredPropertyException("MongoUserArgs", "clusterId");
            }
            if ($.password == null) {
                throw new MissingRequiredPropertyException("MongoUserArgs", "password");
            }
            if ($.username == null) {
                throw new MissingRequiredPropertyException("MongoUserArgs", "username");
            }
            return $;
        }
    }

}
