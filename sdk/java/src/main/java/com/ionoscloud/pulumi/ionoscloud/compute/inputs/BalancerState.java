// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BalancerState extends com.pulumi.resources.ResourceArgs {

    public static final BalancerState Empty = new BalancerState();

    /**
     * [string] The ID of a Virtual Data Center.
     * 
     */
    @Import(name="datacenterId")
    private @Nullable Output<String> datacenterId;

    /**
     * @return [string] The ID of a Virtual Data Center.
     * 
     */
    public Optional<Output<String>> datacenterId() {
        return Optional.ofNullable(this.datacenterId);
    }

    /**
     * [Boolean] Indicates if the load balancer will reserve an IP using DHCP.
     * 
     */
    @Import(name="dhcp")
    private @Nullable Output<Boolean> dhcp;

    /**
     * @return [Boolean] Indicates if the load balancer will reserve an IP using DHCP.
     * 
     */
    public Optional<Output<Boolean>> dhcp() {
        return Optional.ofNullable(this.dhcp);
    }

    /**
     * [string] IPv4 address of the load balancer.
     * 
     */
    @Import(name="ip")
    private @Nullable Output<String> ip;

    /**
     * @return [string] IPv4 address of the load balancer.
     * 
     */
    public Optional<Output<String>> ip() {
        return Optional.ofNullable(this.ip);
    }

    /**
     * [string] The name of the load balancer.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return [string] The name of the load balancer.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * [list] A list of NIC IDs that are part of the load balancer.
     * 
     */
    @Import(name="nicIds")
    private @Nullable Output<List<String>> nicIds;

    /**
     * @return [list] A list of NIC IDs that are part of the load balancer.
     * 
     */
    public Optional<Output<List<String>>> nicIds() {
        return Optional.ofNullable(this.nicIds);
    }

    private BalancerState() {}

    private BalancerState(BalancerState $) {
        this.datacenterId = $.datacenterId;
        this.dhcp = $.dhcp;
        this.ip = $.ip;
        this.name = $.name;
        this.nicIds = $.nicIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BalancerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BalancerState $;

        public Builder() {
            $ = new BalancerState();
        }

        public Builder(BalancerState defaults) {
            $ = new BalancerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param datacenterId [string] The ID of a Virtual Data Center.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(@Nullable Output<String> datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        /**
         * @param datacenterId [string] The ID of a Virtual Data Center.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(String datacenterId) {
            return datacenterId(Output.of(datacenterId));
        }

        /**
         * @param dhcp [Boolean] Indicates if the load balancer will reserve an IP using DHCP.
         * 
         * @return builder
         * 
         */
        public Builder dhcp(@Nullable Output<Boolean> dhcp) {
            $.dhcp = dhcp;
            return this;
        }

        /**
         * @param dhcp [Boolean] Indicates if the load balancer will reserve an IP using DHCP.
         * 
         * @return builder
         * 
         */
        public Builder dhcp(Boolean dhcp) {
            return dhcp(Output.of(dhcp));
        }

        /**
         * @param ip [string] IPv4 address of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder ip(@Nullable Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip [string] IPv4 address of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param name [string] The name of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name [string] The name of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nicIds [list] A list of NIC IDs that are part of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder nicIds(@Nullable Output<List<String>> nicIds) {
            $.nicIds = nicIds;
            return this;
        }

        /**
         * @param nicIds [list] A list of NIC IDs that are part of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder nicIds(List<String> nicIds) {
            return nicIds(Output.of(nicIds));
        }

        /**
         * @param nicIds [list] A list of NIC IDs that are part of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder nicIds(String... nicIds) {
            return nicIds(List.of(nicIds));
        }

        public BalancerState build() {
            return $;
        }
    }

}
