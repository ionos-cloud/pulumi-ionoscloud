// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ionoscloud.pulumi.ionoscloud.apigateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouteUpstreamArgs extends com.pulumi.resources.ResourceArgs {

    public static final RouteUpstreamArgs Empty = new RouteUpstreamArgs();

    /**
     * [string] The host of the upstream.
     * 
     */
    @Import(name="host", required=true)
    private Output<String> host;

    /**
     * @return [string] The host of the upstream.
     * 
     */
    public Output<String> host() {
        return this.host;
    }

    /**
     * [string] The load balancer algorithm. Default value: `roundrobin`.
     * 
     */
    @Import(name="loadbalancer")
    private @Nullable Output<String> loadbalancer;

    /**
     * @return [string] The load balancer algorithm. Default value: `roundrobin`.
     * 
     */
    public Optional<Output<String>> loadbalancer() {
        return Optional.ofNullable(this.loadbalancer);
    }

    /**
     * [int] The port of the upstream. Default value: `80`.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return [int] The port of the upstream. Default value: `80`.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * [string] The target URL of the upstream. Default value: `http`.
     * 
     */
    @Import(name="scheme")
    private @Nullable Output<String> scheme;

    /**
     * @return [string] The target URL of the upstream. Default value: `http`.
     * 
     */
    public Optional<Output<String>> scheme() {
        return Optional.ofNullable(this.scheme);
    }

    /**
     * [int] Weight with which to split traffic to the upstream. Default value: `100`.
     * 
     */
    @Import(name="weight")
    private @Nullable Output<Integer> weight;

    /**
     * @return [int] Weight with which to split traffic to the upstream. Default value: `100`.
     * 
     */
    public Optional<Output<Integer>> weight() {
        return Optional.ofNullable(this.weight);
    }

    private RouteUpstreamArgs() {}

    private RouteUpstreamArgs(RouteUpstreamArgs $) {
        this.host = $.host;
        this.loadbalancer = $.loadbalancer;
        this.port = $.port;
        this.scheme = $.scheme;
        this.weight = $.weight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouteUpstreamArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouteUpstreamArgs $;

        public Builder() {
            $ = new RouteUpstreamArgs();
        }

        public Builder(RouteUpstreamArgs defaults) {
            $ = new RouteUpstreamArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param host [string] The host of the upstream.
         * 
         * @return builder
         * 
         */
        public Builder host(Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host [string] The host of the upstream.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param loadbalancer [string] The load balancer algorithm. Default value: `roundrobin`.
         * 
         * @return builder
         * 
         */
        public Builder loadbalancer(@Nullable Output<String> loadbalancer) {
            $.loadbalancer = loadbalancer;
            return this;
        }

        /**
         * @param loadbalancer [string] The load balancer algorithm. Default value: `roundrobin`.
         * 
         * @return builder
         * 
         */
        public Builder loadbalancer(String loadbalancer) {
            return loadbalancer(Output.of(loadbalancer));
        }

        /**
         * @param port [int] The port of the upstream. Default value: `80`.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port [int] The port of the upstream. Default value: `80`.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param scheme [string] The target URL of the upstream. Default value: `http`.
         * 
         * @return builder
         * 
         */
        public Builder scheme(@Nullable Output<String> scheme) {
            $.scheme = scheme;
            return this;
        }

        /**
         * @param scheme [string] The target URL of the upstream. Default value: `http`.
         * 
         * @return builder
         * 
         */
        public Builder scheme(String scheme) {
            return scheme(Output.of(scheme));
        }

        /**
         * @param weight [int] Weight with which to split traffic to the upstream. Default value: `100`.
         * 
         * @return builder
         * 
         */
        public Builder weight(@Nullable Output<Integer> weight) {
            $.weight = weight;
            return this;
        }

        /**
         * @param weight [int] Weight with which to split traffic to the upstream. Default value: `100`.
         * 
         * @return builder
         * 
         */
        public Builder weight(Integer weight) {
            return weight(Output.of(weight));
        }

        public RouteUpstreamArgs build() {
            if ($.host == null) {
                throw new MissingRequiredPropertyException("RouteUpstreamArgs", "host");
            }
            return $;
        }
    }

}
