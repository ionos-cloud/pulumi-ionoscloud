// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **IP Failover data source** can be used to search for and return an existing IP Failover object.
// You need to provide the datacenterId and the id of the lan to get the ip failover object for the provided datacenter.
// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
func GetIpfailover(ctx *pulumi.Context, args *GetIpfailoverArgs, opts ...pulumi.InvokeOption) (*GetIpfailoverResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetIpfailoverResult
	err := ctx.Invoke("ionoscloud:index/getIpfailover:getIpfailover", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIpfailover.
type GetIpfailoverArgs struct {
	// The ID of the datacenter containing the ip failover datasource
	DatacenterId string `pulumi:"datacenterId"`
	// The reserved IP address to be used in the IP failover group.
	Ip string `pulumi:"ip"`
	// The ID of a LAN.
	LanId string `pulumi:"lanId"`
}

// A collection of values returned by getIpfailover.
type GetIpfailoverResult struct {
	// The ID of a Data Center.
	DatacenterId string `pulumi:"datacenterId"`
	Id           string `pulumi:"id"`
	// The reserved IP address to be used in the IP failover group.
	Ip string `pulumi:"ip"`
	// The ID of a LAN.
	LanId string `pulumi:"lanId"`
	// The ID of a NIC.
	Nicuuid string `pulumi:"nicuuid"`
}

func GetIpfailoverOutput(ctx *pulumi.Context, args GetIpfailoverOutputArgs, opts ...pulumi.InvokeOption) GetIpfailoverResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetIpfailoverResultOutput, error) {
			args := v.(GetIpfailoverArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ionoscloud:index/getIpfailover:getIpfailover", args, GetIpfailoverResultOutput{}, options).(GetIpfailoverResultOutput), nil
		}).(GetIpfailoverResultOutput)
}

// A collection of arguments for invoking getIpfailover.
type GetIpfailoverOutputArgs struct {
	// The ID of the datacenter containing the ip failover datasource
	DatacenterId pulumi.StringInput `pulumi:"datacenterId"`
	// The reserved IP address to be used in the IP failover group.
	Ip pulumi.StringInput `pulumi:"ip"`
	// The ID of a LAN.
	LanId pulumi.StringInput `pulumi:"lanId"`
}

func (GetIpfailoverOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpfailoverArgs)(nil)).Elem()
}

// A collection of values returned by getIpfailover.
type GetIpfailoverResultOutput struct{ *pulumi.OutputState }

func (GetIpfailoverResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpfailoverResult)(nil)).Elem()
}

func (o GetIpfailoverResultOutput) ToGetIpfailoverResultOutput() GetIpfailoverResultOutput {
	return o
}

func (o GetIpfailoverResultOutput) ToGetIpfailoverResultOutputWithContext(ctx context.Context) GetIpfailoverResultOutput {
	return o
}

// The ID of a Data Center.
func (o GetIpfailoverResultOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpfailoverResult) string { return v.DatacenterId }).(pulumi.StringOutput)
}

func (o GetIpfailoverResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpfailoverResult) string { return v.Id }).(pulumi.StringOutput)
}

// The reserved IP address to be used in the IP failover group.
func (o GetIpfailoverResultOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpfailoverResult) string { return v.Ip }).(pulumi.StringOutput)
}

// The ID of a LAN.
func (o GetIpfailoverResultOutput) LanId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpfailoverResult) string { return v.LanId }).(pulumi.StringOutput)
}

// The ID of a NIC.
func (o GetIpfailoverResultOutput) Nicuuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpfailoverResult) string { return v.Nicuuid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetIpfailoverResultOutput{})
}
