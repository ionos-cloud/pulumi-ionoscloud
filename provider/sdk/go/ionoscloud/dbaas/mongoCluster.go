// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbaas

import (
	"context"
	"reflect"

	"errors"
	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a **DbaaS Mongo Cluster**.
//
// ## Example Usage
//
// ### Playground Or Business Editions. They Require Template_id Defined.
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/dbaas"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			datacenterExample, err := compute.NewDatacenter(ctx, "datacenterExample", &compute.DatacenterArgs{
//				Location:    pulumi.String("de/txl"),
//				Description: pulumi.String("Datacenter for testing dbaas cluster"),
//			})
//			if err != nil {
//				return err
//			}
//			lanExample, err := compute.NewLan(ctx, "lanExample", &compute.LanArgs{
//				DatacenterId: datacenterExample.ID(),
//				Public:       pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dbaas.NewMongoCluster(ctx, "exampleMongoCluster", &dbaas.MongoClusterArgs{
//				MaintenanceWindow: &dbaas.MongoClusterMaintenanceWindowArgs{
//					DayOfTheWeek: pulumi.String("Sunday"),
//					Time:         pulumi.String("09:00:00"),
//				},
//				MongodbVersion: pulumi.String("5.0"),
//				Instances:      pulumi.Int(1),
//				DisplayName:    pulumi.String("example_mongo_cluster"),
//				Location:       datacenterExample.Location,
//				Connections: &dbaas.MongoClusterConnectionsArgs{
//					DatacenterId: datacenterExample.ID(),
//					LanId:        lanExample.ID(),
//					CidrLists: pulumi.StringArray{
//						pulumi.String("192.168.1.108/24"),
//					},
//				},
//				TemplateId: pulumi.String("6b78ea06-ee0e-4689-998c-fc9c46e781f6"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = random.NewRandomPassword(ctx, "clusterPassword", &random.RandomPasswordArgs{
//				Length:          pulumi.Int(16),
//				Special:         pulumi.Bool(true),
//				OverrideSpecial: pulumi.String("!#$%&*()-_=+[]{}<>:?"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Enterprise Edition
//
// **Enterprise Support: With MongoDB Enterprise, you gain access to professional support from the MongoDB team ensuring that you receive timely assistance and expert guidance when needed. IONOS offers enterprise-grade Service Level Agreements (SLAs), guaranteeing rapid response times and 24/7 support to address any critical issues that may arise.**
//
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/compute"
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/dbaas"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			datacenterExample, err := compute.NewDatacenter(ctx, "datacenterExample", &compute.DatacenterArgs{
//				Location:    pulumi.String("de/txl"),
//				Description: pulumi.String("Datacenter for testing dbaas cluster"),
//			})
//			if err != nil {
//				return err
//			}
//			lanExample, err := compute.NewLan(ctx, "lanExample", &compute.LanArgs{
//				DatacenterId: datacenterExample.ID(),
//				Public:       pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dbaas.NewMongoCluster(ctx, "exampleMongoCluster", &dbaas.MongoClusterArgs{
//				MaintenanceWindow: &dbaas.MongoClusterMaintenanceWindowArgs{
//					DayOfTheWeek: pulumi.String("Sunday"),
//					Time:         pulumi.String("09:00:00"),
//				},
//				MongodbVersion: pulumi.String("5.0"),
//				Instances:      pulumi.Int(3),
//				DisplayName:    pulumi.String("example_mongo_cluster"),
//				Location:       datacenterExample.Location,
//				Connections: &dbaas.MongoClusterConnectionsArgs{
//					DatacenterId: datacenterExample.ID(),
//					LanId:        lanExample.ID(),
//					CidrLists: pulumi.StringArray{
//						pulumi.String("192.168.1.108/24"),
//						pulumi.String("192.168.1.109/24"),
//						pulumi.String("192.168.1.110/24"),
//					},
//				},
//				Type:        pulumi.String("sharded-cluster"),
//				Shards:      pulumi.Int(2),
//				Edition:     pulumi.String("enterprise"),
//				Ram:         pulumi.Int(2048),
//				Cores:       pulumi.Int(1),
//				StorageSize: pulumi.Int(5120),
//				StorageType: pulumi.String("HDD"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = random.NewRandomPassword(ctx, "clusterPassword", &random.RandomPasswordArgs{
//				Length:          pulumi.Int(16),
//				Special:         pulumi.Bool(true),
//				OverrideSpecial: pulumi.String("!#$%&*()-_=+[]{}<>:?"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Resource DbaaS MongoDb Cluster can be imported using the `cluster_id`, e.g.
//
// ```sh
// $ pulumi import ionoscloud:dbaas/mongoCluster:MongoCluster mycluser {cluster uuid}
// ```
type MongoCluster struct {
	pulumi.CustomResourceState

	// [list]
	Backup MongoClusterBackupPtrOutput `pulumi:"backup"`
	// (Computed)The MongoDB Connector for Business Intelligence allows you to query a MongoDB database using SQL commands to aid in data analysis.
	BiConnector MongoClusterBiConnectorOutput `pulumi:"biConnector"`
	// [string] The physical location where the cluster will be created. This will be where all of your instances live. Updates to the value of the field force the cluster to be re-created. Available locations: de/txl, gb/lhr, es/vit
	ConnectionString pulumi.StringOutput `pulumi:"connectionString"`
	// [List] Details about the network connection for your cluster. Updates to the value of the field force the cluster to be re-created.
	Connections MongoClusterConnectionsOutput `pulumi:"connections"`
	// (Computed)[int] The number of CPU cores per replica. Required for enterprise edition.
	Cores pulumi.IntOutput `pulumi:"cores"`
	// [string] The name of your cluster. Updates to the value of the field force the cluster to be re-created.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Computed)[string] Cluster edition. Playground, business or enterprise.
	Edition pulumi.StringOutput `pulumi:"edition"`
	// [int] The total number of instances in the cluster (one master and n-1 standbys). Example: 1, 3, 5, 7. Updates to the value of the field force the cluster to be re-created.
	Instances pulumi.IntOutput `pulumi:"instances"`
	// [string] The physical location where the cluster will be created. Property cannot be modified after datacenter creation (disallowed in update requests). Available locations: de/txl, gb/lhr, es/vit. Update forces cluster re-creation.
	Location pulumi.StringOutput `pulumi:"location"`
	// (Computed)[string] A weekly 4 hour-long window, during which maintenance might occur.  Updates to the value of the field force the cluster to be re-created.
	MaintenanceWindow MongoClusterMaintenanceWindowOutput `pulumi:"maintenanceWindow"`
	// [string] The MongoDB version of your cluster. Updates to the value of the field force the cluster to be re-created.
	MongodbVersion pulumi.StringOutput `pulumi:"mongodbVersion"`
	// (Computed)[int]The amount of memory per instance in megabytes. Required for enterprise edition.
	Ram pulumi.IntOutput `pulumi:"ram"`
	// [int]The total number of shards in the cluster.
	Shards pulumi.IntPtrOutput `pulumi:"shards"`
	// (Computed)[int] The amount of storage per instance in MB. Required for enterprise edition.
	StorageSize pulumi.IntOutput `pulumi:"storageSize"`
	// (Computed)[String] The storage type used in your cluster. Required for enterprise edition.
	StorageType pulumi.StringOutput `pulumi:"storageType"`
	// [string] The unique ID of the template, which specifies the number of cores, storage size, and memory. Updates to the value of the field force the cluster to be re-created. Required for playground and business editions. Must not be provided for enterprise edition.
	TemplateId pulumi.StringPtrOutput `pulumi:"templateId"`
	// (Computed)[string]The cluster type, either `replicaset` or `sharded-cluster`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewMongoCluster registers a new resource with the given unique name, arguments, and options.
func NewMongoCluster(ctx *pulumi.Context,
	name string, args *MongoClusterArgs, opts ...pulumi.ResourceOption) (*MongoCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connections == nil {
		return nil, errors.New("invalid value for required argument 'Connections'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Instances == nil {
		return nil, errors.New("invalid value for required argument 'Instances'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.MongodbVersion == nil {
		return nil, errors.New("invalid value for required argument 'MongodbVersion'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MongoCluster
	err := ctx.RegisterResource("ionoscloud:dbaas/mongoCluster:MongoCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMongoCluster gets an existing MongoCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMongoCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MongoClusterState, opts ...pulumi.ResourceOption) (*MongoCluster, error) {
	var resource MongoCluster
	err := ctx.ReadResource("ionoscloud:dbaas/mongoCluster:MongoCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MongoCluster resources.
type mongoClusterState struct {
	// [list]
	Backup *MongoClusterBackup `pulumi:"backup"`
	// (Computed)The MongoDB Connector for Business Intelligence allows you to query a MongoDB database using SQL commands to aid in data analysis.
	BiConnector *MongoClusterBiConnector `pulumi:"biConnector"`
	// [string] The physical location where the cluster will be created. This will be where all of your instances live. Updates to the value of the field force the cluster to be re-created. Available locations: de/txl, gb/lhr, es/vit
	ConnectionString *string `pulumi:"connectionString"`
	// [List] Details about the network connection for your cluster. Updates to the value of the field force the cluster to be re-created.
	Connections *MongoClusterConnections `pulumi:"connections"`
	// (Computed)[int] The number of CPU cores per replica. Required for enterprise edition.
	Cores *int `pulumi:"cores"`
	// [string] The name of your cluster. Updates to the value of the field force the cluster to be re-created.
	DisplayName *string `pulumi:"displayName"`
	// (Computed)[string] Cluster edition. Playground, business or enterprise.
	Edition *string `pulumi:"edition"`
	// [int] The total number of instances in the cluster (one master and n-1 standbys). Example: 1, 3, 5, 7. Updates to the value of the field force the cluster to be re-created.
	Instances *int `pulumi:"instances"`
	// [string] The physical location where the cluster will be created. Property cannot be modified after datacenter creation (disallowed in update requests). Available locations: de/txl, gb/lhr, es/vit. Update forces cluster re-creation.
	Location *string `pulumi:"location"`
	// (Computed)[string] A weekly 4 hour-long window, during which maintenance might occur.  Updates to the value of the field force the cluster to be re-created.
	MaintenanceWindow *MongoClusterMaintenanceWindow `pulumi:"maintenanceWindow"`
	// [string] The MongoDB version of your cluster. Updates to the value of the field force the cluster to be re-created.
	MongodbVersion *string `pulumi:"mongodbVersion"`
	// (Computed)[int]The amount of memory per instance in megabytes. Required for enterprise edition.
	Ram *int `pulumi:"ram"`
	// [int]The total number of shards in the cluster.
	Shards *int `pulumi:"shards"`
	// (Computed)[int] The amount of storage per instance in MB. Required for enterprise edition.
	StorageSize *int `pulumi:"storageSize"`
	// (Computed)[String] The storage type used in your cluster. Required for enterprise edition.
	StorageType *string `pulumi:"storageType"`
	// [string] The unique ID of the template, which specifies the number of cores, storage size, and memory. Updates to the value of the field force the cluster to be re-created. Required for playground and business editions. Must not be provided for enterprise edition.
	TemplateId *string `pulumi:"templateId"`
	// (Computed)[string]The cluster type, either `replicaset` or `sharded-cluster`.
	Type *string `pulumi:"type"`
}

type MongoClusterState struct {
	// [list]
	Backup MongoClusterBackupPtrInput
	// (Computed)The MongoDB Connector for Business Intelligence allows you to query a MongoDB database using SQL commands to aid in data analysis.
	BiConnector MongoClusterBiConnectorPtrInput
	// [string] The physical location where the cluster will be created. This will be where all of your instances live. Updates to the value of the field force the cluster to be re-created. Available locations: de/txl, gb/lhr, es/vit
	ConnectionString pulumi.StringPtrInput
	// [List] Details about the network connection for your cluster. Updates to the value of the field force the cluster to be re-created.
	Connections MongoClusterConnectionsPtrInput
	// (Computed)[int] The number of CPU cores per replica. Required for enterprise edition.
	Cores pulumi.IntPtrInput
	// [string] The name of your cluster. Updates to the value of the field force the cluster to be re-created.
	DisplayName pulumi.StringPtrInput
	// (Computed)[string] Cluster edition. Playground, business or enterprise.
	Edition pulumi.StringPtrInput
	// [int] The total number of instances in the cluster (one master and n-1 standbys). Example: 1, 3, 5, 7. Updates to the value of the field force the cluster to be re-created.
	Instances pulumi.IntPtrInput
	// [string] The physical location where the cluster will be created. Property cannot be modified after datacenter creation (disallowed in update requests). Available locations: de/txl, gb/lhr, es/vit. Update forces cluster re-creation.
	Location pulumi.StringPtrInput
	// (Computed)[string] A weekly 4 hour-long window, during which maintenance might occur.  Updates to the value of the field force the cluster to be re-created.
	MaintenanceWindow MongoClusterMaintenanceWindowPtrInput
	// [string] The MongoDB version of your cluster. Updates to the value of the field force the cluster to be re-created.
	MongodbVersion pulumi.StringPtrInput
	// (Computed)[int]The amount of memory per instance in megabytes. Required for enterprise edition.
	Ram pulumi.IntPtrInput
	// [int]The total number of shards in the cluster.
	Shards pulumi.IntPtrInput
	// (Computed)[int] The amount of storage per instance in MB. Required for enterprise edition.
	StorageSize pulumi.IntPtrInput
	// (Computed)[String] The storage type used in your cluster. Required for enterprise edition.
	StorageType pulumi.StringPtrInput
	// [string] The unique ID of the template, which specifies the number of cores, storage size, and memory. Updates to the value of the field force the cluster to be re-created. Required for playground and business editions. Must not be provided for enterprise edition.
	TemplateId pulumi.StringPtrInput
	// (Computed)[string]The cluster type, either `replicaset` or `sharded-cluster`.
	Type pulumi.StringPtrInput
}

func (MongoClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*mongoClusterState)(nil)).Elem()
}

type mongoClusterArgs struct {
	// [list]
	Backup *MongoClusterBackup `pulumi:"backup"`
	// (Computed)The MongoDB Connector for Business Intelligence allows you to query a MongoDB database using SQL commands to aid in data analysis.
	BiConnector *MongoClusterBiConnector `pulumi:"biConnector"`
	// [List] Details about the network connection for your cluster. Updates to the value of the field force the cluster to be re-created.
	Connections MongoClusterConnections `pulumi:"connections"`
	// (Computed)[int] The number of CPU cores per replica. Required for enterprise edition.
	Cores *int `pulumi:"cores"`
	// [string] The name of your cluster. Updates to the value of the field force the cluster to be re-created.
	DisplayName string `pulumi:"displayName"`
	// (Computed)[string] Cluster edition. Playground, business or enterprise.
	Edition *string `pulumi:"edition"`
	// [int] The total number of instances in the cluster (one master and n-1 standbys). Example: 1, 3, 5, 7. Updates to the value of the field force the cluster to be re-created.
	Instances int `pulumi:"instances"`
	// [string] The physical location where the cluster will be created. Property cannot be modified after datacenter creation (disallowed in update requests). Available locations: de/txl, gb/lhr, es/vit. Update forces cluster re-creation.
	Location string `pulumi:"location"`
	// (Computed)[string] A weekly 4 hour-long window, during which maintenance might occur.  Updates to the value of the field force the cluster to be re-created.
	MaintenanceWindow *MongoClusterMaintenanceWindow `pulumi:"maintenanceWindow"`
	// [string] The MongoDB version of your cluster. Updates to the value of the field force the cluster to be re-created.
	MongodbVersion string `pulumi:"mongodbVersion"`
	// (Computed)[int]The amount of memory per instance in megabytes. Required for enterprise edition.
	Ram *int `pulumi:"ram"`
	// [int]The total number of shards in the cluster.
	Shards *int `pulumi:"shards"`
	// (Computed)[int] The amount of storage per instance in MB. Required for enterprise edition.
	StorageSize *int `pulumi:"storageSize"`
	// (Computed)[String] The storage type used in your cluster. Required for enterprise edition.
	StorageType *string `pulumi:"storageType"`
	// [string] The unique ID of the template, which specifies the number of cores, storage size, and memory. Updates to the value of the field force the cluster to be re-created. Required for playground and business editions. Must not be provided for enterprise edition.
	TemplateId *string `pulumi:"templateId"`
	// (Computed)[string]The cluster type, either `replicaset` or `sharded-cluster`.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a MongoCluster resource.
type MongoClusterArgs struct {
	// [list]
	Backup MongoClusterBackupPtrInput
	// (Computed)The MongoDB Connector for Business Intelligence allows you to query a MongoDB database using SQL commands to aid in data analysis.
	BiConnector MongoClusterBiConnectorPtrInput
	// [List] Details about the network connection for your cluster. Updates to the value of the field force the cluster to be re-created.
	Connections MongoClusterConnectionsInput
	// (Computed)[int] The number of CPU cores per replica. Required for enterprise edition.
	Cores pulumi.IntPtrInput
	// [string] The name of your cluster. Updates to the value of the field force the cluster to be re-created.
	DisplayName pulumi.StringInput
	// (Computed)[string] Cluster edition. Playground, business or enterprise.
	Edition pulumi.StringPtrInput
	// [int] The total number of instances in the cluster (one master and n-1 standbys). Example: 1, 3, 5, 7. Updates to the value of the field force the cluster to be re-created.
	Instances pulumi.IntInput
	// [string] The physical location where the cluster will be created. Property cannot be modified after datacenter creation (disallowed in update requests). Available locations: de/txl, gb/lhr, es/vit. Update forces cluster re-creation.
	Location pulumi.StringInput
	// (Computed)[string] A weekly 4 hour-long window, during which maintenance might occur.  Updates to the value of the field force the cluster to be re-created.
	MaintenanceWindow MongoClusterMaintenanceWindowPtrInput
	// [string] The MongoDB version of your cluster. Updates to the value of the field force the cluster to be re-created.
	MongodbVersion pulumi.StringInput
	// (Computed)[int]The amount of memory per instance in megabytes. Required for enterprise edition.
	Ram pulumi.IntPtrInput
	// [int]The total number of shards in the cluster.
	Shards pulumi.IntPtrInput
	// (Computed)[int] The amount of storage per instance in MB. Required for enterprise edition.
	StorageSize pulumi.IntPtrInput
	// (Computed)[String] The storage type used in your cluster. Required for enterprise edition.
	StorageType pulumi.StringPtrInput
	// [string] The unique ID of the template, which specifies the number of cores, storage size, and memory. Updates to the value of the field force the cluster to be re-created. Required for playground and business editions. Must not be provided for enterprise edition.
	TemplateId pulumi.StringPtrInput
	// (Computed)[string]The cluster type, either `replicaset` or `sharded-cluster`.
	Type pulumi.StringPtrInput
}

func (MongoClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mongoClusterArgs)(nil)).Elem()
}

type MongoClusterInput interface {
	pulumi.Input

	ToMongoClusterOutput() MongoClusterOutput
	ToMongoClusterOutputWithContext(ctx context.Context) MongoClusterOutput
}

func (*MongoCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoCluster)(nil)).Elem()
}

func (i *MongoCluster) ToMongoClusterOutput() MongoClusterOutput {
	return i.ToMongoClusterOutputWithContext(context.Background())
}

func (i *MongoCluster) ToMongoClusterOutputWithContext(ctx context.Context) MongoClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoClusterOutput)
}

// MongoClusterArrayInput is an input type that accepts MongoClusterArray and MongoClusterArrayOutput values.
// You can construct a concrete instance of `MongoClusterArrayInput` via:
//
//	MongoClusterArray{ MongoClusterArgs{...} }
type MongoClusterArrayInput interface {
	pulumi.Input

	ToMongoClusterArrayOutput() MongoClusterArrayOutput
	ToMongoClusterArrayOutputWithContext(context.Context) MongoClusterArrayOutput
}

type MongoClusterArray []MongoClusterInput

func (MongoClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongoCluster)(nil)).Elem()
}

func (i MongoClusterArray) ToMongoClusterArrayOutput() MongoClusterArrayOutput {
	return i.ToMongoClusterArrayOutputWithContext(context.Background())
}

func (i MongoClusterArray) ToMongoClusterArrayOutputWithContext(ctx context.Context) MongoClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoClusterArrayOutput)
}

// MongoClusterMapInput is an input type that accepts MongoClusterMap and MongoClusterMapOutput values.
// You can construct a concrete instance of `MongoClusterMapInput` via:
//
//	MongoClusterMap{ "key": MongoClusterArgs{...} }
type MongoClusterMapInput interface {
	pulumi.Input

	ToMongoClusterMapOutput() MongoClusterMapOutput
	ToMongoClusterMapOutputWithContext(context.Context) MongoClusterMapOutput
}

type MongoClusterMap map[string]MongoClusterInput

func (MongoClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongoCluster)(nil)).Elem()
}

func (i MongoClusterMap) ToMongoClusterMapOutput() MongoClusterMapOutput {
	return i.ToMongoClusterMapOutputWithContext(context.Background())
}

func (i MongoClusterMap) ToMongoClusterMapOutputWithContext(ctx context.Context) MongoClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoClusterMapOutput)
}

type MongoClusterOutput struct{ *pulumi.OutputState }

func (MongoClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoCluster)(nil)).Elem()
}

func (o MongoClusterOutput) ToMongoClusterOutput() MongoClusterOutput {
	return o
}

func (o MongoClusterOutput) ToMongoClusterOutputWithContext(ctx context.Context) MongoClusterOutput {
	return o
}

// [list]
func (o MongoClusterOutput) Backup() MongoClusterBackupPtrOutput {
	return o.ApplyT(func(v *MongoCluster) MongoClusterBackupPtrOutput { return v.Backup }).(MongoClusterBackupPtrOutput)
}

// (Computed)The MongoDB Connector for Business Intelligence allows you to query a MongoDB database using SQL commands to aid in data analysis.
func (o MongoClusterOutput) BiConnector() MongoClusterBiConnectorOutput {
	return o.ApplyT(func(v *MongoCluster) MongoClusterBiConnectorOutput { return v.BiConnector }).(MongoClusterBiConnectorOutput)
}

// [string] The physical location where the cluster will be created. This will be where all of your instances live. Updates to the value of the field force the cluster to be re-created. Available locations: de/txl, gb/lhr, es/vit
func (o MongoClusterOutput) ConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoCluster) pulumi.StringOutput { return v.ConnectionString }).(pulumi.StringOutput)
}

// [List] Details about the network connection for your cluster. Updates to the value of the field force the cluster to be re-created.
func (o MongoClusterOutput) Connections() MongoClusterConnectionsOutput {
	return o.ApplyT(func(v *MongoCluster) MongoClusterConnectionsOutput { return v.Connections }).(MongoClusterConnectionsOutput)
}

// (Computed)[int] The number of CPU cores per replica. Required for enterprise edition.
func (o MongoClusterOutput) Cores() pulumi.IntOutput {
	return o.ApplyT(func(v *MongoCluster) pulumi.IntOutput { return v.Cores }).(pulumi.IntOutput)
}

// [string] The name of your cluster. Updates to the value of the field force the cluster to be re-created.
func (o MongoClusterOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoCluster) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// (Computed)[string] Cluster edition. Playground, business or enterprise.
func (o MongoClusterOutput) Edition() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoCluster) pulumi.StringOutput { return v.Edition }).(pulumi.StringOutput)
}

// [int] The total number of instances in the cluster (one master and n-1 standbys). Example: 1, 3, 5, 7. Updates to the value of the field force the cluster to be re-created.
func (o MongoClusterOutput) Instances() pulumi.IntOutput {
	return o.ApplyT(func(v *MongoCluster) pulumi.IntOutput { return v.Instances }).(pulumi.IntOutput)
}

// [string] The physical location where the cluster will be created. Property cannot be modified after datacenter creation (disallowed in update requests). Available locations: de/txl, gb/lhr, es/vit. Update forces cluster re-creation.
func (o MongoClusterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoCluster) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// (Computed)[string] A weekly 4 hour-long window, during which maintenance might occur.  Updates to the value of the field force the cluster to be re-created.
func (o MongoClusterOutput) MaintenanceWindow() MongoClusterMaintenanceWindowOutput {
	return o.ApplyT(func(v *MongoCluster) MongoClusterMaintenanceWindowOutput { return v.MaintenanceWindow }).(MongoClusterMaintenanceWindowOutput)
}

// [string] The MongoDB version of your cluster. Updates to the value of the field force the cluster to be re-created.
func (o MongoClusterOutput) MongodbVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoCluster) pulumi.StringOutput { return v.MongodbVersion }).(pulumi.StringOutput)
}

// (Computed)[int]The amount of memory per instance in megabytes. Required for enterprise edition.
func (o MongoClusterOutput) Ram() pulumi.IntOutput {
	return o.ApplyT(func(v *MongoCluster) pulumi.IntOutput { return v.Ram }).(pulumi.IntOutput)
}

// [int]The total number of shards in the cluster.
func (o MongoClusterOutput) Shards() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongoCluster) pulumi.IntPtrOutput { return v.Shards }).(pulumi.IntPtrOutput)
}

// (Computed)[int] The amount of storage per instance in MB. Required for enterprise edition.
func (o MongoClusterOutput) StorageSize() pulumi.IntOutput {
	return o.ApplyT(func(v *MongoCluster) pulumi.IntOutput { return v.StorageSize }).(pulumi.IntOutput)
}

// (Computed)[String] The storage type used in your cluster. Required for enterprise edition.
func (o MongoClusterOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoCluster) pulumi.StringOutput { return v.StorageType }).(pulumi.StringOutput)
}

// [string] The unique ID of the template, which specifies the number of cores, storage size, and memory. Updates to the value of the field force the cluster to be re-created. Required for playground and business editions. Must not be provided for enterprise edition.
func (o MongoClusterOutput) TemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoCluster) pulumi.StringPtrOutput { return v.TemplateId }).(pulumi.StringPtrOutput)
}

// (Computed)[string]The cluster type, either `replicaset` or `sharded-cluster`.
func (o MongoClusterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoCluster) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type MongoClusterArrayOutput struct{ *pulumi.OutputState }

func (MongoClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongoCluster)(nil)).Elem()
}

func (o MongoClusterArrayOutput) ToMongoClusterArrayOutput() MongoClusterArrayOutput {
	return o
}

func (o MongoClusterArrayOutput) ToMongoClusterArrayOutputWithContext(ctx context.Context) MongoClusterArrayOutput {
	return o
}

func (o MongoClusterArrayOutput) Index(i pulumi.IntInput) MongoClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MongoCluster {
		return vs[0].([]*MongoCluster)[vs[1].(int)]
	}).(MongoClusterOutput)
}

type MongoClusterMapOutput struct{ *pulumi.OutputState }

func (MongoClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongoCluster)(nil)).Elem()
}

func (o MongoClusterMapOutput) ToMongoClusterMapOutput() MongoClusterMapOutput {
	return o
}

func (o MongoClusterMapOutput) ToMongoClusterMapOutputWithContext(ctx context.Context) MongoClusterMapOutput {
	return o
}

func (o MongoClusterMapOutput) MapIndex(k pulumi.StringInput) MongoClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MongoCluster {
		return vs[0].(map[string]*MongoCluster)[vs[1].(string)]
	}).(MongoClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MongoClusterInput)(nil)).Elem(), &MongoCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongoClusterArrayInput)(nil)).Elem(), MongoClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongoClusterMapInput)(nil)).Elem(), MongoClusterMap{})
	pulumi.RegisterOutputType(MongoClusterOutput{})
	pulumi.RegisterOutputType(MongoClusterArrayOutput{})
	pulumi.RegisterOutputType(MongoClusterMapOutput{})
}
