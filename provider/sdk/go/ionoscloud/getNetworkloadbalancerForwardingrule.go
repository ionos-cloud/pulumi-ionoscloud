// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **Network Load Balancer Forwarding Rule data source** can be used to search for and return existing network forwarding rules.
// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
// When this happens, please refine your search string so that it is specific enough to return only one result.
func GetNetworkloadbalancerForwardingrule(ctx *pulumi.Context, args *GetNetworkloadbalancerForwardingruleArgs, opts ...pulumi.InvokeOption) (*GetNetworkloadbalancerForwardingruleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetNetworkloadbalancerForwardingruleResult
	err := ctx.Invoke("ionoscloud:index/getNetworkloadbalancerForwardingrule:getNetworkloadbalancerForwardingrule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNetworkloadbalancerForwardingrule.
type GetNetworkloadbalancerForwardingruleArgs struct {
	// Datacenter's UUID.
	DatacenterId string `pulumi:"datacenterId"`
	// ID of the network load balancer forwarding rule you want to search for.
	//
	// Both `datacenterId` and `networkloadbalancerId` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
	Id *string `pulumi:"id"`
	// Name of an existing network load balancer forwarding rule that you want to search for.
	Name *string `pulumi:"name"`
	// Network Load Balancer's UUID.
	NetworkloadbalancerId string `pulumi:"networkloadbalancerId"`
}

// A collection of values returned by getNetworkloadbalancerForwardingrule.
type GetNetworkloadbalancerForwardingruleResult struct {
	// Algorithm for the balancing.
	Algorithm    string `pulumi:"algorithm"`
	DatacenterId string `pulumi:"datacenterId"`
	// Health check attributes for Network Load Balancer forwarding rule target.
	HealthChecks []GetNetworkloadbalancerForwardingruleHealthCheck `pulumi:"healthChecks"`
	// The id of that Network Load Balancer forwarding rule.
	Id *string `pulumi:"id"`
	// Listening IP. (inbound)
	ListenerIp string `pulumi:"listenerIp"`
	// Listening port number. (inbound) (range: 1 to 65535)
	ListenerPort int `pulumi:"listenerPort"`
	// The name of that Network Load Balancer forwarding rule.
	Name                  *string `pulumi:"name"`
	NetworkloadbalancerId string  `pulumi:"networkloadbalancerId"`
	// Protocol of the balancing.
	Protocol string `pulumi:"protocol"`
	// Array of items in that collection.
	Targets []GetNetworkloadbalancerForwardingruleTarget `pulumi:"targets"`
}

func GetNetworkloadbalancerForwardingruleOutput(ctx *pulumi.Context, args GetNetworkloadbalancerForwardingruleOutputArgs, opts ...pulumi.InvokeOption) GetNetworkloadbalancerForwardingruleResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetNetworkloadbalancerForwardingruleResultOutput, error) {
			args := v.(GetNetworkloadbalancerForwardingruleArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ionoscloud:index/getNetworkloadbalancerForwardingrule:getNetworkloadbalancerForwardingrule", args, GetNetworkloadbalancerForwardingruleResultOutput{}, options).(GetNetworkloadbalancerForwardingruleResultOutput), nil
		}).(GetNetworkloadbalancerForwardingruleResultOutput)
}

// A collection of arguments for invoking getNetworkloadbalancerForwardingrule.
type GetNetworkloadbalancerForwardingruleOutputArgs struct {
	// Datacenter's UUID.
	DatacenterId pulumi.StringInput `pulumi:"datacenterId"`
	// ID of the network load balancer forwarding rule you want to search for.
	//
	// Both `datacenterId` and `networkloadbalancerId` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of an existing network load balancer forwarding rule that you want to search for.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Network Load Balancer's UUID.
	NetworkloadbalancerId pulumi.StringInput `pulumi:"networkloadbalancerId"`
}

func (GetNetworkloadbalancerForwardingruleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkloadbalancerForwardingruleArgs)(nil)).Elem()
}

// A collection of values returned by getNetworkloadbalancerForwardingrule.
type GetNetworkloadbalancerForwardingruleResultOutput struct{ *pulumi.OutputState }

func (GetNetworkloadbalancerForwardingruleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkloadbalancerForwardingruleResult)(nil)).Elem()
}

func (o GetNetworkloadbalancerForwardingruleResultOutput) ToGetNetworkloadbalancerForwardingruleResultOutput() GetNetworkloadbalancerForwardingruleResultOutput {
	return o
}

func (o GetNetworkloadbalancerForwardingruleResultOutput) ToGetNetworkloadbalancerForwardingruleResultOutputWithContext(ctx context.Context) GetNetworkloadbalancerForwardingruleResultOutput {
	return o
}

// Algorithm for the balancing.
func (o GetNetworkloadbalancerForwardingruleResultOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkloadbalancerForwardingruleResult) string { return v.Algorithm }).(pulumi.StringOutput)
}

func (o GetNetworkloadbalancerForwardingruleResultOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkloadbalancerForwardingruleResult) string { return v.DatacenterId }).(pulumi.StringOutput)
}

// Health check attributes for Network Load Balancer forwarding rule target.
func (o GetNetworkloadbalancerForwardingruleResultOutput) HealthChecks() GetNetworkloadbalancerForwardingruleHealthCheckArrayOutput {
	return o.ApplyT(func(v GetNetworkloadbalancerForwardingruleResult) []GetNetworkloadbalancerForwardingruleHealthCheck {
		return v.HealthChecks
	}).(GetNetworkloadbalancerForwardingruleHealthCheckArrayOutput)
}

// The id of that Network Load Balancer forwarding rule.
func (o GetNetworkloadbalancerForwardingruleResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNetworkloadbalancerForwardingruleResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Listening IP. (inbound)
func (o GetNetworkloadbalancerForwardingruleResultOutput) ListenerIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkloadbalancerForwardingruleResult) string { return v.ListenerIp }).(pulumi.StringOutput)
}

// Listening port number. (inbound) (range: 1 to 65535)
func (o GetNetworkloadbalancerForwardingruleResultOutput) ListenerPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkloadbalancerForwardingruleResult) int { return v.ListenerPort }).(pulumi.IntOutput)
}

// The name of that Network Load Balancer forwarding rule.
func (o GetNetworkloadbalancerForwardingruleResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNetworkloadbalancerForwardingruleResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetNetworkloadbalancerForwardingruleResultOutput) NetworkloadbalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkloadbalancerForwardingruleResult) string { return v.NetworkloadbalancerId }).(pulumi.StringOutput)
}

// Protocol of the balancing.
func (o GetNetworkloadbalancerForwardingruleResultOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkloadbalancerForwardingruleResult) string { return v.Protocol }).(pulumi.StringOutput)
}

// Array of items in that collection.
func (o GetNetworkloadbalancerForwardingruleResultOutput) Targets() GetNetworkloadbalancerForwardingruleTargetArrayOutput {
	return o.ApplyT(func(v GetNetworkloadbalancerForwardingruleResult) []GetNetworkloadbalancerForwardingruleTarget {
		return v.Targets
	}).(GetNetworkloadbalancerForwardingruleTargetArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNetworkloadbalancerForwardingruleResultOutput{})
}
