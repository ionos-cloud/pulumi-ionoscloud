// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nfs

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ClusterConnections struct {
	// The ID of the datacenter where the Network File Storage cluster is located.
	DatacenterId string `pulumi:"datacenterId"`
	// The IP address and prefix of the Network File Storage cluster. The IP address can be either IPv4 or IPv6. The IP address has to be given with CIDR notation.
	IpAddress string `pulumi:"ipAddress"`
	// The Private LAN to which the Network File Storage cluster must be connected.
	Lan string `pulumi:"lan"`
}

// ClusterConnectionsInput is an input type that accepts ClusterConnectionsArgs and ClusterConnectionsOutput values.
// You can construct a concrete instance of `ClusterConnectionsInput` via:
//
//	ClusterConnectionsArgs{...}
type ClusterConnectionsInput interface {
	pulumi.Input

	ToClusterConnectionsOutput() ClusterConnectionsOutput
	ToClusterConnectionsOutputWithContext(context.Context) ClusterConnectionsOutput
}

type ClusterConnectionsArgs struct {
	// The ID of the datacenter where the Network File Storage cluster is located.
	DatacenterId pulumi.StringInput `pulumi:"datacenterId"`
	// The IP address and prefix of the Network File Storage cluster. The IP address can be either IPv4 or IPv6. The IP address has to be given with CIDR notation.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The Private LAN to which the Network File Storage cluster must be connected.
	Lan pulumi.StringInput `pulumi:"lan"`
}

func (ClusterConnectionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConnections)(nil)).Elem()
}

func (i ClusterConnectionsArgs) ToClusterConnectionsOutput() ClusterConnectionsOutput {
	return i.ToClusterConnectionsOutputWithContext(context.Background())
}

func (i ClusterConnectionsArgs) ToClusterConnectionsOutputWithContext(ctx context.Context) ClusterConnectionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConnectionsOutput)
}

func (i ClusterConnectionsArgs) ToClusterConnectionsPtrOutput() ClusterConnectionsPtrOutput {
	return i.ToClusterConnectionsPtrOutputWithContext(context.Background())
}

func (i ClusterConnectionsArgs) ToClusterConnectionsPtrOutputWithContext(ctx context.Context) ClusterConnectionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConnectionsOutput).ToClusterConnectionsPtrOutputWithContext(ctx)
}

// ClusterConnectionsPtrInput is an input type that accepts ClusterConnectionsArgs, ClusterConnectionsPtr and ClusterConnectionsPtrOutput values.
// You can construct a concrete instance of `ClusterConnectionsPtrInput` via:
//
//	        ClusterConnectionsArgs{...}
//
//	or:
//
//	        nil
type ClusterConnectionsPtrInput interface {
	pulumi.Input

	ToClusterConnectionsPtrOutput() ClusterConnectionsPtrOutput
	ToClusterConnectionsPtrOutputWithContext(context.Context) ClusterConnectionsPtrOutput
}

type clusterConnectionsPtrType ClusterConnectionsArgs

func ClusterConnectionsPtr(v *ClusterConnectionsArgs) ClusterConnectionsPtrInput {
	return (*clusterConnectionsPtrType)(v)
}

func (*clusterConnectionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterConnections)(nil)).Elem()
}

func (i *clusterConnectionsPtrType) ToClusterConnectionsPtrOutput() ClusterConnectionsPtrOutput {
	return i.ToClusterConnectionsPtrOutputWithContext(context.Background())
}

func (i *clusterConnectionsPtrType) ToClusterConnectionsPtrOutputWithContext(ctx context.Context) ClusterConnectionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConnectionsPtrOutput)
}

type ClusterConnectionsOutput struct{ *pulumi.OutputState }

func (ClusterConnectionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConnections)(nil)).Elem()
}

func (o ClusterConnectionsOutput) ToClusterConnectionsOutput() ClusterConnectionsOutput {
	return o
}

func (o ClusterConnectionsOutput) ToClusterConnectionsOutputWithContext(ctx context.Context) ClusterConnectionsOutput {
	return o
}

func (o ClusterConnectionsOutput) ToClusterConnectionsPtrOutput() ClusterConnectionsPtrOutput {
	return o.ToClusterConnectionsPtrOutputWithContext(context.Background())
}

func (o ClusterConnectionsOutput) ToClusterConnectionsPtrOutputWithContext(ctx context.Context) ClusterConnectionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterConnections) *ClusterConnections {
		return &v
	}).(ClusterConnectionsPtrOutput)
}

// The ID of the datacenter where the Network File Storage cluster is located.
func (o ClusterConnectionsOutput) DatacenterId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterConnections) string { return v.DatacenterId }).(pulumi.StringOutput)
}

// The IP address and prefix of the Network File Storage cluster. The IP address can be either IPv4 or IPv6. The IP address has to be given with CIDR notation.
func (o ClusterConnectionsOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterConnections) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The Private LAN to which the Network File Storage cluster must be connected.
func (o ClusterConnectionsOutput) Lan() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterConnections) string { return v.Lan }).(pulumi.StringOutput)
}

type ClusterConnectionsPtrOutput struct{ *pulumi.OutputState }

func (ClusterConnectionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterConnections)(nil)).Elem()
}

func (o ClusterConnectionsPtrOutput) ToClusterConnectionsPtrOutput() ClusterConnectionsPtrOutput {
	return o
}

func (o ClusterConnectionsPtrOutput) ToClusterConnectionsPtrOutputWithContext(ctx context.Context) ClusterConnectionsPtrOutput {
	return o
}

func (o ClusterConnectionsPtrOutput) Elem() ClusterConnectionsOutput {
	return o.ApplyT(func(v *ClusterConnections) ClusterConnections {
		if v != nil {
			return *v
		}
		var ret ClusterConnections
		return ret
	}).(ClusterConnectionsOutput)
}

// The ID of the datacenter where the Network File Storage cluster is located.
func (o ClusterConnectionsPtrOutput) DatacenterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterConnections) *string {
		if v == nil {
			return nil
		}
		return &v.DatacenterId
	}).(pulumi.StringPtrOutput)
}

// The IP address and prefix of the Network File Storage cluster. The IP address can be either IPv4 or IPv6. The IP address has to be given with CIDR notation.
func (o ClusterConnectionsPtrOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterConnections) *string {
		if v == nil {
			return nil
		}
		return &v.IpAddress
	}).(pulumi.StringPtrOutput)
}

// The Private LAN to which the Network File Storage cluster must be connected.
func (o ClusterConnectionsPtrOutput) Lan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterConnections) *string {
		if v == nil {
			return nil
		}
		return &v.Lan
	}).(pulumi.StringPtrOutput)
}

type ClusterNfs struct {
	// The minimum supported version of the NFS cluster. Supported values: `4.2`. Default is `4.2`.
	MinVersion *string `pulumi:"minVersion"`
}

// ClusterNfsInput is an input type that accepts ClusterNfsArgs and ClusterNfsOutput values.
// You can construct a concrete instance of `ClusterNfsInput` via:
//
//	ClusterNfsArgs{...}
type ClusterNfsInput interface {
	pulumi.Input

	ToClusterNfsOutput() ClusterNfsOutput
	ToClusterNfsOutputWithContext(context.Context) ClusterNfsOutput
}

type ClusterNfsArgs struct {
	// The minimum supported version of the NFS cluster. Supported values: `4.2`. Default is `4.2`.
	MinVersion pulumi.StringPtrInput `pulumi:"minVersion"`
}

func (ClusterNfsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNfs)(nil)).Elem()
}

func (i ClusterNfsArgs) ToClusterNfsOutput() ClusterNfsOutput {
	return i.ToClusterNfsOutputWithContext(context.Background())
}

func (i ClusterNfsArgs) ToClusterNfsOutputWithContext(ctx context.Context) ClusterNfsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNfsOutput)
}

func (i ClusterNfsArgs) ToClusterNfsPtrOutput() ClusterNfsPtrOutput {
	return i.ToClusterNfsPtrOutputWithContext(context.Background())
}

func (i ClusterNfsArgs) ToClusterNfsPtrOutputWithContext(ctx context.Context) ClusterNfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNfsOutput).ToClusterNfsPtrOutputWithContext(ctx)
}

// ClusterNfsPtrInput is an input type that accepts ClusterNfsArgs, ClusterNfsPtr and ClusterNfsPtrOutput values.
// You can construct a concrete instance of `ClusterNfsPtrInput` via:
//
//	        ClusterNfsArgs{...}
//
//	or:
//
//	        nil
type ClusterNfsPtrInput interface {
	pulumi.Input

	ToClusterNfsPtrOutput() ClusterNfsPtrOutput
	ToClusterNfsPtrOutputWithContext(context.Context) ClusterNfsPtrOutput
}

type clusterNfsPtrType ClusterNfsArgs

func ClusterNfsPtr(v *ClusterNfsArgs) ClusterNfsPtrInput {
	return (*clusterNfsPtrType)(v)
}

func (*clusterNfsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterNfs)(nil)).Elem()
}

func (i *clusterNfsPtrType) ToClusterNfsPtrOutput() ClusterNfsPtrOutput {
	return i.ToClusterNfsPtrOutputWithContext(context.Background())
}

func (i *clusterNfsPtrType) ToClusterNfsPtrOutputWithContext(ctx context.Context) ClusterNfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNfsPtrOutput)
}

type ClusterNfsOutput struct{ *pulumi.OutputState }

func (ClusterNfsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNfs)(nil)).Elem()
}

func (o ClusterNfsOutput) ToClusterNfsOutput() ClusterNfsOutput {
	return o
}

func (o ClusterNfsOutput) ToClusterNfsOutputWithContext(ctx context.Context) ClusterNfsOutput {
	return o
}

func (o ClusterNfsOutput) ToClusterNfsPtrOutput() ClusterNfsPtrOutput {
	return o.ToClusterNfsPtrOutputWithContext(context.Background())
}

func (o ClusterNfsOutput) ToClusterNfsPtrOutputWithContext(ctx context.Context) ClusterNfsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterNfs) *ClusterNfs {
		return &v
	}).(ClusterNfsPtrOutput)
}

// The minimum supported version of the NFS cluster. Supported values: `4.2`. Default is `4.2`.
func (o ClusterNfsOutput) MinVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterNfs) *string { return v.MinVersion }).(pulumi.StringPtrOutput)
}

type ClusterNfsPtrOutput struct{ *pulumi.OutputState }

func (ClusterNfsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterNfs)(nil)).Elem()
}

func (o ClusterNfsPtrOutput) ToClusterNfsPtrOutput() ClusterNfsPtrOutput {
	return o
}

func (o ClusterNfsPtrOutput) ToClusterNfsPtrOutputWithContext(ctx context.Context) ClusterNfsPtrOutput {
	return o
}

func (o ClusterNfsPtrOutput) Elem() ClusterNfsOutput {
	return o.ApplyT(func(v *ClusterNfs) ClusterNfs {
		if v != nil {
			return *v
		}
		var ret ClusterNfs
		return ret
	}).(ClusterNfsOutput)
}

// The minimum supported version of the NFS cluster. Supported values: `4.2`. Default is `4.2`.
func (o ClusterNfsPtrOutput) MinVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterNfs) *string {
		if v == nil {
			return nil
		}
		return v.MinVersion
	}).(pulumi.StringPtrOutput)
}

type ShareClientGroup struct {
	// Optional description for the clients groups.
	Description *string `pulumi:"description"`
	// A singular host allowed to connect to the share. The host can be specified as IP address and can be either IPv4 or IPv6.
	Hosts []string `pulumi:"hosts"`
	// The allowed host or network to which the export is being shared. The IP address can be either IPv4 or IPv6 and has to be given with CIDR notation.
	IpNetworks []string `pulumi:"ipNetworks"`
	// NFS specific configurations. Each configuration includes:
	Nfs *ShareClientGroupNfs `pulumi:"nfs"`
}

// ShareClientGroupInput is an input type that accepts ShareClientGroupArgs and ShareClientGroupOutput values.
// You can construct a concrete instance of `ShareClientGroupInput` via:
//
//	ShareClientGroupArgs{...}
type ShareClientGroupInput interface {
	pulumi.Input

	ToShareClientGroupOutput() ShareClientGroupOutput
	ToShareClientGroupOutputWithContext(context.Context) ShareClientGroupOutput
}

type ShareClientGroupArgs struct {
	// Optional description for the clients groups.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// A singular host allowed to connect to the share. The host can be specified as IP address and can be either IPv4 or IPv6.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// The allowed host or network to which the export is being shared. The IP address can be either IPv4 or IPv6 and has to be given with CIDR notation.
	IpNetworks pulumi.StringArrayInput `pulumi:"ipNetworks"`
	// NFS specific configurations. Each configuration includes:
	Nfs ShareClientGroupNfsPtrInput `pulumi:"nfs"`
}

func (ShareClientGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShareClientGroup)(nil)).Elem()
}

func (i ShareClientGroupArgs) ToShareClientGroupOutput() ShareClientGroupOutput {
	return i.ToShareClientGroupOutputWithContext(context.Background())
}

func (i ShareClientGroupArgs) ToShareClientGroupOutputWithContext(ctx context.Context) ShareClientGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareClientGroupOutput)
}

// ShareClientGroupArrayInput is an input type that accepts ShareClientGroupArray and ShareClientGroupArrayOutput values.
// You can construct a concrete instance of `ShareClientGroupArrayInput` via:
//
//	ShareClientGroupArray{ ShareClientGroupArgs{...} }
type ShareClientGroupArrayInput interface {
	pulumi.Input

	ToShareClientGroupArrayOutput() ShareClientGroupArrayOutput
	ToShareClientGroupArrayOutputWithContext(context.Context) ShareClientGroupArrayOutput
}

type ShareClientGroupArray []ShareClientGroupInput

func (ShareClientGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ShareClientGroup)(nil)).Elem()
}

func (i ShareClientGroupArray) ToShareClientGroupArrayOutput() ShareClientGroupArrayOutput {
	return i.ToShareClientGroupArrayOutputWithContext(context.Background())
}

func (i ShareClientGroupArray) ToShareClientGroupArrayOutputWithContext(ctx context.Context) ShareClientGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareClientGroupArrayOutput)
}

type ShareClientGroupOutput struct{ *pulumi.OutputState }

func (ShareClientGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShareClientGroup)(nil)).Elem()
}

func (o ShareClientGroupOutput) ToShareClientGroupOutput() ShareClientGroupOutput {
	return o
}

func (o ShareClientGroupOutput) ToShareClientGroupOutputWithContext(ctx context.Context) ShareClientGroupOutput {
	return o
}

// Optional description for the clients groups.
func (o ShareClientGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShareClientGroup) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// A singular host allowed to connect to the share. The host can be specified as IP address and can be either IPv4 or IPv6.
func (o ShareClientGroupOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ShareClientGroup) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// The allowed host or network to which the export is being shared. The IP address can be either IPv4 or IPv6 and has to be given with CIDR notation.
func (o ShareClientGroupOutput) IpNetworks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ShareClientGroup) []string { return v.IpNetworks }).(pulumi.StringArrayOutput)
}

// NFS specific configurations. Each configuration includes:
func (o ShareClientGroupOutput) Nfs() ShareClientGroupNfsPtrOutput {
	return o.ApplyT(func(v ShareClientGroup) *ShareClientGroupNfs { return v.Nfs }).(ShareClientGroupNfsPtrOutput)
}

type ShareClientGroupArrayOutput struct{ *pulumi.OutputState }

func (ShareClientGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ShareClientGroup)(nil)).Elem()
}

func (o ShareClientGroupArrayOutput) ToShareClientGroupArrayOutput() ShareClientGroupArrayOutput {
	return o
}

func (o ShareClientGroupArrayOutput) ToShareClientGroupArrayOutputWithContext(ctx context.Context) ShareClientGroupArrayOutput {
	return o
}

func (o ShareClientGroupArrayOutput) Index(i pulumi.IntInput) ShareClientGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ShareClientGroup {
		return vs[0].([]ShareClientGroup)[vs[1].(int)]
	}).(ShareClientGroupOutput)
}

type ShareClientGroupNfs struct {
	// The squash mode for the export. The squash mode can be:
	Squash *string `pulumi:"squash"`
}

// ShareClientGroupNfsInput is an input type that accepts ShareClientGroupNfsArgs and ShareClientGroupNfsOutput values.
// You can construct a concrete instance of `ShareClientGroupNfsInput` via:
//
//	ShareClientGroupNfsArgs{...}
type ShareClientGroupNfsInput interface {
	pulumi.Input

	ToShareClientGroupNfsOutput() ShareClientGroupNfsOutput
	ToShareClientGroupNfsOutputWithContext(context.Context) ShareClientGroupNfsOutput
}

type ShareClientGroupNfsArgs struct {
	// The squash mode for the export. The squash mode can be:
	Squash pulumi.StringPtrInput `pulumi:"squash"`
}

func (ShareClientGroupNfsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShareClientGroupNfs)(nil)).Elem()
}

func (i ShareClientGroupNfsArgs) ToShareClientGroupNfsOutput() ShareClientGroupNfsOutput {
	return i.ToShareClientGroupNfsOutputWithContext(context.Background())
}

func (i ShareClientGroupNfsArgs) ToShareClientGroupNfsOutputWithContext(ctx context.Context) ShareClientGroupNfsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareClientGroupNfsOutput)
}

func (i ShareClientGroupNfsArgs) ToShareClientGroupNfsPtrOutput() ShareClientGroupNfsPtrOutput {
	return i.ToShareClientGroupNfsPtrOutputWithContext(context.Background())
}

func (i ShareClientGroupNfsArgs) ToShareClientGroupNfsPtrOutputWithContext(ctx context.Context) ShareClientGroupNfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareClientGroupNfsOutput).ToShareClientGroupNfsPtrOutputWithContext(ctx)
}

// ShareClientGroupNfsPtrInput is an input type that accepts ShareClientGroupNfsArgs, ShareClientGroupNfsPtr and ShareClientGroupNfsPtrOutput values.
// You can construct a concrete instance of `ShareClientGroupNfsPtrInput` via:
//
//	        ShareClientGroupNfsArgs{...}
//
//	or:
//
//	        nil
type ShareClientGroupNfsPtrInput interface {
	pulumi.Input

	ToShareClientGroupNfsPtrOutput() ShareClientGroupNfsPtrOutput
	ToShareClientGroupNfsPtrOutputWithContext(context.Context) ShareClientGroupNfsPtrOutput
}

type shareClientGroupNfsPtrType ShareClientGroupNfsArgs

func ShareClientGroupNfsPtr(v *ShareClientGroupNfsArgs) ShareClientGroupNfsPtrInput {
	return (*shareClientGroupNfsPtrType)(v)
}

func (*shareClientGroupNfsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ShareClientGroupNfs)(nil)).Elem()
}

func (i *shareClientGroupNfsPtrType) ToShareClientGroupNfsPtrOutput() ShareClientGroupNfsPtrOutput {
	return i.ToShareClientGroupNfsPtrOutputWithContext(context.Background())
}

func (i *shareClientGroupNfsPtrType) ToShareClientGroupNfsPtrOutputWithContext(ctx context.Context) ShareClientGroupNfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareClientGroupNfsPtrOutput)
}

type ShareClientGroupNfsOutput struct{ *pulumi.OutputState }

func (ShareClientGroupNfsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShareClientGroupNfs)(nil)).Elem()
}

func (o ShareClientGroupNfsOutput) ToShareClientGroupNfsOutput() ShareClientGroupNfsOutput {
	return o
}

func (o ShareClientGroupNfsOutput) ToShareClientGroupNfsOutputWithContext(ctx context.Context) ShareClientGroupNfsOutput {
	return o
}

func (o ShareClientGroupNfsOutput) ToShareClientGroupNfsPtrOutput() ShareClientGroupNfsPtrOutput {
	return o.ToShareClientGroupNfsPtrOutputWithContext(context.Background())
}

func (o ShareClientGroupNfsOutput) ToShareClientGroupNfsPtrOutputWithContext(ctx context.Context) ShareClientGroupNfsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ShareClientGroupNfs) *ShareClientGroupNfs {
		return &v
	}).(ShareClientGroupNfsPtrOutput)
}

// The squash mode for the export. The squash mode can be:
func (o ShareClientGroupNfsOutput) Squash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShareClientGroupNfs) *string { return v.Squash }).(pulumi.StringPtrOutput)
}

type ShareClientGroupNfsPtrOutput struct{ *pulumi.OutputState }

func (ShareClientGroupNfsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShareClientGroupNfs)(nil)).Elem()
}

func (o ShareClientGroupNfsPtrOutput) ToShareClientGroupNfsPtrOutput() ShareClientGroupNfsPtrOutput {
	return o
}

func (o ShareClientGroupNfsPtrOutput) ToShareClientGroupNfsPtrOutputWithContext(ctx context.Context) ShareClientGroupNfsPtrOutput {
	return o
}

func (o ShareClientGroupNfsPtrOutput) Elem() ShareClientGroupNfsOutput {
	return o.ApplyT(func(v *ShareClientGroupNfs) ShareClientGroupNfs {
		if v != nil {
			return *v
		}
		var ret ShareClientGroupNfs
		return ret
	}).(ShareClientGroupNfsOutput)
}

// The squash mode for the export. The squash mode can be:
func (o ShareClientGroupNfsPtrOutput) Squash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShareClientGroupNfs) *string {
		if v == nil {
			return nil
		}
		return v.Squash
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterConnectionsInput)(nil)).Elem(), ClusterConnectionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterConnectionsPtrInput)(nil)).Elem(), ClusterConnectionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterNfsInput)(nil)).Elem(), ClusterNfsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterNfsPtrInput)(nil)).Elem(), ClusterNfsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShareClientGroupInput)(nil)).Elem(), ShareClientGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShareClientGroupArrayInput)(nil)).Elem(), ShareClientGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShareClientGroupNfsInput)(nil)).Elem(), ShareClientGroupNfsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShareClientGroupNfsPtrInput)(nil)).Elem(), ShareClientGroupNfsArgs{})
	pulumi.RegisterOutputType(ClusterConnectionsOutput{})
	pulumi.RegisterOutputType(ClusterConnectionsPtrOutput{})
	pulumi.RegisterOutputType(ClusterNfsOutput{})
	pulumi.RegisterOutputType(ClusterNfsPtrOutput{})
	pulumi.RegisterOutputType(ShareClientGroupOutput{})
	pulumi.RegisterOutputType(ShareClientGroupArrayOutput{})
	pulumi.RegisterOutputType(ShareClientGroupNfsOutput{})
	pulumi.RegisterOutputType(ShareClientGroupNfsPtrOutput{})
}
