// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **Group data source** can be used to search for and return existing groups.
// If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
// When this happens, please refine your search string so that it is specific enough to return only one result.
//
// ## Example Usage
//
// ### By Name
// ```go
// package main
//
// import (
//
//	"github.com/ionos-cloud/pulumi-ionoscloud/sdk/go/ionoscloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ionoscloud.GetGroup(ctx, &ionoscloud.GetGroupArgs{
//				Name: pulumi.StringRef("Group Example"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetGroup(ctx *pulumi.Context, args *GetGroupArgs, opts ...pulumi.InvokeOption) (*GetGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetGroupResult
	err := ctx.Invoke("ionoscloud:index/getGroup:getGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGroup.
type GetGroupArgs struct {
	// ID of the group you want to search for.
	//
	// Either `name` or `id` must be provided. If none, or both are provided, the datasource will return an error.
	Id *string `pulumi:"id"`
	// Name of an existing group that you want to search for.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getGroup.
type GetGroupResult struct {
	// The group will be allowed to access the activity log.
	AccessActivityLog bool `pulumi:"accessActivityLog"`
	// The group will be allowed to access and manage certificates.
	AccessAndManageCertificates bool `pulumi:"accessAndManageCertificates"`
	// The group will be allowed to access and manage monitoring.
	AccessAndManageMonitoring bool `pulumi:"accessAndManageMonitoring"`
	// The group will be allowed to create backup unit privilege.
	CreateBackupUnit bool `pulumi:"createBackupUnit"`
	// The group will be allowed to create virtual data centers.
	CreateDatacenter bool `pulumi:"createDatacenter"`
	// The group will be allowed to create flow log.
	CreateFlowLog bool `pulumi:"createFlowLog"`
	// The group will be allowed to create internet access privilege.
	CreateInternetAccess bool `pulumi:"createInternetAccess"`
	// The group will be allowed to create kubernetes cluster privilege.
	CreateK8sCluster bool `pulumi:"createK8sCluster"`
	// The group will be allowed to create Cross Connects privilege.
	CreatePcc bool `pulumi:"createPcc"`
	// The group will be allowed to create snapshots.
	CreateSnapshot bool `pulumi:"createSnapshot"`
	// The id of the group.
	Id *string `pulumi:"id"`
	// Privilege for a group to manage DBaaS related functionality.
	ManageDbaas bool `pulumi:"manageDbaas"`
	// A name for the group.
	Name *string `pulumi:"name"`
	// The group will be allowed to reserve IP addresses.
	ReserveIp bool `pulumi:"reserveIp"`
	// The group will have S3 privilege.
	S3Privilege bool `pulumi:"s3Privilege"`
	// List of users in group.
	Users []GetGroupUser `pulumi:"users"`
}

func GetGroupOutput(ctx *pulumi.Context, args GetGroupOutputArgs, opts ...pulumi.InvokeOption) GetGroupResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetGroupResultOutput, error) {
			args := v.(GetGroupArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ionoscloud:index/getGroup:getGroup", args, GetGroupResultOutput{}, options).(GetGroupResultOutput), nil
		}).(GetGroupResultOutput)
}

// A collection of arguments for invoking getGroup.
type GetGroupOutputArgs struct {
	// ID of the group you want to search for.
	//
	// Either `name` or `id` must be provided. If none, or both are provided, the datasource will return an error.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of an existing group that you want to search for.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GetGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupArgs)(nil)).Elem()
}

// A collection of values returned by getGroup.
type GetGroupResultOutput struct{ *pulumi.OutputState }

func (GetGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupResult)(nil)).Elem()
}

func (o GetGroupResultOutput) ToGetGroupResultOutput() GetGroupResultOutput {
	return o
}

func (o GetGroupResultOutput) ToGetGroupResultOutputWithContext(ctx context.Context) GetGroupResultOutput {
	return o
}

// The group will be allowed to access the activity log.
func (o GetGroupResultOutput) AccessActivityLog() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupResult) bool { return v.AccessActivityLog }).(pulumi.BoolOutput)
}

// The group will be allowed to access and manage certificates.
func (o GetGroupResultOutput) AccessAndManageCertificates() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupResult) bool { return v.AccessAndManageCertificates }).(pulumi.BoolOutput)
}

// The group will be allowed to access and manage monitoring.
func (o GetGroupResultOutput) AccessAndManageMonitoring() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupResult) bool { return v.AccessAndManageMonitoring }).(pulumi.BoolOutput)
}

// The group will be allowed to create backup unit privilege.
func (o GetGroupResultOutput) CreateBackupUnit() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupResult) bool { return v.CreateBackupUnit }).(pulumi.BoolOutput)
}

// The group will be allowed to create virtual data centers.
func (o GetGroupResultOutput) CreateDatacenter() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupResult) bool { return v.CreateDatacenter }).(pulumi.BoolOutput)
}

// The group will be allowed to create flow log.
func (o GetGroupResultOutput) CreateFlowLog() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupResult) bool { return v.CreateFlowLog }).(pulumi.BoolOutput)
}

// The group will be allowed to create internet access privilege.
func (o GetGroupResultOutput) CreateInternetAccess() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupResult) bool { return v.CreateInternetAccess }).(pulumi.BoolOutput)
}

// The group will be allowed to create kubernetes cluster privilege.
func (o GetGroupResultOutput) CreateK8sCluster() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupResult) bool { return v.CreateK8sCluster }).(pulumi.BoolOutput)
}

// The group will be allowed to create Cross Connects privilege.
func (o GetGroupResultOutput) CreatePcc() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupResult) bool { return v.CreatePcc }).(pulumi.BoolOutput)
}

// The group will be allowed to create snapshots.
func (o GetGroupResultOutput) CreateSnapshot() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupResult) bool { return v.CreateSnapshot }).(pulumi.BoolOutput)
}

// The id of the group.
func (o GetGroupResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGroupResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Privilege for a group to manage DBaaS related functionality.
func (o GetGroupResultOutput) ManageDbaas() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupResult) bool { return v.ManageDbaas }).(pulumi.BoolOutput)
}

// A name for the group.
func (o GetGroupResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGroupResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The group will be allowed to reserve IP addresses.
func (o GetGroupResultOutput) ReserveIp() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupResult) bool { return v.ReserveIp }).(pulumi.BoolOutput)
}

// The group will have S3 privilege.
func (o GetGroupResultOutput) S3Privilege() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupResult) bool { return v.S3Privilege }).(pulumi.BoolOutput)
}

// List of users in group.
func (o GetGroupResultOutput) Users() GetGroupUserArrayOutput {
	return o.ApplyT(func(v GetGroupResult) []GetGroupUser { return v.Users }).(GetGroupUserArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetGroupResultOutput{})
}
